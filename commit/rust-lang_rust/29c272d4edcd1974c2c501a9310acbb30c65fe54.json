{"sha": "29c272d4edcd1974c2c501a9310acbb30c65fe54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YzI3MmQ0ZWRjZDE5NzRjMmM1MDFhOTMxMGFjYmIzMGM2NWZlNTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:14:56Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:10:24Z"}, "message": "Take const into account in context\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "fea47302bf8d6a0582d2cb87aa87d88ae83f8f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fea47302bf8d6a0582d2cb87aa87d88ae83f8f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c272d4edcd1974c2c501a9310acbb30c65fe54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c272d4edcd1974c2c501a9310acbb30c65fe54", "html_url": "https://github.com/rust-lang/rust/commit/29c272d4edcd1974c2c501a9310acbb30c65fe54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c272d4edcd1974c2c501a9310acbb30c65fe54/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63b7572d0df999ce6d2a9e62878b36e44a81df05", "url": "https://api.github.com/repos/rust-lang/rust/commits/63b7572d0df999ce6d2a9e62878b36e44a81df05", "html_url": "https://github.com/rust-lang/rust/commit/63b7572d0df999ce6d2a9e62878b36e44a81df05"}], "stats": {"total": 100, "additions": 74, "deletions": 26}, "files": [{"sha": "f6e6067bb6fc8ebf103049c98c2b2b994689ee41", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 74, "deletions": 26, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/29c272d4edcd1974c2c501a9310acbb30c65fe54/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c272d4edcd1974c2c501a9310acbb30c65fe54/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=29c272d4edcd1974c2c501a9310acbb30c65fe54", "patch": "@@ -21,8 +21,8 @@ use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::{self, Mir, interpret, ProjectionKind};\n-use crate::mir::interpret::Allocation;\n-use crate::ty::subst::{Kind, InternalSubsts, Subst, SubstsRef};\n+use crate::mir::interpret::{ConstValue, Allocation};\n+use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n@@ -31,8 +31,9 @@ use crate::ty::{TyS, TyKind, List};\n use crate::ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use crate::ty::RegionKind;\n-use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n+use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid, ConstVid};\n use crate::ty::TyKind::*;\n+use crate::ty::{InferConst, ParamConst};\n use crate::ty::GenericParamDefKind;\n use crate::ty::layout::{LayoutDetails, TargetDataLayout, VariantIdx};\n use crate::ty::query;\n@@ -872,6 +873,18 @@ impl CanonicalUserType<'gcx> {\n                             }\n                             _ => false,\n                         },\n+\n+                        UnpackedKind::Const(ct) => match ct {\n+                            ty::LazyConst::Evaluated(ty::Const {\n+                                val: ConstValue::Infer(InferConst::Canonical(debruijn, b)),\n+                                ..\n+                            }) => {\n+                                // We only allow a `ty::INNERMOST` index in substitutions.\n+                                assert_eq!(*debruijn, ty::INNERMOST);\n+                                cvar == *b\n+                            }\n+                            _ => false,\n+                        },\n                     }\n                 })\n             },\n@@ -2120,15 +2133,19 @@ macro_rules! sty_debug_print {\n             #[derive(Copy, Clone)]\n             struct DebugStat {\n                 total: usize,\n-                region_infer: usize,\n+                lt_infer: usize,\n                 ty_infer: usize,\n-                both_infer: usize,\n+                ct_infer: usize,\n+                all_infer: usize,\n             }\n \n             pub fn go(tcx: TyCtxt<'_, '_, '_>) {\n                 let mut total = DebugStat {\n                     total: 0,\n-                    region_infer: 0, ty_infer: 0, both_infer: 0,\n+                    lt_infer: 0,\n+                    ty_infer: 0,\n+                    ct_infer: 0,\n+                    all_infer: 0,\n                 };\n                 $(let mut $variant = total;)*\n \n@@ -2139,31 +2156,35 @@ macro_rules! sty_debug_print {\n                         ty::Error => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };\n-                    let region = t.flags.intersects(ty::TypeFlags::HAS_RE_INFER);\n+                    let lt = t.flags.intersects(ty::TypeFlags::HAS_RE_INFER);\n                     let ty = t.flags.intersects(ty::TypeFlags::HAS_TY_INFER);\n+                    let ct = t.flags.intersects(ty::TypeFlags::HAS_CT_INFER);\n \n                     variant.total += 1;\n                     total.total += 1;\n-                    if region { total.region_infer += 1; variant.region_infer += 1 }\n+                    if lt { total.lt_infer += 1; variant.lt_infer += 1 }\n                     if ty { total.ty_infer += 1; variant.ty_infer += 1 }\n-                    if region && ty { total.both_infer += 1; variant.both_infer += 1 }\n+                    if ct { total.ct_infer += 1; variant.ct_infer += 1 }\n+                    if lt && ty && ct { total.all_infer += 1; variant.all_infer += 1 }\n                 }\n-                println!(\"Ty interner             total           ty region  both\");\n+                println!(\"Ty interner             total           ty lt ct all\");\n                 $(println!(\"    {:18}: {uses:6} {usespc:4.1}%, \\\n-                            {ty:4.1}% {region:5.1}% {both:4.1}%\",\n-                           stringify!($variant),\n-                           uses = $variant.total,\n-                           usespc = $variant.total as f64 * 100.0 / total.total as f64,\n-                           ty = $variant.ty_infer as f64 * 100.0  / total.total as f64,\n-                           region = $variant.region_infer as f64 * 100.0  / total.total as f64,\n-                           both = $variant.both_infer as f64 * 100.0  / total.total as f64);\n-                  )*\n+                            {ty:4.1}% {lt:5.1}% {ct:4.1}% {all:4.1}%\",\n+                    stringify!($variant),\n+                    uses = $variant.total,\n+                    usespc = $variant.total as f64 * 100.0 / total.total as f64,\n+                    ty = $variant.ty_infer as f64 * 100.0  / total.total as f64,\n+                    lt = $variant.lt_infer as f64 * 100.0  / total.total as f64,\n+                    ct = $variant.ct_infer as f64 * 100.0  / total.total as f64,\n+                    all = $variant.all_infer as f64 * 100.0  / total.total as f64);\n+                )*\n                 println!(\"                  total {uses:6}        \\\n-                          {ty:4.1}% {region:5.1}% {both:4.1}%\",\n-                         uses = total.total,\n-                         ty = total.ty_infer as f64 * 100.0  / total.total as f64,\n-                         region = total.region_infer as f64 * 100.0  / total.total as f64,\n-                         both = total.both_infer as f64 * 100.0  / total.total as f64)\n+                          {ty:4.1}% {lt:5.1}% {ct:4.1}% {all:4.1}%\",\n+                    uses = total.total,\n+                    ty = total.ty_infer as f64 * 100.0  / total.total as f64,\n+                    lt = total.lt_infer as f64 * 100.0  / total.total as f64,\n+                    ct = total.ct_infer as f64 * 100.0  / total.total as f64,\n+                    all = total.all_infer as f64 * 100.0  / total.total as f64)\n             }\n         }\n \n@@ -2518,7 +2539,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let adt_def = self.adt_def(def_id);\n         let substs = InternalSubsts::for_item(self, def_id, |param, substs| {\n             match param.kind {\n-                GenericParamDefKind::Lifetime => bug!(),\n+                GenericParamDefKind::Lifetime |\n+                GenericParamDefKind::Const => {\n+                    bug!()\n+                }\n                 GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n                         ty.into()\n@@ -2659,10 +2683,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_var(self, v: TyVid) -> Ty<'tcx> {\n+    pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n         self.mk_infer(TyVar(v))\n     }\n \n+    #[inline]\n+    pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx LazyConst<'tcx> {\n+        self.mk_lazy_const(LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Infer(InferConst::Var(v)),\n+            ty,\n+        }))\n+    }\n+\n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n         self.mk_infer(IntVar(v))\n@@ -2685,6 +2717,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(Param(ParamTy { idx: index, name: name }))\n     }\n \n+    #[inline]\n+    pub fn mk_const_param(\n+        self,\n+        index: u32,\n+        name: InternedString,\n+        ty: Ty<'tcx>\n+    ) -> &'tcx LazyConst<'tcx> {\n+        self.mk_lazy_const(LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Param(ParamConst { index, name }),\n+            ty,\n+        }))\n+    }\n+\n     #[inline]\n     pub fn mk_self_type(self) -> Ty<'tcx> {\n         self.mk_ty_param(0, keywords::SelfUpper.name().as_interned_str())\n@@ -2695,7 +2740,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             GenericParamDefKind::Lifetime => {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n-            GenericParamDefKind::Type {..} => self.mk_ty_param(param.index, param.name).into(),\n+            GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n+            GenericParamDefKind::Const => {\n+                self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()\n+            }\n         }\n     }\n "}]}