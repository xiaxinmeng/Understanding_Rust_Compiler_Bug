{"sha": "811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "node_id": "C_kwDOAAsO6NoAKDgxMWExY2FiZGExOWVhNGQ2YzY2MzZlNDNkYzc2MGEzZmNjNjg1ZmQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-28T16:05:37Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-01T15:56:39Z"}, "message": "Make associated_item_def_ids for traits use an unstable option to also return associated types for RPITITs", "tree": {"sha": "00c6b54c7ec57dc7504c614c192ddf8a4774138f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c6b54c7ec57dc7504c614c192ddf8a4774138f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmP/dbcACgkQgTGiTgx5\n76/wqxAAlZRZZsWMl3KOnnWb64w0NMFA+16393zFmC/PwZIMNGaN7QFNk5THd4ip\nEuNS+zHjDtswQu176yTp6Yc3dcuk4tXe88Wir5XSt+JGo4OgfEwuzuBUf/lOVTRl\n6PeXIekTIJeoNmvot8mbrZm/gZ4h5R/3zsLSFdepuKRcvlSIHEFF9p8ZslViyjJB\nhHmcRHAMzy2lpCv6uKJAbHcFHotiEjiVzyuCVAKWKSOIQNn/PbgIJ0fB2HaJfZ5q\njuGHs1NDBSRfcWNthY32bN7759PdUHzlXtv4bTBAKExOEV+tUJK31paye512dCy7\nbVyloBnUKBkhWdXp+LvpEAjHHaPW23qGGUjhDc98HipAxkHoH8xHKLAlhC/hfpVi\n3ISUx6uPfhP/hm6jWSimRnb93PxCNXCOmSPaTtE8lNf5JBLchXlCu3wtApFTeQv6\ngJLZ32TRHjO0L/kK2/I/Cu6ABXqAs3rfg/Biyp8OHmrHXoNsHnI0tBbL5PBBPmj4\n+Z94UnRZD/aKF2M1vV35+wnK/rQmH8ZjnxxGx++AydWIhMp9S2Uip4I4xjJHVfYU\nRH4G/xWKnpRdCLgsoUfOoniFGqs1kWUpdE4vLPaxRCmA2STFyf0q1gmib95u5x04\nEJgaBJHr+Ns7/leU3dhbJ8HhqX3QCzzW4GANODNqdyV7dt7kfDw=\n=Nlyt\n-----END PGP SIGNATURE-----", "payload": "tree 00c6b54c7ec57dc7504c614c192ddf8a4774138f\nparent be72beca68512a81e4a7fba6d1a0d4955566abe4\nauthor Santiago Pastorino <spastorino@gmail.com> 1677600337 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1677686199 -0300\n\nMake associated_item_def_ids for traits use an unstable option to also return associated types for RPITITs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "html_url": "https://github.com/rust-lang/rust/commit/811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811a1cabda19ea4d6c6636e43dc760a3fcc685fd/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be72beca68512a81e4a7fba6d1a0d4955566abe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/be72beca68512a81e4a7fba6d1a0d4955566abe4", "html_url": "https://github.com/rust-lang/rust/commit/be72beca68512a81e4a7fba6d1a0d4955566abe4"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "51feae3cf8a6184ba9f23e5d381ae75d4fc3b1ce", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/811a1cabda19ea4d6c6636e43dc760a3fcc685fd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811a1cabda19ea4d6c6636e43dc760a3fcc685fd/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "patch": "@@ -90,6 +90,7 @@ rustc_queries! {\n     /// Definitions that were generated with no HIR, would be feeded to return `None`.\n     query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        feedable\n     }\n \n     /// Gives access to the HIR node's parent for the HIR owner `key`.\n@@ -166,6 +167,7 @@ rustc_queries! {\n         }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n@@ -222,6 +224,7 @@ rustc_queries! {\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n@@ -264,6 +267,7 @@ rustc_queries! {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Elaborated version of the predicates from `explicit_item_bounds`.\n@@ -588,6 +592,7 @@ rustc_queries! {\n         desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n@@ -596,6 +601,7 @@ rustc_queries! {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Maps from the `DefId` of a trait to the list of\n@@ -728,6 +734,7 @@ rustc_queries! {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n@@ -1142,6 +1149,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     /// The `opt_rpitit_info` query returns the pair of the def id of the function where the RPIT\n@@ -1165,6 +1173,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query lookup_stability(def_id: DefId) -> Option<attr::Stability> {\n@@ -1506,6 +1515,7 @@ rustc_queries! {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n         separate_provide_extern\n+        feedable\n     }\n \n     query check_well_formed(key: hir::OwnerId) -> () {\n@@ -1703,6 +1713,7 @@ rustc_queries! {\n     query visibility(def_id: DefId) -> ty::Visibility<DefId> {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n+        feedable\n     }\n \n     query inhabited_predicate_adt(key: DefId) -> ty::inhabitedness::InhabitedPredicate<'tcx> {"}, {"sha": "efbbfe6c24b560c5f64251a6edd250255587e4a2", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 89, "deletions": 5, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/811a1cabda19ea4d6c6636e43dc760a3fcc685fd/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811a1cabda19ea4d6c6636e43dc760a3fcc685fd/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=811a1cabda19ea4d6c6636e43dc760a3fcc685fd", "patch": "@@ -4,7 +4,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n+use rustc_middle::ty::{self, DefIdTree, ImplTraitInTraitData, InternalSubsts, TyCtxt};\n+use rustc_span::symbol::kw;\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n@@ -21,9 +22,37 @@ pub fn provide(providers: &mut ty::query::Providers) {\n fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     let item = tcx.hir().expect_item(def_id.expect_local());\n     match item.kind {\n-        hir::ItemKind::Trait(.., ref trait_item_refs) => tcx.arena.alloc_from_iter(\n-            trait_item_refs.iter().map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n-        ),\n+        hir::ItemKind::Trait(.., ref trait_item_refs) => {\n+            if tcx.sess.opts.unstable_opts.lower_impl_trait_in_trait_to_assoc_ty {\n+                // We collect RPITITs for each trait method's return type and create a\n+                // corresponding associated item using associated_items_for_impl_trait_in_trait\n+                // query.\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id())\n+                        .chain(\n+                            trait_item_refs\n+                                .iter()\n+                                .filter(|trait_item_ref| {\n+                                    matches!(trait_item_ref.kind, hir::AssocItemKind::Fn { .. })\n+                                })\n+                                .flat_map(|trait_item_ref| {\n+                                    let trait_fn_def_id =\n+                                        trait_item_ref.id.owner_id.def_id.to_def_id();\n+                                    tcx.associated_items_for_impl_trait_in_trait(trait_fn_def_id)\n+                                })\n+                                .map(|def_id| *def_id),\n+                        ),\n+                )\n+            } else {\n+                tcx.arena.alloc_from_iter(\n+                    trait_item_refs\n+                        .iter()\n+                        .map(|trait_item_ref| trait_item_ref.id.owner_id.to_def_id()),\n+                )\n+            }\n+        }\n         hir::ItemKind::Impl(ref impl_) => tcx.arena.alloc_from_iter(\n             impl_.items.iter().map(|impl_item_ref| impl_item_ref.id.owner_id.to_def_id()),\n         ),\n@@ -193,7 +222,62 @@ fn associated_item_for_impl_trait_in_trait(\n     let span = tcx.def_span(opaque_ty_def_id);\n     let trait_assoc_ty =\n         tcx.at(span).create_def(trait_def_id.expect_local(), DefPathData::ImplTraitAssocTy);\n-    trait_assoc_ty.def_id()\n+\n+    let local_def_id = trait_assoc_ty.def_id();\n+    let def_id = local_def_id.to_def_id();\n+\n+    trait_assoc_ty.opt_def_kind(Some(DefKind::AssocTy));\n+\n+    // There's no HIR associated with this new synthesized `def_id`, so feed\n+    // `opt_local_def_id_to_hir_id` with `None`.\n+    trait_assoc_ty.opt_local_def_id_to_hir_id(None);\n+\n+    // Copy span of the opaque.\n+    trait_assoc_ty.def_ident_span(Some(span));\n+\n+    // Add the def_id of the function and opaque that generated this synthesized associated type.\n+    trait_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Trait {\n+        fn_def_id,\n+        opaque_def_id: opaque_ty_def_id.to_def_id(),\n+    }));\n+\n+    trait_assoc_ty.associated_item(ty::AssocItem {\n+        name: kw::Empty,\n+        kind: ty::AssocKind::Type,\n+        def_id,\n+        trait_item_def_id: None,\n+        container: ty::TraitContainer,\n+        fn_has_self_parameter: false,\n+    });\n+\n+    // Copy visility of the containing function.\n+    trait_assoc_ty.visibility(tcx.visibility(fn_def_id));\n+\n+    // Copy impl_defaultness of the containing function.\n+    trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n+\n+    // Copy type_of of the opaque.\n+    trait_assoc_ty.type_of(ty::EarlyBinder(tcx.mk_opaque(\n+        opaque_ty_def_id.to_def_id(),\n+        InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n+    )));\n+\n+    // Copy generics_of of the opaque.\n+    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+\n+    // There are no predicates for the synthesized associated type.\n+    trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {\n+        parent: Some(trait_def_id),\n+        predicates: &[],\n+    });\n+\n+    // There are no inferred outlives for the synthesized associated type.\n+    trait_assoc_ty.inferred_outlives_of(&[]);\n+\n+    // FIXME implement this.\n+    trait_assoc_ty.explicit_item_bounds(&[]);\n+\n+    local_def_id\n }\n \n /// Given an `trait_assoc_def_id` that corresponds to a previously synthesized impl trait in trait"}]}