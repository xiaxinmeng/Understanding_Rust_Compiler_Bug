{"sha": "3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzA5YzgzODBlZDIyZDRhYTliM2IwODk2Yjg4NzA3YjQwMzRiM2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-06T22:48:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-07T00:36:28Z"}, "message": "Use consistent span for repr attr suggestion", "tree": {"sha": "981b5ceb238c22e369b104966e2222c089817bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981b5ceb238c22e369b104966e2222c089817bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "html_url": "https://github.com/rust-lang/rust/commit/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3810f61da08bc986ffd854361e957e4b8d42560", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3810f61da08bc986ffd854361e957e4b8d42560", "html_url": "https://github.com/rust-lang/rust/commit/b3810f61da08bc986ffd854361e957e4b8d42560"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "d95e0d77d86d388a140e5491e215ec67219750df", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "patch": "@@ -687,6 +687,18 @@ impl EarlyLintPass for BadRepr {\n     fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n         if attr.name() == \"repr\" {\n             let list = attr.meta_item_list();\n+            let outer = match attr.style {\n+                ast::AttrStyle::Outer => true,\n+                ast::AttrStyle::Inner => false,\n+            };\n+\n+            let repr_str = move |lit: &str| {\n+                if outer {\n+                    format!(\"#[repr({})]\", lit)\n+                } else {\n+                    format!(\"#![repr({})]\", lit)\n+                }\n+            };\n \n             // Emit warnings with `repr` either has a literal assignment (`#[repr = \"C\"]`) or\n             // no hints (``#[repr]`)\n@@ -695,33 +707,28 @@ impl EarlyLintPass for BadRepr {\n                 let mut suggested = false;\n                 let mut warn = if let Some(ref lit) = attr.value_str() {\n                     // avoid warning about empty `repr` on `#[repr = \"foo\"]`\n-                    let sp = match format!(\"{}\", lit).as_ref() {\n+                    let mut warn = cx.struct_span_lint(\n+                        BAD_REPR,\n+                        attr.span,\n+                        \"`repr` attribute isn't configurable with a literal\",\n+                    );\n+                    match format!(\"{}\", lit).as_ref() {\n                         | \"C\" | \"packed\" | \"rust\" | \"transparent\"\n                         | \"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"usize\"\n                         | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" | \"isize\" => {\n-                            let lo = attr.span.lo() + BytePos(2);\n-                            let hi = attr.span.hi() - BytePos(1);\n+                            // if the literal could have been a valid `repr` arg,\n+                            // suggest the correct syntax\n+                            warn.span_suggestion(\n+                                attr.span,\n+                                \"give `repr` a hint\",\n+                                repr_str(&lit.as_str()),\n+                            );\n                             suggested = true;\n-                            attr.span.with_lo(lo).with_hi(hi)\n                         }\n-                        _ => attr.span,  // the literal wasn't a valid `repr` arg\n+                        _ => {  // the literal wasn't a valid `repr` arg\n+                            warn.span_label(attr.span, \"needs a hint\");\n+                        }\n                     };\n-                    let mut warn = cx.struct_span_lint(\n-                        BAD_REPR,\n-                        sp,\n-                        \"`repr` attribute isn't configurable with a literal\",\n-                    );\n-                    if suggested {\n-                        // if the literal could have been a valid `repr` arg,\n-                        // suggest the correct syntax\n-                        warn.span_suggestion(\n-                            sp,\n-                            \"give `repr` a hint\",\n-                            format!(\"repr({})\", lit),\n-                        );\n-                    } else {\n-                        warn.span_label(attr.span, \"needs a hint\");\n-                    }\n                     warn\n                 } else {\n                     let mut warn = cx.struct_span_lint(\n@@ -733,8 +740,13 @@ impl EarlyLintPass for BadRepr {\n                     warn\n                 };\n                 if !suggested {\n-                    warn.help(\"valid hints include `#[repr(C)]`, `#[repr(packed)]`, \\\n-                               `#[repr(rust)]` and `#[repr(transparent)]`\");\n+                    warn.help(&format!(\n+                        \"valid hints include `{}`, `{}`, `{}` and `{}`\",\n+                        repr_str(\"C\"),\n+                        repr_str(\"packed\"),\n+                        repr_str(\"rust\"),\n+                        repr_str(\"transparent\"),\n+                    ));\n                     warn.note(\"for more information, visit \\\n                                <https://doc.rust-lang.org/reference/type-layout.html>\");\n                 }"}, {"sha": "6361af7648258b5b8762640f6f74046294a816e0", "filename": "src/test/compile-fail/issue-43988.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs?ref=3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "patch": "@@ -34,6 +34,7 @@ fn main() {\n     #[repr]\n     let _y = \"123\";\n     //~^^ ERROR attribute should not be applied to a statement\n+    //~| WARN `repr` attribute must have a hint\n \n \n     fn foo() {}\n@@ -44,5 +45,5 @@ fn main() {\n \n     let _z = #[repr] 1;\n     //~^ ERROR attribute should not be applied to an expression\n-\n+    //~| WARN `repr` attribute must have a hint\n }"}, {"sha": "3569eecd883f6e869d3c180de5a0813a3b58992c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "patch": "@@ -193,7 +193,7 @@ LL |     mod inner { #![repr=\"3900\"] }\n    |                 ^^^^^^^^^^^^^^^ needs a hint\n    |\n    = note: #[warn(bad_repr)] on by default\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = help: valid hints include `#![repr(C)]`, `#![repr(packed)]`, `#![repr(rust)]` and `#![repr(transparent)]`\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n@@ -238,7 +238,7 @@ warning: `repr` attribute isn't configurable with a literal\n LL | #![repr                       = \"3900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs a hint\n    |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = help: valid hints include `#![repr(C)]`, `#![repr(packed)]`, `#![repr(rust)]` and `#![repr(transparent)]`\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: unused attribute"}, {"sha": "7a99d8c04488f2c38c8d3a79c1ea6dfdf00bf879", "filename": "src/test/ui/suggestions/repr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cc09c8380ed22d4aa9b3b0896b88707b4034b3b/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr?ref=3cc09c8380ed22d4aa9b3b0896b88707b4034b3b", "patch": "@@ -18,8 +18,8 @@ LL | #[repr = \"B\"]\n    = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n \n warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/repr.rs:21:3\n+  --> $DIR/repr.rs:21:1\n    |\n LL | #[repr = \"C\"]\n-   |   ^^^^^^^^^^ help: give `repr` a hint: `repr(C)`\n+   | ^^^^^^^^^^^^^ help: give `repr` a hint: `#[repr(C)]`\n "}]}