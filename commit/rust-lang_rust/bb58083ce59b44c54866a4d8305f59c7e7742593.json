{"sha": "bb58083ce59b44c54866a4d8305f59c7e7742593", "node_id": "C_kwDOAAsO6NoAKGJiNTgwODNjZTU5YjQ0YzU0ODY2YTRkODMwNWY1OWM3ZTc3NDI1OTM", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-04T06:16:37Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-29T16:59:06Z"}, "message": "new lint: `while_pop_unwrap`", "tree": {"sha": "05f37bd907756648ae72d90c42b964bf5f94ff4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f37bd907756648ae72d90c42b964bf5f94ff4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb58083ce59b44c54866a4d8305f59c7e7742593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb58083ce59b44c54866a4d8305f59c7e7742593", "html_url": "https://github.com/rust-lang/rust/commit/bb58083ce59b44c54866a4d8305f59c7e7742593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb58083ce59b44c54866a4d8305f59c7e7742593/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3594d55439410b9426a4eb81b125b750b1dea36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3594d55439410b9426a4eb81b125b750b1dea36d", "html_url": "https://github.com/rust-lang/rust/commit/3594d55439410b9426a4eb81b125b750b1dea36d"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "da03f5c012b984f1d0e770b2fa6d436205f755eb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -5160,6 +5160,7 @@ Released 2018-09-13\n [`while_immutable_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition\n [`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n [`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator\n+[`while_pop_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_pop_unwrap\n [`wildcard_dependencies`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_dependencies\n [`wildcard_enum_match_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\n [`wildcard_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports"}, {"sha": "ddc4b139670c39810de2b602793ec72141b12094", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -645,6 +645,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::useless_conversion::USELESS_CONVERSION_INFO,\n     crate::vec::USELESS_VEC_INFO,\n     crate::vec_init_then_push::VEC_INIT_THEN_PUSH_INFO,\n+    crate::while_pop_unwrap::WHILE_POP_UNWRAP_INFO,\n     crate::wildcard_imports::ENUM_GLOB_USE_INFO,\n     crate::wildcard_imports::WILDCARD_IMPORTS_INFO,\n     crate::write::PRINTLN_EMPTY_STRING_INFO,"}, {"sha": "0d594612b79650678e83165b713ccec4b77e3924", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -324,6 +324,7 @@ mod use_self;\n mod useless_conversion;\n mod vec;\n mod vec_init_then_push;\n+mod while_pop_unwrap;\n mod wildcard_imports;\n mod write;\n mod zero_div_zero;"}, {"sha": "90012694062e6510bd9bd0a444de5523b7be3054", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -25,6 +25,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use utils::{make_iterator_snippet, IncrementVisitor, InitializeVisitor};\n \n+use crate::while_pop_unwrap;\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for for-loops that manually copy items between\n@@ -643,6 +645,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         if let Some(higher::While { condition, body }) = higher::While::hir(expr) {\n             while_immutable_condition::check(cx, condition, body);\n             missing_spin_loop::check(cx, condition, body);\n+            while_pop_unwrap::check(cx, condition, body);\n         }\n     }\n }"}, {"sha": "fc77febad6b68c03e6b762278da04928ab9bbd58", "filename": "clippy_lints/src/while_pop_unwrap.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwhile_pop_unwrap.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -0,0 +1,126 @@\n+use clippy_utils::{diagnostics::span_lint_and_then, match_def_path, paths, source::snippet};\n+use rustc_errors::Applicability;\n+use rustc_hir::*;\n+use rustc_lint::LateContext;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{symbol::Ident, Span};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Looks for loops that check for emptiness of a `Vec` in the condition and pop an element\n+    /// in the body as a separate operation.\n+    ///\n+    /// ### Why is this bad?\n+    /// Such loops can be written in a more idiomatic way by using a while..let loop and directly\n+    /// pattern matching on the return value of `Vec::pop()`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let mut numbers = vec![1, 2, 3, 4, 5];\n+    /// while !numbers.is_empty() {\n+    ///     let number = numbers.pop().unwrap();\n+    ///     // use `number`\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut numbers = vec![1, 2, 3, 4, 5];\n+    /// while let Some(number) = numbers.pop() {\n+    ///     // use `number`\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub WHILE_POP_UNWRAP,\n+    style,\n+    \"checking for emptiness of a `Vec` in the loop condition and popping an element in the body\"\n+}\n+declare_lint_pass!(WhilePopUnwrap => [WHILE_POP_UNWRAP]);\n+\n+fn report_lint<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pop_span: Span,\n+    ident: Option<Ident>,\n+    loop_span: Span,\n+    receiver_span: Span,\n+) {\n+    span_lint_and_then(\n+        cx,\n+        WHILE_POP_UNWRAP,\n+        pop_span,\n+        \"you seem to be trying to pop elements from a `Vec` in a loop\",\n+        |diag| {\n+            diag.span_suggestion(\n+                loop_span,\n+                \"try\",\n+                format!(\n+                    \"while let Some({}) = {}.pop()\",\n+                    ident.as_ref().map(Ident::as_str).unwrap_or(\"element\"),\n+                    snippet(cx, receiver_span, \"..\")\n+                ),\n+                Applicability::MaybeIncorrect,\n+            )\n+            .note(\"this while loop can be written in a more idiomatic way\");\n+        },\n+    );\n+}\n+\n+fn match_method_call(cx: &LateContext<'_>, expr: &Expr<'_>, method: &[&str]) -> bool {\n+    if let ExprKind::MethodCall(..) = expr.kind\n+        && let Some(id) = cx.typeck_results().type_dependent_def_id(expr.hir_id)\n+        && match_def_path(cx, id, method)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_vec_pop<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+    match_method_call(cx, expr, &paths::VEC_POP)\n+}\n+\n+fn is_vec_pop_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+    if let ExprKind::MethodCall(_, inner, ..) = expr.kind\n+        && (match_method_call(cx, expr, &paths::OPTION_UNWRAP) || match_method_call(cx, expr, &paths::OPTION_EXPECT))\n+        && is_vec_pop(cx, inner)\n+    {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn check_local<'tcx>(cx: &LateContext<'tcx>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n+    if let StmtKind::Local(local) = stmt.kind\n+        && let PatKind::Binding(.., ident, _) = local.pat.kind\n+        && let Some(init) = local.init\n+        && let ExprKind::MethodCall(_, inner, ..) = init.kind\n+        && is_vec_pop_unwrap(cx, init)\n+    {\n+        report_lint(cx, init.span.to(inner.span), Some(ident), loop_span, recv_span);\n+    }\n+}\n+\n+fn check_call_arguments<'tcx>(cx: &LateContext<'tcx>, stmt: &Stmt<'_>, loop_span: Span, recv_span: Span) {\n+    if let StmtKind::Semi(expr) | StmtKind::Expr(expr) = stmt.kind {\n+        if let ExprKind::MethodCall(_, _, args, _) | ExprKind::Call(_, args) = expr.kind {\n+            let offending_arg = args.iter().find_map(|arg| is_vec_pop_unwrap(cx, arg).then(|| arg.span));\n+\n+            if let Some(offending_arg) = offending_arg {\n+                report_lint(cx, offending_arg, None, loop_span, recv_span);\n+            }\n+        }\n+    }\n+}\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, body: &'tcx Expr<'_>) {\n+    if let ExprKind::Unary(UnOp::Not, cond) = cond.kind\n+        && let ExprKind::MethodCall(_, Expr { span: recv_span, .. }, _, _) = cond.kind\n+        && match_method_call(cx, cond, &paths::VEC_IS_EMPTY)\n+        && let ExprKind::Block(body, _) = body.kind\n+        && let Some(stmt) = body.stmts.first()\n+    {\n+        check_local(cx, stmt, cond.span, *recv_span);\n+        check_call_arguments(cx, stmt, cond.span, *recv_span);\n+    }\n+}"}, {"sha": "0f0792fdaa963f366061124a3bf309bee63892ec", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -159,3 +159,7 @@ pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n pub const PTR_NON_NULL: [&str; 4] = [\"core\", \"ptr\", \"non_null\", \"NonNull\"];\n pub const INSTANT_NOW: [&str; 4] = [\"std\", \"time\", \"Instant\", \"now\"];\n pub const INSTANT: [&str; 3] = [\"std\", \"time\", \"Instant\"];\n+pub const VEC_IS_EMPTY: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"is_empty\"];\n+pub const VEC_POP: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"pop\"];\n+pub const OPTION_UNWRAP: [&str; 4] = [\"core\", \"option\", \"Option\", \"unwrap\"];\n+pub const OPTION_EXPECT: [&str; 4] = [\"core\", \"option\", \"Option\", \"expect\"];"}, {"sha": "1b6de8f1f89ead7e54d55e7603c1c78b6847fefc", "filename": "tests/ui/while_pop_unwrap.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/tests%2Fui%2Fwhile_pop_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/tests%2Fui%2Fwhile_pop_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_pop_unwrap.rs?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -0,0 +1,47 @@\n+#![allow(unused)]\n+#![warn(clippy::while_pop_unwrap)]\n+\n+struct VecInStruct {\n+    numbers: Vec<i32>,\n+    unrelated: String,\n+}\n+\n+fn accept_i32(_: i32) {}\n+\n+fn main() {\n+    let mut numbers = vec![1, 2, 3, 4, 5];\n+    while !numbers.is_empty() {\n+        let number = numbers.pop().unwrap();\n+    }\n+\n+    let mut val = VecInStruct {\n+        numbers: vec![1, 2, 3, 4, 5],\n+        unrelated: String::new(),\n+    };\n+    while !val.numbers.is_empty() {\n+        let number = val.numbers.pop().unwrap();\n+    }\n+\n+    while !numbers.is_empty() {\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+\n+    while !numbers.is_empty() {\n+        accept_i32(numbers.pop().expect(\"\"));\n+    }\n+\n+    // This should not warn. It \"conditionally\" pops elements.\n+    while !numbers.is_empty() {\n+        if true {\n+            accept_i32(numbers.pop().unwrap());\n+        }\n+    }\n+\n+    // This should also not warn. It conditionally pops elements.\n+    while !numbers.is_empty() {\n+        if false {\n+            continue;\n+        }\n+        accept_i32(numbers.pop().unwrap());\n+    }\n+}"}, {"sha": "8dc77db8b5a85ce11b4f541680dcd22d7edb5f7e", "filename": "tests/ui/while_pop_unwrap.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bb58083ce59b44c54866a4d8305f59c7e7742593/tests%2Fui%2Fwhile_pop_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb58083ce59b44c54866a4d8305f59c7e7742593/tests%2Fui%2Fwhile_pop_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_pop_unwrap.stderr?ref=bb58083ce59b44c54866a4d8305f59c7e7742593", "patch": "@@ -0,0 +1,43 @@\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/while_pop_unwrap.rs:14:22\n+   |\n+LL |     while !numbers.is_empty() {\n+   |            ------------------ help: try: `while let Some(number) = numbers.pop()`\n+LL |         let number = numbers.pop().unwrap();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this while loop can be written in a more idiomatic way\n+   = note: `-D clippy::while-pop-unwrap` implied by `-D warnings`\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/while_pop_unwrap.rs:22:22\n+   |\n+LL |     while !val.numbers.is_empty() {\n+   |            ---------------------- help: try: `while let Some(number) = val.numbers.pop()`\n+LL |         let number = val.numbers.pop().unwrap();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this while loop can be written in a more idiomatic way\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/while_pop_unwrap.rs:26:20\n+   |\n+LL |     while !numbers.is_empty() {\n+   |            ------------------ help: try: `while let Some(element) = numbers.pop()`\n+LL |         accept_i32(numbers.pop().unwrap());\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this while loop can be written in a more idiomatic way\n+\n+error: you seem to be trying to pop elements from a `Vec` in a loop\n+  --> $DIR/while_pop_unwrap.rs:30:20\n+   |\n+LL |     while !numbers.is_empty() {\n+   |            ------------------ help: try: `while let Some(element) = numbers.pop()`\n+LL |         accept_i32(numbers.pop().expect(\"\"));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this while loop can be written in a more idiomatic way\n+\n+error: aborting due to 4 previous errors\n+"}]}