{"sha": "42df0a580fe9aa66b8d6457a27b2093208331dc3", "node_id": "C_kwDOAAsO6NoAKDQyZGYwYTU4MGZlOWFhNjZiOGQ2NDU3YTI3YjIwOTMyMDgzMzFkYzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-06T14:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-06T14:29:45Z"}, "message": "Rollup merge of #102725 - nnethercote:rm-Z-time, r=davidtwco\n\nRemove `-Ztime`\n\nBecause it has a lot of overlap with `-Ztime-passes` but is generally less useful. Plus some related cleanups.\n\nBest reviewed one commit at a time.\n\nr? `@davidtwco`", "tree": {"sha": "b8bde725395b34be0345ff7f44feaa884872a6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8bde725395b34be0345ff7f44feaa884872a6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42df0a580fe9aa66b8d6457a27b2093208331dc3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPuZZCRBK7hj4Ov3rIwAAcYQIAC4Wt1nlwVL1YTyFxjQJI8BR\n5rEr4UD5milIDczSKTq0dhPVfVSRvoJbtDoyAtsSGcct1eQfvjSndfZYWzazmiLK\nzkZstsrgBEdXjSqM4DyouEcR+cQh4xefNmOwg4rD0u8nbw2xTOQWdpxoZO/6r2zz\nNjWUO2FTsg8NsPpitlNlwTzboNwjrHCIOSY4uSATAtmQXkk9ORwH/kirv974Bd64\nYeg8myfWXq/ejIBqFFRcm9X4redToVte1VZ4I8mcv9FOYbwjjgOs7s6Knx0kTi1w\nZ7ckJh5MlajeopeQC9En3EjdQwVJXFMNdrJRgM65dZF1Xpd1llQbbD1MdZGcutU=\n=vQnh\n-----END PGP SIGNATURE-----\n", "payload": "tree b8bde725395b34be0345ff7f44feaa884872a6e2\nparent 045fc18cde46103f44fae75f0ea65cf0ee0f83dd\nparent 4e8faff3a15968970a6810e0af0eafea14f9f7f1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665066585 +0200\ncommitter GitHub <noreply@github.com> 1665066585 +0200\n\nRollup merge of #102725 - nnethercote:rm-Z-time, r=davidtwco\n\nRemove `-Ztime`\n\nBecause it has a lot of overlap with `-Ztime-passes` but is generally less useful. Plus some related cleanups.\n\nBest reviewed one commit at a time.\n\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42df0a580fe9aa66b8d6457a27b2093208331dc3", "html_url": "https://github.com/rust-lang/rust/commit/42df0a580fe9aa66b8d6457a27b2093208331dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42df0a580fe9aa66b8d6457a27b2093208331dc3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/045fc18cde46103f44fae75f0ea65cf0ee0f83dd", "html_url": "https://github.com/rust-lang/rust/commit/045fc18cde46103f44fae75f0ea65cf0ee0f83dd"}, {"sha": "4e8faff3a15968970a6810e0af0eafea14f9f7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8faff3a15968970a6810e0af0eafea14f9f7f1", "html_url": "https://github.com/rust-lang/rust/commit/4e8faff3a15968970a6810e0af0eafea14f9f7f1"}], "stats": {"total": 130, "additions": 56, "deletions": 74}, "files": [{"sha": "cef7bf1e8034d2ea09d9bd4d6c61edd20c7ab13d", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -573,7 +573,7 @@ pub(crate) fn run_pass_manager(\n     module: &mut ModuleCodegen<ModuleLlvm>,\n     thin: bool,\n ) -> Result<(), FatalError> {\n-    let _timer = cgcx.prof.extra_verbose_generic_activity(\"LLVM_lto_optimize\", &*module.name);\n+    let _timer = cgcx.prof.verbose_generic_activity_with_arg(\"LLVM_lto_optimize\", &*module.name);\n     let config = cgcx.config(module.kind);\n \n     // Now we have one massive module inside of llmod. Time to run the"}, {"sha": "6188094bbbdd42a3d0011c9f66f62574163971da", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -1637,7 +1637,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         llvm_start_time: &mut Option<VerboseTimingGuard<'a>>,\n     ) {\n         if config.time_module && llvm_start_time.is_none() {\n-            *llvm_start_time = Some(prof.extra_verbose_generic_activity(\"LLVM_passes\", \"crate\"));\n+            *llvm_start_time = Some(prof.verbose_generic_activity(\"LLVM_passes\"));\n         }\n     }\n }"}, {"sha": "ba1960805d84bf0301539f5e50363a8859db4c9d", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -158,30 +158,21 @@ pub struct SelfProfilerRef {\n     // actually enabled.\n     event_filter_mask: EventFilter,\n \n-    // Print verbose generic activities to stdout\n+    // Print verbose generic activities to stderr?\n     print_verbose_generic_activities: bool,\n-\n-    // Print extra verbose generic activities to stdout\n-    print_extra_verbose_generic_activities: bool,\n }\n \n impl SelfProfilerRef {\n     pub fn new(\n         profiler: Option<Arc<SelfProfiler>>,\n         print_verbose_generic_activities: bool,\n-        print_extra_verbose_generic_activities: bool,\n     ) -> SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n         let event_filter_mask =\n             profiler.as_ref().map_or(EventFilter::empty(), |p| p.event_filter_mask);\n \n-        SelfProfilerRef {\n-            profiler,\n-            event_filter_mask,\n-            print_verbose_generic_activities,\n-            print_extra_verbose_generic_activities,\n-        }\n+        SelfProfilerRef { profiler, event_filter_mask, print_verbose_generic_activities }\n     }\n \n     /// This shim makes sure that calls only get executed if the filter mask\n@@ -214,7 +205,7 @@ impl SelfProfilerRef {\n     /// Start profiling a verbose generic activity. Profiling continues until the\n     /// VerboseTimingGuard returned from this call is dropped. In addition to recording\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n-    /// stdout if the compiler is invoked with -Ztime or -Ztime-passes.\n+    /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity<'a>(\n         &'a self,\n         event_label: &'static str,\n@@ -225,19 +216,16 @@ impl SelfProfilerRef {\n         VerboseTimingGuard::start(message, self.generic_activity(event_label))\n     }\n \n-    /// Start profiling an extra verbose generic activity. Profiling continues until the\n-    /// VerboseTimingGuard returned from this call is dropped. In addition to recording\n-    /// a measureme event, \"extra verbose\" generic activities also print a timing entry to\n-    /// stdout if the compiler is invoked with -Ztime-passes.\n-    pub fn extra_verbose_generic_activity<'a, A>(\n+    /// Like `verbose_generic_activity`, but with an extra arg.\n+    pub fn verbose_generic_activity_with_arg<'a, A>(\n         &'a self,\n         event_label: &'static str,\n         event_arg: A,\n     ) -> VerboseTimingGuard<'a>\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = if self.print_extra_verbose_generic_activities {\n+        let message = if self.print_verbose_generic_activities {\n             Some(format!(\"{}({})\", event_label, event_arg.borrow()))\n         } else {\n             None\n@@ -745,27 +733,9 @@ impl Drop for VerboseTimingGuard<'_> {\n         if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n             let end_rss = get_resident_set_size();\n             let dur = start_time.elapsed();\n-\n-            if should_print_passes(dur, start_rss, end_rss) {\n-                print_time_passes_entry(&message, dur, start_rss, end_rss);\n-            }\n-        }\n-    }\n-}\n-\n-fn should_print_passes(dur: Duration, start_rss: Option<usize>, end_rss: Option<usize>) -> bool {\n-    if dur.as_millis() > 5 {\n-        return true;\n-    }\n-\n-    if let (Some(start_rss), Some(end_rss)) = (start_rss, end_rss) {\n-        let change_rss = end_rss.abs_diff(start_rss);\n-        if change_rss > 0 {\n-            return true;\n+            print_time_passes_entry(&message, dur, start_rss, end_rss);\n         }\n     }\n-\n-    false\n }\n \n pub fn print_time_passes_entry(\n@@ -774,6 +744,26 @@ pub fn print_time_passes_entry(\n     start_rss: Option<usize>,\n     end_rss: Option<usize>,\n ) {\n+    // Print the pass if its duration is greater than 5 ms, or it changed the\n+    // measured RSS.\n+    let is_notable = || {\n+        if dur.as_millis() > 5 {\n+            return true;\n+        }\n+\n+        if let (Some(start_rss), Some(end_rss)) = (start_rss, end_rss) {\n+            let change_rss = end_rss.abs_diff(start_rss);\n+            if change_rss > 0 {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    };\n+    if !is_notable() {\n+        return;\n+    }\n+\n     let rss_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as usize;\n     let rss_change_to_mb = |rss| (rss as f64 / 1_000_000.0).round() as i128;\n "}, {"sha": "7d5604fcabcc949107c98779194aa7014b7d1079", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -127,10 +127,13 @@ pub struct TimePassesCallbacks {\n }\n \n impl Callbacks for TimePassesCallbacks {\n+    // JUSTIFICATION: the session doesn't exist at this point.\n+    #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n-        // If a --prints=... option has been given, we don't print the \"total\"\n-        // time because it will mess up the --prints output. See #64339.\n-        self.time_passes = config.opts.prints.is_empty() && config.opts.time_passes();\n+        // If a --print=... option has been given, we don't print the \"total\"\n+        // time because it will mess up the --print output. See #64339.\n+        //\n+        self.time_passes = config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes;\n         config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }"}, {"sha": "98eeaad976fe18316a05fa085b89bcf0eafe6513", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -692,7 +692,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(span_free_formats, true);\n     untracked!(temps_dir, Some(String::from(\"abc\")));\n     untracked!(threads, 99);\n-    untracked!(time, true);\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n     untracked!(trace_macros, true);"}, {"sha": "aee870dd29d652bb533ae8f3f231a655c293b664", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -409,7 +409,7 @@ pub fn check_ast_node<'a>(\n     if sess.opts.unstable_opts.no_interleave_lints {\n         for (i, pass) in passes.iter_mut().enumerate() {\n             buffered =\n-                sess.prof.extra_verbose_generic_activity(\"run_lint\", pass.name()).run(|| {\n+                sess.prof.verbose_generic_activity_with_arg(\"run_lint\", pass.name()).run(|| {\n                     early_lint_node(\n                         sess,\n                         !pre_expansion && i == 0,"}, {"sha": "d4e19ef6b223f8d0f61d1c57f3dd97bd5739843f", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -425,20 +425,23 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints\n         late_lint_pass_crate(tcx, builtin_lints);\n     } else {\n         for pass in &mut passes {\n-            tcx.sess.prof.extra_verbose_generic_activity(\"run_late_lint\", pass.name()).run(|| {\n-                late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-            });\n+            tcx.sess.prof.verbose_generic_activity_with_arg(\"run_late_lint\", pass.name()).run(\n+                || {\n+                    late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n+                },\n+            );\n         }\n \n         let mut passes: Vec<_> =\n             unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n \n         for pass in &mut passes {\n-            tcx.sess.prof.extra_verbose_generic_activity(\"run_late_module_lint\", pass.name()).run(\n-                || {\n+            tcx.sess\n+                .prof\n+                .verbose_generic_activity_with_arg(\"run_late_module_lint\", pass.name())\n+                .run(|| {\n                     late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });\n-                },\n-            );\n+                });\n         }\n     }\n }"}, {"sha": "e96ea682caecea447cdde244dd2a7fde1e87e1d5", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -1067,7 +1067,7 @@ pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n     let _timer = tcx\n         .dep_context()\n         .profiler()\n-        .extra_verbose_generic_activity(\"encode_query_results_for\", std::any::type_name::<Q>());\n+        .verbose_generic_activity_with_arg(\"encode_query_results_for\", std::any::type_name::<Q>());\n \n     assert!(Q::query_state(tcx).all_inactive());\n     let cache = Q::query_cache(tcx);"}, {"sha": "8d527c05122d1a1f3af2e58c3d18a6b688cff5d2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -280,14 +280,6 @@ macro_rules! options {\n \n ) }\n \n-impl Options {\n-    // JUSTIFICATION: defn of the suggested wrapper fn\n-    #[allow(rustc::bad_opt_access)]\n-    pub fn time_passes(&self) -> bool {\n-        self.unstable_opts.time_passes || self.unstable_opts.time\n-    }\n-}\n-\n impl CodegenOptions {\n     // JUSTIFICATION: defn of the suggested wrapper fn\n     #[allow(rustc::bad_opt_access)]\n@@ -1596,9 +1588,6 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\")]\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n-    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n-    time: bool = (false, parse_bool, [UNTRACKED],\n-        \"measure time of rustc processes (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\")]\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each LLVM pass (default: no)\"),"}, {"sha": "5926cdc9dad9acbf2eed32a644a63ec66f251f4d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -606,10 +606,6 @@ impl Session {\n         self.parse_sess.source_map()\n     }\n \n-    pub fn time_passes(&self) -> bool {\n-        self.opts.time_passes()\n-    }\n-\n     /// Returns `true` if internal lints should be added to the lint store - i.e. if\n     /// `-Zunstable-options` is provided and this isn't rustdoc (internal lints can trigger errors\n     /// to be emitted under rustdoc).\n@@ -927,6 +923,10 @@ impl Session {\n         self.opts.unstable_opts.instrument_mcount\n     }\n \n+    pub fn time_passes(&self) -> bool {\n+        self.opts.unstable_opts.time_passes\n+    }\n+\n     pub fn time_llvm_passes(&self) -> bool {\n         self.opts.unstable_opts.time_llvm_passes\n     }\n@@ -1403,8 +1403,7 @@ pub fn build_session(\n         CguReuseTracker::new_disabled()\n     };\n \n-    let prof =\n-        SelfProfilerRef::new(self_profiler, sopts.time_passes(), sopts.unstable_opts.time_passes);\n+    let prof = SelfProfilerRef::new(self_profiler, sopts.unstable_opts.time_passes);\n \n     let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n         Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,"}, {"sha": "776d73b98c4f10de545de5efcc7219957c261459", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -67,7 +67,7 @@ fn main() {\n             if target == \"all\"\n                 || target.into_string().unwrap().split(',').any(|c| c.trim() == crate_name)\n             {\n-                cmd.arg(\"-Ztime\");\n+                cmd.arg(\"-Ztime-passes\");\n             }\n         }\n     }"}, {"sha": "2d12cf382b160c6bdbece1b770c32af3201f5d37", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -300,7 +300,7 @@ _Note:_ The order of these lint level arguments is taken into account, see [lint\n ## `-Z`: set unstable options\n \n This flag will allow you to set unstable options of rustc. In order to set multiple options,\n-the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time`.\n+the -Z flag can be used multiple times. For example: `rustc -Z verbose -Z time-passes`.\n Specifying options with -Z is only available on nightly. To view all available options\n run: `rustc -Z help`.\n "}, {"sha": "6f9cc026675b638795dcb9c09dc2d2bc2a2ff96d", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -58,7 +58,7 @@ pub(crate) fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n     let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n-        .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n+        .verbose_generic_activity_with_arg(\"create_renderer\", T::descr())\n         .run(|| T::init(krate, options, cache, tcx))?;\n \n     if !emit_crate {\n@@ -92,6 +92,6 @@ pub(crate) fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n                 .run(|| cx.item(item))?;\n         }\n     }\n-    prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n+    prof.verbose_generic_activity_with_arg(\"renderer_after_krate\", T::descr())\n         .run(|| format_renderer.after_krate())\n }"}, {"sha": "65536cb3aa1354c00bf30e4a304cb0d4603f1623", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/42df0a580fe9aa66b8d6457a27b2093208331dc3/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=42df0a580fe9aa66b8d6457a27b2093208331dc3", "patch": "@@ -170,7 +170,6 @@\n     -Z                                 thinlto=val -- enable ThinLTO when possible\n     -Z                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n     -Z                                 threads=val -- use a thread pool with N threads\n-    -Z                                    time=val -- measure time of rustc processes (default: no)\n     -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)"}]}