{"sha": "ed8d14db99fc79909274454c02073bc5bd0c0df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOGQxNGRiOTlmYzc5OTA5Mjc0NDU0YzAyMDczYmM1YmQwYzBkZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T11:20:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-31T11:20:16Z"}, "message": "Auto merge of #50267 - humanenginuity:master, r=alexcrichton\n\nImplement inner deref for Option and Result\n\ntracking issue: #50264", "tree": {"sha": "a767dfeb41318038e44751322e15cf1c3c2e36d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a767dfeb41318038e44751322e15cf1c3c2e36d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed8d14db99fc79909274454c02073bc5bd0c0df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8d14db99fc79909274454c02073bc5bd0c0df2", "html_url": "https://github.com/rust-lang/rust/commit/ed8d14db99fc79909274454c02073bc5bd0c0df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed8d14db99fc79909274454c02073bc5bd0c0df2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896113201034946c7f49c1049288665fa2a56e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/896113201034946c7f49c1049288665fa2a56e32", "html_url": "https://github.com/rust-lang/rust/commit/896113201034946c7f49c1049288665fa2a56e32"}, {"sha": "56016cb1e02ece29f25c619b297f9c9797db821c", "url": "https://api.github.com/repos/rust-lang/rust/commits/56016cb1e02ece29f25c619b297f9c9797db821c", "html_url": "https://github.com/rust-lang/rust/commit/56016cb1e02ece29f25c619b297f9c9797db821c"}], "stats": {"total": 229, "additions": 226, "deletions": 3}, "files": [{"sha": "2b6c376f8a71ca9da8632260c4cb8588455c3a25", "filename": "src/libcore/option.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -146,7 +146,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use iter::{FromIterator, FusedIterator, TrustedLen};\n-use {hint, mem, ops};\n+use {hint, mem, ops::{self, Deref}};\n use mem::PinMut;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n@@ -953,6 +953,17 @@ impl<T: Default> Option<T> {\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: Deref> Option<T> {\n+    /// Converts from `&Option<T>` to `Option<&T::Target>`.\n+    ///\n+    /// Leaves the original Option in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the contents via `Deref`.\n+    pub fn deref(&self) -> Option<&T::Target> {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+}\n+\n impl<T, E> Option<Result<T, E>> {\n     /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n     ///\n@@ -989,7 +1000,6 @@ fn expect_failed(msg: &str) -> ! {\n     panic!(\"{}\", msg)\n }\n \n-\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "fb496836c2c104d41f5b4a6c5d60a5cf3bb8831d", "filename": "src/libcore/result.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -242,7 +242,7 @@\n \n use fmt;\n use iter::{FromIterator, FusedIterator, TrustedLen};\n-use ops;\n+use ops::{self, Deref};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -909,6 +909,44 @@ impl<T: Default, E> Result<T, E> {\n     }\n }\n \n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: Deref, E> Result<T, E> {\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Ok` arm of the Result via\n+    /// `Deref`.\n+    pub fn deref_ok(&self) -> Result<&T::Target, &E> {\n+        self.as_ref().map(|t| t.deref())\n+    }\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T, E: Deref> Result<T, E> {\n+    /// Converts from `&Result<T, E>` to `Result<&T, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the `Err` arm of the Result via\n+    /// `Deref`.\n+    pub fn deref_err(&self) -> Result<&T, &E::Target>\n+    {\n+        self.as_ref().map_err(|e| e.deref())\n+    }\n+}\n+\n+#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+impl<T: Deref, E: Deref> Result<T, E> {\n+    /// Converts from `&Result<T, E>` to `Result<&T::Target, &E::Target>`.\n+    ///\n+    /// Leaves the original Result in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing both the `Ok` and `Err` arms\n+    /// of the Result via `Deref`.\n+    pub fn deref(&self) -> Result<&T::Target, &E::Target>\n+    {\n+        self.as_ref().map(|t| t.deref()).map_err(|e| e.deref())\n+    }\n+}\n+\n impl<T, E> Result<Option<T>, E> {\n     /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n     ///"}, {"sha": "2323b30a0104a132a2450a512a2aef0f0cd71dc6", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -43,6 +43,7 @@\n #![feature(align_offset)]\n #![feature(reverse_bits)]\n #![feature(iterator_find_map)]\n+#![feature(inner_deref)]\n #![feature(slice_internals)]\n #![feature(option_replace)]\n "}, {"sha": "1324ba2d9a9c34de48ba36f9a1ae359462098566", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -298,6 +298,23 @@ fn test_try() {\n     assert_eq!(try_option_err(), Err(NoneError));\n }\n \n+#[test]\n+fn test_option_deref() {\n+    // Some: &Option<T: Deref>::Some(T) -> Option<&T::Deref::Target>::Some(&*T)\n+    let ref_option = &Some(&42);\n+    assert_eq!(ref_option.deref(), Some(&42));\n+\n+    let ref_option = &Some(String::from(\"a result\"));\n+    assert_eq!(ref_option.deref(), Some(\"a result\"));\n+\n+    let ref_option = &Some(vec![1, 2, 3, 4, 5]);\n+    assert_eq!(ref_option.deref(), Some(&[1, 2, 3, 4, 5][..]));\n+\n+    // None: &Option<T: Deref>>::None -> None\n+    let ref_option: &Option<&i32> = &None;\n+    assert_eq!(ref_option.deref(), None);\n+}\n+\n #[test]\n fn test_replace() {\n     let mut x = Some(2);"}, {"sha": "0c00992ffd84efc0087099b82c96ccc529a04a4b", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -233,3 +233,96 @@ fn test_try() {\n     }\n     assert_eq!(try_result_err(), Err(1));\n }\n+\n+#[test]\n+fn test_result_deref() {\n+    // &Result<T: Deref, E>::Ok(T).deref_ok() ->\n+    //      Result<&T::Deref::Target, &E>::Ok(&*T)\n+    let ref_ok = &Result::Ok::<&i32, u8>(&42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<String, u32>(String::from(\"a result\"));\n+    let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<Vec<i32>, u32>(vec![1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n+    assert_eq!(ref_ok.deref_ok(), expected_result);\n+\n+    // &Result<T: Deref, E: Deref>::Ok(T).deref() ->\n+    //      Result<&T::Deref::Target, &E::Deref::Target>::Ok(&*T)\n+    let ref_ok = &Result::Ok::<&i32, &u8>(&42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<String, &u32>(String::from(\"a result\"));\n+    let expected_result = Result::Ok::<&str, &u32>(\"a result\");\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<Vec<i32>, &u32>(vec![1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32], &u32>(&[1, 2, 3, 4, 5][..]);\n+    assert_eq!(ref_ok.deref(), expected_result);\n+\n+    // &Result<T, E: Deref>::Err(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Err(&*E)\n+    let ref_err = &Result::Err::<u8, &i32>(&41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    let ref_err = &Result::Err::<u32, String>(String::from(\"an error\"));\n+    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    let ref_err = &Result::Err::<u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n+    assert_eq!(ref_err.deref_err(), expected_result);\n+\n+    // &Result<T: Deref, E: Deref>::Err(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Err(&*E)\n+    let ref_err = &Result::Err::<&u8, &i32>(&41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, String>(String::from(\"an error\"));\n+    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32]>(&[5, 4, 3, 2, 1][..]);\n+    assert_eq!(ref_err.deref(), expected_result);\n+\n+    // The following cases test calling deref_* with the wrong variant (i.e.\n+    // `deref_ok()` with a `Result::Err()`, or `deref_err()` with a `Result::Ok()`.\n+    // While unusual, these cases are supported to ensure that an `inner_deref`\n+    // call can still be made even when one of the Result types does not implement\n+    // `Deref` (for example, std::io::Error).\n+\n+    // &Result<T, E: Deref>::Ok(T).deref_err() ->\n+    //      Result<&T, &E::Deref::Target>::Ok(&T)\n+    let ref_ok = &Result::Ok::<i32, &u8>(42);\n+    let expected_result = Result::Ok::<&i32, &u8>(&42);\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<&str, &u32>(\"a result\");\n+    let expected_result = Result::Ok::<&&str, &u32>(&\"a result\");\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    let ref_ok = &Result::Ok::<[i32; 5], &u32>([1, 2, 3, 4, 5]);\n+    let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n+    assert_eq!(ref_ok.deref_err(), expected_result);\n+\n+    // &Result<T: Deref, E>::Err(E).deref_ok() ->\n+    //      Result<&T::Deref::Target, &E>::Err(&E)\n+    let ref_err = &Result::Err::<&u8, i32>(41);\n+    let expected_result = Result::Err::<&u8, &i32>(&41);\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n+    let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n+\n+    let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n+    let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n+    assert_eq!(ref_err.deref_ok(), expected_result);\n+}"}, {"sha": "4c67fb3bef10395e305cb1f4364746f7ae5e13be", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/option_deref.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Foption_deref.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Some(42).deref();\n+//~^ ERROR no method named `deref` found for type `std::option::Option<{integer}>`\n+}"}, {"sha": "73bdf0b9209077781e11b12cc72de68192b69499", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).deref();\n+//~^ ERROR no method named `deref` found\n+}"}, {"sha": "5d1e7472d8f18f6c3b1b9f7c217a788e63a913b0", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref_err.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_err.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Err(41).deref_err();\n+//~^ ERROR no method named `deref_err` found\n+}"}, {"sha": "bee8e0c062bae169856b63b8be120380d558ccd5", "filename": "src/test/compile-fail/issue-50264-inner-deref-trait/result_deref_ok.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8d14db99fc79909274454c02073bc5bd0c0df2/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-50264-inner-deref-trait%2Fresult_deref_ok.rs?ref=ed8d14db99fc79909274454c02073bc5bd0c0df2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(inner_deref)]\n+\n+fn main() {\n+    let _result = &Ok(42).deref_ok();\n+//~^ ERROR no method named `deref_ok` found\n+}"}]}