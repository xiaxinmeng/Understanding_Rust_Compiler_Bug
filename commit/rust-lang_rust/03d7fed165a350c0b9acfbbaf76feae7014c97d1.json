{"sha": "03d7fed165a350c0b9acfbbaf76feae7014c97d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZDdmZWQxNjVhMzUwYzBiOWFjZmJiYWY3NmZlYWU3MDE0Yzk3ZDE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-20T01:48:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-20T01:59:01Z"}, "message": "review comments", "tree": {"sha": "9be2e3c85dedac4a10a7c902c28cf2656986089c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be2e3c85dedac4a10a7c902c28cf2656986089c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d7fed165a350c0b9acfbbaf76feae7014c97d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d7fed165a350c0b9acfbbaf76feae7014c97d1", "html_url": "https://github.com/rust-lang/rust/commit/03d7fed165a350c0b9acfbbaf76feae7014c97d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d7fed165a350c0b9acfbbaf76feae7014c97d1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a6b5538ad2bbe0eba55f35e120e896ef6c5c83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6b5538ad2bbe0eba55f35e120e896ef6c5c83f", "html_url": "https://github.com/rust-lang/rust/commit/0a6b5538ad2bbe0eba55f35e120e896ef6c5c83f"}], "stats": {"total": 157, "additions": 81, "deletions": 76}, "files": [{"sha": "a85f787b67789789f62c173a1da067814b4d37a2", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/03d7fed165a350c0b9acfbbaf76feae7014c97d1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d7fed165a350c0b9acfbbaf76feae7014c97d1/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=03d7fed165a350c0b9acfbbaf76feae7014c97d1", "patch": "@@ -5,8 +5,9 @@ use rustc::bug;\n use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n+use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -1447,3 +1448,74 @@ crate fn show_candidates(\n         }\n     }\n }\n+\n+crate fn report_missing_lifetime_specifiers(\n+    sess: &Session,\n+    span: Span,\n+    count: usize,\n+) -> DiagnosticBuilder<'_> {\n+    struct_span_err!(sess, span, E0106, \"missing lifetime specifier{}\", pluralize!(count))\n+}\n+\n+crate fn add_missing_lifetime_specifiers_label(\n+    err: &mut DiagnosticBuilder<'_>,\n+    span: Span,\n+    count: usize,\n+    lifetime_names: &FxHashSet<ast::Ident>,\n+    snippet: Option<&str>,\n+    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n+) {\n+    if count > 1 {\n+        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+    } else {\n+        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_suggestion(\n+                span,\n+                \"consider using the named lifetime\",\n+                sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n+            err.span_label(span, \"expected named lifetime parameter\");\n+\n+            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n+                let mut introduce_suggestion = vec![];\n+                introduce_suggestion.push(match &generics.params {\n+                    [] => (generics.span, \"<'lifetime>\".to_string()),\n+                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+                });\n+                introduce_suggestion.push((span, sugg));\n+                err.multipart_suggestion(\n+                    \"consider introducing a named lifetime parameter\",\n+                    introduce_suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        };\n+\n+        match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n+            (1, Some(name), Some(\"&\")) => {\n+                suggest_existing(err, format!(\"&{} \", name));\n+            }\n+            (1, Some(name), Some(\"'_\")) => {\n+                suggest_existing(err, name.to_string());\n+            }\n+            (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n+            }\n+            (0, _, Some(\"&\")) => {\n+                suggest_new(err, \"&'lifetime \".to_string());\n+            }\n+            (0, _, Some(\"'_\")) => {\n+                suggest_new(err, \"'lifetime\".to_string());\n+            }\n+            (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n+            }\n+            _ => {\n+                err.span_label(span, \"expected lifetime parameter\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "1c667d1467de0416f9f022216c40b38e4273c680", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 75, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/03d7fed165a350c0b9acfbbaf76feae7014c97d1/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d7fed165a350c0b9acfbbaf76feae7014c97d1/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=03d7fed165a350c0b9acfbbaf76feae7014c97d1", "patch": "@@ -5,14 +5,16 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n+use crate::diagnostics::{\n+    add_missing_lifetime_specifiers_label, report_missing_lifetime_specifiers,\n+};\n use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n-use rustc::session::Session;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -1320,9 +1322,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     where\n         F: for<'b> FnOnce(ScopeRef<'_>, &mut LifetimeContext<'b, 'tcx>),\n     {\n-        let LifetimeContext { tcx, map, lifetime_uses, missing_named_lifetime_spots, .. } = self;\n+        let LifetimeContext { tcx, map, lifetime_uses, .. } = self;\n         let labels_in_fn = take(&mut self.labels_in_fn);\n         let xcrate_object_lifetime_defaults = take(&mut self.xcrate_object_lifetime_defaults);\n+        let missing_named_lifetime_spots = take(&mut self.missing_named_lifetime_spots);\n         let mut this = LifetimeContext {\n             tcx: *tcx,\n             map: map,\n@@ -1332,14 +1335,15 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,\n             lifetime_uses,\n-            missing_named_lifetime_spots: missing_named_lifetime_spots.to_vec(),\n+            missing_named_lifetime_spots,\n         };\n         debug!(\"entering scope {:?}\", this.scope);\n         f(self.scope, &mut this);\n         this.check_uses_for_lifetimes_defined_by_scope();\n         debug!(\"exiting scope {:?}\", this.scope);\n         self.labels_in_fn = this.labels_in_fn;\n         self.xcrate_object_lifetime_defaults = this.xcrate_object_lifetime_defaults;\n+        self.missing_named_lifetime_spots = this.missing_named_lifetime_spots;\n     }\n \n     /// helper method to determine the span to remove when suggesting the\n@@ -2894,74 +2898,3 @@ fn insert_late_bound_lifetimes(\n         }\n     }\n }\n-\n-fn report_missing_lifetime_specifiers(\n-    sess: &Session,\n-    span: Span,\n-    count: usize,\n-) -> DiagnosticBuilder<'_> {\n-    struct_span_err!(sess, span, E0106, \"missing lifetime specifier{}\", pluralize!(count))\n-}\n-\n-fn add_missing_lifetime_specifiers_label(\n-    err: &mut DiagnosticBuilder<'_>,\n-    span: Span,\n-    count: usize,\n-    lifetime_names: &FxHashSet<ast::Ident>,\n-    snippet: Option<&str>,\n-    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n-) {\n-    if count > 1 {\n-        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-    } else {\n-        let suggest_existing = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-            err.span_suggestion(\n-                span,\n-                \"consider using the named lifetime\",\n-                sugg,\n-                Applicability::MaybeIncorrect,\n-            );\n-        };\n-        let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg| {\n-            err.span_label(span, \"expected named lifetime parameter\");\n-\n-            if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n-                let mut introduce_suggestion = vec![];\n-                introduce_suggestion.push(match &generics.params {\n-                    [] => (generics.span, \"<'lifetime>\".to_string()),\n-                    [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n-                });\n-                introduce_suggestion.push((span, sugg));\n-                err.multipart_suggestion(\n-                    \"consider introducing a named lifetime parameter\",\n-                    introduce_suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-        };\n-\n-        match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n-            (1, Some(name), Some(\"&\")) => {\n-                suggest_existing(err, format!(\"&{} \", name));\n-            }\n-            (1, Some(name), Some(\"'_\")) => {\n-                suggest_existing(err, name.to_string());\n-            }\n-            (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n-            }\n-            (0, _, Some(\"&\")) => {\n-                suggest_new(err, \"&'lifetime \".to_string());\n-            }\n-            (0, _, Some(\"'_\")) => {\n-                suggest_new(err, \"'lifetime\".to_string());\n-            }\n-            (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n-                suggest_new(err, format!(\"{}<'lifetime>\", snippet));\n-            }\n-            _ => {\n-                err.span_label(span, \"expected lifetime parameter\");\n-            }\n-        }\n-    }\n-}"}]}