{"sha": "6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "node_id": "C_kwDOAAsO6NoAKDZlNGE5YWI2NTBiMTM1YWUwZmY3NjFlNGEzN2Q5NmM4YmNhZjdiM2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T09:48:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-05T09:48:49Z"}, "message": "Auto merge of #101439 - Dylan-DPC:rollup-2wf1mtj, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101142 (Improve HIR stats)\n - #101367 (Suggest `{Option,Result}::{copied,clone}()` to satisfy type mismatch)\n - #101391 (more clippy::perf fixes)\n - #101409 (Don't fire `rust_2021_incompatible_closure_captures` in `edition = 2021` crates)\n - #101420 (Fix `hir::Local` doc to match with the variable name used: `init`)\n - #101429 (Don't suggest reborrow if usage is inside a closure)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1d366c79042185f1fead18a6bc2aa9e09ad6c484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d366c79042185f1fead18a6bc2aa9e09ad6c484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "html_url": "https://github.com/rust-lang/rust/commit/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4bd154de6e41d4739914f446349f8201ec3ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4bd154de6e41d4739914f446349f8201ec3ef9", "html_url": "https://github.com/rust-lang/rust/commit/5b4bd154de6e41d4739914f446349f8201ec3ef9"}, {"sha": "d2fdb5d1d65ac8928258df588423b710602097ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fdb5d1d65ac8928258df588423b710602097ba", "html_url": "https://github.com/rust-lang/rust/commit/d2fdb5d1d65ac8928258df588423b710602097ba"}], "stats": {"total": 1013, "additions": 726, "deletions": 287}, "files": [{"sha": "097a59d027bb2906c139cd7a82f2c402a518a551", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -3045,13 +3045,16 @@ mod size_asserts {\n     static_assert_size!(Fn, 192);\n     static_assert_size!(ForeignItem, 96);\n     static_assert_size!(ForeignItemKind, 24);\n+    static_assert_size!(GenericArg, 24);\n     static_assert_size!(GenericBound, 88);\n     static_assert_size!(Generics, 72);\n     static_assert_size!(Impl, 200);\n     static_assert_size!(Item, 184);\n     static_assert_size!(ItemKind, 112);\n     static_assert_size!(Lit, 48);\n     static_assert_size!(LitKind, 24);\n+    static_assert_size!(Local, 72);\n+    static_assert_size!(Param, 40);\n     static_assert_size!(Pat, 120);\n     static_assert_size!(PatKind, 96);\n     static_assert_size!(Path, 40);"}, {"sha": "b0e9fe0469c41baab379f1b599301efda043f76f", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -155,26 +155,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let op = match *op {\n                     InlineAsmOperand::In { reg, ref expr } => hir::InlineAsmOperand::In {\n                         reg: lower_reg(reg),\n-                        expr: self.lower_expr_mut(expr),\n+                        expr: self.lower_expr(expr),\n                     },\n                     InlineAsmOperand::Out { reg, late, ref expr } => hir::InlineAsmOperand::Out {\n                         reg: lower_reg(reg),\n                         late,\n-                        expr: expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                        expr: expr.as_ref().map(|expr| self.lower_expr(expr)),\n                     },\n                     InlineAsmOperand::InOut { reg, late, ref expr } => {\n                         hir::InlineAsmOperand::InOut {\n                             reg: lower_reg(reg),\n                             late,\n-                            expr: self.lower_expr_mut(expr),\n+                            expr: self.lower_expr(expr),\n                         }\n                     }\n                     InlineAsmOperand::SplitInOut { reg, late, ref in_expr, ref out_expr } => {\n                         hir::InlineAsmOperand::SplitInOut {\n                             reg: lower_reg(reg),\n                             late,\n-                            in_expr: self.lower_expr_mut(in_expr),\n-                            out_expr: out_expr.as_ref().map(|expr| self.lower_expr_mut(expr)),\n+                            in_expr: self.lower_expr(in_expr),\n+                            out_expr: out_expr.as_ref().map(|expr| self.lower_expr(expr)),\n                         }\n                     }\n                     InlineAsmOperand::Const { ref anon_const } => {"}, {"sha": "269091c89e9fb4ff141c388af0421b49b3da326d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         self.with_lctx(CRATE_NODE_ID, |lctx| {\n             let module = lctx.lower_mod(&c.items, &c.spans);\n             lctx.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n-            hir::OwnerNode::Crate(lctx.arena.alloc(module))\n+            hir::OwnerNode::Crate(module)\n         })\n     }\n \n@@ -158,14 +158,18 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n }\n \n impl<'hir> LoweringContext<'_, 'hir> {\n-    pub(super) fn lower_mod(&mut self, items: &[P<Item>], spans: &ModSpans) -> hir::Mod<'hir> {\n-        hir::Mod {\n+    pub(super) fn lower_mod(\n+        &mut self,\n+        items: &[P<Item>],\n+        spans: &ModSpans,\n+    ) -> &'hir hir::Mod<'hir> {\n+        self.arena.alloc(hir::Mod {\n             spans: hir::ModSpans {\n                 inner_span: self.lower_span(spans.inner_span),\n                 inject_use_span: self.lower_span(spans.inject_use_span),\n             },\n             item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_ref(x))),\n-        }\n+        })\n     }\n \n     pub(super) fn lower_item_ref(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {\n@@ -947,7 +951,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         params: &'hir [hir::Param<'hir>],\n         value: hir::Expr<'hir>,\n     ) -> hir::BodyId {\n-        let body = hir::Body { generator_kind: self.generator_kind, params, value };\n+        let body = hir::Body {\n+            generator_kind: self.generator_kind,\n+            params,\n+            value: self.arena.alloc(value),\n+        };\n         let id = body.id();\n         debug_assert_eq!(id.hir_id.owner, self.current_hir_id_owner);\n         self.bodies.push((id.hir_id.local_id, self.arena.alloc(body)));"}, {"sha": "55f117ef01b658844c1ffc4f5442ffe5b3390e44", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -1155,7 +1155,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     _ => {}\n                 }\n-                GenericArg::Type(self.lower_ty_direct(&ty, itctx))\n+                GenericArg::Type(self.lower_ty(&ty, itctx))\n             }\n             ast::GenericArg::Const(ct) => GenericArg::Const(ConstArg {\n                 value: self.lower_anon_const(&ct),"}, {"sha": "f071012d01ed5079cefe1b91cb0b5a4838cc796c", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             FnRetTy::Default(_) => self.arena.alloc(self.ty_tup(*span, &[])),\n         };\n-        let args = smallvec![GenericArg::Type(self.ty_tup(*inputs_span, inputs))];\n+        let args = smallvec![GenericArg::Type(self.arena.alloc(self.ty_tup(*inputs_span, inputs)))];\n         let binding = self.output_ty_binding(output_ty.span, output_ty);\n         (\n             GenericArgsCtor {"}, {"sha": "f2204c24263ce3f3c792d6b453ad63c67ebb634a", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -258,7 +258,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let ty = place.ty(self.body, self.infcx.tcx).ty;\n \n             // If we're in pattern, we do nothing in favor of the previous suggestion (#80913).\n-            if is_loop_move & !in_pattern {\n+            // Same for if we're in a loop, see #101119.\n+            if is_loop_move & !in_pattern && !matches!(use_spans, UseSpans::ClosureUse { .. }) {\n                 if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n                     // We have a `&mut` ref, we need to reborrow on each iteration (#62112).\n                     err.span_suggestion_verbose("}, {"sha": "08282f1389727848aa0a3094551c64d72c07268e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -265,7 +265,7 @@ impl InferArg {\n #[derive(Debug, HashStable_Generic)]\n pub enum GenericArg<'hir> {\n     Lifetime(Lifetime),\n-    Type(Ty<'hir>),\n+    Type(&'hir Ty<'hir>),\n     Const(ConstArg),\n     Infer(InferArg),\n }\n@@ -280,7 +280,7 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn id(&self) -> HirId {\n+    pub fn hir_id(&self) -> HirId {\n         match self {\n             GenericArg::Lifetime(l) => l.hir_id,\n             GenericArg::Type(t) => t.hir_id,\n@@ -1321,7 +1321,7 @@ pub enum StmtKind<'hir> {\n     Semi(&'hir Expr<'hir>),\n }\n \n-/// Represents a `let` statement (i.e., `let <pat>:<ty> = <expr>;`).\n+/// Represents a `let` statement (i.e., `let <pat>:<ty> = <init>;`).\n #[derive(Debug, HashStable_Generic)]\n pub struct Local<'hir> {\n     pub pat: &'hir Pat<'hir>,\n@@ -1438,7 +1438,7 @@ pub struct BodyId {\n #[derive(Debug, HashStable_Generic)]\n pub struct Body<'hir> {\n     pub params: &'hir [Param<'hir>],\n-    pub value: Expr<'hir>,\n+    pub value: &'hir Expr<'hir>,\n     pub generator_kind: Option<GeneratorKind>,\n }\n \n@@ -2561,23 +2561,23 @@ pub enum TyKind<'hir> {\n pub enum InlineAsmOperand<'hir> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n-        expr: Expr<'hir>,\n+        expr: &'hir Expr<'hir>,\n     },\n     Out {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        expr: Option<Expr<'hir>>,\n+        expr: Option<&'hir Expr<'hir>>,\n     },\n     InOut {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        expr: Expr<'hir>,\n+        expr: &'hir Expr<'hir>,\n     },\n     SplitInOut {\n         reg: InlineAsmRegOrRegClass,\n         late: bool,\n-        in_expr: Expr<'hir>,\n-        out_expr: Option<Expr<'hir>>,\n+        in_expr: &'hir Expr<'hir>,\n+        out_expr: Option<&'hir Expr<'hir>>,\n     },\n     Const {\n         anon_const: AnonConst,\n@@ -2991,7 +2991,7 @@ pub enum ItemKind<'hir> {\n     /// A MBE macro definition (`macro_rules!` or `macro`).\n     Macro(ast::MacroDef, MacroKind),\n     /// A module.\n-    Mod(Mod<'hir>),\n+    Mod(&'hir Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n     ForeignMod { abi: Abi, items: &'hir [ForeignItemRef] },\n     /// Module-level inline assembly (from `global_asm!`).\n@@ -3495,16 +3495,32 @@ impl<'hir> Node<'hir> {\n mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n-    static_assert_size!(Block<'static>, 48);\n-    static_assert_size!(Expr<'static>, 56);\n-    static_assert_size!(ForeignItem<'static>, 72);\n+    static_assert_size!(Block<'_>, 48);\n+    static_assert_size!(Body<'_>, 32);\n+    static_assert_size!(Expr<'_>, 56);\n+    static_assert_size!(ExprKind<'_>, 40);\n+    static_assert_size!(FnDecl<'_>, 40);\n+    static_assert_size!(ForeignItem<'_>, 72);\n+    static_assert_size!(ForeignItemKind<'_>, 40);\n+    static_assert_size!(GenericArg<'_>, 40);\n     static_assert_size!(GenericBound<'_>, 48);\n-    static_assert_size!(Generics<'static>, 56);\n-    static_assert_size!(ImplItem<'static>, 88);\n-    static_assert_size!(Impl<'static>, 80);\n-    static_assert_size!(Item<'static>, 80);\n-    static_assert_size!(Pat<'static>, 88);\n-    static_assert_size!(QPath<'static>, 24);\n-    static_assert_size!(TraitItem<'static>, 96);\n-    static_assert_size!(Ty<'static>, 72);\n+    static_assert_size!(Generics<'_>, 56);\n+    static_assert_size!(Impl<'_>, 80);\n+    static_assert_size!(ImplItem<'_>, 88);\n+    static_assert_size!(ImplItemKind<'_>, 40);\n+    static_assert_size!(Item<'_>, 80);\n+    static_assert_size!(ItemKind<'_>, 48);\n+    static_assert_size!(Local<'_>, 64);\n+    static_assert_size!(Param<'_>, 32);\n+    static_assert_size!(Pat<'_>, 88);\n+    static_assert_size!(PatKind<'_>, 64);\n+    static_assert_size!(Path<'_>, 48);\n+    static_assert_size!(PathSegment<'_>, 56);\n+    static_assert_size!(QPath<'_>, 24);\n+    static_assert_size!(Stmt<'_>, 32);\n+    static_assert_size!(StmtKind<'_>, 16);\n+    static_assert_size!(TraitItem<'_>, 96);\n+    static_assert_size!(TraitItemKind<'_>, 56);\n+    static_assert_size!(Ty<'_>, 72);\n+    static_assert_size!(TyKind<'_>, 56);\n }"}, {"sha": "bb534a3c7afce6399abb885ae5dfe2984e22aab9", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -68,7 +68,7 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     }\n \n     if sess.opts.unstable_opts.hir_stats {\n-        hir_stats::print_ast_stats(&krate, \"PRE EXPANSION AST STATS\");\n+        hir_stats::print_ast_stats(&krate, \"PRE EXPANSION AST STATS\", \"ast-stats-1\");\n     }\n \n     Ok(krate)\n@@ -415,7 +415,7 @@ pub fn configure_and_expand(\n     }\n \n     if sess.opts.unstable_opts.hir_stats {\n-        hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\");\n+        hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\", \"ast-stats-2\");\n     }\n \n     resolver.resolve_crate(&krate);"}, {"sha": "9a163cf207e97ba7dc6bc0a56d81c4af6c21edcc", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -842,7 +842,7 @@ pub trait LintContext: Sized {\n                     if let Some(positional_arg_to_replace) = position_sp_to_replace {\n                         let name = if is_formatting_arg { named_arg_name + \"$\" } else { named_arg_name };\n                         let span_to_replace = if let Ok(positional_arg_content) =\n-                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(\":\") {\n+                            self.sess().source_map().span_to_snippet(positional_arg_to_replace) && positional_arg_content.starts_with(':') {\n                             positional_arg_to_replace.shrink_to_lo()\n                         } else {\n                             positional_arg_to_replace"}, {"sha": "2e3a06fcbb745c22fd3227986e080302a01355c2", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -3407,7 +3407,7 @@ declare_lint! {\n     ///\n     /// ### Example of drop reorder\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,edition2018,compile_fail\n     /// #![deny(rust_2021_incompatible_closure_captures)]\n     /// # #![allow(unused)]\n     ///\n@@ -3443,7 +3443,7 @@ declare_lint! {\n     ///\n     /// ### Example of auto-trait\n     ///\n-    /// ```rust,compile_fail\n+    /// ```rust,edition2018,compile_fail\n     /// #![deny(rust_2021_incompatible_closure_captures)]\n     /// use std::thread;\n     ///"}, {"sha": "039486ba02c37a466b580cfb163580f9c95a19ac", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -1377,19 +1377,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let tcx = self.tcx;\n \n-        let keys_and_jobs = tcx\n-            .mir_keys(())\n-            .iter()\n-            .filter_map(|&def_id| {\n-                let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n-                if encode_const || encode_opt {\n-                    Some((def_id, encode_const, encode_opt))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-        for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {\n+        let keys_and_jobs = tcx.mir_keys(()).iter().filter_map(|&def_id| {\n+            let (encode_const, encode_opt) = should_encode_mir(tcx, def_id);\n+            if encode_const || encode_opt { Some((def_id, encode_const, encode_opt)) } else { None }\n+        });\n+        for (def_id, encode_const, encode_opt) in keys_and_jobs {\n             debug_assert!(encode_const || encode_opt);\n \n             debug!(\"EntryBuilder::encode_mir({:?})\", def_id);"}, {"sha": "81ac0e1b6d445a5455a69a9e9782ff788a62728b", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 215, "deletions": 66, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -74,16 +74,16 @@ pub fn print_hir_stats(tcx: TyCtxt<'_>) {\n     };\n     tcx.hir().walk_toplevel_module(&mut collector);\n     tcx.hir().walk_attributes(&mut collector);\n-    collector.print(\"HIR STATS\");\n+    collector.print(\"HIR STATS\", \"hir-stats\");\n }\n \n-pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n+pub fn print_ast_stats(krate: &ast::Crate, title: &str, prefix: &str) {\n     use rustc_ast::visit::Visitor;\n \n     let mut collector =\n         StatCollector { krate: None, nodes: FxHashMap::default(), seen: FxHashSet::default() };\n     collector.visit_crate(krate);\n-    collector.print(title);\n+    collector.print(title, prefix);\n }\n \n impl<'k> StatCollector<'k> {\n@@ -119,23 +119,26 @@ impl<'k> StatCollector<'k> {\n         }\n     }\n \n-    fn print(&self, title: &str) {\n+    fn print(&self, title: &str, prefix: &str) {\n         let mut nodes: Vec<_> = self.nodes.iter().collect();\n         nodes.sort_by_key(|&(_, ref node)| node.stats.count * node.stats.size);\n \n         let total_size = nodes.iter().map(|(_, node)| node.stats.count * node.stats.size).sum();\n \n-        eprintln!(\"\\n{}\\n\", title);\n-\n-        eprintln!(\"{:<18}{:>18}{:>14}{:>14}\", \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\");\n-        eprintln!(\"----------------------------------------------------------------\");\n+        eprintln!(\"{} {}\", prefix, title);\n+        eprintln!(\n+            \"{} {:<18}{:>18}{:>14}{:>14}\",\n+            prefix, \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\"\n+        );\n+        eprintln!(\"{} ----------------------------------------------------------------\", prefix);\n \n         let percent = |m, n| (m * 100) as f64 / n as f64;\n \n         for (label, node) in nodes {\n             let size = node.stats.count * node.stats.size;\n             eprintln!(\n-                \"{:<18}{:>10} ({:4.1}%){:>14}{:>14}\",\n+                \"{} {:<18}{:>10} ({:4.1}%){:>14}{:>14}\",\n+                prefix,\n                 label,\n                 to_readable_str(size),\n                 percent(size, total_size),\n@@ -149,7 +152,8 @@ impl<'k> StatCollector<'k> {\n                 for (label, subnode) in subnodes {\n                     let size = subnode.count * subnode.size;\n                     eprintln!(\n-                        \"- {:<18}{:>10} ({:4.1}%){:>14}\",\n+                        \"{} - {:<18}{:>10} ({:4.1}%){:>14}\",\n+                        prefix,\n                         label,\n                         to_readable_str(size),\n                         percent(size, total_size),\n@@ -158,11 +162,28 @@ impl<'k> StatCollector<'k> {\n                 }\n             }\n         }\n-        eprintln!(\"----------------------------------------------------------------\");\n-        eprintln!(\"{:<18}{:>10}\\n\", \"Total\", to_readable_str(total_size));\n+        eprintln!(\"{} ----------------------------------------------------------------\", prefix);\n+        eprintln!(\"{} {:<18}{:>10}\", prefix, \"Total\", to_readable_str(total_size));\n+        eprintln!(\"{}\", prefix);\n     }\n }\n \n+// Used to avoid boilerplate for types with many variants.\n+macro_rules! record_variants {\n+    (\n+        ($self:ident, $val:expr, $kind:expr, $id:expr, $mod:ident, $ty:ty, $tykind:ident),\n+        [$($variant:ident),*]\n+    ) => {\n+        match $kind {\n+            $(\n+                $mod::$tykind::$variant { .. } => {\n+                    $self.record_variant(stringify!($ty), stringify!($variant), $id, $val)\n+                }\n+            )*\n+        }\n+    };\n+}\n+\n impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_param(&mut self, param: &'v hir::Param<'v>) {\n         self.record(\"Param\", Id::Node(param.hir_id), param);\n@@ -195,12 +216,46 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_item(&mut self, i: &'v hir::Item<'v>) {\n-        self.record(\"Item\", Id::Node(i.hir_id()), i);\n+        record_variants!(\n+            (self, i, i.kind, Id::Node(i.hir_id()), hir, Item, ItemKind),\n+            [\n+                ExternCrate,\n+                Use,\n+                Static,\n+                Const,\n+                Fn,\n+                Macro,\n+                Mod,\n+                ForeignMod,\n+                GlobalAsm,\n+                TyAlias,\n+                OpaqueTy,\n+                Enum,\n+                Struct,\n+                Union,\n+                Trait,\n+                TraitAlias,\n+                Impl\n+            ]\n+        );\n         hir_visit::walk_item(self, i)\n     }\n \n+    fn visit_body(&mut self, b: &'v hir::Body<'v>) {\n+        self.record(\"Body\", Id::None, b);\n+        hir_visit::walk_body(self, b);\n+    }\n+\n+    fn visit_mod(&mut self, m: &'v hir::Mod<'v>, _s: Span, n: HirId) {\n+        self.record(\"Mod\", Id::None, m);\n+        hir_visit::walk_mod(self, m, n)\n+    }\n+\n     fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem<'v>) {\n-        self.record(\"ForeignItem\", Id::Node(i.hir_id()), i);\n+        record_variants!(\n+            (self, i, i.kind, Id::Node(i.hir_id()), hir, ForeignItem, ForeignItemKind),\n+            [Fn, Static, Type]\n+        );\n         hir_visit::walk_foreign_item(self, i)\n     }\n \n@@ -215,7 +270,10 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_stmt(&mut self, s: &'v hir::Stmt<'v>) {\n-        self.record(\"Stmt\", Id::Node(s.hir_id), s);\n+        record_variants!(\n+            (self, s, s.kind, Id::Node(s.hir_id), hir, Stmt, StmtKind),\n+            [Local, Item, Expr, Semi]\n+        );\n         hir_visit::walk_stmt(self, s)\n     }\n \n@@ -225,20 +283,80 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_pat(&mut self, p: &'v hir::Pat<'v>) {\n-        self.record(\"Pat\", Id::Node(p.hir_id), p);\n+        record_variants!(\n+            (self, p, p.kind, Id::Node(p.hir_id), hir, Pat, PatKind),\n+            [Wild, Binding, Struct, TupleStruct, Or, Path, Tuple, Box, Ref, Lit, Range, Slice]\n+        );\n         hir_visit::walk_pat(self, p)\n     }\n \n-    fn visit_expr(&mut self, ex: &'v hir::Expr<'v>) {\n-        self.record(\"Expr\", Id::Node(ex.hir_id), ex);\n-        hir_visit::walk_expr(self, ex)\n+    fn visit_pat_field(&mut self, f: &'v hir::PatField<'v>) {\n+        self.record(\"PatField\", Id::Node(f.hir_id), f);\n+        hir_visit::walk_pat_field(self, f)\n+    }\n+\n+    fn visit_expr(&mut self, e: &'v hir::Expr<'v>) {\n+        record_variants!(\n+            (self, e, e.kind, Id::Node(e.hir_id), hir, Expr, ExprKind),\n+            [\n+                Box, ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n+                DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n+                Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n+            ]\n+        );\n+        hir_visit::walk_expr(self, e)\n+    }\n+\n+    fn visit_let_expr(&mut self, lex: &'v hir::Let<'v>) {\n+        self.record(\"Let\", Id::Node(lex.hir_id), lex);\n+        hir_visit::walk_let_expr(self, lex)\n+    }\n+\n+    fn visit_expr_field(&mut self, f: &'v hir::ExprField<'v>) {\n+        self.record(\"ExprField\", Id::Node(f.hir_id), f);\n+        hir_visit::walk_expr_field(self, f)\n     }\n \n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n-        self.record(\"Ty\", Id::Node(t.hir_id), t);\n+        record_variants!(\n+            (self, t, t.kind, Id::Node(t.hir_id), hir, Ty, TyKind),\n+            [\n+                Slice,\n+                Array,\n+                Ptr,\n+                Rptr,\n+                BareFn,\n+                Never,\n+                Tup,\n+                Path,\n+                OpaqueDef,\n+                TraitObject,\n+                Typeof,\n+                Infer,\n+                Err\n+            ]\n+        );\n         hir_visit::walk_ty(self, t)\n     }\n \n+    fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n+        self.record(\"GenericParam\", Id::Node(p.hir_id), p);\n+        hir_visit::walk_generic_param(self, p)\n+    }\n+\n+    fn visit_generics(&mut self, g: &'v hir::Generics<'v>) {\n+        self.record(\"Generics\", Id::None, g);\n+        hir_visit::walk_generics(self, g)\n+    }\n+\n+    fn visit_where_predicate(&mut self, p: &'v hir::WherePredicate<'v>) {\n+        record_variants!(\n+            (self, p, p, Id::None, hir, WherePredicate, WherePredicate),\n+            [BoundPredicate, RegionPredicate, EqPredicate]\n+        );\n+        hir_visit::walk_where_predicate(self, p)\n+    }\n+\n     fn visit_fn(\n         &mut self,\n         fk: hir_visit::FnKind<'v>,\n@@ -251,24 +369,49 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_fn(self, fk, fd, b, s, id)\n     }\n \n-    fn visit_where_predicate(&mut self, predicate: &'v hir::WherePredicate<'v>) {\n-        self.record(\"WherePredicate\", Id::None, predicate);\n-        hir_visit::walk_where_predicate(self, predicate)\n+    fn visit_use(&mut self, p: &'v hir::Path<'v>, hir_id: hir::HirId) {\n+        // This is `visit_use`, but the type is `Path` so record it that way.\n+        self.record(\"Path\", Id::None, p);\n+        hir_visit::walk_use(self, p, hir_id)\n     }\n \n     fn visit_trait_item(&mut self, ti: &'v hir::TraitItem<'v>) {\n-        self.record(\"TraitItem\", Id::Node(ti.hir_id()), ti);\n+        record_variants!(\n+            (self, ti, ti.kind, Id::Node(ti.hir_id()), hir, TraitItem, TraitItemKind),\n+            [Const, Fn, Type]\n+        );\n         hir_visit::walk_trait_item(self, ti)\n     }\n \n+    fn visit_trait_item_ref(&mut self, ti: &'v hir::TraitItemRef) {\n+        self.record(\"TraitItemRef\", Id::Node(ti.id.hir_id()), ti);\n+        hir_visit::walk_trait_item_ref(self, ti)\n+    }\n+\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem<'v>) {\n-        self.record(\"ImplItem\", Id::Node(ii.hir_id()), ii);\n+        record_variants!(\n+            (self, ii, ii.kind, Id::Node(ii.hir_id()), hir, ImplItem, ImplItemKind),\n+            [Const, Fn, TyAlias]\n+        );\n         hir_visit::walk_impl_item(self, ii)\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v hir::GenericBound<'v>) {\n-        self.record(\"GenericBound\", Id::None, bounds);\n-        hir_visit::walk_param_bound(self, bounds)\n+    fn visit_foreign_item_ref(&mut self, fi: &'v hir::ForeignItemRef) {\n+        self.record(\"ForeignItemRef\", Id::Node(fi.id.hir_id()), fi);\n+        hir_visit::walk_foreign_item_ref(self, fi)\n+    }\n+\n+    fn visit_impl_item_ref(&mut self, ii: &'v hir::ImplItemRef) {\n+        self.record(\"ImplItemRef\", Id::Node(ii.id.hir_id()), ii);\n+        hir_visit::walk_impl_item_ref(self, ii)\n+    }\n+\n+    fn visit_param_bound(&mut self, b: &'v hir::GenericBound<'v>) {\n+        record_variants!(\n+            (self, b, b, Id::None, hir, GenericBound, GenericBound),\n+            [Trait, LangItemTrait, Outlives]\n+        );\n+        hir_visit::walk_param_bound(self, b)\n     }\n \n     fn visit_field_def(&mut self, s: &'v hir::FieldDef<'v>) {\n@@ -281,30 +424,34 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_variant(self, v)\n     }\n \n-    fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n-        self.record(\"Lifetime\", Id::Node(lifetime.hir_id), lifetime);\n-        hir_visit::walk_lifetime(self, lifetime)\n-    }\n-\n-    fn visit_qpath(&mut self, qpath: &'v hir::QPath<'v>, id: hir::HirId, span: Span) {\n-        self.record(\"QPath\", Id::None, qpath);\n-        hir_visit::walk_qpath(self, qpath, id, span)\n+    fn visit_generic_arg(&mut self, ga: &'v hir::GenericArg<'v>) {\n+        record_variants!(\n+            (self, ga, ga, Id::Node(ga.hir_id()), hir, GenericArg, GenericArg),\n+            [Lifetime, Type, Const, Infer]\n+        );\n+        match ga {\n+            hir::GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n+            hir::GenericArg::Type(ty) => self.visit_ty(ty),\n+            hir::GenericArg::Const(ct) => self.visit_anon_const(&ct.value),\n+            hir::GenericArg::Infer(inf) => self.visit_infer(inf),\n+        }\n     }\n \n     fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)\n     }\n \n-    // `PathSegment` has one inline use (in `ast::ExprKind::MethodCall`) and\n-    // one non-inline use (in `Path::segments`). The latter case is more common\n-    // than the former case, so we implement this visitor and tolerate the\n-    // double counting in the former case.\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v hir::PathSegment<'v>) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n         hir_visit::walk_path_segment(self, path_span, path_segment)\n     }\n \n+    fn visit_generic_args(&mut self, sp: Span, ga: &'v hir::GenericArgs<'v>) {\n+        self.record(\"GenericArgs\", Id::None, ga);\n+        hir_visit::walk_generic_args(self, sp, ga)\n+    }\n+\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding<'v>) {\n         self.record(\"TypeBinding\", Id::Node(type_binding.hir_id), type_binding);\n         hir_visit::walk_assoc_type_binding(self, type_binding)\n@@ -313,36 +460,25 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n-}\n \n-// Used to avoid boilerplate for types with many variants.\n-macro_rules! record_variants {\n-    (\n-        ($self:ident, $val:expr, $kind:expr, $ty:ty, $tykind:ident), // mandatory pieces\n-        [$($variant:ident),*]\n-    ) => {\n-        match $kind {\n-            $(\n-                ast::$tykind::$variant { .. } => {\n-                    $self.record_variant(stringify!($ty), stringify!($variant), Id::None, $val)\n-                }\n-            )*\n-        }\n-    };\n+    fn visit_inline_asm(&mut self, asm: &'v hir::InlineAsm<'v>, id: HirId) {\n+        self.record(\"InlineAsm\", Id::None, asm);\n+        hir_visit::walk_inline_asm(self, asm, id);\n+    }\n }\n \n impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_foreign_item(&mut self, i: &'v ast::ForeignItem) {\n         record_variants!(\n-            (self, i, i.kind, ForeignItem, ForeignItemKind),\n+            (self, i, i.kind, Id::None, ast, ForeignItem, ForeignItemKind),\n             [Static, Fn, TyAlias, MacCall]\n         );\n         ast_visit::walk_foreign_item(self, i)\n     }\n \n     fn visit_item(&mut self, i: &'v ast::Item) {\n         record_variants!(\n-            (self, i, i.kind, Item, ItemKind),\n+            (self, i, i.kind, Id::None, ast, Item, ItemKind),\n             [\n                 ExternCrate,\n                 Use,\n@@ -378,7 +514,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_stmt(&mut self, s: &'v ast::Stmt) {\n         record_variants!(\n-            (self, s, s.kind, Stmt, StmtKind),\n+            (self, s, s.kind, Id::None, ast, Stmt, StmtKind),\n             [Local, Item, Expr, Semi, Empty, MacCall]\n         );\n         ast_visit::walk_stmt(self, s)\n@@ -396,7 +532,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_pat(&mut self, p: &'v ast::Pat) {\n         record_variants!(\n-            (self, p, p.kind, Pat, PatKind),\n+            (self, p, p.kind, Id::None, ast, Pat, PatKind),\n             [\n                 Wild,\n                 Ident,\n@@ -420,7 +556,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_expr(&mut self, e: &'v ast::Expr) {\n         record_variants!(\n-            (self, e, e.kind, Expr, ExprKind),\n+            (self, e, e.kind, Id::None, ast, Expr, ExprKind),\n             [\n                 Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n@@ -433,7 +569,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_ty(&mut self, t: &'v ast::Ty) {\n         record_variants!(\n-            (self, t, t.kind, Ty, TyKind),\n+            (self, t, t.kind, Id::None, ast, Ty, TyKind),\n             [\n                 Slice,\n                 Array,\n@@ -465,7 +601,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_where_predicate(&mut self, p: &'v ast::WherePredicate) {\n         record_variants!(\n-            (self, p, p, WherePredicate, WherePredicate),\n+            (self, p, p, Id::None, ast, WherePredicate, WherePredicate),\n             [BoundPredicate, RegionPredicate, EqPredicate]\n         );\n         ast_visit::walk_where_predicate(self, p)\n@@ -478,14 +614,17 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_assoc_item(&mut self, i: &'v ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         record_variants!(\n-            (self, i, i.kind, AssocItem, AssocItemKind),\n+            (self, i, i.kind, Id::None, ast, AssocItem, AssocItemKind),\n             [Const, Fn, TyAlias, MacCall]\n         );\n         ast_visit::walk_assoc_item(self, i, ctxt);\n     }\n \n     fn visit_param_bound(&mut self, b: &'v ast::GenericBound, _ctxt: BoundKind) {\n-        record_variants!((self, b, b, GenericBound, GenericBound), [Trait, Outlives]);\n+        record_variants!(\n+            (self, b, b, Id::None, ast, GenericBound, GenericBound),\n+            [Trait, Outlives]\n+        );\n         ast_visit::walk_param_bound(self, b)\n     }\n \n@@ -504,6 +643,10 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // common, so we don't implement `visit_use_tree` and tolerate the missed\n     // coverage in the latter case.\n \n+    // `PathSegment` has one inline use (in `ast::ExprKind::MethodCall`) and\n+    // one non-inline use (in `ast::Path::segments`). The latter case is more\n+    // common than the former case, so we implement this visitor and tolerate\n+    // the double counting in the former case.\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n         ast_visit::walk_path_segment(self, path_span, path_segment)\n@@ -514,12 +657,18 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     // common, so we implement `visit_generic_args` and tolerate the double\n     // counting in the former case.\n     fn visit_generic_args(&mut self, sp: Span, g: &'v ast::GenericArgs) {\n-        record_variants!((self, g, g, GenericArgs, GenericArgs), [AngleBracketed, Parenthesized]);\n+        record_variants!(\n+            (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n+            [AngleBracketed, Parenthesized]\n+        );\n         ast_visit::walk_generic_args(self, sp, g)\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n-        record_variants!((self, attr, attr.kind, Attribute, AttrKind), [Normal, DocComment]);\n+        record_variants!(\n+            (self, attr, attr.kind, Id::None, ast, Attribute, AttrKind),\n+            [Normal, DocComment]\n+        );\n         ast_visit::walk_attribute(self, attr)\n     }\n "}, {"sha": "ab71fa0bc1d4d2a407c3d3ea28db8a60496a63a2", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -1393,7 +1393,7 @@ impl<'a> Resolver<'a> {\n \n         // If only some candidates are accessible, take just them\n         if !candidates.iter().all(|v: &ImportSuggestion| !v.accessible) {\n-            candidates = candidates.into_iter().filter(|x| x.accessible).collect();\n+            candidates.retain(|x| x.accessible)\n         }\n \n         candidates"}, {"sha": "c9fc6b9e47ac56fd365af28cf0ad25974dbdaaa8", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -972,7 +972,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         self.process_macro_use(trait_item.span);\n         match trait_item.kind {\n             hir::TraitItemKind::Const(ref ty, body) => {\n-                let body = body.map(|b| &self.tcx.hir().body(b).value);\n+                let body = body.map(|b| self.tcx.hir().body(b).value);\n                 let attrs = self.tcx.hir().attrs(trait_item.hir_id());\n                 self.process_assoc_const(\n                     trait_item.def_id,"}, {"sha": "afac75de2d96d8e831fab717695e89e896938bd7", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -647,7 +647,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 multispan.push_span_label(span_late, note);\n                 tcx.struct_span_lint_hir(\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n-                    args.args[0].id(),\n+                    args.args[0].hir_id(),\n                     multispan,\n                     |lint| {\n                         lint.build(msg).emit();"}, {"sha": "28e4f8ad0ef6ca01d7b98c7db2726efad3f80bc6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -397,7 +397,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if has_default {\n                         tcx.check_optional_stability(\n                             param.def_id,\n-                            Some(arg.id()),\n+                            Some(arg.hir_id()),\n                             arg.span(),\n                             None,\n                             AllowUnstable::No,"}, {"sha": "4a3d69f5b6c661e29b25daf059cfb5b30b060d98", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -42,6 +42,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_parentheses(err, expr);\n         self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected);\n+        self.suggest_copied_or_cloned(err, expr, expr_ty, expected);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);"}, {"sha": "d8527b9267e50dc293b9b55527cbd2f89bef0aa1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -925,6 +926,69 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn suggest_copied_or_cloned(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) {\n+        let ty::Adt(adt_def, substs) = expr_ty.kind() else { return; };\n+        let ty::Adt(expected_adt_def, expected_substs) = expected_ty.kind() else { return; };\n+        if adt_def != expected_adt_def {\n+            return;\n+        }\n+\n+        let mut suggest_copied_or_cloned = || {\n+            let expr_inner_ty = substs.type_at(0);\n+            let expected_inner_ty = expected_substs.type_at(0);\n+            if let ty::Ref(_, ty, hir::Mutability::Not) = expr_inner_ty.kind()\n+                && self.can_eq(self.param_env, *ty, expected_inner_ty).is_ok()\n+            {\n+                let def_path = self.tcx.def_path_str(adt_def.did());\n+                if self.type_is_copy_modulo_regions(self.param_env, *ty, expr.span) {\n+                    diag.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{def_path}::copied` to copy the value inside the `{def_path}`\"\n+                        ),\n+                        \".copied()\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else if let Some(clone_did) = self.tcx.lang_items().clone_trait()\n+                    && rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions(\n+                        self,\n+                        self.param_env,\n+                        *ty,\n+                        clone_did,\n+                        expr.span\n+                    )\n+                {\n+                    diag.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi(),\n+                        format!(\n+                            \"use `{def_path}::cloned` to clone the value inside the `{def_path}`\"\n+                        ),\n+                        \".cloned()\",\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+        };\n+\n+        if let Some(result_did) = self.tcx.get_diagnostic_item(sym::Result)\n+            && adt_def.did() == result_did\n+            // Check that the error types are equal\n+            && self.can_eq(self.param_env, substs.type_at(1), expected_substs.type_at(1)).is_ok()\n+        {\n+            suggest_copied_or_cloned();\n+        } else if let Some(option_did) = self.tcx.get_diagnostic_item(sym::Option)\n+            && adt_def.did() == option_did\n+        {\n+            suggest_copied_or_cloned();\n+        }\n+    }\n+\n     /// Suggest wrapping the block in square brackets instead of curly braces\n     /// in case the block was mistaken array syntax, e.g. `{ 1 }` -> `[ 1 ]`.\n     pub(crate) fn suggest_block_to_brackets("}, {"sha": "0b207a6c0bee1d8fbf3b5a1941bf565075c2ebc0", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -2024,6 +2024,10 @@ fn should_do_rust_2021_incompatible_closure_captures_analysis(\n     tcx: TyCtxt<'_>,\n     closure_id: hir::HirId,\n ) -> bool {\n+    if tcx.sess.rust_2021() {\n+        return false;\n+    }\n+\n     let (level, _) =\n         tcx.lint_level_at_node(lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES, closure_id);\n "}, {"sha": "2435426873bcb32c3504951adbe89db2933a8f19", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -78,7 +78,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         args.args\n                             .iter()\n                             .filter(|arg| arg.is_ty_or_const())\n-                            .position(|arg| arg.id() == hir_id)\n+                            .position(|arg| arg.hir_id() == hir_id)\n                     })\n                     .unwrap_or_else(|| {\n                         bug!(\"no arg matching AnonConst in segment\");\n@@ -111,7 +111,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     args.args\n                         .iter()\n                         .filter(|arg| arg.is_ty_or_const())\n-                        .position(|arg| arg.id() == hir_id)\n+                        .position(|arg| arg.hir_id() == hir_id)\n                 })\n                 .unwrap_or_else(|| {\n                     bug!(\"no arg matching AnonConst in segment\");\n@@ -165,7 +165,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                 args.args\n                 .iter()\n                 .filter(|arg| arg.is_ty_or_const())\n-                .position(|arg| arg.id() == hir_id)\n+                .position(|arg| arg.hir_id() == hir_id)\n                 .map(|index| (index, seg)).or_else(|| args.bindings\n                     .iter()\n                     .filter_map(TypeBinding::opt_const)\n@@ -228,7 +228,7 @@ fn get_path_containing_arg_in_pat<'hir>(\n             .iter()\n             .filter_map(|seg| seg.args)\n             .flat_map(|args| args.args)\n-            .any(|arg| arg.id() == arg_id)\n+            .any(|arg| arg.hir_id() == arg_id)\n     };\n     let mut arg_path = None;\n     pat.walk(|pat| match pat.kind {"}, {"sha": "56bb71b5dcbdee2c0e00e542126125192314bf26", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -429,7 +429,7 @@ mod cgroups {\n                         Some(b\"\") => Cgroup::V2,\n                         Some(controllers)\n                             if from_utf8(controllers)\n-                                .is_ok_and(|c| c.split(\",\").any(|c| c == \"cpu\")) =>\n+                                .is_ok_and(|c| c.split(',').any(|c| c == \"cpu\")) =>\n                         {\n                             Cgroup::V1\n                         }"}, {"sha": "1e6f20d2b491c4bce959b1e3bde66d37160128e9", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -2367,9 +2367,9 @@ pub(crate) fn get_filtered_impls_for_reference<'a>(\n     let Some(v) = shared.cache.impls.get(&def_id) else { return (Vec::new(), Vec::new(), Vec::new()) };\n     // Since there is no \"direct implementation\" on the reference primitive type, we filter out\n     // every implementation which isn't a trait implementation.\n-    let traits: Vec<_> = v.iter().filter(|i| i.inner_impl().trait_.is_some()).collect();\n+    let traits = v.iter().filter(|i| i.inner_impl().trait_.is_some());\n     let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-        traits.into_iter().partition(|t| t.inner_impl().kind.is_auto());\n+        traits.partition(|t| t.inner_impl().kind.is_auto());\n \n     let (blanket_impl, concrete): (Vec<&Impl>, _) =\n         concrete.into_iter().partition(|t| t.inner_impl().kind.is_blanket());"}, {"sha": "fc4d46fe6b6f191fbe54d6391c17837a643ca497", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -312,7 +312,7 @@ pub(super) fn write_shared(\n                 if line.starts_with(&prefix) {\n                     continue;\n                 }\n-                if line.ends_with(\",\") {\n+                if line.ends_with(',') {\n                     ret.push(line[..line.len() - 1].to_string());\n                 } else {\n                     // No comma (it's the case for the last added crate line)"}, {"sha": "64e52eaac06e5dd4668f1ccb367b4047c3e45acd", "filename": "src/test/ui/borrowck/issue-101119.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,16 @@\n+struct State;\n+\n+fn once(_: impl FnOnce()) {}\n+\n+fn fill_memory_blocks_mt(state: &mut State) {\n+    loop {\n+        once(move || {\n+            //~^ ERROR use of moved value: `state`\n+            fill_segment(state);\n+        });\n+    }\n+}\n+\n+fn fill_segment(_: &mut State) {}\n+\n+fn main() {}"}, {"sha": "a22afdc67648ffb5888443dc083558169917baff", "filename": "src/test/ui/borrowck/issue-101119.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-101119.stderr?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,15 @@\n+error[E0382]: use of moved value: `state`\n+  --> $DIR/issue-101119.rs:7:14\n+   |\n+LL | fn fill_memory_blocks_mt(state: &mut State) {\n+   |                          ----- move occurs because `state` has type `&mut State`, which does not implement the `Copy` trait\n+LL |     loop {\n+LL |         once(move || {\n+   |              ^^^^^^^ value moved into closure here, in previous iteration of loop\n+LL |\n+LL |             fill_segment(state);\n+   |                          ----- use occurs due to use in closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "1381d4f172724476f38f25fd5db5bb2748232cd9", "filename": "src/test/ui/lint/issue-101284.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Flint%2Fissue-101284.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Flint%2Fissue-101284.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-101284.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// edition:2021\n+#![deny(rust_2021_compatibility)]\n+\n+pub struct Warns {\n+    // `Arc` has significant drop\n+    _significant_drop: std::sync::Arc<()>,\n+    field: String,\n+}\n+\n+pub fn test(w: Warns) {\n+    _ = || drop(w.field);\n+}\n+\n+fn main() {}"}, {"sha": "78f709975556fd4858334fff99e87d9bd1b09088", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 177, "deletions": 151, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -1,151 +1,177 @@\n-\n-PRE EXPANSION AST STATS\n-\n-Name                Accumulated Size         Count     Item Size\n-----------------------------------------------------------------\n-ExprField                 48 ( 0.6%)             1            48\n-Crate                     56 ( 0.7%)             1            56\n-Attribute                 64 ( 0.8%)             2            32\n-- Normal                    32 ( 0.4%)             1\n-- DocComment                32 ( 0.4%)             1\n-GenericArgs               64 ( 0.8%)             1            64\n-- AngleBracketed            64 ( 0.8%)             1\n-Local                     72 ( 0.9%)             1            72\n-WherePredicate            72 ( 0.9%)             1            72\n-- BoundPredicate            72 ( 0.9%)             1\n-Arm                       96 ( 1.1%)             2            48\n-ForeignItem               96 ( 1.1%)             1            96\n-- Fn                        96 ( 1.1%)             1\n-FieldDef                 160 ( 1.9%)             2            80\n-Stmt                     160 ( 1.9%)             5            32\n-- Local                     32 ( 0.4%)             1\n-- MacCall                   32 ( 0.4%)             1\n-- Expr                      96 ( 1.1%)             3\n-Param                    160 ( 1.9%)             4            40\n-FnDecl                   200 ( 2.4%)             5            40\n-Variant                  240 ( 2.8%)             2           120\n-Block                    288 ( 3.4%)             6            48\n-GenericBound             352 ( 4.2%)             4            88\n-- Trait                    352 ( 4.2%)             4\n-AssocItem                416 ( 4.9%)             4           104\n-- TyAlias                  208 ( 2.5%)             2\n-- Fn                       208 ( 2.5%)             2\n-GenericParam             520 ( 6.1%)             5           104\n-PathSegment              720 ( 8.5%)            30            24\n-Expr                     832 ( 9.8%)             8           104\n-- Path                     104 ( 1.2%)             1\n-- Match                    104 ( 1.2%)             1\n-- Struct                   104 ( 1.2%)             1\n-- Lit                      208 ( 2.5%)             2\n-- Block                    312 ( 3.7%)             3\n-Pat                      840 ( 9.9%)             7           120\n-- Struct                   120 ( 1.4%)             1\n-- Wild                     120 ( 1.4%)             1\n-- Ident                    600 ( 7.1%)             5\n-Ty                     1_344 (15.9%)            14            96\n-- Rptr                      96 ( 1.1%)             1\n-- Ptr                       96 ( 1.1%)             1\n-- ImplicitSelf             192 ( 2.3%)             2\n-- Path                     960 (11.4%)            10\n-Item                   1_656 (19.6%)             9           184\n-- Trait                    184 ( 2.2%)             1\n-- Enum                     184 ( 2.2%)             1\n-- ForeignMod               184 ( 2.2%)             1\n-- Impl                     184 ( 2.2%)             1\n-- Fn                       368 ( 4.4%)             2\n-- Use                      552 ( 6.5%)             3\n-----------------------------------------------------------------\n-Total                  8_456\n-\n-\n-POST EXPANSION AST STATS\n-\n-Name                Accumulated Size         Count     Item Size\n-----------------------------------------------------------------\n-ExprField                 48 ( 0.5%)             1            48\n-Crate                     56 ( 0.6%)             1            56\n-GenericArgs               64 ( 0.7%)             1            64\n-- AngleBracketed            64 ( 0.7%)             1\n-Local                     72 ( 0.8%)             1            72\n-WherePredicate            72 ( 0.8%)             1            72\n-- BoundPredicate            72 ( 0.8%)             1\n-Arm                       96 ( 1.0%)             2            48\n-ForeignItem               96 ( 1.0%)             1            96\n-- Fn                        96 ( 1.0%)             1\n-InlineAsm                120 ( 1.3%)             1           120\n-Attribute                128 ( 1.4%)             4            32\n-- DocComment                32 ( 0.3%)             1\n-- Normal                    96 ( 1.0%)             3\n-FieldDef                 160 ( 1.7%)             2            80\n-Stmt                     160 ( 1.7%)             5            32\n-- Local                     32 ( 0.3%)             1\n-- Semi                      32 ( 0.3%)             1\n-- Expr                      96 ( 1.0%)             3\n-Param                    160 ( 1.7%)             4            40\n-FnDecl                   200 ( 2.2%)             5            40\n-Variant                  240 ( 2.6%)             2           120\n-Block                    288 ( 3.1%)             6            48\n-GenericBound             352 ( 3.8%)             4            88\n-- Trait                    352 ( 3.8%)             4\n-AssocItem                416 ( 4.5%)             4           104\n-- TyAlias                  208 ( 2.3%)             2\n-- Fn                       208 ( 2.3%)             2\n-GenericParam             520 ( 5.7%)             5           104\n-PathSegment              792 ( 8.6%)            33            24\n-Pat                      840 ( 9.1%)             7           120\n-- Struct                   120 ( 1.3%)             1\n-- Wild                     120 ( 1.3%)             1\n-- Ident                    600 ( 6.5%)             5\n-Expr                     936 (10.2%)             9           104\n-- Path                     104 ( 1.1%)             1\n-- Match                    104 ( 1.1%)             1\n-- Struct                   104 ( 1.1%)             1\n-- InlineAsm                104 ( 1.1%)             1\n-- Lit                      208 ( 2.3%)             2\n-- Block                    312 ( 3.4%)             3\n-Ty                     1_344 (14.6%)            14            96\n-- Rptr                      96 ( 1.0%)             1\n-- Ptr                       96 ( 1.0%)             1\n-- ImplicitSelf             192 ( 2.1%)             2\n-- Path                     960 (10.5%)            10\n-Item                   2_024 (22.0%)            11           184\n-- Trait                    184 ( 2.0%)             1\n-- Enum                     184 ( 2.0%)             1\n-- ExternCrate              184 ( 2.0%)             1\n-- ForeignMod               184 ( 2.0%)             1\n-- Impl                     184 ( 2.0%)             1\n-- Fn                       368 ( 4.0%)             2\n-- Use                      736 ( 8.0%)             4\n-----------------------------------------------------------------\n-Total                  9_184\n-\n-\n-HIR STATS\n-\n-Name                Accumulated Size         Count     Item Size\n-----------------------------------------------------------------\n-Param                     64 ( 0.7%)             2            32\n-Local                     64 ( 0.7%)             1            64\n-ForeignItem               72 ( 0.8%)             1            72\n-FieldDef                  96 ( 1.0%)             2            48\n-Arm                       96 ( 1.0%)             2            48\n-Stmt                      96 ( 1.0%)             3            32\n-FnDecl                   120 ( 1.3%)             3            40\n-Attribute                128 ( 1.4%)             4            32\n-Lifetime                 128 ( 1.4%)             4            32\n-Variant                  160 ( 1.7%)             2            80\n-ImplItem                 176 ( 1.9%)             2            88\n-GenericBound             192 ( 2.1%)             4            48\n-TraitItem                192 ( 2.1%)             2            96\n-WherePredicate           216 ( 2.3%)             3            72\n-Block                    288 ( 3.1%)             6            48\n-QPath                    408 ( 4.4%)            17            24\n-Pat                      440 ( 4.8%)             5            88\n-Expr                     672 ( 7.3%)            12            56\n-Item                     960 (10.4%)            12            80\n-Ty                     1_152 (12.4%)            16            72\n-Path                   1_296 (14.0%)            27            48\n-PathSegment            2_240 (24.2%)            40            56\n-----------------------------------------------------------------\n-Total                  9_256\n-\n+ast-stats-1 PRE EXPANSION AST STATS\n+ast-stats-1 Name                Accumulated Size         Count     Item Size\n+ast-stats-1 ----------------------------------------------------------------\n+ast-stats-1 ExprField                 48 ( 0.6%)             1            48\n+ast-stats-1 Crate                     56 ( 0.7%)             1            56\n+ast-stats-1 Attribute                 64 ( 0.8%)             2            32\n+ast-stats-1 - Normal                    32 ( 0.4%)             1\n+ast-stats-1 - DocComment                32 ( 0.4%)             1\n+ast-stats-1 GenericArgs               64 ( 0.8%)             1            64\n+ast-stats-1 - AngleBracketed            64 ( 0.8%)             1\n+ast-stats-1 Local                     72 ( 0.9%)             1            72\n+ast-stats-1 WherePredicate            72 ( 0.9%)             1            72\n+ast-stats-1 - BoundPredicate            72 ( 0.9%)             1\n+ast-stats-1 Arm                       96 ( 1.1%)             2            48\n+ast-stats-1 ForeignItem               96 ( 1.1%)             1            96\n+ast-stats-1 - Fn                        96 ( 1.1%)             1\n+ast-stats-1 FieldDef                 160 ( 1.9%)             2            80\n+ast-stats-1 Stmt                     160 ( 1.9%)             5            32\n+ast-stats-1 - Local                     32 ( 0.4%)             1\n+ast-stats-1 - MacCall                   32 ( 0.4%)             1\n+ast-stats-1 - Expr                      96 ( 1.1%)             3\n+ast-stats-1 Param                    160 ( 1.9%)             4            40\n+ast-stats-1 FnDecl                   200 ( 2.4%)             5            40\n+ast-stats-1 Variant                  240 ( 2.8%)             2           120\n+ast-stats-1 Block                    288 ( 3.4%)             6            48\n+ast-stats-1 GenericBound             352 ( 4.2%)             4            88\n+ast-stats-1 - Trait                    352 ( 4.2%)             4\n+ast-stats-1 AssocItem                416 ( 4.9%)             4           104\n+ast-stats-1 - TyAlias                  208 ( 2.5%)             2\n+ast-stats-1 - Fn                       208 ( 2.5%)             2\n+ast-stats-1 GenericParam             520 ( 6.1%)             5           104\n+ast-stats-1 PathSegment              720 ( 8.5%)            30            24\n+ast-stats-1 Expr                     832 ( 9.8%)             8           104\n+ast-stats-1 - Path                     104 ( 1.2%)             1\n+ast-stats-1 - Match                    104 ( 1.2%)             1\n+ast-stats-1 - Struct                   104 ( 1.2%)             1\n+ast-stats-1 - Lit                      208 ( 2.5%)             2\n+ast-stats-1 - Block                    312 ( 3.7%)             3\n+ast-stats-1 Pat                      840 ( 9.9%)             7           120\n+ast-stats-1 - Struct                   120 ( 1.4%)             1\n+ast-stats-1 - Wild                     120 ( 1.4%)             1\n+ast-stats-1 - Ident                    600 ( 7.1%)             5\n+ast-stats-1 Ty                     1_344 (15.9%)            14            96\n+ast-stats-1 - Rptr                      96 ( 1.1%)             1\n+ast-stats-1 - Ptr                       96 ( 1.1%)             1\n+ast-stats-1 - ImplicitSelf             192 ( 2.3%)             2\n+ast-stats-1 - Path                     960 (11.4%)            10\n+ast-stats-1 Item                   1_656 (19.6%)             9           184\n+ast-stats-1 - Trait                    184 ( 2.2%)             1\n+ast-stats-1 - Enum                     184 ( 2.2%)             1\n+ast-stats-1 - ForeignMod               184 ( 2.2%)             1\n+ast-stats-1 - Impl                     184 ( 2.2%)             1\n+ast-stats-1 - Fn                       368 ( 4.4%)             2\n+ast-stats-1 - Use                      552 ( 6.5%)             3\n+ast-stats-1 ----------------------------------------------------------------\n+ast-stats-1 Total                  8_456\n+ast-stats-1\n+ast-stats-2 POST EXPANSION AST STATS\n+ast-stats-2 Name                Accumulated Size         Count     Item Size\n+ast-stats-2 ----------------------------------------------------------------\n+ast-stats-2 ExprField                 48 ( 0.5%)             1            48\n+ast-stats-2 Crate                     56 ( 0.6%)             1            56\n+ast-stats-2 GenericArgs               64 ( 0.7%)             1            64\n+ast-stats-2 - AngleBracketed            64 ( 0.7%)             1\n+ast-stats-2 Local                     72 ( 0.8%)             1            72\n+ast-stats-2 WherePredicate            72 ( 0.8%)             1            72\n+ast-stats-2 - BoundPredicate            72 ( 0.8%)             1\n+ast-stats-2 Arm                       96 ( 1.0%)             2            48\n+ast-stats-2 ForeignItem               96 ( 1.0%)             1            96\n+ast-stats-2 - Fn                        96 ( 1.0%)             1\n+ast-stats-2 InlineAsm                120 ( 1.3%)             1           120\n+ast-stats-2 Attribute                128 ( 1.4%)             4            32\n+ast-stats-2 - DocComment                32 ( 0.3%)             1\n+ast-stats-2 - Normal                    96 ( 1.0%)             3\n+ast-stats-2 FieldDef                 160 ( 1.7%)             2            80\n+ast-stats-2 Stmt                     160 ( 1.7%)             5            32\n+ast-stats-2 - Local                     32 ( 0.3%)             1\n+ast-stats-2 - Semi                      32 ( 0.3%)             1\n+ast-stats-2 - Expr                      96 ( 1.0%)             3\n+ast-stats-2 Param                    160 ( 1.7%)             4            40\n+ast-stats-2 FnDecl                   200 ( 2.2%)             5            40\n+ast-stats-2 Variant                  240 ( 2.6%)             2           120\n+ast-stats-2 Block                    288 ( 3.1%)             6            48\n+ast-stats-2 GenericBound             352 ( 3.8%)             4            88\n+ast-stats-2 - Trait                    352 ( 3.8%)             4\n+ast-stats-2 AssocItem                416 ( 4.5%)             4           104\n+ast-stats-2 - TyAlias                  208 ( 2.3%)             2\n+ast-stats-2 - Fn                       208 ( 2.3%)             2\n+ast-stats-2 GenericParam             520 ( 5.7%)             5           104\n+ast-stats-2 PathSegment              792 ( 8.6%)            33            24\n+ast-stats-2 Pat                      840 ( 9.1%)             7           120\n+ast-stats-2 - Struct                   120 ( 1.3%)             1\n+ast-stats-2 - Wild                     120 ( 1.3%)             1\n+ast-stats-2 - Ident                    600 ( 6.5%)             5\n+ast-stats-2 Expr                     936 (10.2%)             9           104\n+ast-stats-2 - Path                     104 ( 1.1%)             1\n+ast-stats-2 - Match                    104 ( 1.1%)             1\n+ast-stats-2 - Struct                   104 ( 1.1%)             1\n+ast-stats-2 - InlineAsm                104 ( 1.1%)             1\n+ast-stats-2 - Lit                      208 ( 2.3%)             2\n+ast-stats-2 - Block                    312 ( 3.4%)             3\n+ast-stats-2 Ty                     1_344 (14.6%)            14            96\n+ast-stats-2 - Rptr                      96 ( 1.0%)             1\n+ast-stats-2 - Ptr                       96 ( 1.0%)             1\n+ast-stats-2 - ImplicitSelf             192 ( 2.1%)             2\n+ast-stats-2 - Path                     960 (10.5%)            10\n+ast-stats-2 Item                   2_024 (22.0%)            11           184\n+ast-stats-2 - Trait                    184 ( 2.0%)             1\n+ast-stats-2 - Enum                     184 ( 2.0%)             1\n+ast-stats-2 - ExternCrate              184 ( 2.0%)             1\n+ast-stats-2 - ForeignMod               184 ( 2.0%)             1\n+ast-stats-2 - Impl                     184 ( 2.0%)             1\n+ast-stats-2 - Fn                       368 ( 4.0%)             2\n+ast-stats-2 - Use                      736 ( 8.0%)             4\n+ast-stats-2 ----------------------------------------------------------------\n+ast-stats-2 Total                  9_184\n+ast-stats-2\n+hir-stats HIR STATS\n+hir-stats Name                Accumulated Size         Count     Item Size\n+hir-stats ----------------------------------------------------------------\n+hir-stats ForeignItemRef            24 ( 0.2%)             1            24\n+hir-stats Mod                       32 ( 0.3%)             1            32\n+hir-stats ExprField                 40 ( 0.4%)             1            40\n+hir-stats TraitItemRef              56 ( 0.6%)             2            28\n+hir-stats Param                     64 ( 0.6%)             2            32\n+hir-stats Local                     64 ( 0.6%)             1            64\n+hir-stats InlineAsm                 72 ( 0.7%)             1            72\n+hir-stats ImplItemRef               72 ( 0.7%)             2            36\n+hir-stats FieldDef                  96 ( 1.0%)             2            48\n+hir-stats Arm                       96 ( 1.0%)             2            48\n+hir-stats Body                      96 ( 1.0%)             3            32\n+hir-stats Stmt                      96 ( 1.0%)             3            32\n+hir-stats - Local                     32 ( 0.3%)             1\n+hir-stats - Semi                      32 ( 0.3%)             1\n+hir-stats - Expr                      32 ( 0.3%)             1\n+hir-stats FnDecl                   120 ( 1.2%)             3            40\n+hir-stats Attribute                128 ( 1.3%)             4            32\n+hir-stats GenericArgs              144 ( 1.4%)             3            48\n+hir-stats Variant                  160 ( 1.6%)             2            80\n+hir-stats GenericArg               160 ( 1.6%)             4            40\n+hir-stats - Type                      40 ( 0.4%)             1\n+hir-stats - Lifetime                 120 ( 1.2%)             3\n+hir-stats GenericBound             192 ( 1.9%)             4            48\n+hir-stats - Trait                    192 ( 1.9%)             4\n+hir-stats WherePredicate           216 ( 2.1%)             3            72\n+hir-stats - BoundPredicate           216 ( 2.1%)             3\n+hir-stats Block                    288 ( 2.9%)             6            48\n+hir-stats GenericParam             400 ( 4.0%)             5            80\n+hir-stats Pat                      440 ( 4.4%)             5            88\n+hir-stats - Wild                      88 ( 0.9%)             1\n+hir-stats - Struct                    88 ( 0.9%)             1\n+hir-stats - Binding                  264 ( 2.6%)             3\n+hir-stats Generics                 560 ( 5.5%)            10            56\n+hir-stats Expr                     672 ( 6.7%)            12            56\n+hir-stats - Path                      56 ( 0.6%)             1\n+hir-stats - Struct                    56 ( 0.6%)             1\n+hir-stats - Match                     56 ( 0.6%)             1\n+hir-stats - InlineAsm                 56 ( 0.6%)             1\n+hir-stats - Lit                      112 ( 1.1%)             2\n+hir-stats - Block                    336 ( 3.3%)             6\n+hir-stats Item                     960 ( 9.5%)            12            80\n+hir-stats - Trait                     80 ( 0.8%)             1\n+hir-stats - Enum                      80 ( 0.8%)             1\n+hir-stats - ExternCrate               80 ( 0.8%)             1\n+hir-stats - ForeignMod                80 ( 0.8%)             1\n+hir-stats - Impl                      80 ( 0.8%)             1\n+hir-stats - Fn                       160 ( 1.6%)             2\n+hir-stats - Use                      400 ( 4.0%)             5\n+hir-stats Ty                     1_080 (10.7%)            15            72\n+hir-stats - Ptr                       72 ( 0.7%)             1\n+hir-stats - Rptr                      72 ( 0.7%)             1\n+hir-stats - Path                     936 ( 9.3%)            13\n+hir-stats Path                   1_536 (15.2%)            32            48\n+hir-stats PathSegment            2_240 (22.2%)            40            56\n+hir-stats ----------------------------------------------------------------\n+hir-stats Total                 10_104\n+hir-stats"}, {"sha": "f801403feec4f65404978296d52edbb31f5e296d", "filename": "src/test/ui/suggestions/copied-and-cloned.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.fixed?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+fn expect<T>(_: T) {}\n+\n+fn main() {\n+    let x = Some(&());\n+    expect::<Option<()>>(x.copied());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::copied` to copy the value inside the `Option`\n+    let x = Ok(&());\n+    expect::<Result<(), ()>>(x.copied());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::copied` to copy the value inside the `Result`\n+    let s = String::new();\n+    let x = Some(&s);\n+    expect::<Option<String>>(x.cloned());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::cloned` to clone the value inside the `Option`\n+    let x = Ok(&s);\n+    expect::<Result<String, ()>>(x.cloned());\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::cloned` to clone the value inside the `Result`\n+}"}, {"sha": "640450b76552723ea2de2f38f265d3edded710b1", "filename": "src/test/ui/suggestions/copied-and-cloned.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+fn expect<T>(_: T) {}\n+\n+fn main() {\n+    let x = Some(&());\n+    expect::<Option<()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::copied` to copy the value inside the `Option`\n+    let x = Ok(&());\n+    expect::<Result<(), ()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::copied` to copy the value inside the `Result`\n+    let s = String::new();\n+    let x = Some(&s);\n+    expect::<Option<String>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::cloned` to clone the value inside the `Option`\n+    let x = Ok(&s);\n+    expect::<Result<String, ()>>(x);\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Result::cloned` to clone the value inside the `Result`\n+}"}, {"sha": "a6336281b407265dd26c90a8b5b0d598679a76ea", "filename": "src/test/ui/suggestions/copied-and-cloned.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcopied-and-cloned.stderr?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -0,0 +1,83 @@\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:7:26\n+   |\n+LL |     expect::<Option<()>>(x);\n+   |     -------------------- ^ expected `()`, found `&()`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<()>`\n+              found enum `Option<&()>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Option::copied` to copy the value inside the `Option`\n+   |\n+LL |     expect::<Option<()>>(x.copied());\n+   |                           +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:11:30\n+   |\n+LL |     expect::<Result<(), ()>>(x);\n+   |     ------------------------ ^ expected `()`, found `&()`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Result<(), ()>`\n+              found enum `Result<&(), _>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Result::copied` to copy the value inside the `Result`\n+   |\n+LL |     expect::<Result<(), ()>>(x.copied());\n+   |                               +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:16:30\n+   |\n+LL |     expect::<Option<String>>(x);\n+   |     ------------------------ ^ expected struct `String`, found `&String`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Option<String>`\n+              found enum `Option<&String>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Option::cloned` to clone the value inside the `Option`\n+   |\n+LL |     expect::<Option<String>>(x.cloned());\n+   |                               +++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/copied-and-cloned.rs:20:34\n+   |\n+LL |     expect::<Result<String, ()>>(x);\n+   |     ---------------------------- ^ expected struct `String`, found `&String`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected enum `Result<String, ()>`\n+              found enum `Result<&String, _>`\n+note: function defined here\n+  --> $DIR/copied-and-cloned.rs:3:4\n+   |\n+LL | fn expect<T>(_: T) {}\n+   |    ^^^^^^    ----\n+help: use `Result::cloned` to clone the value inside the `Result`\n+   |\n+LL |     expect::<Result<String, ()>>(x.cloned());\n+   |                                   +++++++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5448360049d2e2bd62c8faabf7552ff0f8acbee4", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -178,9 +178,9 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n                 InlineAsmOperand::In { expr, .. } | InlineAsmOperand::InOut { expr, .. } => {\n                     never_loop_expr(expr, main_loop_id)\n                 },\n-                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n+                InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter().copied(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n-                    never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n+                    never_loop_expr_all(&mut once(*in_expr).chain(out_expr.iter().copied()), main_loop_id)\n                 },\n                 InlineAsmOperand::Const { .. }\n                 | InlineAsmOperand::SymFn { .. }"}, {"sha": "940601a44fb072c370e82e1d435c8acde6bc6dbf", "filename": "src/tools/clippy/clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -105,7 +105,7 @@ fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<\n         if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n         if cx.tcx.is_diagnostic_item(sym::mem_size_of, def_id);\n         then {\n-            cx.typeck_results().node_substs(count_func.hir_id).types().next().map(|resolved_ty| (real_ty, resolved_ty))\n+            cx.typeck_results().node_substs(count_func.hir_id).types().next().map(|resolved_ty| (*real_ty, resolved_ty))\n         } else {\n             None\n         }"}, {"sha": "3ffcaa90af3e57dd3b37cc97cfc65a882a6d282a", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -595,7 +595,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n     }\n \n     fn body(&self, body_id: &Binding<hir::BodyId>) {\n-        let expr = &self.cx.tcx.hir().body(body_id.value).value;\n+        let expr = self.cx.tcx.hir().body(body_id.value).value;\n         bind!(self, expr);\n         out!(\"let {expr} = &cx.tcx.hir().body({body_id}).value;\");\n         self.expr(expr);"}, {"sha": "f3a08e98688e9dbae1a120d20d7eeaf48f02d26a", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=6e4a9ab650b135ae0ff761e4a37d96c8bcaf7b3d", "patch": "@@ -337,7 +337,7 @@ pub fn qpath_generic_tys<'tcx>(qpath: &QPath<'tcx>) -> impl Iterator<Item = &'tc\n         .map_or(&[][..], |a| a.args)\n         .iter()\n         .filter_map(|a| match a {\n-            hir::GenericArg::Type(ty) => Some(ty),\n+            hir::GenericArg::Type(ty) => Some(*ty),\n             _ => None,\n         })\n }\n@@ -1812,7 +1812,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n             }\n         };\n \n-        let mut expr = &func.value;\n+        let mut expr = func.value;\n         loop {\n             match expr.kind {\n                 #[rustfmt::skip]"}]}