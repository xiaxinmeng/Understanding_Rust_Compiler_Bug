{"sha": "116b299f0093ca183768b86d08705b117519d6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNmIyOTlmMDA5M2NhMTgzNzY4Yjg2ZDA4NzA1YjExNzUxOWQ2ZWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-09T16:18:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-09T16:18:24Z"}, "message": "Rollup merge of #58924 - cuviper:more-as_slice, r=dtolnay\n\nAdd as_slice() to slice::IterMut and vec::Drain\n\nIn bluss/indexmap#88, we found that there was no easy way to implement\n`Debug` for our `IterMut` and `Drain` iterators. Those are built on\n`slice::IterMut` and `vec::Drain`, which implement `Debug` themselves,\nbut have no other way to access their data. With a new `as_slice()`\nmethod, we can read the data and customize its presentation.", "tree": {"sha": "c3098f7d4c8e7591c97000bbf239cc0456459241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3098f7d4c8e7591c97000bbf239cc0456459241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116b299f0093ca183768b86d08705b117519d6ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg+dQCRBK7hj4Ov3rIwAAdHIIAEFK9pw87PRqoetdeiNugcrm\ntyc0wVncV2r98WqOrInWVGSCq1ny9jh9DlcRUg3/qkzDdGcVWfD3XQXZ+V6Y+6+e\nbqLQn3yxziZhTmaFNdn/tRGvlxgtF3z5YxlN8qIR2kgX0RSrzkIXGI6zZ8xvKqDc\ny+kbI6vqbSzud2cZJflE2n7pus7SMxBb0cTKsqnK41BVYufQuFnvmfxCJemb8t7k\nohzJYb+XKZwaG5pfmAF5aZnQyN3+ga+Il+aRPFUt8wRmPjKdMrd1xE2x9avyVN/X\nrOKeyJKGiGJC27Vth/JucuZVoWpmJQ2YWE7ZSMPtPsS0QKn169IdGBgMd+UhU8Y=\n=ksto\n-----END PGP SIGNATURE-----\n", "payload": "tree c3098f7d4c8e7591c97000bbf239cc0456459241\nparent 79873f79b19f15dae9d44b8e57047c6f34514ed4\nparent e478cadbbe51e335b7248018141877b88770fe68\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1552148304 +0100\ncommitter GitHub <noreply@github.com> 1552148304 +0100\n\nRollup merge of #58924 - cuviper:more-as_slice, r=dtolnay\n\nAdd as_slice() to slice::IterMut and vec::Drain\n\nIn bluss/indexmap#88, we found that there was no easy way to implement\n`Debug` for our `IterMut` and `Drain` iterators. Those are built on\n`slice::IterMut` and `vec::Drain`, which implement `Debug` themselves,\nbut have no other way to access their data. With a new `as_slice()`\nmethod, we can read the data and customize its presentation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116b299f0093ca183768b86d08705b117519d6ef", "html_url": "https://github.com/rust-lang/rust/commit/116b299f0093ca183768b86d08705b117519d6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116b299f0093ca183768b86d08705b117519d6ef/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79873f79b19f15dae9d44b8e57047c6f34514ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/79873f79b19f15dae9d44b8e57047c6f34514ed4", "html_url": "https://github.com/rust-lang/rust/commit/79873f79b19f15dae9d44b8e57047c6f34514ed4"}, {"sha": "e478cadbbe51e335b7248018141877b88770fe68", "url": "https://api.github.com/repos/rust-lang/rust/commits/e478cadbbe51e335b7248018141877b88770fe68", "html_url": "https://github.com/rust-lang/rust/commit/e478cadbbe51e335b7248018141877b88770fe68"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "adcd3d84f4832ebd79d53578d6467b567ed3e479", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/116b299f0093ca183768b86d08705b117519d6ef/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116b299f0093ca183768b86d08705b117519d6ef/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=116b299f0093ca183768b86d08705b117519d6ef", "patch": "@@ -2468,6 +2468,25 @@ impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n     }\n }\n \n+impl<'a, T> Drain<'a, T> {\n+    /// Returns the remaining items of this iterator as a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(vec_drain_as_slice)]\n+    /// let mut vec = vec!['a', 'b', 'c'];\n+    /// let mut drain = vec.drain(..);\n+    /// assert_eq!(drain.as_slice(), &['a', 'b', 'c']);\n+    /// let _ = drain.next().unwrap();\n+    /// assert_eq!(drain.as_slice(), &['b', 'c']);\n+    /// ```\n+    #[unstable(feature = \"vec_drain_as_slice\", reason = \"recently added\", issue = \"58957\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.iter.as_slice()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<T: Sync> Sync for Drain<'_, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "b3594f8a3858aec27cc66408fa1bb8ae41fe523f", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/116b299f0093ca183768b86d08705b117519d6ef/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116b299f0093ca183768b86d08705b117519d6ef/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=116b299f0093ca183768b86d08705b117519d6ef", "patch": "@@ -3288,6 +3288,34 @@ impl<'a, T> IterMut<'a, T> {\n     pub fn into_slice(self) -> &'a mut [T] {\n         unsafe { from_raw_parts_mut(self.ptr, len!(self)) }\n     }\n+\n+    /// Views the underlying data as a subslice of the original data.\n+    ///\n+    /// To avoid creating `&mut [T]` references that alias, the returned slice\n+    /// borrows its lifetime from the iterator the method is applied on.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// # #![feature(slice_iter_mut_as_slice)]\n+    /// let mut slice: &mut [usize] = &mut [1, 2, 3];\n+    ///\n+    /// // First, we get the iterator:\n+    /// let mut iter = slice.iter_mut();\n+    /// // So if we check what the `as_slice` method returns here, we have \"[1, 2, 3]\":\n+    /// assert_eq!(iter.as_slice(), &[1, 2, 3]);\n+    ///\n+    /// // Next, we move to the second element of the slice:\n+    /// iter.next();\n+    /// // Now `as_slice` returns \"[2, 3]\":\n+    /// assert_eq!(iter.as_slice(), &[2, 3]);\n+    /// ```\n+    #[unstable(feature = \"slice_iter_mut_as_slice\", reason = \"recently added\", issue = \"58957\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.make_slice()\n+    }\n }\n \n iterator!{struct IterMut -> *mut T, &'a mut T, mut, {mut}, {}}"}]}