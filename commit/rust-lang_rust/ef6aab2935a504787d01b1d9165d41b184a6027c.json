{"sha": "ef6aab2935a504787d01b1d9165d41b184a6027c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmFhYjI5MzVhNTA0Nzg3ZDAxYjFkOTE2NWQ0MWIxODRhNjAyN2M=", "commit": {"author": {"name": "Aaron Gallagher", "email": "_@habnab.it", "date": "2016-07-29T07:48:52Z"}, "committer": {"name": "Aaron Gallagher", "email": "_@habnab.it", "date": "2016-08-21T23:41:43Z"}, "message": "Reduce duplication in std::sys::unix::rand.\n\nThere were a bunch of more-of-less the same few lines for doing a\nfill_bytes+transmute, and I didn't want to copy-paste it yet again.", "tree": {"sha": "7ac6772ab2978efbb4315d2a17d853ef1b73eb3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ac6772ab2978efbb4315d2a17d853ef1b73eb3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6aab2935a504787d01b1d9165d41b184a6027c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6aab2935a504787d01b1d9165d41b184a6027c", "html_url": "https://github.com/rust-lang/rust/commit/ef6aab2935a504787d01b1d9165d41b184a6027c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6aab2935a504787d01b1d9165d41b184a6027c/comments", "author": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1576de0ce6b75fd177eca289a2826d0190e407a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1576de0ce6b75fd177eca289a2826d0190e407a5", "html_url": "https://github.com/rust-lang/rust/commit/1576de0ce6b75fd177eca289a2826d0190e407a5"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "4e6d801d191766745190134460ba947060f43562", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ef6aab2935a504787d01b1d9165d41b184a6027c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6aab2935a504787d01b1d9165d41b184a6027c/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=ef6aab2935a504787d01b1d9165d41b184a6027c", "patch": "@@ -10,14 +10,28 @@\n \n pub use self::imp::OsRng;\n \n+use mem;\n+\n+fn next_u32(mut fill_buf: &mut FnMut(&mut [u8])) -> u32 {\n+    let mut buf: [u8; 4] = [0; 4];\n+    fill_buf(&mut buf);\n+    unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n+}\n+\n+fn next_u64(mut fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n+    let mut buf: [u8; 8] = [0; 8];\n+    fill_buf(&mut buf);\n+    unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n+}\n+\n #[cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"openbsd\")))]\n mod imp {\n     use self::OsRngInner::*;\n+    use super::{next_u32, next_u64};\n \n     use fs::File;\n     use io;\n     use libc;\n-    use mem;\n     use rand::Rng;\n     use rand::reader::ReaderRng;\n     use sys::os::errno;\n@@ -87,18 +101,6 @@ mod imp {\n         }\n     }\n \n-    fn getrandom_next_u32() -> u32 {\n-        let mut buf: [u8; 4] = [0; 4];\n-        getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n-    }\n-\n-    fn getrandom_next_u64() -> u64 {\n-        let mut buf: [u8; 8] = [0; 8];\n-        getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n-    }\n-\n     #[cfg(all(target_os = \"linux\",\n               any(target_arch = \"x86_64\",\n                   target_arch = \"x86\",\n@@ -163,13 +165,13 @@ mod imp {\n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n             match self.inner {\n-                OsGetrandomRng => getrandom_next_u32(),\n+                OsGetrandomRng => next_u32(&mut getrandom_fill_bytes),\n                 OsReaderRng(ref mut rng) => rng.next_u32(),\n             }\n         }\n         fn next_u64(&mut self) -> u64 {\n             match self.inner {\n-                OsGetrandomRng => getrandom_next_u64(),\n+                OsGetrandomRng => next_u64(&mut getrandom_fill_bytes),\n                 OsReaderRng(ref mut rng) => rng.next_u64(),\n             }\n         }\n@@ -184,9 +186,10 @@ mod imp {\n \n #[cfg(target_os = \"openbsd\")]\n mod imp {\n+    use super::{next_u32, next_u64};\n+\n     use io;\n     use libc;\n-    use mem;\n     use sys::os::errno;\n     use rand::Rng;\n \n@@ -205,14 +208,10 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0; 4];\n-            self.fill_bytes(&mut v);\n-            unsafe { mem::transmute(v) }\n+            next_u32(&mut |v| self.fill_bytes(v))\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0; 8];\n-            self.fill_bytes(&mut v);\n-            unsafe { mem::transmute(v) }\n+            next_u64(&mut |v| self.fill_bytes(v))\n         }\n         fn fill_bytes(&mut self, v: &mut [u8]) {\n             // getentropy(2) permits a maximum buffer size of 256 bytes\n@@ -230,8 +229,9 @@ mod imp {\n \n #[cfg(target_os = \"ios\")]\n mod imp {\n+    use super::{next_u32, next_u64};\n+\n     use io;\n-    use mem;\n     use ptr;\n     use rand::Rng;\n     use libc::{c_int, size_t};\n@@ -265,14 +265,10 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0; 4];\n-            self.fill_bytes(&mut v);\n-            unsafe { mem::transmute(v) }\n+            next_u32(&mut |v| self.fill_bytes(v))\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0; 8];\n-            self.fill_bytes(&mut v);\n-            unsafe { mem::transmute(v) }\n+            next_u64(&mut |v| self.fill_bytes(v))\n         }\n         fn fill_bytes(&mut self, v: &mut [u8]) {\n             let ret = unsafe {"}]}