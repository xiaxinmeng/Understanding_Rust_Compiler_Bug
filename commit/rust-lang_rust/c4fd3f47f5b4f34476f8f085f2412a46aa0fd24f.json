{"sha": "c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZmQzZjQ3ZjViNGYzNDQ3NmY4ZjA4NWYyNDEyYTQ2YWEwZmQyNGY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T19:19:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-21T19:19:07Z"}, "message": "Align InEnvironment with Chalk\n\nThis in particular means storing a chalk_ir::Environment, not our\nTraitEnvironment. This makes InEnvironment not usable for Type, where we\nneed to keep the full TraitEnvironment.", "tree": {"sha": "82b6b318da1564cabd0225dfb3c67433f80b8ab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b6b318da1564cabd0225dfb3c67433f80b8ab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "html_url": "https://github.com/rust-lang/rust/commit/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7be314579db29f64ef660aef1896da33d420ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7be314579db29f64ef660aef1896da33d420ad6", "html_url": "https://github.com/rust-lang/rust/commit/f7be314579db29f64ef660aef1896da33d420ad6"}], "stats": {"total": 217, "additions": 94, "deletions": 123}, "files": [{"sha": "97a78ca2521ce5aec83876d9060621e9e69cad9d", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -217,7 +217,7 @@ impl HirDisplay for Variant {\n \n impl HirDisplay for Type {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        self.ty.value.hir_fmt(f)\n+        self.ty.hir_fmt(f)\n     }\n }\n "}, {"sha": "30b96d7e2ed7c62676e9de340dfa85a28ac3031a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 55, "deletions": 77, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -58,7 +58,7 @@ use hir_ty::{\n     traits::{FnTrait, Solution, SolutionVariables},\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n     DebruijnIndex, InEnvironment, Interner, ProjectionTy, QuantifiedWhereClause, Scalar,\n-    Substitution, Ty, TyDefId, TyKind, TyVariableKind, WhereClause,\n+    Substitution, TraitEnvironment, Ty, TyDefId, TyKind, TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -851,13 +851,7 @@ impl Function {\n             .iter()\n             .enumerate()\n             .map(|(idx, type_ref)| {\n-                let ty = Type {\n-                    krate,\n-                    ty: InEnvironment {\n-                        value: ctx.lower_ty(type_ref),\n-                        environment: environment.clone(),\n-                    },\n-                };\n+                let ty = Type { krate, env: environment.clone(), ty: ctx.lower_ty(type_ref) };\n                 Param { func: self, ty, idx }\n             })\n             .collect()\n@@ -1540,23 +1534,23 @@ impl Impl {\n         inherent.all_impls().chain(trait_.all_impls()).map(Self::from).collect()\n     }\n \n-    pub fn all_for_type(db: &dyn HirDatabase, Type { krate, ty }: Type) -> Vec<Impl> {\n-        let def_crates = match ty.value.def_crates(db, krate) {\n+    pub fn all_for_type(db: &dyn HirDatabase, Type { krate, ty, .. }: Type) -> Vec<Impl> {\n+        let def_crates = match ty.def_crates(db, krate) {\n             Some(def_crates) => def_crates,\n             None => return Vec::new(),\n         };\n \n         let filter = |impl_def: &Impl| {\n             let target_ty = impl_def.target_ty(db);\n             let rref = target_ty.remove_ref();\n-            ty.value.equals_ctor(rref.as_ref().map_or(&target_ty.ty.value, |it| &it.ty.value))\n+            ty.equals_ctor(rref.as_ref().map_or(&target_ty.ty, |it| &it.ty))\n         };\n \n         let mut all = Vec::new();\n         def_crates.iter().for_each(|&id| {\n             all.extend(db.inherent_impls_in_crate(id).all_impls().map(Self::from).filter(filter))\n         });\n-        let fp = TyFingerprint::for_impl(&ty.value);\n+        let fp = TyFingerprint::for_impl(&ty);\n         for id in def_crates\n             .iter()\n             .flat_map(|&id| Crate { id }.transitive_reverse_dependencies(db))\n@@ -1643,7 +1637,8 @@ impl Impl {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n     krate: CrateId,\n-    ty: InEnvironment<Ty>,\n+    env: Arc<TraitEnvironment>,\n+    ty: Ty,\n }\n \n impl Type {\n@@ -1663,14 +1658,14 @@ impl Type {\n     ) -> Type {\n         let environment =\n             resolver.generic_def().map_or_else(Default::default, |d| db.trait_environment(d));\n-        Type { krate, ty: InEnvironment { value: ty, environment } }\n+        Type { krate, env: environment, ty }\n     }\n \n     fn new(db: &dyn HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n         let resolver = lexical_env.resolver(db.upcast());\n         let environment =\n             resolver.generic_def().map_or_else(Default::default, |d| db.trait_environment(d));\n-        Type { krate, ty: InEnvironment { value: ty, environment } }\n+        Type { krate, env: environment, ty }\n     }\n \n     fn from_def(\n@@ -1684,29 +1679,29 @@ impl Type {\n     }\n \n     pub fn is_unit(&self) -> bool {\n-        matches!(self.ty.value.interned(&Interner), TyKind::Tuple(0, ..))\n+        matches!(self.ty.interned(&Interner), TyKind::Tuple(0, ..))\n     }\n     pub fn is_bool(&self) -> bool {\n-        matches!(self.ty.value.interned(&Interner), TyKind::Scalar(Scalar::Bool))\n+        matches!(self.ty.interned(&Interner), TyKind::Scalar(Scalar::Bool))\n     }\n \n     pub fn is_mutable_reference(&self) -> bool {\n-        matches!(self.ty.value.interned(&Interner), TyKind::Ref(hir_ty::Mutability::Mut, ..))\n+        matches!(self.ty.interned(&Interner), TyKind::Ref(hir_ty::Mutability::Mut, ..))\n     }\n \n     pub fn is_usize(&self) -> bool {\n-        matches!(self.ty.value.interned(&Interner), TyKind::Scalar(Scalar::Uint(UintTy::Usize)))\n+        matches!(self.ty.interned(&Interner), TyKind::Scalar(Scalar::Uint(UintTy::Usize)))\n     }\n \n     pub fn remove_ref(&self) -> Option<Type> {\n-        match &self.ty.value.interned(&Interner) {\n+        match &self.ty.interned(&Interner) {\n             TyKind::Ref(.., ty) => Some(self.derived(ty.clone())),\n             _ => None,\n         }\n     }\n \n     pub fn is_unknown(&self) -> bool {\n-        self.ty.value.is_unknown()\n+        self.ty.is_unknown()\n     }\n \n     /// Checks that particular type `ty` implements `std::future::Future`.\n@@ -1723,14 +1718,12 @@ impl Type {\n             None => return false,\n         };\n \n-        let canonical_ty = Canonical {\n-            value: self.ty.value.clone(),\n-            binders: CanonicalVarKinds::empty(&Interner),\n-        };\n+        let canonical_ty =\n+            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n         method_resolution::implements_trait(\n             &canonical_ty,\n             db,\n-            self.ty.environment.clone(),\n+            self.env.clone(),\n             krate,\n             std_future_trait,\n         )\n@@ -1748,14 +1741,12 @@ impl Type {\n             None => return false,\n         };\n \n-        let canonical_ty = Canonical {\n-            value: self.ty.value.clone(),\n-            binders: CanonicalVarKinds::empty(&Interner),\n-        };\n+        let canonical_ty =\n+            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n         method_resolution::implements_trait_unique(\n             &canonical_ty,\n             db,\n-            self.ty.environment.clone(),\n+            self.env.clone(),\n             krate,\n             fnonce_trait,\n         )\n@@ -1765,16 +1756,13 @@ impl Type {\n         let trait_ref = hir_ty::TraitRef {\n             trait_id: hir_ty::to_chalk_trait_id(trait_.id),\n             substitution: Substitution::build_for_def(db, trait_.id)\n-                .push(self.ty.value.clone())\n-                .fill(args.iter().map(|t| t.ty.value.clone()))\n+                .push(self.ty.clone())\n+                .fill(args.iter().map(|t| t.ty.clone()))\n                 .build(),\n         };\n \n         let goal = Canonical {\n-            value: hir_ty::InEnvironment::new(\n-                self.ty.environment.clone(),\n-                trait_ref.cast(&Interner),\n-            ),\n+            value: hir_ty::InEnvironment::new(self.env.env.clone(), trait_ref.cast(&Interner)),\n             binders: CanonicalVarKinds::empty(&Interner),\n         };\n \n@@ -1789,12 +1777,12 @@ impl Type {\n         alias: TypeAlias,\n     ) -> Option<Type> {\n         let subst = Substitution::build_for_def(db, trait_.id)\n-            .push(self.ty.value.clone())\n-            .fill(args.iter().map(|t| t.ty.value.clone()))\n+            .push(self.ty.clone())\n+            .fill(args.iter().map(|t| t.ty.clone()))\n             .build();\n         let goal = Canonical::new(\n             InEnvironment::new(\n-                self.ty.environment.clone(),\n+                self.env.env.clone(),\n                 AliasEq {\n                     alias: AliasTy::Projection(ProjectionTy {\n                         associated_ty_id: to_assoc_type_id(alias.id),\n@@ -1826,22 +1814,22 @@ impl Type {\n     }\n \n     pub fn as_callable(&self, db: &dyn HirDatabase) -> Option<Callable> {\n-        let def = self.ty.value.callable_def(db);\n+        let def = self.ty.callable_def(db);\n \n-        let sig = self.ty.value.callable_sig(db)?;\n+        let sig = self.ty.callable_sig(db)?;\n         Some(Callable { ty: self.clone(), sig, def, is_bound_method: false })\n     }\n \n     pub fn is_closure(&self) -> bool {\n-        matches!(&self.ty.value.interned(&Interner), TyKind::Closure { .. })\n+        matches!(&self.ty.interned(&Interner), TyKind::Closure { .. })\n     }\n \n     pub fn is_fn(&self) -> bool {\n-        matches!(&self.ty.value.interned(&Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n+        matches!(&self.ty.interned(&Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n     }\n \n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n-        let adt_id = match self.ty.value.interned(&Interner) {\n+        let adt_id = match self.ty.interned(&Interner) {\n             &TyKind::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,\n             _ => return false,\n         };\n@@ -1854,11 +1842,11 @@ impl Type {\n     }\n \n     pub fn is_raw_ptr(&self) -> bool {\n-        matches!(&self.ty.value.interned(&Interner), TyKind::Raw(..))\n+        matches!(&self.ty.interned(&Interner), TyKind::Raw(..))\n     }\n \n     pub fn contains_unknown(&self) -> bool {\n-        return go(&self.ty.value);\n+        return go(&self.ty);\n \n         fn go(ty: &Ty) -> bool {\n             match ty.interned(&Interner) {\n@@ -1890,7 +1878,7 @@ impl Type {\n     }\n \n     pub fn fields(&self, db: &dyn HirDatabase) -> Vec<(Field, Type)> {\n-        let (variant_id, substs) = match self.ty.value.interned(&Interner) {\n+        let (variant_id, substs) = match self.ty.interned(&Interner) {\n             &TyKind::Adt(hir_ty::AdtId(AdtId::StructId(s)), ref substs) => (s.into(), substs),\n             &TyKind::Adt(hir_ty::AdtId(AdtId::UnionId(u)), ref substs) => (u.into(), substs),\n             _ => return Vec::new(),\n@@ -1907,7 +1895,7 @@ impl Type {\n     }\n \n     pub fn tuple_fields(&self, _db: &dyn HirDatabase) -> Vec<Type> {\n-        if let TyKind::Tuple(_, substs) = &self.ty.value.interned(&Interner) {\n+        if let TyKind::Tuple(_, substs) = &self.ty.interned(&Interner) {\n             substs.iter().map(|ty| self.derived(ty.clone())).collect()\n         } else {\n             Vec::new()\n@@ -1917,12 +1905,10 @@ impl Type {\n     pub fn autoderef<'a>(&'a self, db: &'a dyn HirDatabase) -> impl Iterator<Item = Type> + 'a {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n-        let canonical = Canonical {\n-            value: self.ty.value.clone(),\n-            binders: CanonicalVarKinds::empty(&Interner),\n-        };\n-        let environment = self.ty.environment.clone();\n-        let ty = InEnvironment { value: canonical, environment };\n+        let canonical =\n+            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n+        let environment = self.env.env.clone();\n+        let ty = InEnvironment { goal: canonical, environment };\n         autoderef(db, Some(self.krate), ty)\n             .map(|canonical| canonical.value)\n             .map(move |ty| self.derived(ty))\n@@ -1936,10 +1922,10 @@ impl Type {\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n     ) -> Option<T> {\n-        for krate in self.ty.value.def_crates(db, krate.id)? {\n+        for krate in self.ty.def_crates(db, krate.id)? {\n             let impls = db.inherent_impls_in_crate(krate);\n \n-            for impl_def in impls.for_self_ty(&self.ty.value) {\n+            for impl_def in impls.for_self_ty(&self.ty) {\n                 for &item in db.impl_data(*impl_def).items.iter() {\n                     if let Some(result) = callback(item.into()) {\n                         return Some(result);\n@@ -1952,7 +1938,6 @@ impl Type {\n \n     pub fn type_parameters(&self) -> impl Iterator<Item = Type> + '_ {\n         self.ty\n-            .value\n             .strip_references()\n             .substs()\n             .into_iter()\n@@ -1971,12 +1956,10 @@ impl Type {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical {\n-            value: self.ty.value.clone(),\n-            binders: CanonicalVarKinds::empty(&Interner),\n-        };\n+        let canonical =\n+            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n \n-        let env = self.ty.environment.clone();\n+        let env = self.env.clone();\n         let krate = krate.id;\n \n         method_resolution::iterate_method_candidates(\n@@ -2005,12 +1988,10 @@ impl Type {\n         // There should be no inference vars in types passed here\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical {\n-            value: self.ty.value.clone(),\n-            binders: CanonicalVarKinds::empty(&Interner),\n-        };\n+        let canonical =\n+            Canonical { value: self.ty.clone(), binders: CanonicalVarKinds::empty(&Interner) };\n \n-        let env = self.ty.environment.clone();\n+        let env = self.env.clone();\n         let krate = krate.id;\n \n         method_resolution::iterate_method_candidates(\n@@ -2026,16 +2007,16 @@ impl Type {\n     }\n \n     pub fn as_adt(&self) -> Option<Adt> {\n-        let (adt, _subst) = self.ty.value.as_adt()?;\n+        let (adt, _subst) = self.ty.as_adt()?;\n         Some(adt.into())\n     }\n \n     pub fn as_dyn_trait(&self) -> Option<Trait> {\n-        self.ty.value.dyn_trait().map(Into::into)\n+        self.ty.dyn_trait().map(Into::into)\n     }\n \n     pub fn as_impl_traits(&self, db: &dyn HirDatabase) -> Option<Vec<Trait>> {\n-        self.ty.value.impl_trait_bounds(db).map(|it| {\n+        self.ty.impl_trait_bounds(db).map(|it| {\n             it.into_iter()\n                 .filter_map(|pred| match pred.skip_binders() {\n                     hir_ty::WhereClause::Implemented(trait_ref) => {\n@@ -2048,14 +2029,11 @@ impl Type {\n     }\n \n     pub fn as_associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<Trait> {\n-        self.ty.value.associated_type_parent_trait(db).map(Into::into)\n+        self.ty.associated_type_parent_trait(db).map(Into::into)\n     }\n \n     fn derived(&self, ty: Ty) -> Type {\n-        Type {\n-            krate: self.krate,\n-            ty: InEnvironment { value: ty, environment: self.ty.environment.clone() },\n-        }\n+        Type { krate: self.krate, env: self.env.clone(), ty }\n     }\n \n     pub fn walk(&self, db: &dyn HirDatabase, mut cb: impl FnMut(Type)) {\n@@ -2094,7 +2072,7 @@ impl Type {\n         }\n \n         fn walk_type(db: &dyn HirDatabase, type_: &Type, cb: &mut impl FnMut(Type)) {\n-            let ty = type_.ty.value.strip_references();\n+            let ty = type_.ty.strip_references();\n             match ty.interned(&Interner) {\n                 TyKind::Adt(..) => {\n                     cb(type_.derived(ty.clone()));"}, {"sha": "dc5fc759a29fe459bcfc7a457279ad05126f17a1", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -27,9 +27,9 @@ pub fn autoderef<'a>(\n     krate: Option<CrateId>,\n     ty: InEnvironment<Canonical<Ty>>,\n ) -> impl Iterator<Item = Canonical<Ty>> + 'a {\n-    let InEnvironment { value: ty, environment } = ty;\n+    let InEnvironment { goal: ty, environment } = ty;\n     successors(Some(ty), move |ty| {\n-        deref(db, krate?, InEnvironment { value: ty, environment: environment.clone() })\n+        deref(db, krate?, InEnvironment { goal: ty, environment: environment.clone() })\n     })\n     .take(AUTODEREF_RECURSION_LIMIT)\n }\n@@ -39,8 +39,8 @@ pub(crate) fn deref(\n     krate: CrateId,\n     ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n-    if let Some(derefed) = ty.value.value.builtin_deref() {\n-        Some(Canonical { value: derefed, binders: ty.value.binders.clone() })\n+    if let Some(derefed) = ty.goal.value.builtin_deref() {\n+        Some(Canonical { value: derefed, binders: ty.goal.binders.clone() })\n     } else {\n         deref_by_trait(db, krate, ty)\n     }\n@@ -67,15 +67,15 @@ fn deref_by_trait(\n     // FIXME make the Canonical / bound var handling nicer\n \n     let parameters =\n-        Substitution::build_for_generics(&generic_params).push(ty.value.value.clone()).build();\n+        Substitution::build_for_generics(&generic_params).push(ty.goal.value.clone()).build();\n \n     // Check that the type implements Deref at all\n     let trait_ref =\n         TraitRef { trait_id: to_chalk_trait_id(deref_trait), substitution: parameters.clone() };\n     let implements_goal = Canonical {\n-        binders: ty.value.binders.clone(),\n+        binders: ty.goal.binders.clone(),\n         value: InEnvironment {\n-            value: trait_ref.cast(&Interner),\n+            goal: trait_ref.cast(&Interner),\n             environment: ty.environment.clone(),\n         },\n     };\n@@ -91,20 +91,20 @@ fn deref_by_trait(\n         }),\n         ty: TyKind::BoundVar(BoundVar::new(\n             DebruijnIndex::INNERMOST,\n-            ty.value.binders.len(&Interner),\n+            ty.goal.binders.len(&Interner),\n         ))\n         .intern(&Interner),\n     };\n \n     let obligation = projection.cast(&Interner);\n \n-    let in_env = InEnvironment { value: obligation, environment: ty.environment };\n+    let in_env = InEnvironment { goal: obligation, environment: ty.environment };\n \n     let canonical = Canonical {\n         value: in_env,\n         binders: CanonicalVarKinds::from_iter(\n             &Interner,\n-            ty.value.binders.iter(&Interner).cloned().chain(Some(chalk_ir::WithKind::new(\n+            ty.goal.binders.iter(&Interner).cloned().chain(Some(chalk_ir::WithKind::new(\n                 chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General),\n                 chalk_ir::UniverseIndex::ROOT,\n             ))),\n@@ -134,7 +134,7 @@ fn deref_by_trait(\n                 if vars.0.value[i - 1].interned(&Interner)\n                     != &TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, i - 1))\n                 {\n-                    warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.value, solution);\n+                    warn!(\"complex solution for derefing {:?}: {:?}, ignoring\", ty.goal, solution);\n                     return None;\n                 }\n             }\n@@ -144,7 +144,7 @@ fn deref_by_trait(\n             })\n         }\n         Solution::Ambig(_) => {\n-            info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty.value, solution);\n+            info!(\"Ambiguous solution for derefing {:?}: {:?}\", ty.goal, solution);\n             None\n         }\n     }"}, {"sha": "8f9cf74808f93a41b047e1e469ccd5fbd338a41d", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -331,7 +331,7 @@ impl<'a> InferenceContext<'a> {\n     fn resolve_obligations_as_possible(&mut self) {\n         let obligations = mem::replace(&mut self.obligations, Vec::new());\n         for obligation in obligations {\n-            let in_env = InEnvironment::new(self.trait_env.clone(), obligation.clone());\n+            let in_env = InEnvironment::new(self.trait_env.env.clone(), obligation.clone());\n             let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n             let solution =\n                 self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());"}, {"sha": "9c62932b12f3ca726079d9a6cf7a9970c10a2fea", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -142,7 +142,7 @@ impl<'a> InferenceContext<'a> {\n             .build();\n         let trait_ref =\n             TraitRef { trait_id: to_chalk_trait_id(coerce_unsized_trait), substitution: substs };\n-        let goal = InEnvironment::new(self.trait_env.clone(), trait_ref.cast(&Interner));\n+        let goal = InEnvironment::new(self.trait_env.env.clone(), trait_ref.cast(&Interner));\n \n         let canonicalizer = self.canonicalizer();\n         let canonicalized = canonicalizer.canonicalize_obligation(goal);\n@@ -170,8 +170,8 @@ impl<'a> InferenceContext<'a> {\n             self.db,\n             self.resolver.krate(),\n             InEnvironment {\n-                value: canonicalized.value.clone(),\n-                environment: self.trait_env.clone(),\n+                goal: canonicalized.value.clone(),\n+                environment: self.trait_env.env.clone(),\n             },\n         ) {\n             let derefed_ty = canonicalized.decanonicalize_ty(derefed_ty.value);"}, {"sha": "4e2a432ed2078689f5f00e2d5b23b781b6c61e87", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -90,12 +90,12 @@ impl<'a> InferenceContext<'a> {\n         let substs =\n             Substitution::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n \n-        let trait_env = Arc::clone(&self.trait_env);\n+        let trait_env = self.trait_env.env.clone();\n         let implements_fn_trait: DomainGoal =\n             TraitRef { trait_id: to_chalk_trait_id(fn_once_trait), substitution: substs.clone() }\n                 .cast(&Interner);\n         let goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n-            value: implements_fn_trait.clone(),\n+            goal: implements_fn_trait.clone(),\n             environment: trait_env,\n         });\n         if self.db.trait_solve(krate, goal.value).is_some() {\n@@ -299,8 +299,8 @@ impl<'a> InferenceContext<'a> {\n                     self.db,\n                     self.resolver.krate(),\n                     InEnvironment {\n-                        value: canonicalized.value.clone(),\n-                        environment: self.trait_env.clone(),\n+                        goal: canonicalized.value.clone(),\n+                        environment: self.trait_env.env.clone(),\n                     },\n                 );\n                 let (param_tys, ret_ty): (Vec<Ty>, Ty) = derefs\n@@ -438,8 +438,8 @@ impl<'a> InferenceContext<'a> {\n                     self.db,\n                     self.resolver.krate(),\n                     InEnvironment {\n-                        value: canonicalized.value.clone(),\n-                        environment: self.trait_env.clone(),\n+                        goal: canonicalized.value.clone(),\n+                        environment: self.trait_env.env.clone(),\n                     },\n                 )\n                 .find_map(|derefed_ty| {\n@@ -538,8 +538,8 @@ impl<'a> InferenceContext<'a> {\n                                 self.db,\n                                 krate,\n                                 InEnvironment {\n-                                    value: &canonicalized.value,\n-                                    environment: self.trait_env.clone(),\n+                                    goal: &canonicalized.value,\n+                                    environment: self.trait_env.env.clone(),\n                                 },\n                             ) {\n                                 Some(derefed_ty) => {"}, {"sha": "75250a3694c65f3bb8fa0a732261f541417ab21d", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -98,15 +98,12 @@ impl<'a, 'b> Canonicalizer<'a, 'b> {\n         mut self,\n         obligation: InEnvironment<DomainGoal>,\n     ) -> Canonicalized<InEnvironment<DomainGoal>> {\n-        let result = match obligation.value {\n+        let result = match obligation.goal {\n             DomainGoal::Holds(wc) => {\n                 DomainGoal::Holds(self.do_canonicalize(wc, DebruijnIndex::INNERMOST))\n             }\n         };\n-        self.into_canonicalized(InEnvironment {\n-            value: result,\n-            environment: obligation.environment,\n-        })\n+        self.into_canonicalized(InEnvironment { goal: result, environment: obligation.environment })\n     }\n }\n "}, {"sha": "8e986ddde264c2d9baf6b1ed0251947d2532cb76", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -376,7 +376,7 @@ fn iterate_method_candidates_impl(\n             // Also note that when we've got a receiver like &S, even if the method we\n             // find in the end takes &self, we still do the autoderef step (just as\n             // rustc does an autoderef and then autoref again).\n-            let ty = InEnvironment { value: ty.clone(), environment: env.clone() };\n+            let ty = InEnvironment { goal: ty.clone(), environment: env.env.clone() };\n \n             // We have to be careful about the order we're looking at candidates\n             // in here. Consider the case where we're resolving `x.clone()`\n@@ -622,7 +622,7 @@ pub fn resolve_indexing_op(\n     krate: CrateId,\n     index_trait: TraitId,\n ) -> Option<Canonical<Ty>> {\n-    let ty = InEnvironment { value: ty.clone(), environment: env.clone() };\n+    let ty = InEnvironment { goal: ty.clone(), environment: env.env.clone() };\n     let deref_chain = autoderef_method_receiver(db, krate, ty);\n     for ty in deref_chain {\n         let goal = generic_implements_goal(db, env.clone(), index_trait, ty.clone());\n@@ -794,7 +794,7 @@ fn generic_implements_goal(\n     let obligation = trait_ref.cast(&Interner);\n     Canonical {\n         binders: CanonicalVarKinds::from_iter(&Interner, kinds),\n-        value: InEnvironment::new(env, obligation),\n+        value: InEnvironment::new(env.env.clone(), obligation),\n     }\n }\n "}, {"sha": "ccee0e5ad2bc3e52d8493510d79ff54a54f70e82", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -1,6 +1,5 @@\n //! Trait solving using Chalk.\n use std::env::var;\n-use std::sync::Arc;\n \n use base_db::CrateId;\n use chalk_ir::cast::Cast;\n@@ -44,7 +43,7 @@ pub struct TraitEnvironment {\n     // When we're using Chalk's Ty we can make this a BTreeMap since it's Ord,\n     // but for now it's too annoying...\n     pub(crate) traits_from_clauses: Vec<(Ty, TraitId)>,\n-    pub(crate) env: chalk_ir::Environment<Interner>,\n+    pub env: chalk_ir::Environment<Interner>,\n }\n \n impl TraitEnvironment {\n@@ -74,13 +73,13 @@ impl Default for TraitEnvironment {\n /// Something (usually a goal), along with an environment.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct InEnvironment<T> {\n-    pub environment: Arc<TraitEnvironment>,\n-    pub value: T,\n+    pub environment: chalk_ir::Environment<Interner>,\n+    pub goal: T,\n }\n \n impl<T> InEnvironment<T> {\n-    pub fn new(environment: Arc<TraitEnvironment>, value: T) -> InEnvironment<T> {\n-        InEnvironment { environment, value }\n+    pub fn new(environment: chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n+        InEnvironment { environment, goal: value }\n     }\n }\n \n@@ -126,18 +125,18 @@ pub(crate) fn trait_solve_query(\n     krate: CrateId,\n     goal: Canonical<InEnvironment<DomainGoal>>,\n ) -> Option<Solution> {\n-    let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.value {\n+    let _p = profile::span(\"trait_solve_query\").detail(|| match &goal.value.goal {\n         DomainGoal::Holds(WhereClause::Implemented(it)) => {\n             db.trait_data(it.hir_trait_id()).name.to_string()\n         }\n         DomainGoal::Holds(WhereClause::AliasEq(_)) => \"alias_eq\".to_string(),\n     });\n-    log::info!(\"trait_solve_query({})\", goal.value.value.display(db));\n+    log::info!(\"trait_solve_query({})\", goal.value.goal.display(db));\n \n     if let DomainGoal::Holds(WhereClause::AliasEq(AliasEq {\n         alias: AliasTy::Projection(projection_ty),\n         ..\n-    })) = &goal.value.value\n+    })) = &goal.value.goal\n     {\n         if let TyKind::BoundVar(_) = &projection_ty.substitution[0].interned(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible"}, {"sha": "aef6b8a15638f1881b08b943ee299d41088f53fe", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=c4fd3f47f5b4f34476f8f085f2412a46aa0fd24f", "patch": "@@ -455,10 +455,7 @@ where\n     type Chalk = chalk_ir::InEnvironment<T::Chalk>;\n \n     fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::InEnvironment<T::Chalk> {\n-        chalk_ir::InEnvironment {\n-            environment: self.environment.env.clone(),\n-            goal: self.value.to_chalk(db),\n-        }\n+        chalk_ir::InEnvironment { environment: self.environment, goal: self.goal.to_chalk(db) }\n     }\n \n     fn from_chalk("}]}