{"sha": "e1e79cf0648624e7a3787d0013c0c7e86210772f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTc5Y2YwNjQ4NjI0ZTdhMzc4N2QwMDEzYzBjN2U4NjIxMDc3MmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:41:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:48:02Z"}, "message": "Take label offets client capability into account", "tree": {"sha": "b6d564a63068530ef3aabb8855699bf20c45a608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d564a63068530ef3aabb8855699bf20c45a608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e79cf0648624e7a3787d0013c0c7e86210772f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e79cf0648624e7a3787d0013c0c7e86210772f", "html_url": "https://github.com/rust-lang/rust/commit/e1e79cf0648624e7a3787d0013c0c7e86210772f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e79cf0648624e7a3787d0013c0c7e86210772f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da22ed9752b239fcd4e7c75673907ceb1ac6b65", "html_url": "https://github.com/rust-lang/rust/commit/6da22ed9752b239fcd4e7c75673907ceb1ac6b65"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "68b2a2abdd0c4679f3a2d675fe3ad10b852d49ea", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=e1e79cf0648624e7a3787d0013c0c7e86210772f", "patch": "@@ -127,6 +127,7 @@ pub struct ClientCapsConfig {\n     pub resolve_code_action: bool,\n     pub hover_actions: bool,\n     pub status_notification: bool,\n+    pub signature_help_label_offsets: bool,\n }\n \n impl Config {\n@@ -302,6 +303,15 @@ impl Config {\n             {\n                 self.client_caps.code_action_literals = value;\n             }\n+            if let Some(value) = doc_caps\n+                .signature_help\n+                .as_ref()\n+                .and_then(|it| it.signature_information.as_ref())\n+                .and_then(|it| it.parameter_information.as_ref())\n+                .and_then(|it| it.label_offset_support)\n+            {\n+                self.client_caps.signature_help_label_offsets = value;\n+            }\n \n             self.completion.allow_snippets(false);\n             if let Some(completion) = &doc_caps.completion {"}, {"sha": "18d660f427579699e27fe52d9de054f4a95456d6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e1e79cf0648624e7a3787d0013c0c7e86210772f", "patch": "@@ -557,7 +557,11 @@ pub(crate) fn handle_signature_help(\n         None => return Ok(None),\n     };\n     let concise = !snap.config.call_info_full;\n-    let res = to_proto::signature_help(call_info, concise);\n+    let res = to_proto::signature_help(\n+        call_info,\n+        concise,\n+        snap.config.client_caps.signature_help_label_offsets,\n+    );\n     Ok(Some(res))\n }\n "}, {"sha": "7fcb43a4f77309b7bc815c5e66351aa1c381b8ae", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e79cf0648624e7a3787d0013c0c7e86210772f/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e1e79cf0648624e7a3787d0013c0c7e86210772f", "patch": "@@ -219,16 +219,58 @@ pub(crate) fn completion_item(\n     res\n }\n \n-pub(crate) fn signature_help(call_info: CallInfo, concise: bool) -> lsp_types::SignatureHelp {\n-    let parameters = call_info\n-        .parameter_labels()\n-        .map(|label| lsp_types::ParameterInformation {\n-            label: lsp_types::ParameterLabel::Simple(label.to_string()),\n-            documentation: None,\n-        })\n-        .collect();\n+pub(crate) fn signature_help(\n+    call_info: CallInfo,\n+    concise: bool,\n+    label_offsets: bool,\n+) -> lsp_types::SignatureHelp {\n+    let (label, parameters) = match (concise, label_offsets) {\n+        (_, false) => {\n+            let params = call_info\n+                .parameter_labels()\n+                .map(|label| lsp_types::ParameterInformation {\n+                    label: lsp_types::ParameterLabel::Simple(label.to_string()),\n+                    documentation: None,\n+                })\n+                .collect::<Vec<_>>();\n+            let label =\n+                if concise { call_info.parameter_labels().join(\", \") } else { call_info.signature };\n+            (label, params)\n+        }\n+        (false, true) => {\n+            let params = call_info\n+                .parameter_ranges()\n+                .iter()\n+                .map(|it| [u32::from(it.start()).into(), u32::from(it.end()).into()])\n+                .map(|label_offsets| lsp_types::ParameterInformation {\n+                    label: lsp_types::ParameterLabel::LabelOffsets(label_offsets),\n+                    documentation: None,\n+                })\n+                .collect::<Vec<_>>();\n+            (call_info.signature, params)\n+        }\n+        (true, true) => {\n+            let mut params = Vec::new();\n+            let mut label = String::new();\n+            let mut first = true;\n+            for param in call_info.parameter_labels() {\n+                if !first {\n+                    label.push_str(\", \");\n+                }\n+                first = false;\n+                let start = label.len() as u64;\n+                label.push_str(param);\n+                let end = label.len() as u64;\n+                params.push(lsp_types::ParameterInformation {\n+                    label: lsp_types::ParameterLabel::LabelOffsets([start, end]),\n+                    documentation: None,\n+                });\n+            }\n+\n+            (label, params)\n+        }\n+    };\n \n-    let label = if concise { call_info.parameter_labels().join(\", \") } else { call_info.signature };\n     let documentation = call_info.doc.map(|doc| {\n         lsp_types::Documentation::MarkupContent(lsp_types::MarkupContent {\n             kind: lsp_types::MarkupKind::Markdown,"}]}