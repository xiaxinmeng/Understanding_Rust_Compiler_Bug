{"sha": "65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "node_id": "C_kwDOAAsO6NoAKDY1MDY5ZDVjNWI2ZGIxYmRmNzRlNGY5MjQzZGI3ZWY4MmQ2YTM3NzY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-13T11:07:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-14T15:36:39Z"}, "message": "Ensure no one constructs `AliasTy`s themselves", "tree": {"sha": "ee26b410391bac621c08b0941f6815ca957d8804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee26b410391bac621c08b0941f6815ca957d8804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "html_url": "https://github.com/rust-lang/rust/commit/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957ab6ae52706e3428ca56e727eed9d3333d8170", "url": "https://api.github.com/repos/rust-lang/rust/commits/957ab6ae52706e3428ca56e727eed9d3333d8170", "html_url": "https://github.com/rust-lang/rust/commit/957ab6ae52706e3428ca56e727eed9d3333d8170"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "989f83cf80d5972301fc06eef9604796f674a7b8", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             return;\n         }\n         let ret_ty = return_ty(cx, hir_id);\n-        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs }) = *ret_ty.kind() {\n+        if let ty::Alias(ty::Opaque, AliasTy { def_id, substs, .. }) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(def_id);\n             let mut is_future = false;\n             for &(p, _span) in preds {"}, {"sha": "a6bcb134d408096099ddd5d13263a68e28688fa1", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65069d5c5b6db1bdf74e4f9243db7ef82d6a3776/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=65069d5c5b6db1bdf74e4f9243db7ef82d6a3776", "patch": "@@ -79,7 +79,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                 return true;\n             }\n \n-            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) = *inner_ty.kind() {\n+            if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *inner_ty.kind() {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     match predicate.kind().skip_binder() {\n                         // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n@@ -250,7 +250,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => {\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) = predicate.kind().skip_binder() {\n                     if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n@@ -631,7 +631,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n             Some(ExprFnSig::Closure(decl, subs.as_closure().sig()))\n         },\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: _ }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n+        ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(def_id), cx.tcx.opt_parent(def_id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n         ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n@@ -1039,10 +1039,10 @@ pub fn make_projection<'tcx>(\n             }\n         }\n \n-        Some(AliasTy {\n+        Some(tcx.mk_alias_ty(\n+            assoc_item.def_id,\n             substs,\n-            def_id: assoc_item.def_id,\n-        })\n+        ))\n     }\n     helper(\n         tcx,"}]}