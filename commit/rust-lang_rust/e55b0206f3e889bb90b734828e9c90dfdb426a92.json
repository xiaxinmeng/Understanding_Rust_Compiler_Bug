{"sha": "e55b0206f3e889bb90b734828e9c90dfdb426a92", "node_id": "C_kwDOAAsO6NoAKGU1NWIwMjA2ZjNlODg5YmI5MGI3MzQ4MjhlOWM5MGRmZGI0MjZhOTI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-24T13:08:24Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-24T13:08:24Z"}, "message": "Remove Clean trait implementation for Constant", "tree": {"sha": "dde905471610c3668837d86558d4df9cb7d3b1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde905471610c3668837d86558d4df9cb7d3b1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55b0206f3e889bb90b734828e9c90dfdb426a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55b0206f3e889bb90b734828e9c90dfdb426a92", "html_url": "https://github.com/rust-lang/rust/commit/e55b0206f3e889bb90b734828e9c90dfdb426a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55b0206f3e889bb90b734828e9c90dfdb426a92/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8098f5faa880df18b0d7c83fdf5df8211a9e8dee", "html_url": "https://github.com/rust-lang/rust/commit/8098f5faa880df18b0d7c83fdf5df8211a9e8dee"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "c9ef4748a48451619cadda1289bbd09d54d5d97e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e55b0206f3e889bb90b734828e9c90dfdb426a92/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55b0206f3e889bb90b734828e9c90dfdb426a92/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e55b0206f3e889bb90b734828e9c90dfdb426a92", "patch": "@@ -237,13 +237,22 @@ impl<'tcx> Clean<'tcx, Lifetime> for hir::Lifetime {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Constant> for hir::ConstArg {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Constant {\n-        let def_id = cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id();\n-        Constant {\n-            type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n-            kind: ConstantKind::Anonymous { body: self.value.body },\n-        }\n+pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n+    let def_id = cx.tcx.hir().body_owner_def_id(constant.value.body).to_def_id();\n+    Constant {\n+        type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n+        kind: ConstantKind::Anonymous { body: constant.value.body },\n+    }\n+}\n+\n+pub(crate) fn clean_middle_const<'tcx>(\n+    constant: ty::Const<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Constant {\n+    // FIXME: instead of storing the stringified expression, store `self` directly instead.\n+    Constant {\n+        type_: clean_middle_ty(constant.ty(), cx, None),\n+        kind: ConstantKind::TyConst { expr: constant.to_string() },\n     }\n }\n \n@@ -392,7 +401,7 @@ impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Term {\n         match self {\n             ty::Term::Ty(ty) => Term::Type(clean_middle_ty(*ty, cx, None)),\n-            ty::Term::Const(c) => Term::Constant(c.clean(cx)),\n+            ty::Term::Const(c) => Term::Constant(clean_middle_const(*c, cx)),\n         }\n     }\n }\n@@ -403,7 +412,7 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n             hir::Term::Ty(ty) => Term::Type(clean_ty(ty, cx)),\n             hir::Term::Const(c) => {\n                 let def_id = cx.tcx.hir().local_def_id(c.hir_id);\n-                Term::Constant(ty::Const::from_anon_const(cx.tcx, def_id).clean(cx))\n+                Term::Constant(clean_middle_const(ty::Const::from_anon_const(cx.tcx, def_id), cx))\n             }\n         }\n     }\n@@ -1468,8 +1477,10 @@ fn maybe_expand_private_type_alias<'tcx>(\n                     _ => None,\n                 });\n                 if let Some(ct) = const_ {\n-                    substs\n-                        .insert(const_param_def_id.to_def_id(), SubstParam::Constant(ct.clean(cx)));\n+                    substs.insert(\n+                        const_param_def_id.to_def_id(),\n+                        SubstParam::Constant(clean_const(ct, cx)),\n+                    );\n                 }\n                 // FIXME(const_generics_defaults)\n                 indices.consts += 1;\n@@ -1764,16 +1775,6 @@ pub(crate) fn clean_middle_ty<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Constant> for ty::Const<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Constant {\n-        // FIXME: instead of storing the stringified expression, store `self` directly instead.\n-        Constant {\n-            type_: clean_middle_ty(self.ty(), cx, None),\n-            kind: ConstantKind::TyConst { expr: self.to_string() },\n-        }\n-    }\n-}\n-\n pub(crate) fn clean_field<'tcx>(field: &hir::FieldDef<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n     let def_id = cx.tcx.hir().local_def_id(field.hir_id).to_def_id();\n     clean_field_with_def_id(def_id, field.ident.name, clean_ty(field.ty, cx), cx)\n@@ -1895,7 +1896,7 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                     }\n                     hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                     hir::GenericArg::Type(ty) => GenericArg::Type(clean_ty(ty, cx)),\n-                    hir::GenericArg::Const(ct) => GenericArg::Const(Box::new(ct.clean(cx))),\n+                    hir::GenericArg::Const(ct) => GenericArg::Const(Box::new(clean_const(ct, cx))),\n                     hir::GenericArg::Infer(_inf) => GenericArg::Infer,\n                 })\n                 .collect::<Vec<_>>()"}, {"sha": "27ecea5cc40bd2a9dac6880247c210477803a2ef", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e55b0206f3e889bb90b734828e9c90dfdb426a92/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55b0206f3e889bb90b734828e9c90dfdb426a92/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e55b0206f3e889bb90b734828e9c90dfdb426a92", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n-    clean_middle_ty, inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs,\n-    ImportSource, Item, ItemKind, Lifetime, Path, PathSegment, Primitive, PrimitiveType, Type,\n-    TypeBinding, Visibility,\n+    clean_middle_const, clean_middle_ty, inline, Clean, Crate, ExternalCrate, Generic, GenericArg,\n+    GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path, PathSegment, Primitive,\n+    PrimitiveType, Type, TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -93,7 +93,7 @@ pub(crate) fn substs_to_args<'tcx>(\n             None\n         }\n         GenericArgKind::Type(ty) => Some(GenericArg::Type(clean_middle_ty(ty, cx, None))),\n-        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n+        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(clean_middle_const(ct, cx)))),\n     }));\n     ret_val\n }"}]}