{"sha": "faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjk3YTY3ZDY3OGE0MmE4YmMwZjViOGUxZWM4MDg0NTdhY2RmYTI=", "commit": {"author": {"name": "WhizSid", "email": "whizsid@aol.com", "date": "2020-10-15T02:08:58Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-14T17:50:28Z"}, "message": "Fixed 'Incorrect comment indent inside if/else' issue. (#4459)\n\n* Added test cases\n\n* Fixed if condition comment issue\n\n* Fixed extern C issue\n\n* Removed previous test case\n\n* Removed tmp file\n\n* honor the authors intent\n\n* Changed the file name to its original name\n\n* Removed extra whitespace", "tree": {"sha": "64ea17a9156ac5bf4ca3efd4d336e0ed4b8f2eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64ea17a9156ac5bf4ca3efd4d336e0ed4b8f2eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "html_url": "https://github.com/rust-lang/rust/commit/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/comments", "author": {"login": "whizsid", "id": 44908250, "node_id": "MDQ6VXNlcjQ0OTA4MjUw", "avatar_url": "https://avatars.githubusercontent.com/u/44908250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whizsid", "html_url": "https://github.com/whizsid", "followers_url": "https://api.github.com/users/whizsid/followers", "following_url": "https://api.github.com/users/whizsid/following{/other_user}", "gists_url": "https://api.github.com/users/whizsid/gists{/gist_id}", "starred_url": "https://api.github.com/users/whizsid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whizsid/subscriptions", "organizations_url": "https://api.github.com/users/whizsid/orgs", "repos_url": "https://api.github.com/users/whizsid/repos", "events_url": "https://api.github.com/users/whizsid/events{/privacy}", "received_events_url": "https://api.github.com/users/whizsid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce13ff15c33da1e31931ba4bc692709be3a2cf30", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce13ff15c33da1e31931ba4bc692709be3a2cf30", "html_url": "https://github.com/rust-lang/rust/commit/ce13ff15c33da1e31931ba4bc692709be3a2cf30"}], "stats": {"total": 211, "additions": 199, "deletions": 12}, "files": [{"sha": "01063b1f3bc88c2192d0c557ec5b49a7e63e377f", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "patch": "@@ -161,6 +161,14 @@ enum BodyElement<'a> {\n     ForeignItem(&'a ast::ForeignItem),\n }\n \n+impl BodyElement<'_> {\n+    pub(crate) fn span(&self) -> Span {\n+        match self {\n+            BodyElement::ForeignItem(fi) => fi.span(),\n+        }\n+    }\n+}\n+\n /// Represents a fn's signature.\n pub(crate) struct FnSig<'a> {\n     decl: &'a ast::FnDecl,\n@@ -268,19 +276,19 @@ impl<'a> FmtVisitor<'a> {\n             self.last_pos = item.span.lo() + BytePos(brace_pos as u32 + 1);\n             self.block_indent = self.block_indent.block_indent(self.config);\n \n-            if item.body.is_empty() {\n-                self.format_missing_no_indent(item.span.hi() - BytePos(1));\n-                self.block_indent = self.block_indent.block_unindent(self.config);\n-                let indent_str = self.block_indent.to_string(self.config);\n-                self.push_str(&indent_str);\n-            } else {\n+            if !item.body.is_empty() {\n+                // Advance to first item (statement or inner attribute)\n+                // within the block.\n+                self.last_pos = item.body[0].span().lo();\n                 for item in &item.body {\n                     self.format_body_element(item);\n                 }\n-\n-                self.block_indent = self.block_indent.block_unindent(self.config);\n-                self.format_missing_with_indent(item.span.hi() - BytePos(1));\n             }\n+\n+            self.format_missing_no_indent(item.span.hi() - BytePos(1));\n+            self.block_indent = self.block_indent.block_unindent(self.config);\n+            let indent_str = self.block_indent.to_string(self.config);\n+            self.push_str(&indent_str);\n         }\n \n         self.push_str(\"}\");"}, {"sha": "a5f6ebfb67b69538fc7fec07de133b0ebdeb8467", "filename": "src/visitor.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::{ast, attr::HasAttrs, token::DelimToken, visit};\n use rustc_span::{symbol, BytePos, Pos, Span, DUMMY_SP};\n \n use crate::attr::*;\n-use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use crate::comment::{contains_comment, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::Version;\n use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n@@ -261,14 +261,23 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             trimmed.is_empty() || trimmed.chars().all(|c| c == ';')\n         };\n \n-        for (kind, offset, sub_slice) in CommentCodeSlices::new(self.snippet(span)) {\n+        let comment_snippet = self.snippet(span);\n+\n+        let align_to_right = if unindent_comment && contains_comment(&comment_snippet) {\n+            let first_lines = comment_snippet.splitn(2, '/').next().unwrap_or(\"\");\n+            last_line_width(first_lines) > last_line_width(&comment_snippet)\n+        } else {\n+            false\n+        };\n+\n+        for (kind, offset, sub_slice) in CommentCodeSlices::new(comment_snippet) {\n             let sub_slice = transform_missing_snippet(config, sub_slice);\n \n             debug!(\"close_block: {:?} {:?} {:?}\", kind, offset, sub_slice);\n \n             match kind {\n                 CodeCharKind::Comment => {\n-                    if !unindented && unindent_comment {\n+                    if !unindented && unindent_comment && !align_to_right {\n                         unindented = true;\n                         self.block_indent = self.block_indent.block_unindent(config);\n                     }"}, {"sha": "c9ce838c51adb12fadbe4c62d4b4f8cfd30db572", "filename": "tests/source/issue-4120.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/tests%2Fsource%2Fissue-4120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/tests%2Fsource%2Fissue-4120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4120.rs?ref=faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "patch": "@@ -0,0 +1,85 @@\n+fn main() {\n+    let x = if true {\n+        1\n+            // In if\n+    } else {\n+        0\n+            // In else\n+    };\n+\n+    let x = if true {\n+        1\n+             /* In if */\n+    } else {\n+        0\n+             /* In else */\n+    };\n+\n+    let z = if true {\n+        if true {\n+            1\n+\n+                 // In if level 2\n+        } else {\n+            2\n+        }\n+    } else {\n+        3\n+    };\n+\n+    let a = if true {\n+        1\n+  // In if\n+    } else {\n+        0\n+  // In else\n+    };\n+\n+    let a = if true {\n+        1\n+\n+    // In if\n+    } else {\n+        0\n+    // In else\n+    };\n+\n+    let b = if true {\n+        1\n+\n+    // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+\n+    let c = if true {\n+        1\n+\n+        // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+    for i in 0..2 {\n+        println!(\"Something\");\n+        // In for\n+    }\n+\n+    for i in 0..2 {\n+        println!(\"Something\");\n+        /* In for */\n+    }\n+\n+    extern \"C\" {\n+        fn first();\n+\n+        // In foreign mod\n+    }\n+\n+    extern \"C\" {\n+        fn first();\n+\n+        /* In foreign mod */\n+    }\n+}"}, {"sha": "a7d461dcfdb5b21c41b1eaae654ca93ecd7f9333", "filename": "tests/target/issue-4120.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/tests%2Ftarget%2Fissue-4120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf97a67d678a42a8bc0f5b8e1ec808457acdfa2/tests%2Ftarget%2Fissue-4120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4120.rs?ref=faf97a67d678a42a8bc0f5b8e1ec808457acdfa2", "patch": "@@ -0,0 +1,85 @@\n+fn main() {\n+    let x = if true {\n+        1\n+        // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+\n+    let x = if true {\n+        1\n+        /* In if */\n+    } else {\n+        0\n+        /* In else */\n+    };\n+\n+    let z = if true {\n+        if true {\n+            1\n+\n+            // In if level 2\n+        } else {\n+            2\n+        }\n+    } else {\n+        3\n+    };\n+\n+    let a = if true {\n+        1\n+    // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+\n+    let a = if true {\n+        1\n+\n+    // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+\n+    let b = if true {\n+        1\n+\n+    // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+\n+    let c = if true {\n+        1\n+\n+        // In if\n+    } else {\n+        0\n+        // In else\n+    };\n+    for i in 0..2 {\n+        println!(\"Something\");\n+        // In for\n+    }\n+\n+    for i in 0..2 {\n+        println!(\"Something\");\n+        /* In for */\n+    }\n+\n+    extern \"C\" {\n+        fn first();\n+\n+        // In foreign mod\n+    }\n+\n+    extern \"C\" {\n+        fn first();\n+\n+        /* In foreign mod */\n+    }\n+}"}]}