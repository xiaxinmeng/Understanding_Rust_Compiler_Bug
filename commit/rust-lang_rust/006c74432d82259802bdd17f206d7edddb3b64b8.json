{"sha": "006c74432d82259802bdd17f206d7edddb3b64b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNmM3NDQzMmQ4MjI1OTgwMmJkZDE3ZjIwNmQ3ZWRkZGIzYjY0Yjg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-03-08T18:53:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-08T18:53:57Z"}, "message": "Rollup merge of #40279 - gibfahn:test-unwind, r=est31\n\nAdd compile-fail tests for remaining items in whitelist and remove it\n\nAdd compile-fail tests for `cfg_target_thread_local` and `unwind_attributes`, and remove the whitelist.\n\nLet me know if I should clean up the tests (or if I've done anything else wrong, this is my first contribution to rust).\n\ncc/ @est31", "tree": {"sha": "45af0b11fb4960a7d8b9f8c752ce06b1cc59b86e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45af0b11fb4960a7d8b9f8c752ce06b1cc59b86e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/006c74432d82259802bdd17f206d7edddb3b64b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/006c74432d82259802bdd17f206d7edddb3b64b8", "html_url": "https://github.com/rust-lang/rust/commit/006c74432d82259802bdd17f206d7edddb3b64b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/006c74432d82259802bdd17f206d7edddb3b64b8/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb7a335c0f6f2dd7b94b92701f46b5ae2a0081b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb7a335c0f6f2dd7b94b92701f46b5ae2a0081b", "html_url": "https://github.com/rust-lang/rust/commit/4eb7a335c0f6f2dd7b94b92701f46b5ae2a0081b"}, {"sha": "7c88d9e86e86031b6b611d09b6b85f71de044d9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c88d9e86e86031b6b611d09b6b85f71de044d9e", "html_url": "https://github.com/rust-lang/rust/commit/7c88d9e86e86031b6b611d09b6b85f71de044d9e"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "d1971a5e1aea40403f0a486d23d25285de263685", "filename": "src/test/compile-fail/auxiliary/cfg-target-thread-local.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fcfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fcfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fcfg-target-thread-local.rs?ref=006c74432d82259802bdd17f206d7edddb3b64b8", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(thread_local)]\n+#![feature(cfg_target_thread_local)]\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+#[cfg_attr(target_thread_local, thread_local)]\n+pub static FOO: u32 = 3;"}, {"sha": "985bd8320e05938d9449dc6b75b970d909ab16e4", "filename": "src/test/compile-fail/feature-gate-cfg-target-thread-local.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Ffeature-gate-cfg-target-thread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Ffeature-gate-cfg-target-thread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-cfg-target-thread-local.rs?ref=006c74432d82259802bdd17f206d7edddb3b64b8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows\n+// aux-build:cfg-target-thread-local.rs\n+\n+#![feature(thread_local)]\n+\n+extern crate cfg_target_thread_local;\n+\n+extern {\n+    #[cfg_attr(target_thread_local, thread_local)]\n+    //~^ `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n+\n+    static FOO: u32;\n+}\n+\n+fn main() {\n+    assert_eq!(FOO, 3);\n+}"}, {"sha": "c8f9cd943cdaaf9ab61d41e2b71cc1faefbef3e0", "filename": "src/test/compile-fail/feature-gate-unwind-attributes.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unwind-attributes.rs?ref=006c74432d82259802bdd17f206d7edddb3b64b8", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+extern {\n+// CHECK: Function Attrs: nounwind\n+// CHECK-NEXT: declare void @extern_fn\n+    fn extern_fn();\n+// CHECK-NOT: Function Attrs: nounwind\n+// CHECK: declare void @unwinding_extern_fn\n+    #[unwind] //~ ERROR #[unwind] is experimental\n+    fn unwinding_extern_fn();\n+}\n+\n+pub unsafe fn force_declare() {\n+    extern_fn();\n+    unwinding_extern_fn();\n+}"}, {"sha": "9b323c95fc3c8eace38e78d7a5605bd23c9b1541", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/006c74432d82259802bdd17f206d7edddb3b64b8/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=006c74432d82259802bdd17f206d7edddb3b64b8", "patch": "@@ -165,17 +165,11 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n     });\n \n-    // FIXME get this whitelist empty.\n-    let whitelist = vec![\n-        \"cfg_target_thread_local\", \"unwind_attributes\",\n-    ];\n-\n     // Only check the number of lang features.\n     // Obligatory testing for library features is dumb.\n     let gate_untested = features.iter()\n                                 .filter(|&(_, f)| f.level == Status::Unstable)\n                                 .filter(|&(_, f)| !f.has_gate_test)\n-                                .filter(|&(n, _)| !whitelist.contains(&n.as_str()))\n                                 .collect::<Vec<_>>();\n \n     for &(name, _) in gate_untested.iter() {"}]}