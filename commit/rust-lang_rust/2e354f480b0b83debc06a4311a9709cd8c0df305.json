{"sha": "2e354f480b0b83debc06a4311a9709cd8c0df305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMzU0ZjQ4MGIwYjgzZGViYzA2YTQzMTFhOTcwOWNkOGMwZGYzMDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T23:09:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T23:09:31Z"}, "message": "use ToOwned trait instead of inherent method", "tree": {"sha": "31b772e764f8889ca5d77add0cc3a98e85f92335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31b772e764f8889ca5d77add0cc3a98e85f92335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e354f480b0b83debc06a4311a9709cd8c0df305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e354f480b0b83debc06a4311a9709cd8c0df305", "html_url": "https://github.com/rust-lang/rust/commit/2e354f480b0b83debc06a4311a9709cd8c0df305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e354f480b0b83debc06a4311a9709cd8c0df305/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b308375b82a33687f93468d75c7cc628b83a1351", "url": "https://api.github.com/repos/rust-lang/rust/commits/b308375b82a33687f93468d75c7cc628b83a1351", "html_url": "https://github.com/rust-lang/rust/commit/b308375b82a33687f93468d75c7cc628b83a1351"}], "stats": {"total": 531, "additions": 523, "deletions": 8}, "files": [{"sha": "b92cc082ef05b17892a7ea5d5be4b5f119913330", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=2e354f480b0b83debc06a4311a9709cd8c0df305", "patch": "@@ -15,12 +15,13 @@ use crate::{\n /// conversion itself has zero runtime cost: ast and syntax nodes have exactly\n /// the same representation: a pointer to the tree root and a pointer to the\n /// node itself.\n-pub trait AstNode: rowan::TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>> {\n+pub trait AstNode:\n+    rowan::TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>> + ToOwned<Owned = TreeArc<Self>>\n+{\n     fn cast(syntax: &SyntaxNode) -> Option<&Self>\n     where\n         Self: Sized;\n     fn syntax(&self) -> &SyntaxNode;\n-    fn to_owned(&self) -> TreeArc<Self>;\n }\n \n pub trait AstToken: AstNode {"}, {"sha": "e39b58827718e5c5e673250936fa51791161be20", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 496, "deletions": 0, "changes": 496, "blob_url": "https://github.com/rust-lang/rust/blob/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=2e354f480b0b83debc06a4311a9709cd8c0df305", "patch": "@@ -35,6 +35,10 @@ impl AstNode for ArgList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ArgList {\n+    type Owned = TreeArc<ArgList>;\n     fn to_owned(&self) -> TreeArc<ArgList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -63,6 +67,10 @@ impl AstNode for ArrayExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ArrayExpr {\n+    type Owned = TreeArc<ArrayExpr>;\n     fn to_owned(&self) -> TreeArc<ArrayExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -91,6 +99,10 @@ impl AstNode for ArrayType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ArrayType {\n+    type Owned = TreeArc<ArrayType>;\n     fn to_owned(&self) -> TreeArc<ArrayType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -123,6 +135,10 @@ impl AstNode for AssocTypeArg {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for AssocTypeArg {\n+    type Owned = TreeArc<AssocTypeArg>;\n     fn to_owned(&self) -> TreeArc<AssocTypeArg> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -155,6 +171,10 @@ impl AstNode for Attr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Attr {\n+    type Owned = TreeArc<Attr>;\n     fn to_owned(&self) -> TreeArc<Attr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -183,6 +203,10 @@ impl AstNode for BinExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for BinExpr {\n+    type Owned = TreeArc<BinExpr>;\n     fn to_owned(&self) -> TreeArc<BinExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -207,6 +231,10 @@ impl AstNode for BindPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for BindPat {\n+    type Owned = TreeArc<BindPat>;\n     fn to_owned(&self) -> TreeArc<BindPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -236,6 +264,10 @@ impl AstNode for Block {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Block {\n+    type Owned = TreeArc<Block>;\n     fn to_owned(&self) -> TreeArc<Block> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -268,6 +300,10 @@ impl AstNode for BlockExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for BlockExpr {\n+    type Owned = TreeArc<BlockExpr>;\n     fn to_owned(&self) -> TreeArc<BlockExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -296,6 +332,10 @@ impl AstNode for BreakExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for BreakExpr {\n+    type Owned = TreeArc<BreakExpr>;\n     fn to_owned(&self) -> TreeArc<BreakExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -324,6 +364,10 @@ impl AstNode for Byte {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Byte {\n+    type Owned = TreeArc<Byte>;\n     fn to_owned(&self) -> TreeArc<Byte> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -349,6 +393,10 @@ impl AstNode for ByteString {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ByteString {\n+    type Owned = TreeArc<ByteString>;\n     fn to_owned(&self) -> TreeArc<ByteString> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -374,6 +422,10 @@ impl AstNode for CallExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for CallExpr {\n+    type Owned = TreeArc<CallExpr>;\n     fn to_owned(&self) -> TreeArc<CallExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -403,6 +455,10 @@ impl AstNode for CastExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for CastExpr {\n+    type Owned = TreeArc<CastExpr>;\n     fn to_owned(&self) -> TreeArc<CastExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -435,6 +491,10 @@ impl AstNode for Char {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Char {\n+    type Owned = TreeArc<Char>;\n     fn to_owned(&self) -> TreeArc<Char> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -460,6 +520,10 @@ impl AstNode for Comment {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Comment {\n+    type Owned = TreeArc<Comment>;\n     fn to_owned(&self) -> TreeArc<Comment> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -485,6 +549,10 @@ impl AstNode for Condition {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Condition {\n+    type Owned = TreeArc<Condition>;\n     fn to_owned(&self) -> TreeArc<Condition> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -517,6 +585,10 @@ impl AstNode for ConstDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ConstDef {\n+    type Owned = TreeArc<ConstDef>;\n     fn to_owned(&self) -> TreeArc<ConstDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -546,6 +618,10 @@ impl AstNode for ContinueExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ContinueExpr {\n+    type Owned = TreeArc<ContinueExpr>;\n     fn to_owned(&self) -> TreeArc<ContinueExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -570,6 +646,10 @@ impl AstNode for DynTraitType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for DynTraitType {\n+    type Owned = TreeArc<DynTraitType>;\n     fn to_owned(&self) -> TreeArc<DynTraitType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -594,6 +674,10 @@ impl AstNode for EnumDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for EnumDef {\n+    type Owned = TreeArc<EnumDef>;\n     fn to_owned(&self) -> TreeArc<EnumDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -627,6 +711,10 @@ impl AstNode for EnumVariant {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for EnumVariant {\n+    type Owned = TreeArc<EnumVariant>;\n     fn to_owned(&self) -> TreeArc<EnumVariant> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -657,6 +745,10 @@ impl AstNode for EnumVariantList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for EnumVariantList {\n+    type Owned = TreeArc<EnumVariantList>;\n     fn to_owned(&self) -> TreeArc<EnumVariantList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -742,6 +834,10 @@ impl AstNode for Expr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Expr {\n+    type Owned = TreeArc<Expr>;\n     fn to_owned(&self) -> TreeArc<Expr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -800,6 +896,10 @@ impl AstNode for ExprStmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ExprStmt {\n+    type Owned = TreeArc<ExprStmt>;\n     fn to_owned(&self) -> TreeArc<ExprStmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -828,6 +928,10 @@ impl AstNode for ExternCrateItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ExternCrateItem {\n+    type Owned = TreeArc<ExternCrateItem>;\n     fn to_owned(&self) -> TreeArc<ExternCrateItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -852,6 +956,10 @@ impl AstNode for FalseKw {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FalseKw {\n+    type Owned = TreeArc<FalseKw>;\n     fn to_owned(&self) -> TreeArc<FalseKw> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -877,6 +985,10 @@ impl AstNode for FieldExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FieldExpr {\n+    type Owned = TreeArc<FieldExpr>;\n     fn to_owned(&self) -> TreeArc<FieldExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -909,6 +1021,10 @@ impl AstNode for FieldPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FieldPat {\n+    type Owned = TreeArc<FieldPat>;\n     fn to_owned(&self) -> TreeArc<FieldPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -938,6 +1054,10 @@ impl AstNode for FieldPatList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FieldPatList {\n+    type Owned = TreeArc<FieldPatList>;\n     fn to_owned(&self) -> TreeArc<FieldPatList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -970,6 +1090,10 @@ impl AstNode for FloatNumber {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FloatNumber {\n+    type Owned = TreeArc<FloatNumber>;\n     fn to_owned(&self) -> TreeArc<FloatNumber> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -995,6 +1119,10 @@ impl AstNode for FnDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FnDef {\n+    type Owned = TreeArc<FnDef>;\n     fn to_owned(&self) -> TreeArc<FnDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1036,6 +1164,10 @@ impl AstNode for FnPointerType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for FnPointerType {\n+    type Owned = TreeArc<FnPointerType>;\n     fn to_owned(&self) -> TreeArc<FnPointerType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1068,6 +1200,10 @@ impl AstNode for ForExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ForExpr {\n+    type Owned = TreeArc<ForExpr>;\n     fn to_owned(&self) -> TreeArc<ForExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1101,6 +1237,10 @@ impl AstNode for ForType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ForType {\n+    type Owned = TreeArc<ForType>;\n     fn to_owned(&self) -> TreeArc<ForType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1129,6 +1269,10 @@ impl AstNode for IfExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for IfExpr {\n+    type Owned = TreeArc<IfExpr>;\n     fn to_owned(&self) -> TreeArc<IfExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1157,6 +1301,10 @@ impl AstNode for ImplBlock {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ImplBlock {\n+    type Owned = TreeArc<ImplBlock>;\n     fn to_owned(&self) -> TreeArc<ImplBlock> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1194,6 +1342,10 @@ impl AstNode for ImplItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ImplItem {\n+    type Owned = TreeArc<ImplItem>;\n     fn to_owned(&self) -> TreeArc<ImplItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1228,6 +1380,10 @@ impl AstNode for ImplTraitType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ImplTraitType {\n+    type Owned = TreeArc<ImplTraitType>;\n     fn to_owned(&self) -> TreeArc<ImplTraitType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1252,6 +1408,10 @@ impl AstNode for IndexExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for IndexExpr {\n+    type Owned = TreeArc<IndexExpr>;\n     fn to_owned(&self) -> TreeArc<IndexExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1276,6 +1436,10 @@ impl AstNode for IntNumber {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for IntNumber {\n+    type Owned = TreeArc<IntNumber>;\n     fn to_owned(&self) -> TreeArc<IntNumber> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1301,6 +1465,10 @@ impl AstNode for ItemList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ItemList {\n+    type Owned = TreeArc<ItemList>;\n     fn to_owned(&self) -> TreeArc<ItemList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1331,6 +1499,10 @@ impl AstNode for Label {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Label {\n+    type Owned = TreeArc<Label>;\n     fn to_owned(&self) -> TreeArc<Label> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1355,6 +1527,10 @@ impl AstNode for LambdaExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LambdaExpr {\n+    type Owned = TreeArc<LambdaExpr>;\n     fn to_owned(&self) -> TreeArc<LambdaExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1387,6 +1563,10 @@ impl AstNode for LetStmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LetStmt {\n+    type Owned = TreeArc<LetStmt>;\n     fn to_owned(&self) -> TreeArc<LetStmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1423,6 +1603,10 @@ impl AstNode for Lifetime {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Lifetime {\n+    type Owned = TreeArc<Lifetime>;\n     fn to_owned(&self) -> TreeArc<Lifetime> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1448,6 +1632,10 @@ impl AstNode for LifetimeArg {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LifetimeArg {\n+    type Owned = TreeArc<LifetimeArg>;\n     fn to_owned(&self) -> TreeArc<LifetimeArg> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1476,6 +1664,10 @@ impl AstNode for LifetimeParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LifetimeParam {\n+    type Owned = TreeArc<LifetimeParam>;\n     fn to_owned(&self) -> TreeArc<LifetimeParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1504,6 +1696,10 @@ impl AstNode for Literal {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Literal {\n+    type Owned = TreeArc<Literal>;\n     fn to_owned(&self) -> TreeArc<Literal> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1555,6 +1751,10 @@ impl AstNode for LiteralExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LiteralExpr {\n+    type Owned = TreeArc<LiteralExpr>;\n     fn to_owned(&self) -> TreeArc<LiteralExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1596,6 +1796,10 @@ impl AstNode for LoopExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for LoopExpr {\n+    type Owned = TreeArc<LoopExpr>;\n     fn to_owned(&self) -> TreeArc<LoopExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1621,6 +1825,10 @@ impl AstNode for MacroCall {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MacroCall {\n+    type Owned = TreeArc<MacroCall>;\n     fn to_owned(&self) -> TreeArc<MacroCall> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1653,6 +1861,10 @@ impl AstNode for MatchArm {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MatchArm {\n+    type Owned = TreeArc<MatchArm>;\n     fn to_owned(&self) -> TreeArc<MatchArm> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1689,6 +1901,10 @@ impl AstNode for MatchArmList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MatchArmList {\n+    type Owned = TreeArc<MatchArmList>;\n     fn to_owned(&self) -> TreeArc<MatchArmList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1717,6 +1933,10 @@ impl AstNode for MatchExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MatchExpr {\n+    type Owned = TreeArc<MatchExpr>;\n     fn to_owned(&self) -> TreeArc<MatchExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1749,6 +1969,10 @@ impl AstNode for MatchGuard {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MatchGuard {\n+    type Owned = TreeArc<MatchGuard>;\n     fn to_owned(&self) -> TreeArc<MatchGuard> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1773,6 +1997,10 @@ impl AstNode for MethodCallExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for MethodCallExpr {\n+    type Owned = TreeArc<MethodCallExpr>;\n     fn to_owned(&self) -> TreeArc<MethodCallExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1806,6 +2034,10 @@ impl AstNode for Module {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Module {\n+    type Owned = TreeArc<Module>;\n     fn to_owned(&self) -> TreeArc<Module> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1863,6 +2095,10 @@ impl AstNode for ModuleItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ModuleItem {\n+    type Owned = TreeArc<ModuleItem>;\n     fn to_owned(&self) -> TreeArc<ModuleItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1905,6 +2141,10 @@ impl AstNode for Name {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Name {\n+    type Owned = TreeArc<Name>;\n     fn to_owned(&self) -> TreeArc<Name> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1929,6 +2169,10 @@ impl AstNode for NameRef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NameRef {\n+    type Owned = TreeArc<NameRef>;\n     fn to_owned(&self) -> TreeArc<NameRef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1953,6 +2197,10 @@ impl AstNode for NamedField {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NamedField {\n+    type Owned = TreeArc<NamedField>;\n     fn to_owned(&self) -> TreeArc<NamedField> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -1985,6 +2233,10 @@ impl AstNode for NamedFieldDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NamedFieldDef {\n+    type Owned = TreeArc<NamedFieldDef>;\n     fn to_owned(&self) -> TreeArc<NamedFieldDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2016,6 +2268,10 @@ impl AstNode for NamedFieldDefList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NamedFieldDefList {\n+    type Owned = TreeArc<NamedFieldDefList>;\n     fn to_owned(&self) -> TreeArc<NamedFieldDefList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2044,6 +2300,10 @@ impl AstNode for NamedFieldList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NamedFieldList {\n+    type Owned = TreeArc<NamedFieldList>;\n     fn to_owned(&self) -> TreeArc<NamedFieldList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2072,6 +2332,10 @@ impl AstNode for NeverType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NeverType {\n+    type Owned = TreeArc<NeverType>;\n     fn to_owned(&self) -> TreeArc<NeverType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2103,6 +2367,10 @@ impl AstNode for NominalDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for NominalDef {\n+    type Owned = TreeArc<NominalDef>;\n     fn to_owned(&self) -> TreeArc<NominalDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2139,6 +2407,10 @@ impl AstNode for Param {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Param {\n+    type Owned = TreeArc<Param>;\n     fn to_owned(&self) -> TreeArc<Param> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2171,6 +2443,10 @@ impl AstNode for ParamList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ParamList {\n+    type Owned = TreeArc<ParamList>;\n     fn to_owned(&self) -> TreeArc<ParamList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2203,6 +2479,10 @@ impl AstNode for ParenExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ParenExpr {\n+    type Owned = TreeArc<ParenExpr>;\n     fn to_owned(&self) -> TreeArc<ParenExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2231,6 +2511,10 @@ impl AstNode for ParenType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ParenType {\n+    type Owned = TreeArc<ParenType>;\n     fn to_owned(&self) -> TreeArc<ParenType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2280,6 +2564,10 @@ impl AstNode for Pat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Pat {\n+    type Owned = TreeArc<Pat>;\n     fn to_owned(&self) -> TreeArc<Pat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2320,6 +2608,10 @@ impl AstNode for Path {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Path {\n+    type Owned = TreeArc<Path>;\n     fn to_owned(&self) -> TreeArc<Path> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2352,6 +2644,10 @@ impl AstNode for PathExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PathExpr {\n+    type Owned = TreeArc<PathExpr>;\n     fn to_owned(&self) -> TreeArc<PathExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2380,6 +2676,10 @@ impl AstNode for PathPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PathPat {\n+    type Owned = TreeArc<PathPat>;\n     fn to_owned(&self) -> TreeArc<PathPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2408,6 +2708,10 @@ impl AstNode for PathSegment {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PathSegment {\n+    type Owned = TreeArc<PathSegment>;\n     fn to_owned(&self) -> TreeArc<PathSegment> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2440,6 +2744,10 @@ impl AstNode for PathType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PathType {\n+    type Owned = TreeArc<PathType>;\n     fn to_owned(&self) -> TreeArc<PathType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2468,6 +2776,10 @@ impl AstNode for PlaceholderPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PlaceholderPat {\n+    type Owned = TreeArc<PlaceholderPat>;\n     fn to_owned(&self) -> TreeArc<PlaceholderPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2492,6 +2804,10 @@ impl AstNode for PlaceholderType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PlaceholderType {\n+    type Owned = TreeArc<PlaceholderType>;\n     fn to_owned(&self) -> TreeArc<PlaceholderType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2516,6 +2832,10 @@ impl AstNode for PointerType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PointerType {\n+    type Owned = TreeArc<PointerType>;\n     fn to_owned(&self) -> TreeArc<PointerType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2544,6 +2864,10 @@ impl AstNode for PosField {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PosField {\n+    type Owned = TreeArc<PosField>;\n     fn to_owned(&self) -> TreeArc<PosField> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2574,6 +2898,10 @@ impl AstNode for PosFieldList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PosFieldList {\n+    type Owned = TreeArc<PosFieldList>;\n     fn to_owned(&self) -> TreeArc<PosFieldList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2602,6 +2930,10 @@ impl AstNode for PrefixExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for PrefixExpr {\n+    type Owned = TreeArc<PrefixExpr>;\n     fn to_owned(&self) -> TreeArc<PrefixExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2630,6 +2962,10 @@ impl AstNode for RangeExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RangeExpr {\n+    type Owned = TreeArc<RangeExpr>;\n     fn to_owned(&self) -> TreeArc<RangeExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2654,6 +2990,10 @@ impl AstNode for RangePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RangePat {\n+    type Owned = TreeArc<RangePat>;\n     fn to_owned(&self) -> TreeArc<RangePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2678,6 +3018,10 @@ impl AstNode for RawByteString {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RawByteString {\n+    type Owned = TreeArc<RawByteString>;\n     fn to_owned(&self) -> TreeArc<RawByteString> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2703,6 +3047,10 @@ impl AstNode for RawString {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RawString {\n+    type Owned = TreeArc<RawString>;\n     fn to_owned(&self) -> TreeArc<RawString> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2728,6 +3076,10 @@ impl AstNode for RefExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RefExpr {\n+    type Owned = TreeArc<RefExpr>;\n     fn to_owned(&self) -> TreeArc<RefExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2756,6 +3108,10 @@ impl AstNode for RefPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RefPat {\n+    type Owned = TreeArc<RefPat>;\n     fn to_owned(&self) -> TreeArc<RefPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2784,6 +3140,10 @@ impl AstNode for ReferenceType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ReferenceType {\n+    type Owned = TreeArc<ReferenceType>;\n     fn to_owned(&self) -> TreeArc<ReferenceType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2812,6 +3172,10 @@ impl AstNode for RetType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for RetType {\n+    type Owned = TreeArc<RetType>;\n     fn to_owned(&self) -> TreeArc<RetType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2840,6 +3204,10 @@ impl AstNode for ReturnExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for ReturnExpr {\n+    type Owned = TreeArc<ReturnExpr>;\n     fn to_owned(&self) -> TreeArc<ReturnExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2868,6 +3236,10 @@ impl AstNode for SelfKw {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for SelfKw {\n+    type Owned = TreeArc<SelfKw>;\n     fn to_owned(&self) -> TreeArc<SelfKw> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2892,6 +3264,10 @@ impl AstNode for SelfParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for SelfParam {\n+    type Owned = TreeArc<SelfParam>;\n     fn to_owned(&self) -> TreeArc<SelfParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2924,6 +3300,10 @@ impl AstNode for SlicePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for SlicePat {\n+    type Owned = TreeArc<SlicePat>;\n     fn to_owned(&self) -> TreeArc<SlicePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2948,6 +3328,10 @@ impl AstNode for SliceType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for SliceType {\n+    type Owned = TreeArc<SliceType>;\n     fn to_owned(&self) -> TreeArc<SliceType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -2976,6 +3360,10 @@ impl AstNode for SourceFile {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for SourceFile {\n+    type Owned = TreeArc<SourceFile>;\n     fn to_owned(&self) -> TreeArc<SourceFile> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3006,6 +3394,10 @@ impl AstNode for StaticDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for StaticDef {\n+    type Owned = TreeArc<StaticDef>;\n     fn to_owned(&self) -> TreeArc<StaticDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3042,6 +3434,10 @@ impl AstNode for Stmt {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Stmt {\n+    type Owned = TreeArc<Stmt>;\n     fn to_owned(&self) -> TreeArc<Stmt> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3075,6 +3471,10 @@ impl AstNode for String {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for String {\n+    type Owned = TreeArc<String>;\n     fn to_owned(&self) -> TreeArc<String> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3100,6 +3500,10 @@ impl AstNode for StructDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for StructDef {\n+    type Owned = TreeArc<StructDef>;\n     fn to_owned(&self) -> TreeArc<StructDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3129,6 +3533,10 @@ impl AstNode for StructLit {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for StructLit {\n+    type Owned = TreeArc<StructLit>;\n     fn to_owned(&self) -> TreeArc<StructLit> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3165,6 +3573,10 @@ impl AstNode for StructPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for StructPat {\n+    type Owned = TreeArc<StructPat>;\n     fn to_owned(&self) -> TreeArc<StructPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3197,6 +3609,10 @@ impl AstNode for TokenTree {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TokenTree {\n+    type Owned = TreeArc<TokenTree>;\n     fn to_owned(&self) -> TreeArc<TokenTree> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3221,6 +3637,10 @@ impl AstNode for TraitDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TraitDef {\n+    type Owned = TreeArc<TraitDef>;\n     fn to_owned(&self) -> TreeArc<TraitDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3249,6 +3669,10 @@ impl AstNode for TrueKw {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TrueKw {\n+    type Owned = TreeArc<TrueKw>;\n     fn to_owned(&self) -> TreeArc<TrueKw> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3274,6 +3698,10 @@ impl AstNode for TryExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TryExpr {\n+    type Owned = TreeArc<TryExpr>;\n     fn to_owned(&self) -> TreeArc<TryExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3302,6 +3730,10 @@ impl AstNode for TupleExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TupleExpr {\n+    type Owned = TreeArc<TupleExpr>;\n     fn to_owned(&self) -> TreeArc<TupleExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3330,6 +3762,10 @@ impl AstNode for TuplePat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TuplePat {\n+    type Owned = TreeArc<TuplePat>;\n     fn to_owned(&self) -> TreeArc<TuplePat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3358,6 +3794,10 @@ impl AstNode for TupleStructPat {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TupleStructPat {\n+    type Owned = TreeArc<TupleStructPat>;\n     fn to_owned(&self) -> TreeArc<TupleStructPat> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3390,6 +3830,10 @@ impl AstNode for TupleType {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TupleType {\n+    type Owned = TreeArc<TupleType>;\n     fn to_owned(&self) -> TreeArc<TupleType> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3418,6 +3862,10 @@ impl AstNode for TypeArg {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeArg {\n+    type Owned = TreeArc<TypeArg>;\n     fn to_owned(&self) -> TreeArc<TypeArg> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3446,6 +3894,10 @@ impl AstNode for TypeArgList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeArgList {\n+    type Owned = TreeArc<TypeArgList>;\n     fn to_owned(&self) -> TreeArc<TypeArgList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3482,6 +3934,10 @@ impl AstNode for TypeDef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeDef {\n+    type Owned = TreeArc<TypeDef>;\n     fn to_owned(&self) -> TreeArc<TypeDef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3511,6 +3967,10 @@ impl AstNode for TypeParam {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeParam {\n+    type Owned = TreeArc<TypeParam>;\n     fn to_owned(&self) -> TreeArc<TypeParam> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3536,6 +3996,10 @@ impl AstNode for TypeParamList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeParamList {\n+    type Owned = TreeArc<TypeParamList>;\n     fn to_owned(&self) -> TreeArc<TypeParamList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3597,6 +4061,10 @@ impl AstNode for TypeRef {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeRef {\n+    type Owned = TreeArc<TypeRef>;\n     fn to_owned(&self) -> TreeArc<TypeRef> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3641,6 +4109,10 @@ impl AstNode for UseItem {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for UseItem {\n+    type Owned = TreeArc<UseItem>;\n     fn to_owned(&self) -> TreeArc<UseItem> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3669,6 +4141,10 @@ impl AstNode for UseTree {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for UseTree {\n+    type Owned = TreeArc<UseTree>;\n     fn to_owned(&self) -> TreeArc<UseTree> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3701,6 +4177,10 @@ impl AstNode for UseTreeList {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for UseTreeList {\n+    type Owned = TreeArc<UseTreeList>;\n     fn to_owned(&self) -> TreeArc<UseTreeList> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3729,6 +4209,10 @@ impl AstNode for Visibility {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Visibility {\n+    type Owned = TreeArc<Visibility>;\n     fn to_owned(&self) -> TreeArc<Visibility> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3753,6 +4237,10 @@ impl AstNode for WhereClause {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for WhereClause {\n+    type Owned = TreeArc<WhereClause>;\n     fn to_owned(&self) -> TreeArc<WhereClause> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3777,6 +4265,10 @@ impl AstNode for WhileExpr {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for WhileExpr {\n+    type Owned = TreeArc<WhileExpr>;\n     fn to_owned(&self) -> TreeArc<WhileExpr> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -3806,6 +4298,10 @@ impl AstNode for Whitespace {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for Whitespace {\n+    type Owned = TreeArc<Whitespace>;\n     fn to_owned(&self) -> TreeArc<Whitespace> { TreeArc::cast(self.syntax.to_owned()) }\n }\n "}, {"sha": "ea0fc35fd74da41b687db59a2dfacea51721eef6", "filename": "crates/ra_syntax/src/ast/generated.rs.tera", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=2e354f480b0b83debc06a4311a9709cd8c0df305", "patch": "@@ -48,6 +48,10 @@ impl AstNode for {{ node }} {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for {{ node }} {\n+    type Owned = TreeArc<{{ node }}>;\n     fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }\n }\n \n@@ -79,6 +83,10 @@ impl AstNode for {{ node }} {\n         }\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for {{ node }} {\n+    type Owned = TreeArc<{{ node }}>;\n     fn to_owned(&self) -> TreeArc<{{ node }}> { TreeArc::cast(self.syntax.to_owned()) }\n }\n "}, {"sha": "ed48739f8ad185fdee07ee38db146eb60228a8e7", "filename": "crates/ra_syntax/src/yellow.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e354f480b0b83debc06a4311a9709cd8c0df305/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow.rs?ref=2e354f480b0b83debc06a4311a9709cd8c0df305", "patch": "@@ -2,10 +2,11 @@ mod builder;\n pub mod syntax_error;\n mod syntax_text;\n \n+use std::{fmt, borrow::Borrow};\n+\n use self::syntax_text::SyntaxText;\n use crate::{SmolStr, SyntaxKind, TextRange};\n use rowan::{Types, TransparentNewType};\n-use std::fmt;\n \n pub(crate) use self::builder::GreenBuilder;\n pub use self::syntax_error::{SyntaxError, SyntaxErrorKind, Location};\n@@ -25,6 +26,12 @@ pub struct TreeArc<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>>(\n     pub(crate) rowan::TreeArc<RaTypes, T>,\n );\n \n+impl<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>> Borrow<T> for TreeArc<T> {\n+    fn borrow(&self) -> &T {\n+        &*self\n+    }\n+}\n+\n impl<T> TreeArc<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n@@ -124,6 +131,14 @@ impl SyntaxNode {\n     }\n }\n \n+impl ToOwned for SyntaxNode {\n+    type Owned = TreeArc<SyntaxNode>;\n+    fn to_owned(&self) -> TreeArc<SyntaxNode> {\n+        let ptr = TreeArc(self.0.to_owned());\n+        TreeArc::cast(ptr)\n+    }\n+}\n+\n impl SyntaxNode {\n     pub(crate) fn root_data(&self) -> &Vec<SyntaxError> {\n         self.0.root_data()\n@@ -133,11 +148,6 @@ impl SyntaxNode {\n         self.0.replace_self(replacement)\n     }\n \n-    pub fn to_owned(&self) -> TreeArc<SyntaxNode> {\n-        let ptr = TreeArc(self.0.to_owned());\n-        TreeArc::cast(ptr)\n-    }\n-\n     pub fn kind(&self) -> SyntaxKind {\n         self.0.kind()\n     }"}]}