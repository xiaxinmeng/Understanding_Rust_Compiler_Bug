{"sha": "dfa0db59610811529c08c6866712ddefe0e14196", "node_id": "C_kwDOAAsO6NoAKGRmYTBkYjU5NjEwODExNTI5YzA4YzY4NjY3MTJkZGVmZTBlMTQxOTY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-09T18:08:38Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-22T22:57:27Z"}, "message": "Reintroduce `into_future` in `.await` desugaring\n\nThis is a reintroduction of the remaining parts from\nhttps://github.com/rust-lang/rust/pull/65244 that have not been relanded\nyet.\n\nIssues GH-67644, GH-67982", "tree": {"sha": "ca1527690b2f4fc904b81845ab73e8cb0b565466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1527690b2f4fc904b81845ab73e8cb0b565466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa0db59610811529c08c6866712ddefe0e14196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa0db59610811529c08c6866712ddefe0e14196", "html_url": "https://github.com/rust-lang/rust/commit/dfa0db59610811529c08c6866712ddefe0e14196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa0db59610811529c08c6866712ddefe0e14196/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936f2600b6c903b04387f74ed5cbce88bb06d243", "url": "https://api.github.com/repos/rust-lang/rust/commits/936f2600b6c903b04387f74ed5cbce88bb06d243", "html_url": "https://github.com/rust-lang/rust/commit/936f2600b6c903b04387f74ed5cbce88bb06d243"}], "stats": {"total": 100, "additions": 91, "deletions": 9}, "files": [{"sha": "8f3bf5d6341c4e8f163f02709059f31635fcfce0", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -593,7 +593,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// match <expr> {\n+    /// match ::std::future::IntoFuture::into_future(<expr>) {\n     ///     mut pinned => loop {\n     ///         match unsafe { ::std::future::Future::poll(\n     ///             <::std::pin::Pin>::new_unchecked(&mut pinned),\n@@ -629,7 +629,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             await_span,\n             self.allow_gen_future.clone(),\n         );\n-        let expr = self.lower_expr(expr);\n+        let expr = self.lower_expr_mut(expr);\n \n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) =\n@@ -746,10 +746,26 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // mut pinned => loop { ... }\n         let pinned_arm = self.arm(pinned_pat, loop_expr);\n \n-        // match <expr> {\n-        //     mut pinned => loop { .. }\n+        // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n+        let into_future_span = self.mark_span_with_reason(\n+            DesugaringKind::Await,\n+            await_span,\n+            self.allow_into_future.clone(),\n+        );\n+        //let expr = self.lower_expr_mut(expr);\n+        let into_future_expr = self.expr_call_lang_item_fn(\n+            into_future_span,\n+            hir::LangItem::IntoFutureIntoFuture,\n+            arena_vec![self; expr],\n+        );\n+\n+        // match <into_future_expr> {        //     mut pinned => loop { .. }\n         // }\n-        hir::ExprKind::Match(expr, arena_vec![self; pinned_arm], hir::MatchSource::AwaitDesugar)\n+        hir::ExprKind::Match(\n+            into_future_expr,\n+            arena_vec![self; pinned_arm],\n+            hir::MatchSource::AwaitDesugar,\n+        )\n     }\n \n     fn lower_expr_closure("}, {"sha": "f5aafda9297a5e0a7974b8ee76b4405ce8ed4e50", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -162,6 +162,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     allow_try_trait: Option<Lrc<[Symbol]>>,\n     allow_gen_future: Option<Lrc<[Symbol]>>,\n+    allow_into_future: Option<Lrc<[Symbol]>>,\n }\n \n pub trait ResolverAstLowering {\n@@ -320,6 +321,7 @@ pub fn lower_crate<'a, 'hir>(\n         in_scope_lifetimes: Vec::new(),\n         allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n+        allow_into_future: Some([sym::into_future][..].into()),\n     }\n     .lower_crate(krate)\n }"}, {"sha": "32c6d54497c4dc74c693b2d57c42f6bac3b8275c", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -347,6 +347,7 @@ language_item_table! {\n     ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n     ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n \n+    IntoFutureIntoFuture,    sym::into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n "}, {"sha": "774ae3164c8d8679c2a52d20e8a3a9876b5c560a", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -196,6 +196,7 @@ symbols! {\n         Implied,\n         Input,\n         Into,\n+        IntoFuture,\n         IntoIterator,\n         IoRead,\n         IoWrite,\n@@ -734,6 +735,7 @@ symbols! {\n         inout,\n         instruction_set,\n         intel,\n+        into_future,\n         into_iter,\n         intra_doc_pointers,\n         intrinsics,"}, {"sha": "cac1866188eff1dc0c13386d2c7b6e5db81a6d0c", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -13,6 +13,7 @@ pub trait IntoFuture {\n \n     /// Creates a future from a value.\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n+    #[cfg_attr(not(bootstrap), lang = \"into_future\")]\n     fn into_future(self) -> Self::Future;\n }\n "}, {"sha": "a603ebd6e8547727824440b4828cae0730fe8962", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -112,7 +112,7 @@ async fn mixed_sizes() {\n fn main() {\n     assert_eq!(1025, std::mem::size_of_val(&single()));\n     assert_eq!(1026, std::mem::size_of_val(&single_with_noop()));\n-    assert_eq!(3078, std::mem::size_of_val(&joined()));\n-    assert_eq!(3079, std::mem::size_of_val(&joined_with_noop()));\n-    assert_eq!(7181, std::mem::size_of_val(&mixed_sizes()));\n+    assert_eq!(3076, std::mem::size_of_val(&joined()));\n+    assert_eq!(3076, std::mem::size_of_val(&joined_with_noop()));\n+    assert_eq!(6157, std::mem::size_of_val(&mixed_sizes()));\n }"}, {"sha": "49712684b04cfab144c01ffff7ba773ca69a0c75", "filename": "src/test/ui/async-await/await-into-future.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-into-future.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -0,0 +1,28 @@\n+// check-pass\n+\n+// edition:2021\n+\n+#![feature(into_future)]\n+\n+use std::{future::{Future, IntoFuture}, pin::Pin};\n+\n+struct AwaitMe;\n+\n+impl IntoFuture for AwaitMe {\n+    type Output = i32;\n+    type Future = Pin<Box<dyn Future<Output = i32>>>;\n+\n+    fn into_future(self) -> Self::Future {\n+        Box::pin(me())\n+    }\n+}\n+\n+async fn me() -> i32 {\n+    41\n+}\n+\n+async fn run() {\n+    assert_eq!(AwaitMe.await, 41);\n+}\n+\n+fn main() {}"}, {"sha": "85d868c27032e011fd910d6c591b3f8d457b4fbd", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -10,12 +10,20 @@ async fn foo() {\n     //~^ ERROR type inside `async fn` body must be known in this context\n     //~| ERROR type inside `async fn` body must be known in this context\n     //~| ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n+    //~| ERROR type inside `async fn` body must be known in this context\n+    //~| NOTE cannot infer type for type parameter `T`\n+    //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE cannot infer type for type parameter `T`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n+    //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`\n     //~| NOTE in this expansion of desugaring of `await`"}, {"sha": "130667a49c53abde9863ef68df09f5691fb4428d", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfa0db59610811529c08c6866712ddefe0e14196/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=dfa0db59610811529c08c6866712ddefe0e14196", "patch": "@@ -34,6 +34,30 @@ note: the type is part of the `async fn` body because of this `await`\n LL |     bar().await;\n    |     ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error[E0698]: type inside `async fn` body must be known in this context\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n+   |\n+note: the type is part of the `async fn` body because of this `await`\n+  --> $DIR/unresolved_type_param.rs:9:5\n+   |\n+LL |     bar().await;\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0698`."}]}