{"sha": "75ad1161dd598ba0e61b9215a08216e744dd9f4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YWQxMTYxZGQ1OThiYTBlNjFiOTIxNWEwODIxNmU3NDRkZDlmNGM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-01-08T15:50:45Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2015-01-24T14:02:38Z"}, "message": "debuginfo: Improve DWARF representation of unsized vecs and strings.", "tree": {"sha": "23c84b0185e0065f0a121788cc95376e41239446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c84b0185e0065f0a121788cc95376e41239446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ad1161dd598ba0e61b9215a08216e744dd9f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ad1161dd598ba0e61b9215a08216e744dd9f4c", "html_url": "https://github.com/rust-lang/rust/commit/75ad1161dd598ba0e61b9215a08216e744dd9f4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ad1161dd598ba0e61b9215a08216e744dd9f4c/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612ded78e3275332e4b68391701a2866ca3689cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/612ded78e3275332e4b68391701a2866ca3689cc", "html_url": "https://github.com/rust-lang/rust/commit/612ded78e3275332e4b68391701a2866ca3689cc"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "b366c7faefab08e0ee5eab94204d6ce90799ba40", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75ad1161dd598ba0e61b9215a08216e744dd9f4c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ad1161dd598ba0e61b9215a08216e744dd9f4c/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=75ad1161dd598ba0e61b9215a08216e744dd9f4c", "patch": "@@ -207,7 +207,7 @@ use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n use util::ppaux;\n \n-use libc::c_uint;\n+use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n use std::cell::{Cell, RefCell};\n use std::ptr;\n@@ -2764,7 +2764,7 @@ fn create_struct_stub(cx: &CrateContext,\n fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 unique_type_id: UniqueTypeId,\n                                 element_type: Ty<'tcx>,\n-                                len: uint,\n+                                len: Option<u64>,\n                                 span: Span)\n                                 -> MetadataCreationResult {\n     let element_type_metadata = type_metadata(cx, element_type, span);\n@@ -2774,18 +2774,20 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let element_llvm_type = type_of::type_of(cx, element_type);\n     let (element_type_size, element_type_align) = size_and_align_of(cx, element_llvm_type);\n \n+    let (array_size_in_bytes, upper_bound) = match len {\n+        Some(len) => (element_type_size * len, len as c_longlong),\n+        None => (0, -1)\n+    };\n+\n     let subrange = unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateSubrange(\n-            DIB(cx),\n-            0,\n-            len as i64)\n+        llvm::LLVMDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)\n     };\n \n     let subscripts = create_DIArray(DIB(cx), &[subrange]);\n     let metadata = unsafe {\n         llvm::LLVMDIBuilderCreateArrayType(\n             DIB(cx),\n-            bytes_to_bits(element_type_size * (len as u64)),\n+            bytes_to_bits(array_size_in_bytes),\n             bytes_to_bits(element_type_align),\n             element_type_metadata,\n             subscripts)\n@@ -2991,12 +2993,12 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_enum(def_id, _) => {\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span).finalize(cx)\n         }\n-        ty::ty_vec(typ, Some(len)) => {\n-            fixed_vec_metadata(cx, unique_type_id, typ, len, usage_site_span)\n+        ty::ty_vec(typ, len) => {\n+            fixed_vec_metadata(cx, unique_type_id, typ, len.map(|x| x as u64), usage_site_span)\n+        }\n+        ty::ty_str => {\n+            fixed_vec_metadata(cx, unique_type_id, cx.tcx().types.i8, None, usage_site_span)\n         }\n-        // FIXME Can we do better than this for unsized vec/str fields?\n-        ty::ty_vec(typ, None) => fixed_vec_metadata(cx, unique_type_id, typ, 0, usage_site_span),\n-        ty::ty_str => fixed_vec_metadata(cx, unique_type_id, cx.tcx().types.i8, 0, usage_site_span),\n         ty::ty_trait(..) => {\n             MetadataCreationResult::new(\n                         trait_pointer_metadata(cx, t, None, unique_type_id),"}]}