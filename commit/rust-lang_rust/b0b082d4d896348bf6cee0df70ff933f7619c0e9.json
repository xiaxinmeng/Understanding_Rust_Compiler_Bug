{"sha": "b0b082d4d896348bf6cee0df70ff933f7619c0e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYjA4MmQ0ZDg5NjM0OGJmNmNlZTBkZjcwZmY5MzNmNzYxOWMwZTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T15:10:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T15:10:04Z"}, "message": "do not handle MIRI_SYSROOT in the driver at all, rely fully on the --sysroot flag", "tree": {"sha": "f37788f900243b2c829d522c8242a1f09ac38369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f37788f900243b2c829d522c8242a1f09ac38369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0b082d4d896348bf6cee0df70ff933f7619c0e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b082d4d896348bf6cee0df70ff933f7619c0e9", "html_url": "https://github.com/rust-lang/rust/commit/b0b082d4d896348bf6cee0df70ff933f7619c0e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0b082d4d896348bf6cee0df70ff933f7619c0e9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244011a47f1f6318d120035c1a3b6eb121bd95f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/244011a47f1f6318d120035c1a3b6eb121bd95f1", "html_url": "https://github.com/rust-lang/rust/commit/244011a47f1f6318d120035c1a3b6eb121bd95f1"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "090694128e3ae047ead08649b0381d86f38bf524", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0b082d4d896348bf6cee0df70ff933f7619c0e9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0b082d4d896348bf6cee0df70ff933f7619c0e9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b0b082d4d896348bf6cee0df70ff933f7619c0e9", "patch": "@@ -250,9 +250,12 @@ Several `-Z` flags are relevant for Miri:\n \n Moreover, Miri recognizes some environment variables:\n \n-* `MIRI_SYSROOT` (recognized by `miri`, `cargo miri` and the test suite)\n-  indicates the sysroot to use.\n-* `MIRI_TARGET` (recognized by the test suite) indicates which target\n+* `MIRI_LOG`, `MIRI_BACKTRACE` control logging and backtrace printing during\n+  Miri executions, also [see above][testing-miri].\n+* `MIRI_SYSROOT` (recognized by `cargo miri` and the test suite)\n+  indicates the sysroot to use.  To do the same thing with `miri`\n+  directly, use the `--sysroot` flag.\n+* `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n "}, {"sha": "bb6441bd97f933d3c0527c0c7368eb42dd15db67", "filename": "miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0b082d4d896348bf6cee0df70ff933f7619c0e9/miri", "raw_url": "https://github.com/rust-lang/rust/raw/b0b082d4d896348bf6cee0df70ff933f7619c0e9/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=b0b082d4d896348bf6cee0df70ff933f7619c0e9", "patch": "@@ -140,7 +140,7 @@ run|run-debug)\n     cargo build $CARGO_BUILD_FLAGS\n     find_sysroot\n     # Then run the actual command.\n-    exec cargo run $CARGO_BUILD_FLAGS \"$@\"\n+    exec cargo run $CARGO_BUILD_FLAGS -- --sysroot \"$MIRI_SYSROOT\" \"$@\"\n     ;;\n *)\n     echo \"Unknown command: $COMMAND\""}, {"sha": "db53ca6ce7c1f9cf6c7262e8d66380304372cb84", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0b082d4d896348bf6cee0df70ff933f7619c0e9/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b082d4d896348bf6cee0df70ff933f7619c0e9/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=b0b082d4d896348bf6cee0df70ff933f7619c0e9", "patch": "@@ -125,7 +125,6 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n fn test_sysroot_consistency() {\n     fn get_sysroot(mut cmd: Command) -> PathBuf {\n         let out = cmd.arg(\"--print\").arg(\"sysroot\")\n-            .env_remove(\"MIRI_SYSROOT\") // We want to test their \"native\" sysroot, not the manually set one\n             .output().expect(\"Failed to run rustc to get sysroot info\");\n         assert!(out.status.success(), \"Bad statuc code when getting sysroot info\");\n         let sysroot = out.stdout.lines().nth(0)\n@@ -298,7 +297,7 @@ path = \"lib.rs\"\n         Some(target) => target == rustc_version::version_meta().unwrap().host,\n     };\n     let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n-    std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n+    std::env::set_var(\"MIRI_SYSROOT\", &sysroot); // pass the env var to the processes we spawn, which will turn it into \"--sysroot\" flags\n     if print_env {\n         println!(\"MIRI_SYSROOT={}\", sysroot.display());\n     } else if !ask_user {\n@@ -425,9 +424,9 @@ fn inside_cargo_rustc() {\n \n     let rustc_args = std::env::args().skip(2); // skip `cargo rustc`\n     let mut args: Vec<String> = rustc_args\n-            .chain(Some(\"--sysroot\".to_owned()))\n-            .chain(Some(sysroot))\n-            .collect();\n+        .chain(Some(\"--sysroot\".to_owned()))\n+        .chain(Some(sysroot))\n+        .collect();\n     args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n \n     // See if we can find the `cargo-miri` markers. Those only get added to the binary we want to\n@@ -458,7 +457,6 @@ fn inside_cargo_rustc() {\n     } else {\n         Command::new(\"rustc\")\n     };\n-    command.env_remove(\"MIRI_SYSROOT\"); // we already set the --sysroot flag\n     command.args(&args);\n     if has_arg_flag(\"-v\") {\n         eprintln!(\"+ {:?}\", command);"}, {"sha": "60f4751db8d24979375c2561ff95a4dec520d168", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b0b082d4d896348bf6cee0df70ff933f7619c0e9/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b082d4d896348bf6cee0df70ff933f7619c0e9/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=b0b082d4d896348bf6cee0df70ff933f7619c0e9", "patch": "@@ -165,12 +165,7 @@ fn main() {\n \n     // Determine sysroot.\n     let sysroot_flag = \"--sysroot\".to_string();\n-    if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n-        // MIRI_SYSROOT takes priority. rustc will ensure for us that this errors if there\n-        // already is a \"--sysroot\" flag (because now there would be two).\n-        rustc_args.push(sysroot_flag);\n-        rustc_args.push(sysroot);\n-    } else if !rustc_args.contains(&sysroot_flag) {\n+    if !rustc_args.contains(&sysroot_flag) {\n         // We need to *always* set a --sysroot, as the \"default\" rustc uses is\n         // somewhere in the directory miri was built in.\n         // If neither MIRI_SYSROOT nor --sysroot are given, fall back to env"}, {"sha": "d59be08c8e00345229ffa5593a79570500e6b166", "filename": "tests/compiletest.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b0b082d4d896348bf6cee0df70ff933f7619c0e9/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b082d4d896348bf6cee0df70ff933f7619c0e9/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=b0b082d4d896348bf6cee0df70ff933f7619c0e9", "patch": "@@ -25,7 +25,15 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n-fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n+fn run_tests(mode: &str, path: &str, target: &str, mut flags: Vec<String>) {\n+    // Some flags we always want.\n+    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n+    flags.push(\"--edition 2018\".to_owned());\n+    if let Ok(sysroot) = std::env::var(\"MIRI_SYSROOT\") {\n+        flags.push(format!(\"--sysroot {}\", sysroot));\n+    }\n+\n+    // The rest of the configuration.\n     let mut config = compiletest::Config::default().tempdir();\n     config.mode = mode.parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n@@ -35,7 +43,10 @@ fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n     }\n     config.filter = env::args().nth(1);\n     config.host = get_host();\n-    config\n+    config.src_base = PathBuf::from(path);\n+    config.target = target.to_owned();\n+    config.target_rustcflags = Some(flags.join(\" \"));\n+    compiletest::run_tests(&config);\n }\n \n fn compile_fail(path: &str, target: &str, opt: bool) {\n@@ -48,20 +59,14 @@ fn compile_fail(path: &str, target: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         // Optimizing too aggressivley makes UB detection harder, but test at least\n         // the default value.\n         // FIXME: Opt level 3 ICEs during stack trace generation.\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     }\n \n-    let mut config = mk_config(\"compile-fail\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config);\n+    run_tests(\"compile-fail\", path, target, flags);\n }\n \n fn miri_pass(path: &str, target: &str, opt: bool) {\n@@ -74,17 +79,11 @@ fn miri_pass(path: &str, target: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n-    flags.push(\"--edition 2018\".to_owned());\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n     }\n \n-    let mut config = mk_config(\"ui\");\n-    config.src_base = PathBuf::from(path);\n-    config.target = target.to_owned();\n-    config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config);\n+    run_tests(\"ui\", path, target, flags);\n }\n \n fn get_host() -> String {"}]}