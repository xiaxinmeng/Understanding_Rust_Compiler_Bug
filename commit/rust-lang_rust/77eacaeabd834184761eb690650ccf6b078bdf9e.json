{"sha": "77eacaeabd834184761eb690650ccf6b078bdf9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWFjYWVhYmQ4MzQxODQ3NjFlYjY5MDY1MGNjZjZiMDc4YmRmOWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-31T23:15:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:59:01Z"}, "message": "compiletest: Unconfigure tests during normal build", "tree": {"sha": "70e9dbfb4671a9ef82e6ac57415bc2c78c0ac3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70e9dbfb4671a9ef82e6ac57415bc2c78c0ac3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77eacaeabd834184761eb690650ccf6b078bdf9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77eacaeabd834184761eb690650ccf6b078bdf9e", "html_url": "https://github.com/rust-lang/rust/commit/77eacaeabd834184761eb690650ccf6b078bdf9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77eacaeabd834184761eb690650ccf6b078bdf9e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b990c6d813a01179527ceaf6479dd946209df45d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b990c6d813a01179527ceaf6479dd946209df45d", "html_url": "https://github.com/rust-lang/rust/commit/b990c6d813a01179527ceaf6479dd946209df45d"}], "stats": {"total": 357, "additions": 183, "deletions": 174}, "files": [{"sha": "076ad87c70fc4e6c72cb74e6d32008320adc5276", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -8,9 +8,11 @@ use log::*;\n \n use crate::common::{self, CompareMode, Config, Mode, PassMode};\n use crate::util;\n-\n use crate::extract_gdb_version;\n \n+#[cfg(test)]\n+mod tests;\n+\n /// Whether to ignore the test.\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Ignore {\n@@ -969,29 +971,3 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     *line = &line[end + 1..];\n     Some(result)\n }\n-\n-#[test]\n-fn test_parse_normalization_string() {\n-    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n-    let first = parse_normalization_string(&mut s);\n-    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n-    assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n-\n-    // Nothing to normalize (No quotes)\n-    let mut s = \"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\";\n-    let first = parse_normalization_string(&mut s);\n-    assert_eq!(first, None);\n-    assert_eq!(s, r#\"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\"#);\n-\n-    // Nothing to normalize (Only a single quote)\n-    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\";\n-    let first = parse_normalization_string(&mut s);\n-    assert_eq!(first, None);\n-    assert_eq!(s, \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\");\n-\n-    // Nothing to normalize (Three quotes)\n-    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits).\";\n-    let first = parse_normalization_string(&mut s);\n-    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n-    assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n-}"}, {"sha": "2a1831d5ee80c940095d55d097f0098f655b622a", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -0,0 +1,27 @@\n+use super::*;\n+\n+#[test]\n+fn test_parse_normalization_string() {\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits)\\\".\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits)\\\".\");\n+\n+    // Nothing to normalize (No quotes)\n+    let mut s = \"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, r#\"normalize-stderr-32bit: something (32 bits) -> something ($WORD bits).\"#);\n+\n+    // Nothing to normalize (Only a single quote)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, None);\n+    assert_eq!(s, \"normalize-stderr-32bit: \\\"something (32 bits) -> something ($WORD bits).\");\n+\n+    // Nothing to normalize (Three quotes)\n+    let mut s = \"normalize-stderr-32bit: \\\"something (32 bits)\\\" -> \\\"something ($WORD bits).\";\n+    let first = parse_normalization_string(&mut s);\n+    assert_eq!(first, Some(\"something (32 bits)\".to_owned()));\n+    assert_eq!(s, \" -> \\\"something ($WORD bits).\");\n+}"}, {"sha": "bde49ff391c8c5a7c01ecc1d49b7f4923672baa9", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -25,6 +25,9 @@ use log::*;\n \n use self::header::{EarlyProps, Ignore};\n \n+#[cfg(test)]\n+mod tests;\n+\n pub mod common;\n pub mod errors;\n pub mod header;\n@@ -1093,53 +1096,3 @@ fn extract_lldb_version(full_version_line: Option<String>) -> (Option<String>, b\n fn is_blacklisted_lldb_version(version: &str) -> bool {\n     version == \"350\"\n }\n-\n-#[test]\n-fn test_extract_gdb_version() {\n-    macro_rules! test { ($($expectation:tt: $input:tt,)*) => {{$(\n-        assert_eq!(extract_gdb_version($input), Some($expectation));\n-    )*}}}\n-\n-    test! {\n-        7000001: \"GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)\",\n-\n-        7002000: \"GNU gdb (GDB) Red Hat Enterprise Linux (7.2-90.el6)\",\n-\n-        7004000: \"GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04\",\n-        7004001: \"GNU gdb (GDB) 7.4.1-debian\",\n-\n-        7006001: \"GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7\",\n-\n-        7007001: \"GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\",\n-        7007001: \"GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1\",\n-        7007001: \"GNU gdb (GDB) Fedora 7.7.1-21.fc20\",\n-\n-        7008000: \"GNU gdb (GDB; openSUSE 13.2) 7.8\",\n-        7009001: \"GNU gdb (GDB) Fedora 7.9.1-20.fc22\",\n-        7010001: \"GNU gdb (GDB) Fedora 7.10.1-31.fc23\",\n-\n-        7011000: \"GNU gdb (Ubuntu 7.11-0ubuntu1) 7.11\",\n-        7011001: \"GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\",\n-        7011001: \"GNU gdb (Debian 7.11.1-2) 7.11.1\",\n-        7011001: \"GNU gdb (GDB) Fedora 7.11.1-86.fc24\",\n-        7011001: \"GNU gdb (GDB; openSUSE Leap 42.1) 7.11.1\",\n-        7011001: \"GNU gdb (GDB; openSUSE Tumbleweed) 7.11.1\",\n-\n-        7011090: \"7.11.90\",\n-        7011090: \"GNU gdb (Ubuntu 7.11.90.20161005-0ubuntu1) 7.11.90.20161005-git\",\n-\n-        7012000: \"7.12\",\n-        7012000: \"GNU gdb (GDB) 7.12\",\n-        7012000: \"GNU gdb (GDB) 7.12.20161027-git\",\n-        7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n-    }\n-}\n-\n-#[test]\n-fn is_test_test() {\n-    assert_eq!(true, is_test(&OsString::from(\"a_test.rs\")));\n-    assert_eq!(false, is_test(&OsString::from(\".a_test.rs\")));\n-    assert_eq!(false, is_test(&OsString::from(\"a_cat.gif\")));\n-    assert_eq!(false, is_test(&OsString::from(\"#a_dog_gif\")));\n-    assert_eq!(false, is_test(&OsString::from(\"~a_temp_file\")));\n-}"}, {"sha": "05cfdf1ce53bff4eaae21743c98019562b2a95e9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 65, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -35,6 +35,9 @@ use log::*;\n use crate::extract_gdb_version;\n use crate::is_android_gdb_target;\n \n+#[cfg(test)]\n+mod tests;\n+\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n@@ -3706,68 +3709,3 @@ fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n         stderr: stderr.into_bytes(),\n     })\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::TestCx;\n-\n-    #[test]\n-    fn normalize_platform_differences() {\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs\"),\n-            \"$DIR/foo.rs\"\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$BUILD_DIR\\..\\parser.rs\"),\n-            \"$BUILD_DIR/../parser.rs\"\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\bar.rs hello\\nworld\"),\n-            r\"$DIR/bar.rs hello\\nworld\"\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"either bar\\baz.rs or bar\\baz\\mod.rs\"),\n-            r\"either bar/baz.rs or bar/baz/mod.rs\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"`.\\some\\path.rs`\"),\n-            r\"`./some/path.rs`\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"`some\\path.rs`\"),\n-            r\"`some/path.rs`\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\path-with-dashes.rs\"),\n-            r\"$DIR/path-with-dashes.rs\"\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\path_with_underscores.rs\"),\n-            r\"$DIR/path_with_underscores.rs\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\foo.rs:12:11\"), \"$DIR/foo.rs:12:11\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\path with spaces 'n' quotes\"),\n-            \"$DIR/path with spaces 'n' quotes\",\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r\"$DIR\\file_with\\no_extension\"),\n-            \"$DIR/file_with/no_extension\",\n-        );\n-\n-        assert_eq!(TestCx::normalize_platform_differences(r\"\\n\"), r\"\\n\");\n-        assert_eq!(TestCx::normalize_platform_differences(r\"{ \\n\"), r\"{ \\n\");\n-        assert_eq!(TestCx::normalize_platform_differences(r\"`\\]`\"), r\"`\\]`\");\n-        assert_eq!(TestCx::normalize_platform_differences(r#\"\"\\{\"\"#), r#\"\"\\{\"\"#);\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r#\"write!(&mut v, \"Hello\\n\")\"#),\n-            r#\"write!(&mut v, \"Hello\\n\")\"#\n-        );\n-        assert_eq!(\n-            TestCx::normalize_platform_differences(r#\"println!(\"test\\ntest\")\"#),\n-            r#\"println!(\"test\\ntest\")\"#,\n-        );\n-    }\n-}"}, {"sha": "79128aa9c696ae5301c9a5452fda1e16354a2757", "filename": "src/tools/compiletest/src/runtest/tests.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Ftests.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -0,0 +1,61 @@\n+use super::*;\n+\n+#[test]\n+fn normalize_platform_differences() {\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\foo.rs\"),\n+        \"$DIR/foo.rs\"\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$BUILD_DIR\\..\\parser.rs\"),\n+        \"$BUILD_DIR/../parser.rs\"\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\bar.rs hello\\nworld\"),\n+        r\"$DIR/bar.rs hello\\nworld\"\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"either bar\\baz.rs or bar\\baz\\mod.rs\"),\n+        r\"either bar/baz.rs or bar/baz/mod.rs\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"`.\\some\\path.rs`\"),\n+        r\"`./some/path.rs`\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"`some\\path.rs`\"),\n+        r\"`some/path.rs`\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\path-with-dashes.rs\"),\n+        r\"$DIR/path-with-dashes.rs\"\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\path_with_underscores.rs\"),\n+        r\"$DIR/path_with_underscores.rs\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\foo.rs:12:11\"), \"$DIR/foo.rs:12:11\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\path with spaces 'n' quotes\"),\n+        \"$DIR/path with spaces 'n' quotes\",\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r\"$DIR\\file_with\\no_extension\"),\n+        \"$DIR/file_with/no_extension\",\n+    );\n+\n+    assert_eq!(TestCx::normalize_platform_differences(r\"\\n\"), r\"\\n\");\n+    assert_eq!(TestCx::normalize_platform_differences(r\"{ \\n\"), r\"{ \\n\");\n+    assert_eq!(TestCx::normalize_platform_differences(r\"`\\]`\"), r\"`\\]`\");\n+    assert_eq!(TestCx::normalize_platform_differences(r#\"\"\\{\"\"#), r#\"\"\\{\"\"#);\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r#\"write!(&mut v, \"Hello\\n\")\"#),\n+        r#\"write!(&mut v, \"Hello\\n\")\"#\n+    );\n+    assert_eq!(\n+        TestCx::normalize_platform_differences(r#\"println!(\"test\\ntest\")\"#),\n+        r#\"println!(\"test\\ntest\")\"#,\n+    );\n+}"}, {"sha": "388ad75757f61bc9d2a3b3866b69418225573fb0", "filename": "src/tools/compiletest/src/tests.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -0,0 +1,51 @@\n+use super::*;\n+\n+#[test]\n+fn test_extract_gdb_version() {\n+    macro_rules! test { ($($expectation:tt: $input:tt,)*) => {{$(\n+        assert_eq!(extract_gdb_version($input), Some($expectation));\n+    )*}}}\n+\n+    test! {\n+        7000001: \"GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)\",\n+\n+        7002000: \"GNU gdb (GDB) Red Hat Enterprise Linux (7.2-90.el6)\",\n+\n+        7004000: \"GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04\",\n+        7004001: \"GNU gdb (GDB) 7.4.1-debian\",\n+\n+        7006001: \"GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7\",\n+\n+        7007001: \"GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\",\n+        7007001: \"GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1\",\n+        7007001: \"GNU gdb (GDB) Fedora 7.7.1-21.fc20\",\n+\n+        7008000: \"GNU gdb (GDB; openSUSE 13.2) 7.8\",\n+        7009001: \"GNU gdb (GDB) Fedora 7.9.1-20.fc22\",\n+        7010001: \"GNU gdb (GDB) Fedora 7.10.1-31.fc23\",\n+\n+        7011000: \"GNU gdb (Ubuntu 7.11-0ubuntu1) 7.11\",\n+        7011001: \"GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\",\n+        7011001: \"GNU gdb (Debian 7.11.1-2) 7.11.1\",\n+        7011001: \"GNU gdb (GDB) Fedora 7.11.1-86.fc24\",\n+        7011001: \"GNU gdb (GDB; openSUSE Leap 42.1) 7.11.1\",\n+        7011001: \"GNU gdb (GDB; openSUSE Tumbleweed) 7.11.1\",\n+\n+        7011090: \"7.11.90\",\n+        7011090: \"GNU gdb (Ubuntu 7.11.90.20161005-0ubuntu1) 7.11.90.20161005-git\",\n+\n+        7012000: \"7.12\",\n+        7012000: \"GNU gdb (GDB) 7.12\",\n+        7012000: \"GNU gdb (GDB) 7.12.20161027-git\",\n+        7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n+    }\n+}\n+\n+#[test]\n+fn is_test_test() {\n+    assert_eq!(true, is_test(&OsString::from(\"a_test.rs\")));\n+    assert_eq!(false, is_test(&OsString::from(\".a_test.rs\")));\n+    assert_eq!(false, is_test(&OsString::from(\"a_cat.gif\")));\n+    assert_eq!(false, is_test(&OsString::from(\"#a_dog_gif\")));\n+    assert_eq!(false, is_test(&OsString::from(\"~a_temp_file\")));\n+}"}, {"sha": "56ebea7c20f368b2b1f7bb26b64904b91abed0c0", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -5,6 +5,9 @@ use crate::common::Config;\n \n use log::*;\n \n+#[cfg(test)]\n+mod tests;\n+\n /// Conversion table from triple OS name to Rust SYSNAME\n const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"android\", \"android\"),\n@@ -157,34 +160,3 @@ impl PathBufExt for PathBuf {\n         }\n     }\n }\n-\n-#[test]\n-#[should_panic(expected = \"Cannot determine Architecture from triple\")]\n-fn test_get_arch_failure() {\n-    get_arch(\"abc\");\n-}\n-\n-#[test]\n-fn test_get_arch() {\n-    assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n-    assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n-    assert_eq!(\"nvptx64\", get_arch(\"nvptx64-nvidia-cuda\"));\n-}\n-\n-#[test]\n-#[should_panic(expected = \"Cannot determine OS from triple\")]\n-fn test_matches_os_failure() {\n-    matches_os(\"abc\", \"abc\");\n-}\n-\n-#[test]\n-fn test_matches_os() {\n-    assert!(matches_os(\"x86_64-unknown-linux-gnu\", \"linux\"));\n-    assert!(matches_os(\"wasm32-unknown-unknown\", \"emscripten\"));\n-    assert!(matches_os(\"wasm32-unknown-unknown\", \"wasm32-bare\"));\n-    assert!(!matches_os(\"wasm32-unknown-unknown\", \"windows\"));\n-    assert!(matches_os(\"thumbv6m0-none-eabi\", \"none\"));\n-    assert!(matches_os(\"riscv32imc-unknown-none-elf\", \"none\"));\n-    assert!(matches_os(\"nvptx64-nvidia-cuda\", \"cuda\"));\n-    assert!(matches_os(\"x86_64-fortanix-unknown-sgx\", \"sgx\"));\n-}"}, {"sha": "55bf659ba28f16428ae5dc6743631368aa57129a", "filename": "src/tools/compiletest/src/util/tests.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil%2Ftests.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -0,0 +1,32 @@\n+use super::*;\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine Architecture from triple\")]\n+fn test_get_arch_failure() {\n+    get_arch(\"abc\");\n+}\n+\n+#[test]\n+fn test_get_arch() {\n+    assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n+    assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n+    assert_eq!(\"nvptx64\", get_arch(\"nvptx64-nvidia-cuda\"));\n+}\n+\n+#[test]\n+#[should_panic(expected = \"Cannot determine OS from triple\")]\n+fn test_matches_os_failure() {\n+    matches_os(\"abc\", \"abc\");\n+}\n+\n+#[test]\n+fn test_matches_os() {\n+    assert!(matches_os(\"x86_64-unknown-linux-gnu\", \"linux\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"emscripten\"));\n+    assert!(matches_os(\"wasm32-unknown-unknown\", \"wasm32-bare\"));\n+    assert!(!matches_os(\"wasm32-unknown-unknown\", \"windows\"));\n+    assert!(matches_os(\"thumbv6m0-none-eabi\", \"none\"));\n+    assert!(matches_os(\"riscv32imc-unknown-none-elf\", \"none\"));\n+    assert!(matches_os(\"nvptx64-nvidia-cuda\", \"cuda\"));\n+    assert!(matches_os(\"x86_64-fortanix-unknown-sgx\", \"sgx\"));\n+}"}, {"sha": "8ae2b2cfc706a797d4dc56d57cb4ef1ccfcbd62a", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77eacaeabd834184761eb690650ccf6b078bdf9e/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=77eacaeabd834184761eb690650ccf6b078bdf9e", "patch": "@@ -40,7 +40,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         \"libsyntax_pos\",\n         \"libterm/terminfo\",\n         \"libtest\",\n-        \"tools/compiletest/src\",\n     ];\n \n     let mut skip = |path: &Path| {"}]}