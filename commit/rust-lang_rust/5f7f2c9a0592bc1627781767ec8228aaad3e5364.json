{"sha": "5f7f2c9a0592bc1627781767ec8228aaad3e5364", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmN2YyYzlhMDU5MmJjMTYyNzc4MTc2N2VjODIyOGFhYWQzZTUzNjQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T14:50:17Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:15Z"}, "message": "remove ty_closure", "tree": {"sha": "4dfbfca8ccdffeadb1c4013e36c16c1740a3ee0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfbfca8ccdffeadb1c4013e36c16c1740a3ee0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7f2c9a0592bc1627781767ec8228aaad3e5364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7f2c9a0592bc1627781767ec8228aaad3e5364", "html_url": "https://github.com/rust-lang/rust/commit/5f7f2c9a0592bc1627781767ec8228aaad3e5364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7f2c9a0592bc1627781767ec8228aaad3e5364/comments", "author": null, "committer": null, "parents": [{"sha": "18e2026ff8ae67cf8dea61c938d87f1f45734751", "url": "https://api.github.com/repos/rust-lang/rust/commits/18e2026ff8ae67cf8dea61c938d87f1f45734751", "html_url": "https://github.com/rust-lang/rust/commit/18e2026ff8ae67cf8dea61c938d87f1f45734751"}], "stats": {"total": 420, "additions": 11, "deletions": 409}, "files": [{"sha": "6666a21c31feebb5e874e4ec3d5d84651ce97aa5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -494,11 +494,7 @@ impl BoxPointers {\n         let mut n_uniq = 0i;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match t.sty {\n-                ty::ty_uniq(_) |\n-                ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::UniqTraitStore,\n-                    ..\n-                }) => {\n+                ty::ty_uniq(_) => {\n                     n_uniq += 1;\n                 }\n "}, {"sha": "0042209aced6ad4e17d1392c72e374e9d35f8f34", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -119,10 +119,6 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_str => {\n             mywrite!(w, \"v\");\n         }\n-        ty::ty_closure(ref f) => {\n-            mywrite!(w, \"f\");\n-            enc_closure_ty(w, cx, &**f);\n-        }\n         ty::ty_bare_fn(Some(def_id), f) => {\n             mywrite!(w, \"F\");\n             mywrite!(w, \"{}|\", (cx.ds)(def_id));"}, {"sha": "f7eea6e5cb7c9cc45da7be1b13ae6c291afd87a2", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -33,7 +33,6 @@ enum UnsafeContext {\n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n         ty::ty_bare_fn(_, ref f) => f.unsafety == ast::Unsafety::Unsafe,\n-        ty::ty_closure(ref f) => f.unsafety == ast::Unsafety::Unsafe,\n         _ => false,\n     }\n }"}, {"sha": "ed5e8e31b7bb59ec6c3e934c3ee2e665bb2f4ca2", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -656,19 +656,6 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             ty::ty_bare_fn(..) => {\n                 self.consume_expr(callee);\n             }\n-            ty::ty_closure(ref f) => {\n-                match f.onceness {\n-                    ast::Many => {\n-                        self.borrow_expr(callee,\n-                                         ty::ReScope(call_scope),\n-                                         ty::UniqueImmBorrow,\n-                                         ClosureInvocation);\n-                    }\n-                    ast::Once => {\n-                        self.consume_expr(callee);\n-                    }\n-                }\n-            }\n             ty::ty_err => { }\n             _ => {\n                 let overloaded_call_type ="}, {"sha": "42bc70b5b561fd12b57db8ffd50ea559f078fd16", "filename": "src/librustc/middle/fast_reject.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffast_reject.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -80,9 +80,6 @@ pub fn simplify_type(tcx: &ty::ctxt,\n         ty::ty_tup(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n-        ty::ty_closure(ref f) => {\n-            Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n-        }\n         ty::ty_bare_fn(_, ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }"}, {"sha": "12f34a9ae54e658d90f5f3e7e1ab7e53e2fe185c", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -160,15 +160,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 };\n             }\n \n-            ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::RegionTraitStore(..),\n-                    ..\n-                }) => {\n-                return self.unpack_actual_value(a, |a| {\n-                    self.coerce_borrowed_fn(a, b)\n-                });\n-            }\n-\n             _ => {}\n         }\n \n@@ -511,21 +502,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                    a.repr(self.tcx()), b.repr(self.tcx()));\n \n             match b.sty {\n-                ty::ty_closure(ref f) => {\n-                    if fn_ty_a.abi != abi::Rust || fn_ty_a.unsafety != ast::Unsafety::Normal {\n-                        return self.subtype(a, b);\n-                    }\n-\n-                    let fn_ty_b = (*f).clone();\n-                    let adj = ty::AdjustAddEnv(fn_def_id_a, fn_ty_b.store);\n-                    let a_closure = ty::mk_closure(self.tcx(),\n-                                                   ty::ClosureTy {\n-                                                       sig: fn_ty_a.sig.clone(),\n-                                                       .. *fn_ty_b\n-                                                   });\n-                    try!(self.subtype(a_closure, b));\n-                    Ok(Some(adj))\n-                }\n                 ty::ty_bare_fn(None, _) => {\n                     let a_fn_pointer = ty::mk_bare_fn(self.tcx(), None, fn_ty_a);\n                     try!(self.subtype(a_fn_pointer, b));"}, {"sha": "dd711fcbf022eed6d76a7d49e45db83b026d6795", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -644,12 +644,6 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n             Ok(ty::mk_bare_fn(tcx, a_opt_def_id, tcx.mk_bare_fn(fty)))\n         }\n \n-      (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n-        this.closure_tys(&**a_fty, &**b_fty).and_then(|fty| {\n-            Ok(ty::mk_closure(tcx, fty))\n-        })\n-      }\n-\n       (&ty::ty_projection(ref a_data), &ty::ty_projection(ref b_data)) => {\n           let projection_ty = try!(this.projection_tys(a_data, b_data));\n           Ok(ty::mk_projection(tcx, projection_ty.trait_ref, projection_ty.item_name))"}, {"sha": "608ae31475327e4b3430336fef69183f1e1b1583", "filename": "src/librustc/middle/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ffreshen.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -152,7 +152,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             ty::ty_ptr(..) |\n             ty::ty_rptr(..) |\n             ty::ty_bare_fn(..) |\n-            ty::ty_closure(..) |\n             ty::ty_trait(..) |\n             ty::ty_struct(..) |\n             ty::ty_unboxed_closure(..) |"}, {"sha": "f5ab4e80945ad9b65743268ecb77033a4d47248c", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -197,8 +197,7 @@ pub enum deref_kind {\n // pointer adjustment).\n pub fn deref_kind(t: Ty) -> McResult<deref_kind> {\n     match t.sty {\n-        ty::ty_uniq(_) |\n-        ty::ty_closure(box ty::ClosureTy {store: ty::UniqTraitStore, ..}) => {\n+        ty::ty_uniq(_) => {\n             Ok(deref_ptr(Unique))\n         }\n \n@@ -207,13 +206,6 @@ pub fn deref_kind(t: Ty) -> McResult<deref_kind> {\n             Ok(deref_ptr(BorrowedPtr(kind, *r)))\n         }\n \n-        ty::ty_closure(box ty::ClosureTy {\n-                store: ty::RegionTraitStore(r, _),\n-                ..\n-            }) => {\n-            Ok(deref_ptr(BorrowedPtr(ty::ImmBorrow, r)))\n-        }\n-\n         ty::ty_ptr(ref mt) => {\n             Ok(deref_ptr(UnsafePtr(mt.mutbl)))\n         }\n@@ -592,25 +584,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           def::DefUpvar(var_id, fn_node_id, _) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n-                  ty::ty_closure(ref closure_ty) => {\n-                      // Translate old closure type info into unboxed\n-                      // closure kind/capture mode\n-                      let (mode, kind) = match (closure_ty.store, closure_ty.onceness) {\n-                          // stack closure\n-                          (ty::RegionTraitStore(..), ast::Many) => {\n-                              (ast::CaptureByRef, ty::FnMutUnboxedClosureKind)\n-                          }\n-                          // proc or once closure\n-                          (_, ast::Once) => {\n-                              (ast::CaptureByValue, ty::FnOnceUnboxedClosureKind)\n-                          }\n-                          // There should be no such old closure type\n-                          (ty::UniqTraitStore, ast::Many) => {\n-                              self.tcx().sess.span_bug(span, \"Impossible closure type\");\n-                          }\n-                      };\n-                      self.cat_upvar(id, span, var_id, fn_node_id, kind, mode, false)\n-                  }\n                   ty::ty_unboxed_closure(closure_id, _, _) => {\n                       let kind = self.typer.unboxed_closure_kind(closure_id);\n                       let mode = self.typer.capture_mode(fn_node_id);"}, {"sha": "55abe895183f1ba69b195846fca35bea20f51850", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -118,7 +118,6 @@ fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::ty_float(..) |\n         ty::ty_str(..) |\n         ty::ty_bare_fn(..) |\n-        ty::ty_closure(..) |\n         ty::ty_vec(..) |\n         ty::ty_ptr(..) |\n         ty::ty_rptr(..) |"}, {"sha": "2393b7d733d0000ae9c1e001a801eaf0fc67f1fb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -1273,62 +1273,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_closure(ref c) => {\n-                match c.store {\n-                    ty::UniqTraitStore => {\n-                        // proc: Equivalent to `Box<FnOnce>`\n-                        match bound {\n-                            ty::BoundCopy => {\n-                                Err(Unimplemented)\n-                            }\n-\n-                            ty::BoundSized => {\n-                                Ok(If(Vec::new()))\n-                            }\n-\n-                            ty::BoundSync |\n-                            ty::BoundSend => {\n-                                if c.bounds.builtin_bounds.contains(&bound) {\n-                                    Ok(If(Vec::new()))\n-                                } else {\n-                                    Err(Unimplemented)\n-                                }\n-                            }\n-                        }\n-                    }\n-                    ty::RegionTraitStore(_, mutbl) => {\n-                        // ||: Equivalent to `&FnMut` or `&mut FnMut` or something like that.\n-                        match bound {\n-                            ty::BoundCopy => {\n-                                match mutbl {\n-                                    ast::MutMutable => {\n-                                        // &mut T is affine\n-                                        Err(Unimplemented)\n-                                    }\n-                                    ast::MutImmutable => {\n-                                        // &T is copyable, no matter what T is\n-                                        Ok(If(Vec::new()))\n-                                    }\n-                                }\n-                            }\n-\n-                            ty::BoundSized => {\n-                                Ok(If(Vec::new()))\n-                            }\n-\n-                            ty::BoundSync |\n-                            ty::BoundSend => {\n-                                if c.bounds.builtin_bounds.contains(&bound) {\n-                                    Ok(If(Vec::new()))\n-                                } else {\n-                                    Err(Unimplemented)\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n             ty::ty_trait(ref data) => {\n                 match bound {\n                     ty::BoundSized => {"}, {"sha": "31916848f5dc8b0a631e87631972e2d161d6b6a1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -916,7 +916,7 @@ impl<'tcx> ctxt<'tcx> {\n     pub fn print_debug_stats(&self) {\n         sty_debug_print!(\n             self,\n-            ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_closure, ty_trait,\n+            ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_trait,\n             ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer, ty_projection);\n \n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n@@ -1353,7 +1353,6 @@ pub enum sty<'tcx> {\n     // fn item. Otherwise, if None(_), it a fn pointer type.\n     ty_bare_fn(Option<DefId>, &'tcx BareFnTy<'tcx>),\n \n-    ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n     ty_struct(DefId, &'tcx Substs<'tcx>),\n \n@@ -2594,14 +2593,6 @@ impl FlagComputation {\n             &ty_bare_fn(_, ref f) => {\n                 self.add_fn_sig(&f.sig);\n             }\n-\n-            &ty_closure(ref f) => {\n-                if let RegionTraitStore(r, _) = f.store {\n-                    self.add_region(r);\n-                }\n-                self.add_fn_sig(&f.sig);\n-                self.add_bounds(&f.bounds);\n-            }\n         }\n     }\n \n@@ -2749,7 +2740,7 @@ pub fn mk_nil<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> {\n }\n \n pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, fty: ClosureTy<'tcx>) -> Ty<'tcx> {\n-    mk_t(cx, ty_closure(box fty))\n+    panic!(\"stub\");\n }\n \n pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,\n@@ -3028,7 +3019,7 @@ pub fn type_is_vec(ty: Ty) -> bool {\n \n pub fn type_is_structural(ty: Ty) -> bool {\n     match ty.sty {\n-      ty_struct(..) | ty_tup(_) | ty_enum(..) | ty_closure(_) |\n+      ty_struct(..) | ty_tup(_) | ty_enum(..) |\n       ty_vec(_, Some(_)) | ty_unboxed_closure(..) => true,\n       _ => type_is_slice(ty) | type_is_trait(ty)\n     }\n@@ -3345,10 +3336,6 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                 TC::None\n             }\n \n-            ty_closure(ref c) => {\n-                closure_contents(&**c) | TC::ReachesFfiUnsafe\n-            }\n-\n             ty_uniq(typ) => {\n                 TC::ReachesFfiUnsafe | match typ.sty {\n                     ty_str => TC::OwnsOwned,\n@@ -3649,7 +3636,6 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             ty_float(_) |\n             ty_str |\n             ty_bare_fn(..) |\n-            ty_closure(_) |\n             ty_param(_) |\n             ty_projection(_) |\n             ty_vec(_, None) => {\n@@ -4153,7 +4139,6 @@ pub fn node_id_item_substs<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> ItemSubsts\n pub fn fn_is_variadic(fty: Ty) -> bool {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.sig.0.variadic,\n-        ty_closure(ref f) => f.sig.0.variadic,\n         ref s => {\n             panic!(\"fn_is_variadic() called on non-fn type: {}\", s)\n         }\n@@ -4163,7 +4148,6 @@ pub fn fn_is_variadic(fty: Ty) -> bool {\n pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => &f.sig,\n-        ty_closure(ref f) => &f.sig,\n         ref s => {\n             panic!(\"ty_fn_sig() called on non-fn type: {}\", s)\n         }\n@@ -4174,7 +4158,6 @@ pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> {\n pub fn ty_fn_abi(fty: Ty) -> abi::Abi {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.abi,\n-        ty_closure(ref f) => f.abi,\n         _ => panic!(\"ty_fn_abi() called on non-fn type\"),\n     }\n }\n@@ -4186,7 +4169,6 @@ pub fn ty_fn_args<'tcx>(fty: Ty<'tcx>) -> &'tcx [Ty<'tcx>] {\n \n pub fn ty_closure_store(fty: Ty) -> TraitStore {\n     match fty.sty {\n-        ty_closure(ref f) => f.store,\n         ty_unboxed_closure(..) => {\n             // Close enough for the purposes of all the callers of this\n             // function (which is soon to be deprecated anyhow).\n@@ -4201,7 +4183,6 @@ pub fn ty_closure_store(fty: Ty) -> TraitStore {\n pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n     match fty.sty {\n         ty_bare_fn(_, ref f) => f.sig.0.output,\n-        ty_closure(ref f) => f.sig.0.output,\n         ref s => {\n             panic!(\"ty_fn_ret() called on non-fn type: {}\", s)\n         }\n@@ -4211,7 +4192,6 @@ pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> FnOutput<'tcx> {\n pub fn is_fn_ty(fty: Ty) -> bool {\n     match fty.sty {\n         ty_bare_fn(..) => true,\n-        ty_closure(_) => true,\n         _ => false\n     }\n }\n@@ -4731,7 +4711,6 @@ pub fn ty_sort_string<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> String {\n         ty_rptr(_, _) => \"&-ptr\".to_string(),\n         ty_bare_fn(Some(_), _) => format!(\"fn item\"),\n         ty_bare_fn(None, _) => \"fn pointer\".to_string(),\n-        ty_closure(_) => \"fn\".to_string(),\n         ty_trait(ref inner) => {\n             format!(\"trait {}\", item_path_str(cx, inner.principal_def_id()))\n         }\n@@ -6326,24 +6305,6 @@ pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -\n                     fn_sig(state, &b.sig);\n                     return false;\n                 }\n-                ty_closure(ref c) => {\n-                    byte!(15);\n-                    hash!(c.unsafety);\n-                    hash!(c.onceness);\n-                    hash!(c.bounds);\n-                    match c.store {\n-                        UniqTraitStore => byte!(0),\n-                        RegionTraitStore(r, m) => {\n-                            byte!(1);\n-                            region(state, r);\n-                            assert_eq!(m, ast::MutMutable);\n-                        }\n-                    }\n-\n-                    fn_sig(state, &c.sig);\n-\n-                    return false;\n-                }\n                 ty_trait(ref data) => {\n                     byte!(17);\n                     did(state, data.principal_def_id());\n@@ -6666,12 +6627,6 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_struct(_, substs) => {\n                 accum_substs(accumulator, substs);\n             }\n-            ty_closure(ref closure_ty) => {\n-                match closure_ty.store {\n-                    RegionTraitStore(region, _) => accumulator.push(region),\n-                    UniqTraitStore => {}\n-                }\n-            }\n             ty_unboxed_closure(_, region, substs) => {\n                 accumulator.push(*region);\n                 accum_substs(accumulator, substs);"}, {"sha": "1bc0d70945899eacea45d77c05ff91fc5103546c", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -604,9 +604,6 @@ pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n             let bfn = f.fold_with(this);\n             ty::ty_bare_fn(opt_def_id, this.tcx().mk_bare_fn(bfn))\n         }\n-        ty::ty_closure(ref f) => {\n-            ty::ty_closure(f.fold_with(this))\n-        }\n         ty::ty_rptr(r, ref tm) => {\n             let r = r.fold_with(this);\n             ty::ty_rptr(this.tcx().mk_region(r), tm.fold_with(this))"}, {"sha": "4953e9a2ce1d16eee8b4003fdd388945c84078fa", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -51,9 +51,6 @@ impl<'tcx> TypeWalker<'tcx> {\n             ty::ty_bare_fn(_, ref ft) => {\n                 self.push_sig_subtypes(&ft.sig);\n             }\n-            ty::ty_closure(ref ft) => {\n-                self.push_sig_subtypes(&ft.sig);\n-            }\n         }\n     }\n "}, {"sha": "e6ee16d1789c00fbd401f20ab5fd472b52e34e5c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -18,7 +18,7 @@ use middle::ty::{ReFree, ReScope, ReInfer, ReStatic, Region, ReEmpty};\n use middle::ty::{ReSkolemized, ReVar, BrEnv};\n use middle::ty::{mt, Ty, ParamTy};\n use middle::ty::{ty_bool, ty_char, ty_struct, ty_enum};\n-use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn, ty_closure};\n+use middle::ty::{ty_err, ty_str, ty_vec, ty_float, ty_bare_fn};\n use middle::ty::{ty_param, ty_ptr, ty_rptr, ty_tup, ty_open};\n use middle::ty::{ty_unboxed_closure};\n use middle::ty::{ty_uniq, ty_trait, ty_int, ty_uint, ty_infer};\n@@ -417,9 +417,6 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n                 strs => format!(\"({})\", strs.connect(\", \"))\n             }\n         }\n-        ty_closure(ref f) => {\n-            closure_to_string(cx, &**f)\n-        }\n         ty_bare_fn(opt_def_id, ref f) => {\n             bare_fn_to_string(cx, opt_def_id, f.unsafety, f.abi, None, &f.sig)\n         }"}, {"sha": "e1f0c9ec26677abef3eb817672c78b396bfc8686", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -662,13 +662,6 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                     default_msgs: (&'static str, &'static str))\n                                     -> (&'static str, &'static str) {\n             match ty.sty {\n-                ty::ty_closure(box ty::ClosureTy {\n-                    store: ty::RegionTraitStore(..),\n-                    ..\n-                }) => {\n-                    (\"a non-copyable stack closure\",\n-                     \"capture it in a new closure, e.g. `|x| f(x)`, to override\")\n-                }\n                 _ => {\n                     if ty::type_moves_by_default(param_env, span, ty) {\n                         (\"non-copyable\","}, {"sha": "01b47b728b6ba7410f71e9723ae463c3024579d6", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -355,12 +355,6 @@ fn find_discr_field_candidate<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // Functions are just pointers\n         ty::ty_bare_fn(..) => Some(path),\n \n-        // Closures are a pair of pointers: the code and environment\n-        ty::ty_closure(..) => {\n-            path.push(FAT_PTR_ADDR);\n-            Some(path)\n-        },\n-\n         // Is this the NonZero lang item wrapping a pointer or integer type?\n         ty::ty_struct(did, substs) if Some(did) == tcx.lang_items.non_zero() => {\n             let nonzero_fields = ty::lookup_struct_fields(tcx, did);"}, {"sha": "56c1e2ddba0b58f2b9350c411ac15aabab22ae40", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -287,9 +287,6 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::ty_bare_fn(_, ref f) => {\n             (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, None)\n         }\n-        ty::ty_closure(ref f) => {\n-            (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, Some(Type::i8p(ccx)))\n-        }\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());\n             let function_type = typer.unboxed_closure_type(closure_did, substs);\n@@ -952,9 +949,6 @@ pub fn trans_external_path<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::ty_closure(_) => {\n-            get_extern_rust_fn(ccx, t, name[], did)\n-        }\n         _ => {\n             get_extern_const(ccx, did, t)\n         }\n@@ -2438,7 +2432,6 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n     use middle::ty::{BrAnon, ReLateBound};\n \n     let (fn_sig, abi, has_env) = match fn_ty.sty {\n-        ty::ty_closure(ref f) => (f.sig.clone(), f.abi, true),\n         ty::ty_bare_fn(_, ref f) => (f.sig.clone(), f.abi, false),\n         ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let typer = common::NormalizingUnboxedClosureTyper::new(ccx.tcx());"}, {"sha": "8048d0218df2d5d375328464514a556b85034b5f", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -111,14 +111,6 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n                     data: Fn(llval),\n                 };\n             }\n-            ty::ty_closure(..) => {\n-                let datum = unpack_datum!(\n-                    bcx, datum.to_lvalue_datum(bcx, \"callee\", expr.id));\n-                return Callee {\n-                    bcx: bcx,\n-                    data: Closure(datum),\n-                };\n-            }\n             _ => {\n                 bcx.tcx().sess.span_bug(\n                     expr.span,\n@@ -679,7 +671,6 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     let (abi, ret_ty) = match callee_ty.sty {\n         ty::ty_bare_fn(_, ref f) => (f.abi, f.sig.0.output),\n-        ty::ty_closure(ref f) => (f.abi, f.sig.0.output),\n         _ => panic!(\"expected bare rust fn or closure in trans_call_inner\")\n     };\n "}, {"sha": "cb0d2f3edd4d69f6afa49028b984894739335d02", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -599,7 +599,6 @@ pub fn get_wrapper_for_bare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     debug!(\"get_wrapper_for_bare_fn(closure_ty={})\", closure_ty.repr(tcx));\n \n     let f = match closure_ty.sty {\n-        ty::ty_closure(ref f) => f,\n         _ => {\n             ccx.sess().bug(format!(\"get_wrapper_for_bare_fn: \\\n                                     expected a closure ty, got {}\","}, {"sha": "84ae088f5beae449280971476cf4ec4225dd2ab2", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -465,11 +465,6 @@ impl<'tcx> TypeMap<'tcx> {\n                     }\n                 }\n             },\n-            ty::ty_closure(box ref closure_ty) => {\n-                self.get_unique_type_id_of_closure_type(cx,\n-                                                        closure_ty.clone(),\n-                                                        &mut unique_type_id);\n-            },\n             ty::ty_unboxed_closure(def_id, _, substs) => {\n                 let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n                 let closure_ty = typer.unboxed_closure_type(def_id, substs);\n@@ -3017,9 +3012,6 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_bare_fn(_, ref barefnty) => {\n             subroutine_type_metadata(cx, unique_type_id, &barefnty.sig, usage_site_span)\n         }\n-        ty::ty_closure(ref closurety) => {\n-            subroutine_type_metadata(cx, unique_type_id, &closurety.sig, usage_site_span)\n-        }\n         ty::ty_unboxed_closure(def_id, _, substs) => {\n             let typer = NormalizingUnboxedClosureTyper::new(cx.tcx());\n             let sig = typer.unboxed_closure_type(def_id, substs).sig;\n@@ -3870,66 +3862,6 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         },\n-        ty::ty_closure(box ty::ClosureTy { unsafety,\n-                                           onceness,\n-                                           store,\n-                                           ref sig,\n-                                           .. // omitting bounds ...\n-                                           }) => {\n-            if unsafety == ast::Unsafety::Unsafe {\n-                output.push_str(\"unsafe \");\n-            }\n-\n-            if onceness == ast::Once {\n-                output.push_str(\"once \");\n-            }\n-\n-            let param_list_closing_char;\n-            match store {\n-                ty::UniqTraitStore => {\n-                    output.push_str(\"proc(\");\n-                    param_list_closing_char = ')';\n-                }\n-                ty::RegionTraitStore(_, ast::MutMutable) => {\n-                    output.push_str(\"&mut|\");\n-                    param_list_closing_char = '|';\n-                }\n-                ty::RegionTraitStore(_, ast::MutImmutable) => {\n-                    output.push_str(\"&|\");\n-                    param_list_closing_char = '|';\n-                }\n-            };\n-\n-            if sig.0.inputs.len() > 0 {\n-                for &parameter_type in sig.0.inputs.iter() {\n-                    push_debuginfo_type_name(cx, parameter_type, true, output);\n-                    output.push_str(\", \");\n-                }\n-                output.pop();\n-                output.pop();\n-            }\n-\n-            if sig.0.variadic {\n-                if sig.0.inputs.len() > 0 {\n-                    output.push_str(\", ...\");\n-                } else {\n-                    output.push_str(\"...\");\n-                }\n-            }\n-\n-            output.push(param_list_closing_char);\n-\n-            match sig.0.output {\n-                ty::FnConverging(result_type) if ty::type_is_nil(result_type) => {}\n-                ty::FnConverging(result_type) => {\n-                    output.push_str(\" -> \");\n-                    push_debuginfo_type_name(cx, result_type, true, output);\n-                }\n-                ty::FnDiverging => {\n-                    output.push_str(\" -> !\");\n-                }\n-            }\n-        },\n         ty::ty_unboxed_closure(..) => {\n             output.push_str(\"closure\");\n         }"}, {"sha": "491c6a83ca9bf39fb4296f907fdb4838fac8ead0", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -441,18 +441,6 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                                                          v0,\n                                                          t,\n                                                          |bb, vv, tt| drop_ty(bb, vv, tt, None)),\n-        ty::ty_closure(ref f) if f.store == ty::UniqTraitStore => {\n-            let box_cell_v = GEPi(bcx, v0, &[0u, abi::FAT_PTR_EXTRA]);\n-            let env = Load(bcx, box_cell_v);\n-            let env_ptr_ty = Type::at_box(bcx.ccx(), Type::i8(bcx.ccx())).ptr_to();\n-            let env = PointerCast(bcx, env, env_ptr_ty);\n-            with_cond(bcx, IsNotNull(bcx, env), |bcx| {\n-                let dtor_ptr = GEPi(bcx, env, &[0u, abi::BOX_FIELD_DROP_GLUE]);\n-                let dtor = Load(bcx, dtor_ptr);\n-                Call(bcx, dtor, &[PointerCast(bcx, box_cell_v, Type::i8p(bcx.ccx()))], None);\n-                bcx\n-            })\n-        }\n         ty::ty_trait(..) => {\n             // No need to do a null check here (as opposed to the Box<trait case\n             // above), because this happens for a trait field in an unsized"}, {"sha": "3e499ea8498fbad9355e18cf6204370fb9db8573", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -143,13 +143,6 @@ pub fn type_of_rust_fn<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n // Given a function type and a count of ty params, construct an llvm type\n pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>) -> Type {\n     match fty.sty {\n-        ty::ty_closure(ref f) => {\n-            type_of_rust_fn(cx,\n-                            Some(Type::i8p(cx)),\n-                            f.sig.0.inputs.as_slice(),\n-                            f.sig.0.output,\n-                            f.abi)\n-        }\n         ty::ty_bare_fn(_, ref f) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n@@ -207,7 +200,6 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         }\n \n         ty::ty_bare_fn(..) => Type::i8p(cx),\n-        ty::ty_closure(..) => Type::struct_(cx, &[Type::i8p(cx), Type::i8p(cx)], false),\n \n         ty::ty_vec(ty, Some(size)) => {\n             let llty = sizing_type_of(cx, ty);\n@@ -369,10 +361,6 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n       ty::ty_bare_fn(..) => {\n           type_of_fn_from_ty(cx, t).ptr_to()\n       }\n-      ty::ty_closure(_) => {\n-          let fn_ty = type_of_fn_from_ty(cx, t).ptr_to();\n-          Type::struct_(cx, &[fn_ty, Type::i8p(cx)], false)\n-      }\n       ty::ty_tup(ref tys) if tys.is_empty() => Type::nil(cx),\n       ty::ty_tup(..) => {\n           let repr = adt::represent_type(cx, t);"}, {"sha": "98a826355a73ac8e78719c637f9853b7e9674703", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -111,7 +111,7 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n {\n     // If the callee is a bare function or a closure, then we're all set.\n     match structurally_resolved_type(fcx, callee_expr.span, adjusted_ty).sty {\n-        ty::ty_bare_fn(..) | ty::ty_closure(_) => {\n+        ty::ty_bare_fn(..) => {\n             fcx.write_adjustment(callee_expr.id,\n                                  callee_expr.span,\n                                  ty::AdjustDerefRef(autoderefref));\n@@ -158,8 +158,7 @@ fn confirm_builtin_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let error_fn_sig;\n \n     let fn_sig = match callee_ty.sty {\n-        ty::ty_bare_fn(_, &ty::BareFnTy {ref sig, ..}) |\n-        ty::ty_closure(box ty::ClosureTy {ref sig, ..}) => {\n+        ty::ty_bare_fn(_, &ty::BareFnTy {ref sig, ..}) => {\n             sig\n         }\n         _ => {"}, {"sha": "1368b3325a57f50b38909f7f8839d184706dd3c6", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -268,7 +268,6 @@ fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     // fresh bound regions for any bound regions we find in the\n     // expected types so as to avoid capture.\n     let expected_cenv = expected.map_to_option(fcx, |ty| match ty.sty {\n-        ty::ty_closure(ref cenv) => Some(cenv),\n         _ => None\n     });\n     let (expected_sig, expected_onceness, expected_bounds) = match expected_cenv {"}, {"sha": "adea5084aab2b54383b13b08b62248110f3e46ab", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -462,7 +462,6 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                                     method_callee: &MethodCallee) {\n         let sig = match method_callee.ty.sty {\n             ty::ty_bare_fn(_, ref f) => f.sig.clone(),\n-            ty::ty_closure(ref f) => f.sig.clone(),\n             _ => return,\n         };\n "}, {"sha": "2adbd1f0a3f7f5dd92e17c489c7b789ac5dbd692", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -735,29 +735,6 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     let function_type = rcx.resolve_node_type(expr.id);\n \n     match function_type.sty {\n-        ty::ty_closure(box ty::ClosureTy{store: ty::RegionTraitStore(..),\n-                                         ref bounds,\n-                                         ..}) => {\n-            // For closure, ensure that the variables outlive region\n-            // bound, since they are captured by reference.\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                if freevars.is_empty() {\n-                    // No free variables means that the environment\n-                    // will be NULL at runtime and hence the closure\n-                    // has static lifetime.\n-                } else {\n-                    // Variables being referenced must outlive closure.\n-                    constrain_free_variables_in_by_ref_closure(\n-                        rcx, bounds.region_bound, expr, freevars);\n-\n-                    // Closure is stack allocated and hence cannot\n-                    // outlive the appropriate temporary scope.\n-                    let s = rcx.repeating_scope;\n-                    rcx.fcx.mk_subr(infer::InfStackClosure(expr.span),\n-                                    bounds.region_bound, ty::ReScope(CodeExtent::from_node_id(s)));\n-                }\n-            });\n-        }\n         ty::ty_unboxed_closure(_, region, _) => {\n             if tcx.capture_modes.borrow()[expr.id].clone() == ast::CaptureByRef {\n                 ty::with_freevars(tcx, expr.id, |freevars| {\n@@ -778,11 +755,6 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n     rcx.set_repeating_scope(repeating_scope);\n \n     match function_type.sty {\n-        ty::ty_closure(box ty::ClosureTy {ref bounds, ..}) => {\n-            ty::with_freevars(tcx, expr.id, |freevars| {\n-                ensure_free_variable_types_outlive_closure_bound(rcx, bounds, expr, freevars);\n-            })\n-        }\n         ty::ty_unboxed_closure(_, region, _) => {\n             ty::with_freevars(tcx, expr.id, |freevars| {\n                 let bounds = ty::region_existential_bound(*region);\n@@ -891,26 +863,6 @@ fn constrain_callee(rcx: &mut Rcx,\n     let callee_ty = rcx.resolve_node_type(callee_id);\n     match callee_ty.sty {\n         ty::ty_bare_fn(..) => { }\n-        ty::ty_closure(ref closure_ty) => {\n-            let region = match closure_ty.store {\n-                ty::RegionTraitStore(r, _) => {\n-                    // While we're here, link the closure's region with a unique\n-                    // immutable borrow (gathered later in borrowck)\n-                    let mc = mc::MemCategorizationContext::new(rcx.fcx);\n-                    let expr_cmt = ignore_err!(mc.cat_expr(callee_expr));\n-                    link_region(rcx, callee_expr.span, call_region,\n-                                ty::UniqueImmBorrow, expr_cmt);\n-                    r\n-                }\n-                ty::UniqTraitStore => ty::ReStatic\n-            };\n-            rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n-                            call_region, region);\n-\n-            let region = closure_ty.bounds.region_bound;\n-            rcx.fcx.mk_subr(infer::InvokeClosure(callee_expr.span),\n-                            call_region, region);\n-        }\n         _ => {\n             // this should not happen, but it does if the program is\n             // erroneous"}, {"sha": "e73fa195b04484b6c49ba4ce4ba89e8e9a3115a2", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -67,10 +67,6 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n                 // No borrowed content reachable here.\n             }\n \n-            ty::ty_closure(box ref c) => {\n-                self.accumulate_from_closure_ty(ty, c);\n-            }\n-\n             ty::ty_unboxed_closure(_, region, _) => {\n                 // An \"unboxed closure type\" is basically\n                 // modeled here as equivalent to a struct like"}, {"sha": "92fda96595c7bab805f73eee53d20fe823e70cad", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -122,7 +122,6 @@ impl<'a,'tcx> SeedBorrowKind<'a,'tcx> {\n                      _body: &ast::Block)\n     {\n         let is_old_skool_closure = match self.fcx.expr_ty(expr).sty {\n-            ty::ty_closure(..) => true,\n             _ => false,\n         };\n "}, {"sha": "09ab98745bd6a59a1d1573ca603a6a1508badabd", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -22,7 +22,7 @@ use middle::subst::{self, Subst};\n use middle::ty::RegionEscape;\n use middle::ty::{ImplContainer, ImplOrTraitItemId, MethodTraitItemId};\n use middle::ty::{ParameterEnvironment, TypeTraitItemId, lookup_item_type};\n-use middle::ty::{Ty, ty_bool, ty_char, ty_closure, ty_enum, ty_err};\n+use middle::ty::{Ty, ty_bool, ty_char, ty_enum, ty_err};\n use middle::ty::{ty_param, TypeScheme, ty_ptr};\n use middle::ty::{ty_rptr, ty_struct, ty_trait, ty_tup};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_open};\n@@ -69,7 +69,7 @@ fn get_base_type_def_id<'a, 'tcx>(inference_context: &InferCtxt<'a, 'tcx>,\n         }\n \n         ty_bool | ty_char | ty_int(..) | ty_uint(..) | ty_float(..) |\n-        ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_closure(..) | ty_tup(..) |\n+        ty_str(..) | ty_vec(..) | ty_bare_fn(..) | ty_tup(..) |\n         ty_param(..) | ty_err | ty_open(..) | ty_uniq(_) |\n         ty_ptr(_) | ty_rptr(_, _) | ty_projection(..) => {\n             None"}, {"sha": "e58c2275fcd96448c9836330cfe2bad49df4120f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -831,20 +831,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::ty_bare_fn(_, &ty::BareFnTy { ref sig, .. }) |\n-            ty::ty_closure(box ty::ClosureTy {\n-                    ref sig,\n-                    store: ty::UniqTraitStore,\n-                    ..\n-                }) =>\n-            {\n-                self.add_constraints_from_sig(generics, sig, variance);\n-            }\n-\n-            ty::ty_closure(box ty::ClosureTy { ref sig,\n-                    store: ty::RegionTraitStore(region, _), .. }) => {\n-                let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(generics, region, contra);\n+            ty::ty_bare_fn(_, &ty::BareFnTy { ref sig, .. }) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }\n "}, {"sha": "e2ca4b1ecdbc7e9215447cc6bfbe2508fb2494c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7f2c9a0592bc1627781767ec8228aaad3e5364/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5f7f2c9a0592bc1627781767ec8228aaad3e5364", "patch": "@@ -1426,19 +1426,6 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n                 abi: fty.abi.to_string(),\n             }),\n-            ty::ty_closure(ref fty) => {\n-                let decl = box ClosureDecl {\n-                    lifetimes: Vec::new(), // FIXME: this looks wrong...\n-                    decl: (ast_util::local_def(0), &fty.sig).clean(cx),\n-                    onceness: fty.onceness,\n-                    unsafety: fty.unsafety,\n-                    bounds: fty.bounds.clean(cx),\n-                };\n-                match fty.store {\n-                    ty::UniqTraitStore => Proc(decl),\n-                    ty::RegionTraitStore(..) => Closure(decl),\n-                }\n-            }\n             ty::ty_struct(did, substs) |\n             ty::ty_enum(did, substs) => {\n                 let fqn = csearch::get_item_path(cx.tcx(), did);"}]}