{"sha": "93498e0c2285cba797123fea836670c1b826240c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDk4ZTBjMjI4NWNiYTc5NzEyM2ZlYTgzNjY3MGMxYjgyNjI0MGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-12T12:54:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:11Z"}, "message": "make `util` fns private to nice_region_error", "tree": {"sha": "de06235cda08a87f874061f768c365062bf501a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de06235cda08a87f874061f768c365062bf501a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93498e0c2285cba797123fea836670c1b826240c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93498e0c2285cba797123fea836670c1b826240c", "html_url": "https://github.com/rust-lang/rust/commit/93498e0c2285cba797123fea836670c1b826240c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93498e0c2285cba797123fea836670c1b826240c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4089d140e00560cab90b7a641cb6f9923790bad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4089d140e00560cab90b7a641cb6f9923790bad8", "html_url": "https://github.com/rust-lang/rust/commit/4089d140e00560cab90b7a641cb6f9923790bad8"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "503a5542dda3c3f5943a99e3fe902656a2b2af63", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/93498e0c2285cba797123fea836670c1b826240c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93498e0c2285cba797123fea836670c1b826240c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=93498e0c2285cba797123fea836670c1b826240c", "patch": "@@ -32,7 +32,7 @@ macro_rules! or_false {\n // The struct contains the information about the anonymous region\n // we are searching for.\n #[derive(Debug)]\n-pub struct AnonymousArgInfo<'tcx> {\n+pub(super) struct AnonymousArgInfo<'tcx> {\n     // the argument corresponding to the anonymous region\n     pub arg: &'tcx hir::Arg,\n     // the type corresponding to the anonymopus region argument\n@@ -47,7 +47,7 @@ pub struct AnonymousArgInfo<'tcx> {\n // This struct contains information regarding the\n // Refree((FreeRegion) corresponding to lifetime conflict\n #[derive(Debug)]\n-pub struct FreeRegionInfo {\n+pub(super) struct FreeRegionInfo {\n     // def id corresponding to FreeRegion\n     pub def_id: DefId,\n     // the bound region corresponding to FreeRegion\n@@ -68,7 +68,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // i32, which is the type of y but with the anonymous region replaced\n     // with 'a, the corresponding bound region and is_first which is true if\n     // the hir::Arg is the first argument in the function declaration.\n-    pub fn find_arg_with_region(&self,\n+    pub(super) fn find_arg_with_region(&self,\n                                 anon_region: Region<'tcx>,\n                                 replace_region: Region<'tcx>)\n                                 -> Option<AnonymousArgInfo> {\n@@ -126,7 +126,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // This method returns the DefId and the BoundRegion corresponding to the given region.\n-    pub fn is_suitable_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n+    pub(super) fn is_suitable_region(&self, region: Region<'tcx>) -> Option<FreeRegionInfo> {\n \n         let (suitable_region_binding_scope, bound_region) = match *region {\n             ty::ReFree(ref free_region) => (free_region.scope, free_region.bound_region),\n@@ -162,7 +162,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // Here, we check for the case where the anonymous region\n     // is in the return type.\n     // FIXME(#42703) - Need to handle certain cases here.\n-    pub fn is_return_type_anon(&self,\n+    pub(super) fn is_return_type_anon(&self,\n                                scope_def_id: DefId,\n                                br: ty::BoundRegion,\n                                decl: &hir::FnDecl)\n@@ -185,15 +185,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // corresponds to self and if yes, we display E0312.\n     // FIXME(#42700) - Need to format self properly to\n     // enable E0621 for it.\n-    pub fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n+    pub(super) fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n         is_first &&\n         self.tcx\n             .opt_associated_item(scope_def_id)\n             .map(|i| i.method_has_self_argument) == Some(true)\n     }\n \n     // Here we check if the bound region is in Impl Item.\n-    pub fn is_bound_region_in_impl_item(&self, suitable_region_binding_scope: DefId) -> bool {\n+    pub(super) fn is_bound_region_in_impl_item(&self, suitable_region_binding_scope: DefId) -> bool {\n         let container_id = self.tcx\n             .associated_item(suitable_region_binding_scope)\n             .container\n@@ -211,7 +211,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // This method returns whether the given Region is Named\n-    pub fn is_named_region(&self, region: Region<'tcx>) -> bool {\n+    pub(super) fn is_named_region(&self, region: Region<'tcx>) -> bool {\n         match *region {\n             ty::ReFree(ref free_region) => {\n                 match free_region.bound_region {"}]}