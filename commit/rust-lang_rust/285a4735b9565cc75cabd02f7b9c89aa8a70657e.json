{"sha": "285a4735b9565cc75cabd02f7b9c89aa8a70657e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWE0NzM1Yjk1NjVjYzc1Y2FiZDAyZjdiOWM4OWFhOGE3MDY1N2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T19:02:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T19:02:56Z"}, "message": "Parse effect-qualified type definitions.", "tree": {"sha": "cd9fbc798e6cc08ec7f758edc1a564a69f672532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9fbc798e6cc08ec7f758edc1a564a69f672532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285a4735b9565cc75cabd02f7b9c89aa8a70657e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285a4735b9565cc75cabd02f7b9c89aa8a70657e", "html_url": "https://github.com/rust-lang/rust/commit/285a4735b9565cc75cabd02f7b9c89aa8a70657e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285a4735b9565cc75cabd02f7b9c89aa8a70657e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2683ae64bf3988226308b97fa75571d5cd0e1ce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2683ae64bf3988226308b97fa75571d5cd0e1ce7", "html_url": "https://github.com/rust-lang/rust/commit/2683ae64bf3988226308b97fa75571d5cd0e1ce7"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "32eed2c14e96cf458d5f221e064acaaf041a75a2", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -410,7 +410,7 @@ and obj =\n and ty_param = ident * (ty_param_idx * effect)\n \n and mod_item' =\n-    MOD_ITEM_type of ty\n+    MOD_ITEM_type of (effect * ty)\n   | MOD_ITEM_tag of (header_tup * ty_tag * node_id)\n   | MOD_ITEM_mod of (mod_view * mod_items)\n   | MOD_ITEM_fn of fn\n@@ -1212,15 +1212,18 @@ and fmt_ident_and_params\n   fmt_ident ff id;\n   fmt_decl_params ff params\n \n+and fmt_effect_qual (ff:Format.formatter) (e:effect) : unit =\n+  fmt_effect ff e;\n+  if e <> PURE then fmt ff \" \";\n+\n and fmt_fn\n     (ff:Format.formatter)\n     (id:ident)\n     (params:ty_param array)\n     (f:fn)\n     : unit =\n   fmt_obox ff;\n-  fmt_effect ff f.fn_aux.fn_effect;\n-  if f.fn_aux.fn_effect <> PURE then fmt ff \" \";\n+  fmt_effect_qual ff f.fn_aux.fn_effect;\n   fmt ff \"%s \"(if f.fn_aux.fn_is_iter then \"iter\" else \"fn\");\n   fmt_ident_and_params ff id params;\n   fmt_header_slots ff f.fn_input_slots;\n@@ -1240,8 +1243,7 @@ and fmt_obj\n     (obj:obj)\n     : unit =\n   fmt_obox ff;\n-  fmt_effect ff obj.obj_effect;\n-  if obj.obj_effect <> PURE then fmt ff \" \";\n+  fmt_effect_qual ff obj.obj_effect;\n   fmt ff \"obj \";\n   fmt_ident_and_params ff id params;\n   fmt_header_slots ff obj.obj_state;\n@@ -1277,7 +1279,8 @@ and fmt_mod_item (ff:Format.formatter) (id:ident) (item:mod_item) : unit =\n   let params = Array.map (fun i -> i.node) params in\n     begin\n       match item.node.decl_item with\n-          MOD_ITEM_type ty ->\n+          MOD_ITEM_type (e, ty) ->\n+            fmt_effect_qual ff e;\n             fmt ff \"type \";\n             fmt_ident_and_params ff id params;\n             fmt ff \" = \";"}, {"sha": "130909e2fa6ad192db1d95a55c0c24d06f7e96e5", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -760,6 +760,20 @@ and parse_obj_item\n          span ps apos bpos\n            (decl params (Ast.MOD_ITEM_obj obj)))\n \n+and parse_type_item\n+    (ps:pstate)\n+    (apos:pos)\n+    (effect:Ast.effect)\n+    : (Ast.ident * Ast.mod_item) =\n+  expect ps TYPE;\n+  let (ident, params) = parse_ident_and_params ps \"type\" in\n+  let _ = expect ps EQ in\n+  let ty = ctxt \"mod type item: ty\" Pexp.parse_ty ps in\n+  let _ = expect ps SEMI in\n+  let bpos = lexpos ps in\n+  let item = Ast.MOD_ITEM_type (effect, ty) in\n+    (ident, span ps apos bpos (decl params item))\n+\n \n and parse_mod_item (ps:pstate) : (Ast.ident * Ast.mod_item) =\n   let apos = lexpos ps in\n@@ -775,13 +789,15 @@ and parse_mod_item (ps:pstate) : (Ast.ident * Ast.mod_item) =\n       | _ -> ps.pstate_infer_lib_name ident\n   in\n \n+\n     match peek ps with\n \n-        IO | STATE | UNSAFE | OBJ | FN | ITER ->\n+        IO | STATE | UNSAFE | TYPE | OBJ | FN | ITER ->\n           let effect = Pexp.parse_effect ps in\n             begin\n               match peek ps with\n                   OBJ -> parse_obj_item ps apos effect\n+                | TYPE -> parse_type_item ps apos effect\n                 | _ ->\n                     let is_iter = (peek ps) = ITER in\n                       bump ps;\n@@ -795,16 +811,6 @@ and parse_mod_item (ps:pstate) : (Ast.ident * Ast.mod_item) =\n                            (decl params (Ast.MOD_ITEM_fn fn)))\n             end\n \n-      | TYPE ->\n-          bump ps;\n-          let (ident, params) = parse_ident_and_params ps \"type\" in\n-          let _ = expect ps EQ in\n-          let ty = ctxt \"mod type item: ty\" Pexp.parse_ty ps in\n-          let _ = expect ps SEMI in\n-          let bpos = lexpos ps in\n-          let item = Ast.MOD_ITEM_type ty in\n-            (ident, span ps apos bpos (decl params item))\n-\n       | MOD ->\n           bump ps;\n           let (ident, params) = parse_ident_and_params ps \"mod\" in\n@@ -964,7 +970,8 @@ and parse_mod_item_from_signature (ps:pstate)\n         in\n           expect ps SEMI;\n           let bpos = lexpos ps in\n-            (ident, span ps apos bpos (decl params (Ast.MOD_ITEM_type t)))\n+            (ident, span ps apos bpos\n+               (decl params (Ast.MOD_ITEM_type (Ast.UNSAFE, t))))\n \n     | _ -> raise (unexpected ps)\n \n@@ -1008,7 +1015,7 @@ and expand_tags\n       | _ -> [| |]\n   in\n     match item.node.Ast.decl_item with\n-        Ast.MOD_ITEM_type tyd -> handle_ty_decl item.id tyd\n+        Ast.MOD_ITEM_type (_, tyd) -> handle_ty_decl item.id tyd\n       | _ -> [| |]\n \n "}, {"sha": "14065466fb8de642537db0e59c033b6fb49b2187", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -360,9 +360,6 @@ and flag (ps:pstate) (tok:token) : bool =\n   then (bump ps; true)\n   else false\n \n-and parse_mutability (ps:pstate) : bool =\n-  flag ps MUTABLE\n-\n and parse_slot (aliases_ok:bool) (ps:pstate) : Ast.slot =\n   let mode =\n   match (peek ps, aliases_ok) with"}, {"sha": "5fd8638f4a54c1d6c29bc265d43be2de6aaa2a95", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -1210,6 +1210,8 @@ let (abbrev_typedef:abbrev) =\n   (DW_TAG_typedef, DW_CHILDREN_yes,\n    [|\n      (DW_AT_name, DW_FORM_string);\n+     (DW_AT_mutable, DW_FORM_flag);\n+     (DW_AT_pure, DW_FORM_flag);\n      (DW_AT_type, DW_FORM_ref_addr)\n    |])\n ;;\n@@ -2319,6 +2321,7 @@ let dwarf_visitor\n \n   let emit_typedef_die\n       (id:Ast.ident)\n+      (e:Ast.effect)\n       (ty:Ast.ty)\n       : unit =\n     let abbrev_code = get_abbrev_code abbrev_typedef in\n@@ -2327,6 +2330,7 @@ let dwarf_visitor\n          uleb abbrev_code;\n          (* DW_AT_name: DW_FORM_string *)\n          ZSTRING id;\n+         encode_effect e;\n          (* DW_AT_type: DW_FORM_ref_addr *)\n          (ref_type_die ty);\n        |])\n@@ -2388,13 +2392,13 @@ let dwarf_visitor\n                   (Hashtbl.find cx.ctxt_fn_fixups item.id);\n                 emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n-        | Ast.MOD_ITEM_type _ ->\n+        | Ast.MOD_ITEM_type (e, _) ->\n             begin\n               log cx \"walking typedef '%s' with %d type params\"\n                 (path_name())\n                 (Array.length item.node.Ast.decl_params);\n               emit_typedef_die\n-                id (Hashtbl.find cx.ctxt_all_type_items item.id);\n+                id e (Hashtbl.find cx.ctxt_all_type_items item.id);\n               emit_type_param_decl_dies item.node.Ast.decl_params;\n             end\n         | _ -> ()\n@@ -3100,9 +3104,10 @@ let rec extract_mod_items\n   let die = Hashtbl.find dies i in\n     match die.die_tag with\n         DW_TAG_typedef ->\n+          let effect = get_effect die in\n           let ident = get_name die in\n           let ty = get_referenced_ty die in\n-          let tyi = Ast.MOD_ITEM_type ty in\n+          let tyi = Ast.MOD_ITEM_type (effect, ty) in\n           let (params, islots) = get_formals die in\n             assert ((Array.length islots) = 0);\n             htab_put mis ident (decl params tyi)"}, {"sha": "5077d5cea20d90782f5adcb92186504d5a867efd", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -270,7 +270,7 @@ let type_reference_and_tag_extracting_visitor\n   let visit_mod_item_pre id params item =\n     begin\n       match item.node.Ast.decl_item with\n-          Ast.MOD_ITEM_type ty ->\n+          Ast.MOD_ITEM_type (_, ty) ->\n             begin\n               log cx \"extracting references for type node %d\"\n                 (int_of_node item.id);\n@@ -395,7 +395,7 @@ and lookup_type_by_name\n     | Some (scopes', id) ->\n         let ty, params =\n           match htab_search cx.ctxt_all_defns id with\n-              Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type t;\n+              Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_type (_, t);\n                                 Ast.decl_params = params }) ->\n                 (t, Array.map (fun p -> p.node) params)\n             | Some (DEFN_item { Ast.decl_item = Ast.MOD_ITEM_obj ob;\n@@ -543,7 +543,7 @@ let type_resolving_visitor\n     begin\n       try\n         match item.node.Ast.decl_item with\n-            Ast.MOD_ITEM_type ty ->\n+            Ast.MOD_ITEM_type (_, ty) ->\n               let ty =\n                 resolve_type cx (!scopes) recursive_tag_groups\n                   all_tags empty_recur_info ty\n@@ -838,7 +838,7 @@ let resolve_recursion\n         then begin\n           match Hashtbl.find cx.ctxt_all_defns id with\n               DEFN_item\n-                { Ast.decl_item = Ast.MOD_ITEM_type (Ast.TY_tag _) } ->\n+                { Ast.decl_item = Ast.MOD_ITEM_type (_, (Ast.TY_tag _)) } ->\n                 log cx \"type %d is a recursive tag\" (int_of_node id);\n                 Hashtbl.replace recursive_tag_types id ()\n             | _ ->"}, {"sha": "0b60c8320e5022b0a9b659fc0acc54f026e97881", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/285a4735b9565cc75cabd02f7b9c89aa8a70657e/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=285a4735b9565cc75cabd02f7b9c89aa8a70657e", "patch": "@@ -235,7 +235,7 @@ and walk_mod_item\n     : unit =\n   let children _ =\n     match item.node.Ast.decl_item with\n-        Ast.MOD_ITEM_type ty -> walk_ty v ty\n+        Ast.MOD_ITEM_type (_, ty) -> walk_ty v ty\n       | Ast.MOD_ITEM_fn f -> walk_fn v f item.id\n       | Ast.MOD_ITEM_tag (htup, ttag, _) ->\n           walk_header_tup v htup;"}]}