{"sha": "53712f8637dbe326df569a90814aae1cc5429710", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzEyZjg2MzdkYmUzMjZkZjU2OWE5MDgxNGFhZTFjYzU0Mjk3MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-21T17:53:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-21T17:53:19Z"}, "message": "Auto merge of #66389 - estebank:type-err-labels, r=petrochenkov\n\nSpecific labels when referring to \"expected\" and \"found\" types", "tree": {"sha": "3ffee9436fa178bcc3d74251c686074cbd8a4c04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffee9436fa178bcc3d74251c686074cbd8a4c04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53712f8637dbe326df569a90814aae1cc5429710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53712f8637dbe326df569a90814aae1cc5429710", "html_url": "https://github.com/rust-lang/rust/commit/53712f8637dbe326df569a90814aae1cc5429710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53712f8637dbe326df569a90814aae1cc5429710/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed", "html_url": "https://github.com/rust-lang/rust/commit/35ef33a89dfd8ff8c8a7b3c58fa7136bbcb2f1ed"}, {"sha": "468722b33c589ade04a11f05f53d0f3bff6c7a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/468722b33c589ade04a11f05f53d0f3bff6c7a99", "html_url": "https://github.com/rust-lang/rust/commit/468722b33c589ade04a11f05f53d0f3bff6c7a99"}], "stats": {"total": 6084, "additions": 2544, "deletions": 3540}, "files": [{"sha": "f2607b23527a1d2d743eadde441badf0ee8720ff", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1163,8 +1163,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             Some(values) => {\n                 let (is_simple_error, exp_found) = match values {\n                     ValuePairs::Types(exp_found) => {\n-                        let is_simple_err =\n-                            exp_found.expected.is_primitive() && exp_found.found.is_primitive();\n+                        let is_simple_err = exp_found.expected.is_simple_text()\n+                            && exp_found.found.is_simple_text();\n \n                         (is_simple_err, Some(exp_found))\n                     }\n@@ -1197,40 +1197,61 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         if let Some((expected, found)) = expected_found {\n-            match (terr, is_simple_error, expected == found) {\n-                (&TypeError::Sorts(ref values), false, true) => {\n-                    let sort_string = | a_type: Ty<'tcx> |\n-                        if let ty::Opaque(def_id, _) = a_type.kind {\n-                            format!(\" (opaque type at {})\", self.tcx.sess.source_map()\n-                                .mk_substr_filename(self.tcx.def_span(def_id)))\n-                        } else {\n-                            format!(\" ({})\", a_type.sort_string(self.tcx))\n-                        };\n-                    diag.note_expected_found_extra(\n-                        &\"type\",\n-                        expected,\n-                        found,\n-                        &sort_string(values.expected),\n-                        &sort_string(values.found),\n-                    );\n+            let expected_label = exp_found.map_or(\"type\".into(), |ef| ef.expected.prefix_string());\n+            let found_label = exp_found.map_or(\"type\".into(), |ef| ef.found.prefix_string());\n+            match (&terr, expected == found) {\n+                (TypeError::Sorts(values), extra) => {\n+                    let sort_string = |ty: Ty<'tcx>| match (extra, &ty.kind) {\n+                        (true, ty::Opaque(def_id, _)) => format!(\n+                            \" (opaque type at {})\",\n+                            self.tcx.sess.source_map()\n+                                .mk_substr_filename(self.tcx.def_span(*def_id)),\n+                        ),\n+                        (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n+                        (false, _) => \"\".to_string(),\n+                    };\n+                    if !(values.expected.is_simple_text() && values.found.is_simple_text()) || (\n+                        exp_found.map_or(false, |ef| {\n+                            // This happens when the type error is a subset of the expectation,\n+                            // like when you have two references but one is `usize` and the other\n+                            // is `f32`. In those cases we still want to show the `note`. If the\n+                            // value from `ef` is `Infer(_)`, then we ignore it.\n+                            if !ef.expected.is_ty_infer() {\n+                                ef.expected != values.expected\n+                            } else if !ef.found.is_ty_infer() {\n+                                ef.found != values.found\n+                            } else {\n+                                false\n+                            }\n+                        })\n+                    ) {\n+                        diag.note_expected_found_extra(\n+                            &expected_label,\n+                            expected,\n+                            &found_label,\n+                            found,\n+                            &sort_string(values.expected),\n+                            &sort_string(values.found),\n+                        );\n+                    }\n                 }\n-                (TypeError::ObjectUnsafeCoercion(_), ..) => {\n+                (TypeError::ObjectUnsafeCoercion(_), _) => {\n                     diag.note_unsuccessfull_coercion(found, expected);\n                 }\n-                (_, false, _) => {\n+                (_, _) => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n                         exp_found, expected, found\n                     );\n-                    if let Some(exp_found) = exp_found {\n-                        self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+                    if !is_simple_error || terr.must_include_note() {\n+                        diag.note_expected_found(&expected_label, expected, &found_label, found);\n                     }\n-\n-                    diag.note_expected_found(&\"type\", expected, found);\n                 }\n-                _ => (),\n             }\n         }\n+        if let Some(exp_found) = exp_found {\n+            self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n+        }\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n         // it's a actual definition. According to the comments (e.g. in"}, {"sha": "95bdce2d22252e11983e09b3647ffd69bc0518fc", "filename": "src/librustc/ty/diagnostics.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fdiagnostics.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -0,0 +1,56 @@\n+//! Diagnostics related methods for `TyS`.\n+\n+use crate::ty::TyS;\n+use crate::ty::TyKind::*;\n+use crate::ty::sty::InferTy;\n+\n+impl<'tcx> TyS<'tcx> {\n+    /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n+    pub fn is_primitive_ty(&self) -> bool {\n+        match self.kind {\n+            Bool | Char | Str | Int(_) | Uint(_) | Float(_) |\n+            Infer(InferTy::IntVar(_)) | Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) | Infer(InferTy::FreshFloatTy(_)) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// description in error messages. This is used in the main error message.\n+    pub fn is_simple_ty(&self) -> bool {\n+        match self.kind {\n+            Bool | Char | Str | Int(_) | Uint(_) | Float(_) |\n+            Infer(InferTy::IntVar(_)) | Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) | Infer(InferTy::FreshFloatTy(_)) => true,\n+            Ref(_, x, _) | Array(x, _) | Slice(x) => x.peel_refs().is_simple_ty(),\n+            Tuple(tys) if tys.is_empty() => true,\n+            _ => false,\n+        }\n+    }\n+\n+    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// description in error messages. This is used in the primary span label. Beyond what\n+    /// `is_simple_ty` includes, it also accepts ADTs with no type arguments and references to\n+    /// ADTs with no type arguments.\n+    pub fn is_simple_text(&self) -> bool {\n+        match self.kind {\n+            Adt(_, substs) => substs.types().next().is_none(),\n+            Ref(_, ty, _) => ty.is_simple_text(),\n+            _ => self.is_simple_ty(),\n+        }\n+    }\n+\n+    /// Whether the type can be safely suggested during error recovery.\n+    pub fn is_suggestable(&self) -> bool {\n+        match self.kind {\n+            Opaque(..) |\n+            FnDef(..) |\n+            FnPtr(..) |\n+            Dynamic(..) |\n+            Closure(..) |\n+            Infer(..) |\n+            Projection(..) => false,\n+            _ => true,\n+        }\n+    }\n+}"}, {"sha": "8e3ae0864aa0e043cf2a7fee5a17ab6c6941de29", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 84, "deletions": 20, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -64,8 +64,11 @@ pub enum UnconstrainedNumeric {\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use self::TypeError::*;\n-        fn report_maybe_different(f: &mut fmt::Formatter<'_>,\n-                                  expected: &str, found: &str) -> fmt::Result {\n+        fn report_maybe_different(\n+            f: &mut fmt::Formatter<'_>,\n+            expected: &str,\n+            found: &str,\n+        ) -> fmt::Result {\n             // A naive approach to making sure that we're not reporting silly errors such as:\n             // (expected closure, found closure).\n             if expected == found {\n@@ -183,46 +186,77 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n     }\n }\n \n+impl<'tcx> TypeError<'tcx> {\n+    pub fn must_include_note(&self) -> bool {\n+        use self::TypeError::*;\n+        match self {\n+            CyclicTy(_) |\n+            UnsafetyMismatch(_) |\n+            Mismatch |\n+            AbiMismatch(_) |\n+            FixedArraySize(_) |\n+            Sorts(_) |\n+            IntMismatch(_) |\n+            FloatMismatch(_) |\n+            VariadicMismatch(_) => false,\n+\n+            Mutability |\n+            TupleSize(_) |\n+            ArgCount |\n+            RegionsDoesNotOutlive(..) |\n+            RegionsInsufficientlyPolymorphic(..) |\n+            RegionsOverlyPolymorphic(..) |\n+            RegionsPlaceholderMismatch |\n+            Traits(_) |\n+            ProjectionMismatched(_) |\n+            ProjectionBoundsLength(_) |\n+            ExistentialMismatch(_) |\n+            ConstMismatch(_) |\n+            IntrinsicCast |\n+            ObjectUnsafeCoercion(_) => true,\n+        }\n+    }\n+}\n+\n impl<'tcx> ty::TyS<'tcx> {\n     pub fn sort_string(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n         match self.kind {\n             ty::Bool | ty::Char | ty::Int(_) |\n-            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => self.to_string().into(),\n-            ty::Tuple(ref tys) if tys.is_empty() => self.to_string().into(),\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => format!(\"`{}`\", self).into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => format!(\"`{}`\", self).into(),\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n-            ty::Array(_, n) => {\n+            ty::Array(t, n) => {\n                 let n = tcx.lift(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    Some(n) => {\n-                        format!(\"array of {} element{}\", n, pluralize!(n)).into()\n-                    }\n+                    _ if t.is_simple_ty() => format!(\"array `{}`\", self).into(),\n+                    Some(n) => format!(\"array of {} element{} \", n, pluralize!(n)).into(),\n                     None => \"array\".into(),\n                 }\n             }\n+            ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n             ty::Slice(_) => \"slice\".into(),\n             ty::RawPtr(_) => \"*-ptr\".into(),\n-            ty::Ref(region, ty, mutbl) => {\n+            ty::Ref(_, ty, mutbl) => {\n                 let tymut = ty::TypeAndMut { ty, mutbl };\n                 let tymut_string = tymut.to_string();\n-                if tymut_string == \"_\" ||         //unknown type name,\n-                   tymut_string.len() > 10 ||     //name longer than saying \"reference\",\n-                   region.to_string() != \"'_\"     //... or a complex type\n-                {\n-                    format!(\"{}reference\", match mutbl {\n-                        hir::Mutability::Mutable => \"mutable \",\n-                        _ => \"\"\n-                    }).into()\n-                } else {\n-                    format!(\"&{}\", tymut_string).into()\n+                if tymut_string != \"_\" && (\n+                    ty.is_simple_text() || tymut_string.len() < \"mutable reference\".len()\n+                ) {\n+                    format!(\"`&{}`\", tymut_string).into()\n+                } else { // Unknown type name, it's long or has type arguments\n+                    match mutbl {\n+                        hir::Mutability::Mutable => \"mutable reference\",\n+                        _ => \"reference\",\n+                    }.into()\n                 }\n             }\n             ty::FnDef(..) => \"fn item\".into(),\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) => {\n                 if let Some(principal) = inner.principal() {\n-                    format!(\"trait {}\", tcx.def_path_str(principal.def_id())).into()\n+                    format!(\"trait `{}`\", tcx.def_path_str(principal.def_id())).into()\n                 } else {\n                     \"trait\".into()\n                 }\n@@ -246,6 +280,36 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Error => \"type error\".into(),\n         }\n     }\n+\n+    pub fn prefix_string(&self) -> Cow<'static, str> {\n+        match self.kind {\n+            ty::Infer(_) | ty::Error | ty::Bool | ty::Char | ty::Int(_) |\n+            ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => \"type\".into(),\n+            ty::Tuple(ref tys) if tys.is_empty() => \"unit type\".into(),\n+            ty::Adt(def, _) => def.descr().into(),\n+            ty::Foreign(_) => \"extern type\".into(),\n+            ty::Array(..) => \"array\".into(),\n+            ty::Slice(_) => \"slice\".into(),\n+            ty::RawPtr(_) => \"raw pointer\".into(),\n+            ty::Ref(.., mutbl) => match mutbl {\n+                hir::Mutability::Mutable => \"mutable reference\",\n+                _ => \"reference\"\n+            }.into(),\n+            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnPtr(_) => \"fn pointer\".into(),\n+            ty::Dynamic(..) => \"trait object\".into(),\n+            ty::Closure(..) => \"closure\".into(),\n+            ty::Generator(..) => \"generator\".into(),\n+            ty::GeneratorWitness(..) => \"generator witness\".into(),\n+            ty::Tuple(..) => \"tuple\".into(),\n+            ty::Placeholder(..) => \"higher-ranked type\".into(),\n+            ty::Bound(..) => \"bound type variable\".into(),\n+            ty::Projection(_) => \"associated type\".into(),\n+            ty::UnnormalizedProjection(_) => \"associated type\".into(),\n+            ty::Param(_) => \"type parameter\".into(),\n+            ty::Opaque(..) => \"opaque type\".into(),\n+        }\n+    }\n }\n \n impl<'tcx> TyCtxt<'tcx> {"}, {"sha": "d001916aca2db2f48c5fc550bdb735a4724cefdb", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -71,6 +71,7 @@ pub use self::sty::BoundRegion::*;\n pub use self::sty::InferTy::*;\n pub use self::sty::RegionKind::*;\n pub use self::sty::TyKind::*;\n+pub use crate::ty::diagnostics::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n@@ -122,6 +123,7 @@ mod instance;\n mod structural_impls;\n mod structural_match;\n mod sty;\n+mod diagnostics;\n \n // Data types\n \n@@ -552,37 +554,6 @@ impl<'tcx> Hash for TyS<'tcx> {\n     }\n }\n \n-impl<'tcx> TyS<'tcx> {\n-    pub fn is_primitive_ty(&self) -> bool {\n-        match self.kind {\n-            Bool |\n-            Char |\n-            Int(_) |\n-            Uint(_) |\n-            Float(_) |\n-            Infer(InferTy::IntVar(_)) |\n-            Infer(InferTy::FloatVar(_)) |\n-            Infer(InferTy::FreshIntTy(_)) |\n-            Infer(InferTy::FreshFloatTy(_)) => true,\n-            Ref(_, x, _) => x.is_primitive_ty(),\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_suggestable(&self) -> bool {\n-        match self.kind {\n-            Opaque(..) |\n-            FnDef(..) |\n-            FnPtr(..) |\n-            Dynamic(..) |\n-            Closure(..) |\n-            Infer(..) |\n-            Projection(..) => false,\n-            _ => true,\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::TyS<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let ty::TyS {"}, {"sha": "276fc8c1dec0fd4da10e9b60db805bdad0f2b7d3", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     //   LL | impl Bar for Foo {\n                     //      | ---------------- in this `impl` item\n                     //   LL |     type Ok = ();\n-                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n                     //      |\n                     //      = note: expected type `u32`\n                     //                 found type `()`\n@@ -228,7 +228,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     //   LL | impl Bar for Foo {\n                     //      | ---------------- in this `impl` item\n                     //   LL |     type Ok = ();\n-                    //      |     ^^^^^^^^^^^^^ expected u32, found ()\n+                    //      |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n                     //   ...\n                     //   LL | impl Bar2 for Foo2 {\n                     //      | ---------------- in this `impl` item"}, {"sha": "41ce2d8c440e60e070cd00f6aec34fc31017faec", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -154,20 +154,21 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn note_expected_found(&mut self,\n-                               label: &dyn fmt::Display,\n-                               expected: DiagnosticStyledString,\n-                               found: DiagnosticStyledString)\n-                               -> &mut Self\n-    {\n-        self.note_expected_found_extra(label, expected, found, &\"\", &\"\")\n-    }\n-\n-    pub fn note_unsuccessfull_coercion(&mut self,\n-                                       expected: DiagnosticStyledString,\n-                                       found: DiagnosticStyledString)\n-                                       -> &mut Self\n-    {\n+    pub fn note_expected_found(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self {\n+        self.note_expected_found_extra(expected_label, expected, found_label, found, &\"\", &\"\")\n+    }\n+\n+    pub fn note_unsuccessfull_coercion(\n+        &mut self,\n+        expected: DiagnosticStyledString,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self {\n         let mut msg: Vec<_> =\n             vec![(format!(\"required when trying to coerce from type `\"),\n                   Style::NoStyle)];\n@@ -189,27 +190,38 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn note_expected_found_extra(&mut self,\n-                                     label: &dyn fmt::Display,\n-                                     expected: DiagnosticStyledString,\n-                                     found: DiagnosticStyledString,\n-                                     expected_extra: &dyn fmt::Display,\n-                                     found_extra: &dyn fmt::Display)\n-                                     -> &mut Self\n-    {\n-        let mut msg: Vec<_> = vec![(format!(\"expected {} `\", label), Style::NoStyle)];\n+    pub fn note_expected_found_extra(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+        expected_extra: &dyn fmt::Display,\n+        found_extra: &dyn fmt::Display,\n+    ) -> &mut Self {\n+        let expected_label = format!(\"expected {}\", expected_label);\n+        let found_label = format!(\"found {}\", found_label);\n+        let (found_padding, expected_padding) = if expected_label.len() > found_label.len() {\n+            (expected_label.len() - found_label.len(), 0)\n+        } else {\n+            (0, found_label.len() - expected_label.len())\n+        };\n+        let mut msg: Vec<_> = vec![(\n+            format!(\"{}{} `\", \" \".repeat(expected_padding), expected_label),\n+            Style::NoStyle,\n+        )];\n         msg.extend(expected.0.iter()\n-                   .map(|x| match *x {\n-                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n-                   }));\n+            .map(|x| match *x {\n+                StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            }));\n         msg.push((format!(\"`{}\\n\", expected_extra), Style::NoStyle));\n-        msg.push((format!(\"   found {} `\", label), Style::NoStyle));\n+        msg.push((format!(\"{}{} `\", \" \".repeat(found_padding), found_label), Style::NoStyle));\n         msg.extend(found.0.iter()\n-                   .map(|x| match *x {\n-                       StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n-                       StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n-                   }));\n+            .map(|x| match *x {\n+                StringPart::Normal(ref s) => (s.to_owned(), Style::NoStyle),\n+                StringPart::Highlighted(ref s) => (s.to_owned(), Style::Highlight),\n+            }));\n         msg.push((format!(\"`{}\", found_extra), Style::NoStyle));\n \n         // For now, just attach these as notes"}, {"sha": "a95c29f8c2729fd4fde3efe97a92d82114cea7c2", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -195,37 +195,44 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n-    forward!(pub fn note_expected_found(&mut self,\n-                                        label: &dyn fmt::Display,\n-                                        expected: DiagnosticStyledString,\n-                                        found: DiagnosticStyledString,\n-                                        ) -> &mut Self);\n-\n-    forward!(pub fn note_expected_found_extra(&mut self,\n-                                              label: &dyn fmt::Display,\n-                                              expected: DiagnosticStyledString,\n-                                              found: DiagnosticStyledString,\n-                                              expected_extra: &dyn fmt::Display,\n-                                              found_extra: &dyn fmt::Display,\n-                                              ) -> &mut Self);\n-\n-    forward!(pub fn note_unsuccessfull_coercion(&mut self,\n-                                                expected: DiagnosticStyledString,\n-                                                found: DiagnosticStyledString,\n-                                                ) -> &mut Self);\n+    forward!(pub fn note_expected_found(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self);\n+\n+    forward!(pub fn note_expected_found_extra(\n+        &mut self,\n+        expected_label: &dyn fmt::Display,\n+        expected: DiagnosticStyledString,\n+        found_label: &dyn fmt::Display,\n+        found: DiagnosticStyledString,\n+        expected_extra: &dyn fmt::Display,\n+        found_extra: &dyn fmt::Display,\n+    ) -> &mut Self);\n+\n+    forward!(pub fn note_unsuccessfull_coercion(\n+        &mut self,\n+        expected: DiagnosticStyledString,\n+        found: DiagnosticStyledString,\n+    ) -> &mut Self);\n \n     forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n-                                                  sp: S,\n-                                                  msg: &str,\n-                                                  ) -> &mut Self);\n+    forward!(pub fn span_note<S: Into<MultiSpan>>(\n+        &mut self,\n+        sp: S,\n+        msg: &str,\n+    ) -> &mut Self);\n     forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n     forward!(pub fn help(&mut self, msg: &str) -> &mut Self);\n-    forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n-                                                  sp: S,\n-                                                  msg: &str,\n-                                                  ) -> &mut Self);\n+    forward!(pub fn span_help<S: Into<MultiSpan>>(\n+        &mut self,\n+        sp: S,\n+        msg: &str,\n+    ) -> &mut Self);\n \n     pub fn multipart_suggestion(\n         &mut self,"}, {"sha": "6b34159066a3098b1740c0621fe8cf68bfca436e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -285,7 +285,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             //    ||         ----- expected because of this\n             // LL ||     } else {\n             // LL ||         10u32\n-            //    ||         ^^^^^ expected i32, found u32\n+            //    ||         ^^^^^ expected `i32`, found `u32`\n             // LL ||     };\n             //    ||_____- if and else have incompatible types\n             // ```\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // The entire expression is in one line, only point at the arms\n             // ```\n             // LL |     let x = if true { 10i32 } else { 10u32 };\n-            //    |                       -----          ^^^^^ expected i32, found u32\n+            //    |                       -----          ^^^^^ expected `i32`, found `u32`\n             //    |                       |\n             //    |                       expected because of this\n             // ```\n@@ -323,7 +323,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //   | ||     ^\n                 //   | ||_____|\n                 //   | |______if and else have incompatible types\n-                //   |        expected integer, found ()\n+                //   |        expected integer, found `()`\n                 // ```\n                 // by not pointing at the entire expression:\n                 // ```\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 //   |  ____________^\n                 // 5 | |\n                 // 6 | |     };\n-                //   | |_____^ expected integer, found ()\n+                //   | |_____^ expected integer, found `()`\n                 // ```\n                 if outer_sp.is_some() {\n                     outer_sp = Some(self.tcx.sess.source_map().def_span(span));"}, {"sha": "bba30ebbbe7bb41eb0e0c65d39e19f213bdc688d", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// 4 |    let temp: usize = match a + b {\n     ///   |                            ----- this expression has type `usize`\n     /// 5 |         Ok(num) => num,\n-    ///   |         ^^^^^^^ expected usize, found enum `std::result::Result`\n+    ///   |         ^^^^^^^ expected `usize`, found enum `std::result::Result`\n     ///   |\n     ///   = note: expected type `usize`\n     ///              found type `std::result::Result<_, _>`"}, {"sha": "9d486d0a661e975f3f80adcf9fd4b4f826ec1755", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,10 +9,7 @@ error[E0308]: mismatched types\n   --> $DIR/failed-doctest-missing-codes.rs:9:13\n    |\n LL | let x: () = 5i32;\n-   |             ^^^^ expected (), found i32\n-   |\n-   = note: expected type `()`\n-              found type `i32`\n+   |             ^^^^ expected `()`, found `i32`\n \n error: aborting due to previous error\n "}, {"sha": "05b21efeecec48b6ad3c9496804153eff903daef", "filename": "src/test/ui/arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-type-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/arg-type-mismatch.rs:5:30\n    |\n LL | fn main() { let i: (); i = f(()); }\n-   |                              ^^ expected isize, found ()\n-   |\n-   = note: expected type `isize`\n-              found type `()`\n+   |                              ^^ expected `isize`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "69c7599cce199badc798bd3db6d17ed7e6b3dae9", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -14,19 +14,19 @@ error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:3:9\n    |\n LL |         |_: [_; break]| {}\n-   |         ^^^^^^^^^^^^^^^^^^ expected (), found closure\n+   |         ^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n-   = note: expected type `()`\n-              found type `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n \n error[E0308]: mismatched types\n   --> $DIR/array-break-length.rs:8:9\n    |\n LL |         |_: [_; continue]| {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found closure\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n-   = note: expected type `()`\n-              found type `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5e46f015baf6268e41070a4d214960ee3345118f", "filename": "src/test/ui/array-not-vector.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,14 +1,12 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected type `i32`\n-    //~| found type `[{integer}; 3]`\n-    //~| expected i32, found array of 3 elements\n+    //~| expected `i32`, found array\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n-    //~| expected type `&i32`\n-    //~| found type `&[i32]`\n-    //~| expected i32, found slice\n+    //~| expected reference `&i32`\n+    //~| found reference `&[i32]`\n+    //~| expected `i32`, found slice\n }"}, {"sha": "412a8ae846124879eb9afdf1647e3e7e945876b0", "filename": "src/test/ui/array-not-vector.stderr", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-not-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Farray-not-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-not-vector.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,19 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/array-not-vector.rs:2:19\n    |\n LL |     let _x: i32 = [1, 2, 3];\n-   |                   ^^^^^^^^^ expected i32, found array of 3 elements\n-   |\n-   = note: expected type `i32`\n-              found type `[{integer}; 3]`\n+   |                   ^^^^^^^^^ expected `i32`, found array `[{integer}; 3]`\n \n error[E0308]: mismatched types\n-  --> $DIR/array-not-vector.rs:9:20\n+  --> $DIR/array-not-vector.rs:7:20\n    |\n LL |     let _y: &i32 = x;\n-   |                    ^ expected i32, found slice\n+   |                    ^ expected `i32`, found slice `[i32]`\n    |\n-   = note: expected type `&i32`\n-              found type `&[i32]`\n+   = note: expected reference `&i32`\n+              found reference `&[i32]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6cdcd4747ff2fb0b7c604edc0d3e26bf2b11d9a", "filename": "src/test/ui/associated-const/associated-const-generic-obligations.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-generic-obligations.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,10 @@ LL |     const FROM: Self::Out;\n    |                 --------- type in trait\n ...\n LL |     const FROM: &'static str = \"foo\";\n-   |                 ^^^^^^^^^^^^ expected associated type, found reference\n+   |                 ^^^^^^^^^^^^ expected associated type, found `&str`\n    |\n-   = note: expected type `<T as Foo>::Out`\n-              found type `&'static str`\n+   = note: expected associated type `<T as Foo>::Out`\n+                    found reference `&'static str`\n    = note: consider constraining the associated type `<T as Foo>::Out` to `&'static str` or calling a method that returns `<T as Foo>::Out`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "0cce10b54a4a9f4ffac2ecf639212c6e66dd58fd", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-lifetime.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     const NAME: &'a str = \"unit\";\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&'static str`\n-              found type `&'a str`\n+   = note: expected reference `&'static str`\n+              found reference `&'a str`\n note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/associated-const-impl-wrong-lifetime.rs:6:6\n    |"}, {"sha": "acdf33b2b835b9586802103a35acf77afa8f614b", "filename": "src/test/ui/associated-const/associated-const-impl-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-impl-wrong-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,7 +5,7 @@ LL |     const BAR: u32;\n    |                --- type in trait\n ...\n LL |     const BAR: i32 = -1;\n-   |                ^^^ expected u32, found i32\n+   |                ^^^ expected `u32`, found `i32`\n \n error: aborting due to previous error\n "}, {"sha": "07f207627f4df2faadd79986c7a2d292c9b03446", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,36 +3,24 @@ error[E0308]: mismatched types\n    |\n LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected type `Black`\n-              found type `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected type `Blue`\n-              found type `Black`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected type `Black`\n-              found type `Blue`\n \n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected type `Blue`\n-              found type `Black`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "86e651b53f0b96c4d048e2461e3a2dfaa6743c75", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,9 +6,6 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n ...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n-   |\n-   = note: expected type `Blue`\n-              found type `Black`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n@@ -18,9 +15,6 @@ LL | fn black_car<C:Car<Color=Black>>(c: C) {\n ...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n-   |\n-   = note: expected type `Black`\n-              found type `Blue`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3bb03c39e0f60191f5d881a44ebd911556d70116", "filename": "src/test/ui/associated-types/associated-types-eq-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,9 +22,9 @@ fn foo1<I: Foo<A=Bar>>(x: I) {\n fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n-    //~| expected type `Bar`\n-    //~| found type `<I as Foo>::A`\n+    //~| found associated type `<I as Foo>::A`\n     //~| expected struct `Bar`, found associated type\n+    //~| expected struct `Bar`\n }\n \n \n@@ -37,8 +37,8 @@ pub fn main() {\n     let a = 42;\n     foo1(a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found usize\n+    //~| expected struct `Bar`, found `usize`\n     baz(&a);\n     //~^ ERROR type mismatch resolving\n-    //~| expected struct `Bar`, found usize\n+    //~| expected struct `Bar`, found `usize`\n }"}, {"sha": "24c830d8b5bbb2e254bd5abb7b144f3b2e1cbd79", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: Bar = x.boo();\n    |                  ^^^^^^^ expected struct `Bar`, found associated type\n    |\n-   = note: expected type `Bar`\n-              found type `<I as Foo>::A`\n+   = note:       expected struct `Bar`\n+           found associated type `<I as Foo>::A`\n    = note: consider constraining the associated type `<I as Foo>::A` to `Bar`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -16,19 +16,14 @@ LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n    |    ----        ----- required by this bound in `foo1`\n ...\n LL |     foo1(a);\n-   |     ^^^^ expected struct `Bar`, found usize\n-   |\n-   = note: expected type `Bar`\n-              found type `usize`\n+   |     ^^^^ expected struct `Bar`, found `usize`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9\n    |\n LL |     baz(&a);\n-   |         ^^ expected struct `Bar`, found usize\n+   |         ^^ expected struct `Bar`, found `usize`\n    |\n-   = note: expected type `Bar`\n-              found type `usize`\n    = note: required for the cast to the object type `dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors"}, {"sha": "fd7d89d1933816ee4c3a4cdac77872f2b502fee4", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,10 +7,10 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n    |                                           ------------- required by this bound in `foo`\n ...\n LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected isize, found usize\n+   |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n    |\n-   = note: expected type `&isize`\n-              found type `&usize`\n+   = note: expected reference `&isize`\n+              found reference `&usize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n@@ -21,10 +21,10 @@ LL |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n    |                                           ------------- required by this bound in `bar`\n ...\n LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected usize, found isize\n+   |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n    |\n-   = note: expected type `&usize`\n-              found type `&isize`\n+   = note: expected reference `&usize`\n+              found reference `&isize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:91:17"}, {"sha": "cebcae44fd00c3b1fd2119d7d69afdbf5b97c58a", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,7 +10,7 @@ LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found type parameter `T`\n    |\n-   = note: expected type `std::option::Option<T>`\n+   = note: expected enum `std::option::Option<T>`\n               found type `T`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters"}, {"sha": "d56b45dc2512e07154b9038b6787ab6c487241ee", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,27 +2,27 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n    |\n LL |     want_y(t);\n-   |     ^^^^^^ expected i32, found associated type\n+   |     ^^^^^^ expected `i32`, found associated type\n ...\n LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_y`\n    |\n-   = note: expected type `i32`\n-              found type `<T as Foo>::Y`\n+   = note:         expected type `i32`\n+           found associated type `<T as Foo>::Y`\n    = note: consider constraining the associated type `<T as Foo>::Y` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n LL |     want_x(t);\n-   |     ^^^^^^ expected u32, found associated type\n+   |     ^^^^^^ expected `u32`, found associated type\n ...\n LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n    |    ------       ----- required by this bound in `want_x`\n    |\n-   = note: expected type `u32`\n-              found type `<T as Foo>::X`\n+   = note:         expected type `u32`\n+           found associated type `<T as Foo>::X`\n    = note: consider constraining the associated type `<T as Foo>::X` to `u32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "82c0eba87ef3d48940fd27883f6e5aaf38c59319", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,8 @@ error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::It\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected i32, found u32\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: expected type `i32`\n-              found type `u32`\n    = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error"}, {"sha": "c993e1d27202d5a53ac33f843623d48b8bd24852", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -18,7 +18,7 @@ pub fn f2<T: Foo>(a: T) -> T::A {\n pub fn f1_int_int() {\n     f1(2i32, 4i32);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found i32\n+    //~| expected `u32`, found `i32`\n }\n \n pub fn f1_int_uint() {\n@@ -40,7 +40,7 @@ pub fn f1_uint_int() {\n pub fn f2_int() {\n     let _: i32 = f2(2i32);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }\n \n pub fn main() { }"}, {"sha": "f1b7798262403736a9c54b94dfc4982d9a3302c8", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:19:14\n    |\n LL |     f1(2i32, 4i32);\n-   |              ^^^^ expected u32, found i32\n+   |              ^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n   --> $DIR/associated-types-path-2.rs:41:18\n    |\n LL |     let _: i32 = f2(2i32);\n-   |                  ^^^^^^^^ expected i32, found u32\n+   |                  ^^^^^^^^ expected `i32`, found `u32`\n    |\n help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "8ef71087958ca5b2988b61456354d654d0fd82b2", "filename": "src/test/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,8 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found &()\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&()`\n    |\n-   = note: expected type `()`\n-              found type `&()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "e86b460f818b800b8fa6dbb7b288636bad9393f9", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,10 +7,7 @@ LL |     type Ok;\n LL | impl Bar for Foo {\n    | ---------------- in this `impl` item\n LL |     type Ok = ();\n-   |     ^^^^^^^^^^^^^ expected u32, found ()\n-   |\n-   = note: expected type `u32`\n-              found type `()`\n+   |     ^^^^^^^^^^^^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "afb8f146192ccddb69fcef8581251911e757c72a", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,21 +22,16 @@ error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n-   |    ---------------------------------      ^^ expected u8, found ()\n+   |    ---------------------------------      ^^ expected `u8`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note: expected type `u8`\n-              found type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected (), found u8\n+   |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: expected type `()`\n-              found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n@@ -50,42 +45,37 @@ LL | |         return 0u8;\n ...  |\n LL | |\n LL | | }\n-   | |_^ expected u8, found ()\n-   |\n-   = note: expected type `u8`\n-              found type `()`\n+   | |_^ expected `u8`, found `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n-   |                                       ^^^^^^ expected (), found u8\n+   |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: expected type `()`\n-              found type `u8`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `std::result::Result<u8, MyErr>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, MyErr>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n-   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `std::result::Result<u8, MyErr>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, MyErr>`\n+           found unit type `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "239f801c39d4e0f6b26726b2d2b9d9f89c39d0ca", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n-   |                  ^ expected u32, found opaque type\n+   |                  ^ expected `u32`, found opaque type\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "42e44472aca71054f14e47eb118785b2f1fea4b8", "filename": "src/test/ui/async-await/issue-66387-if-without-else.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,10 +4,8 @@ error[E0317]: if may be missing an else clause\n LL | /     if true {\n LL | |         return 0;\n LL | |     }\n-   | |_____^ expected (), found i32\n+   | |_____^ expected `()`, found `i32`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "1efc20082a08aef29ee62786d14ed323c2eb63a3", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,11 @@ error[E0308]: mismatched types\n LL |         take_u32(x)\n    |                  ^\n    |                  |\n-   |                  expected u32, found opaque type\n+   |                  expected `u32`, found opaque type\n    |                  help: consider using `.await` here: `x.await`\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "7a635a37107d2d718ae7febe501b4ce6d62a4a1b", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,11 @@ error[E0308]: mismatched types\n LL |     take_u32(x)\n    |              ^\n    |              |\n-   |              expected u32, found opaque type\n+   |              expected `u32`, found opaque type\n    |              help: consider using `.await` here: `x.await`\n    |\n-   = note: expected type `u32`\n-              found type `impl std::future::Future`\n+   = note:     expected type `u32`\n+           found opaque type `impl std::future::Future`\n \n error: aborting due to previous error\n "}, {"sha": "ce9ea7bc9edfc7c5dbc4b77d5b6e39e50d8ef70e", "filename": "src/test/ui/bad/bad-const-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,6 +1,4 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected type `std::string::String`\n-//~| found type `{integer}`\n //~| expected struct `std::string::String`, found integer\n fn main() { println!(\"{}\", i); }"}, {"sha": "f667779fab58f37f5daa7e51e8cd80faa20c4d40", "filename": "src/test/ui/bad/bad-const-type.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-const-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,9 +6,6 @@ LL | static i: String = 10;\n    |                    |\n    |                    expected struct `std::string::String`, found integer\n    |                    help: try using a conversion method: `10.to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "faba9911f866e248e287c9ff5a99934bccb18ace", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,8 +22,8 @@ error[E0580]: main function has wrong type\n LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(std::vec::Vec<std::string::String>)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "53b6d35e8f3a28612f7a9be153cfe2bb055a1344", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,8 +22,8 @@ error[E0580]: main function has wrong type\n LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(std::vec::Vec<std::string::String>)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(std::vec::Vec<std::string::String>)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1e57c2488e9efdabdfb26a79fb8fd71f365bca6c", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0580]: main function has wrong type\n LL | fn main(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: expected type `fn()`\n-              found type `fn(isize)`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn(isize)`\n \n error: aborting due to previous error\n "}, {"sha": "3615622ae369fddb6137ac2b9bb362db0721b64e", "filename": "src/test/ui/binop/binop-logic-float.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-float.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/binop-logic-float.rs:1:21\n    |\n LL | fn main() { let x = 1.0_f32 || 2.0_f32; }\n-   |                     ^^^^^^^ expected bool, found f32\n+   |                     ^^^^^^^ expected `bool`, found `f32`\n \n error[E0308]: mismatched types\n   --> $DIR/binop-logic-float.rs:1:32\n    |\n LL | fn main() { let x = 1.0_f32 || 2.0_f32; }\n-   |                                ^^^^^^^ expected bool, found f32\n+   |                                ^^^^^^^ expected `bool`, found `f32`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "50d857cd9d7ab42da85bf8509cc9bca9572329f1", "filename": "src/test/ui/binop/binop-logic-int.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-logic-int.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,19 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/binop-logic-int.rs:1:21\n    |\n LL | fn main() { let x = 1 && 2; }\n-   |                     ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                     ^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/binop-logic-int.rs:1:26\n    |\n LL | fn main() { let x = 1 && 2; }\n-   |                          ^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                          ^ expected `bool`, found integer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "264e7fc8e73a212cb17c9943318b97b3afdb074d", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let bar = 5;\n    |         ^^^ expected integer, found struct `foo::bar`\n-   |\n-   = note: expected type `{integer}`\n-              found type `foo::bar`\n \n error: aborting due to previous error\n "}, {"sha": "e39cd04f81b3c7869b4c2b21530c8adf4756f6b2", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,10 +7,7 @@ LL | |\n LL | |         foo();\n    | |              - help: consider removing this semicolon\n LL | |     };\n-   | |_____^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n+   | |_____^ expected `i32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "914886f81b4aedf4d0d0aa91b38a674cacc705a5", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-do.rs:3:9\n    |\n LL |         true\n-   |         ^^^^ expected (), found bool\n-   |\n-   = note: expected type `()`\n-              found type `bool`\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "0080d06dd207a5215a40dd6802ec91d34a6d3455", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,10 +4,7 @@ error[E0308]: mismatched types\n LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n LL |         true\n-   |         ^^^^ expected (), found bool\n-   |\n-   = note: expected type `()`\n-              found type `bool`\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "418059bf280ea1ffd02f82100147b0e9870362ba", "filename": "src/test/ui/block-result/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,8 +1,6 @@\n fn main() {\n     while true { //~ WARN denote infinite loops with\n         true //~  ERROR mismatched types\n-             //~| expected type `()`\n-             //~| found type `bool`\n-             //~| expected (), found bool\n+             //~| expected `()`, found `bool`\n     }\n }"}, {"sha": "638ce03cb36630755c51c53dc0b25887b119fef1", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,10 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n LL |         true\n-   |         ^^^^ expected (), found bool\n-   |\n-   = note: expected type `()`\n-              found type `bool`\n+   |         ^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "b45f2a6282136c63c6f1c410da25bb416c5ddd45", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,29 +2,23 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n LL | fn f() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n-   |\n-   = note: expected type `std::string::String`\n-              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n LL | fn g() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon\n-   |\n-   = note: expected type `std::string::String`\n-              found type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "61991643a4a569e790bc3d1685579ccbf697e3d9", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,15 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:1:14\n    |\n LL | fn blah() -> i32 {\n-   |    ----      ^^^ expected i32, found ()\n+   |    ----      ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "707d24cd6ab239ebf1ebb63101e0686b708c1522", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,29 +2,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note: expected type `std::string::String`\n-              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {\n-   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon\n-   |\n-   = note: expected type `std::string::String`\n-              found type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bd1d0de320e265185c417dd21a45c744445b66ad", "filename": "src/test/ui/block-result/issue-13624.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,9 +6,7 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `a::Enum`\n-    //~| expected (), found enum `a::Enum`\n+    //~| expected `()`, found enum `a::Enum`\n   }\n }\n \n@@ -21,9 +19,7 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected type `()`\n-        //~| found type `a::Enum`\n-        //~| expected (), found enum `a::Enum`\n+        //~| expected `()`, found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "90ffb4b2e52bc1e0b5d331b9fc9ad6061062adf5", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,21 +4,15 @@ error[E0308]: mismatched types\n LL |   pub fn get_enum_struct_variant() -> () {\n    |                                       -- expected `()` because of return type\n LL |     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n-   |\n-   = note: expected type `()`\n-              found type `a::Enum`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-13624.rs:22:9\n+  --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n    |             ------------------- this match expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `a::Enum`\n-   |\n-   = note: expected type `()`\n-              found type `a::Enum`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f9c890b0ed82a7891692311213f0767f5b5fba79", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL | fn foo(x: i32) {\n    |                - possibly return type missing here?\n LL |     |y| x + y\n-   |     ^^^^^^^^^ expected (), found closure\n+   |     ^^^^^^^^^ expected `()`, found closure\n    |\n-   = note: expected type `()`\n-              found type `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/issue-20862.rs:2:5: 2:14 x:_]`\n \n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:7:13"}, {"sha": "79eb1d4b890f087d3de14c304636cb3327406630", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -15,10 +15,7 @@ LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n LL |   b + 3\n-   |   ^^^^^ expected (), found struct `Bob`\n-   |\n-   = note: expected type `()`\n-              found type `Bob`\n+   |   ^^^^^ expected `()`, found struct `Bob`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "577987a4596cbebed7aae5cbfcea8598a159a90b", "filename": "src/test/ui/block-result/issue-5500.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     &panic!()\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `&_`\n-    //~| expected (), found reference\n+    //~| expected unit type `()`\n+    //~| found reference `&_`\n+    //~| expected `()`, found reference\n }"}, {"sha": "9d9f7ac2e4a0bcc119a483118859d7adb200a1a4", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,11 +6,11 @@ LL | fn main() {\n LL |     &panic!()\n    |     ^^^^^^^^^\n    |     |\n-   |     expected (), found reference\n+   |     expected `()`, found reference\n    |     help: consider removing the borrow: `panic!()`\n    |\n-   = note: expected type `()`\n-              found type `&_`\n+   = note: expected unit type `()`\n+              found reference `&_`\n \n error: aborting due to previous error\n "}, {"sha": "3dce459ddbdaea2c7b66ede0982c9c5a8ed4296d", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,8 @@ error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:9:5\n    |\n LL |     foo()\n-   |     ^^^^^ expected (), found usize\n+   |     ^^^^^ expected `()`, found `usize`\n    |\n-   = note: expected type `()`\n-              found type `usize`\n help: try adding a semicolon\n    |\n LL |     foo();"}, {"sha": "421c57fc74a0f647ef437742900e8bae137579c0", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,8 +22,8 @@ error[E0308]: method not compatible with trait\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n-              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+   = note: expected fn pointer `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n+              found fn pointer `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n note: the lifetime `'c` as defined on the method body at 27:24...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:27:24\n    |"}, {"sha": "bbc9f21edb06e8d3859302549bebae996badd179", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,32 +5,32 @@ LL |           let _: ! = {\n    |  ____________________^\n LL | |             'a: while break 'a {};\n LL | |         };\n-   | |_________^ expected !, found ()\n+   | |_________^ expected `!`, found `()`\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:14:13\n    |\n LL | /             while false {\n LL | |                 break\n LL | |             }\n-   | |_____________^ expected !, found ()\n+   | |_____________^ expected `!`, found `()`\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:22:13\n    |\n LL | /             while false {\n LL | |                 return\n LL | |             }\n-   | |_____________^ expected !, found ()\n+   | |_____________^ expected `!`, found `()`\n    |\n-   = note: expected type `!`\n-              found type `()`\n+   = note:   expected type `!`\n+           found unit type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3d1710648daa26b3ec84c7cf02bae3d3ffa88708", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -28,17 +28,17 @@ error[E0308]: mismatched types\n LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |                                                        ^^^ expected non-variadic fn, found variadic function\n    |\n-   = note: expected type `unsafe extern \"C\" fn(isize, u8)`\n-              found type `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n+   = note: expected fn pointer `unsafe extern \"C\" fn(isize, u8)`\n+                 found fn item `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:20:54\n    |\n LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |                                                      ^^^ expected variadic fn, found non-variadic function\n    |\n-   = note: expected type `extern \"C\" fn(isize, u8, ...)`\n-              found type `extern \"C\" fn(isize, u8) {bar}`\n+   = note: expected fn pointer `extern \"C\" fn(isize, u8, ...)`\n+                 found fn item `extern \"C\" fn(isize, u8) {bar}`\n \n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-1.rs:22:19"}, {"sha": "c80ed5ebf5cef6d0b1be235a624a71d98d0a99be", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     ap\n    |     ^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'f>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'f>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 7:78...\n   --> $DIR/variadic-ffi-4.rs:7:78\n    |\n@@ -26,8 +26,8 @@ error[E0308]: mismatched types\n LL |     ap\n    |     ^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'static>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'static>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 11:79...\n   --> $DIR/variadic-ffi-4.rs:11:79\n    |\n@@ -69,8 +69,8 @@ error[E0308]: mismatched types\n LL |     *ap0 = ap1;\n    |            ^^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'_>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 19:87...\n   --> $DIR/variadic-ffi-4.rs:19:87\n    |\n@@ -121,8 +121,8 @@ error[E0308]: mismatched types\n LL |     ap0 = &mut ap1;\n    |           ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&mut core::ffi::VaListImpl<'_>`\n-              found type `&mut core::ffi::VaListImpl<'_>`\n+   = note: expected mutable reference `&mut core::ffi::VaListImpl<'_>`\n+              found mutable reference `&mut core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 23:83...\n   --> $DIR/variadic-ffi-4.rs:23:83\n    |\n@@ -189,8 +189,8 @@ error[E0308]: mismatched types\n LL |     *ap0 = ap1.clone();\n    |            ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `core::ffi::VaListImpl<'_>`\n-              found type `core::ffi::VaListImpl<'_>`\n+   = note: expected struct `core::ffi::VaListImpl<'_>`\n+              found struct `core::ffi::VaListImpl<'_>`\n note: the scope of call-site for function at 30:87...\n   --> $DIR/variadic-ffi-4.rs:30:87\n    |"}, {"sha": "b8152caf3d29f21dd57b210240747dc2f28da230", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/type_inference.rs:21:14\n    |\n LL |     only_foo(x);\n-   |              ^ expected i32, found floating-point number\n-   |\n-   = note: expected type `i32`\n-              found type `{float}`\n+   |              ^ expected `i32`, found floating-point number\n \n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5"}, {"sha": "a15444207f5cd422ba989cdefcd64031335bc5ff", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&u32)`\n-              found type `fn(&'x u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `fn(&'x u32)`\n note: the anonymous lifetime #2 defined on the body at 14:48...\n   --> $DIR/expect-fn-supply-fn.rs:14:48\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched types\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `fn(&u32)`\n-              found type `fn(&'x u32)`\n+   = note: expected fn pointer `fn(&u32)`\n+              found fn pointer `fn(&'x u32)`\n note: the lifetime `'x` as defined on the function body at 11:36...\n   --> $DIR/expect-fn-supply-fn.rs:11:36\n    |"}, {"sha": "f6991a23f4d4d215662539d49df458011b02d037", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -20,19 +20,19 @@ error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:4:11\n    |\n LL |     while |_: [_; continue]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^ expected bool, found closure\n+   |           ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-              found type `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n+           found closure `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n \n error[E0308]: mismatched types\n   --> $DIR/closure-array-break-length.rs:7:11\n    |\n LL |     while |_: [_; break]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^ expected bool, found closure\n+   |           ^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-              found type `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`\n+           found closure `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "eb860f9aef243d1d7e5ecf8382e8b027a4ebbab0", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -24,8 +24,8 @@ error[E0308]: mismatched types\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&u32`\n-              found type `&'x u32`\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n note: the anonymous lifetime #2 defined on the body at 37:29...\n   --> $DIR/expect-region-supply-region.rs:37:29\n    |\n@@ -50,8 +50,8 @@ error[E0308]: mismatched types\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                                 ^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `&u32`\n-              found type `&'x u32`\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n note: the lifetime `'x` as defined on the function body at 32:30...\n   --> $DIR/expect-region-supply-region.rs:32:30\n    |"}, {"sha": "9945530a5a7fe9fd4fffb1f0d9f0dfbdd8eed442", "filename": "src/test/ui/closures/closure-no-fn-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n    |                             ^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found closure\n    |\n-   = note: expected type `fn(u8) -> u8`\n-              found type `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`\n+   = note: expected fn pointer `fn(u8) -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-1.rs:6:29: 6:50 a:_]`\n \n error: aborting due to previous error\n "}, {"sha": "f3b0d155dd9fe86c936a57cef4f27115fa0e0189", "filename": "src/test/ui/closures/closure-no-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-no-fn-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let bar: fn() -> u8 = || { b };\n    |                           ^^^^^^^^ expected fn pointer, found closure\n    |\n-   = note: expected type `fn() -> u8`\n-              found type `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`\n+   = note: expected fn pointer `fn() -> u8`\n+                 found closure `[closure@$DIR/closure-no-fn-2.rs:6:27: 6:35 b:_]`\n \n error: aborting due to previous error\n "}, {"sha": "63236cf542464ec9e6619b76a29f34e05c46157c", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |\n-   = note: expected type `for<'r> fn(&'r str)`\n-              found type `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n+   = note: expected fn pointer `for<'r> fn(&'r str)`\n+                 found closure `[closure@$DIR/closure-reform-bad.rs:10:13: 10:50 string:_]`\n \n error: aborting due to previous error\n "}, {"sha": "c3f19d20d3952d768e88cfff25f30a4c689866fe", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,10 +10,7 @@ error[E0308]: mismatched types\n LL | fn foo() {\n    |          - help: try adding a return type: `-> &'static str`\n LL |     \"bar            boo\"\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n-   |\n-   = note: expected type `()`\n-              found type `&'static str`\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "303d83d342625c5379f07a4612f219988e77e7b9", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,127 +2,127 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:13\n    |\n LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n    |\n LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:11:13\n    |\n LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n LL |     let _ = box { |x| (x as u8) }: Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n-   = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n-              found type `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n+   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n+              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:13:19: 13:32]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n LL |     let _ = box if true { false } else { true }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n    |\n-   = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n-              found type `std::boxed::Box<bool>`\n+   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n+              found struct `std::boxed::Box<bool>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n LL |     let _ = box match true { true => 'a', false => 'b' }: Box<dyn Debug>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n    |\n-   = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n-              found type `std::boxed::Box<char>`\n+   = note: expected struct `std::boxed::Box<dyn std::fmt::Debug>`\n+              found struct `std::boxed::Box<char>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n    |\n LL |     let _ = &{ [1, 2, 3] }: &[i32];\n-   |             ^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:13\n    |\n LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:19:13\n    |\n LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `&[i32]`\n-              found type `&[i32; 3]`\n+   = note: expected reference `&[i32]`\n+              found reference `&[i32; 3]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n LL |     let _ = &{ |x| (x as u8) }: &dyn Fn(i32) -> _;\n-   |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n-   = note: expected type `&dyn std::ops::Fn(i32) -> u8`\n-              found type `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n+   = note: expected reference `&dyn std::ops::Fn(i32) -> u8`\n+              found reference `&[closure@$DIR/coerce-expect-unsized-ascribed.rs:21:16: 21:29]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n LL |     let _ = &if true { false } else { true }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `bool`\n    |\n-   = note: expected type `&dyn std::fmt::Debug`\n-              found type `&bool`\n+   = note: expected reference `&dyn std::fmt::Debug`\n+              found reference `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n LL |     let _ = &match true { true => 'a', false => 'b' }: &dyn Debug;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::fmt::Debug`, found `char`\n    |\n-   = note: expected type `&dyn std::fmt::Debug`\n-              found type `&char`\n+   = note: expected reference `&dyn std::fmt::Debug`\n+              found reference `&char`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:13\n    |\n LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n-   |             ^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n+   |             ^^^^^^^^^^^^^^^^^^^ expected slice `[i32]`, found array `[i32; 3]`\n    |\n-   = note: expected type `std::boxed::Box<[i32]>`\n-              found type `std::boxed::Box<[i32; 3]>`\n+   = note: expected struct `std::boxed::Box<[i32]>`\n+              found struct `std::boxed::Box<[i32; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n LL |     let _ = Box::new(|x| (x as u8)): Box<dyn Fn(i32) -> _>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait `std::ops::Fn`, found closure\n    |\n-   = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n-              found type `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n+   = note: expected struct `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`\n+              found struct `std::boxed::Box<[closure@$DIR/coerce-expect-unsized-ascribed.rs:26:22: 26:35]>`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "43f0b55856d3c6eba5908cd584b83d67297973bc", "filename": "src/test/ui/coercion/coerce-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = 0;\n     f(&x);\n     //~^ ERROR mismatched types\n-    //~| expected type `&mut i32`\n-    //~| found type `&{integer}`\n+    //~| expected mutable reference `&mut i32`\n+    //~| found reference `&{integer}`\n     //~| types differ in mutability\n }"}, {"sha": "2601ca5e91e5b4253a85258d7998dced020b674f", "filename": "src/test/ui/coercion/coerce-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-mut.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     f(&x);\n    |       ^^ types differ in mutability\n    |\n-   = note: expected type `&mut i32`\n-              found type `&{integer}`\n+   = note: expected mutable reference `&mut i32`\n+                      found reference `&{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "9629a247e016d29dd3644b01e463e7fa8ec58f77", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:4:17\n    |\n LL |     foo(return, 22, 44);\n-   |                 ^^ expected !, found integer\n+   |                 ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:16:13\n    |\n LL |     foo(22, 44, return);\n-   |             ^^ expected !, found integer\n+   |             ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:24:12\n    |\n LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverge.\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:34:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:43:12\n    |\n LL |     foo(a, b, c);\n-   |            ^ expected !, found integer\n+   |            ^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -47,16 +47,16 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:48:21\n    |\n LL |     let x: [!; 2] = [return, 22];\n-   |                     ^^^^^^^^^^^^ expected !, found integer\n+   |                     ^^^^^^^^^^^^ expected `!`, found integer\n    |\n-   = note: expected type `[!; 2]`\n-              found type `[{integer}; 2]`\n+   = note: expected array `[!; 2]`\n+              found array `[{integer}; 2]`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:53:22\n    |\n LL |     let x: [!; 2] = [22, return];\n-   |                      ^^ expected !, found integer\n+   |                      ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -65,7 +65,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:58:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, 66);\n-   |                                     ^^ expected !, found integer\n+   |                                     ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:63:41\n    |\n LL |     let x: (usize, !, usize) = (return, 44, 66);\n-   |                                         ^^ expected !, found integer\n+   |                                         ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:74:37\n    |\n LL |     let x: (usize, !, usize) = (22, 44, return);\n-   |                                     ^^ expected !, found integer\n+   |                                     ^^ expected `!`, found integer\n    |\n    = note: expected type `!`\n               found type `{integer}`"}, {"sha": "f1911dde981f5859c0163bcf9b161568f50a438c", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,27 +2,24 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n LL | fn plus_one(x: i32) -> i32 {\n-   |    --------            ^^^ expected i32, found ()\n+   |    --------            ^^^ expected `i32`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n-   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |\n-   = note: expected type `std::result::Result<u8, u64>`\n-              found type `()`\n+   = note:   expected enum `std::result::Result<u8, u64>`\n+           found unit type `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b756c8f8203a086df7e2b8690d5a1c728db3f44a", "filename": "src/test/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,6 +3,5 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected type `&[i32]`\n-    //~| expected &[i32], found array of 1 element\n+    //~| expected `&[i32]`, found array `[{integer}; 1]`\n }"}, {"sha": "0e7fc06a9b720b7f78790d17fa1bdb53c4805e0c", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |                     ^^^\n    |                     |\n-   |                     expected &[i32], found array of 1 element\n+   |                     expected `&[i32]`, found array `[{integer}; 1]`\n    |                     help: consider borrowing here: `&[0]`\n-   |\n-   = note: expected type `&[i32]`\n-              found type `[{integer}; 1]`\n \n error: aborting due to previous error\n "}, {"sha": "f1f8a663f21209f45f803517c1560da72861238c", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,8 +10,8 @@ LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |        |       found type parameter\n    |        expected type parameter\n    |\n-   = note: expected type `fn(&E, F) -> F`\n-              found type `fn(&E, G) -> G`\n+   = note: expected fn pointer `fn(&E, F) -> F`\n+              found fn pointer `fn(&E, G) -> G`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "aefd514f7a68ec65bb145a5ab9a33a9428f321f6", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8]));\n    |                                                                   ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n-   |\n-   = note: expected type `[u8; 3]`\n-              found type `[u8; 2]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n    |\n LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8, 2u8]);\n    |                                                                 ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n-   |\n-   = note: expected type `[u8; 2]`\n-              found type `[u8; 3]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8f61e35e492cf0c98fa4faeff172791872ec171a", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,17 +12,17 @@ error[E0308]: mismatched types\n LL |     let _: Checked<not_one> = Checked::<not_two>;\n    |                               ^^^^^^^^^^^^^^^^^^ expected `not_one`, found `not_two`\n    |\n-   = note: expected type `Checked<not_one>`\n-              found type `Checked<not_two>`\n+   = note: expected struct `Checked<not_one>`\n+              found struct `Checked<not_two>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:20:24\n    |\n LL |     let _ = Checked::<{generic_arg::<u32>}>;\n-   |                        ^^^^^^^^^^^^^^^^^^ expected usize, found u32\n+   |                        ^^^^^^^^^^^^^^^^^^ expected `usize`, found `u32`\n    |\n-   = note: expected type `fn(usize) -> bool`\n-              found type `fn(u32) -> bool {generic_arg::<u32>}`\n+   = note: expected fn pointer `fn(usize) -> bool`\n+                 found fn item `fn(u32) -> bool {generic_arg::<u32>}`\n \n error[E0282]: type annotations needed\n   --> $DIR/fn-const-param-infer.rs:22:23\n@@ -36,8 +36,8 @@ error[E0308]: mismatched types\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `generic::<u32>`, found `generic::<u16>`\n    |\n-   = note: expected type `Checked<generic::<u32>>`\n-              found type `Checked<generic::<u16>>`\n+   = note: expected struct `Checked<generic::<u32>>`\n+              found struct `Checked<generic::<u16>>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ff5c59fa375fffb86a040eaef510720dd65693e6", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let _: Const<{15 as *const _}> = Const::<{10 as *const _}>;\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{pointer}`, found `{pointer}`\n    |\n-   = note: expected type `Const<{pointer}>`\n-              found type `Const<{pointer}>`\n+   = note: expected struct `Const<{pointer}>`\n+              found struct `Const<{pointer}>`\n \n error: aborting due to previous error\n "}, {"sha": "9d11da13315857a435509ec80ac774de3c1bdfea", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,26 +12,26 @@ error[E0308]: mismatched types\n LL |     let _: ConstString<\"Hello\"> = ConstString::<\"World\">;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^ expected `\"Hello\"`, found `\"World\"`\n    |\n-   = note: expected type `ConstString<\"Hello\">`\n-              found type `ConstString<\"World\">`\n+   = note: expected struct `ConstString<\"Hello\">`\n+              found struct `ConstString<\"World\">`\n \n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:11:33\n    |\n LL |     let _: ConstString<\"\u2107\u31c8\u21a6\"> = ConstString::<\"\u2107\u31c8\u21a5\">;\n    |                                  ^^^^^^^^^^^^^^^^^^^^^ expected `\"\u2107\u31c8\u21a6\"`, found `\"\u2107\u31c8\u21a5\"`\n    |\n-   = note: expected type `ConstString<\"\u2107\u31c8\u21a6\">`\n-              found type `ConstString<\"\u2107\u31c8\u21a5\">`\n+   = note: expected struct `ConstString<\"\u2107\u31c8\u21a6\">`\n+              found struct `ConstString<\"\u2107\u31c8\u21a5\">`\n \n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:13:33\n    |\n LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    |                                 ^^^^^^^^^^^^^^^^^^^^ expected `b\"AAA\"`, found `b\"BBB\"`\n    |\n-   = note: expected type `ConstBytes<b\"AAA\">`\n-              found type `ConstBytes<b\"BBB\">`\n+   = note: expected struct `ConstBytes<b\"AAA\">`\n+              found struct `ConstBytes<b\"BBB\">`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0ce98f1455c9957f78eb5ec33bbe50762078291d", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,17 +12,17 @@ error[E0308]: mismatched types\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n    |\n-   = note: expected type `A<'_, _, 2u32, _>`\n-              found type `A<'_, _, 4u32, _>`\n+   = note: expected struct `A<'_, _, 2u32, _>`\n+              found struct `A<'_, _, 4u32, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u16, found u32\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n    |\n-   = note: expected type `A<'a, u16, _, _>`\n-              found type `A<'b, u32, _, _>`\n+   = note: expected struct `A<'a, u16, _, _>`\n+              found struct `A<'b, u32, _, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eae93b72ddc86e5eeba5babac1fa2613add73fac", "filename": "src/test/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,18 +3,12 @@ error[E0308]: mismatched types\n    |\n LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n    |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 element\n-   |\n-   = note: expected type `[i32; 2]`\n-              found type `[i32; 1]`\n \n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:10:44\n    |\n LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n    |                                            ^^^^^^^ expected an array with a fixed size of 1 element, found one with 2 elements\n-   |\n-   = note: expected type `[i32; 1]`\n-              found type `[i32; 2]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "282f5ccde772fd62c511e001ec7eeaad68fbad3c", "filename": "src/test/ui/consts/const-cast-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-cast-wrong-type.rs:2:23\n    |\n LL | static b: *const i8 = &a as *const i8;\n-   |                       ^^^^^^^^^^^^^^^ expected u8, found i8\n+   |                       ^^^^^^^^^^^^^^^ expected `u8`, found `i8`\n \n error: aborting due to previous error\n "}, {"sha": "3da34fe9af7ecbe8ba069bd644be8d4a769630b5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-overflow-3b.rs:18:22\n    |\n LL |     = [0; (i8::MAX + 1u8) as usize];\n-   |                      ^^^ expected i8, found u8\n+   |                      ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-3b.rs:18:20"}, {"sha": "2a4585faf1493aa176016679646c76d9cc138a21", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,7 +11,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n-    //~| expected i8, found u8\n+    //~| expected `i8`, found `u8`\n     //~| ERROR cannot add `u8` to `i8`\n     = [0; (i8::MAX as usize) + 1];\n "}, {"sha": "5b2c4116c4b1dc9aa7c44b24bb6c207b3235e175", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-overflow-4b.rs:12:30\n    |\n LL |     : [u32; (i8::MAX as i8 + 1u8) as usize]\n-   |                              ^^^ expected i8, found u8\n+   |                              ^^^ expected `i8`, found `u8`\n \n error[E0277]: cannot add `u8` to `i8`\n   --> $DIR/const-eval-overflow-4b.rs:12:28"}, {"sha": "82f101b47cfebba6cedece8ca3e45d87307ba46c", "filename": "src/test/ui/consts/const-eval/const-eval-span.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,7 @@ const CONSTANT: S = S(0);\n enum E {\n     V = CONSTANT,\n     //~^ ERROR mismatched types\n-    //~| expected isize, found struct `S`\n-    //~|         found type `S`\n+    //~| expected `isize`, found struct `S`\n }\n \n fn main() {}"}, {"sha": "c5b001899ff924a4af4c0bd4ede6562a6f71646e", "filename": "src/test/ui/consts/const-eval/const-eval-span.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-span.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-eval-span.rs:9:9\n    |\n LL |     V = CONSTANT,\n-   |         ^^^^^^^^ expected isize, found struct `S`\n-   |\n-   = note: expected type `isize`\n-              found type `S`\n+   |         ^^^^^^^^ expected `isize`, found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "6924956bdf706f174ccc7a68c4ed529d30f2ad8c", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,76 +1,76 @@\n const X: usize = 42 && 39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n //~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n //~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n //~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected bool, found integer\n+//~| expected `bool`, found integer\n //~| ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n //~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n //~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n-//~| expected usize, found bool\n+//~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "9001fefd1029f314bc95f9bae48efc75a5baf0cd", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 18, "deletions": 42, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,25 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:18\n    |\n LL | const X: usize = 42 && 39;\n-   |                  ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                  ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:24\n    |\n LL | const X: usize = 42 && 39;\n-   |                        ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                        ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:1:18\n    |\n LL | const X: usize = 42 && 39;\n-   |                  ^^^^^^^^ expected usize, found bool\n+   |                  ^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:8:18\n@@ -32,25 +26,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n-   |                   ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:25\n    |\n LL | const X1: usize = 42 || 39;\n-   |                         ^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:11:19\n    |\n LL | const X1: usize = 42 || 39;\n-   |                   ^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:18:19\n@@ -62,25 +50,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n-   |                   ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:26\n    |\n LL | const X2: usize = -42 || -39;\n-   |                          ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X2: usize = -42 || -39;\n-   |                   ^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:28:19\n@@ -92,25 +74,19 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X3: usize = -42 && -39;\n-   |                   ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:26\n    |\n LL | const X3: usize = -42 && -39;\n-   |                          ^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X3: usize = -42 && -39;\n-   |                   ^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:38:19\n@@ -122,7 +98,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:41:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n-   |                  ^^^^^^^^^^^^ expected usize, found bool\n+   |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:44:19\n@@ -134,7 +110,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:50:20\n@@ -146,7 +122,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:53:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:56:20\n@@ -158,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:59:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n-   |                   ^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:62:20\n@@ -170,7 +146,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:65:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n-   |                   ^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:68:20\n@@ -182,7 +158,7 @@ error[E0308]: mismatched types\n   --> $DIR/const-integer-bool-ops.rs:71:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n-   |                   ^^^^^^^^^^^^ expected usize, found bool\n+   |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:74:20"}, {"sha": "763263c6aeb4f9a86c81c99459d07590c6b06733", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@\n \n const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n-//~| expected tuple, found usize\n+//~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n //~^ ERROR evaluation of constant value failed\n "}, {"sha": "8e4a092e40f5e37f4b968bb139138b82615576a5", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/const-tup-index-span.rs:3:23\n    |\n LL | const TUP: (usize,) = 5usize << 64;\n-   |                       ^^^^^^^^^^^^ expected tuple, found usize\n+   |                       ^^^^^^^^^^^^ expected tuple, found `usize`\n    |\n-   = note: expected type `(usize,)`\n-              found type `usize`\n+   = note: expected tuple `(usize,)`\n+               found type `usize`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-tup-index-span.rs:6:18"}, {"sha": "17bb27d4b72fa21cf5442cad9c8c3021d49e1993", "filename": "src/test/ui/consts/const-type-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-type-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,13 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/const-type-mismatch.rs:4:21\n    |\n LL | const TWELVE: u16 = TEN + 2;\n-   |                     ^^^^^^^ expected u16, found u8\n+   |                     ^^^^^^^ expected `u16`, found `u8`\n \n error[E0308]: mismatched types\n   --> $DIR/const-type-mismatch.rs:9:27\n    |\n LL |     const ALSO_TEN: u16 = TEN;\n-   |                           ^^^ expected u16, found u8\n+   |                           ^^^ expected `u16`, found `u8`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "848ccf94da2b65164d56039b2097624c9576a026", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/enum-discr-type-err.rs:18:21\n    |\n LL |               $( $v = $s::V, )*\n-   |                       ^^^^^ expected isize, found i32\n+   |                       ^^^^^ expected `isize`, found `i32`\n ...\n LL | / mac! {\n LL | |     A = F,"}, {"sha": "1aca37a6fb82ee6b630d75eace760fd6059ccab8", "filename": "src/test/ui/conversion-methods.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,23 +4,17 @@ error[E0308]: mismatched types\n LL |     let _tis_an_instants_play: String = \"'Tis a fond Ambush\u2014\";\n    |                                         ^^^^^^^^^^^^^^^^^^^^^\n    |                                         |\n-   |                                         expected struct `std::string::String`, found reference\n+   |                                         expected struct `std::string::String`, found `&str`\n    |                                         help: try using a conversion method: `\"'Tis a fond Ambush\u2014\".to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:6:40\n    |\n LL |     let _just_to_make_bliss: PathBuf = Path::new(\"/ern/her/own/surprise\");\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                                        |\n-   |                                        expected struct `std::path::PathBuf`, found reference\n+   |                                        expected struct `std::path::PathBuf`, found `&std::path::Path`\n    |                                        help: try using a conversion method: `Path::new(\"/ern/her/own/surprise\").to_path_buf()`\n-   |\n-   = note: expected type `std::path::PathBuf`\n-              found type `&std::path::Path`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:9:40\n@@ -30,21 +24,18 @@ LL |     let _but_should_the_play: String = 2; // Perhaps surprisingly, we sugge\n    |                                        |\n    |                                        expected struct `std::string::String`, found integer\n    |                                        help: try using a conversion method: `2.to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/conversion-methods.rs:12:47\n    |\n LL |     let _prove_piercing_earnest: Vec<usize> = &[1, 2, 3];\n    |                                               ^^^^^^^^^^\n    |                                               |\n-   |                                               expected struct `std::vec::Vec`, found reference\n+   |                                               expected struct `std::vec::Vec`, found `&[{integer}; 3]`\n    |                                               help: try using a conversion method: `(&[1, 2, 3]).to_vec()`\n    |\n-   = note: expected type `std::vec::Vec<usize>`\n-              found type `&[{integer}; 3]`\n+   = note: expected struct `std::vec::Vec<usize>`\n+           found reference `&[{integer}; 3]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ce42b696ddf8ea5e284da68bac4d9c13028def71", "filename": "src/test/ui/cross/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,6 +8,6 @@ impl Trait for Foo {}\n pub fn main() {\n     let x: Box<dyn Trait> = Box::new(Foo);\n     let _y: &dyn Trait = x; //~ ERROR E0308\n-                            //~| expected type `&dyn Trait`\n-                            //~| found type `std::boxed::Box<dyn Trait>`\n+                            //~| expected reference `&dyn Trait`\n+                            //~| found struct `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "9bffa6bd111a610ee670a215ccec9ccb567725e8", "filename": "src/test/ui/cross/cross-borrow-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-borrow-trait.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,11 @@ error[E0308]: mismatched types\n LL |     let _y: &dyn Trait = x;\n    |                          ^\n    |                          |\n-   |                          expected &dyn Trait, found struct `std::boxed::Box`\n+   |                          expected `&dyn Trait`, found struct `std::boxed::Box`\n    |                          help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn Trait`\n-              found type `std::boxed::Box<dyn Trait>`\n+   = note: expected reference `&dyn Trait`\n+                 found struct `std::boxed::Box<dyn Trait>`\n \n error: aborting due to previous error\n "}, {"sha": "226f6fb620fc23ace028d445ecc3d31be8549509", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,68 +4,51 @@ error[E0308]: mismatched types\n LL |     foo(s);\n    |         ^\n    |         |\n-   |         expected struct `std::string::String`, found reference\n+   |         expected struct `std::string::String`, found `&std::string::String`\n    |         help: try using a conversion method: `s.to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:14:10\n    |\n LL |     foo3(u);\n    |          ^\n    |          |\n-   |          expected u32, found &u32\n+   |          expected `u32`, found `&u32`\n    |          help: consider dereferencing the borrow: `*u`\n-   |\n-   = note: expected type `u32`\n-              found type `&u32`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found reference\n+   |         expected struct `std::string::String`, found `&std::string::String`\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         expected struct `std::string::String`, found mutable reference\n+   |         expected struct `std::string::String`, found `&mut std::string::String`\n    |         help: consider removing the borrow: `\"aaa\".to_owned()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&mut std::string::String`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20\n    |\n LL |     ($x:expr) => { &$x }\n-   |                    ^^^ expected u32, found &{integer}\n+   |                    ^^^ expected `u32`, found `&{integer}`\n ...\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n-   |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n-   = note: expected type `i32`\n-              found type `&i32`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0308]: mismatched types\n@@ -74,47 +57,35 @@ error[E0308]: mismatched types\n LL |     let s = S { u };\n    |                 ^\n    |                 |\n-   |                 expected &u32, found integer\n+   |                 expected `&u32`, found integer\n    |                 help: consider borrowing here: `u: &u`\n-   |\n-   = note: expected type `&u32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:41:20\n    |\n LL |     let s = S { u: u };\n    |                    ^\n    |                    |\n-   |                    expected &u32, found integer\n+   |                    expected `&u32`, found integer\n    |                    help: consider borrowing here: `&u`\n-   |\n-   = note: expected type `&u32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:44:17\n    |\n LL |     let r = R { i };\n    |                 ^\n    |                 |\n-   |                 expected u32, found &{integer}\n+   |                 expected `u32`, found `&{integer}`\n    |                 help: consider dereferencing the borrow: `i: *i`\n-   |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:46:20\n    |\n LL |     let r = R { i: i };\n    |                    ^\n    |                    |\n-   |                    expected u32, found &{integer}\n+   |                    expected `u32`, found `&{integer}`\n    |                    help: consider dereferencing the borrow: `*i`\n-   |\n-   = note: expected type `u32`\n-              found type `&{integer}`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "fb92196b2bd56b57a6628d46a5e9e0a2ee2137f8", "filename": "src/test/ui/destructure-trait-ref.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -31,16 +31,16 @@ fn main() {\n     // n > m\n     let &&x = &1isize as &dyn T;\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `&_`\n-    //~| expected trait T, found reference\n+    //~| expected trait object `dyn T`\n+    //~| found reference `&_`\n+    //~| expected trait `T`, found reference\n     let &&&x = &(&1isize as &dyn T);\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `&_`\n-    //~| expected trait T, found reference\n+    //~| expected trait object `dyn T`\n+    //~| found reference `&_`\n+    //~| expected trait `T`, found reference\n     let box box x = box 1isize as Box<dyn T>;\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn T`\n-    //~| found type `std::boxed::Box<_>`\n+    //~| expected trait object `dyn T`\n+    //~| found struct `std::boxed::Box<_>`\n }"}, {"sha": "f77291969d2db7610957f27101ee855be277ef52", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -22,32 +22,32 @@ error[E0308]: mismatched types\n LL |     let &&x = &1isize as &dyn T;\n    |          ^^\n    |          |\n-   |          expected trait T, found reference\n+   |          expected trait `T`, found reference\n    |          help: you can probably remove the explicit borrow: `x`\n    |\n-   = note: expected type `dyn T`\n-              found type `&_`\n+   = note: expected trait object `dyn T`\n+                 found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:37:11\n    |\n LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^\n    |           |\n-   |           expected trait T, found reference\n+   |           expected trait `T`, found reference\n    |           help: you can probably remove the explicit borrow: `x`\n    |\n-   = note: expected type `dyn T`\n-              found type `&_`\n+   = note: expected trait object `dyn T`\n+                 found reference `&_`\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:42:13\n    |\n LL |     let box box x = box 1isize as Box<dyn T>;\n-   |             ^^^^^ expected trait T, found struct `std::boxed::Box`\n+   |             ^^^^^ expected trait `T`, found struct `std::boxed::Box`\n    |\n-   = note: expected type `dyn T`\n-              found type `std::boxed::Box<_>`\n+   = note: expected trait object `dyn T`\n+                    found struct `std::boxed::Box<_>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "16b80a6f4123637461b902e8cd4127900c4fbdde", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,9 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:11:43\n    |\n LL |     this_function_expects_a_double_option(n);\n-   |                                           ^ expected enum `DoubleOption`, found usize\n+   |                                           ^ expected enum `DoubleOption`, found `usize`\n    |\n-   = note: expected type `DoubleOption<_>`\n+   = note: expected enum `DoubleOption<_>`\n               found type `usize`\n help: try using a variant of the expected enum\n    |\n@@ -18,9 +18,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _c = Context { wrapper: Payload{} };\n    |                                 ^^^^^^^^^ expected struct `Wrapper`, found struct `Payload`\n-   |\n-   = note: expected type `Wrapper`\n-              found type `Payload`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e2c3c08a8d914ce476c7421b017847e6dc2f9e09", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.stderr", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,53 +4,38 @@ error[E0308]: mismatched types\n LL |     let sixteen: f32 = 16;\n    |                        ^^\n    |                        |\n-   |                        expected f32, found integer\n+   |                        expected `f32`, found integer\n    |                        help: use a float literal: `16.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:5:38\n    |\n LL |     let a_million_and_seventy: f64 = 1_000_070;\n    |                                      ^^^^^^^^^\n    |                                      |\n-   |                                      expected f64, found integer\n+   |                                      expected `f64`, found integer\n    |                                      help: use a float literal: `1_000_070.0`\n-   |\n-   = note: expected type `f64`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:8:30\n    |\n LL |     let negative_nine: f32 = -9;\n    |                              ^^\n    |                              |\n-   |                              expected f32, found integer\n+   |                              expected `f32`, found integer\n    |                              help: use a float literal: `-9.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:15:30\n    |\n LL |     let sixteen_again: f64 = 0x10;\n-   |                              ^^^^ expected f64, found integer\n-   |\n-   = note: expected type `f64`\n-              found type `{integer}`\n+   |                              ^^^^ expected `f64`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53280-expected-float-found-integer-literal.rs:17:30\n    |\n LL |     let and_once_more: f32 = 0o20;\n-   |                              ^^^^ expected f32, found integer\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n+   |                              ^^^^ expected `f32`, found integer\n \n error: aborting due to 5 previous errors\n "}, {"sha": "233474e5fe689f6553ec1f99bd9a24dd532aaf09", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let x: &Bottom = &t;\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n-   = note: expected type `&Bottom`\n-              found type `&Top`\n+   = note: expected reference `&Bottom`\n+              found reference `&Top`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "98c90f0ea6828f63526c8465b7683fa90f3161b3", "filename": "src/test/ui/discrim/discrim-ill-typed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -16,7 +16,7 @@ fn f_i8() {\n         Ok2,\n         OhNo = 0_u8,\n         //~^ ERROR mismatched types\n-        //~| expected i8, found u8\n+        //~| expected `i8`, found `u8`\n     }\n \n     let x = A::Ok;\n@@ -29,7 +29,7 @@ fn f_u8() {\n         Ok2,\n         OhNo = 0_i8,\n         //~^ ERROR mismatched types\n-        //~| expected u8, found i8\n+        //~| expected `u8`, found `i8`\n     }\n \n     let x = A::Ok;\n@@ -42,7 +42,7 @@ fn f_i16() {\n         Ok2,\n         OhNo = 0_u16,\n         //~^ ERROR mismatched types\n-        //~| expected i16, found u16\n+        //~| expected `i16`, found `u16`\n     }\n \n     let x = A::Ok;\n@@ -55,7 +55,7 @@ fn f_u16() {\n         Ok2,\n         OhNo = 0_i16,\n         //~^ ERROR mismatched types\n-        //~| expected u16, found i16\n+        //~| expected `u16`, found `i16`\n     }\n \n     let x = A::Ok;\n@@ -68,7 +68,7 @@ fn f_i32() {\n         Ok2,\n         OhNo = 0_u32,\n         //~^ ERROR mismatched types\n-        //~| expected i32, found u32\n+        //~| expected `i32`, found `u32`\n     }\n \n     let x = A::Ok;\n@@ -81,7 +81,7 @@ fn f_u32() {\n         Ok2,\n         OhNo = 0_i32,\n         //~^ ERROR mismatched types\n-        //~| expected u32, found i32\n+        //~| expected `u32`, found `i32`\n     }\n \n     let x = A::Ok;\n@@ -94,7 +94,7 @@ fn f_i64() {\n         Ok2,\n         OhNo = 0_u64,\n         //~^ ERROR mismatched types\n-        //~| expected i64, found u64\n+        //~| expected `i64`, found `u64`\n     }\n \n     let x = A::Ok;\n@@ -107,7 +107,7 @@ fn f_u64() {\n         Ok2,\n         OhNo = 0_i64,\n         //~^ ERROR mismatched types\n-        //~| expected u64, found i64\n+        //~| expected `u64`, found `i64`\n     }\n \n     let x = A::Ok;"}, {"sha": "7b9f086151a847ce8aeabf426e1ab13b5d618844", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:17:16\n    |\n LL |         OhNo = 0_u8,\n-   |                ^^^^ expected i8, found u8\n+   |                ^^^^ expected `i8`, found `u8`\n    |\n help: change the type of the numeric literal from `u8` to `i8`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:30:16\n    |\n LL |         OhNo = 0_i8,\n-   |                ^^^^ expected u8, found i8\n+   |                ^^^^ expected `u8`, found `i8`\n    |\n help: change the type of the numeric literal from `i8` to `u8`\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:43:16\n    |\n LL |         OhNo = 0_u16,\n-   |                ^^^^^ expected i16, found u16\n+   |                ^^^^^ expected `i16`, found `u16`\n    |\n help: change the type of the numeric literal from `u16` to `i16`\n    |\n@@ -35,7 +35,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:56:16\n    |\n LL |         OhNo = 0_i16,\n-   |                ^^^^^ expected u16, found i16\n+   |                ^^^^^ expected `u16`, found `i16`\n    |\n help: change the type of the numeric literal from `i16` to `u16`\n    |\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:69:16\n    |\n LL |         OhNo = 0_u32,\n-   |                ^^^^^ expected i32, found u32\n+   |                ^^^^^ expected `i32`, found `u32`\n    |\n help: change the type of the numeric literal from `u32` to `i32`\n    |\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:82:16\n    |\n LL |         OhNo = 0_i32,\n-   |                ^^^^^ expected u32, found i32\n+   |                ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:95:16\n    |\n LL |         OhNo = 0_u64,\n-   |                ^^^^^ expected i64, found u64\n+   |                ^^^^^ expected `i64`, found `u64`\n    |\n help: change the type of the numeric literal from `u64` to `i64`\n    |\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:108:16\n    |\n LL |         OhNo = 0_i64,\n-   |                ^^^^^ expected u64, found i64\n+   |                ^^^^^ expected `u64`, found `i64`\n    |\n help: change the type of the numeric literal from `i64` to `u64`\n    |"}, {"sha": "21361489a2c3af70f14e1c2e19936a726725b20e", "filename": "src/test/ui/diverging-fn-tail-35849.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-fn-tail-35849.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,10 @@ LL | fn assert_sizeof() -> ! {\n    |                       - expected `!` because of return type\n LL |     unsafe {\n LL |         ::std::mem::transmute::<f64, [u8; 8]>(panic!())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected !, found array of 8 elements\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `!`, found array `[u8; 8]`\n    |\n    = note: expected type `!`\n-              found type `[u8; 8]`\n+             found array `[u8; 8]`\n \n error: aborting due to previous error\n "}, {"sha": "ad3e5ab3dc9d8a34c3bd26a8c7299b73815024bb", "filename": "src/test/ui/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiverging-tuple-parts-39485.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n LL |     &panic!()\n-   |     ^^^^^^^^^ expected (), found reference\n+   |     ^^^^^^^^^ expected `()`, found reference\n    |\n-   = note: expected type `()`\n-              found type `&_`\n+   = note: expected unit type `()`\n+              found reference `&_`\n help: try adding a return type\n    |\n LL | fn g() -> &_ {\n@@ -21,10 +21,10 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n    |\n    = note: expected type `isize`\n-              found type `(!, !)`\n+             found tuple `(!, !)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e3b621b909a0c186ca7e6e477f1112a23b008754", "filename": "src/test/ui/dst/dst-bad-assign-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -32,8 +32,8 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn ToBar`\n-    //~| found type `Bar1`\n-    //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `ToBar`, found struct `Bar1`\n+    //~| expected trait object `dyn ToBar`\n+    //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "dc03f38e103874d1964d2b20b2d28e8190ea60e4", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |            ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n+   |            ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n    |\n-   = note: expected type `dyn ToBar`\n-              found type `Bar1`\n+   = note: expected trait object `dyn ToBar`\n+                    found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign-3.rs:33:5"}, {"sha": "ed94242f5bfd072ebef41fc7407eaf9b60fa35e4", "filename": "src/test/ui/dst/dst-bad-assign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -34,8 +34,8 @@ pub fn main() {\n     let z: Box<dyn ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `dyn ToBar`\n-    //~| found type `Bar1`\n-    //~| expected trait ToBar, found struct `Bar1`\n+    //~| expected trait `ToBar`, found struct `Bar1`\n+    //~| expected trait object `dyn ToBar`\n+    //~| found struct `Bar1`\n     //~| ERROR the size for values of type\n }"}, {"sha": "8031f162482e39b0624f50735ab341b4bd78c38f", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |              ^^^^^^^^^^^^ expected trait ToBar, found struct `Bar1`\n+   |              ^^^^^^^^^^^^ expected trait `ToBar`, found struct `Bar1`\n    |\n-   = note: expected type `dyn ToBar`\n-              found type `Bar1`\n+   = note: expected trait object `dyn ToBar`\n+                    found struct `Bar1`\n \n error[E0277]: the size for values of type `dyn ToBar` cannot be known at compilation time\n   --> $DIR/dst-bad-assign.rs:35:5"}, {"sha": "3eb16663e13e1258dd6579cf475a245c3c69901e", "filename": "src/test/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:16:29\n    |\n LL |     let f3: &Fat<[usize]> = f2;\n-   |                             ^^ expected slice, found array of 3 elements\n+   |                             ^^ expected slice `[usize]`, found array `[isize; 3]`\n    |\n-   = note: expected type `&Fat<[usize]>`\n-              found type `&Fat<[isize; 3]>`\n+   = note: expected reference `&Fat<[usize]>`\n+              found reference `&Fat<[isize; 3]>`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n   --> $DIR/dst-bad-coerce1.rs:22:29\n@@ -19,10 +19,10 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n    |\n LL |     let f3: &([usize],) = f2;\n-   |                           ^^ expected slice, found array of 3 elements\n+   |                           ^^ expected slice `[usize]`, found array `[isize; 3]`\n    |\n-   = note: expected type `&([usize],)`\n-              found type `&([isize; 3],)`\n+   = note: expected reference `&([usize],)`\n+              found reference `&([isize; 3],)`\n \n error[E0277]: the trait bound `Foo: Bar` is not satisfied\n   --> $DIR/dst-bad-coerce1.rs:34:27"}, {"sha": "e76fcb5f72d596961c8b539ac4d6c9c9ce701a52", "filename": "src/test/ui/dst/dst-bad-coerce2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL |     let f3: &mut Fat<[isize]> = f2;\n    |                                 ^^ types differ in mutability\n    |\n-   = note: expected type `&mut Fat<[isize]>`\n-              found type `&Fat<[isize; 3]>`\n+   = note: expected mutable reference `&mut Fat<[isize]>`\n+                      found reference `&Fat<[isize; 3]>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:20:33\n    |\n LL |     let f3: &mut Fat<dyn Bar> = f2;\n    |                                 ^^ types differ in mutability\n    |\n-   = note: expected type `&mut Fat<dyn Bar>`\n-              found type `&Fat<Foo>`\n+   = note: expected mutable reference `&mut Fat<dyn Bar>`\n+                      found reference `&Fat<Foo>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:25:31\n    |\n LL |     let f3: &mut ([isize],) = f2;\n    |                               ^^ types differ in mutability\n    |\n-   = note: expected type `&mut ([isize],)`\n-              found type `&([isize; 3],)`\n+   = note: expected mutable reference `&mut ([isize],)`\n+                      found reference `&([isize; 3],)`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce2.rs:30:31\n    |\n LL |     let f3: &mut (dyn Bar,) = f2;\n    |                               ^^ types differ in mutability\n    |\n-   = note: expected type `&mut (dyn Bar,)`\n-              found type `&(Foo,)`\n+   = note: expected mutable reference `&mut (dyn Bar,)`\n+                      found reference `&(Foo,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f63da60d281d7069e3fee802bd3cfba3368ae6cc", "filename": "src/test/ui/dst/dst-bad-coerce4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,15 +11,15 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n-    //~| expected type `&Fat<[isize; 3]>`\n-    //~| found type `&Fat<[isize]>`\n-    //~| expected array of 3 elements, found slice\n+    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected reference `&Fat<[isize; 3]>`\n+    //~| found reference `&Fat<[isize]>`\n \n     // Tuple with a vec of isizes.\n     let f1: &([isize],) = &([1, 2, 3],);\n     let f2: &([isize; 3],) = f1;\n     //~^ ERROR mismatched types\n-    //~| expected type `&([isize; 3],)`\n-    //~| found type `&([isize],)`\n-    //~| expected array of 3 elements, found slice\n+    //~| expected array `[isize; 3]`, found slice `[isize]`\n+    //~| expected reference `&([isize; 3],)`\n+    //~| found reference `&([isize],)`\n }"}, {"sha": "e85d354e4680d32468d84004230094ac7f393d88", "filename": "src/test/ui/dst/dst-bad-coerce4.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coerce4.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,19 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:12:32\n    |\n LL |     let f2: &Fat<[isize; 3]> = f1;\n-   |                                ^^ expected array of 3 elements, found slice\n+   |                                ^^ expected array `[isize; 3]`, found slice `[isize]`\n    |\n-   = note: expected type `&Fat<[isize; 3]>`\n-              found type `&Fat<[isize]>`\n+   = note: expected reference `&Fat<[isize; 3]>`\n+              found reference `&Fat<[isize]>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce4.rs:20:30\n    |\n LL |     let f2: &([isize; 3],) = f1;\n-   |                              ^^ expected array of 3 elements, found slice\n+   |                              ^^ expected array `[isize; 3]`, found slice `[isize]`\n    |\n-   = note: expected type `&([isize; 3],)`\n-              found type `&([isize],)`\n+   = note: expected reference `&([isize; 3],)`\n+              found reference `&([isize],)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6058594d64dedaf0167239a7ba1aee5113f20c51", "filename": "src/test/ui/dst/dst-bad-coercions.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-coercions.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,70 +2,70 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:14:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected &S, found *-ptr\n+   |                 ^ expected `&S`, found *-ptr\n    |\n-   = note: expected type `&S`\n-              found type `*const S`\n+   = note: expected reference `&S`\n+            found raw pointer `*const S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:15:21\n    |\n LL |     let y: &dyn T = x;\n    |                     ^\n    |                     |\n-   |                     expected &dyn T, found *-ptr\n+   |                     expected `&dyn T`, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn T`\n-              found type `*const S`\n+   = note: expected reference `&dyn T`\n+            found raw pointer `*const S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:19:17\n    |\n LL |     let y: &S = x;\n-   |                 ^ expected &S, found *-ptr\n+   |                 ^ expected `&S`, found *-ptr\n    |\n-   = note: expected type `&S`\n-              found type `*mut S`\n+   = note: expected reference `&S`\n+            found raw pointer `*mut S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:20:21\n    |\n LL |     let y: &dyn T = x;\n    |                     ^\n    |                     |\n-   |                     expected &dyn T, found *-ptr\n+   |                     expected `&dyn T`, found *-ptr\n    |                     help: consider borrowing here: `&x`\n    |\n-   = note: expected type `&dyn T`\n-              found type `*mut S`\n+   = note: expected reference `&dyn T`\n+            found raw pointer `*mut S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:23:25\n    |\n LL |     let x: &mut dyn T = &S;\n    |                         ^^ types differ in mutability\n    |\n-   = note: expected type `&mut dyn T`\n-              found type `&S`\n+   = note: expected mutable reference `&mut dyn T`\n+                      found reference `&S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:24:25\n    |\n LL |     let x: *mut dyn T = &S;\n    |                         ^^ types differ in mutability\n    |\n-   = note: expected type `*mut dyn T`\n-              found type `&S`\n+   = note: expected raw pointer `*mut dyn T`\n+                found reference `&S`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coercions.rs:25:21\n    |\n LL |     let x: *mut S = &S;\n    |                     ^^ types differ in mutability\n    |\n-   = note: expected type `*mut S`\n-              found type `&S`\n+   = note: expected raw pointer `*mut S`\n+                found reference `&S`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "122c71bebc488acf0b6b7a9ba1af20e728385a0b", "filename": "src/test/ui/elide-errors-on-mismatched-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felide-errors-on-mismatched-tuple.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let (a, b, c) = (A::new(), A::new()); // This tuple is 2 elements, should be three\n    |         ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(A, A)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(A, A)`\n+              found tuple `(_, _, _)`\n \n error: aborting due to previous error\n "}, {"sha": "845833bc82f70e1eb0ab2f5f5d8476af5005b278", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -14,10 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/E0070.rs:8:25\n    |\n LL |     some_other_func() = 4;\n-   |                         ^ expected (), found integer\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   |                         ^ expected `()`, found integer\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/E0070.rs:8:5"}, {"sha": "b2dcdf8ee2ea2d90773c46dc6484f2a8c8ef4e35", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,7 @@ LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n    |    ---                         ------------------ required by this bound in `foo`\n ...\n LL |     foo(3_i8);\n-   |     ^^^ expected u32, found reference\n-   |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   |     ^^^ expected `u32`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "127fdaadbc5dd7d6caa4294fe9f271909c97ba99", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     match x {\n    |           - this match expression has type `u8`\n LL |         0u8..=3i8 => (),\n-   |         ^^^^^^^^^ expected u8, found i8\n+   |         ^^^^^^^^^ expected `u8`, found `i8`\n \n error: aborting due to previous error\n "}, {"sha": "b71fb95e706aa0af3e8d857af4bc1858494bcd32", "filename": "src/test/ui/error-codes/E0308.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: intrinsic has wrong type\n   --> $DIR/E0308.rs:4:5\n    |\n LL |     fn size_of<T>();\n-   |     ^^^^^^^^^^^^^^^^ expected (), found usize\n+   |     ^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n    |\n-   = note: expected type `extern \"rust-intrinsic\" fn()`\n-              found type `extern \"rust-intrinsic\" fn() -> usize`\n+   = note: expected fn pointer `extern \"rust-intrinsic\" fn()`\n+              found fn pointer `extern \"rust-intrinsic\" fn() -> usize`\n \n error: aborting due to previous error\n "}, {"sha": "e5dbab6441cb9e5ddc6302d0696a45829a1aa879", "filename": "src/test/ui/estr-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Festr-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Festr-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Festr-subtyping.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |    wants_uniq(x);\n    |               ^\n    |               |\n-   |               expected struct `std::string::String`, found &str\n+   |               expected struct `std::string::String`, found `&str`\n    |               help: try using a conversion method: `x.to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&str`\n \n error: aborting due to previous error\n "}, {"sha": "2029cfaf75dfed5bb6cb0c7ba012c433d7023064", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,8 +12,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [_, 99.., _] => {},\n    |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a88d05837a879c4c8b509825624e71767c9e1aa", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -18,8 +18,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [_, 99..] => {},\n    |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5c49fbe4c5c94e6e789e20d9b813cfa9d552fbb4", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,8 +12,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |          ^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n@@ -23,8 +23,8 @@ LL |     match [5..4, 99..105, 43..44] {\n LL |         [..9, 99..100, _] => {},\n    |               ^^^^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: expected type `std::ops::Range<{integer}>`\n-              found type `{integer}`\n+   = note: expected struct `std::ops::Range<{integer}>`\n+                found type `{integer}`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a9a6f50fb8ea5f5ec79eb01f12f70f3501dc8f77", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,12 +7,12 @@ impl<'a,'b> Foo<'a,'b> {\n     fn bar(self:\n            Foo<'b,'a>\n     //~^ ERROR mismatched `self` parameter type\n-    //~| expected type `Foo<'a, 'b>`\n-    //~| found type `Foo<'b, 'a>`\n+    //~| expected struct `Foo<'a, 'b>`\n+    //~| found struct `Foo<'b, 'a>`\n     //~| lifetime mismatch\n     //~| ERROR mismatched `self` parameter type\n-    //~| expected type `Foo<'a, 'b>`\n-    //~| found type `Foo<'b, 'a>`\n+    //~| expected struct `Foo<'a, 'b>`\n+    //~| found struct `Foo<'b, 'a>`\n     //~| lifetime mismatch\n            ) {}\n }"}, {"sha": "5c976098ae3bcef311ed2fc98a952f6a8a2f4737", "filename": "src/test/ui/explicit/explicit-self-lifetime-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-self-lifetime-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |            Foo<'b,'a>\n    |            ^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a, 'b>`\n-              found type `Foo<'b, 'a>`\n+   = note: expected struct `Foo<'a, 'b>`\n+              found struct `Foo<'b, 'a>`\n note: the lifetime `'b` as defined on the impl at 6:9...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:9\n    |\n@@ -23,8 +23,8 @@ error[E0308]: mismatched `self` parameter type\n LL |            Foo<'b,'a>\n    |            ^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a, 'b>`\n-              found type `Foo<'b, 'a>`\n+   = note: expected struct `Foo<'a, 'b>`\n+              found struct `Foo<'b, 'a>`\n note: the lifetime `'a` as defined on the impl at 6:6...\n   --> $DIR/explicit-self-lifetime-mismatch.rs:6:6\n    |"}, {"sha": "6f6983d42832ccf882f6266699e902118fbff29e", "filename": "src/test/ui/extern/extern-main-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0580]: main function has wrong type\n LL | extern fn main() {}\n    | ^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n    |\n-   = note: expected type `fn()`\n-              found type `extern \"C\" fn()`\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `extern \"C\" fn()`\n \n error: aborting due to previous error\n "}, {"sha": "2e258d687d38533862e1c2abb5a9074314b4bed1", "filename": "src/test/ui/extern/extern-types-distinct-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-distinct-types.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     r\n    |     ^ expected extern type `B`, found extern type `A`\n    |\n-   = note: expected type `&B`\n-              found type `&A`\n+   = note: expected reference `&B`\n+              found reference `&A`\n \n error: aborting due to previous error\n "}, {"sha": "e6f84f4f354275ccf0a6236d61ee27246f93071d", "filename": "src/test/ui/float-literal-inference-restrictions.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffloat-literal-inference-restrictions.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,17 +4,14 @@ error[E0308]: mismatched types\n LL |     let x: f32 = 1;\n    |                  ^\n    |                  |\n-   |                  expected f32, found integer\n+   |                  expected `f32`, found integer\n    |                  help: use a float literal: `1.0`\n-   |\n-   = note: expected type `f32`\n-              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/float-literal-inference-restrictions.rs:3:18\n    |\n LL |     let y: f32 = 1f64;\n-   |                  ^^^^ expected f32, found f64\n+   |                  ^^^^ expected `f32`, found `f64`\n    |\n help: change the type of the numeric literal from `f64` to `f32`\n    |"}, {"sha": "13ebfd1e2033a50ddedf4f4128e0cbb95ccc4b8c", "filename": "src/test/ui/fn/fn-bad-block-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-bad-block-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-bad-block-type.rs:3:19\n    |\n LL | fn f() -> isize { true }\n-   |           -----   ^^^^ expected isize, found bool\n+   |           -----   ^^^^ expected `isize`, found `bool`\n    |           |\n    |           expected `isize` because of return type\n "}, {"sha": "fa74d027f1eaa6a492168b7bd43fdd3879b3b31b", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -21,8 +21,8 @@ error[E0308]: mismatched types\n LL |     let x = f == g;\n    |                  ^ expected fn item, found a different fn item\n    |\n-   = note: expected type `fn() {main::f}`\n-              found type `fn() {main::g}`\n+   = note: expected fn item `fn() {main::f}`\n+              found fn item `fn() {main::g}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "18146d52551f9429ba3a686035e7eed36cd5572a", "filename": "src/test/ui/fn/fn-item-type.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,22 +12,22 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected type `fn(isize) -> isize {foo::<u8>}`\n-    //~|  found type `fn(isize) -> isize {bar::<u8>}`\n+    //~|  expected fn item `fn(isize) -> isize {foo::<u8>}`\n+    //~|  found fn item `fn(isize) -> isize {bar::<u8>}`\n     //~|  expected fn item, found a different fn item\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found i8\n+    //~| expected `u8`, found `i8`\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected type `fn(isize) -> isize {bar::<std::string::String>}`\n-    //~|  found type `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+    //~|  expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n+    //~|  found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n     //~|  expected struct `std::string::String`, found struct `std::vec::Vec`\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u16\n+    //~| expected `u8`, found `u16`\n }"}, {"sha": "e25e9c21c9fbc3dad5549f99b5a429edea7685ae", "filename": "src/test/ui/fn/fn-item-type.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-item-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,35 +4,35 @@ error[E0308]: mismatched types\n LL |     eq(foo::<u8>, bar::<u8>);\n    |                   ^^^^^^^^^ expected fn item, found a different fn item\n    |\n-   = note: expected type `fn(isize) -> isize {foo::<u8>}`\n-              found type `fn(isize) -> isize {bar::<u8>}`\n+   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n+              found fn item `fn(isize) -> isize {bar::<u8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:19:19\n    |\n LL |     eq(foo::<u8>, foo::<i8>);\n-   |                   ^^^^^^^^^ expected u8, found i8\n+   |                   ^^^^^^^^^ expected `u8`, found `i8`\n    |\n-   = note: expected type `fn(isize) -> isize {foo::<u8>}`\n-              found type `fn(isize) -> isize {foo::<i8>}`\n+   = note: expected fn item `fn(isize) -> isize {foo::<u8>}`\n+              found fn item `fn(isize) -> isize {foo::<i8>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:23:23\n    |\n LL |     eq(bar::<String>, bar::<Vec<u8>>);\n    |                       ^^^^^^^^^^^^^^ expected struct `std::string::String`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `fn(isize) -> isize {bar::<std::string::String>}`\n-              found type `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+   = note: expected fn item `fn(isize) -> isize {bar::<std::string::String>}`\n+              found fn item `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-item-type.rs:30:26\n    |\n LL |     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n-   |                          ^^^^^^^^^^^^^^^^^ expected u8, found u16\n+   |                          ^^^^^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n-   = note: expected type `fn() {<u8 as Foo>::foo}`\n-              found type `fn() {<u16 as Foo>::foo}`\n+   = note: expected fn item `fn() {<u8 as Foo>::foo}`\n+              found fn item `fn() {<u16 as Foo>::foo}`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "63ab8e88e4459123990c3c315e3c569a60b0b0f7", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,16 +5,16 @@ fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n fn main() {\n     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n+    //~| expected unit type `()`\n+    //~| found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n+    //~| expected unit type `()`\n+    //~| found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n     //~^ ERROR mismatched types\n-    //~| expected type `()`\n-    //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n+    //~| expected unit type `()`\n+    //~| found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n     //~^ ERROR expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`"}, {"sha": "5e7d6ad9534def74a8264b68f543d5f2a06afade", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,28 +2,28 @@ error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:6:17\n    |\n LL |     let _: () = (box |_: isize| {}) as Box<dyn FnOnce(isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n    |\n LL |     let _: () = (box |_: isize, isize| {}) as Box<dyn Fn(isize, isize)>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17\n    |\n LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -> isize>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `std::boxed::Box`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `std::boxed::Box`\n    |\n-   = note: expected type `()`\n-              found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n+   = note: expected unit type `()`\n+                 found struct `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14"}, {"sha": "b4f9a38ff3507ca561a22612cf2f912f06d82e4e", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x: Option<usize>;\n     x = 5;\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<usize>`\n+    //~| expected enum `std::option::Option<usize>`\n     //~| found type `{integer}`\n     //~| expected enum `std::option::Option`, found integer\n }"}, {"sha": "6a550b93be2901fe5bcbaaeaea2687bf034e29a8", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,7 +7,7 @@ LL |     x = 5;\n    |         expected enum `std::option::Option`, found integer\n    |         help: try using a variant of the expected enum: `Some(5)`\n    |\n-   = note: expected type `std::option::Option<usize>`\n+   = note: expected enum `std::option::Option<usize>`\n               found type `{integer}`\n \n error: aborting due to previous error"}, {"sha": "94a9f4e5692a3bb8efa1b2922ca63efe8e1e75b9", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,8 +11,6 @@ mod y {\n fn bar(x: x::Foo) -> y::Foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected type `y::Foo`\n-    //~| found type `x::Foo`\n     //~| expected enum `y::Foo`, found enum `x::Foo`\n }\n "}, {"sha": "aed7f72c660df187956c8965c0bc3bb4174bb161", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,9 +5,6 @@ LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n-   |\n-   = note: expected type `y::Foo`\n-              found type `x::Foo`\n \n error: aborting due to previous error\n "}, {"sha": "30cb3ee48e768dda11044e629f26e3e8e661e5cd", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,9 +5,9 @@ use std::option::Option;\n fn bar(x: usize) -> Option<usize> {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<usize>`\n+    //~| expected enum `std::option::Option<usize>`\n     //~| found type `usize`\n-    //~| expected enum `std::option::Option`, found usize\n+    //~| expected enum `std::option::Option`, found `usize`\n }\n \n fn main() {"}, {"sha": "b388f38a7fac70b928f7d89c6633acf6de422f60", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,9 +4,9 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `std::option::Option<usize>` because of return type\n LL |     return x;\n-   |            ^ expected enum `std::option::Option`, found usize\n+   |            ^ expected enum `std::option::Option`, found `usize`\n    |\n-   = note: expected type `std::option::Option<usize>`\n+   = note: expected enum `std::option::Option<usize>`\n               found type `usize`\n \n error: aborting due to previous error"}, {"sha": "8606ecd33dab4bab4c94890fe649c57b7fa76420", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/type-mismatch-signature-deduction.rs:8:20\n    |\n LL |             return Ok(6);\n-   |                    ^^^^^ expected i32, found enum `std::result::Result`\n+   |                    ^^^^^ expected `i32`, found enum `std::result::Result`\n    |\n    = note: expected type `i32`\n-              found type `std::result::Result<{integer}, _>`\n+              found enum `std::result::Result<{integer}, _>`\n \n error: aborting due to previous error\n "}, {"sha": "4b86212e4862be48583f6305fef7d2a7e69152bd", "filename": "src/test/ui/generic/generic-arg-mismatch-recover.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-arg-mismatch-recover.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,10 +8,10 @@ error[E0308]: mismatched types\n   --> $DIR/generic-arg-mismatch-recover.rs:6:33\n    |\n LL |     Foo::<'static, 'static, ()>(&0);\n-   |                                 ^^ expected (), found integer\n+   |                                 ^^ expected `()`, found integer\n    |\n-   = note: expected type `&'static ()`\n-              found type `&{integer}`\n+   = note: expected reference `&'static ()`\n+              found reference `&{integer}`\n \n error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n   --> $DIR/generic-arg-mismatch-recover.rs:9:20"}, {"sha": "45dc85a252f40f76518adc0d9836736615fdce57", "filename": "src/test/ui/generic/generic-type-params-name-repr.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,40 +12,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<isize>`\n-    //~| found type `()`\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n+    //~| expected struct `Foo<isize>`\n+    //~| found unit type `()`\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<isize>`\n-    //~| found type `()`\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n+    //~| expected struct `Foo<isize>`\n+    //~| found unit type `()`\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n-    //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap`, found `()`\n+    //~| expected struct `HashMap<std::string::String, isize>`\n+    //~| found unit type `()`\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `HashMap<std::string::String, isize>`\n-    //~| found type `()`\n-    //~| expected struct `HashMap`, found ()\n+    //~| expected struct `HashMap`, found `()`\n+    //~| expected struct `HashMap<std::string::String, isize>`\n+    //~| found unit type `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<A, isize>`\n-    //~| found type `()`\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n+    //~| expected struct `Foo<A, isize>`\n+    //~| found unit type `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo`\n-    //~| found type `()`\n-    //~| expected struct `Foo`, found ()\n+    //~| expected struct `Foo`, found `()`\n+    //~| expected struct `Foo`\n+    //~| found unit type `()`\n }"}, {"sha": "f20bd1846d758796a1c0773ea86ecc88fb66eb41", "filename": "src/test/ui/generic/generic-type-params-name-repr.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-type-params-name-repr.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,55 +2,55 @@ error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:13:25\n    |\n LL |     let _: Foo<isize> = ();\n-   |                         ^^ expected struct `Foo`, found ()\n+   |                         ^^ expected struct `Foo`, found `()`\n    |\n-   = note: expected type `Foo<isize>`\n-              found type `()`\n+   = note: expected struct `Foo<isize>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:20:31\n    |\n LL |     let _: Foo<isize, B, C> = ();\n-   |                               ^^ expected struct `Foo`, found ()\n+   |                               ^^ expected struct `Foo`, found `()`\n    |\n-   = note: expected type `Foo<isize>`\n-              found type `()`\n+   = note: expected struct `Foo<isize>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:27:37\n    |\n LL |     let _: HashMap<String, isize> = ();\n-   |                                     ^^ expected struct `HashMap`, found ()\n+   |                                     ^^ expected struct `HashMap`, found `()`\n    |\n-   = note: expected type `HashMap<std::string::String, isize>`\n-              found type `()`\n+   = note: expected struct `HashMap<std::string::String, isize>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:32:51\n    |\n LL |     let _: HashMap<String, isize, Hash<String>> = ();\n-   |                                                   ^^ expected struct `HashMap`, found ()\n+   |                                                   ^^ expected struct `HashMap`, found `()`\n    |\n-   = note: expected type `HashMap<std::string::String, isize>`\n-              found type `()`\n+   = note: expected struct `HashMap<std::string::String, isize>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:39:31\n    |\n LL |     let _: Foo<A, isize, C> = ();\n-   |                               ^^ expected struct `Foo`, found ()\n+   |                               ^^ expected struct `Foo`, found `()`\n    |\n-   = note: expected type `Foo<A, isize>`\n-              found type `()`\n+   = note: expected struct `Foo<A, isize>`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/generic-type-params-name-repr.rs:46:27\n    |\n LL |     let _: Foo<A, B, C> = ();\n-   |                           ^^ expected struct `Foo`, found ()\n+   |                           ^^ expected struct `Foo`, found `()`\n    |\n-   = note: expected type `Foo`\n-              found type `()`\n+   = note: expected struct `Foo`\n+           found unit type `()`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c8521a54e6c75ec30c6854033f8c3606fddcfec5", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u3\n LL | |                                             for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n+              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n \n error: aborting due to previous error\n "}, {"sha": "3ad802c5450b36bfdc018244c49866ad07c687aa", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_b_vs_bound_a: (for<'a,'b> fn(&'a u32, &'b u32),\n LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n    | |__________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n-              found type `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n+              found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n \n error: aborting due to previous error\n "}, {"sha": "3d09633367cdafbf1665dff712ade85c68617f12", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | |                              fn(&'x u32)) }\n    | |___________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a> fn(&'a u32)>`\n-              found type `std::option::Option<fn(&'x u32)>`\n+   = note: expected enum `std::option::Option<for<'a> fn(&'a u32)>`\n+              found enum `std::option::Option<fn(&'x u32)>`\n \n error: aborting due to previous error\n "}, {"sha": "8b623a4c0bea948abf0ca197a6e4bff9b3ea9328", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_co_a_b_vs_bound_co_a: (for<'a,'b> fn(Co<'a>, Co<'b>),\n LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n    | |______________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n \n error: aborting due to previous error\n "}, {"sha": "f12bff696913eb3e63058a836ddae25cf3e21902", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) ->\n LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n    | |______________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n-              found type `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n \n error: aborting due to previous error\n "}, {"sha": "37ba44cf2e9bacdc4c398456800d1f46c2831327", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Con\n LL | |                                             for<'a>    fn(Contra<'a>, Contra<'a>) -> Co<'a>) }\n    | |______________________________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n-              found type `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n+              found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n \n error: aborting due to previous error\n "}, {"sha": "a00bbea6d1818582b27d22e6feadec9f1cd63ced", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n-              found type `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: expected enum `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n+              found enum `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n \n error: aborting due to previous error\n "}, {"sha": "561f35191767e85fab12875981377e9da6c0815a", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(Inv<'y>)>`\n-              found type `std::option::Option<fn(Inv<'x>)>`\n+   = note: expected enum `std::option::Option<fn(Inv<'y>)>`\n+              found enum `std::option::Option<fn(Inv<'x>)>`\n note: the lifetime `'x` as defined on the function body at 32:20...\n   --> $DIR/hr-subtype.rs:32:20\n    |\n@@ -39,8 +39,8 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(Inv<'x>)>`\n-              found type `std::option::Option<fn(Inv<'y>)>`\n+   = note: expected enum `std::option::Option<fn(Inv<'x>)>`\n+              found enum `std::option::Option<fn(Inv<'y>)>`\n note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |"}, {"sha": "082627050b357c32bf47fd91d8e10dd5e0532c6f", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n    |\n-   = note: expected type `std::option::Option<fn(&'x u32)>`\n-              found type `std::option::Option<fn(&'y u32)>`\n+   = note: expected enum `std::option::Option<fn(&'x u32)>`\n+              found enum `std::option::Option<fn(&'y u32)>`\n note: the lifetime `'x` as defined on the function body at 38:22...\n   --> $DIR/hr-subtype.rs:38:22\n    |"}, {"sha": "8534ee99c1fa7d6e2b36cfc92e767a01221c67dd", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let _: for<'b> fn(&'b u32) = foo();\n    |                                  ^^^^^ expected concrete lifetime, found bound lifetime parameter 'b\n    |\n-   = note: expected type `for<'b> fn(&'b u32)`\n-              found type `fn(&u32)`\n+   = note: expected fn pointer `for<'b> fn(&'b u32)`\n+              found fn pointer `fn(&u32)`\n \n error: aborting due to previous error\n "}, {"sha": "759c7302d13c6e8ce933454907e49967379b7c0d", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found associated type\n    |\n-   = note: expected type `Unit4`\n-              found type `<_ as Ty<'_>>::V`\n+   = note:       expected struct `Unit4`\n+           found associated type `<_ as Ty<'_>>::V`\n    = note: consider constraining the associated type `<_ as Ty<'_>>::V` to `Unit4`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n@@ -15,8 +15,6 @@ error[E0271]: type mismatch resolving `<[closure@$DIR/issue-62203-hrtb-ice.rs:42\n LL |     let v = Unit2.m(\n    |                   ^ expected struct `Unit4`, found struct `Unit3`\n    |\n-   = note: expected type `Unit4`\n-              found type `Unit3`\n    = note: required because of the requirements on the impl of `for<'r> T0<'r, (<Unit2 as Ty<'r>>::V,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:39]>`\n \n error: aborting due to 2 previous errors"}, {"sha": "14e8f87393ba159327e8a03970a30903b10fdb6b", "filename": "src/test/ui/if-else-type-mismatch.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-else-type-mismatch.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,23 +7,17 @@ LL | |         1i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         2u32\n-   | |         ^^^^ expected i32, found u32\n+   | |         ^^^^ expected `i32`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:8:38\n    |\n LL |     let _ = if true { 42i32 } else { 42u32 };\n-   |                       -----          ^^^^^ expected i32, found u32\n+   |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:13:9\n@@ -37,12 +31,9 @@ LL | |         3u32;\n    | |         expected because of this\n LL | |     } else {\n LL | |         4u32\n-   | |         ^^^^ expected (), found u32\n+   | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:19:9\n@@ -56,12 +47,9 @@ LL | |         6u32;\n    | |         ^^^^-\n    | |         |   |\n    | |         |   help: consider removing this semicolon\n-   | |         expected u32, found ()\n+   | |         expected `u32`, found `()`\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `u32`\n-              found type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:25:9\n@@ -72,12 +60,9 @@ LL | |         7i32;\n    | |         ----- expected because of this\n LL | |     } else {\n LL | |         8u32\n-   | |         ^^^^ expected (), found u32\n+   | |         ^^^^ expected `()`, found `u32`\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:31:9\n@@ -88,12 +73,9 @@ LL | |         9i32\n    | |         ---- expected because of this\n LL | |     } else {\n LL | |         10u32;\n-   | |         ^^^^^^ expected i32, found ()\n+   | |         ^^^^^^ expected `i32`, found `()`\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:37:9\n@@ -104,10 +86,7 @@ LL | |\n LL | |     } else {\n    | |_____- expected because of this\n LL |           11u32\n-   |           ^^^^^ expected (), found u32\n-   |\n-   = note: expected type `()`\n-              found type `u32`\n+   |           ^^^^^ expected `()`, found `u32`\n \n error[E0308]: if and else have incompatible types\n   --> $DIR/if-else-type-mismatch.rs:42:12\n@@ -120,10 +99,7 @@ LL |       } else {\n    |  ____________^\n LL | |\n LL | |     };\n-   | |_____^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n+   | |_____^ expected `i32`, found `()`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "5c693194a76a136fed8bf108bab50bf3c11cce4e", "filename": "src/test/ui/if/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = if true { 10i32 } else { 10u32 };\n     //~^ ERROR if and else have incompatible types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }"}, {"sha": "b5eacf5860f8ac378e7f93c3db314388b30949e1", "filename": "src/test/ui/if/if-branch-types.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-branch-types.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,12 +2,9 @@ error[E0308]: if and else have incompatible types\n   --> $DIR/if-branch-types.rs:2:38\n    |\n LL |     let x = if true { 10i32 } else { 10u32 };\n-   |                       -----          ^^^^^ expected i32, found u32\n+   |                       -----          ^^^^^ expected `i32`, found `u32`\n    |                       |\n    |                       expected because of this\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n \n error: aborting due to previous error\n "}, {"sha": "cae4f0974c6c4bf5812851764fd1ae6602005860", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,6 +7,5 @@ fn main() {\n         1\n     };\n     //~^^ ERROR: if and else have incompatible types\n-    //~| NOTE expected (), found integer\n-    //~| NOTE expected type `()`\n+    //~| NOTE expected `()`, found integer\n }"}, {"sha": "da93dfc999507bd8beb0322b9fe58c4ff0fca581", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,12 +8,9 @@ LL | |         ()\n LL | |\n LL | |     } else {\n LL | |         1\n-   | |         ^ expected (), found integer\n+   | |         ^ expected `()`, found integer\n LL | |     };\n    | |_____- if and else have incompatible types\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n \n error: aborting due to previous error\n "}, {"sha": "3f382e023a776f98594da06025d73f288f4fbb1c", "filename": "src/test/ui/if/if-no-match-bindings.stderr", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-no-match-bindings.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,95 +4,71 @@ error[E0308]: mismatched types\n LL |     if b_ref() {}\n    |        ^^^^^^^\n    |        |\n-   |        expected bool, found &bool\n+   |        expected `bool`, found `&bool`\n    |        help: consider dereferencing the borrow: `*b_ref()`\n-   |\n-   = note: expected type `bool`\n-              found type `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:19:8\n    |\n LL |     if b_mut_ref() {}\n    |        ^^^^^^^^^^^\n    |        |\n-   |        expected bool, found &mut bool\n+   |        expected `bool`, found `&mut bool`\n    |        help: consider dereferencing the borrow: `*b_mut_ref()`\n-   |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:20:8\n    |\n LL |     if &true {}\n    |        ^^^^^\n    |        |\n-   |        expected bool, found &bool\n+   |        expected `bool`, found `&bool`\n    |        help: consider removing the borrow: `true`\n-   |\n-   = note: expected type `bool`\n-              found type `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n    |\n LL |     if &mut true {}\n    |        ^^^^^^^^^\n    |        |\n-   |        expected bool, found &mut bool\n+   |        expected `bool`, found `&mut bool`\n    |        help: consider removing the borrow: `true`\n-   |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n    |\n LL |     while b_ref() {}\n    |           ^^^^^^^\n    |           |\n-   |           expected bool, found &bool\n+   |           expected `bool`, found `&bool`\n    |           help: consider dereferencing the borrow: `*b_ref()`\n-   |\n-   = note: expected type `bool`\n-              found type `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:25:11\n    |\n LL |     while b_mut_ref() {}\n    |           ^^^^^^^^^^^\n    |           |\n-   |           expected bool, found &mut bool\n+   |           expected `bool`, found `&mut bool`\n    |           help: consider dereferencing the borrow: `*b_mut_ref()`\n-   |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:26:11\n    |\n LL |     while &true {}\n    |           ^^^^^\n    |           |\n-   |           expected bool, found &bool\n+   |           expected `bool`, found `&bool`\n    |           help: consider removing the borrow: `true`\n-   |\n-   = note: expected type `bool`\n-              found type `&bool`\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n    |\n LL |     while &mut true {}\n    |           ^^^^^^^^^\n    |           |\n-   |           expected bool, found &mut bool\n+   |           expected `bool`, found `&mut bool`\n    |           help: consider removing the borrow: `true`\n-   |\n-   = note: expected type `bool`\n-              found type `&mut bool`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "74ed0ed0ae6bded4ff517c787ea0f13d3c397db1", "filename": "src/test/ui/if/if-typeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-typeck.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/if-typeck.rs:9:8\n    |\n LL |     if f { }\n-   |        ^ expected bool, found fn item\n+   |        ^ expected `bool`, found fn item\n    |\n    = note: expected type `bool`\n-              found type `fn() {f}`\n+           found fn item `fn() {f}`\n \n error: aborting due to previous error\n "}, {"sha": "9c7e7002360db560cf1d8a35f824dbc0188c8b62", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,10 +6,8 @@ LL |   fn foo(bar: usize) -> usize {\n LL | /     if bar % 5 == 0 {\n LL | |         return 3;\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -22,10 +20,8 @@ LL |       let x: usize = if bar % 5 == 0 {\n    | |         expected because of this assignment\n LL | |         return 3;\n LL | |     };\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -37,10 +33,8 @@ LL |   fn foo3(bar: usize) -> usize {\n LL | /     if bar % 5 == 0 {\n LL | |         3\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -52,10 +46,8 @@ LL |   fn foo_let(bar: usize) -> usize {\n LL | /     if let 0 = 1 {\n LL | |         return 3;\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -68,10 +60,8 @@ LL |       let x: usize = if let 0 = 1 {\n    | |         expected because of this assignment\n LL | |         return 3;\n LL | |     };\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n@@ -83,10 +73,8 @@ LL |   fn foo3_let(bar: usize) -> usize {\n LL | /     if let 0 = 1 {\n LL | |         3\n LL | |     }\n-   | |_____^ expected usize, found ()\n+   | |_____^ expected `usize`, found `()`\n    |\n-   = note: expected type `usize`\n-              found type `()`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "e5fb7b26321e42d0b49f8ad2d180800d3fab5c58", "filename": "src/test/ui/if/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,8 +1,6 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR if may be missing an else clause [E0317]\n-    //~| expected type `()`\n-    //~| found type `bool`\n-    //~| expected (), found bool\n+    //~| expected `()`, found `bool`\n     println!(\"{}\", a);\n }"}, {"sha": "66a8185774e6a41cb88d89bd1f32d9bd0f2b43de", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,8 @@ LL |     let a = if true { true };\n    |             ^^^^^^^^^^----^^\n    |             |         |\n    |             |         found here\n-   |             expected (), found bool\n+   |             expected `()`, found `bool`\n    |\n-   = note: expected type `()`\n-              found type `bool`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "07917c2a540d59594015b524c12a3db542a35dbd", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -300,19 +300,19 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n-   |                                ^^^ expected usize, found floating-point number\n+   |                                ^^^ expected `usize`, found floating-point number\n    |\n-   = note: expected type `&usize`\n-              found type `&{float}`\n+   = note: expected reference `&usize`\n+              found reference `&{float}`\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n    |\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n-   |                                   ^^^ expected usize, found floating-point number\n+   |                                   ^^^ expected `usize`, found floating-point number\n    |\n-   = note: expected type `&usize`\n-              found type `&{float}`\n+   = note: expected reference `&usize`\n+              found reference `&{float}`\n \n error: aborting due to 36 previous errors\n "}, {"sha": "fc4cddd02168ece1a46de99c268609011d007660", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,10 +10,10 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as imp\n   --> $DIR/bound-normalization-fail.rs:28:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<T as impl_trait::Trait>::Assoc`\n+   = note:         expected type `()`\n+           found associated type `<T as impl_trait::Trait>::Assoc`\n    = note: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size\n@@ -28,10 +28,10 @@ error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lif\n   --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n-   = note: expected type `()`\n-              found type `<T as lifetimes::Trait<'static>>::Assoc`\n+   = note:         expected type `()`\n+           found associated type `<T as lifetimes::Trait<'static>>::Assoc`\n    = note: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n    = note: the return type of a function must have a statically known size"}, {"sha": "14b0eeb739ae5b0a4359d8e3f832b077388ae5b4", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -14,7 +14,7 @@ fn two(x: bool) -> impl Foo {\n     }\n     0_u32\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }\n \n fn sum_to(n: u32) -> impl Foo {"}, {"sha": "e53524e58d663d8c3a5bd7afd4a39cffeedb9956", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,10 +8,7 @@ LL |         return 1_i32;\n    |                ----- ...is found to be `i32` here\n LL |     }\n LL |     0_u32\n-   |     ^^^^^ expected i32, found u32\n-   |\n-   = note: expected type `i32`\n-              found type `u32`\n+   |     ^^^^^ expected `i32`, found `u32`\n \n error[E0277]: cannot add `impl Foo` to `u32`\n   --> $DIR/equality.rs:24:11"}, {"sha": "abce8c8c204bd2d8d1f06363883a55565fe0bf7f", "filename": "src/test/ui/impl-trait/equality2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -25,20 +25,20 @@ fn main() {\n     let _: u32 = hide(0_u32);\n     //~^ ERROR mismatched types\n     //~| expected type `u32`\n-    //~| found type `impl Foo`\n-    //~| expected u32, found opaque type\n+    //~| found opaque type `impl Foo`\n+    //~| expected `u32`, found opaque type\n \n     let _: i32 = Leak::leak(hide(0_i32));\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `<impl Foo as Leak>::T`\n-    //~| expected i32, found associated type\n+    //~| found associated type `<impl Foo as Leak>::T`\n+    //~| expected `i32`, found associated type\n \n     let mut x = (hide(0_u32), hide(0_i32));\n     x = (x.1,\n     //~^ ERROR mismatched types\n-    //~| expected u32, found i32\n+    //~| expected `u32`, found `i32`\n          x.0);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found u32\n+    //~| expected `i32`, found `u32`\n }"}, {"sha": "7a656fca28b58557a0159fc1bb3f5e59e814c879", "filename": "src/test/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,39 +2,39 @@ error[E0308]: mismatched types\n   --> $DIR/equality2.rs:25:18\n    |\n LL |     let _: u32 = hide(0_u32);\n-   |                  ^^^^^^^^^^^ expected u32, found opaque type\n+   |                  ^^^^^^^^^^^ expected `u32`, found opaque type\n    |\n-   = note: expected type `u32`\n-              found type `impl Foo`\n+   = note:     expected type `u32`\n+           found opaque type `impl Foo`\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:31:18\n    |\n LL |     let _: i32 = Leak::leak(hide(0_i32));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found associated type\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found associated type\n    |\n-   = note: expected type `i32`\n-              found type `<impl Foo as Leak>::T`\n+   = note:         expected type `i32`\n+           found associated type `<impl Foo as Leak>::T`\n    = note: consider constraining the associated type `<impl Foo as Leak>::T` to `i32`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:38:10\n    |\n LL |     x = (x.1,\n-   |          ^^^ expected u32, found i32\n+   |          ^^^ expected `u32`, found `i32`\n    |\n-   = note: expected type `impl Foo` (u32)\n-              found type `impl Foo` (i32)\n+   = note: expected opaque type `impl Foo` (`u32`)\n+              found opaque type `impl Foo` (`i32`)\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n    |\n LL |          x.0);\n-   |          ^^^ expected i32, found u32\n+   |          ^^^ expected `i32`, found `u32`\n    |\n-   = note: expected type `impl Foo` (i32)\n-              found type `impl Foo` (u32)\n+   = note: expected opaque type `impl Foo` (`i32`)\n+              found opaque type `impl Foo` (`u32`)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "638a0093fb21d1df5a86e4b97b741786517c2873", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,8 +9,8 @@ LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n    |            |\n    |            expected type parameter\n    |\n-   = note: expected type `fn(&(), &B, &impl Debug)`\n-              found type `fn(&(), &impl Debug, &B)`\n+   = note: expected fn pointer `fn(&(), &B, &impl Debug)`\n+              found fn pointer `fn(&(), &impl Debug, &B)`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "d95b62e469e8c2741725250265b04c8d45a342c3", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `fmt` has an incompatible type for trait\n LL |    fn fmt(&self, x: &str) -> () { }\n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n-              found type `fn(&MyType, &str)`\n+   = note: expected fn pointer `fn(&MyType, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+              found fn pointer `fn(&MyType, &str)`\n \n error[E0050]: method `fmt` has 1 parameter but the declaration in trait `std::fmt::Display::fmt` has 2\n   --> $DIR/trait_type.rs:12:11"}, {"sha": "3ffa2b55712eb7374699f694c6303639116d2f3b", "filename": "src/test/ui/impl-trait/universal-mismatched-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-mismatched-type.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(x: impl Debug) -> String {\n LL |     x\n    |     ^ expected struct `std::string::String`, found type parameter `impl Debug`\n    |\n-   = note: expected type `std::string::String`\n-              found type `impl Debug`\n+   = note:      expected struct `std::string::String`\n+           found type parameter `impl Debug`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "7c120235fd17637b085fbe8032cf846f9fa7225b", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,8 +9,8 @@ LL |     let mut a = x;\n LL |     a = y;\n    |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |\n-   = note: expected type `impl Debug` (type parameter `impl Debug`)\n-              found type `impl Debug` (type parameter `impl Debug`)\n+   = note: expected type parameter `impl Debug` (type parameter `impl Debug`)\n+              found type parameter `impl Debug` (type parameter `impl Debug`)\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "33daf372f986b7d2bce2cfae81b2a11ee42e5a5b", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,19 +2,19 @@ error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:2:20\n    |\n LL |     let b: &[u8] = include_str!(\"file.txt\");\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found str\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |\n-   = note: expected type `&[u8]`\n-              found type `&'static str`\n+   = note: expected reference `&[u8]`\n+              found reference `&'static str`\n \n error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n    |\n LL |     let s: &str = include_bytes!(\"file.txt\");\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found array of 0 elements\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found array `[u8; 0]`\n    |\n-   = note: expected type `&str`\n-              found type `&'static [u8; 0]`\n+   = note: expected reference `&str`\n+              found reference `&'static [u8; 0]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "70614cbbf9f634b1cfe8e2e013ba89ad276a76ed", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/indexing-requires-a-uint.rs:12:18\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n-   |                  ^ expected isize, found usize\n+   |                  ^ expected `isize`, found `usize`\n    |\n help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "3f4bedc4c2224386e99dbf21e676f215ffe4e893", "filename": "src/test/ui/integer-literal-suffix-inference.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -31,132 +31,132 @@ fn main() {\n     id_i8(a8); // ok\n     id_i8(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i16\n+    //~| expected `i8`, found `i16`\n     id_i8(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i32\n+    //~| expected `i8`, found `i32`\n     id_i8(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i64\n+    //~| expected `i8`, found `i64`\n \n     id_i16(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i8\n+    //~| expected `i16`, found `i8`\n     id_i16(a16); // ok\n     id_i16(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i32\n+    //~| expected `i16`, found `i32`\n     id_i16(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i64\n+    //~| expected `i16`, found `i64`\n \n     id_i32(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i8\n+    //~| expected `i32`, found `i8`\n     id_i32(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i16\n+    //~| expected `i32`, found `i16`\n     id_i32(a32); // ok\n     id_i32(a64);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i64\n+    //~| expected `i32`, found `i64`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i8\n+    //~| expected `i64`, found `i8`\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i16\n+    //~| expected `i64`, found `i16`\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i32\n+    //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n     id_i8(c16);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i16\n+    //~| expected `i8`, found `i16`\n     id_i8(c32);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i32\n+    //~| expected `i8`, found `i32`\n     id_i8(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i8, found i64\n+    //~| expected `i8`, found `i64`\n \n     id_i16(c8);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i8\n+    //~| expected `i16`, found `i8`\n     id_i16(c16); // ok\n     id_i16(c32);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i32\n+    //~| expected `i16`, found `i32`\n     id_i16(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i16, found i64\n+    //~| expected `i16`, found `i64`\n \n     id_i32(c8);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i8\n+    //~| expected `i32`, found `i8`\n     id_i32(c16);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i16\n+    //~| expected `i32`, found `i16`\n     id_i32(c32); // ok\n     id_i32(c64);\n     //~^ ERROR mismatched types\n-    //~| expected i32, found i64\n+    //~| expected `i32`, found `i64`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i8\n+    //~| expected `i64`, found `i8`\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i16\n+    //~| expected `i64`, found `i16`\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected i64, found i32\n+    //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n     id_u8(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u16\n+    //~| expected `u8`, found `u16`\n     id_u8(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u32\n+    //~| expected `u8`, found `u32`\n     id_u8(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u8, found u64\n+    //~| expected `u8`, found `u64`\n \n     id_u16(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u8\n+    //~| expected `u16`, found `u8`\n     id_u16(b16); // ok\n     id_u16(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u32\n+    //~| expected `u16`, found `u32`\n     id_u16(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u16, found u64\n+    //~| expected `u16`, found `u64`\n \n     id_u32(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u8\n+    //~| expected `u32`, found `u8`\n     id_u32(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u16\n+    //~| expected `u32`, found `u16`\n     id_u32(b32); // ok\n     id_u32(b64);\n     //~^ ERROR mismatched types\n-    //~| expected u32, found u64\n+    //~| expected `u32`, found `u64`\n \n     id_u64(b8);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u8\n+    //~| expected `u64`, found `u8`\n     id_u64(b16);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u16\n+    //~| expected `u64`, found `u16`\n     id_u64(b32);\n     //~^ ERROR mismatched types\n-    //~| expected u64, found u32\n+    //~| expected `u64`, found `u32`\n     id_u64(b64); // ok\n }"}, {"sha": "a34f0645c6b971b450202b9167fbde3fc3a0c398", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:32:11\n    |\n LL |     id_i8(a16);\n-   |           ^^^ expected i8, found i16\n+   |           ^^^ expected `i8`, found `i16`\n    |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:35:11\n    |\n LL |     id_i8(a32);\n-   |           ^^^ expected i8, found i32\n+   |           ^^^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:38:11\n    |\n LL |     id_i8(a64);\n-   |           ^^^ expected i8, found i64\n+   |           ^^^ expected `i8`, found `i64`\n    |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -37,14 +37,14 @@ error[E0308]: mismatched types\n LL |     id_i16(a8);\n    |            ^^\n    |            |\n-   |            expected i16, found i8\n+   |            expected `i16`, found `i8`\n    |            help: you can convert an `i8` to `i16`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:46:12\n    |\n LL |     id_i16(a32);\n-   |            ^^^ expected i16, found i32\n+   |            ^^^ expected `i16`, found `i32`\n    |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:49:12\n    |\n LL |     id_i16(a64);\n-   |            ^^^ expected i16, found i64\n+   |            ^^^ expected `i16`, found `i64`\n    |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n LL |     id_i32(a8);\n    |            ^^\n    |            |\n-   |            expected i32, found i8\n+   |            expected `i32`, found `i8`\n    |            help: you can convert an `i8` to `i32`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -77,14 +77,14 @@ error[E0308]: mismatched types\n LL |     id_i32(a16);\n    |            ^^^\n    |            |\n-   |            expected i32, found i16\n+   |            expected `i32`, found `i16`\n    |            help: you can convert an `i16` to `i32`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:60:12\n    |\n LL |     id_i32(a64);\n-   |            ^^^ expected i32, found i64\n+   |            ^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a8);\n    |            ^^\n    |            |\n-   |            expected i64, found i8\n+   |            expected `i64`, found `i8`\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -106,7 +106,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a16);\n    |            ^^^\n    |            |\n-   |            expected i64, found i16\n+   |            expected `i64`, found `i16`\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n@@ -115,14 +115,14 @@ error[E0308]: mismatched types\n LL |     id_i64(a32);\n    |            ^^^\n    |            |\n-   |            expected i64, found i32\n+   |            expected `i64`, found `i32`\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:76:11\n    |\n LL |     id_i8(c16);\n-   |           ^^^ expected i8, found i16\n+   |           ^^^ expected `i8`, found `i16`\n    |\n help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -133,7 +133,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:79:11\n    |\n LL |     id_i8(c32);\n-   |           ^^^ expected i8, found i32\n+   |           ^^^ expected `i8`, found `i32`\n    |\n help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -144,7 +144,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:11\n    |\n LL |     id_i8(c64);\n-   |           ^^^ expected i8, found i64\n+   |           ^^^ expected `i8`, found `i64`\n    |\n help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n@@ -157,14 +157,14 @@ error[E0308]: mismatched types\n LL |     id_i16(c8);\n    |            ^^\n    |            |\n-   |            expected i16, found i8\n+   |            expected `i16`, found `i8`\n    |            help: you can convert an `i8` to `i16`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:90:12\n    |\n LL |     id_i16(c32);\n-   |            ^^^ expected i16, found i32\n+   |            ^^^ expected `i16`, found `i32`\n    |\n help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -175,7 +175,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:93:12\n    |\n LL |     id_i16(c64);\n-   |            ^^^ expected i16, found i64\n+   |            ^^^ expected `i16`, found `i64`\n    |\n help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -188,7 +188,7 @@ error[E0308]: mismatched types\n LL |     id_i32(c8);\n    |            ^^\n    |            |\n-   |            expected i32, found i8\n+   |            expected `i32`, found `i8`\n    |            help: you can convert an `i8` to `i32`: `c8.into()`\n \n error[E0308]: mismatched types\n@@ -197,14 +197,14 @@ error[E0308]: mismatched types\n LL |     id_i32(c16);\n    |            ^^^\n    |            |\n-   |            expected i32, found i16\n+   |            expected `i32`, found `i16`\n    |            help: you can convert an `i16` to `i32`: `c16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:104:12\n    |\n LL |     id_i32(c64);\n-   |            ^^^ expected i32, found i64\n+   |            ^^^ expected `i32`, found `i64`\n    |\n help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n@@ -217,7 +217,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a8);\n    |            ^^\n    |            |\n-   |            expected i64, found i8\n+   |            expected `i64`, found `i8`\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n@@ -226,7 +226,7 @@ error[E0308]: mismatched types\n LL |     id_i64(a16);\n    |            ^^^\n    |            |\n-   |            expected i64, found i16\n+   |            expected `i64`, found `i16`\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n@@ -235,14 +235,14 @@ error[E0308]: mismatched types\n LL |     id_i64(a32);\n    |            ^^^\n    |            |\n-   |            expected i64, found i32\n+   |            expected `i64`, found `i32`\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:120:11\n    |\n LL |     id_u8(b16);\n-   |           ^^^ expected u8, found u16\n+   |           ^^^ expected `u8`, found `u16`\n    |\n help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -253,7 +253,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:123:11\n    |\n LL |     id_u8(b32);\n-   |           ^^^ expected u8, found u32\n+   |           ^^^ expected `u8`, found `u32`\n    |\n help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -264,7 +264,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:126:11\n    |\n LL |     id_u8(b64);\n-   |           ^^^ expected u8, found u64\n+   |           ^^^ expected `u8`, found `u64`\n    |\n help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n@@ -277,14 +277,14 @@ error[E0308]: mismatched types\n LL |     id_u16(b8);\n    |            ^^\n    |            |\n-   |            expected u16, found u8\n+   |            expected `u16`, found `u8`\n    |            help: you can convert an `u8` to `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:134:12\n    |\n LL |     id_u16(b32);\n-   |            ^^^ expected u16, found u32\n+   |            ^^^ expected `u16`, found `u32`\n    |\n help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -295,7 +295,7 @@ error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:137:12\n    |\n LL |     id_u16(b64);\n-   |            ^^^ expected u16, found u64\n+   |            ^^^ expected `u16`, found `u64`\n    |\n help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n@@ -308,7 +308,7 @@ error[E0308]: mismatched types\n LL |     id_u32(b8);\n    |            ^^\n    |            |\n-   |            expected u32, found u8\n+   |            expected `u32`, found `u8`\n    |            help: you can convert an `u8` to `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n@@ -317,14 +317,14 @@ error[E0308]: mismatched types\n LL |     id_u32(b16);\n    |            ^^^\n    |            |\n-   |            expected u32, found u16\n+   |            expected `u32`, found `u16`\n    |            help: you can convert an `u16` to `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:148:12\n    |\n LL |     id_u32(b64);\n-   |            ^^^ expected u32, found u64\n+   |            ^^^ expected `u32`, found `u64`\n    |\n help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n@@ -337,7 +337,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b8);\n    |            ^^\n    |            |\n-   |            expected u64, found u8\n+   |            expected `u64`, found `u8`\n    |            help: you can convert an `u8` to `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n@@ -346,7 +346,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b16);\n    |            ^^^\n    |            |\n-   |            expected u64, found u16\n+   |            expected `u64`, found `u16`\n    |            help: you can convert an `u16` to `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n@@ -355,7 +355,7 @@ error[E0308]: mismatched types\n LL |     id_u64(b32);\n    |            ^^^\n    |            |\n-   |            expected u64, found u32\n+   |            expected `u64`, found `u32`\n    |            help: you can convert an `u32` to `u64`: `b32.into()`\n \n error: aborting due to 36 previous errors"}, {"sha": "5200b4a829db236f4298288cabf0f03bb13ea250", "filename": "src/test/ui/integral-variable-unification-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,5 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected type `{integer}`\n-    //~| found type `{float}`\n     //~| expected integer, found floating-point number\n }"}, {"sha": "b49bff1b0d84dc9e076ce9409e0c8a9e3ac8fb53", "filename": "src/test/ui/integral-variable-unification-error.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     x = 5.0;\n    |         ^^^ expected integer, found floating-point number\n-   |\n-   = note: expected type `{integer}`\n-              found type `{float}`\n \n error: aborting due to previous error\n "}, {"sha": "6277aa05eb3655b3e9a21c7b32d6989b2897c720", "filename": "src/test/ui/issues/issue-10176.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,8 +2,8 @@ fn f() -> isize {\n     (return 1, return 2)\n //~^ ERROR mismatched types\n //~| expected type `isize`\n-//~| found type `(!, !)`\n-//~| expected isize, found tuple\n+//~| found tuple `(!, !)`\n+//~| expected `isize`, found tuple\n }\n \n fn main() {}"}, {"sha": "cd5361ffad3982110013dc95bff236bf3fcbb770", "filename": "src/test/ui/issues/issue-10176.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10176.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |           ----- expected `isize` because of return type\n LL |     (return 1, return 2)\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected isize, found tuple\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found tuple\n    |\n    = note: expected type `isize`\n-              found type `(!, !)`\n+             found tuple `(!, !)`\n \n error: aborting due to previous error\n "}, {"sha": "b0bafc9942ee96dd73259ac93d5e7f1f251fe021", "filename": "src/test/ui/issues/issue-10764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10764.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL | fn main() { f(bar) }\n    |               ^^^ expected \"Rust\" fn, found \"C\" fn\n    |\n-   = note: expected type `fn()`\n-              found type `extern \"C\" fn() {bar}`\n+   = note: expected fn pointer `fn()`\n+                 found fn item `extern \"C\" fn() {bar}`\n \n error: aborting due to previous error\n "}, {"sha": "8c2bafe63bd69841aed4dbf5c6d9068ffb2bb30d", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,7 @@ fn main() {\n         //~^ NOTE this is found to be of type `bool`\n         None    => (),\n         //~^ ERROR match arms have incompatible types\n-        //~| NOTE expected bool, found ()\n-        //~| NOTE expected type `bool`\n+        //~| NOTE expected `bool`, found `()`\n         _       => true\n     }\n }"}, {"sha": "7663a32883cca3a3a30f22d708a68cf874484bc1", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,14 +10,11 @@ LL | |         Some(2) => true,\n    | |                    ---- this is found to be of type `bool`\n LL | |\n LL | |         None    => (),\n-   | |                    ^^ expected bool, found ()\n+   | |                    ^^ expected `bool`, found `()`\n ...  |\n LL | |         _       => true\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   |\n-   = note: expected type `bool`\n-              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "bc7d1247502d3be9b70065d1f9f1baf483c015e6", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,11 @@ error[E0308]: mismatched types\n LL |     c.read_to(v);\n    |               ^\n    |               |\n-   |               expected &mut [u8], found struct `std::vec::Vec`\n+   |               expected `&mut [u8]`, found struct `std::vec::Vec`\n    |               help: consider mutably borrowing here: `&mut v`\n    |\n-   = note: expected type `&mut [u8]`\n-              found type `std::vec::Vec<_>`\n+   = note: expected mutable reference `&mut [u8]`\n+                         found struct `std::vec::Vec<_>`\n \n error: aborting due to previous error\n "}, {"sha": "b53563d7b653c458704f8592dd33962a7bc33b4d", "filename": "src/test/ui/issues/issue-11515.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11515.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let test = box Test { func: closure };\n    |                                 ^^^^^^^ expected trait `std::ops::FnMut`, found trait `std::ops::Fn`\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+              found struct `std::boxed::Box<(dyn std::ops::Fn() + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "1b22d6f45cf20e8dae25259d3fee7147830e1afb", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,8 +6,8 @@ LL |     match a {\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<std::boxed::Box<{integer}>>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<std::boxed::Box<{integer}>>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "ecafef259d3c9c4c62cb183a1c7ac57bac05e299", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,17 +6,17 @@ LL |   match t {\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `std::result::Result`, found enum `std::option::Option`\n    |\n-   = note: expected type `std::result::Result<_, {integer}>`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `std::result::Result<_, {integer}>`\n+              found enum `std::option::Option<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n LL |     None => ()\n    |     ^^^^ expected enum `std::result::Result`, found enum `std::option::Option`\n    |\n-   = note: expected type `std::result::Result<_, {integer}>`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `std::result::Result<_, {integer}>`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "01f8e3488360580c22ed561bd0b69fe44a2d4784", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-12997-2.rs:8:1\n    |\n LL | fn bar(x: isize) { }\n-   | ^^^^^^^^^^^^^^^^^^^^ expected isize, found mutable reference\n-   |\n-   = note: expected type `isize`\n-              found type `&mut test::Bencher`\n+   | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut test::Bencher`\n \n error: aborting due to previous error\n "}, {"sha": "7631831a81a5b2787be1811730173a858a65e188", "filename": "src/test/ui/issues/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &dyn Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected type `fn(&mut Baz, &mut dyn Foo)`\n-    //~| found type `fn(&mut Baz, &dyn Foo)`\n+    //~| expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found fn pointer `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "a8473c8a5241327d8e05636cec816261c4ce6e6e", "filename": "src/test/ui/issues/issue-13033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13033.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,8 @@ LL |     fn bar(&mut self, other: &mut dyn Foo);\n LL |     fn bar(&mut self, other: &dyn Foo) {}\n    |                              ^^^^^^^^ types differ in mutability\n    |\n-   = note: expected type `fn(&mut Baz, &mut dyn Foo)`\n-              found type `fn(&mut Baz, &dyn Foo)`\n+   = note: expected fn pointer `fn(&mut Baz, &mut dyn Foo)`\n+              found fn pointer `fn(&mut Baz, &dyn Foo)`\n help: consider change the type to match the mutability in trait\n    |\n LL |     fn bar(&mut self, other: &mut dyn Foo) {}"}, {"sha": "9129790c501e3d820ab57704af89ad85509c802b", "filename": "src/test/ui/issues/issue-13359.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,9 +5,9 @@ fn bar(_s: u32) { }\n fn main() {\n     foo(1*(1 as isize));\n     //~^ ERROR mismatched types\n-    //~| expected i16, found isize\n+    //~| expected `i16`, found `isize`\n \n     bar(1*(1 as usize));\n     //~^ ERROR mismatched types\n-    //~| expected u32, found usize\n+    //~| expected `u32`, found `usize`\n }"}, {"sha": "68258a8888a40e42dc072f348baf43a44ea39e7e", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:6:9\n    |\n LL |     foo(1*(1 as isize));\n-   |         ^^^^^^^^^^^^^^ expected i16, found isize\n+   |         ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n    |\n help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n    |\n LL |     bar(1*(1 as usize));\n-   |         ^^^^^^^^^^^^^^ expected u32, found usize\n+   |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |"}, {"sha": "5a465cc533bb7004fdcc2b9f8375412d934443e7", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,9 +9,6 @@ error[E0308]: mismatched types\n    |\n LL |     A::C = 1;\n    |            ^ expected struct `A::C`, found integer\n-   |\n-   = note: expected type `A::C`\n-              found type `{integer}`\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/issue-13407.rs:6:5"}, {"sha": "13c35dd84f7c51499f4f9a46bc37f59072e4554a", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13446.rs:3:26\n    |\n LL | static VEC: [u32; 256] = vec![];\n-   |                          ^^^^^^ expected array of 256 elements, found struct `std::vec::Vec`\n+   |                          ^^^^^^ expected array `[u32; 256]`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `[u32; 256]`\n-              found type `std::vec::Vec<_>`\n+   = note: expected array `[u32; 256]`\n+             found struct `std::vec::Vec<_>`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "411e7cbeebd76403bb75977dcc08da687488b8f4", "filename": "src/test/ui/issues/issue-13466.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,14 +7,14 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<{integer}>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<{integer}>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<{integer}>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<{integer}>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };\n }"}, {"sha": "fc20615757aa80bf4114da9c5df09fc7759ae542", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,8 +6,8 @@ LL |     let _x: usize = match Some(1) {\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<{integer}>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<{integer}>`\n+              found enum `std::result::Result<_, _>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n@@ -18,8 +18,8 @@ LL |     let _x: usize = match Some(1) {\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<{integer}>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<{integer}>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "de67a72a639803d8ed080d20afbd2ddcf30c0056", "filename": "src/test/ui/issues/issue-1362.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1362.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1362.rs:4:16\n    |\n LL |   let x: u32 = 20i32;\n-   |                ^^^^^ expected u32, found i32\n+   |                ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |"}, {"sha": "cdb261a238e5654a1caf812a44d0dfe5c24a4b07", "filename": "src/test/ui/issues/issue-13853.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,8 @@ LL |     fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I\n LL |         self.iter()\n    |         ^^^^^^^^^^^ expected type parameter `I`, found struct `std::slice::Iter`\n    |\n-   = note: expected type `I`\n-              found type `std::slice::Iter<'_, N>`\n+   = note: expected type parameter `I`\n+                      found struct `std::slice::Iter<'_, N>`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n@@ -27,8 +27,8 @@ LL |     iterate(graph);\n    |             expected reference, found struct `std::vec::Vec`\n    |             help: consider borrowing here: `&graph`\n    |\n-   = note: expected type `&_`\n-              found type `std::vec::Vec<Stuff>`\n+   = note: expected reference `&_`\n+                 found struct `std::vec::Vec<Stuff>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7db4734780817e19e428973e95ed322bd7fe3895", "filename": "src/test/ui/issues/issue-14091.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-14091.rs:2:5\n    |\n LL |     assert!(1,1);\n-   |     ^^^^^^^^^^^^^ expected bool, found integer\n-   |\n-   = note: expected type `bool`\n-              found type `{integer}`\n+   |     ^^^^^^^^^^^^^ expected `bool`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "9cf2f09e17747cf9d05a2533fc5b832197894faa", "filename": "src/test/ui/issues/issue-1448-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1448-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-1448-2.rs:6:24\n    |\n LL |     println!(\"{}\", foo(10i32));\n-   |                        ^^^^^ expected u32, found i32\n+   |                        ^^^^^ expected `u32`, found `i32`\n    |\n help: change the type of the numeric literal from `i32` to `u32`\n    |"}, {"sha": "555ec9f9868c5778cd086ef5bff443551c6776eb", "filename": "src/test/ui/issues/issue-14541.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,6 @@ struct Vec3 { y: f32, z: f32 }\n fn make(v: Vec2) {\n     let Vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected type `Vec2`\n-    //~| found type `Vec3`\n     //~| expected struct `Vec2`, found struct `Vec3`\n }\n "}, {"sha": "c5512e03007dfb5c3c56bd83332cdf71537eb1d0", "filename": "src/test/ui/issues/issue-14541.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14541.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let Vec3 { y: _, z: _ } = v;\n    |         ^^^^^^^^^^^^^^^^^^^ expected struct `Vec2`, found struct `Vec3`\n-   |\n-   = note: expected type `Vec2`\n-              found type `Vec3`\n \n error: aborting due to previous error\n "}, {"sha": "71b75a6e7e00f98e018c937249c8e6a892abdc3b", "filename": "src/test/ui/issues/issue-15094.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,8 +10,8 @@ impl<T: fmt::Debug> ops::FnOnce<(),> for Debuger<T> {\n     type Output = ();\n     fn call_once(self, _args: ()) {\n     //~^ ERROR `call_once` has an incompatible type for trait\n-    //~| expected type `extern \"rust-call\" fn\n-    //~| found type `fn\n+    //~| expected fn pointer `extern \"rust-call\" fn\n+    //~| found fn pointer `fn\n         println!(\"{:?}\", self.x);\n     }\n }"}, {"sha": "7b392fe1ac71b277bc14b846ebc406ebab8289b0", "filename": "src/test/ui/issues/issue-15094.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15094.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `call_once` has an incompatible type for trait\n LL |     fn call_once(self, _args: ()) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"rust-call\" fn, found \"Rust\" fn\n    |\n-   = note: expected type `extern \"rust-call\" fn(Debuger<T>, ())`\n-              found type `fn(Debuger<T>, ())`\n+   = note: expected fn pointer `extern \"rust-call\" fn(Debuger<T>, ())`\n+              found fn pointer `fn(Debuger<T>, ())`\n \n error: aborting due to previous error\n "}, {"sha": "0c1db02a8e6370f5b58980ee19ead2d30e1a8b03", "filename": "src/test/ui/issues/issue-15783.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,8 @@ fn main() {\n     let x = Some(&[name]);\n     let msg = foo(x);\n     //~^ ERROR mismatched types\n-    //~| expected type `std::option::Option<&[&str]>`\n-    //~| found type `std::option::Option<&[&str; 1]>`\n-    //~| expected slice, found array of 1 element\n+    //~| expected enum `std::option::Option<&[&str]>`\n+    //~| found enum `std::option::Option<&[&str; 1]>`\n+    //~| expected slice `[&str]`, found array `[&str; 1]`\n     assert_eq!(msg, 3);\n }"}, {"sha": "74a96df5b1b0fa4e339a1a565d28a31863b30b2c", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |                   ^ expected slice, found array of 1 element\n+   |                   ^ expected slice `[&str]`, found array `[&str; 1]`\n    |\n-   = note: expected type `std::option::Option<&[&str]>`\n-              found type `std::option::Option<&[&str; 1]>`\n+   = note: expected enum `std::option::Option<&[&str]>`\n+              found enum `std::option::Option<&[&str; 1]>`\n \n error: aborting due to previous error\n "}, {"sha": "a11c9d07f6fe5a1a236e4fa3e961079d98a66726", "filename": "src/test/ui/issues/issue-15896.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,8 +10,6 @@ fn main() {\n         E::B(\n           Tau{t: x},\n           //~^ ERROR mismatched types\n-          //~| expected type `main::R`\n-          //~| found type `main::Tau`\n           //~| expected enum `main::R`, found struct `main::Tau`\n           _) => x,\n     };"}, {"sha": "f553be9df55eb2c38c10a6cfd11796b3fa93464d", "filename": "src/test/ui/issues/issue-15896.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,9 +6,6 @@ LL |     let u = match e {\n LL |         E::B(\n LL |           Tau{t: x},\n    |           ^^^^^^^^^ expected enum `main::R`, found struct `main::Tau`\n-   |\n-   = note: expected type `main::R`\n-              found type `main::Tau`\n \n error: aborting due to previous error\n "}, {"sha": "321b3576cd61f00eb7ed7e158d6b1551904694ae", "filename": "src/test/ui/issues/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,5 +6,5 @@ struct Slice<T> {\n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n-    //~| found type `Slice<_>`\n+    //~| found struct `Slice<_>`\n }"}, {"sha": "c35edb0c8c0e332d65d0b5f6819c842a2df29915", "filename": "src/test/ui/issues/issue-16338.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16338.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-16338.rs:7:9\n    |\n LL |     let Slice { data: data, len: len } = \"foo\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected str, found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `str`, found struct `Slice`\n    |\n    = note: expected type `str`\n-              found type `Slice<_>`\n+            found struct `Slice<_>`\n \n error: aborting due to previous error\n "}, {"sha": "332352ca727ac2f0ccdd366b6cbfad529dbdd598", "filename": "src/test/ui/issues/issue-16401.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,9 +7,9 @@ fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `()`\n-        //~| found type `Slice<_>`\n-        //~| expected (), found struct `Slice`\n+        //~| expected unit type `()`\n+        //~| found struct `Slice<_>`\n+        //~| expected `()`, found struct `Slice`\n         _ => unreachable!()\n     }\n }"}, {"sha": "d3d6108be9d1d91de841585eb1bd74fb5e0f1f78", "filename": "src/test/ui/issues/issue-16401.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,10 +4,10 @@ error[E0308]: mismatched types\n LL |     match () {\n    |           -- this match expression has type `()`\n LL |         Slice { data: data, len: len } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `Slice`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Slice`\n    |\n-   = note: expected type `()`\n-              found type `Slice<_>`\n+   = note: expected unit type `()`\n+                 found struct `Slice<_>`\n \n error: aborting due to previous error\n "}, {"sha": "72a8cd9823a4bdc32b1954e8d17e3c481e719633", "filename": "src/test/ui/issues/issue-17033.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,8 +1,6 @@\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n-             //~| expected type `&mut ()`\n-             //~| found type `()`\n-             //~| expected &mut (), found ()\n+             //~| expected `&mut ()`, found `()`\n }\n \n fn main() {}"}, {"sha": "518fc30142c9421be62eaafa861f0b3a3a5cb4bf", "filename": "src/test/ui/issues/issue-17033.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17033.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |     (*p)(())\n    |          ^^\n    |          |\n-   |          expected &mut (), found ()\n+   |          expected `&mut ()`, found `()`\n    |          help: consider mutably borrowing here: `&mut ()`\n-   |\n-   = note: expected type `&mut ()`\n-              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "ef193ad85bf65c4a8d6d2d2f7065fec4005169db", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -13,8 +13,8 @@ LL | |         _ => None\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `RoomDirection`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `RoomDirection`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to previous error\n "}, {"sha": "527168dbe6cc282b025bbe4a70d3176cc9285e12", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -24,8 +24,8 @@ LL | |         _ => None\n LL | |     }\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `RoomDirection`\n-              found type `std::option::Option<_>`\n+   = note: expected enum `RoomDirection`\n+              found enum `std::option::Option<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3b868555fc522a566183ffc17fb42fb59a91f92e", "filename": "src/test/ui/issues/issue-17740.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,12 +5,12 @@ struct Foo<'a> {\n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n     //~^ mismatched `self` parameter type\n-    //~| expected type `Foo<'a>`\n-    //~| found type `Foo<'_>`\n+    //~| expected struct `Foo<'a>`\n+    //~| found struct `Foo<'_>`\n     //~| lifetime mismatch\n     //~| mismatched `self` parameter type\n-    //~| expected type `Foo<'a>`\n-    //~| found type `Foo<'_>`\n+    //~| expected struct `Foo<'a>`\n+    //~| found struct `Foo<'_>`\n     //~| lifetime mismatch\n     }\n }"}, {"sha": "cd1d7f821c706df3c50bfa399ae7dd46a1eeffcb", "filename": "src/test/ui/issues/issue-17740.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17740.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn bar(self: &mut Foo) {\n    |                  ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a>`\n-              found type `Foo<'_>`\n+   = note: expected struct `Foo<'a>`\n+              found struct `Foo<'_>`\n note: the anonymous lifetime #2 defined on the method body at 6:5...\n   --> $DIR/issue-17740.rs:6:5\n    |\n@@ -29,8 +29,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn bar(self: &mut Foo) {\n    |                  ^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Foo<'a>`\n-              found type `Foo<'_>`\n+   = note: expected struct `Foo<'a>`\n+              found struct `Foo<'_>`\n note: the lifetime `'a` as defined on the impl at 5:7...\n   --> $DIR/issue-17740.rs:5:7\n    |"}, {"sha": "f347c26f066e0fa66715e0b0540534d65df9b7f6", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&str, _>`\n-              found type `Pair<&str, _>`\n+   = note: expected struct `Pair<&str, _>`\n+              found struct `Pair<&str, _>`\n note: the anonymous lifetime #2 defined on the method body at 8:5...\n   --> $DIR/issue-17905-2.rs:8:5\n    |\n@@ -27,8 +27,8 @@ error[E0308]: mismatched `self` parameter type\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&str, _>`\n-              found type `Pair<&str, _>`\n+   = note: expected struct `Pair<&str, _>`\n+              found struct `Pair<&str, _>`\n note: the lifetime `'_` as defined on the impl at 5:5...\n   --> $DIR/issue-17905-2.rs:5:5\n    |"}, {"sha": "62d5a6de760dfad8c55a20f6069cafc94758065b", "filename": "src/test/ui/issues/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,7 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n-                                           //~| expected type `()`\n-                                           //~| found type `{integer}`\n-                                           //~| expected (), found integer\n+                                           //~| expected `()`, found integer\n         765\n     };\n }"}, {"sha": "b78f4a6d2934459b322ff0bb08dded9372c024ca", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,15 +3,11 @@ error[E0317]: if may be missing an else clause\n    |\n LL | /     if let Some(homura) = Some(\"madoka\") {\n LL | |\n-LL | |\n-LL | |\n LL | |         765\n    | |         --- found here\n LL | |     };\n-   | |_____^ expected (), found integer\n+   | |_____^ expected `()`, found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "0c8e6e402e2ce008f39d267221c661949a1a1b57", "filename": "src/test/ui/issues/issue-20225.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,21 +5,18 @@ struct Foo;\n impl<'a, T> Fn<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n impl<'a, T> FnMut<(&'a T,)> for Foo {\n   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n impl<'a, T> FnOnce<(&'a T,)> for Foo {\n   type Output = ();\n \n   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n   //~^ ERROR: has an incompatible type for trait\n-  //~| expected reference\n }\n \n fn main() {}"}, {"sha": "1c5911e05f7673b11bd56c0d37ffd227afb81cf1", "filename": "src/test/ui/issues/issue-20225.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20225.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,37 +4,37 @@ error[E0053]: method `call` has an incompatible type for trait\n LL | impl<'a, T> Fn<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call(&self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(&Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(&Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(&Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(&Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_mut` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:12:3\n+  --> $DIR/issue-20225.rs:11:3\n    |\n LL | impl<'a, T> FnMut<(&'a T,)> for Foo {\n    |          - this type parameter\n LL |   extern \"rust-call\" fn call_mut(&mut self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(&mut Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(&mut Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(&mut Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n error[E0053]: method `call_once` has an incompatible type for trait\n-  --> $DIR/issue-20225.rs:20:3\n+  --> $DIR/issue-20225.rs:18:3\n    |\n LL | impl<'a, T> FnOnce<(&'a T,)> for Foo {\n    |          - this type parameter\n ...\n LL |   extern \"rust-call\" fn call_once(self, (_,): (T,)) {}\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found type parameter `T`\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&T`, found type parameter `T`\n    |\n-   = note: expected type `extern \"rust-call\" fn(Foo, (&'a T,))`\n-              found type `extern \"rust-call\" fn(Foo, (T,))`\n+   = note: expected fn pointer `extern \"rust-call\" fn(Foo, (&'a T,))`\n+              found fn pointer `extern \"rust-call\" fn(Foo, (T,))`\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "ace3e014647c9d9421869ba9a8d89bef589984de", "filename": "src/test/ui/issues/issue-21332.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21332.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0053]: method `next` has an incompatible type for trait\n LL |     fn next(&mut self) -> Result<i32, i32> { Ok(7) }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `fn(&mut S) -> std::option::Option<i32>`\n-              found type `fn(&mut S) -> std::result::Result<i32, i32>`\n+   = note: expected fn pointer `fn(&mut S) -> std::option::Option<i32>`\n+              found fn pointer `fn(&mut S) -> std::result::Result<i32, i32>`\n \n error: aborting due to previous error\n "}, {"sha": "46524bc2c18e103d19d13e5265541df6804fa0bb", "filename": "src/test/ui/issues/issue-22684.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22684.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-22684.rs:17:17\n    |\n LL |     let _: () = foo::Foo.bar();\n-   |                 ^^^^^^^^^^^^^^ expected (), found bool\n-   |\n-   = note: expected type `()`\n-              found type `bool`\n+   |                 ^^^^^^^^^^^^^^ expected `()`, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "d126e1bf0b5348aace18b668f194ffaa4ae8c957", "filename": "src/test/ui/issues/issue-23589.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23589.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,10 +11,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-23589.rs:2:29\n    |\n LL |     let v: Vec(&str) = vec!['1', '2'];\n-   |                             ^^^ expected &str, found char\n-   |\n-   = note: expected type `&str`\n-              found type `char`\n+   |                             ^^^ expected `&str`, found `char`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04817f2596abd3401fb482aadd9af39f51266f51", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     x = |c| c + 1;\n    |         ^^^^^^^^^ expected closure, found a different closure\n    |\n-   = note: expected type `[closure@$DIR/issue-24036.rs:2:17: 2:26]`\n-              found type `[closure@$DIR/issue-24036.rs:3:9: 3:18]`\n+   = note: expected closure `[closure@$DIR/issue-24036.rs:2:17: 2:26]`\n+              found closure `[closure@$DIR/issue-24036.rs:3:9: 3:18]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n \n@@ -23,7 +23,7 @@ LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n-              found type `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n+           found closure `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}, {"sha": "3eb1f1b4f6e81897bd13b49f902c9c684a673bb4", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,8 +7,8 @@ LL | trait Trait: Sized {\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n-   = note: expected type `T`\n-              found type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n+   = note: expected type parameter `T`\n+             found associated type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n    = note: you might be missing a type parameter or trait bound\n \n error: aborting due to previous error"}, {"sha": "fb0c7a0d80904989a8c5a9a6847227e0f85e0c77", "filename": "src/test/ui/issues/issue-24322.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24322.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     let x: &fn(&B) -> u32 = &B::func;\n    |                             ^^^^^^^^ expected fn pointer, found fn item\n    |\n-   = note: expected type `&for<'r> fn(&'r B) -> u32`\n-              found type `&for<'r> fn(&'r B) -> u32 {B::func}`\n+   = note: expected reference `&for<'r> fn(&'r B) -> u32`\n+              found reference `&for<'r> fn(&'r B) -> u32 {B::func}`\n \n error: aborting due to previous error\n "}, {"sha": "1166a887f86963ba670b903c2c98f17b6e7ff151", "filename": "src/test/ui/issues/issue-24819.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24819.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(&mut v);\n    |         ^^^^^^ expected struct `std::collections::HashSet`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `&mut std::collections::HashSet<u32>`\n-              found type `&mut std::vec::Vec<_>`\n+   = note: expected mutable reference `&mut std::collections::HashSet<u32>`\n+              found mutable reference `&mut std::vec::Vec<_>`\n \n error: aborting due to previous error\n "}, {"sha": "e04de33f6ef2e22d80f29b5c5f8e7c2bf77ed0f6", "filename": "src/test/ui/issues/issue-27008.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,7 +3,5 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected type `usize`\n-    //~| found type `S`\n-    //~| expected usize, found struct `S`\n+    //~| expected `usize`, found struct `S`\n }"}, {"sha": "5b7e74c1c30125aadfd360efa3a725788ba34c29", "filename": "src/test/ui/issues/issue-27008.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27008.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27008.rs:4:17\n    |\n LL |     let b = [0; S];\n-   |                 ^ expected usize, found struct `S`\n-   |\n-   = note: expected type `usize`\n-              found type `S`\n+   |                 ^ expected `usize`, found struct `S`\n \n error: aborting due to previous error\n "}, {"sha": "71e4d7850143b7a8755de2a3bfaa1add375ed167", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -14,42 +14,30 @@ error[E0308]: mismatched types\n LL |         loop { break };\n    |                ^^^^^\n    |                |\n-   |                expected i32, found ()\n+   |                expected `i32`, found `()`\n    |                help: give it a value of the expected type: `break 42`\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9\n    |\n LL | /         'b:\n LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n-   | |____________________________^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n+   | |____________________________^ expected `i32`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:12:9\n    |\n LL | /         'c:\n LL | |         for _ in None { break }; // but here we cite the whole loop\n-   | |_______________________________^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n+   | |_______________________________^ expected `i32`, found `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:15:9\n    |\n LL | /         'd:\n LL | |         while let Some(_) = None { break };\n-   | |__________________________________________^ expected i32, found ()\n-   |\n-   = note: expected type `i32`\n-              found type `()`\n+   | |__________________________________________^ expected `i32`, found `()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d16252686698d29466df439201345d9eec27ab70", "filename": "src/test/ui/issues/issue-29084.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,7 @@ macro_rules! foo {\n         fn bar(d: u8) { }\n         bar(&mut $d);\n         //~^ ERROR mismatched types\n-        //~| expected u8, found &mut u8\n-        //~| expected type `u8`\n-        //~| found type `&mut u8`\n+        //~| expected `u8`, found `&mut u8`\n     }}\n }\n "}, {"sha": "3e7ea745ce49aed22ad156dbcdec7cda0154fe55", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,13 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-29084.rs:4:13\n    |\n LL |         bar(&mut $d);\n-   |             ^^^^^^^ expected u8, found &mut u8\n+   |             ^^^^^^^ expected `u8`, found `&mut u8`\n ...\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n-   |\n-   = note: expected type `u8`\n-              found type `&mut u8`\n \n error: aborting due to previous error\n "}, {"sha": "1798e3e751923a57246c7e4c076c45f8853ea424", "filename": "src/test/ui/issues/issue-2951.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,9 +2,9 @@ fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n     xx = y;\n     //~^  ERROR mismatched types\n-    //~| expected type `T`\n-    //~| found type `U`\n     //~| expected type parameter `T`, found type parameter `U`\n+    //~| expected type parameter `T`\n+    //~| found type parameter `U`\n }\n \n fn main() {"}, {"sha": "b966b339389170e4e942d1b0be057d58fd8a2dbc", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,8 +9,8 @@ LL |     let mut xx = x;\n LL |     xx = y;\n    |          ^ expected type parameter `T`, found type parameter `U`\n    |\n-   = note: expected type `T`\n-              found type `U`\n+   = note: expected type parameter `T`\n+              found type parameter `U`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n "}, {"sha": "ccd05fa6bfb0957ea00688b6a4202ad9e3d2184b", "filename": "src/test/ui/issues/issue-30225.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30225.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     u = v; // mark $0 and $1 in a subtype relationship\n    |         ^ expected struct `A`, found struct `B`\n-   |\n-   = note: expected type `A`\n-              found type `B`\n \n error: aborting due to previous error\n "}, {"sha": "26195318380d2ad9d7a1f7fa917db41c0a89f4e6", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -10,7 +10,7 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n         .cloned()\n         //~^ ERROR type mismatch resolving\n         //~| expected type `u8`\n-        //~| found type `&_`\n+        //~| found reference `&_`\n         .collect(); //~ ERROR no method named `collect`\n }\n "}, {"sha": "38cf3c4f930e8a84a5c1d8c0701aae0623e12dab", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0271]: type mismatch resolving `<std::iter::TakeWhile<&mut std::vec::Into\n   --> $DIR/issue-31173.rs:10:10\n    |\n LL |         .cloned()\n-   |          ^^^^^^ expected u8, found reference\n+   |          ^^^^^^ expected `u8`, found reference\n    |\n-   = note: expected type `u8`\n-              found type `&_`\n+   = note:   expected type `u8`\n+           found reference `&_`\n \n error[E0599]: no method named `collect` found for type `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6 found_e:_]>>` in the current scope\n   --> $DIR/issue-31173.rs:14:10"}, {"sha": "e0655d3f6dbf6d2daa750d2b4aaf8ebc593ed27a", "filename": "src/test/ui/issues/issue-31910.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,7 +1,7 @@\n enum Enum<T: Trait> {\n     X = Trait::Number,\n     //~^ ERROR mismatched types\n-    //~| expected isize, found i32\n+    //~| expected `isize`, found `i32`\n }\n \n trait Trait {"}, {"sha": "c5c988cdaa75a0a73bed98d681b6446f93f04303", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-31910.rs:2:9\n    |\n LL |     X = Trait::Number,\n-   |         ^^^^^^^^^^^^^ expected isize, found i32\n+   |         ^^^^^^^^^^^^^ expected `isize`, found `i32`\n    |\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |"}, {"sha": "7c0928b19249994902a3d6b2cb6df41c838a8dda", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,12 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32323.rs:5:30\n    |\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n-   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n+   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |        |\n    |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n-   = note: expected type `<T as Tr<'a>>::Out`\n-              found type `()`\n+   = note: expected associated type `<T as Tr<'a>>::Out`\n+                    found unit type `()`\n    = note: consider constraining the associated type `<T as Tr<'a>>::Out` to `()` or calling a method that returns `<T as Tr<'a>>::Out`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n "}, {"sha": "522df6a07c2c6a521911f0cceb15b89b1b5e6089", "filename": "src/test/ui/issues/issue-33504.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |         let Test = 1;\n    |             ^^^^ expected integer, found struct `Test`\n-   |\n-   = note: expected type `{integer}`\n-              found type `Test`\n \n error: aborting due to previous error\n "}, {"sha": "734ae78f362dbc2dd94c50f542e0c9d90096300d", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,17 +4,17 @@ error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _,\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |                                    ^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(&_, &_)`\n-              found type `&_`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n \n error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n   --> $DIR/issue-33941.rs:4:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(&_, &_)`\n-              found type `&_`\n+   = note:  expected tuple `(&_, &_)`\n+           found reference `&_`\n    = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n error: aborting due to 2 previous errors"}, {"sha": "fc90e0674cf55d2f7f9ed327e7b73d1defc8054d", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -29,10 +29,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-34334.rs:2:31\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |                               ^^^^^^ expected bool, found struct `std::vec::Vec`\n+   |                               ^^^^^^ expected `bool`, found struct `std::vec::Vec`\n    |\n    = note: expected type `bool`\n-              found type `std::vec::Vec<_>`\n+            found struct `std::vec::Vec<_>`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side expression"}, {"sha": "3817d0e6a3ee93c00a83265e256f83ff0434a553", "filename": "src/test/ui/issues/issue-3477.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3477.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let _p: char = 100;\n     //~^ ERROR mismatched types\n-    //~| expected char, found u8\n+    //~| expected `char`, found `u8`\n }"}, {"sha": "6510c215fcf1fc3e9d88dbdb6133dcbc6f363fa0", "filename": "src/test/ui/issues/issue-3477.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3477.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-3477.rs:2:20\n    |\n LL |     let _p: char = 100;\n-   |                    ^^^ expected char, found u8\n+   |                    ^^^ expected `char`, found `u8`\n \n error: aborting due to previous error\n "}, {"sha": "4a52a292ef30a9f232a121845cd5737c16f5679e", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -11,8 +11,8 @@ LL | fn test() -> Foo { Foo }\n    |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n    |              expected `Foo` because of return type\n    |\n-   = note: expected type `Foo`\n-              found type `fn(u32) -> Foo {Foo}`\n+   = note: expected struct `Foo`\n+             found fn item `fn(u32) -> Foo {Foo}`\n \n error: aborting due to previous error\n "}, {"sha": "be21569315b72a809e19156a25d844a4c90dd7b9", "filename": "src/test/ui/issues/issue-35869.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35869.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,10 @@ LL |     fn foo(_: fn(u8) -> ());\n    |               ------------ type in trait\n ...\n LL |     fn foo(_: fn(u16) -> ()) {}\n-   |               ^^^^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n-   = note: expected type `fn(fn(u8))`\n-              found type `fn(fn(u16))`\n+   = note: expected fn pointer `fn(fn(u8))`\n+              found fn pointer `fn(fn(u16))`\n \n error[E0053]: method `bar` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:13:15\n@@ -17,10 +17,10 @@ LL |     fn bar(_: Option<u8>);\n    |               ---------- type in trait\n ...\n LL |     fn bar(_: Option<u16>) {}\n-   |               ^^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^^ expected `u8`, found `u16`\n    |\n-   = note: expected type `fn(std::option::Option<u8>)`\n-              found type `fn(std::option::Option<u16>)`\n+   = note: expected fn pointer `fn(std::option::Option<u8>)`\n+              found fn pointer `fn(std::option::Option<u16>)`\n \n error[E0053]: method `baz` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:15:15\n@@ -29,10 +29,10 @@ LL |     fn baz(_: (u8, u16));\n    |               --------- type in trait\n ...\n LL |     fn baz(_: (u16, u16)) {}\n-   |               ^^^^^^^^^^ expected u8, found u16\n+   |               ^^^^^^^^^^ expected `u8`, found `u16`\n    |\n-   = note: expected type `fn((u8, u16))`\n-              found type `fn((u16, u16))`\n+   = note: expected fn pointer `fn((u8, u16))`\n+              found fn pointer `fn((u16, u16))`\n \n error[E0053]: method `qux` has an incompatible type for trait\n   --> $DIR/issue-35869.rs:17:17\n@@ -41,10 +41,10 @@ LL |     fn qux() -> u8;\n    |                 -- type in trait\n ...\n LL |     fn qux() -> u16 { 5u16 }\n-   |                 ^^^ expected u8, found u16\n+   |                 ^^^ expected `u8`, found `u16`\n    |\n-   = note: expected type `fn() -> u8`\n-              found type `fn() -> u16`\n+   = note: expected fn pointer `fn() -> u8`\n+              found fn pointer `fn() -> u16`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64050c72f2ca6b301cc1b855722adbec24873d1b", "filename": "src/test/ui/issues/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,8 +2,8 @@ fn main() {\n     match None {\n         Err(_) => ()\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n-        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option<_>`\n+        //~| found enum `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     }\n }"}, {"sha": "8856f0e3a48443560e934c25ba6ffc04e0121ee9", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,8 +6,8 @@ LL |     match None {\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n-   = note: expected type `std::option::Option<_>`\n-              found type `std::result::Result<_, _>`\n+   = note: expected enum `std::option::Option<_>`\n+              found enum `std::result::Result<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "00952356b1830705e29b6bfd771df7921049deee", "filename": "src/test/ui/issues/issue-37026.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37026.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,19 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:6:9\n    |\n LL |     let empty_struct::XEmpty2 = ();\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty2`\n-   |\n-   = note: expected type `()`\n-              found type `empty_struct::XEmpty2`\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `empty_struct::XEmpty2`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-37026.rs:7:9\n    |\n LL |     let empty_struct::XEmpty6(..) = ();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `empty_struct::XEmpty6`\n-   |\n-   = note: expected type `()`\n-              found type `empty_struct::XEmpty6`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `empty_struct::XEmpty6`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a9529a68b7fa5ec64dc61eabf44f5165a9d018e", "filename": "src/test/ui/issues/issue-37665.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37665.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-37665.rs:10:17\n    |\n LL |     let x: () = 0;\n-   |                 ^ expected (), found integer\n-   |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   |                 ^ expected `()`, found integer\n \n error: aborting due to previous error\n "}, {"sha": "61cb3d7c58f382be322f3d0a07273b6e1862a36d", "filename": "src/test/ui/issues/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37884.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,8 +9,8 @@ LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^ lifetime mismatch\n    |\n-   = note: expected type `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n-              found type `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+   = note: expected fn pointer `fn(&mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n+              found fn pointer `fn(&'a mut RepeatMut<'a, T>) -> std::option::Option<&mut T>`\n note: the anonymous lifetime #1 defined on the method body at 6:5...\n   --> $DIR/issue-37884.rs:6:5\n    |"}, {"sha": "707fcc7e919cd2d911bc4f7e7725cd49220520aa", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -12,8 +12,8 @@ error[E0308]: mismatched types\n LL |     let x: &Bottom = &t;\n    |                      ^^ expected struct `Bottom`, found struct `Top`\n    |\n-   = note: expected type `&Bottom`\n-              found type `&Top`\n+   = note: expected reference `&Bottom`\n+              found reference `&Top`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6f342b459c076a1b04bea14afceb398e3ec24a87", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,10 +5,8 @@ LL |     fn visit() {}\n    |     ---------- required by `Visit::visit`\n ...\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected `&()`, found `()`\n    |\n-   = note: expected type `&()`\n-              found type `()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n \n error: aborting due to previous error"}, {"sha": "503647ef4a82f16fc7a04a7dcb39608c0f410019", "filename": "src/test/ui/issues/issue-39974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39974.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,7 +3,7 @@ const LENGTH: f64 = 2;\n struct Thing {\n     f: [[f64; 2]; LENGTH],\n     //~^ ERROR mismatched types\n-    //~| expected usize, found f64\n+    //~| expected `usize`, found `f64`\n }\n \n fn main() {"}, {"sha": "56365e51e0a741cccbc150fdaa0900b4c48ba2c3", "filename": "src/test/ui/issues/issue-39974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39974.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-39974.rs:4:19\n    |\n LL |     f: [[f64; 2]; LENGTH],\n-   |                   ^^^^^^ expected usize, found f64\n+   |                   ^^^^^^ expected `usize`, found `f64`\n \n error: aborting due to previous error\n "}, {"sha": "983fdb13083a1a9eaff415ddabb3a1bcbe32b9ce", "filename": "src/test/ui/issues/issue-40000.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40000.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     foo(bar);\n    |         ^^^ expected concrete lifetime, found bound lifetime parameter\n    |\n-   = note: expected type `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n-              found type `std::boxed::Box<dyn std::ops::Fn(_)>`\n+   = note: expected struct `std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r i32) + 'static)>`\n+              found struct `std::boxed::Box<dyn std::ops::Fn(_)>`\n \n error: aborting due to previous error\n "}, {"sha": "87ff5a650feb50f2f87550bd55f140b5cc1c862b", "filename": "src/test/ui/issues/issue-40749.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40749.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     [0; ..10];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `std::ops::RangeTo<{integer}>`\n+    //~| found struct `std::ops::RangeTo<{integer}>`\n }"}, {"sha": "4170a96bddfb3586bec3c1a1ea60890162ad504d", "filename": "src/test/ui/issues/issue-40749.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40749.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-40749.rs:2:9\n    |\n LL |     [0; ..10];\n-   |         ^^^^ expected usize, found struct `std::ops::RangeTo`\n+   |         ^^^^ expected `usize`, found struct `std::ops::RangeTo`\n    |\n    = note: expected type `usize`\n-              found type `std::ops::RangeTo<{integer}>`\n+            found struct `std::ops::RangeTo<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "62307d387c822603c7bf9fbcf375590693c412d8", "filename": "src/test/ui/issues/issue-41549.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41549.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0326]: implemented const `CONST` has an incompatible type for trait\n   --> $DIR/issue-41549.rs:9:18\n    |\n LL |     const CONST: () = ();\n-   |                  ^^ expected u32, found ()\n-   |\n-   = note: expected type `u32`\n-              found type `()`\n+   |                  ^^ expected `u32`, found `()`\n \n error: aborting due to previous error\n "}, {"sha": "61a0ae5fa91a7f08fecb2fe43865f94995fbcdd5", "filename": "src/test/ui/issues/issue-41742.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41742.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-41742.rs:24:7\n    |\n LL |     H[\"?\"].f();\n-   |       ^^^ expected u32, found reference\n-   |\n-   = note: expected type `u32`\n-              found type `&'static str`\n+   |       ^^^ expected `u32`, found `&str`\n \n error: aborting due to previous error\n "}, {"sha": "2d655e4b7e743ab9e666d5d7dc6b8c055070369b", "filename": "src/test/ui/issues/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,7 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR if may be missing an else clause\n-//~| expected type `()`\n-//~| found type `{integer}`\n-//~| expected (), found integer\n+//~| expected `()`, found integer\n         1\n     };\n }"}, {"sha": "aacc426783d663ea7b120c7a24380d30693db725", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,15 +5,11 @@ LL |       } else if false {\n    |  ____________^\n LL | |\n LL | |\n-LL | |\n-LL | |\n LL | |         1\n    | |         - found here\n LL | |     };\n-   | |_____^ expected (), found integer\n+   | |_____^ expected `()`, found integer\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n "}, {"sha": "0ed3d27c65b6e3f64a087568e0901922d9526cfc", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -14,15 +14,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43162.rs:1:13\n    |\n LL | fn foo() -> bool {\n-   |    ---      ^^^^ expected bool, found ()\n+   |    ---      ^^^^ expected `bool`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n LL |\n LL |     break true;\n    |               - help: consider removing this semicolon\n-   |\n-   = note: expected type `bool`\n-              found type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27aebc548e1981a74c3d9fc00bc23ccd7baaf9c0", "filename": "src/test/ui/issues/issue-43420-no-over-suggest.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43420-no-over-suggest.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43420-no-over-suggest.rs:8:9\n    |\n LL |     foo(&a);\n-   |         ^^ expected slice, found struct `std::vec::Vec`\n+   |         ^^ expected slice `[u16]`, found struct `std::vec::Vec`\n    |\n-   = note: expected type `&[u16]`\n-              found type `&std::vec::Vec<u8>`\n+   = note: expected reference `&[u16]`\n+              found reference `&std::vec::Vec<u8>`\n \n error: aborting due to previous error\n "}, {"sha": "fc54e7c62bb247d63f7e676b06207571d2a10743", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,12 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-44023.rs:5:36\n    |\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n-   |    ------------------------        ^^^^^ expected isize, found ()\n+   |    ------------------------        ^^^^^ expected `isize`, found `()`\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n-   |\n-   = note: expected type `isize`\n-              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "caf85d44aac5c424f0153f289b78c4e041c27318", "filename": "src/test/ui/issues/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,7 +4,5 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected type `usize`\n-    //~| found type `[u8; 4]`\n-    //~| expected usize, found array of 4 elements\n+    //~| expected `usize`, found array `[u8; 4]`\n }"}, {"sha": "1ae97b69c6caca66254d01bc944bf79c267dc92d", "filename": "src/test/ui/issues/issue-4517.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4517.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-4517.rs:5:9\n    |\n LL |     bar(foo);\n-   |         ^^^ expected usize, found array of 4 elements\n-   |\n-   = note: expected type `usize`\n-              found type `[u8; 4]`\n+   |         ^^^ expected `usize`, found array `[u8; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "a861c38b0016ff8be5be439f1590249ead8872da", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,11 @@ error[E0308]: mismatched types\n LL | fn main() { test(Ok(())); }\n    |                     ^^\n    |                     |\n-   |                     expected enum `std::option::Option`, found ()\n+   |                     expected enum `std::option::Option`, found `()`\n    |                     help: try using a variant of the expected enum: `Some(())`\n    |\n-   = note: expected type `std::option::Option<()>`\n-              found type `()`\n+   = note:   expected enum `std::option::Option<()>`\n+           found unit type `()`\n \n error: aborting due to previous error\n "}, {"sha": "a6f97c3c9af652bd1a6a20bc6e1ba68be9f557f1", "filename": "src/test/ui/issues/issue-46302.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46302.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,11 +4,8 @@ error[E0308]: mismatched types\n LL |   let u: &str = if true { s[..2] } else { s };\n    |                           ^^^^^^\n    |                           |\n-   |                           expected &str, found str\n+   |                           expected `&str`, found `str`\n    |                           help: consider borrowing here: `&s[..2]`\n-   |\n-   = note: expected type `&str`\n-              found type `str`\n \n error: aborting due to previous error\n "}, {"sha": "2d666e2b66c25ca05e546d33b5b6f58f42e1842d", "filename": "src/test/ui/issues/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,23 +4,17 @@ error[E0308]: mismatched types\n LL |     light_flows_our_war_of_mocking_words(behold as usize);\n    |                                          ^^^^^^^^^^^^^^^\n    |                                          |\n-   |                                          expected &usize, found usize\n+   |                                          expected `&usize`, found `usize`\n    |                                          help: consider borrowing here: `&(behold as usize)`\n-   |\n-   = note: expected type `&usize`\n-              found type `usize`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-46756-consider-borrowing-cast-or-binexpr.rs:14:42\n    |\n LL |     light_flows_our_war_of_mocking_words(with_tears + 4);\n    |                                          ^^^^^^^^^^^^^^\n    |                                          |\n-   |                                          expected &usize, found usize\n+   |                                          expected `&usize`, found `usize`\n    |                                          help: consider borrowing here: `&(with_tears + 4)`\n-   |\n-   = note: expected type `&usize`\n-              found type `usize`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cf95d309c63442d42fc605af7acb61b50a49f76b", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-47486.rs:2:10\n    |\n LL |     () < std::mem::size_of::<_>();\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found usize\n-   |\n-   = note: expected type `()`\n-              found type `usize`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11"}, {"sha": "e5bb9298cd5846b8a518ab79ab5307953b44eddf", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48364.rs:2:21\n    |\n LL |     b\"\".starts_with(stringify!(foo))\n-   |                     ^^^^^^^^^^^^^^^ expected slice, found str\n+   |                     ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |\n-   = note: expected type `&[u8]`\n-              found type `&'static str`\n+   = note: expected reference `&[u8]`\n+              found reference `&'static str`\n \n error: aborting due to previous error\n "}, {"sha": "712a7bc33f840f33cf56ab4fa2310fd29a4f2249", "filename": "src/test/ui/issues/issue-48838.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48838.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-48838.rs:2:14\n    |\n LL |     Square = |x| x,\n-   |              ^^^^^ expected isize, found closure\n+   |              ^^^^^ expected `isize`, found closure\n    |\n    = note: expected type `isize`\n-              found type `[closure@$DIR/issue-48838.rs:2:14: 2:19]`\n+           found closure `[closure@$DIR/issue-48838.rs:2:14: 2:19]`\n \n error: aborting due to previous error\n "}, {"sha": "634bd698d77056157113be7d86bf768eb4f11185", "filename": "src/test/ui/issues/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n     //~| expected type `{integer}`\n-    //~| found type `(isize, isize)`\n+    //~| found tuple `(isize, isize)`\n     //~| expected integer, found tuple\n }"}, {"sha": "35435d0e618196a25d255d929d680b404b0ed17a", "filename": "src/test/ui/issues/issue-4968.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,7 +5,7 @@ LL |     match 42 { A => () }\n    |                ^ expected integer, found tuple\n    |\n    = note: expected type `{integer}`\n-              found type `(isize, isize)`\n+             found tuple `(isize, isize)`\n \n error: aborting due to previous error\n "}, {"sha": "0a150fbf53a0cbbeb2cffa1a4201da586fad84cd", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -28,11 +28,9 @@ error[E0317]: if may be missing an else clause\n LL |         Drop = assert_eq!(1, 1)\n    |                ^^^^^^^^^^^^^^^^\n    |                |\n-   |                expected (), found isize\n+   |                expected `()`, found `isize`\n    |                found here\n    |\n-   = note: expected type `()`\n-              found type `isize`\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)"}, {"sha": "c2630b664b55f22b6cd311e6a28b90fdb61155a3", "filename": "src/test/ui/issues/issue-50585.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50585.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -8,10 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50585.rs:2:18\n    |\n LL |     |y: Vec<[(); for x in 0..2 {}]>| {};\n-   |                  ^^^^^^^^^^^^^^^^ expected usize, found ()\n-   |\n-   = note: expected type `usize`\n-              found type `()`\n+   |                  ^^^^^^^^^^^^^^^^ expected `usize`, found `()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08d9a8399200acb9e4105bd27478eafddb83464b", "filename": "src/test/ui/issues/issue-50600.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50600.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50600.rs:2:13\n    |\n LL |     fn([u8; |x: u8| {}]),\n-   |             ^^^^^^^^^^ expected usize, found closure\n+   |             ^^^^^^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-              found type `[closure@$DIR/issue-50600.rs:2:13: 2:23]`\n+           found closure `[closure@$DIR/issue-50600.rs:2:13: 2:23]`\n \n error: aborting due to previous error\n "}, {"sha": "1f348c4cf1f66322e480871baec4eba8a3148cc4", "filename": "src/test/ui/issues/issue-50688.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50688.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/issue-50688.rs:2:9\n    |\n LL |     [1; || {}];\n-   |         ^^^^^ expected usize, found closure\n+   |         ^^^^^ expected `usize`, found closure\n    |\n    = note: expected type `usize`\n-              found type `[closure@$DIR/issue-50688.rs:2:9: 2:14]`\n+           found closure `[closure@$DIR/issue-50688.rs:2:9: 2:14]`\n \n error: aborting due to previous error\n "}, {"sha": "71dd237cad5828c997c48b7b349485b09b8d761a", "filename": "src/test/ui/issues/issue-5100.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -7,41 +7,41 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `A`\n //~| expected tuple, found enum `A`\n+//~| expected tuple `(bool, bool)`\n+//~| found enum `A`\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `(_, _, _)`\n //~| expected a tuple with 2 elements, found one with 3 elements\n+//~| expected tuple `(bool, bool)`\n+//~| found tuple `(_, _, _)`\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `(_, _, _)`\n //~| expected a tuple with 2 elements, found one with 3 elements\n+//~| expected tuple `(bool, bool)`\n+//~| found tuple `(_, _, _)`\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `std::boxed::Box<_>`\n+//~| expected tuple `(bool, bool)`\n+//~| found struct `std::boxed::Box<_>`\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected type `(bool, bool)`\n-//~| found type `&_`\n //~| expected tuple, found reference\n+//~| expected tuple `(bool, bool)`\n+//~| found reference `&_`\n     }\n \n \n@@ -53,5 +53,5 @@ fn main() {\n \n     // Make sure none of the errors above were fatal\n     let x: char = true; //~  ERROR mismatched types\n-                        //~| expected char, found bool\n+                        //~| expected `char`, found `bool`\n }"}, {"sha": "bcbcefef3b11a6ebdff978549e671cc756224b2b", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,26 +4,26 @@ error[E0308]: mismatched types\n LL |         A::B => (),\n    |         ^^^^ expected tuple, found enum `A`\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `A`\n+   = note: expected tuple `(bool, bool)`\n+               found enum `A`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:17:9\n    |\n LL |         (true, false, false) => ()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(bool, bool)`\n+              found tuple `(_, _, _)`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:25:9\n    |\n LL |         (true, false, false) => ()\n    |         ^^^^^^^^^^^^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `(_, _, _)`\n+   = note: expected tuple `(bool, bool)`\n+              found tuple `(_, _, _)`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:33:9\n@@ -33,17 +33,17 @@ LL |     match (true, false) {\n LL |         box (true, false) => ()\n    |         ^^^^^^^^^^^^^^^^^ expected tuple, found struct `std::boxed::Box`\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `std::boxed::Box<_>`\n+   = note: expected tuple `(bool, bool)`\n+             found struct `std::boxed::Box<_>`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:40:9\n    |\n LL |         &(true, false) => ()\n    |         ^^^^^^^^^^^^^^ expected tuple, found reference\n    |\n-   = note: expected type `(bool, bool)`\n-              found type `&_`\n+   = note:  expected tuple `(bool, bool)`\n+           found reference `&_`\n \n error[E0618]: expected function, found `(char, char)`\n   --> $DIR/issue-5100.rs:48:14\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:55:19\n    |\n LL |     let x: char = true;\n-   |                   ^^^^ expected char, found bool\n+   |                   ^^^^ expected `char`, found `bool`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "aef6dc54747ce8f048f138dc00e9654c73260c1a", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,9 +5,9 @@ LL |     missing_discourses()?\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |                   |\n    |     |                   help: try removing this `?`\n-   |     expected enum `std::result::Result`, found isize\n+   |     expected enum `std::result::Result`, found `isize`\n    |\n-   = note: expected type `std::result::Result<isize, ()>`\n+   = note: expected enum `std::result::Result<isize, ()>`\n               found type `isize`\n \n error: aborting due to previous error"}, {"sha": "21d9333735cc755f62110b35b3e050dd07a23376", "filename": "src/test/ui/issues/issue-5216.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5216.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,17 +4,17 @@ error[E0308]: mismatched types\n LL | pub static C: S = S(f);\n    |                     ^ expected struct `std::boxed::Box`, found fn item\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `fn() {f}`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+             found fn item `fn() {f}`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5216.rs:8:19\n    |\n LL | pub static D: T = g;\n    |                   ^ expected struct `std::boxed::Box`, found fn item\n    |\n-   = note: expected type `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n-              found type `fn() {g}`\n+   = note: expected struct `std::boxed::Box<(dyn std::ops::FnMut() + 'static)>`\n+             found fn item `fn() {g}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd37d3e5593812533596f1861a6fe1998e49eb34", "filename": "src/test/ui/issues/issue-52533-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     gimme(|x, y| y)\n    |                  ^ lifetime mismatch\n    |\n-   = note: expected type `&Foo<'_, '_, u32>`\n-              found type `&Foo<'_, '_, u32>`\n+   = note: expected reference `&Foo<'_, '_, u32>`\n+              found reference `&Foo<'_, '_, u32>`\n note: the anonymous lifetime #4 defined on the body at 9:11...\n   --> $DIR/issue-52533-1.rs:9:11\n    |"}, {"sha": "bbfdd9c538946cfaccb04400cfa8e68897c7efd0", "filename": "src/test/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -9,8 +9,7 @@ fn main() {\n     for i in v {\n         a = *i.to_string();\n         //~^ ERROR mismatched types\n-        //~| NOTE expected struct `std::string::String`, found str\n-        //~| NOTE expected type\n+        //~| NOTE expected struct `std::string::String`, found `str`\n         v2.push(a);\n     }\n }"}, {"sha": "433fe40ea03ce2044662a437a4efb4c841215939", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -2,10 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-53348.rs:10:13\n    |\n LL |         a = *i.to_string();\n-   |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found str\n-   |\n-   = note: expected type `std::string::String`\n-              found type `str`\n+   |             ^^^^^^^^^^^^^^ expected struct `std::string::String`, found `str`\n \n error: aborting due to previous error\n "}, {"sha": "f5e32e78d8794f38ec9bfffc289f6de8388b0f1a", "filename": "src/test/ui/issues/issue-5358-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.rs?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     match S(Either::Left(5)) {\n         Either::Right(_) => {}\n         //~^ ERROR mismatched types\n-        //~| expected type `S`\n-        //~| found type `Either<_, _>`\n         //~| expected struct `S`, found enum `Either`\n+        //~| expected struct `S`\n+        //~| found enum `Either<_, _>`\n         _ => {}\n     }\n }"}, {"sha": "ec79d874d0339efc4024f25903bbb3ae2a7b8c1a", "filename": "src/test/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -6,8 +6,8 @@ LL |     match S(Either::Left(5)) {\n LL |         Either::Right(_) => {}\n    |         ^^^^^^^^^^^^^^^^ expected struct `S`, found enum `Either`\n    |\n-   = note: expected type `S`\n-              found type `Either<_, _>`\n+   = note: expected struct `S`\n+                found enum `Either<_, _>`\n \n error: aborting due to previous error\n "}, {"sha": "50a202d148948062595a53fa1a78ec1bcb38c5a9", "filename": "src/test/ui/issues/issue-53692.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53692.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -4,23 +4,20 @@ error[E0308]: mismatched types\n LL |         let items_clone: Vec<i32> = ref_items.clone();\n    |                                     ^^^^^^^^^^^^^^^^^\n    |                                     |\n-   |                                     expected struct `std::vec::Vec`, found &[i32]\n+   |                                     expected struct `std::vec::Vec`, found `&[i32]`\n    |                                     help: try using a conversion method: `ref_items.to_vec()`\n    |\n-   = note: expected type `std::vec::Vec<i32>`\n-              found type `&[i32]`\n+   = note: expected struct `std::vec::Vec<i32>`\n+           found reference `&[i32]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-53692.rs:11:30\n    |\n LL |         let string: String = s.clone();\n    |                              ^^^^^^^^^\n    |                              |\n-   |                              expected struct `std::string::String`, found &str\n+   |                              expected struct `std::string::String`, found `&str`\n    |                              help: try using a conversion method: `s.to_string()`\n-   |\n-   = note: expected type `std::string::String`\n-              found type `&str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fd124046dc618a07c6ee4e2f5ced599648e4c21", "filename": "src/test/ui/issues/issue-56943.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53712f8637dbe326df569a90814aae1cc5429710/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56943.stderr?ref=53712f8637dbe326df569a90814aae1cc5429710", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     let _: issue_56943::S = issue_56943::S2;\n    |                             ^^^^^^^^^^^^^^^ expected struct `issue_56943::S`, found struct `issue_56943::S2`\n-   |\n-   = note: expected type `issue_56943::S`\n-              found type `issue_56943::S2`\n \n error: aborting due to previous error\n "}]}