{"sha": "afcb9e9d868238accfdff2089684470bf89a92f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmY2I5ZTlkODY4MjM4YWNjZmRmZjIwODk2ODQ0NzBiZjg5YTkyZjg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-02T07:49:11Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-05-02T08:03:43Z"}, "message": "core: inlining on common functions", "tree": {"sha": "f1ff5d7d61547dd7317ee0d378007f4c4a15fc8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ff5d7d61547dd7317ee0d378007f4c4a15fc8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afcb9e9d868238accfdff2089684470bf89a92f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afcb9e9d868238accfdff2089684470bf89a92f8", "html_url": "https://github.com/rust-lang/rust/commit/afcb9e9d868238accfdff2089684470bf89a92f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afcb9e9d868238accfdff2089684470bf89a92f8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bdc3f50040301bdcd372e320044f8fb2efb76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bdc3f50040301bdcd372e320044f8fb2efb76f", "html_url": "https://github.com/rust-lang/rust/commit/b4bdc3f50040301bdcd372e320044f8fb2efb76f"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "1ddebf83320690eba3b4cd7990385885317ca69a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/afcb9e9d868238accfdff2089684470bf89a92f8/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afcb9e9d868238accfdff2089684470bf89a92f8/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=afcb9e9d868238accfdff2089684470bf89a92f8", "patch": "@@ -77,6 +77,7 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n }\n \n /// Copy a slice into a new unique str\n+#[inline(always)]\n pub fn from_slice(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_owned(s, 0, len(s)) }\n }\n@@ -820,6 +821,7 @@ Section: Comparing strings\n /// Bytewise slice equality\n #[cfg(notest)]\n #[lang=\"str_eq\"]\n+#[inline]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n     do as_buf(a) |ap, alen| {\n         do as_buf(b) |bp, blen| {\n@@ -836,6 +838,7 @@ pub fn eq_slice(a: &str, b: &str) -> bool {\n }\n \n #[cfg(test)]\n+#[inline]\n pub fn eq_slice(a: &str, b: &str) -> bool {\n     do as_buf(a) |ap, alen| {\n         do as_buf(b) |bp, blen| {\n@@ -854,15 +857,18 @@ pub fn eq_slice(a: &str, b: &str) -> bool {\n /// Bytewise string equality\n #[cfg(notest)]\n #[lang=\"uniq_str_eq\"]\n+#[inline]\n pub fn eq(a: &~str, b: &~str) -> bool {\n     eq_slice(*a, *b)\n }\n \n #[cfg(test)]\n+#[inline]\n pub fn eq(a: &~str, b: &~str) -> bool {\n     eq_slice(*a, *b)\n }\n \n+#[inline]\n fn cmp(a: &str, b: &str) -> Ordering {\n     let low = uint::min(a.len(), b.len());\n \n@@ -879,20 +885,24 @@ fn cmp(a: &str, b: &str) -> Ordering {\n \n #[cfg(notest)]\n impl<'self> TotalOrd for &'self str {\n+    #[inline]\n     fn cmp(&self, other: & &'self str) -> Ordering { cmp(*self, *other) }\n }\n \n #[cfg(notest)]\n impl TotalOrd for ~str {\n+    #[inline]\n     fn cmp(&self, other: &~str) -> Ordering { cmp(*self, *other) }\n }\n \n #[cfg(notest)]\n impl TotalOrd for @str {\n+    #[inline]\n     fn cmp(&self, other: &@str) -> Ordering { cmp(*self, *other) }\n }\n \n /// Bytewise slice less than\n+#[inline]\n fn lt(a: &str, b: &str) -> bool {\n     let (a_len, b_len) = (a.len(), b.len());\n     let end = uint::min(a_len, b_len);\n@@ -909,16 +919,19 @@ fn lt(a: &str, b: &str) -> bool {\n }\n \n /// Bytewise less than or equal\n+#[inline]\n pub fn le(a: &str, b: &str) -> bool {\n     !lt(b, a)\n }\n \n /// Bytewise greater than or equal\n+#[inline]\n fn ge(a: &str, b: &str) -> bool {\n     !lt(a, b)\n }\n \n /// Bytewise greater than\n+#[inline]\n fn gt(a: &str, b: &str) -> bool {\n     !le(a, b)\n }\n@@ -1595,6 +1608,7 @@ Section: String properties\n */\n \n /// Returns true if the string has length 0\n+#[inline(always)]\n pub fn is_empty(s: &str) -> bool { len(s) == 0u }\n \n /**\n@@ -1616,11 +1630,13 @@ fn is_alphanumeric(s: &str) -> bool {\n }\n \n /// Returns the string length/size in bytes not counting the null terminator\n+#[inline(always)]\n pub fn len(s: &str) -> uint {\n     do as_buf(s) |_p, n| { n - 1u }\n }\n \n /// Returns the number of characters that a string holds\n+#[inline(always)]\n pub fn char_len(s: &str) -> uint { count_chars(s, 0u, len(s)) }\n \n /*\n@@ -1752,7 +1768,8 @@ pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n     return len;\n }\n \n-/// Counts the number of bytes taken by the `n` in `s` starting from `start`.\n+/// Counts the number of bytes taken by the first `n` chars in `s`\n+/// starting from `start`.\n pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n     assert!(is_char_boundary(s, start));\n     let mut end = start, cnt = n;\n@@ -1988,6 +2005,7 @@ static tag_six_b: uint = 252u;\n  * let i = str::as_bytes(\"Hello World\") { |bytes| vec::len(bytes) };\n  * ~~~\n  */\n+#[inline]\n pub fn as_bytes<T>(s: &const ~str, f: &fn(&~[u8]) -> T) -> T {\n     unsafe {\n         let v: *~[u8] = cast::transmute(copy s);\n@@ -2023,6 +2041,7 @@ pub fn as_bytes_slice<'a>(s: &'a str) -> &'a [u8] {\n  * let s = str::as_c_str(\"PATH\", { |path| libc::getenv(path) });\n  * ~~~\n  */\n+#[inline]\n pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n     do as_buf(s) |buf, len| {\n         // NB: len includes the trailing null.\n@@ -2099,6 +2118,7 @@ pub fn subslice_offset(outer: &str, inner: &str) -> uint {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n+#[inline(always)]\n pub fn reserve(s: &mut ~str, n: uint) {\n     unsafe {\n         let v: *mut ~[u8] = cast::transmute(s);\n@@ -2126,6 +2146,7 @@ pub fn reserve(s: &mut ~str, n: uint) {\n  * * s - A string\n  * * n - The number of bytes to reserve space for\n  */\n+#[inline(always)]\n pub fn reserve_at_least(s: &mut ~str, n: uint) {\n     reserve(s, uint::next_power_of_two(n + 1u) - 1u)\n }\n@@ -2314,6 +2335,7 @@ pub mod raw {\n     }\n \n     /// Sets the length of the string and adds the null terminator\n+    #[inline]\n     pub unsafe fn set_len(v: &mut ~str, new_len: uint) {\n         let v: **mut vec::raw::VecRepr = cast::transmute(v);\n         let repr: *mut vec::raw::VecRepr = *v;\n@@ -2489,7 +2511,7 @@ impl<'self> StrSlice<'self> for &'self str {\n     #[inline]\n     fn is_alphanumeric(&self) -> bool { is_alphanumeric(*self) }\n     /// Returns the size in bytes not counting the null terminator\n-    #[inline]\n+    #[inline(always)]\n     fn len(&self) -> uint { len(*self) }\n     /// Returns the number of characters that a string holds\n     #[inline]\n@@ -2599,10 +2621,11 @@ pub trait OwnedStr {\n }\n \n impl OwnedStr for ~str {\n+    #[inline]\n     fn push_str(&mut self, v: &str) {\n         push_str(self, v);\n     }\n-\n+    #[inline]\n     fn push_char(&mut self, c: char) {\n         push_char(self, c);\n     }"}]}