{"sha": "ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "node_id": "C_kwDOAAsO6NoAKGViZjQ2NThhZTlhYjljODJhNzg4NzRmNDBhMWEzZGJlNmI5NWQ0NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-18T13:40:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-18T13:40:18Z"}, "message": "Auto merge of #12024 - XFFXFF:derive_completion, r=Veykril\n\nderive completions take existing derives into count\n\nfixes #12019\n\nThe immediate reason is that when we are doing derive completion, [`ctx.existing_derives`](https://github.com/rust-lang/rust-analyzer/blob/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001/crates/ide_completion/src/completions/attribute/derive.rs#L82) is empty, this is because we expand the macro when looking for the ancestors of the token to be completed. Take the following code as an example, we find the first `SyntaxNode` with kind `Attr` based on the ancestors of the token, but the parent of `Attr` is not a `Struct` as we [expect](https://github.com/rust-lang/rust-analyzer/blob/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001/crates/hir/src/semantics.rs#L518).\n```rust\n#[derive(PartialEq, Eq, Or$0)]\nstruct S;\n```\nThe ancestors of the token to be completed above.\n```\n    NAME_REF@24..26\n      IDENT@24..26 \"Or\"\n    ,\n    PATH_SEGMENT@24..26\n      NAME_REF@24..26\n        IDENT@24..26 \"Or\"\n    ,\n    PATH@24..26\n      PATH_SEGMENT@24..26\n        NAME_REF@24..26\n          IDENT@24..26 \"Or\"\n    ,\n    META@24..26\n      PATH@24..26\n        PATH_SEGMENT@24..26\n          NAME_REF@24..26\n            IDENT@24..26 \"Or\"\n    ,\n    ATTR@21..28\n      POUND@21..22 \"#\"\n      WHITESPACE@22..23 \" \"\n      L_BRACK@23..24 \"[\"\n      META@24..26\n        PATH@24..26\n          PATH_SEGMENT@24..26\n            NAME_REF@24..26\n              IDENT@24..26 \"Or\"\n      R_BRACK@26..27 \"]\"\n      WHITESPACE@27..28 \" \"\n    ,\n    TUPLE_EXPR@0..32\n      ATTR@0..14\n        POUND@0..1 \"#\"\n        WHITESPACE@1..2 \" \"\n        L_BRACK@2..3 \"[\"\n        META@3..12\n          PATH@3..12\n            PATH_SEGMENT@3..12\n              NAME_REF@3..12\n                IDENT@3..12 \"PartialEq\"\n        R_BRACK@12..13 \"]\"\n        WHITESPACE@13..14 \" \"\n      ATTR@14..21\n        POUND@14..15 \"#\"\n        WHITESPACE@15..16 \" \"\n        L_BRACK@16..17 \"[\"\n        META@17..19\n          PATH@17..19\n            PATH_SEGMENT@17..19\n              NAME_REF@17..19\n                IDENT@17..19 \"Eq\"\n        R_BRACK@19..20 \"]\"\n        WHITESPACE@20..21 \" \"\n      ATTR@21..28\n        POUND@21..22 \"#\"\n        WHITESPACE@22..23 \" \"\n        L_BRACK@23..24 \"[\"\n        META@24..26\n          PATH@24..26\n            PATH_SEGMENT@24..26\n              NAME_REF@24..26\n                IDENT@24..26 \"Or\"\n        R_BRACK@26..27 \"]\"\n        WHITESPACE@27..28 \" \"\n      L_PAREN@28..29 \"(\"\n      WHITESPACE@29..30 \" \"\n      R_PAREN@30..31 \")\"\n      WHITESPACE@31..32 \" \"\n...\n```\n\nI make a small change to not do macro expansion when looking up the ancestors of the token.\n\nWhat I don't understand is that `self.sema.token_ancestors_with_macros(self.token.clone())` doesn't seem to expand the macro if the derive completion triggered without any prefix, like `#[derive(PartialEq, Eq, $0)]`.\n\nThe ancestors of the token with  `#[derive(PartialEq, Eq, $0)]`.\n```\n    TOKEN_TREE@8..25\n      L_PAREN@8..9 \"(\"\n      IDENT@9..18 \"PartialEq\"\n      COMMA@18..19 \",\"\n      WHITESPACE@19..20 \" \"\n      IDENT@20..22 \"Eq\"\n      COMMA@22..23 \",\"\n      WHITESPACE@23..24 \" \"\n      R_PAREN@24..25 \")\"\n    ,\n    META@2..25\n      PATH@2..8\n        PATH_SEGMENT@2..8\n          NAME_REF@2..8\n            IDENT@2..8 \"derive\"\n      TOKEN_TREE@8..25\n        L_PAREN@8..9 \"(\"\n        IDENT@9..18 \"PartialEq\"\n        COMMA@18..19 \",\"\n        WHITESPACE@19..20 \" \"\n        IDENT@20..22 \"Eq\"\n        COMMA@22..23 \",\"\n        WHITESPACE@23..24 \" \"\n        R_PAREN@24..25 \")\"\n    ,\n    ATTR@0..26\n      POUND@0..1 \"#\"\n      L_BRACK@1..2 \"[\"\n      META@2..25\n        PATH@2..8\n          PATH_SEGMENT@2..8\n            NAME_REF@2..8\n              IDENT@2..8 \"derive\"\n        TOKEN_TREE@8..25\n          L_PAREN@8..9 \"(\"\n          IDENT@9..18 \"PartialEq\"\n          COMMA@18..19 \",\"\n          WHITESPACE@19..20 \" \"\n          IDENT@20..22 \"Eq\"\n          COMMA@22..23 \",\"\n          WHITESPACE@23..24 \" \"\n          R_PAREN@24..25 \")\"\n      R_BRACK@25..26 \"]\"\n    ,\n    STRUCT@0..39\n      ATTR@0..26\n        POUND@0..1 \"#\"\n        L_BRACK@1..2 \"[\"\n        META@2..25\n          PATH@2..8\n            PATH_SEGMENT@2..8\n              NAME_REF@2..8\n                IDENT@2..8 \"derive\"\n          TOKEN_TREE@8..25\n            L_PAREN@8..9 \"(\"\n            IDENT@9..18 \"PartialEq\"\n            COMMA@18..19 \",\"\n            WHITESPACE@19..20 \" \"\n            IDENT@20..22 \"Eq\"\n            COMMA@22..23 \",\"\n            WHITESPACE@23..24 \" \"\n            R_PAREN@24..25 \")\"\n        R_BRACK@25..26 \"]\"\n      WHITESPACE@26..27 \" \"\n      STRUCT_KW@27..33 \"struct\"\n      WHITESPACE@33..34 \" \"\n      NAME@34..38\n        IDENT@34..38 \"Test\"\n      SEMICOLON@38..39 \";\"\n...\n```", "tree": {"sha": "4ca2554dc5ff32b5aa5e387719b103bbbe2f668f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca2554dc5ff32b5aa5e387719b103bbbe2f668f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "html_url": "https://github.com/rust-lang/rust/commit/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001", "html_url": "https://github.com/rust-lang/rust/commit/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001"}, {"sha": "fedd0245d105c3a5c483970316b555cbe5f7b34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd0245d105c3a5c483970316b555cbe5f7b34b", "html_url": "https://github.com/rust-lang/rust/commit/fedd0245d105c3a5c483970316b555cbe5f7b34b"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "5f6b8f7db53407a5c1536404340d79f0b9caee07", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "patch": "@@ -523,7 +523,8 @@ impl<'a> CompletionContext<'a> {\n                     // successful expansions\n                     (Some(actual_expansion), Some((fake_expansion, fake_mapped_token))) => {\n                         let new_offset = fake_mapped_token.text_range().start();\n-                        derive_ctx = Some((actual_expansion, fake_expansion, new_offset));\n+                        derive_ctx =\n+                            Some((actual_expansion, fake_expansion, new_offset, orig_attr));\n                         break 'expansion;\n                     }\n                     // exactly one expansion failed, inconsistent state so stop expanding completely\n@@ -718,7 +719,7 @@ impl<'a> CompletionContext<'a> {\n         original_file: &SyntaxNode,\n         file_with_fake_ident: SyntaxNode,\n         offset: TextSize,\n-        derive_ctx: Option<(SyntaxNode, SyntaxNode, TextSize)>,\n+        derive_ctx: Option<(SyntaxNode, SyntaxNode, TextSize, ast::Attr)>,\n     ) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n@@ -742,16 +743,14 @@ impl<'a> CompletionContext<'a> {\n         (self.expected_type, self.expected_name) = self.expected_type_and_name();\n \n         // Overwrite the path kind for derives\n-        if let Some((original_file, file_with_fake_ident, offset)) = derive_ctx {\n-            let attr = self\n+        if let Some((original_file, file_with_fake_ident, offset, origin_attr)) = derive_ctx {\n+            self.existing_derives = self\n                 .sema\n-                .token_ancestors_with_macros(self.token.clone())\n-                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-                .find_map(ast::Attr::cast);\n-            if let Some(attr) = &attr {\n-                self.existing_derives =\n-                    self.sema.resolve_derive_macro(attr).into_iter().flatten().flatten().collect();\n-            }\n+                .resolve_derive_macro(&origin_attr)\n+                .into_iter()\n+                .flatten()\n+                .flatten()\n+                .collect();\n \n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)"}, {"sha": "b851bf6a840ed4bb0e4ee4704261862a5c6339bb", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=ebf4658ae9ab9c82a78874f40a1a3dbe6b95d466", "patch": "@@ -747,6 +747,27 @@ mod derive {\n         );\n     }\n \n+    #[test]\n+    fn derive_with_existing_derives() {\n+        check_derive(\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive(PartialEq, Eq, Or$0)] struct Test;\n+\"#,\n+            expect![[r#\"\n+                md core\n+                de Default         macro Default\n+                de Clone, Copy\n+                de PartialOrd, Ord\n+                de Clone           macro Clone\n+                de PartialOrd\n+                kw self::\n+                kw super::\n+                kw crate::\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn derive_flyimport() {\n         check_derive("}]}