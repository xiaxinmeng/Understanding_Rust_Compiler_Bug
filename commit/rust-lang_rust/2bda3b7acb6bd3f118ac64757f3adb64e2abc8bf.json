{"sha": "2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZGEzYjdhY2I2YmQzZjExOGFjNjQ3NTdmM2FkYjY0ZTJhYmM4YmY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-19T00:04:00Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:33Z"}, "message": "Inline and simplify init_cpad", "tree": {"sha": "7722a4a32e52ac7fe6803deecd2085e647f96589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7722a4a32e52ac7fe6803deecd2085e647f96589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "html_url": "https://github.com/rust-lang/rust/commit/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb", "html_url": "https://github.com/rust-lang/rust/commit/4c7041ea7da7ab335cd20bbc4e32dbe8f953bcdb"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "e259f7c20f2f2ae6936662418af5043e004f0537", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "patch": "@@ -863,32 +863,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         bcx.llbb()\n     }\n \n-    pub fn init_cpad(&mut self, bb: mir::BasicBlock,\n-        funclets: &mut IndexVec<mir::BasicBlock, Option<Funclet>>) {\n-        let bcx = self.build_block(bb);\n-        let data = &self.mir[bb];\n-        debug!(\"init_cpad({:?})\", data);\n-\n-        match self.cleanup_kinds[bb] {\n-            CleanupKind::NotCleanup => {\n-                funclets[bb] = None;\n-            }\n-            _ if !base::wants_msvc_seh(bcx.sess()) => {\n-                funclets[bb] = Funclet::gnu();\n-            }\n-            CleanupKind::Internal { funclet: _ } => {\n-                // FIXME: is this needed?\n-                bcx.set_personality_fn(self.fcx.eh_personality());\n-                funclets[bb] = None;\n-            }\n-            CleanupKind::Funclet => {\n-                bcx.set_personality_fn(self.fcx.eh_personality());\n-                let cleanup_pad = bcx.cleanup_pad(None, &[]);\n-                funclets[bb] = Funclet::msvc(cleanup_pad);\n-            }\n-        };\n-    }\n-\n     fn unreachable_block(&mut self) -> BasicBlockRef {\n         self.unreachable_block.unwrap_or_else(|| {\n             let bl = self.fcx.build_new_block(\"unreachable\");\n@@ -898,7 +872,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         })\n     }\n \n-    fn build_block(&self, bb: mir::BasicBlock) -> BlockAndBuilder<'a, 'tcx> {\n+    pub fn build_block(&self, bb: mir::BasicBlock) -> BlockAndBuilder<'a, 'tcx> {\n         BlockAndBuilder::new(self.blocks[bb], self.fcx)\n     }\n "}, {"sha": "f8bd087b0da1eff26596e4783ae0bcd1f5eb4b26", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=2bda3b7acb6bd3f118ac64757f3adb64e2abc8bf", "patch": "@@ -36,6 +36,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n pub use self::constant::trans_static_initializer;\n \n+use self::analyze::CleanupKind;\n use self::lvalue::{LvalueRef};\n use rustc::mir::traversal;\n \n@@ -315,18 +316,28 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n     // emitting should be enabled.\n     debuginfo::start_emitting_source_locations(&mircx);\n \n-    let mut visited = BitVector::new(mir.basic_blocks().len());\n-\n-    let mut rpo = traversal::reverse_postorder(&mir);\n-\n     let mut funclets: IndexVec<mir::BasicBlock, Option<Funclet>> =\n         IndexVec::from_elem(None, mir.basic_blocks());\n \n-    // Prepare each block for translation.\n-    for (bb, _) in rpo.by_ref() {\n-        mircx.init_cpad(bb, &mut funclets);\n+    // If false, all funclets should be None (which is the default)\n+    if base::wants_msvc_seh(fcx.ccx.sess()) {\n+        for (bb, cleanup_kind) in mircx.cleanup_kinds.iter_enumerated() {\n+            let bcx = mircx.build_block(bb);\n+            match *cleanup_kind {\n+                CleanupKind::Internal { .. } => {\n+                    bcx.set_personality_fn(fcx.eh_personality());\n+                }\n+                CleanupKind::Funclet => {\n+                    bcx.set_personality_fn(fcx.eh_personality());\n+                    funclets[bb] = Funclet::msvc(bcx.cleanup_pad(None, &[]));\n+                }\n+                _ => {}\n+            }\n+        }\n     }\n-    rpo.reset();\n+\n+    let rpo = traversal::reverse_postorder(&mir);\n+    let mut visited = BitVector::new(mir.basic_blocks().len());\n \n     // Translate the body of each block using reverse postorder\n     for (bb, _) in rpo {"}]}