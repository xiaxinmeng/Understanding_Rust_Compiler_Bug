{"sha": "950006711d8095b2e7b55c246103c51757ea6f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MDAwNjcxMWQ4MDk1YjJlN2I1NWMyNDYxMDNjNTE3NTdlYTZmNDA=", "commit": {"author": {"name": "SlightlyOutOfPhase", "email": "slightlyoutofphase@gmail.com", "date": "2020-09-12T01:40:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-12T01:40:02Z"}, "message": "Use `is_unstable_const_fn` where appropriate", "tree": {"sha": "4531899fa5050a271b8e0be68855c453afc938f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4531899fa5050a271b8e0be68855c453afc938f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/950006711d8095b2e7b55c246103c51757ea6f40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXCbyCRBK7hj4Ov3rIwAAdHIIAHtZCAEi/JDhhaISR/0cGZVc\nkPAVcOMNj9AMGsTOHjyKxLXxbdfGRsZ+m1bJUKJ4OdbwF+/LAh9y88Uf+snmtGU2\nusxxVOLD6xzpJBlAmhqPlo0KQW1BKjWzCgi9gx9pyIcCCJL2d5K0EJVdZSVUeXvL\nl6u0uQRluazkQqMkzU6/zkZXPy9nLZ1bbEGle8WThcM2L0XRoOHcAQwGFIfEhTMD\nezmBlqQ/WDSid+RL8TPLjE+Eofj6HY3Gy9toYRQTDAsvv28INGikcRlhtaDwWvJ2\n8NNFJ2dpsCGlGSuOf0H7dsBebNGdhkKqmowr9bBuQvScW8tEhpf1CNp5HDZCRYU=\n=LJHr\n-----END PGP SIGNATURE-----\n", "payload": "tree 4531899fa5050a271b8e0be68855c453afc938f8\nparent 99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a\nauthor SlightlyOutOfPhase <slightlyoutofphase@gmail.com> 1599874802 -0400\ncommitter GitHub <noreply@github.com> 1599874802 -0400\n\nUse `is_unstable_const_fn` where appropriate"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/950006711d8095b2e7b55c246103c51757ea6f40", "html_url": "https://github.com/rust-lang/rust/commit/950006711d8095b2e7b55c246103c51757ea6f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/950006711d8095b2e7b55c246103c51757ea6f40/comments", "author": {"login": "slightlyoutofphase", "id": 47403582, "node_id": "MDQ6VXNlcjQ3NDAzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/47403582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slightlyoutofphase", "html_url": "https://github.com/slightlyoutofphase", "followers_url": "https://api.github.com/users/slightlyoutofphase/followers", "following_url": "https://api.github.com/users/slightlyoutofphase/following{/other_user}", "gists_url": "https://api.github.com/users/slightlyoutofphase/gists{/gist_id}", "starred_url": "https://api.github.com/users/slightlyoutofphase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slightlyoutofphase/subscriptions", "organizations_url": "https://api.github.com/users/slightlyoutofphase/orgs", "repos_url": "https://api.github.com/users/slightlyoutofphase/repos", "events_url": "https://api.github.com/users/slightlyoutofphase/events{/privacy}", "received_events_url": "https://api.github.com/users/slightlyoutofphase/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a", "html_url": "https://github.com/rust-lang/rust/commit/99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0bcb11d2239e532ebd5b2deb68e8b8a08a7fc3cc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/950006711d8095b2e7b55c246103c51757ea6f40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950006711d8095b2e7b55c246103c51757ea6f40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=950006711d8095b2e7b55c246103c51757ea6f40", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc_mir::const_eval::is_min_const_fn;\n+use rustc_mir::const_eval::{is_min_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, Pos};\n@@ -900,7 +900,7 @@ impl Clean<Item> for doctree::Function<'_> {\n             enter_impl_trait(cx, || (self.generics.clean(cx), (self.decl, self.body).clean(cx)));\n \n         let did = cx.tcx.hir().local_def_id(self.id);\n-        let constness = if is_min_const_fn(cx.tcx, did.to_def_id()) {\n+        let constness = if !is_unstable_const_fn(cx.tcx, did.to_def_id()).is_some() {\n             hir::Constness::Const\n         } else {\n             hir::Constness::NotConst\n@@ -1108,7 +1108,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                 let mut m = (sig, &self.generics, body, None).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }\n@@ -1121,7 +1121,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n                 let mut t = TyMethod { header: sig.header, decl, generics, all_types, ret_types };\n                 if t.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     t.header.constness = hir::Constness::NotConst;\n                 }\n@@ -1154,7 +1154,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n             hir::ImplItemKind::Fn(ref sig, body) => {\n                 let mut m = (sig, &self.generics, body, Some(self.defaultness)).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }"}]}