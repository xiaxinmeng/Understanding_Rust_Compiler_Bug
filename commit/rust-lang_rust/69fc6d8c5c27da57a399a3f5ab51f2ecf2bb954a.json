{"sha": "69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZmM2ZDhjNWMyN2RhNTdhMzk5YTNmNWFiNTFmMmVjZjJiYjk1NGE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T07:39:49Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:33Z"}, "message": "Fix NLL compare mode tests", "tree": {"sha": "60eef819779e4804b14e09ea1955a66583af8e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60eef819779e4804b14e09ea1955a66583af8e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "html_url": "https://github.com/rust-lang/rust/commit/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9eeb60b638fcb347c7c6ba066390144d8c7a24e", "html_url": "https://github.com/rust-lang/rust/commit/c9eeb60b638fcb347c7c6ba066390144d8c7a24e"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "e22dab0151703ee160ea32973927df498adae61e", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "patch": "@@ -6,6 +6,7 @@ use rustc_infer::infer::{\n     error_reporting::unexpected_hidden_region_diagnostic, NLLRegionVariableOrigin,\n };\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -585,14 +586,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 //\n                 // eg. check for `impl Trait + 'static` instead of `impl Trait`.\n                 let has_static_predicate = {\n-                    let predicates_of = self.infcx.tcx.predicates_of(did);\n-                    let bounds = predicates_of.instantiate(self.infcx.tcx, substs);\n+                    let bounds = self.infcx.tcx.explicit_item_bounds(did);\n \n                     let mut found = false;\n-                    for predicate in bounds.predicates {\n+                    for (bound, _) in bounds {\n                         if let ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(_, r)) =\n-                            predicate.skip_binders()\n+                            bound.skip_binders()\n                         {\n+                            let r = r.subst(self.infcx.tcx, substs);\n                             if let ty::RegionKind::ReStatic = r {\n                                 found = true;\n                                 break;"}, {"sha": "ffd6f34c4b00e6879ae81a40ce1d0ed05a8214f2", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "patch": "@@ -18,6 +18,24 @@ LL | type WrongGeneric<T> = impl 'static;\n    = note:     expected type `i32`\n            found opaque type `impl Sized`\n \n-error: aborting due to 2 previous errors\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:14:30\n+   |\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                              ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/generic_type_does_not_live_long_enough.rs:9:24\n+   |\n+LL | type WrongGeneric<T> = impl 'static;\n+   |                        ^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   = note: ...so that the type `T` will meet its required lifetime bounds\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0310.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "790aea87510e6306e864f8191ab44cb87a6a54e7", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=69fc6d8c5c27da57a399a3f5ab51f2ecf2bb954a", "patch": "@@ -1,14 +1,33 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-57611-trait-alias.rs:21:9\n+  --> $DIR/issue-57611-trait-alias.rs:25:9\n    |\n LL |         |x| x\n    |         ^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'static X,)>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `FnOnce<(&X,)>`\n+              found type `FnOnce<(&'static X,)>`\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}