{"sha": "4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzBiOTJlM2U1N2NmNjA2YTI1YzgwN2E5ZTRhYjJiN2E0ZDEwNjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T07:32:55Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T08:54:03Z"}, "message": "recover on `for<'a> |...| body` closures.", "tree": {"sha": "e606e765361b6774803a3d77835eab422ebbf4b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e606e765361b6774803a3d77835eab422ebbf4b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "html_url": "https://github.com/rust-lang/rust/commit/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2835ca65845c5fac8da2a2612a06b12ad2f4c77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2835ca65845c5fac8da2a2612a06b12ad2f4c77c", "html_url": "https://github.com/rust-lang/rust/commit/2835ca65845c5fac8da2a2612a06b12ad2f4c77c"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "957bdd082bb62e86eabf8a0707020ff777b5b293", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "patch": "@@ -925,8 +925,17 @@ impl<'a> Parser<'a> {\n             self.parse_closure_expr(attrs)\n         } else if self.eat_keyword(kw::If) {\n             self.parse_if_expr(attrs)\n-        } else if self.eat_keyword(kw::For) {\n-            self.parse_for_expr(None, self.prev_token.span, attrs)\n+        } else if self.check_keyword(kw::For) {\n+            if self.choose_generics_over_qpath(1) {\n+                // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,\n+                // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.\n+                // When `for <Foo as Bar>::Proj in $expr $block` is wanted,\n+                // you can disambiguate in favor of a pattern with `(...)`.\n+                self.recover_quantified_closure_expr(attrs)\n+            } else {\n+                assert!(self.eat_keyword(kw::For));\n+                self.parse_for_expr(None, self.prev_token.span, attrs)\n+            }\n         } else if self.eat_keyword(kw::While) {\n             self.parse_while_expr(None, self.prev_token.span, attrs)\n         } else if let Some(label) = self.eat_label() {\n@@ -1416,6 +1425,26 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs))\n     }\n \n+    /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.\n+    fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+        let lo = self.token.span;\n+        let _ = self.parse_late_bound_lifetime_defs()?;\n+        let span_for = lo.to(self.prev_token.span);\n+        let closure = self.parse_closure_expr(attrs)?;\n+\n+        self.struct_span_err(span_for, \"cannot introduce explicit parameters for a closure\")\n+            .span_label(closure.span, \"the parameters are attached to this closure\")\n+            .span_suggestion(\n+                span_for,\n+                \"remove the parameters\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        Ok(self.mk_expr_err(lo.to(closure.span)))\n+    }\n+\n     /// Parses a closure expression (e.g., `move |args| expr`).\n     fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;"}, {"sha": "3442c5081c18f879c07ddded71faf7cb3fe6f750", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "patch": "@@ -181,7 +181,7 @@ impl<'a> Parser<'a> {\n         // We are considering adding generics to the `where` keyword as an alternative higher-rank\n         // parameter syntax (as in `where<'a>` or `where<T>`. To avoid that being a breaking\n         // change we parse those generics now, but report an error.\n-        if self.choose_generics_over_qpath() {\n+        if self.choose_generics_over_qpath(0) {\n             let generics = self.parse_generics()?;\n             self.struct_span_err(\n                 generics.span,\n@@ -257,7 +257,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn choose_generics_over_qpath(&self) -> bool {\n+    pub(super) fn choose_generics_over_qpath(&self, start: usize) -> bool {\n         // There's an ambiguity between generic parameters and qualified paths in impls.\n         // If we see `<` it may start both, so we have to inspect some following tokens.\n         // The following combinations can only start generics,\n@@ -274,15 +274,12 @@ impl<'a> Parser<'a> {\n         // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)\n         // because this is what almost always expected in practice, qualified paths in impls\n         // (`impl <Type>::AssocTy { ... }`) aren't even allowed by type checker at the moment.\n-        self.token == token::Lt\n-            && (self.look_ahead(1, |t| t == &token::Pound || t == &token::Gt)\n-                || self.look_ahead(1, |t| t.is_lifetime() || t.is_ident())\n-                    && self.look_ahead(2, |t| {\n-                        t == &token::Gt\n-                            || t == &token::Comma\n-                            || t == &token::Colon\n-                            || t == &token::Eq\n+        self.look_ahead(start, |t| t == &token::Lt)\n+            && (self.look_ahead(start + 1, |t| t == &token::Pound || t == &token::Gt)\n+                || self.look_ahead(start + 1, |t| t.is_lifetime() || t.is_ident())\n+                    && self.look_ahead(start + 2, |t| {\n+                        matches!(t.kind, token::Gt | token::Comma | token::Colon | token::Eq)\n                     })\n-                || self.is_keyword_ahead(1, &[kw::Const]))\n+                || self.is_keyword_ahead(start + 1, &[kw::Const]))\n     }\n }"}, {"sha": "42c4bac3b8db4b2f4b8cb5cf45c20f81623297c8", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "patch": "@@ -458,7 +458,7 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Impl)?;\n \n         // First, parse generic parameters if necessary.\n-        let mut generics = if self.choose_generics_over_qpath() {\n+        let mut generics = if self.choose_generics_over_qpath(0) {\n             self.parse_generics()?\n         } else {\n             let mut generics = Generics::default();"}, {"sha": "381324738f62b851d53160978a03f6d2541e0a13", "filename": "src/test/ui/parser/recover-quantified-closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    for<'a> |x: &'a u8| *x + 1;\n+    //~^ ERROR cannot introduce explicit parameters for a closure\n+}\n+\n+enum Foo { Bar }\n+fn foo(x: impl Iterator<Item = Foo>) {\n+    for <Foo>::Bar in x {}\n+    //~^ ERROR expected one of `move`, `static`, `|`\n+}"}, {"sha": "0f01132651648b95a7e9d81d98c8fb4de9c91e38", "filename": "src/test/ui/parser/recover-quantified-closure.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=4d30b92e3e57cf606a25c807a9e4ab2b7a4d1064", "patch": "@@ -0,0 +1,16 @@\n+error: cannot introduce explicit parameters for a closure\n+  --> $DIR/recover-quantified-closure.rs:2:5\n+   |\n+LL |     for<'a> |x: &'a u8| *x + 1;\n+   |     ^^^^^^^ ------------------ the parameters are attached to this closure\n+   |     |\n+   |     help: remove the parameters\n+\n+error: expected one of `move`, `static`, `|`, or `||`, found `::`\n+  --> $DIR/recover-quantified-closure.rs:8:14\n+   |\n+LL |     for <Foo>::Bar in x {}\n+   |              ^^ expected one of `move`, `static`, `|`, or `||`\n+\n+error: aborting due to 2 previous errors\n+"}]}