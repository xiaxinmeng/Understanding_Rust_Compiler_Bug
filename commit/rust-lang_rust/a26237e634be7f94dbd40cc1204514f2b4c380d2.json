{"sha": "a26237e634be7f94dbd40cc1204514f2b4c380d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNjIzN2U2MzRiZTdmOTRkYmQ0MGNjMTIwNDUxNGYyYjRjMzgwZDI=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-18T16:02:56Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-19T13:03:02Z"}, "message": "Remove `Ipv4Addr::is_ietf_protocol_assignment`", "tree": {"sha": "79eb5c740c17889f4318f5fa61ccb9dd72084446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79eb5c740c17889f4318f5fa61ccb9dd72084446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a26237e634be7f94dbd40cc1204514f2b4c380d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a26237e634be7f94dbd40cc1204514f2b4c380d2", "html_url": "https://github.com/rust-lang/rust/commit/a26237e634be7f94dbd40cc1204514f2b4c380d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a26237e634be7f94dbd40cc1204514f2b4c380d2/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d192c80d2284ba6b5146bb3da586354c3762c72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d192c80d2284ba6b5146bb3da586354c3762c72b", "html_url": "https://github.com/rust-lang/rust/commit/d192c80d2284ba6b5146bb3da586354c3762c72b"}], "stats": {"total": 57, "additions": 6, "deletions": 51}, "files": [{"sha": "d31d8c573d3567dd3a1ac5b13ae444c48540fb3e", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a26237e634be7f94dbd40cc1204514f2b4c380d2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26237e634be7f94dbd40cc1204514f2b4c380d2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=a26237e634be7f94dbd40cc1204514f2b4c380d2", "patch": "@@ -486,8 +486,7 @@ impl Ipv4Addr {\n     /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n     /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n     ///   `0.0.0.0/8` block\n-    /// - addresses reserved for future protocols (see\n-    /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n+    /// - addresses reserved for future protocols, except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n     /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n     /// - addresses reserved for networking devices benchmarking (see\n@@ -560,7 +559,8 @@ impl Ipv4Addr {\n             && !self.is_broadcast()\n             && !self.is_documentation()\n             && !self.is_shared()\n-            && !self.is_ietf_protocol_assignment()\n+            // addresses reserved for future protocols (`192.0.0.0/24`)\n+            && !(self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0)\n             && !self.is_reserved()\n             && !self.is_benchmarking()\n             // Make sure the address is not in 0.0.0.0/8\n@@ -589,40 +589,6 @@ impl Ipv4Addr {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n \n-    /// Returns [`true`] if this address is part of `192.0.0.0/24`, which is reserved to\n-    /// IANA for IETF protocol assignments, as documented in [IETF RFC 6890].\n-    ///\n-    /// Note that parts of this block are in use:\n-    ///\n-    /// - `192.0.0.8/32` is the \"IPv4 dummy address\" (see [IETF RFC 7600])\n-    /// - `192.0.0.9/32` is the \"Port Control Protocol Anycast\" (see [IETF RFC 7723])\n-    /// - `192.0.0.10/32` is used for NAT traversal (see [IETF RFC 8155])\n-    ///\n-    /// [IETF RFC 6890]: https://tools.ietf.org/html/rfc6890\n-    /// [IETF RFC 7600]: https://tools.ietf.org/html/rfc7600\n-    /// [IETF RFC 7723]: https://tools.ietf.org/html/rfc7723\n-    /// [IETF RFC 8155]: https://tools.ietf.org/html/rfc8155\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ip)]\n-    /// use std::net::Ipv4Addr;\n-    ///\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 0).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 8).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 9).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 255).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 1, 0).is_ietf_protocol_assignment(), false);\n-    /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n-    /// ```\n-    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n-    #[unstable(feature = \"ip\", issue = \"27709\")]\n-    #[inline]\n-    pub const fn is_ietf_protocol_assignment(&self) -> bool {\n-        self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n-    }\n-\n     /// Returns [`true`] if this address part of the `198.18.0.0/15` range, which is reserved for\n     /// network devices benchmarking. This range is defined in [IETF RFC 2544] as `192.18.0.0`\n     /// through `198.19.255.255` but [errata 423] corrects it to `198.18.0.0/15`."}, {"sha": "dbfab9dde404e26a58804412fbd1ff9ccc594094", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a26237e634be7f94dbd40cc1204514f2b4c380d2/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26237e634be7f94dbd40cc1204514f2b4c380d2/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=a26237e634be7f94dbd40cc1204514f2b4c380d2", "patch": "@@ -339,7 +339,6 @@ fn ipv4_properties() {\n             let broadcast: u16 = 1 << 6;\n             let documentation: u16 = 1 << 7;\n             let benchmarking: u16 = 1 << 8;\n-            let ietf_protocol_assignment: u16 = 1 << 9;\n             let reserved: u16 = 1 << 10;\n             let shared: u16 = 1 << 11;\n \n@@ -397,12 +396,6 @@ fn ipv4_properties() {\n                 assert!(!ip!($s).is_benchmarking());\n             }\n \n-            if ($mask & ietf_protocol_assignment) == ietf_protocol_assignment {\n-                assert!(ip!($s).is_ietf_protocol_assignment());\n-            } else {\n-                assert!(!ip!($s).is_ietf_protocol_assignment());\n-            }\n-\n             if ($mask & reserved) == reserved {\n                 assert!(ip!($s).is_reserved());\n             } else {\n@@ -426,7 +419,6 @@ fn ipv4_properties() {\n     let broadcast: u16 = 1 << 6;\n     let documentation: u16 = 1 << 7;\n     let benchmarking: u16 = 1 << 8;\n-    let ietf_protocol_assignment: u16 = 1 << 9;\n     let reserved: u16 = 1 << 10;\n     let shared: u16 = 1 << 11;\n \n@@ -449,9 +441,9 @@ fn ipv4_properties() {\n     check!(\"198.18.0.0\", benchmarking);\n     check!(\"198.18.54.2\", benchmarking);\n     check!(\"198.19.255.255\", benchmarking);\n-    check!(\"192.0.0.0\", ietf_protocol_assignment);\n-    check!(\"192.0.0.255\", ietf_protocol_assignment);\n-    check!(\"192.0.0.100\", ietf_protocol_assignment);\n+    check!(\"192.0.0.0\");\n+    check!(\"192.0.0.255\");\n+    check!(\"192.0.0.100\");\n     check!(\"240.0.0.0\", reserved);\n     check!(\"251.54.1.76\", reserved);\n     check!(\"254.255.255.255\", reserved);\n@@ -823,9 +815,6 @@ fn ipv4_const() {\n     const IS_SHARED: bool = IP_ADDRESS.is_shared();\n     assert!(!IS_SHARED);\n \n-    const IS_IETF_PROTOCOL_ASSIGNMENT: bool = IP_ADDRESS.is_ietf_protocol_assignment();\n-    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n-\n     const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n     assert!(!IS_BENCHMARKING);\n "}]}