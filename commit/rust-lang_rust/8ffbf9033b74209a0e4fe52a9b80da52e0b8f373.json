{"sha": "8ffbf9033b74209a0e4fe52a9b80da52e0b8f373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZmJmOTAzM2I3NDIwOWEwZTRmZTUyYTliODBkYTUyZTBiOGYzNzM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-01T16:23:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-01T16:23:32Z"}, "message": "Rollup merge of #69577 - GuillaumeGomez:cleanup-e0375, r=Dylan-DPC\n\nClean up E0375 explanation\n\nr? @Dylan-DPC", "tree": {"sha": "77f99d01a381db2d511ffcec3436796894588096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f99d01a381db2d511ffcec3436796894588096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeW+GECRBK7hj4Ov3rIwAAdHIIAEToXcWrvsaglalg+6UVoR1s\nqsrx2moS1p+N/htHr+0IHk7gAj5x4VbjdpHDtZYDlDCU+51kerISo2POaZ0gqBTX\njI9iP7XJ/F0EPxy9wEcutqp7ZJfDmXmxJPhnhlBmuLYxWtSLTDVbP3qY464kOHQF\nkoG/CSPaU3RrgUK+WYFZwAGDHX5bSjaVL6ue0EerdyGPOaAIVD2BP0BFTEvZDLrM\nfd0/fvWv8wxg9gBoO8JRM++/Nbg/vOeO3/1H4zjWIlQtOFbaTUNd3h2WcUJU5m9M\nB/FpBKX6lg+WeXsX6u6FpF0rZv504sFMqUyVP5TZy4LDQbqHkVe14LSpJgK4Ulo=\n=u6qc\n-----END PGP SIGNATURE-----\n", "payload": "tree 77f99d01a381db2d511ffcec3436796894588096\nparent 87284d7e79da9eb106ba120600d4fb4767897869\nparent 6fba47f66f12212c7da504702aff7c69a8e15d02\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583079812 +0100\ncommitter GitHub <noreply@github.com> 1583079812 +0100\n\nRollup merge of #69577 - GuillaumeGomez:cleanup-e0375, r=Dylan-DPC\n\nClean up E0375 explanation\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373", "html_url": "https://github.com/rust-lang/rust/commit/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87284d7e79da9eb106ba120600d4fb4767897869", "url": "https://api.github.com/repos/rust-lang/rust/commits/87284d7e79da9eb106ba120600d4fb4767897869", "html_url": "https://github.com/rust-lang/rust/commit/87284d7e79da9eb106ba120600d4fb4767897869"}, {"sha": "6fba47f66f12212c7da504702aff7c69a8e15d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fba47f66f12212c7da504702aff7c69a8e15d02", "html_url": "https://github.com/rust-lang/rust/commit/6fba47f66f12212c7da504702aff7c69a8e15d02"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "71e530571650b53357047ff647ec0337e7327315", "filename": "src/librustc_error_codes/error_codes/E0375.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ffbf9033b74209a0e4fe52a9b80da52e0b8f373/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0375.md?ref=8ffbf9033b74209a0e4fe52a9b80da52e0b8f373", "patch": "@@ -1,12 +1,7 @@\n-A struct with more than one field containing an unsized type cannot implement\n-`CoerceUnsized`. This only occurs when you are trying to coerce one of the\n-types in your struct to another type in the struct. In this case we try to\n-impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n-takes. An [unsized type][1] is any type that the compiler doesn't know the\n-length or alignment of at compile time. Any struct containing an unsized type\n-is also unsized.\n+`CoerceUnsized` was implemented on a struct which contains more than one field\n+with an unsized type.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0375\n #![feature(coerce_unsized)]\n@@ -22,6 +17,14 @@ struct Foo<T: ?Sized, U: ?Sized> {\n impl<T, U> CoerceUnsized<Foo<U, T>> for Foo<T, U> {}\n ```\n \n+A struct with more than one field containing an unsized type cannot implement\n+`CoerceUnsized`. This only occurs when you are trying to coerce one of the\n+types in your struct to another type in the struct. In this case we try to\n+impl `CoerceUnsized` from `T` to `U` which are both types that the struct\n+takes. An [unsized type][1] is any type that the compiler doesn't know the\n+length or alignment of at compile time. Any struct containing an unsized type\n+is also unsized.\n+\n `CoerceUnsized` only allows for coercion from a structure with a single\n unsized type field to another struct with a single unsized type field.\n In fact Rust only allows for a struct to have one unsized type in a struct"}]}