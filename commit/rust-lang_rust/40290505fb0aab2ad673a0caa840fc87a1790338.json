{"sha": "40290505fb0aab2ad673a0caa840fc87a1790338", "node_id": "C_kwDOAAsO6NoAKDQwMjkwNTA1ZmIwYWFiMmFkNjczYTBjYWE4NDBmYzg3YTE3OTAzMzg", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-11-01T12:45:58Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-11-06T22:21:21Z"}, "message": "cfg-step code", "tree": {"sha": "86d0e81ecf64c3888d952911535de8f05e324b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d0e81ecf64c3888d952911535de8f05e324b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40290505fb0aab2ad673a0caa840fc87a1790338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40290505fb0aab2ad673a0caa840fc87a1790338", "html_url": "https://github.com/rust-lang/rust/commit/40290505fb0aab2ad673a0caa840fc87a1790338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40290505fb0aab2ad673a0caa840fc87a1790338/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137d5913ec0ce17e0f48ea53182e9e9c9d2c837d", "url": "https://api.github.com/repos/rust-lang/rust/commits/137d5913ec0ce17e0f48ea53182e9e9c9d2c837d", "html_url": "https://github.com/rust-lang/rust/commit/137d5913ec0ce17e0f48ea53182e9e9c9d2c837d"}], "stats": {"total": 114, "additions": 52, "deletions": 62}, "files": [{"sha": "7dce46d1b7a7245f2ae0ba9af165e5331c2d380f", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -251,7 +251,7 @@ pub trait Visitor<'ast>: Sized {\n macro_rules! walk_list {\n     ($visitor: expr, $method: ident, $list: expr $(, $($extra_args: expr),* )?) => {\n         {\n-            #[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n+            #[allow(for_loops_over_fallibles)]\n             for elem in $list {\n                 $visitor.$method(elem $(, $($extra_args,)* )?)\n             }"}, {"sha": "073ccfe061d73a70439036dec31f15229d047258", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -55,8 +55,7 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Subdiagnostic)]` -- see [rustc_macros::Subdiagnostic].\n-#[cfg_attr(bootstrap, rustc_diagnostic_item = \"AddSubdiagnostic\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"AddToDiagnostic\")]\n+#[rustc_diagnostic_item = \"AddToDiagnostic\"]\n pub trait AddToDiagnostic\n where\n     Self: Sized,"}, {"sha": "1e1dcb04d70500da2f2200dbdc4e5fb37cb6a04c", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -16,8 +16,7 @@ use std::thread::panicking;\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(Diagnostic)]` -- see [rustc_macros::Diagnostic].\n-#[cfg_attr(bootstrap, rustc_diagnostic_item = \"SessionDiagnostic\")]\n-#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"IntoDiagnostic\")]\n+#[rustc_diagnostic_item = \"IntoDiagnostic\"]\n pub trait IntoDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `Handler`.\n     #[must_use]"}, {"sha": "6bdf591fdd79208632a82b19e051e7976da5f446", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -43,7 +43,6 @@\n #![feature(type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(bootstrap, feature(half_open_range_patterns))]\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n #![feature(trusted_step)]"}, {"sha": "e5fbfc55761f41302171b33cf17ac00acc1602bc", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -28,20 +28,16 @@ extern \"Rust\" {\n     // The rustc fork of LLVM 14 and earlier also special-cases these function names to be able to optimize them\n     // like `malloc`, `realloc`, and `free`, respectively.\n     #[rustc_allocator]\n-    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n-    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+    #[rustc_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n     #[rustc_deallocator]\n-    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n-    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+    #[rustc_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n     #[rustc_reallocator]\n-    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n-    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+    #[rustc_nounwind]\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n     #[rustc_allocator_zeroed]\n-    #[cfg_attr(not(bootstrap), rustc_nounwind)]\n-    #[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+    #[rustc_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n }\n "}, {"sha": "d96b53de0a338328fec822aa2a2bfa1e66de5e9f", "filename": "library/core/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -99,7 +99,7 @@\n /// ```\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Default\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Default: Sized {\n     /// Returns the \"default value\" for a type.\n     ///"}, {"sha": "916a10b03fc13ac23b07297dd6a791d129ca4d2d", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -790,7 +790,7 @@ extern \"rust-intrinsic\" {\n     /// uninitialized at that point in the control flow.\n     ///\n     /// This intrinsic should not be used outside of the compiler.\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn rustc_peek<T>(_: T) -> T;\n \n     /// Aborts the execution of the process.\n@@ -808,7 +808,7 @@ extern \"rust-intrinsic\" {\n     /// On Unix, the\n     /// process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or\n     /// `SIGBUS`.  The precise behaviour is not guaranteed and not stable.\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n \n     /// Informs the optimizer that this point in the code is not reachable,\n@@ -847,7 +847,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn likely(b: bool) -> bool;\n \n     /// Hints to the compiler that branch condition is likely to be false.\n@@ -862,7 +862,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn unlikely(b: bool) -> bool;\n \n     /// Executes a breakpoint trap, for inspection by a debugger.\n@@ -882,7 +882,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn size_of<T>() -> usize;\n \n     /// The minimum alignment of a type.\n@@ -894,7 +894,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n     ///\n@@ -923,7 +923,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n@@ -937,31 +937,31 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n     /// zero-initialization: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn assert_zero_valid<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n     /// bit patterns: This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n     #[rustc_const_unstable(feature = \"const_assert_type2\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn assert_uninit_valid<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n@@ -973,7 +973,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Consider using [`core::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"76156\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n     /// Moves a value out of scope without running drop glue.\n@@ -986,7 +986,7 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_intrinsic_forget\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type.\n@@ -1266,7 +1266,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n     #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn needs_drop<T: ?Sized>() -> bool;\n \n     /// Calculates the offset from a pointer.\n@@ -1311,7 +1311,7 @@ extern \"rust-intrinsic\" {\n     /// any safety invariants.\n     ///\n     /// Consider using [`pointer::mask`] instead.\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n@@ -1503,7 +1503,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::min`]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n     ///\n@@ -1514,7 +1514,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::min`]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n     ///\n@@ -1525,7 +1525,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f32::max`]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n     ///\n@@ -1536,7 +1536,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`f64::max`]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n@@ -1657,7 +1657,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `count_ones` method. For example,\n     /// [`u32::count_ones`]\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn ctpop<T: Copy>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n@@ -1695,7 +1695,7 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(num_leading, 16);\n     /// ```\n     #[rustc_const_stable(feature = \"const_ctlz\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn ctlz<T: Copy>(x: T) -> T;\n \n     /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n@@ -1752,7 +1752,7 @@ extern \"rust-intrinsic\" {\n     /// assert_eq!(num_trailing, 16);\n     /// ```\n     #[rustc_const_stable(feature = \"const_cttz\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn cttz<T: Copy>(x: T) -> T;\n \n     /// Like `cttz`, but extra-unsafe as it returns `undef` when\n@@ -1785,7 +1785,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `swap_bytes` method. For example,\n     /// [`u32::swap_bytes`]\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn bswap<T: Copy>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n@@ -1799,7 +1799,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `reverse_bits` method. For example,\n     /// [`u32::reverse_bits`]\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn bitreverse<T: Copy>(x: T) -> T;\n \n     /// Performs checked integer addition.\n@@ -1813,7 +1813,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_add` method. For example,\n     /// [`u32::overflowing_add`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n@@ -1827,7 +1827,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_sub` method. For example,\n     /// [`u32::overflowing_sub`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n@@ -1841,7 +1841,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `overflowing_mul` method. For example,\n     /// [`u32::overflowing_mul`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs an exact division, resulting in undefined behavior where\n@@ -1916,7 +1916,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `rotate_left` method. For example,\n     /// [`u32::rotate_left`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn rotate_left<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n@@ -1930,7 +1930,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `rotate_right` method. For example,\n     /// [`u32::rotate_right`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn rotate_right<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n@@ -1944,7 +1944,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`u32::wrapping_add`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n@@ -1957,7 +1957,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`u32::wrapping_sub`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n@@ -1970,7 +1970,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`u32::wrapping_mul`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, saturating at numeric bounds.\n@@ -1984,7 +1984,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `saturating_add` method. For example,\n     /// [`u32::saturating_add`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n     /// Computes `a - b`, saturating at numeric bounds.\n     ///\n@@ -1997,7 +1997,7 @@ extern \"rust-intrinsic\" {\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`u32::saturating_sub`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v';\n@@ -2010,7 +2010,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n     /// Returns the number of variants of the type `T` cast to a `usize`;\n@@ -2023,7 +2023,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The to-be-stabilized version of this intrinsic is [`mem::variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn variant_count<T>() -> usize;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`\n@@ -2057,7 +2057,7 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8;\n \n     /// Allocates a block of memory at compile time.\n@@ -2108,7 +2108,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// [`std::hint::black_box`]: crate::hint::black_box\n     #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]\n-    #[cfg_attr(not(bootstrap), rustc_safe_intrinsic)]\n+    #[rustc_safe_intrinsic]\n     pub fn black_box<T>(dummy: T) -> T;\n \n     /// `ptr` must point to a vtable."}, {"sha": "c67867f4436e4a46374987c4b730a7dc1520cac7", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -61,7 +61,7 @@\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Deref\"]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5e3dc48b6ca1c1b8a8cc464162b7a598ebb767c8", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -55,7 +55,7 @@\n #[doc(alias = \"]\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"[]\")]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -164,7 +164,7 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     ///"}, {"sha": "4fd1eb234137fb56cbe1fa6d22343b0daacb3aff", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -70,8 +70,7 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(bootstrap), rustc_nounwind)]\n-#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+#[rustc_nounwind]\n pub fn panic_str_nounwind(msg: &'static str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n@@ -158,8 +157,7 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n #[cold]\n #[inline(never)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n-#[cfg_attr(not(bootstrap), rustc_nounwind)]\n-#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+#[rustc_nounwind]\n fn panic_no_unwind() -> ! {\n     panic_str_nounwind(\"panic in a function that cannot unwind\")\n }"}, {"sha": "9f175d756d4d3ce76ce82151bfc6c1750f5407b0", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -1862,7 +1862,6 @@ macro_rules! fnptr_impls_safety_abi {\n         fnptr_impls_safety_abi! { #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")] $FnTy, $($Arg),* }\n     };\n     (@c_unwind $FnTy: ty, $($Arg: ident),*) => {\n-        #[cfg(not(bootstrap))]\n         fnptr_impls_safety_abi! { #[unstable(feature = \"c_unwind\", issue = \"74990\")] $FnTy, $($Arg),* }\n     };\n     (#[$meta:meta] $FnTy: ty, $($Arg: ident),*) => {"}, {"sha": "dca6321cf62fd6f3d9e0d242f9d7ac090fbaf983", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40290505fb0aab2ad673a0caa840fc87a1790338/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=40290505fb0aab2ad673a0caa840fc87a1790338", "patch": "@@ -57,7 +57,7 @@ fn test_get_resource() {\n }\n \n #[test]\n-#[cfg_attr(not(bootstrap), allow(for_loops_over_fallibles))]\n+#[allow(for_loops_over_fallibles)]\n fn test_option_dance() {\n     let x = Some(());\n     let mut y = Some(5);"}]}