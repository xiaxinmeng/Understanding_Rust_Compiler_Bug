{"sha": "e8f5626e440aa38161127eea25a1ef43bcbb52ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZjU2MjZlNDQwYWEzODE2MTEyN2VlYTI1YTFlZjQzYmNiYjUyZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-24T16:38:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-24T16:38:10Z"}, "message": "Merge #7032\n\n7032: Simplify more r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "96338ebff390c6a8a7a3257badca938a18681fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96338ebff390c6a8a7a3257badca938a18681fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f5626e440aa38161127eea25a1ef43bcbb52ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf5MPyCRBK7hj4Ov3rIwAAdHIIAFKMGwjyT/V/QhgYne78DFdW\n1JHBHZWrFAB2jOMHfi1PQTeg/AXNoG/L1ApIltoc6UL0Zlw22uucev3az+nxxTN0\n0T1Y9z03DJ9CQpRrq0Uh2GeM89C7Yb/IQpdSN+cXLOUb19w9lMERi1BngmkYN597\nAVNIPCMyQpIkwIf8cDLJfp2VIwAWKyMbgcea32I8JK8p49BvPRg4TDc6fYpfeIjF\nupnXuF6ojNFZqtiHJYH9q/yB7g+/31dB4+sujET4sbeIsEv5dkrLBirFqA4sTR2/\nRdURyQWY25TusVI1VBFzWGqcj9mtuyyMMzNnKZO/se2/yXVVxwUC0CV5pDURZJk=\n=aJah\n-----END PGP SIGNATURE-----\n", "payload": "tree 96338ebff390c6a8a7a3257badca938a18681fe7\nparent f43182e621fc73e409dfd21d126d401b54bd3db3\nparent 5d914834a948fd8a154904d171834edd9050205c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608827890 +0000\ncommitter GitHub <noreply@github.com> 1608827890 +0000\n\nMerge #7032\n\n7032: Simplify more r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f5626e440aa38161127eea25a1ef43bcbb52ed", "html_url": "https://github.com/rust-lang/rust/commit/e8f5626e440aa38161127eea25a1ef43bcbb52ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f5626e440aa38161127eea25a1ef43bcbb52ed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43182e621fc73e409dfd21d126d401b54bd3db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43182e621fc73e409dfd21d126d401b54bd3db3", "html_url": "https://github.com/rust-lang/rust/commit/f43182e621fc73e409dfd21d126d401b54bd3db3"}, {"sha": "5d914834a948fd8a154904d171834edd9050205c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d914834a948fd8a154904d171834edd9050205c", "html_url": "https://github.com/rust-lang/rust/commit/5d914834a948fd8a154904d171834edd9050205c"}], "stats": {"total": 65, "additions": 22, "deletions": 43}, "files": [{"sha": "03827375033ef937598ba714cda48bcf287e9adb", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 43, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e8f5626e440aa38161127eea25a1ef43bcbb52ed/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f5626e440aa38161127eea25a1ef43bcbb52ed/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e8f5626e440aa38161127eea25a1ef43bcbb52ed", "patch": "@@ -258,10 +258,12 @@ mod tests {\n             .pop()\n             .unwrap();\n         let fix = diagnostic.fix.unwrap();\n-        let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n         let actual = {\n-            let mut actual = target_file_contents.to_string();\n+            let file_id = fix.source_change.source_file_edits.first().unwrap().file_id;\n+            let mut actual = analysis.file_text(file_id).unwrap().to_string();\n+\n             // Go from the last one to the first one, so that ranges won't be affected by previous edits.\n+            // FIXME: https://github.com/rust-analyzer/rust-analyzer/issues/4901#issuecomment-644675309\n             for edit in fix.source_change.source_file_edits.iter().rev() {\n                 edit.edit.apply(&mut actual);\n             }\n@@ -277,29 +279,6 @@ mod tests {\n         );\n     }\n \n-    /// Checks that a diagnostic applies to the file containing the `<|>` cursor marker\n-    /// which has a fix that can apply to other files.\n-    fn check_apply_diagnostic_fix_in_other_file(ra_fixture_before: &str, ra_fixture_after: &str) {\n-        let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, file_pos) = fixture::position(ra_fixture_before);\n-        let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis\n-            .diagnostics(&DiagnosticsConfig::default(), current_file_id)\n-            .unwrap()\n-            .pop()\n-            .unwrap();\n-        let mut fix = diagnostic.fix.unwrap();\n-        let edit = fix.source_change.source_file_edits.pop().unwrap();\n-        let changed_file_id = edit.file_id;\n-        let before = analysis.file_text(changed_file_id).unwrap();\n-        let actual = {\n-            let mut actual = before.to_string();\n-            edit.edit.apply(&mut actual);\n-            actual\n-        };\n-        assert_eq_text!(ra_fixture_after, &actual);\n-    }\n-\n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n     /// apply to the file containing the cursor.\n     pub(crate) fn check_no_diagnostics(ra_fixture: &str) {\n@@ -736,25 +715,25 @@ struct Foo {\n \n     #[test]\n     fn test_add_field_in_other_file_from_usage() {\n-        check_apply_diagnostic_fix_in_other_file(\n-            r\"\n-            //- /main.rs\n-            mod foo;\n+        check_fix(\n+            r#\"\n+//- /main.rs\n+mod foo;\n \n-            fn main() {\n-                <|>foo::Foo { bar: 3, baz: false};\n-            }\n-            //- /foo.rs\n-            struct Foo {\n-                bar: i32\n-            }\n-            \",\n-            r\"\n-            struct Foo {\n-                bar: i32,\n-                pub(crate) baz: bool\n-            }\n-            \",\n+fn main() {\n+    foo::Foo { bar: 3, <|>baz: false};\n+}\n+//- /foo.rs\n+struct Foo {\n+    bar: i32\n+}\n+\"#,\n+            r#\"\n+struct Foo {\n+    bar: i32,\n+    pub(crate) baz: bool\n+}\n+\"#,\n         )\n     }\n "}]}