{"sha": "92f35b32b212f7fdd1fe6cd5f85a7d41577d146f", "node_id": "C_kwDOAAsO6NoAKDkyZjM1YjMyYjIxMmY3ZmRkMWZlNmNkNWY4NWE3ZDQxNTc3ZDE0NmY", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-03T09:09:00Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-03-03T09:40:10Z"}, "message": "Use weak linkage for `preadv` and `pwritev` on MacOS and iOS", "tree": {"sha": "226da7c5d3a7977e74d2479c1098d2e1c2317402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226da7c5d3a7977e74d2479c1098d2e1c2317402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f", "html_url": "https://github.com/rust-lang/rust/commit/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/23cd4cee05cf8b07d341dd01e4eafebad76da5c4", "html_url": "https://github.com/rust-lang/rust/commit/23cd4cee05cf8b07d341dd01e4eafebad76da5c4"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "99ea05adea3c3ce8ebe85b7b3bde3cf3c2f4b13b", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f35b32b212f7fdd1fe6cd5f85a7d41577d146f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=92f35b32b212f7fdd1fe6cd5f85a7d41577d146f", "patch": "@@ -152,9 +152,7 @@ impl FileDesc {\n         target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n         target_os = \"illumos\",\n-        target_os = \"ios\",\n         target_os = \"linux\",\n-        target_os = \"macos\",\n         target_os = \"netbsd\",\n     ))]\n     pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n@@ -170,6 +168,7 @@ impl FileDesc {\n     }\n \n     #[cfg(not(any(\n+        target_os = \"android\",\n         target_os = \"emscripten\",\n         target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n@@ -188,7 +187,7 @@ impl FileDesc {\n     //\n     // On 32-bit targets, we don't want to deal with weird ABI issues around\n     // passing 64-bits parameters to syscalls, so we fallback to the default\n-    // implementation.\n+    // implementation if `preadv` is not available.\n     #[cfg(all(target_os = \"android\", target_pointer_width = \"64\"))]\n     pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         super::weak::syscall! {\n@@ -211,7 +210,13 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(all(target_os = \"android\", target_pointer_width = \"32\"))]\n+    // We support old MacOS and iOS versions that do not have `preadv`. There is\n+    // no `syscall` possible in these platform.\n+    #[cfg(any(\n+        all(target_os = \"android\", target_pointer_width = \"32\"),\n+        target_os = \"ios\",\n+        target_os = \"macos\",\n+    ))]\n     pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         super::weak::weak!(fn preadv64(libc::c_int, *const libc::iovec, libc::c_int, off64_t) -> isize);\n \n@@ -286,9 +291,7 @@ impl FileDesc {\n         target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n         target_os = \"illumos\",\n-        target_os = \"ios\",\n         target_os = \"linux\",\n-        target_os = \"macos\",\n         target_os = \"netbsd\",\n     ))]\n     pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n@@ -304,6 +307,7 @@ impl FileDesc {\n     }\n \n     #[cfg(not(any(\n+        target_os = \"android\",\n         target_os = \"emscripten\",\n         target_os = \"freebsd\",\n         target_os = \"fuchsia\",\n@@ -322,7 +326,7 @@ impl FileDesc {\n     //\n     // On 32-bit targets, we don't want to deal with weird ABI issues around\n     // passing 64-bits parameters to syscalls, so we fallback to the default\n-    // implementation.\n+    // implementation if `pwritev` is not available.\n     #[cfg(all(target_os = \"android\", target_pointer_width = \"64\"))]\n     pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         super::weak::syscall! {\n@@ -345,7 +349,13 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(all(target_os = \"android\", target_pointer_width = \"32\"))]\n+    // We support old MacOS and iOS versions that do not have `pwritev`. There is\n+    // no `syscall` possible in these platform.\n+    #[cfg(any(\n+        all(target_os = \"android\", target_pointer_width = \"32\"),\n+        target_os = \"ios\",\n+        target_os = \"macos\",\n+    ))]\n     pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         super::weak::weak!(fn pwritev64(libc::c_int, *const libc::iovec, libc::c_int, off64_t) -> isize);\n "}]}