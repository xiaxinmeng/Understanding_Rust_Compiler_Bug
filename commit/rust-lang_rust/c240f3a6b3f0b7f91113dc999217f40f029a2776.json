{"sha": "c240f3a6b3f0b7f91113dc999217f40f029a2776", "node_id": "C_kwDOAAsO6NoAKGMyNDBmM2E2YjNmMGI3ZjkxMTEzZGM5OTkyMTdmNDBmMDI5YTI3NzY", "commit": {"author": {"name": "Tom Milligan", "email": "tommilligan@users.noreply.github.com", "date": "2022-07-13T00:31:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-13T00:31:19Z"}, "message": "feat: add skip_macro_invocations option (#5347)\n\n* feat: add skip_macro_names option\r\n\r\n* [review] update configuration documentation\r\n\r\n* [review] fix docstring\r\n\r\n* [feat] implement wildcard macro invocation skip\r\n\r\n* commit missed files\r\n\r\n* [review] test override skip macro names\r\n\r\n* [review] skip_macro_names -> skip_macro_invocations\r\n\r\n* [review] expand doc configuration\r\n\r\n* [review] add lots more tests\r\n\r\n* [review] add use alias test examples\r\n\r\n* [review] add link to standard macro behaviour", "tree": {"sha": "896c1e34f507d3544bf6f43f2a12f4fab884e758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896c1e34f507d3544bf6f43f2a12f4fab884e758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c240f3a6b3f0b7f91113dc999217f40f029a2776", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJizhJXCRBK7hj4Ov3rIwAASIMIAHs/ubSLc2ad0nDT5ImUCzAM\nrxI1CCCHNcJzVoKqmLN6R6UrCYOBowWSi2JKaa5B7PYXWlGPQ63GdNBqS0FsFLXN\nvXHN2TImi9Vo6LkghXp6ZBqual8kUecAnhMf8pkkDMy/exCIR+2ILu9ybvIjnWzy\nzspIcZpPR1Bxh0FCZRVTpfYP9SM6NQw9eK3Y6xYbpu/U0N4ae6n9mxD6PHm6oB2O\n2KGExRPZoz1mWrUhaJe95SlHj7yPz39zwGQFZWWEKrwkcjQUBkEuek2DacFKV88a\nJIhLVxoEhq2921QvADg3GNgd9kSmL4lIiqFBFNT0Ej8yztnq4O+i+gW1hQvl+88=\n=jV5o\n-----END PGP SIGNATURE-----\n", "payload": "tree 896c1e34f507d3544bf6f43f2a12f4fab884e758\nparent 2403f827bf1e427a04ce45c88a64cbebe91041d7\nauthor Tom Milligan <tommilligan@users.noreply.github.com> 1657672279 +0100\ncommitter GitHub <noreply@github.com> 1657672279 -0500\n\nfeat: add skip_macro_invocations option (#5347)\n\n* feat: add skip_macro_names option\r\n\r\n* [review] update configuration documentation\r\n\r\n* [review] fix docstring\r\n\r\n* [feat] implement wildcard macro invocation skip\r\n\r\n* commit missed files\r\n\r\n* [review] test override skip macro names\r\n\r\n* [review] skip_macro_names -> skip_macro_invocations\r\n\r\n* [review] expand doc configuration\r\n\r\n* [review] add lots more tests\r\n\r\n* [review] add use alias test examples\r\n\r\n* [review] add link to standard macro behaviour"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c240f3a6b3f0b7f91113dc999217f40f029a2776", "html_url": "https://github.com/rust-lang/rust/commit/c240f3a6b3f0b7f91113dc999217f40f029a2776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c240f3a6b3f0b7f91113dc999217f40f029a2776/comments", "author": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2403f827bf1e427a04ce45c88a64cbebe91041d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2403f827bf1e427a04ce45c88a64cbebe91041d7", "html_url": "https://github.com/rust-lang/rust/commit/2403f827bf1e427a04ce45c88a64cbebe91041d7"}], "stats": {"total": 463, "additions": 459, "deletions": 4}, "files": [{"sha": "5579b5095afacf54e2ec7beea5a7858e8ca0577e", "filename": "Configurations.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -1014,6 +1014,62 @@ macro_rules! foo {\n \n See also [`format_macro_matchers`](#format_macro_matchers).\n \n+## `skip_macro_invocations`\n+\n+Skip formatting the bodies of macro invocations with the following names.\n+\n+rustfmt will not format any macro invocation for macros with names set in this list.\n+Including the special value \"*\" will prevent any macro invocations from being formatted.\n+\n+Note: This option does not have any impact on how rustfmt formats macro definitions.\n+\n+- **Default value**: `[]`\n+- **Possible values**: a list of macro name idents, `[\"name_0\", \"name_1\", ..., \"*\"]`\n+- **Stable**: No (tracking issue: [#5346](https://github.com/rust-lang/rustfmt/issues/5346))\n+\n+#### `[]` (default):\n+\n+rustfmt will follow its standard approach to formatting macro invocations.\n+\n+No macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in [#5437](https://github.com/rust-lang/rustfmt/discussions/5437).\n+\n+```rust\n+lorem!(\n+    const _: u8 = 0;\n+);\n+\n+ipsum!(\n+    const _: u8 = 0;\n+);\n+```\n+\n+#### `[\"lorem\"]`:\n+\n+The named macro invocations will be skipped.\n+\n+```rust\n+lorem!(\n+        const _: u8 = 0;\n+);\n+\n+ipsum!(\n+    const _: u8 = 0;\n+);\n+```\n+\n+#### `[\"*\"]`:\n+\n+The special selector `*` will skip all macro invocations.\n+\n+```rust\n+lorem!(\n+        const _: u8 = 0;\n+);\n+\n+ipsum!(\n+        const _: u8 = 0;\n+);\n+```\n \n ## `format_strings`\n "}, {"sha": "48f4d9ce80e40bf5924d5c9904fa841f0bebc7aa", "filename": "src/config/config_type.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -1,4 +1,5 @@\n use crate::config::file_lines::FileLines;\n+use crate::config::macro_names::MacroSelectors;\n use crate::config::options::{IgnoreList, WidthHeuristics};\n \n /// Trait for types that can be used in `Config`.\n@@ -46,6 +47,12 @@ impl ConfigType for FileLines {\n     }\n }\n \n+impl ConfigType for MacroSelectors {\n+    fn doc_hint() -> String {\n+        String::from(\"[<string>, ...]\")\n+    }\n+}\n+\n impl ConfigType for WidthHeuristics {\n     fn doc_hint() -> String {\n         String::new()"}, {"sha": "26ad78d6dcae855e4560e63549db3c1b728327bf", "filename": "src/config/macro_names.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fmacro_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fmacro_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmacro_names.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,118 @@\n+//! This module contains types and functions to support formatting specific macros.\n+\n+use itertools::Itertools;\n+use std::{fmt, str};\n+\n+use serde::{Deserialize, Serialize};\n+use serde_json as json;\n+use thiserror::Error;\n+\n+/// Defines the name of a macro.\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd, Deserialize, Serialize)]\n+pub struct MacroName(String);\n+\n+impl MacroName {\n+    pub fn new(other: String) -> Self {\n+        Self(other)\n+    }\n+}\n+\n+impl fmt::Display for MacroName {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+impl From<MacroName> for String {\n+    fn from(other: MacroName) -> Self {\n+        other.0\n+    }\n+}\n+\n+/// Defines a selector to match against a macro.\n+#[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd, Deserialize, Serialize)]\n+pub enum MacroSelector {\n+    Name(MacroName),\n+    All,\n+}\n+\n+impl fmt::Display for MacroSelector {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::Name(name) => name.fmt(f),\n+            Self::All => write!(f, \"*\"),\n+        }\n+    }\n+}\n+\n+impl str::FromStr for MacroSelector {\n+    type Err = std::convert::Infallible;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        Ok(match s {\n+            \"*\" => MacroSelector::All,\n+            name => MacroSelector::Name(MacroName(name.to_owned())),\n+        })\n+    }\n+}\n+\n+/// A set of macro selectors.\n+#[derive(Clone, Debug, Default, PartialEq, Deserialize, Serialize)]\n+pub struct MacroSelectors(pub Vec<MacroSelector>);\n+\n+impl fmt::Display for MacroSelectors {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.0.iter().format(\", \"))\n+    }\n+}\n+\n+#[derive(Error, Debug)]\n+pub enum MacroSelectorsError {\n+    #[error(\"{0}\")]\n+    Json(json::Error),\n+}\n+\n+// This impl is needed for `Config::override_value` to work for use in tests.\n+impl str::FromStr for MacroSelectors {\n+    type Err = MacroSelectorsError;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let raw: Vec<&str> = json::from_str(s).map_err(MacroSelectorsError::Json)?;\n+        Ok(Self(\n+            raw.into_iter()\n+                .map(|raw| {\n+                    MacroSelector::from_str(raw).expect(\"MacroSelector from_str is infallible\")\n+                })\n+                .collect(),\n+        ))\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use std::str::FromStr;\n+\n+    #[test]\n+    fn macro_names_from_str() {\n+        let macro_names = MacroSelectors::from_str(r#\"[\"foo\", \"*\", \"bar\"]\"#).unwrap();\n+        assert_eq!(\n+            macro_names,\n+            MacroSelectors(\n+                [\n+                    MacroSelector::Name(MacroName(\"foo\".to_owned())),\n+                    MacroSelector::All,\n+                    MacroSelector::Name(MacroName(\"bar\".to_owned()))\n+                ]\n+                .into_iter()\n+                .collect()\n+            )\n+        );\n+    }\n+\n+    #[test]\n+    fn macro_names_display() {\n+        let macro_names = MacroSelectors::from_str(r#\"[\"foo\", \"*\", \"bar\"]\"#).unwrap();\n+        assert_eq!(format!(\"{}\", macro_names), \"foo, *, bar\");\n+    }\n+}"}, {"sha": "0c6a3cbc9532a6cb6e59a1b234da715e4b0f5fff", "filename": "src/config/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -13,6 +13,8 @@ pub use crate::config::file_lines::{FileLines, FileName, Range};\n #[allow(unreachable_pub)]\n pub use crate::config::lists::*;\n #[allow(unreachable_pub)]\n+pub use crate::config::macro_names::{MacroSelector, MacroSelectors};\n+#[allow(unreachable_pub)]\n pub use crate::config::options::*;\n \n #[macro_use]\n@@ -22,6 +24,7 @@ pub(crate) mod options;\n \n pub(crate) mod file_lines;\n pub(crate) mod lists;\n+pub(crate) mod macro_names;\n \n // This macro defines configuration options used in rustfmt. Each option\n // is defined as follows:\n@@ -67,6 +70,8 @@ create_config! {\n     format_macro_matchers: bool, false, false,\n         \"Format the metavariable matching patterns in macros\";\n     format_macro_bodies: bool, true, false, \"Format the bodies of macros\";\n+    skip_macro_invocations: MacroSelectors, MacroSelectors::default(), false,\n+        \"Skip formatting the bodies of macros invoked with the following names.\";\n     hex_literal_case: HexLiteralCase, HexLiteralCase::Preserve, false,\n         \"Format hexadecimal integer literals\";\n \n@@ -403,6 +408,7 @@ mod test {\n     use super::*;\n     use std::str;\n \n+    use crate::config::macro_names::MacroName;\n     use rustfmt_config_proc_macro::{nightly_only_test, stable_only_test};\n \n     #[allow(dead_code)]\n@@ -611,6 +617,7 @@ normalize_doc_attributes = false\n format_strings = false\n format_macro_matchers = false\n format_macro_bodies = true\n+skip_macro_invocations = []\n hex_literal_case = \"Preserve\"\n empty_item_single_line = true\n struct_lit_single_line = true\n@@ -1019,4 +1026,17 @@ make_backup = false\n             );\n         }\n     }\n+\n+    #[test]\n+    fn test_override_skip_macro_invocations() {\n+        let mut config = Config::default();\n+        config.override_value(\"skip_macro_invocations\", r#\"[\"*\", \"println\"]\"#);\n+        assert_eq!(\n+            config.skip_macro_invocations(),\n+            MacroSelectors(vec![\n+                MacroSelector::All,\n+                MacroSelector::Name(MacroName::new(\"println\".to_owned()))\n+            ])\n+        );\n+    }\n }"}, {"sha": "8b2fd7736ae51d47e2372eb392e37b3241cc123f", "filename": "src/skip.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -7,6 +7,7 @@ use rustc_ast_pretty::pprust;\n /// by other context. Query this context to know if you need skip a block.\n #[derive(Default, Clone)]\n pub(crate) struct SkipContext {\n+    pub(crate) all_macros: bool,\n     macros: Vec<String>,\n     attributes: Vec<String>,\n }\n@@ -23,8 +24,15 @@ impl SkipContext {\n         self.attributes.append(&mut other.attributes);\n     }\n \n+    pub(crate) fn update_macros<T>(&mut self, other: T)\n+    where\n+        T: IntoIterator<Item = String>,\n+    {\n+        self.macros.extend(other.into_iter());\n+    }\n+\n     pub(crate) fn skip_macro(&self, name: &str) -> bool {\n-        self.macros.iter().any(|n| n == name)\n+        self.all_macros || self.macros.iter().any(|n| n == name)\n     }\n \n     pub(crate) fn skip_attribute(&self, name: &str) -> bool {"}, {"sha": "c70b3c5facd50e68635d682c16471acd50900c3a", "filename": "src/test/configuration_snippet.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Ftest%2Fconfiguration_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Ftest%2Fconfiguration_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fconfiguration_snippet.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -27,8 +27,13 @@ impl ConfigurationSection {\n         lazy_static! {\n             static ref CONFIG_NAME_REGEX: regex::Regex =\n                 regex::Regex::new(r\"^## `([^`]+)`\").expect(\"failed creating configuration pattern\");\n+            // Configuration values, which will be passed to `from_str`:\n+            //\n+            // - must be prefixed with `####`\n+            // - must be wrapped in backticks\n+            // - may by wrapped in double quotes (which will be stripped)\n             static ref CONFIG_VALUE_REGEX: regex::Regex =\n-                regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+                regex::Regex::new(r#\"^#### `\"?([^`]+?)\"?`\"#)\n                     .expect(\"failed creating configuration value pattern\");\n         }\n "}, {"sha": "b93153de154a8a232fab0f26ce92b6e9b0f74390", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -8,7 +8,7 @@ use rustc_span::{symbol, BytePos, Pos, Span};\n use crate::attr::*;\n use crate::comment::{contains_comment, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::Version;\n-use crate::config::{BraceStyle, Config};\n+use crate::config::{BraceStyle, Config, MacroSelector};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n@@ -770,6 +770,15 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         snippet_provider: &'a SnippetProvider,\n         report: FormatReport,\n     ) -> FmtVisitor<'a> {\n+        let mut skip_context = SkipContext::default();\n+        let mut macro_names = Vec::new();\n+        for macro_selector in config.skip_macro_invocations().0 {\n+            match macro_selector {\n+                MacroSelector::Name(name) => macro_names.push(name.to_string()),\n+                MacroSelector::All => skip_context.all_macros = true,\n+            }\n+        }\n+        skip_context.update_macros(macro_names);\n         FmtVisitor {\n             parent_context: None,\n             parse_sess: parse_session,\n@@ -784,7 +793,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_macro_def: false,\n             macro_rewrite_failure: false,\n             report,\n-            skip_context: Default::default(),\n+            skip_context,\n         }\n     }\n "}, {"sha": "d0437ee10fd151337043c0c065759105394152c6", "filename": "tests/source/skip_macro_invocations/all.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fall.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "1f6722344fe3b99d5747dc711a249ad9eb51427f", "filename": "tests/source/skip_macro_invocations/all_and_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fall_and_name.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\",\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should also skip this invocation, as the wildcard covers it\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "f3dd89dc4db3383d772274e58936f01131e966f7", "filename": "tests/source/skip_macro_invocations/empty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fempty.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: []\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "7fa5d3a6f715af040a8015d7e516cc4c5d373067", "filename": "tests/source/skip_macro_invocations/name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fname.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "d56695325240d54936b12420c4064c7be47f099e", "filename": "tests/source/skip_macro_invocations/name_unknown.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fname_unknown.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"unknown\"]\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "a920381a4552c0adb24a0b6de06f97946da908d3", "filename": "tests/source/skip_macro_invocations/names.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fnames.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-skip_macro_invocations: [\"foo\",\"bar\"]\n+\n+// Should skip this invocation\n+foo!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+bar!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+baz!(\n+        const _: u8 = 0;\n+);"}, {"sha": "61296869a50656c90dff19decd06ed16185295b2", "filename": "tests/source/skip_macro_invocations/path_qualified_invocation_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should not skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "9398918a9e11e23e1f6736ca2e1d1e5285d3c157", "filename": "tests/source/skip_macro_invocations/path_qualified_match.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_match.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "4e3eb542dbea425182140b1239bcfcb913bf9582", "filename": "tests/source/skip_macro_invocations/path_qualified_name_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should not skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "43cb8015de58a04a0a45dbe825b52d394d928256", "filename": "tests/source/skip_macro_invocations/use_alias_examples.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fskip_macro_invocations%2Fuse_alias_examples.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,32 @@\n+// rustfmt-skip_macro_invocations: [\"aaa\",\"ccc\"]\n+\n+// These tests demonstrate a realistic use case with use aliases.\n+// The use statements should not impact functionality in any way.\n+\n+use crate::{aaa, bbb, ddd};\n+\n+// No use alias, invocation in list\n+// Should skip this invocation\n+aaa!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation in list\n+// Should skip this invocation\n+use crate::bbb as ccc;\n+ccc!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation not in list\n+// Should not skip this invocation\n+use crate::ddd as eee;\n+eee!(\n+        const _: u8 = 0;\n+);\n+\n+// No use alias, invocation not in list\n+// Should not skip this invocation\n+fff!(\n+        const _: u8 = 0;\n+);"}, {"sha": "d0437ee10fd151337043c0c065759105394152c6", "filename": "tests/target/skip_macro_invocations/all.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fall.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "1f6722344fe3b99d5747dc711a249ad9eb51427f", "filename": "tests/target/skip_macro_invocations/all_and_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fall_and_name.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"*\",\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should also skip this invocation, as the wildcard covers it\n+renamed_items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "4a398cc59c6ee4df4d871e40de9cb20816df2036", "filename": "tests/target/skip_macro_invocations/empty.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fempty.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: []\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "c4d577269c6f0a2e82195806779bc1424cc4cf3b", "filename": "tests/target/skip_macro_invocations/name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fname.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should skip this invocation\n+items!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+renamed_items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "7ab1440395c32b074a97a99d0b08001dbd6ef814", "filename": "tests/target/skip_macro_invocations/name_unknown.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fname_unknown.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"unknown\"]\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "c6b41ff93d79dea68e22697b779bb92f2e1a57b9", "filename": "tests/target/skip_macro_invocations/names.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fnames.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-skip_macro_invocations: [\"foo\",\"bar\"]\n+\n+// Should skip this invocation\n+foo!(\n+        const _: u8 = 0;\n+);\n+\n+// Should skip this invocation\n+bar!(\n+        const _: u8 = 0;\n+);\n+\n+// Should not skip this invocation\n+baz!(\n+    const _: u8 = 0;\n+);"}, {"sha": "6e372c726952ad614c6e7740a0fbfdba1aa8a0b6", "filename": "tests/target/skip_macro_invocations/path_qualified_invocation_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_invocation_mismatch.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"items\"]\n+\n+// Should not skip this invocation\n+self::items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "9398918a9e11e23e1f6736ca2e1d1e5285d3c157", "filename": "tests/target/skip_macro_invocations/path_qualified_match.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_match.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should skip this invocation\n+self::items!(\n+        const _: u8 = 0;\n+);"}, {"sha": "aa57a2a655c4a722a1dda946a9b8755806739dfe", "filename": "tests/target/skip_macro_invocations/path_qualified_name_mismatch.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fpath_qualified_name_mismatch.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-skip_macro_invocations: [\"self::items\"]\n+\n+// Should not skip this invocation\n+items!(\n+    const _: u8 = 0;\n+);"}, {"sha": "799dd8c08af150ca99b49acc0f7ecf68eafdb0a0", "filename": "tests/target/skip_macro_invocations/use_alias_examples.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c240f3a6b3f0b7f91113dc999217f40f029a2776/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_macro_invocations%2Fuse_alias_examples.rs?ref=c240f3a6b3f0b7f91113dc999217f40f029a2776", "patch": "@@ -0,0 +1,32 @@\n+// rustfmt-skip_macro_invocations: [\"aaa\",\"ccc\"]\n+\n+// These tests demonstrate a realistic use case with use aliases.\n+// The use statements should not impact functionality in any way.\n+\n+use crate::{aaa, bbb, ddd};\n+\n+// No use alias, invocation in list\n+// Should skip this invocation\n+aaa!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation in list\n+// Should skip this invocation\n+use crate::bbb as ccc;\n+ccc!(\n+        const _: u8 = 0;\n+);\n+\n+// Use alias, invocation not in list\n+// Should not skip this invocation\n+use crate::ddd as eee;\n+eee!(\n+    const _: u8 = 0;\n+);\n+\n+// No use alias, invocation not in list\n+// Should not skip this invocation\n+fff!(\n+    const _: u8 = 0;\n+);"}]}