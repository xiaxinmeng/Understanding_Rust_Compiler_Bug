{"sha": "234fa908788f098b12c2f54181b6133f355fa07e", "node_id": "C_kwDOAAsO6NoAKDIzNGZhOTA4Nzg4ZjA5OGIxMmMyZjU0MTgxYjYxMzNmMzU1ZmEwN2U", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:34Z"}, "message": "Rollup merge of #88780 - orlp:int-abs-diff, r=m-ou-se\n\nAdded abs_diff for integer types.\n\nCloses https://github.com/rust-lang/rust/issues/62111.", "tree": {"sha": "66716de20c4d5c01de6c46dd6d6b7ebce69ec555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66716de20c4d5c01de6c46dd6d6b7ebce69ec555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/234fa908788f098b12c2f54181b6133f355fa07e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9CyCRBK7hj4Ov3rIwAA4EIIAILqnRtjsjaSwSwq+HQKWYy7\nukqpVtVVWmwqaB+8BiVkwY/YOmu5mURx/z9Eu7g51pYXRGRvOXsk2GdHBqxaBmYQ\n8ZlVg6rr6y0qsGORAumQHnFx4jSxjIaYS2Nxf8lIuqqoa0lxI7Bd5m5Qqp9qdQjZ\n3VagzhgfkGVUeMrSmUEQHAwKmQIbCncNLAR+qk3JbCU098I3MuJkC4hA5ORTyV0C\nBI0J8dv/1wl/MdzXYorqU0Yx0CV4UMvFWIEuTszfU3uzBjYgfAO9lzZeN4z/EluU\n06JK5R9fMxEPY/0YAjrHQDnNjCUHMBBXq0GPV0ahcoUS4r9XTmwFef49wsEzS8Y=\n=7RpZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 66716de20c4d5c01de6c46dd6d6b7ebce69ec555\nparent 4f6afee4e58afcdf14f49173f52e7ce035a7ceab\nparent 6dd6e7c002bae653a3db236e2c0d5ec25f8810b5\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407154 -0700\ncommitter GitHub <noreply@github.com> 1633407154 -0700\n\nRollup merge of #88780 - orlp:int-abs-diff, r=m-ou-se\n\nAdded abs_diff for integer types.\n\nCloses https://github.com/rust-lang/rust/issues/62111.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/234fa908788f098b12c2f54181b6133f355fa07e", "html_url": "https://github.com/rust-lang/rust/commit/234fa908788f098b12c2f54181b6133f355fa07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/234fa908788f098b12c2f54181b6133f355fa07e/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6afee4e58afcdf14f49173f52e7ce035a7ceab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6afee4e58afcdf14f49173f52e7ce035a7ceab", "html_url": "https://github.com/rust-lang/rust/commit/4f6afee4e58afcdf14f49173f52e7ce035a7ceab"}, {"sha": "6dd6e7c002bae653a3db236e2c0d5ec25f8810b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd6e7c002bae653a3db236e2c0d5ec25f8810b5", "html_url": "https://github.com/rust-lang/rust/commit/6dd6e7c002bae653a3db236e2c0d5ec25f8810b5"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "f1dcdf2c1aa04d2c27b4e0445c73259a97217cc4", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/234fa908788f098b12c2f54181b6133f355fa07e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234fa908788f098b12c2f54181b6133f355fa07e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=234fa908788f098b12c2f54181b6133f355fa07e", "patch": "@@ -2235,6 +2235,46 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// This function always returns the correct answer without overflow or\n+        /// panics by returning an unsigned integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(80), 180\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(-120), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n+            if self < other {\n+                // Converting a non-negative x from signed to unsigned by using\n+                // `x as U` is left unchanged, but a negative x is converted\n+                // to value x + 2^N. Thus if `s` and `o` are binary variables\n+                // respectively indicating whether `self` and `other` are\n+                // negative, we are computing the mathematical value:\n+                //\n+                //    (other + o*2^N) - (self + s*2^N)    mod  2^N\n+                //    other - self + (o-s)*2^N            mod  2^N\n+                //    other - self                        mod  2^N\n+                //\n+                // Finally, taking the mod 2^N of the mathematical value of\n+                // `other - self` does not change it as it already is\n+                // in the range [0, 2^N).\n+                (other as $UnsignedT).wrapping_sub(self as $UnsignedT)\n+            } else {\n+                (self as $UnsignedT).wrapping_sub(other as $UnsignedT)\n+            }\n+        }\n+\n         /// Returns a number representing sign of `self`.\n         ///\n         ///  - `0` if the number is zero"}, {"sha": "7ef8ea23b50281eba60f2ca568d4d2297df45fc3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/234fa908788f098b12c2f54181b6133f355fa07e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/234fa908788f098b12c2f54181b6133f355fa07e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=234fa908788f098b12c2f54181b6133f355fa07e", "patch": "@@ -1490,6 +1490,33 @@ macro_rules! uint_impl {\n             (c, b | d)\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($SelfT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> Self {\n+            if mem::size_of::<Self>() == 1 {\n+                // Trick LLVM into generating the psadbw instruction when SSE2\n+                // is available and this function is autovectorized for u8's.\n+                (self as i32).wrapping_sub(other as i32).abs() as Self\n+            } else {\n+                if self < other {\n+                    other - self\n+                } else {\n+                    self - other\n+                }\n+            }\n+        }\n+\n         /// Calculates the multiplication of `self` and `rhs`.\n         ///\n         /// Returns a tuple of the multiplication along with a boolean"}]}