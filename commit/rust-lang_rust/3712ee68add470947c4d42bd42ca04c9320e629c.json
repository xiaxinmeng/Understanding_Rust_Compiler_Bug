{"sha": "3712ee68add470947c4d42bd42ca04c9320e629c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTJlZTY4YWRkNDcwOTQ3YzRkNDJiZDQyY2EwNGM5MzIwZTYyOWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T21:32:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T21:34:32Z"}, "message": "Sketch of wiring typeck up to creader.", "tree": {"sha": "102c06a7e8f6737476d3f0ac650f890002ec62ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102c06a7e8f6737476d3f0ac650f890002ec62ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3712ee68add470947c4d42bd42ca04c9320e629c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3712ee68add470947c4d42bd42ca04c9320e629c", "html_url": "https://github.com/rust-lang/rust/commit/3712ee68add470947c4d42bd42ca04c9320e629c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3712ee68add470947c4d42bd42ca04c9320e629c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "739c4aedf1efd9df5abcad097a3137ed1025c556", "url": "https://api.github.com/repos/rust-lang/rust/commits/739c4aedf1efd9df5abcad097a3137ed1025c556", "html_url": "https://github.com/rust-lang/rust/commit/739c4aedf1efd9df5abcad097a3137ed1025c556"}], "stats": {"total": 102, "additions": 70, "deletions": 32}, "files": [{"sha": "72ace8c3c2b92e910832e47c9f4a812354c9d1f4", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=3712ee68add470947c4d42bd42ca04c9320e629c", "patch": "@@ -114,8 +114,9 @@ impure fn main(vec[str] args) {\n                           float_type = common.ty_f64 );\n \n     auto crate_cache = common.new_int_hash[session.crate_metadata]();\n+    auto target_crate_num = 0;\n+    auto sess = session.session(target_crate_num, target_cfg, crate_cache);\n \n-    auto sess = session.session(target_cfg, crate_cache);\n     let option.t[str] input_file = none[str];\n     let option.t[str] output_file = none[str];\n     let vec[str] library_search_paths = vec();"}, {"sha": "6c5fc88541719a2dd265267fad2d7d7de7b52d02", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=3712ee68add470947c4d42bd42ca04c9320e629c", "patch": "@@ -1,3 +1,4 @@\n+import front.ast;\n import util.common.span;\n import util.common.ty_mach;\n import std._uint;\n@@ -23,12 +24,17 @@ type cfg = rec(os os,\n \n type crate_metadata = vec[u8];\n \n-obj session(cfg targ, map.hashmap[int, crate_metadata] crates) {\n+obj session(ast.crate_num cnum, cfg targ,\n+            map.hashmap[int, crate_metadata] crates) {\n \n     fn get_targ_cfg() -> cfg {\n         ret targ;\n     }\n \n+    fn get_targ_crate_num() -> ast.crate_num {\n+        ret cnum;\n+    }\n+\n     fn span_err(span sp, str msg) {\n         log #fmt(\"%s:%u:%u:%u:%u: error: %s\",\n                  sp.filename,"}, {"sha": "ec5e7110fedb7bf4b2a59a5b4ee8f92ab31433ad", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=3712ee68add470947c4d42bd42ca04c9320e629c", "patch": "@@ -9,6 +9,7 @@ import lib.llvm.mk_object_file;\n import lib.llvm.mk_section_iter;\n import middle.fold;\n import middle.ty;\n+import middle.typeck;\n import back.x86;\n import util.common;\n import util.common.span;\n@@ -285,6 +286,11 @@ fn lookup_def(session.session sess, &span sp, int cnum, vec[ast.ident] path)\n   fail;\n }\n \n+fn get_type(session.session sess, ast.def_id def) -> typeck.ty_and_params {\n+    // FIXME: fill in.\n+    fail;\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "51f8253a08cba370962c6dbd3ebe7ef4a2bf4f92", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3712ee68add470947c4d42bd42ca04c9320e629c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3712ee68add470947c4d42bd42ca04c9320e629c", "patch": "@@ -1,6 +1,7 @@\n import front.ast;\n import front.ast.ann;\n import front.ast.mutability;\n+import front.creader;\n import middle.fold;\n import driver.session;\n import util.common;\n@@ -404,6 +405,12 @@ fn actual_type(@ty.t t, @ast.item item) -> @ty.t {\n // ast_ty_to_ty.\n fn ast_ty_to_ty_crate(@crate_ctxt ccx, &@ast.ty ast_ty) -> @ty.t {\n     fn getter(@crate_ctxt ccx, ast.def_id id) -> ty_and_params {\n+\n+        if (id._0 != ccx.sess.get_targ_crate_num()) {\n+            // This is a type we need to load in from the crate reader.\n+            ret creader.get_type(ccx.sess, id);\n+        }\n+\n         check (ccx.item_items.contains_key(id));\n         check (ccx.item_types.contains_key(id));\n         auto it = ccx.item_items.get(id);\n@@ -500,21 +507,29 @@ fn ty_of_native_fn_decl(@ty_item_table id_to_ty_item,\n fn collect_item_types(session.session sess, @ast.crate crate)\n     -> tup(@ast.crate, @ty_table, @ty_item_table, @ty_param_table) {\n \n-    fn getter(@ty_item_table id_to_ty_item,\n+    fn getter(session.session sess,\n+              @ty_item_table id_to_ty_item,\n               @ty_table item_to_ty,\n               ast.def_id id) -> ty_and_params {\n+\n+        if (id._0 != sess.get_targ_crate_num()) {\n+            // This is a type we need to load in from the crate reader.\n+            ret creader.get_type(sess, id);\n+        }\n+\n         check (id_to_ty_item.contains_key(id));\n+\n         auto it = id_to_ty_item.get(id);\n         auto ty;\n         auto params;\n         alt (it) {\n             case (any_item_rust(?item)) {\n-                ty = ty_of_item(id_to_ty_item, item_to_ty, item);\n+                ty = ty_of_item(sess, id_to_ty_item, item_to_ty, item);\n                 ty = actual_type(ty, item);\n                 params = ty_params_of_item(item);\n             }\n             case (any_item_native(?native_item, ?abi)) {\n-                ty = ty_of_native_item(id_to_ty_item, item_to_ty,\n+                ty = ty_of_native_item(sess, id_to_ty_item, item_to_ty,\n                                        native_item, abi);\n                 params = ty_params_of_native_item(native_item);\n             }\n@@ -523,30 +538,33 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         ret rec(params = params, ty = ty);\n     }\n \n-    fn ty_of_arg(@ty_item_table id_to_ty_item,\n+    fn ty_of_arg(session.session sess,\n+                 @ty_item_table id_to_ty_item,\n                  @ty_table item_to_ty,\n                  &ast.arg a) -> arg {\n-        auto f = bind getter(id_to_ty_item, item_to_ty, _);\n+        auto f = bind getter(sess, id_to_ty_item, item_to_ty, _);\n         ret rec(mode=a.mode, ty=ast_ty_to_ty(f, a.ty));\n     }\n \n-    fn ty_of_method(@ty_item_table id_to_ty_item,\n+    fn ty_of_method(session.session sess,\n+                    @ty_item_table id_to_ty_item,\n                     @ty_table item_to_ty,\n                     &@ast.method m) -> method {\n-        auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+        auto get = bind getter(sess, id_to_ty_item, item_to_ty, _);\n         auto convert = bind ast_ty_to_ty(get, _);\n-        auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n+        auto f = bind ty_of_arg(sess, id_to_ty_item, item_to_ty, _);\n         auto inputs = _vec.map[ast.arg,arg](f, m.node.meth.decl.inputs);\n         auto output = convert(m.node.meth.decl.output);\n         ret rec(proto=m.node.meth.proto, ident=m.node.ident,\n                 inputs=inputs, output=output);\n     }\n \n-    fn ty_of_obj(@ty_item_table id_to_ty_item,\n+    fn ty_of_obj(session.session sess,\n+                 @ty_item_table id_to_ty_item,\n                  @ty_table item_to_ty,\n                  &ast.ident id,\n                  &ast._obj obj_info) -> @ty.t {\n-        auto f = bind ty_of_method(id_to_ty_item, item_to_ty, _);\n+        auto f = bind ty_of_method(sess, id_to_ty_item, item_to_ty, _);\n         auto methods =\n             _vec.map[@ast.method,method](f, obj_info.methods);\n \n@@ -555,26 +573,29 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         ret t_obj;\n     }\n \n-    fn ty_of_obj_ctor(@ty_item_table id_to_ty_item,\n+    fn ty_of_obj_ctor(session.session sess,\n+                      @ty_item_table id_to_ty_item,\n                       @ty_table item_to_ty,\n                       &ast.ident id,\n                       &ast._obj obj_info) -> @ty.t {\n-        auto t_obj = ty_of_obj(id_to_ty_item, item_to_ty, id, obj_info);\n+        auto t_obj = ty_of_obj(sess, id_to_ty_item, item_to_ty,\n+                               id, obj_info);\n         let vec[arg] t_inputs = vec();\n         for (ast.obj_field f in obj_info.fields) {\n-            auto g = bind getter(id_to_ty_item, item_to_ty, _);\n+            auto g = bind getter(sess, id_to_ty_item, item_to_ty, _);\n             auto t_field = ast_ty_to_ty(g, f.ty);\n             _vec.push[arg](t_inputs, rec(mode=ast.alias, ty=t_field));\n         }\n         auto t_fn = plain_ty(ty.ty_fn(ast.proto_fn, t_inputs, t_obj));\n         ret t_fn;\n     }\n \n-    fn ty_of_item(@ty_item_table id_to_ty_item,\n+    fn ty_of_item(session.session sess,\n+                  @ty_item_table id_to_ty_item,\n                   @ty_table item_to_ty,\n                   @ast.item it) -> @ty.t {\n \n-        auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+        auto get = bind getter(sess, id_to_ty_item, item_to_ty, _);\n         auto convert = bind ast_ty_to_ty(get, _);\n \n         alt (it.node) {\n@@ -584,14 +605,15 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             }\n \n             case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n-                auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n-                ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert, f,\n-                                  fn_info.decl, fn_info.proto, def_id);\n+                auto f = bind ty_of_arg(sess, id_to_ty_item, item_to_ty, _);\n+                ret ty_of_fn_decl(id_to_ty_item, item_to_ty, convert,\n+                                  f, fn_info.decl, fn_info.proto, def_id);\n             }\n \n             case (ast.item_obj(?ident, ?obj_info, _, ?def_id, _)) {\n                 // TODO: handle ty-params\n-                auto t_ctor = ty_of_obj_ctor(id_to_ty_item,\n+                auto t_ctor = ty_of_obj_ctor(sess,\n+                                             id_to_ty_item,\n                                              item_to_ty,\n                                              ident,\n                                              obj_info);\n@@ -628,18 +650,19 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         }\n     }\n \n-    fn ty_of_native_item(@ty_item_table id_to_ty_item,\n+    fn ty_of_native_item(session.session sess,\n+                         @ty_item_table id_to_ty_item,\n                          @ty_table item_to_ty,\n                          @ast.native_item it,\n                          ast.native_abi abi) -> @ty.t {\n         alt (it.node) {\n             case (ast.native_item_fn(?ident, ?lname, ?fn_decl,\n                                      ?params, ?def_id, _)) {\n-                auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+                auto get = bind getter(sess, id_to_ty_item, item_to_ty, _);\n                 auto convert = bind ast_ty_to_ty(get, _);\n-                auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n-                ret ty_of_native_fn_decl(id_to_ty_item, item_to_ty, convert,\n-                                         f, fn_decl, abi, def_id);\n+                auto f = bind ty_of_arg(sess, id_to_ty_item, item_to_ty, _);\n+                ret ty_of_native_fn_decl(id_to_ty_item, item_to_ty,\n+                                         convert, f, fn_decl, abi, def_id);\n             }\n             case (ast.native_item_ty(_, ?def_id)) {\n                 if (item_to_ty.contains_key(def_id)) {\n@@ -653,7 +676,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n         }\n     }\n \n-    fn get_tag_variant_types(@ty_item_table id_to_ty_item,\n+    fn get_tag_variant_types(session.session sess,\n+                             @ty_item_table id_to_ty_item,\n                              @ty_table item_to_ty,\n                              &ast.def_id tag_id,\n                              &vec[ast.variant] variants,\n@@ -676,7 +700,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             } else {\n                 // As above, tell ast_ty_to_ty() that trans_ty_item_to_ty()\n                 // should be called to resolve named types.\n-                auto f = bind getter(id_to_ty_item, item_to_ty, _);\n+                auto f = bind getter(sess, id_to_ty_item, item_to_ty, _);\n \n                 let vec[arg] args = vec();\n                 for (ast.variant_arg va in variant.args) {\n@@ -778,14 +802,14 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (_) {\n                 // This call populates the ty_table with the converted type of\n                 // the item in passing; we don't need to do anything else.\n-                ty_of_item(e.id_to_ty_item, e.item_to_ty, i);\n+                ty_of_item(e.sess, e.id_to_ty_item, e.item_to_ty, i);\n             }\n         }\n         ret @rec(abi=abi with *e);\n     }\n \n     fn convert_native(&@env e, @ast.native_item i) -> @env {\n-        ty_of_native_item(e.id_to_ty_item, e.item_to_ty, i, e.abi);\n+        ty_of_native_item(e.sess, e.id_to_ty_item, e.item_to_ty, i, e.abi);\n         ret e;\n     }\n \n@@ -872,7 +896,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             m = @rec(node=m_ with *meth);\n             _vec.push[@ast.method](methods, m);\n         }\n-        auto g = bind getter(e.id_to_ty_item, e.item_to_ty, _);\n+        auto g = bind getter(e.sess, e.id_to_ty_item, e.item_to_ty, _);\n         for (ast.obj_field fld in ob.fields) {\n             let @ty.t fty = ast_ty_to_ty(g, fld.ty);\n             let ast.obj_field f = rec(\n@@ -908,7 +932,8 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                      ast.def_id id) -> @ast.item {\n         collect_ty_params(e, id, ty_params);\n \n-        auto variants_t = get_tag_variant_types(e.id_to_ty_item,\n+        auto variants_t = get_tag_variant_types(e.sess,\n+                                                e.id_to_ty_item,\n                                                 e.item_to_ty,\n                                                 id,\n                                                 variants,"}]}