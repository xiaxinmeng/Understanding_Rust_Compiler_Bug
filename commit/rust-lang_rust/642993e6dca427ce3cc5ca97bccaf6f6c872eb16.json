{"sha": "642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0Mjk5M2U2ZGNhNDI3Y2UzY2M1Y2E5N2JjY2FmNmY2Yzg3MmViMTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-29T23:25:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T23:39:24Z"}, "message": "Update tests wrt. bind_by_by_move_pattern_guards stabilization.", "tree": {"sha": "4f31c5dead1e5b6f5eae380f98bde430a8530f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f31c5dead1e5b6f5eae380f98bde430a8530f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "html_url": "https://github.com/rust-lang/rust/commit/642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0356813b27262bf9ceec5f0fa48302262d501cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0356813b27262bf9ceec5f0fa48302262d501cd4", "html_url": "https://github.com/rust-lang/rust/commit/0356813b27262bf9ceec5f0fa48302262d501cd4"}], "stats": {"total": 253, "additions": 35, "deletions": 218}, "files": [{"sha": "844711acbf875c1ff4c85ac97f98357eb1a4b98d", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1989,7 +1989,6 @@ When matching on a variable it cannot be mutated in the match guards, as this\n could cause the match to be non-exhaustive:\n \n ```compile_fail,E0510\n-#![feature(bind_by_move_pattern_guards)]\n let mut x = Some(0);\n match x {\n     None => (),"}, {"sha": "c898d3a6f168c8e86113ae83bf20369b8fa5d8fe", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -8,8 +8,6 @@\n //   all of the bindings for that scope.\n // * No drop flags are used.\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n-\n fn complicated_match(cond: bool, items: (bool, bool, String)) -> i32 {\n     match items {\n         (false, a, s) | (a, false, s) if if cond { return 3 } else { a } => 1,"}, {"sha": "bc9b3a8de4ef5d41416773358b04214960f2989d", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,13 +0,0 @@\n-use std::sync::mpsc::channel;\n-\n-fn main() {\n-    let (tx, rx) = channel();\n-    let x = Some(rx);\n-    tx.send(false);\n-    match x {\n-        Some(z) if z.recv().unwrap() => { panic!() },\n-            //~^ ERROR cannot bind by-move into a pattern guard\n-        Some(z) => { assert!(!z.recv().unwrap()); },\n-        None => panic!()\n-    }\n-}"}, {"sha": "c5f0256c2c92f5b10ce791bbe912f45ad2b3a5d3", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/bind-by-move-no-guards.rs:8:14\n-   |\n-LL |         Some(z) if z.recv().unwrap() => { panic!() },\n-   |              ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "9cbceeb945ccc631f4f6fca7c8afa5d9ca5de926", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -8,12 +8,9 @@ fn foo() -> isize {\n     let mut x = Enum::A(&mut n);\n     match x {\n         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-        //~^ ERROR cannot assign in a pattern guard\n-        //~| ERROR cannot assign `x` in match guard\n+        //~^ ERROR cannot assign `x` in match guard\n         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-        //~^ ERROR cannot mutably borrow in a pattern guard\n-        //~| ERROR cannot assign in a pattern guard\n-        //~| ERROR cannot mutably borrow `x` in match guard\n+        //~^ ERROR cannot mutably borrow `x` in match guard\n         Enum::A(p) => *p,\n         Enum::B(_) => 2,\n     }"}, {"sha": "6d05e97252d928df4fdb633518281dbc61331833", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,23 +1,3 @@\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n-   |\n-LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n-error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:38\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                      ^ borrowed mutably in pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:41\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n error[E0510]: cannot assign `x` in match guard\n   --> $DIR/borrowck-mutate-in-guard.rs:10:25\n    |\n@@ -27,15 +7,14 @@ LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:33\n+  --> $DIR/borrowck-mutate-in-guard.rs:12:33\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                 ^^^^^^ cannot mutably borrow\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0301, E0302, E0510.\n-For more information about an error, try `rustc --explain E0301`.\n+For more information about this error, try `rustc --explain E0510`."}, {"sha": "c87ef4cb8541fca030d64805d772963470c0eb67", "filename": "src/test/ui/error-codes/E0008.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match Some(\"hi\".to_string()) {\n-        Some(s) if s.len() == 0 => {},\n-        //~^ ERROR E0008\n-        _ => {},\n-    }\n-}"}, {"sha": "6b45439c4b5877ceadbc7c9cdb715da89ad50241", "filename": "src/test/ui/error-codes/E0008.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/E0008.rs:3:14\n-   |\n-LL |         Some(s) if s.len() == 0 => {},\n-   |              ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "0df04036bb7677526f8bdf79d0c6a94f8ddd0d8c", "filename": "src/test/ui/error-codes/E0301.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     match Some(()) {\n         None => { },\n-        option if option.take().is_none() => {}, //~ ERROR E0301\n+        option if option.take().is_none() => {},\n         Some(_) => { } //~^ ERROR E0596\n     }\n }"}, {"sha": "661b86e3894850a64c13617efa4f079bf79ddef8", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,11 +1,3 @@\n-error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/E0301.rs:4:19\n-   |\n-LL |         option if option.take().is_none() => {},\n-   |                   ^^^^^^ borrowed mutably in pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n error[E0596]: cannot borrow `option` as mutable, as it is immutable for the pattern guard\n   --> $DIR/E0301.rs:4:19\n    |\n@@ -14,7 +6,6 @@ LL |         option if option.take().is_none() => {},\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0301, E0596.\n-For more information about an error, try `rustc --explain E0301`.\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "28a1bc31bea7b72b307c96fbc1741bc0235ce94a", "filename": "src/test/ui/error-codes/E0302.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     match Some(()) {\n         None => { },\n-        option if { option = None; false } => { }, //~ ERROR E0302\n+        option if { option = None; false } => { },\n         //~^ ERROR cannot assign to `option`, as it is immutable for the pattern guard\n         Some(_) => { }\n     }"}, {"sha": "5854772f1d34af7d46d21175af520ca5ac4169e4", "filename": "src/test/ui/error-codes/E0302.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,9 +1,3 @@\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/E0302.rs:4:21\n-   |\n-LL |         option if { option = None; false } => { },\n-   |                     ^^^^^^^^^^^^^ assignment in pattern guard\n-\n error[E0594]: cannot assign to `option`, as it is immutable for the pattern guard\n   --> $DIR/E0302.rs:4:21\n    |\n@@ -12,6 +6,5 @@ LL |         option if { option = None; false } => { },\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0302`."}, {"sha": "7253d35ed2d4fe9e6c04157057e19c3821a0f2a3", "filename": "src/test/ui/issues/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -5,8 +5,6 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn main() {\n     rust_issue_24535();\n     rfcs_issue_1006_1();"}, {"sha": "82d8b9e9ed977d9b28f558d4b894a4ecd9bba6aa", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -5,8 +5,6 @@\n // reject it. But I want to make sure that we continue to reject it\n // (under NLL) even when that conservaive check goes away.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn main() {\n     let mut b = &mut true;\n     match b {"}, {"sha": "f0264b56ea569fdd8fe252fe63f7205d734d59e2", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:12:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                   - mutable borrow occurs due to use of `r` in closure"}, {"sha": "52120360be71e68816502a6e0431d390f61464a4", "filename": "src/test/ui/match/match-ref-mut-stability.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n // Test that z always point to the same temporary.\n fn referent_stability() {\n     let p;"}, {"sha": "2e6d675fb641e7e940ef450fc06a72ae6401a239", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,8 +1,6 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n     // x should always be initialized, as the only way to reach the arm is"}, {"sha": "06fe564ac69e3b371dce57af0b63107648206956", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,11 +1,11 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:23:13\n+  --> $DIR/match-cfg-fake-edges.rs:21:13\n    |\n LL |             x;\n    |             ^ use of possibly-uninitialized `x`\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:37:13\n+  --> $DIR/match-cfg-fake-edges.rs:35:13\n    |\n LL |     let x = String::new();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "81ae19ebf8a7210106c7403635ce3a5e8d9bfa5c", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -5,8 +5,6 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn ok_mutation_in_guard(mut q: i32) {\n     match q {\n         // OK, mutation doesn't change which patterns g matches"}, {"sha": "48e3a7c6993182bf890740347a800a93b8ff71f3", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:57:13\n+  --> $DIR/match-guards-partially-borrow.rs:55:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n@@ -8,7 +8,7 @@ LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:69:13\n+  --> $DIR/match-guards-partially-borrow.rs:67:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +17,7 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:93:13\n+  --> $DIR/match-guards-partially-borrow.rs:91:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +26,7 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:107:22\n+  --> $DIR/match-guards-partially-borrow.rs:105:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +35,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:119:13\n+  --> $DIR/match-guards-partially-borrow.rs:117:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -46,7 +46,7 @@ LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:130:13\n+  --> $DIR/match-guards-partially-borrow.rs:128:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +55,7 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:141:13\n+  --> $DIR/match-guards-partially-borrow.rs:139:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +64,7 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:153:13\n+  --> $DIR/match-guards-partially-borrow.rs:151:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,7 +73,7 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:164:13\n+  --> $DIR/match-guards-partially-borrow.rs:162:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard"}, {"sha": "40a47ce45fbb57e3c041ace048a7d99c23fff698", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -4,8 +4,6 @@\n \n // run-pass\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n use std::sync::mpsc::channel;\n \n fn main() {"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2015.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:36:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2018.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:36:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "34e8b0e14399eb9f4a784143fd7f0819022430fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_feature_nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "34e8b0e14399eb9f4a784143fd7f0819022430fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_znll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7a7b1c253528f68754ed66d9a8c35fe929a1661c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/feature-gate.rs:28:16\n-   |\n-LL |         A { a: v } if *v == 42 => v,\n-   |                ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "69fce0bc775f7e6e6b40c8b151ab950d35e928fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0356813b27262bf9ceec5f0fa48302262d501cd4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs?ref=0356813b27262bf9ceec5f0fa48302262d501cd4", "patch": "@@ -1,40 +0,0 @@\n-// Check that pattern-guards with move-bound variables is only allowed\n-// with the appropriate set of feature gates. (Note that we require\n-// the code to opt into MIR-borrowck in *some* way before the feature\n-// will work; we use the revision system here to enumerate a number of\n-// ways that opt-in could occur.)\n-\n-// gate-test-bind_by_move_pattern_guards\n-\n-// revisions: no_gate gate_and_2015 gate_and_2018\n-\n-// (We're already testing NLL behavior quite explicitly, no need for compare-mode=nll.)\n-// ignore-compare-mode-nll\n-\n-#![feature(rustc_attrs)]\n-\n-#![cfg_attr(gate_and_2015, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_2018, feature(bind_by_move_pattern_guards))]\n-\n-//[gate_and_2015] edition:2015\n-//[gate_and_2018] edition:2018\n-\n-struct A { a: Box<i32> }\n-\n-fn foo(n: i32) {\n-    let x = A { a: Box::new(n) };\n-    let _y = match x {\n-\n-        A { a: v } if *v == 42 => v,\n-        //[no_gate]~^ ERROR cannot bind by-move into a pattern guard\n-\n-        _ => Box::new(0)\n-    };\n-}\n-\n-#[rustc_error]\n-fn main() {\n-    foo(107)\n-}\n-//[gate_and_2015]~^^^ ERROR compilation successful\n-//[gate_and_2018]~^^^^ ERROR compilation successful"}, {"sha": "3161d6fbbe647c55fd74534713f369bf58b99625", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/former-E0008-now-pass.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -0,0 +1,11 @@\n+// This test used to emit E0008 but now passed since `bind_by_move_pattern_guards`\n+// have been stabilized.\n+\n+// check-pass\n+\n+fn main() {\n+    match Some(\"hi\".to_string()) {\n+        Some(s) if s.len() == 0 => {},\n+        _ => {},\n+    }\n+}"}, {"sha": "b716fc870e071b3ab41cbe7cda725a771fb4c3c5", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n // run-pass\n \n struct A { a: Box<i32> }"}, {"sha": "d1f685f3e7a6da77d23bba0ba9d913d387fd6f70", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n enum VecWrapper { A(Vec<i32>) }\n \n fn foo(x: VecWrapper) -> usize {"}, {"sha": "7becd013249d471264a1209fc2feb4715735868f", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:5:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "571f51c9001202ad99efdfd95832249f635d0dab", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n struct A { a: Box<i32> }\n \n fn foo(n: i32) {"}, {"sha": "b93e72190680dbfbaec9ef11c58641c298a286ca", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/642993e6dca427ce3cc5ca97bccaf6f6c872eb16/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=642993e6dca427ce3cc5ca97bccaf6f6c872eb16", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:6:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}]}