{"sha": "20a8412e09e2883489736b4ae3dc138f243d1a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYTg0MTJlMDllMjg4MzQ4OTczNmI0YWUzZGMxMzhmMjQzZDFhMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-28T01:06:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-28T01:06:51Z"}, "message": "Auto merge of #27956 - withoutboats:extend_string, r=alexcrichton\n\nIf you have an `Iterator<Item=String>` (say because those items were generated using `.to_string()` or similarly), borrow semantics do not permit you map that to an `Iterator<&'a str>`. These two implementations close a small gap in the `String` API.\r\n\r\nAt the same time I've also made the names of the parameters to `String`'s `Extend` and `FromIterator` implementations consistent.", "tree": {"sha": "356d1f2da5de0ed43f7cca3f7be522236fa1b3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356d1f2da5de0ed43f7cca3f7be522236fa1b3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a8412e09e2883489736b4ae3dc138f243d1a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a8412e09e2883489736b4ae3dc138f243d1a17", "html_url": "https://github.com/rust-lang/rust/commit/20a8412e09e2883489736b4ae3dc138f243d1a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a8412e09e2883489736b4ae3dc138f243d1a17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dba06aeee28e9ed6a1b9918a91cbef242af53d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dba06aeee28e9ed6a1b9918a91cbef242af53d3", "html_url": "https://github.com/rust-lang/rust/commit/8dba06aeee28e9ed6a1b9918a91cbef242af53d3"}, {"sha": "8af543af5d4588a5b9d32fd01e8888fcf3e258aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af543af5d4588a5b9d32fd01e8888fcf3e258aa", "html_url": "https://github.com/rust-lang/rust/commit/8af543af5d4588a5b9d32fd01e8888fcf3e258aa"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "5109261a5049079e3f173d9eceb8f9485c2497c4", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/20a8412e09e2883489736b4ae3dc138f243d1a17/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a8412e09e2883489736b4ae3dc138f243d1a17/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=20a8412e09e2883489736b4ae3dc138f243d1a17", "patch": "@@ -768,18 +768,27 @@ impl fmt::Display for FromUtf16Error {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<char> for String {\n-    fn from_iter<I: IntoIterator<Item=char>>(iter: I) -> String {\n+    fn from_iter<I: IntoIterator<Item=char>>(iterable: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iter);\n+        buf.extend(iterable);\n         buf\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> FromIterator<&'a str> for String {\n-    fn from_iter<I: IntoIterator<Item=&'a str>>(iter: I) -> String {\n+    fn from_iter<I: IntoIterator<Item=&'a str>>(iterable: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iter);\n+        buf.extend(iterable);\n+        buf\n+    }\n+}\n+\n+#[stable(feature = \"extend_string\", since = \"1.4.0\")]\n+impl FromIterator<String> for String {\n+    fn from_iter<I: IntoIterator<Item=String>>(iterable: I) -> String {\n+        let mut buf = String::new();\n+        buf.extend(iterable);\n         buf\n     }\n }\n@@ -798,8 +807,8 @@ impl Extend<char> for String {\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a> Extend<&'a char> for String {\n-    fn extend<I: IntoIterator<Item=&'a char>>(&mut self, iter: I) {\n-        self.extend(iter.into_iter().cloned());\n+    fn extend<I: IntoIterator<Item=&'a char>>(&mut self, iterable: I) {\n+        self.extend(iterable.into_iter().cloned());\n     }\n }\n \n@@ -812,6 +821,15 @@ impl<'a> Extend<&'a str> for String {\n     }\n }\n \n+#[stable(feature = \"extend_string\", since = \"1.4.0\")]\n+impl Extend<String> for String {\n+    fn extend<I: IntoIterator<Item=String>>(&mut self, iterable: I) {\n+        for s in iterable {\n+            self.push_str(&s)\n+        }\n+    }\n+}\n+\n /// A convenience impl that delegates to the impl for `&str`\n impl<'a, 'b> Pattern<'a> for &'b String {\n     type Searcher = <&'b str as Pattern<'a>>::Searcher;"}]}