{"sha": "21e9a1285de20f2aaad9b644655fb24f146f3a76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZTlhMTI4NWRlMjBmMmFhYWQ5YjY0NDY1NWZiMjRmMTQ2ZjNhNzY=", "commit": {"author": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2017-09-23T18:32:11Z"}, "committer": {"name": "Michael Recachinas", "email": "mgr3yp@virginia.edu", "date": "2017-09-23T18:32:11Z"}, "message": "Use span_lint_and_then as per feedback", "tree": {"sha": "0976f8336d85986a8df52bbca314b53f51e50373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0976f8336d85986a8df52bbca314b53f51e50373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21e9a1285de20f2aaad9b644655fb24f146f3a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21e9a1285de20f2aaad9b644655fb24f146f3a76", "html_url": "https://github.com/rust-lang/rust/commit/21e9a1285de20f2aaad9b644655fb24f146f3a76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21e9a1285de20f2aaad9b644655fb24f146f3a76/comments", "author": null, "committer": null, "parents": [{"sha": "bb40bd68a460b024a6141db290dccd51bdc7f747", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb40bd68a460b024a6141db290dccd51bdc7f747", "html_url": "https://github.com/rust-lang/rust/commit/bb40bd68a460b024a6141db290dccd51bdc7f747"}], "stats": {"total": 132, "additions": 106, "deletions": 26}, "files": [{"sha": "d8b056fc29a5238312e29cc28de349ace66fe72a", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 90, "deletions": 22, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/21e9a1285de20f2aaad9b644655fb24f146f3a76/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e9a1285de20f2aaad9b644655fb24f146f3a76/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=21e9a1285de20f2aaad9b644655fb24f146f3a76", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::span_help_and_lint;\n+use utils::{span_lint_and_then, snippet_opt};\n \n /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n ///\n@@ -45,6 +45,11 @@ impl LintPass for IntPlusOne {\n // x + 1 <= y\n // x <= y - 1\n \n+enum Side {\n+    LHS,\n+    RHS,\n+}\n+\n impl IntPlusOne {\n     #[allow(cast_sign_loss)]\n     fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n@@ -54,62 +59,125 @@ impl IntPlusOne {\n         false\n     }\n \n-    fn check_binop(&self, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> bool {\n+    fn check_binop(&self, cx: &EarlyContext, block: &Expr, binop: BinOpKind, lhs: &Expr, rhs: &Expr) -> Option<(bool, Option<String>)> {\n         match (binop, &lhs.node, &rhs.node) {\n             // case where `x - 1 >= ...` or `-1 + x >= ...`\n             (BinOpKind::Ge, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) => {\n                 match (lhskind.node, &lhslhs.node, &lhsrhs.node) {\n                     // `-1 + x`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => self.check_lit(lit, -1),\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS);\n+                        if self.check_lit(lit, -1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n                     // `x - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => self.check_lit(lit, 1),\n-                    _ => false\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    }\n+                    _ => ()\n                 }\n             },\n             // case where `... >= y + 1` or `... >= 1 + y`\n             (BinOpKind::Ge, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) if rhskind.node == BinOpKind::Add => {\n                 match (&rhslhs.node, &rhsrhs.node) {\n                     // `y + 1` and `1 + y`\n-                    (&ExprKind::Lit(ref lit), _)|(_, &ExprKind::Lit(ref lit)) => self.check_lit(lit, 1),\n-                    _ => false\n+                    (&ExprKind::Lit(ref lit), _) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n+                    (_, &ExprKind::Lit(ref lit)) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n+                    _ => ()\n                 }\n             },\n             // case where `x + 1 <= ...` or `1 + x <= ...`\n             (BinOpKind::Le, &ExprKind::Binary(ref lhskind, ref lhslhs, ref lhsrhs), _) if lhskind.node == BinOpKind::Add => {\n                 match (&lhslhs.node, &lhsrhs.node) {\n                     // `1 + x` and `x + 1`\n-                    (&ExprKind::Lit(ref lit), _)|(_, &ExprKind::Lit(ref lit)) => self.check_lit(lit, 1),\n-                    _ => false\n+                    (&ExprKind::Lit(ref lit), _) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, lhsrhs, rhs, Side::LHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n+                    (_, &ExprKind::Lit(ref lit)) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, lhslhs, rhs, Side::LHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n+                    _ => ()\n                 }\n             },\n             // case where `... >= y - 1` or `... >= -1 + y`\n             (BinOpKind::Le, _, &ExprKind::Binary(ref rhskind, ref rhslhs, ref rhsrhs)) => {\n                 match (rhskind.node, &rhslhs.node, &rhsrhs.node) {\n                     // `-1 + y`\n-                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => self.check_lit(lit, -1),\n+                    (BinOpKind::Add, &ExprKind::Lit(ref lit), _) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, rhsrhs, lhs, Side::RHS);\n+                        if self.check_lit(lit, -1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n                     // `y - 1`\n-                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => self.check_lit(lit, 1),\n-                    _ => false\n+                    (BinOpKind::Sub, _, &ExprKind::Lit(ref lit)) => {\n+                        let recommendation = self.generate_recommendation(cx, binop, rhslhs, lhs, Side::RHS);\n+                        if self.check_lit(lit, 1) {\n+                            self.emit_warning(cx, block, recommendation)\n+                        }\n+                    },\n+                    _ => ()\n                 }\n             },\n-            _ => false\n+            _ => ()\n         }\n     }\n \n+    fn generate_recommendation(&self, cx: &EarlyContext, binop: BinOpKind, node: &Expr, other_side: &Expr, side: Side) -> Option<String> {\n+        let binop_string = match binop {\n+            BinOpKind::Ge => \">\",\n+            BinOpKind::Le => \"<\",\n+            _ => return None\n+        };\n+        if let Some(snippet) = snippet_opt(cx, node.span) {\n+            if let Some(other_side_snippet) = snippet_opt(cx, other_side.span) {\n+                let rec = match side {\n+                    Side::LHS => Some(format!(\"{} {} {}\", snippet, binop_string, other_side_snippet)),\n+                    Side::RHS => Some(format!(\"{} {} {}\", other_side_snippet, binop_string, snippet)),\n+                };\n+                return rec;\n+            }\n+        }\n+        None\n+    }\n+\n+    fn emit_warning(&self, cx: &EarlyContext, block: &Expr, recommendation: Option<String>) {\n+        if let Some(rec) = recommendation {\n+            span_lint_and_then(cx,\n+                               INT_PLUS_ONE,\n+                               block.span,\n+                               \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n+                               |db| {\n+                db.span_suggestion(block.span, \"change `>= y + 1` to `> y` as shown\", rec);\n+            });\n+        }\n+    }\n }\n \n impl EarlyLintPass for IntPlusOne {\n     fn check_expr(&mut self, cx: &EarlyContext, item: &Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = item.node {\n-            if self.check_binop(kind.node, lhs, rhs) {\n-                span_help_and_lint(\n-                    cx,\n-                    INT_PLUS_ONE,\n-                    item.span,\n-                    \"Unnecessary `>= y + 1` or `x - 1 >=`\",\n-                    \"Consider reducing `x >= y + 1` or `x - 1 >= y` to `x > y`\",\n-                );\n-            }\n+            self.check_binop(cx, item, kind.node, lhs, rhs);\n         }\n     }\n }"}, {"sha": "6f69ba9d7146e3a1ab560fb9a08a6da70b9c3d0b", "filename": "tests/ui/int_plus_one.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/21e9a1285de20f2aaad9b644655fb24f146f3a76/tests%2Fui%2Fint_plus_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21e9a1285de20f2aaad9b644655fb24f146f3a76/tests%2Fui%2Fint_plus_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fint_plus_one.stderr?ref=21e9a1285de20f2aaad9b644655fb24f146f3a76", "patch": "@@ -5,31 +5,43 @@ error: Unnecessary `>= y + 1` or `x - 1 >=`\n    |     ^^^^^^^^^^\n    |\n    = note: `-D int-plus-one` implied by `-D warnings`\n-   = help: Consider reducing `x >= y + 1` or `x - 1 >= y` to `x > y`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+10 |     x > y;\n+   |     ^^^^^\n \n error: Unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:11:5\n    |\n 11 |     y + 1 <= x;\n    |     ^^^^^^^^^^\n    |\n-   = help: Consider reducing `x >= y + 1` or `x - 1 >= y` to `x > y`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+11 |     y < x;\n+   |     ^^^^^\n \n error: Unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:13:5\n    |\n 13 |     x - 1 >= y;\n    |     ^^^^^^^^^^\n    |\n-   = help: Consider reducing `x >= y + 1` or `x - 1 >= y` to `x > y`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+13 |     x > y;\n+   |     ^^^^^\n \n error: Unnecessary `>= y + 1` or `x - 1 >=`\n   --> $DIR/int_plus_one.rs:14:5\n    |\n 14 |     y <= x - 1;\n    |     ^^^^^^^^^^\n    |\n-   = help: Consider reducing `x >= y + 1` or `x - 1 >= y` to `x > y`\n+help: change `>= y + 1` to `> y` as shown\n+   |\n+14 |     y < x;\n+   |     ^^^^^\n \n error: aborting due to 4 previous errors\n "}]}