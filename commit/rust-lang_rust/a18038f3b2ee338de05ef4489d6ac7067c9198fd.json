{"sha": "a18038f3b2ee338de05ef4489d6ac7067c9198fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODAzOGYzYjJlZTMzOGRlMDVlZjQ0ODlkNmFjNzA2N2M5MTk4ZmQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-14T20:47:21Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-14T22:26:21Z"}, "message": "iter: add `RangeStep` and `RangeStepInclusive`", "tree": {"sha": "ab70666937bd3d1ece95a305f8bd824027473af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab70666937bd3d1ece95a305f8bd824027473af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18038f3b2ee338de05ef4489d6ac7067c9198fd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18038f3b2ee338de05ef4489d6ac7067c9198fd", "html_url": "https://github.com/rust-lang/rust/commit/a18038f3b2ee338de05ef4489d6ac7067c9198fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18038f3b2ee338de05ef4489d6ac7067c9198fd/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aead52586d26f375e6318fb6980280db18b70b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aead52586d26f375e6318fb6980280db18b70b7", "html_url": "https://github.com/rust-lang/rust/commit/3aead52586d26f375e6318fb6980280db18b70b7"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "22e8a1defbda9d980a81f2cb5ef0273eab639dfe", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a18038f3b2ee338de05ef4489d6ac7067c9198fd/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18038f3b2ee338de05ef4489d6ac7067c9198fd/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=a18038f3b2ee338de05ef4489d6ac7067c9198fd", "patch": "@@ -21,7 +21,7 @@ use cmp;\n use num::{Zero, One, Integer, CheckedAdd, CheckedSub, Saturating};\n use option::{Option, Some, None};\n use ops::{Add, Mul, Sub};\n-use cmp::Ord;\n+use cmp::{Eq, Ord};\n use clone::Clone;\n use uint;\n use util;\n@@ -1838,6 +1838,81 @@ impl<A: Sub<A, A> + Integer + Ord + Clone> DoubleEndedIterator<A> for RangeInclu\n     }\n }\n \n+/// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n+#[deriving(Clone, DeepClone)]\n+pub struct RangeStep<A> {\n+    priv state: A,\n+    priv stop: A,\n+    priv step: A,\n+    priv rev: bool\n+}\n+\n+/// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n+#[inline]\n+pub fn range_step<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop: A, step: A) -> RangeStep<A> {\n+    let rev = step < Zero::zero();\n+    RangeStep{state: start, stop: stop, step: step, rev: rev}\n+}\n+\n+impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if (self.rev && self.state > self.stop) || self.state < self.stop {\n+            let result = self.state.clone();\n+            match self.state.checked_add(&self.step) {\n+                Some(x) => self.state = x,\n+                None => self.state = self.stop.clone()\n+            }\n+            Some(result)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n+#[deriving(Clone, DeepClone)]\n+pub struct RangeStepInclusive<A> {\n+    priv state: A,\n+    priv stop: A,\n+    priv step: A,\n+    priv rev: bool,\n+    priv done: bool\n+}\n+\n+/// Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n+#[inline]\n+pub fn range_step_inclusive<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop: A,\n+                                                                step: A) -> RangeStepInclusive<A> {\n+    let rev = step < Zero::zero();\n+    RangeStepInclusive{state: start, stop: stop, step: step, rev: rev, done: false}\n+}\n+\n+impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if !self.done {\n+            if (self.rev && self.state > self.stop) || self.state < self.stop {\n+                let result = self.state.clone();\n+                match self.state.checked_add(&self.step) {\n+                    Some(x) => self.state = x,\n+                    None => self.done = true\n+                }\n+                Some(result)\n+            } else {\n+                if self.state == self.stop {\n+                    self.done = true;\n+                    Some(self.state.clone())\n+                } else {\n+                    None\n+                }\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n /// An iterator that repeats an element endlessly\n #[deriving(Clone, DeepClone)]\n pub struct Repeat<A> {\n@@ -2647,6 +2722,20 @@ mod tests {\n         assert_eq!(range_inclusive(0i, 5).invert().collect::<~[int]>(), ~[5i, 4, 3, 2, 1, 0]);\n     }\n \n+    #[test]\n+    fn test_range_step() {\n+        assert_eq!(range_step(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15]);\n+        assert_eq!(range_step(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5]);\n+        assert_eq!(range_step(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+    }\n+\n+    #[test]\n+    fn test_range_step_inclusive() {\n+        assert_eq!(range_step_inclusive(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15, 20]);\n+        assert_eq!(range_step_inclusive(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5, 0]);\n+        assert_eq!(range_step_inclusive(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n+    }\n+\n     #[test]\n     fn test_reverse() {\n         let mut ys = [1, 2, 3, 4, 5];"}]}