{"sha": "69e0704520c5296282a33e39ff056921e3cff7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTA3MDQ1MjBjNTI5NjI4MmEzM2UzOWZmMDU2OTIxZTNjZmY3ZDM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:50:47Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-22T19:50:47Z"}, "message": "Merge pull request #7230 from Blei/green-squiggle\n\nsyntax::diagnostics: Color the ^~~~ in green for better visibility", "tree": {"sha": "fa0ef2db62d736d7b0fc21106f40ee1ee2955c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa0ef2db62d736d7b0fc21106f40ee1ee2955c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e0704520c5296282a33e39ff056921e3cff7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e0704520c5296282a33e39ff056921e3cff7d3", "html_url": "https://github.com/rust-lang/rust/commit/69e0704520c5296282a33e39ff056921e3cff7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e0704520c5296282a33e39ff056921e3cff7d3/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4560dc26498573516d833cb2333b54071070e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4560dc26498573516d833cb2333b54071070e3", "html_url": "https://github.com/rust-lang/rust/commit/dc4560dc26498573516d833cb2333b54071070e3"}, {"sha": "8066dfd4ad24c011f581c80b818ac352711a5942", "url": "https://api.github.com/repos/rust-lang/rust/commits/8066dfd4ad24c011f581c80b818ac352711a5942", "html_url": "https://github.com/rust-lang/rust/commit/8066dfd4ad24c011f581c80b818ac352711a5942"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "c0a23593f85e91d6962c6f4d5a10fae727877dad", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/69e0704520c5296282a33e39ff056921e3cff7d3/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e0704520c5296282a33e39ff056921e3cff7d3/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=69e0704520c5296282a33e39ff056921e3cff7d3", "patch": "@@ -189,30 +189,36 @@ fn diagnosticcolor(lvl: level) -> u8 {\n     }\n }\n \n-fn print_diagnostic(topic: &str, lvl: level, msg: &str) {\n-    let t = term::Terminal::new(io::stderr());\n-\n+fn print_maybe_colored(msg: &str, color: u8) {\n     let stderr = io::stderr();\n \n-    if !topic.is_empty() {\n-        stderr.write_str(fmt!(\"%s \", topic));\n-    }\n+    let t = term::Terminal::new(stderr);\n \n     match t {\n         Ok(term) => {\n             if stderr.get_type() == io::Screen {\n-                term.fg(diagnosticcolor(lvl));\n-                stderr.write_str(fmt!(\"%s: \", diagnosticstr(lvl)));\n+                term.fg(color);\n+                stderr.write_str(msg);\n                 term.reset();\n-                stderr.write_str(fmt!(\"%s\\n\", msg));\n             } else {\n-                stderr.write_str(fmt!(\"%s: %s\\n\", diagnosticstr(lvl), msg));\n+                stderr.write_str(msg);\n             }\n         },\n-        _ => stderr.write_str(fmt!(\"%s: %s\\n\", diagnosticstr(lvl), msg))\n+        _ => stderr.write_str(msg)\n     }\n }\n \n+fn print_diagnostic(topic: &str, lvl: level, msg: &str) {\n+    let stderr = io::stderr();\n+\n+    if !topic.is_empty() {\n+        stderr.write_str(fmt!(\"%s \", topic));\n+    }\n+\n+    print_maybe_colored(fmt!(\"%s: \", diagnosticstr(lvl)), diagnosticcolor(lvl));\n+    stderr.write_str(fmt!(\"%s\\n\", msg));\n+}\n+\n pub fn collect(messages: @mut ~[~str])\n             -> @fn(Option<(@codemap::CodeMap, span)>, &str, level) {\n     let f: @fn(Option<(@codemap::CodeMap, span)>, &str, level) =\n@@ -292,14 +298,15 @@ fn highlight_lines(cm: @codemap::CodeMap,\n                 _ => \" \"         // -squigly-line as well (instead of a\n             };                   // space). This way the squigly-line will\n         }                        // usually appear in the correct position.\n-        s += \"^\";\n+        io::stderr().write_str(s);\n+        let mut s = ~\"^\";\n         let hi = cm.lookup_char_pos(sp.hi);\n         if hi.col != lo.col {\n             // the ^ already takes up one space\n             let num_squiglies = hi.col.to_uint()-lo.col.to_uint()-1u;\n             for num_squiglies.times() { s += \"~\"; }\n         }\n-        io::stderr().write_str(s + \"\\n\");\n+        print_maybe_colored(s + \"\\n\", term::color_bright_green);\n     }\n }\n "}]}