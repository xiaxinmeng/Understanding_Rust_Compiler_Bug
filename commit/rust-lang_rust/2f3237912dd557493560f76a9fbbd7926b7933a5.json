{"sha": "2f3237912dd557493560f76a9fbbd7926b7933a5", "node_id": "C_kwDOAAsO6NoAKDJmMzIzNzkxMmRkNTU3NDkzNTYwZjc2YTlmYmJkNzkyNmI3OTMzYTU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T17:37:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T17:37:08Z"}, "message": "restore invariatns", "tree": {"sha": "3883ec7b0aa759ab304c8d1e02eaba208d461f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3883ec7b0aa759ab304c8d1e02eaba208d461f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3237912dd557493560f76a9fbbd7926b7933a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3237912dd557493560f76a9fbbd7926b7933a5", "html_url": "https://github.com/rust-lang/rust/commit/2f3237912dd557493560f76a9fbbd7926b7933a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3237912dd557493560f76a9fbbd7926b7933a5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5369927d79d1f95b9748ded2523a65b72f05a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5369927d79d1f95b9748ded2523a65b72f05a1d", "html_url": "https://github.com/rust-lang/rust/commit/b5369927d79d1f95b9748ded2523a65b72f05a1d"}], "stats": {"total": 35, "additions": 25, "deletions": 10}, "files": [{"sha": "b038d44fe08b2550864f2bbd6454ad2a73372a07", "filename": "crates/parser/src/shortcuts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f3237912dd557493560f76a9fbbd7926b7933a5/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3237912dd557493560f76a9fbbd7926b7933a5/crates%2Fparser%2Fsrc%2Fshortcuts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fshortcuts.rs?ref=2f3237912dd557493560f76a9fbbd7926b7933a5", "patch": "@@ -50,6 +50,7 @@ impl<'a> LexedStr<'a> {\n         res\n     }\n \n+    /// NB: only valid to call with Output from Reparser/TopLevelEntry.\n     pub fn intersperse_trivia(\n         &self,\n         output: &crate::Output,\n@@ -76,7 +77,7 @@ impl<'a> LexedStr<'a> {\n                 builder.eat_trivias();\n                 (builder.sink)(StrStep::Exit);\n             }\n-            State::PendingEnter | State::Normal => (),\n+            State::PendingEnter | State::Normal => unreachable!(),\n         }\n \n         let is_eof = builder.pos == builder.lexed.len();\n@@ -100,8 +101,9 @@ enum State {\n impl Builder<'_, '_> {\n     fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n         match mem::replace(&mut self.state, State::Normal) {\n+            State::PendingEnter => unreachable!(),\n             State::PendingExit => (self.sink)(StrStep::Exit),\n-            State::PendingEnter | State::Normal => (),\n+            State::Normal => (),\n         }\n         self.eat_trivias();\n         self.do_token(kind, n_tokens as usize);"}, {"sha": "947922d8b320dec56d1a8376fb9914756f02d821", "filename": "crates/parser/src/tests/entries.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2f3237912dd557493560f76a9fbbd7926b7933a5/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3237912dd557493560f76a9fbbd7926b7933a5/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=2f3237912dd557493560f76a9fbbd7926b7933a5", "patch": "@@ -1,4 +1,4 @@\n-use crate::{LexedStr, PrefixEntryPoint, StrStep};\n+use crate::{LexedStr, PrefixEntryPoint, Step};\n \n #[test]\n fn vis() {\n@@ -30,12 +30,25 @@ fn stmt() {\n fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let lexed = LexedStr::new(input);\n     let input = lexed.to_input();\n-    let output = entry.parse(&input);\n \n-    let mut buf = String::new();\n-    lexed.intersperse_trivia(&output, &mut |step| match step {\n-        StrStep::Token { kind: _, text } => buf.push_str(text),\n-        _ => (),\n-    });\n-    assert_eq!(buf.trim(), prefix)\n+    let mut n_tokens = 0;\n+    for step in entry.parse(&input).iter() {\n+        match step {\n+            Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n+            Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n+        }\n+    }\n+\n+    let mut i = 0;\n+    loop {\n+        if n_tokens == 0 {\n+            break;\n+        }\n+        if !lexed.kind(i).is_trivia() {\n+            n_tokens -= 1;\n+        }\n+        i += 1;\n+    }\n+    let buf = &lexed.as_str()[..lexed.text_start(i)];\n+    assert_eq!(buf, prefix);\n }"}]}