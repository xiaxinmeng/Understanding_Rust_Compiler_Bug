{"sha": "7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZmE0YjI5ODI2MmZkZTAzN2I1ZmJiYjhmZTIwNDY4ZDczMDZjYmI=", "commit": {"author": {"name": "noam", "email": "noam@clusterfoo.com", "date": "2014-03-23T20:05:01Z"}, "committer": {"name": "noam", "email": "noam@clusterfoo.com", "date": "2014-03-23T22:29:58Z"}, "message": "docs: named lifetimes\n\n* Include tip given by Leo Testard in mailing list about labeled `break`\nand `continue`:\nhttps://mail.mozilla.org/pipermail/rust-dev/2014-March/009145.html\n* cross-reference named lifetimes in tutorial -> lifetimes guide\n* Broke named lifetimes section into two sub-sections.\n* Added mention of `'static` lifetime.", "tree": {"sha": "7455d80a42514452b803657198b719e6047b740c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7455d80a42514452b803657198b719e6047b740c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "html_url": "https://github.com/rust-lang/rust/commit/7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dfa4b298262fde037b5fbbb8fe20468d7306cbb/comments", "author": null, "committer": null, "parents": [{"sha": "903e83889ade166bf62f1ee74df8bf8331ea17d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/903e83889ade166bf62f1ee74df8bf8331ea17d1", "html_url": "https://github.com/rust-lang/rust/commit/903e83889ade166bf62f1ee74df8bf8331ea17d1"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "20268ce8bbea3b51cc9bd2397a9df953b9563887", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7dfa4b298262fde037b5fbbb8fe20468d7306cbb/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dfa4b298262fde037b5fbbb8fe20468d7306cbb/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "patch": "@@ -559,9 +559,14 @@ points at a static constant).\n \n # Named lifetimes\n \n-Let's look at named lifetimes in more detail. Named lifetimes allow\n-for grouping of parameters by lifetime. For example, consider this\n-function:\n+Lifetimes can be named and referenced. For example, the special lifetime \n+`'static`, which does not go out of scope, can be used to create global\n+variables and communicate between tasks (see the manual for usecases).\n+\n+## Parameter Lifetimes\n+\n+Named lifetimes allow for grouping of parameters by lifetime. \n+For example, consider this function:\n \n ~~~\n # struct Point {x: f64, y: f64}; // as before\n@@ -655,6 +660,20 @@ fn select<'r, T>(shape: &Shape, threshold: f64,\n \n This is equivalent to the previous definition.\n \n+## Labeled Control Structures\n+\n+Named lifetime notation can also be used to control the flow of execution:\n+\n+~~~\n+'h: for i in range(0,10) {\n+    'g: loop {\n+        if i % 2 == 0 { continue 'h; }\n+        if i == 9 { break 'h; }\n+        break 'g;\n+    }\n+}\n+~~~\n+\n # Conclusion\n \n So there you have it: a (relatively) brief tour of the lifetime"}, {"sha": "09539e6d59d8d5159efbbc5439b2e8f24521dfc0", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dfa4b298262fde037b5fbbb8fe20468d7306cbb/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dfa4b298262fde037b5fbbb8fe20468d7306cbb/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=7dfa4b298262fde037b5fbbb8fe20468d7306cbb", "patch": "@@ -2103,7 +2103,8 @@ a `&T` pointer. `MutexArc` is an example of a *sharable* type with internal muta\n These are types that do not contain any data whose lifetime is bound to\n a particular stack frame. These are types that do not contain any\n references, or types where the only contained references\n-have the `'static` lifetime.\n+have the `'static` lifetime. (For more on named lifetimes and their uses, \n+see the [references and lifetimes guide][lifetimes].)\n \n > ***Note:*** These two traits were referred to as 'kinds' in earlier\n > iterations of the language, and often still are."}]}