{"sha": "b9811418ddcd53dddae5bfe3ebeca5b071fff7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODExNDE4ZGRjZDUzZGRkYWU1YmZlM2ViZWNhNWIwNzFmZmY3ZjQ=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-05-06T14:27:59Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-05-06T14:27:59Z"}, "message": "outdated comment", "tree": {"sha": "d19124d1d0b9ae451d77ab77ec60c713259b1648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19124d1d0b9ae451d77ab77ec60c713259b1648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4", "html_url": "https://github.com/rust-lang/rust/commit/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513c56a6113ced2c7e031355e3f2ce61279926ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/513c56a6113ced2c7e031355e3f2ce61279926ec", "html_url": "https://github.com/rust-lang/rust/commit/513c56a6113ced2c7e031355e3f2ce61279926ec"}], "stats": {"total": 2, "additions": 0, "deletions": 2}, "files": [{"sha": "1851b98b505f499465c97dd4da0117fcc06d852f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9811418ddcd53dddae5bfe3ebeca5b071fff7f4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b9811418ddcd53dddae5bfe3ebeca5b071fff7f4", "patch": "@@ -1044,8 +1044,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     /// Returns `true` if the global caches can be used.\n-    /// Do note that if the type itself is not in the\n-    /// global tcx, the local caches will be used.\n     fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {\n         // If there are any inference variables in the `ParamEnv`, then we\n         // always use a cache local to this particular scope. Otherwise, we"}]}