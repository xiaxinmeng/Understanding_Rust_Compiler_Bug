{"sha": "5bfd90efd121cace34bccdf6fe47578b2202bdf9", "node_id": "C_kwDOAAsO6NoAKDViZmQ5MGVmZDEyMWNhY2UzNGJjY2RmNmZlNDc1NzhiMjIwMmJkZjk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T17:46:18Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-27T17:53:07Z"}, "message": "Use now solver in evaluate_obligation", "tree": {"sha": "f15c0d7c67298153c68cfa3110c8b20537e69792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f15c0d7c67298153c68cfa3110c8b20537e69792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfd90efd121cace34bccdf6fe47578b2202bdf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfd90efd121cace34bccdf6fe47578b2202bdf9", "html_url": "https://github.com/rust-lang/rust/commit/5bfd90efd121cace34bccdf6fe47578b2202bdf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfd90efd121cace34bccdf6fe47578b2202bdf9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6874f4e3fc2a16be7c78e702d068bbc1daa90e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/6874f4e3fc2a16be7c78e702d068bbc1daa90e16", "html_url": "https://github.com/rust-lang/rust/commit/6874f4e3fc2a16be7c78e702d068bbc1daa90e16"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "f183248f2d08b0474e6ef47b7b3ced870c95d53a", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5bfd90efd121cace34bccdf6fe47578b2202bdf9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfd90efd121cace34bccdf6fe47578b2202bdf9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=5bfd90efd121cace34bccdf6fe47578b2202bdf9", "patch": "@@ -1,7 +1,9 @@\n use rustc_middle::ty;\n+use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n+use crate::solve::{Certainty, Goal, InferCtxtEvalExt, MaybeCause};\n use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {\n@@ -77,12 +79,38 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             _ => obligation.param_env.without_const(),\n         };\n \n-        let c_pred = self\n-            .canonicalize_query_keep_static(param_env.and(obligation.predicate), &mut _orig_values);\n-        // Run canonical query. If overflow occurs, rerun from scratch but this time\n-        // in standard trait query mode so that overflow is handled appropriately\n-        // within `SelectionContext`.\n-        self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n+        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            let c_pred = self.canonicalize_query_keep_static(\n+                param_env.and(obligation.predicate),\n+                &mut _orig_values,\n+            );\n+            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n+        } else {\n+            self.probe(|snapshot| {\n+                if let Ok((_, certainty)) =\n+                    self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n+                {\n+                    match certainty {\n+                        Certainty::Yes => {\n+                            if self.opaque_types_added_in_snapshot(snapshot) {\n+                                Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n+                            } else if self.region_constraints_added_in_snapshot(snapshot).is_some()\n+                            {\n+                                Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n+                            } else {\n+                                Ok(EvaluationResult::EvaluatedToOk)\n+                            }\n+                        }\n+                        Certainty::Maybe(MaybeCause::Ambiguity) => {\n+                            Ok(EvaluationResult::EvaluatedToAmbig)\n+                        }\n+                        Certainty::Maybe(MaybeCause::Overflow) => Err(OverflowError::Canonical),\n+                    }\n+                } else {\n+                    Ok(EvaluationResult::EvaluatedToErr)\n+                }\n+            })\n+        }\n     }\n \n     // Helper function that canonicalizes and runs the query. If an\n@@ -92,6 +120,9 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> EvaluationResult {\n+        // Run canonical query. If overflow occurs, rerun from scratch but this time\n+        // in standard trait query mode so that overflow is handled appropriately\n+        // within `SelectionContext`.\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n             Err(OverflowError::Canonical) => {"}]}