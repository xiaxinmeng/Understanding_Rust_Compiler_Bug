{"sha": "b19ae20aada117a589ec238f97c97a98b483f97d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOWFlMjBhYWRhMTE3YTU4OWVjMjM4Zjk3Yzk3YTk4YjQ4M2Y5N2Q=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-27T17:24:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-10T18:18:18Z"}, "message": "Track span dependency using a callback.", "tree": {"sha": "47dde9a7f58604722b43c70c288edd2a70f8f561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47dde9a7f58604722b43c70c288edd2a70f8f561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19ae20aada117a589ec238f97c97a98b483f97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19ae20aada117a589ec238f97c97a98b483f97d", "html_url": "https://github.com/rust-lang/rust/commit/b19ae20aada117a589ec238f97c97a98b483f97d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19ae20aada117a589ec238f97c97a98b483f97d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e85ddeb474665f3af7c447445c273da6117e266d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85ddeb474665f3af7c447445c273da6117e266d", "html_url": "https://github.com/rust-lang/rust/commit/e85ddeb474665f3af7c447445c273da6117e266d"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "03c75655d6a33a168c007fe66edfa78c5c4d9901", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -25,6 +25,14 @@ fn span_debug(span: rustc_span::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result\n     })\n }\n \n+fn track_span_parent(def_id: rustc_span::def_id::LocalDefId) {\n+    tls::with_opt(|tcx| {\n+        if let Some(tcx) = tcx {\n+            let _ = tcx.source_span(def_id);\n+        }\n+    })\n+}\n+\n /// This is a callback from `rustc_ast` as it cannot access the implicit state\n /// in `rustc_middle` otherwise. It is used to when diagnostic messages are\n /// emitted and stores them in the current query, if there is one.\n@@ -56,6 +64,7 @@ fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) ->\n /// TyCtxt in.\n pub fn setup_callbacks() {\n     rustc_span::SPAN_DEBUG.swap(&(span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+    rustc_span::SPAN_TRACK.swap(&(track_span_parent as fn(_)));\n     rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n     TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n }"}, {"sha": "c8ea7454f0bf4a3fe22764c27295ca1de253e900", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -153,6 +153,7 @@ pub fn provide(providers: &mut Providers) {\n         index.parenting.get(&id).copied().unwrap_or(CRATE_HIR_ID)\n     };\n     providers.hir_attrs = |tcx, id| AttributeMap { map: &tcx.untracked_crate.attrs, prefix: id };\n+    providers.source_span = |tcx, def_id| tcx.resolutions(()).definitions.def_span(def_id);\n     providers.def_span = |tcx, def_id| tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP);\n     providers.fn_arg_names = |tcx, id| {\n         let hir = tcx.hir();"}, {"sha": "d6f3b6f3248a13b7349b82d468ac15137d6abcc7", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -20,6 +20,14 @@ rustc_queries! {\n         desc { \"get the resolver outputs\" }\n     }\n \n+    /// Return the span for a definition.\n+    /// Contrary to `def_span` below, this query returns the full absolute span of the definition.\n+    /// This span is meant for dep-tracking rather than diagnostics. It should not be used outside\n+    /// of rustc_middle::hir::source_map.\n+    query source_span(key: LocalDefId) -> Span {\n+        desc { \"get the source span\" }\n+    }\n+\n     /// Represents crate as a whole (as distinct from the top-level crate module).\n     /// If you call `hir_crate` (e.g., indirectly by calling `tcx.hir().krate()`),\n     /// we will have to assume that any change means that you need to be recompiled."}, {"sha": "085658122783d04b821f96678696e69b08265c31", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -840,7 +840,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n             let dlo = u32::decode(decoder)?;\n             let dto = u32::decode(decoder)?;\n \n-            let enclosing = decoder.tcx.definitions_untracked().def_span(parent.unwrap()).data();\n+            let enclosing = decoder.tcx.definitions_untracked().def_span(parent.unwrap()).decode();\n             let span = Span::new(\n                 enclosing.lo + BytePos::from_u32(dlo),\n                 enclosing.lo + BytePos::from_u32(dto),\n@@ -1022,7 +1022,7 @@ where\n     E: 'a + OpaqueEncoder,\n {\n     fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n-        let span_data = self.data();\n+        let span_data = self.decode();\n         span_data.ctxt.encode(s)?;\n         span_data.parent.encode(s)?;\n \n@@ -1031,7 +1031,7 @@ where\n         }\n \n         if let Some(parent) = span_data.parent {\n-            let enclosing = s.tcx.definitions_untracked().def_span(parent).data();\n+            let enclosing = s.tcx.definitions_untracked().def_span(parent).decode();\n             if enclosing.contains(span_data) {\n                 TAG_RELATIVE_SPAN.encode(s)?;\n                 (span_data.lo - enclosing.lo).to_u32().encode(s)?;"}, {"sha": "60b5ffb1d3e2c590be2e442fa612e4226fdcbae1", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -1947,6 +1947,7 @@ pub struct FileLines {\n \n pub static SPAN_DEBUG: AtomicRef<fn(Span, &mut fmt::Formatter<'_>) -> fmt::Result> =\n     AtomicRef::new(&(default_span_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n+pub static SPAN_TRACK: AtomicRef<fn(LocalDefId)> = AtomicRef::new(&((|_| {}) as fn(_)));\n \n // _____________________________________________________________________________\n // SpanLinesError, SpanSnippetError, DistinctSources, MalformedSourceMapPositions\n@@ -2031,7 +2032,7 @@ where\n             return;\n         }\n \n-        let span = self.data();\n+        let span = self.decode();\n         span.ctxt.hash_stable(ctx, hasher);\n         span.parent.hash_stable(ctx, hasher);\n \n@@ -2041,7 +2042,7 @@ where\n         }\n \n         if let Some(parent) = span.parent {\n-            let def_span = ctx.def_span(parent).data();\n+            let def_span = ctx.def_span(parent).decode();\n             if def_span.contains(span) {\n                 // This span is enclosed in a definition: only hash the relative position.\n                 Hash::hash(&TAG_RELATIVE_SPAN, hasher);"}, {"sha": "f74c259d53d9c8776e02c2fe3a02ee9a7b64e4d7", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19ae20aada117a589ec238f97c97a98b483f97d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=b19ae20aada117a589ec238f97c97a98b483f97d", "patch": "@@ -6,6 +6,7 @@\n \n use crate::def_id::LocalDefId;\n use crate::hygiene::SyntaxContext;\n+use crate::SPAN_TRACK;\n use crate::{BytePos, SpanData};\n \n use rustc_data_structures::fx::FxIndexSet;\n@@ -55,6 +56,10 @@ use rustc_data_structures::fx::FxIndexSet;\n ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,\n ///   but larger crates might need more than 16 bits.\n ///\n+/// In order to reliably use parented spans in incremental compilation,\n+/// the dependency to the parent definition's span. This is performed\n+/// using the callback `SPAN_TRACK` to access the query engine.\n+///\n #[derive(Clone, Copy, Eq, PartialEq, Hash)]\n pub struct Span {\n     base_or_index: u32,\n@@ -96,6 +101,17 @@ impl Span {\n \n     #[inline]\n     pub fn data(self) -> SpanData {\n+        let data = self.decode();\n+        if let Some(parent) = data.parent {\n+            (*SPAN_TRACK)(parent);\n+        }\n+        data\n+    }\n+\n+    /// Internal function to translate between an encoded span and the expanded representation.\n+    /// This function must not be used outside the incremental engine.\n+    #[inline]\n+    pub fn decode(self) -> SpanData {\n         if self.len_or_tag != LEN_TAG {\n             // Inline format.\n             debug_assert!(self.len_or_tag as u32 <= MAX_LEN);"}]}