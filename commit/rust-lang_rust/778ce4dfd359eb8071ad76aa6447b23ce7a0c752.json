{"sha": "778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OGNlNGRmZDM1OWViODA3MWFkNzZhYTY0NDdiMjNjZTdhMGM3NTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T12:13:40Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-07T12:13:40Z"}, "message": "update to the rust-PR that unblocks clippy", "tree": {"sha": "beb04067b35bf2794035ca5cd9fb33f3a8b4f8b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb04067b35bf2794035ca5cd9fb33f3a8b4f8b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYR/z0AAoJEFbW7qD8Z6xGq6UP/AmJwqDsGeV3qGZpnJQqrCon\nEWExj1j0Zfk2UyMLDeFH1eGCyI7pbWiw8w9XhzJ9wlXaMQp3O7NjuFiVdChOmYYR\nmHg72VRH19PO2OcOs6VO6KYAKJNMUHilSPx66LKjt2PADPBvPTht2IXZ5BqeImEp\nxE0teu4lwoUaMLWfJMzYwrg6/cDstmFwcoWS989f72sGFqOFWKMILNnNCPLZ1OhR\ndXvLb6qe/hgUgIHJo5XN7fvW90IqTTtT2ZfNpDZw61S5k2ZnVueO6w652XBeWQXc\nNmmWZMJuXLtfekC0YX67S4SkWf8zNy8hPcDelxo1AH7HQrrG2Fbmwp3289R/LL+L\nJ0hqxUVgERAleL8+9Me+DLceB0gvEK4P0z7iMExviFaDefsqF7eg9qqpjJ5QqHoD\nDA0l/9kUhBi525y8a28UeMru5qsO+T1mZdHRQhuZE4NwuLSzchcYFQvdatrq3SCt\nNyo5dfguFjzSo9GDYk40gFuRhAZ/Y/5UYi6bedjMnUqdYNoRGZ/QhJHLcBEo5lH/\nhUz3orbKLZIXzwJR2Fn32aQEdYY71rmLPk964tqRytLB8laIBjA9Yz4PL4VEAy7m\nSampj1K+4LNCkMDNV47ad3G6GyYDea+o7dnd4R9PqXcHM/pP3rC1YjYwos07gpfs\nV3aTtURxqA0uNLi4sm/t\n=VAgO\n-----END PGP SIGNATURE-----", "payload": "tree beb04067b35bf2794035ca5cd9fb33f3a8b4f8b7\nparent 4a05fbba3e1c4557b5cafbfdf62f6da86347f748\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481112820 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481112820 +0100\n\nupdate to the rust-PR that unblocks clippy"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "html_url": "https://github.com/rust-lang/rust/commit/778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a05fbba3e1c4557b5cafbfdf62f6da86347f748", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a05fbba3e1c4557b5cafbfdf62f6da86347f748", "html_url": "https://github.com/rust-lang/rust/commit/4a05fbba3e1c4557b5cafbfdf62f6da86347f748"}], "stats": {"total": 434, "additions": 217, "deletions": 217}, "files": [{"sha": "3ccb5f6ef2a00ff110d059739434f838e394615c", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -59,8 +59,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprLit(ref lit) = e.node {\n             check_lit(cx, lit, e);\n         }"}, {"sha": "5020295e20c96f85c52172d1759303f95651c106", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -47,8 +47,8 @@ impl LintPass for Arithmetic {\n     }\n }\n \n-impl LateLintPass for Arithmetic {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if self.span.is_some() {\n             return;\n         }\n@@ -82,7 +82,7 @@ impl LateLintPass for Arithmetic {\n         }\n     }\n \n-    fn check_expr_post<'a, 'tcx: 'a>(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if Some(expr.span) == self.span {\n             self.span = None;\n         }"}, {"sha": "399f93d08c7cd419641f715efa4e534db03fe83b", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -55,8 +55,8 @@ impl LintPass for ArrayIndexing {\n     }\n }\n \n-impl LateLintPass for ArrayIndexing {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n         if let hir::ExprIndex(ref array, ref index) = e.node {\n             // Array with known size can be checked statically\n             let ty = cx.tcx.tables().expr_ty(array);"}, {"sha": "ef6898cef885611182d3a68c03f52b624593271f", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -66,8 +66,8 @@ impl LintPass for AssignOps {\n     }\n }\n \n-impl LateLintPass for AssignOps {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         match expr.node {\n             hir::ExprAssignOp(op, ref lhs, ref rhs) => {\n                 span_lint_and_then(cx, ASSIGN_OPS, expr.span, \"assign operation detected\", |db| {"}, {"sha": "a37b08363957494e1ab72e3b67303b1b88a57163", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -81,8 +81,8 @@ impl LintPass for AttrPass {\n     }\n }\n \n-impl LateLintPass for AttrPass {\n-    fn check_attribute<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n+    fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let MetaItemKind::List(ref items) = attr.value.node {\n             if items.is_empty() || attr.name() != \"deprecated\" {\n                 return;\n@@ -99,7 +99,7 @@ impl LateLintPass for AttrPass {\n         }\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if is_relevant_item(cx, item) {\n             check_attrs(cx, item.span, &item.name, &item.attrs)\n         }\n@@ -138,13 +138,13 @@ impl LateLintPass for AttrPass {\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if is_relevant_impl(cx, item) {\n             check_attrs(cx, item.span, &item.name, &item.attrs)\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         if is_relevant_trait(cx, item) {\n             check_attrs(cx, item.span, &item.name, &item.attrs)\n         }"}, {"sha": "0e569bc76f7b5cf22f07cf42dd3382e593560835", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -79,8 +79,8 @@ impl LintPass for BitMask {\n     }\n }\n \n-impl LateLintPass for BitMask {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BitMask {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = e.node {\n             if cmp.node.is_comparison() {\n                 if let Some(cmp_opt) = fetch_int_literal(cx, right) {"}, {"sha": "2f9a50fe3dac84d16e833278e9691de53982b0ca", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -37,8 +37,8 @@ impl LintPass for BlackListedName {\n     }\n }\n \n-impl LateLintPass for BlackListedName {\n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlackListedName {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n         if let PatKind::Binding(_, _, ref ident, _) = pat.node {\n             if self.blacklist.iter().any(|s| s == &*ident.node.as_str()) {\n                 span_lint(cx,"}, {"sha": "de004afa1a6c8eabd74442f564b62b7cb24f20f2", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -74,8 +74,8 @@ const BRACED_EXPR_MESSAGE: &'static str = \"omit braces around single expression\n const COMPLEX_BLOCK_MESSAGE: &'static str = \"in an 'if' condition, avoid complex blocks or closures with blocks; \\\n                                              instead, move the block or closure higher and bind it with a 'let'\";\n \n-impl LateLintPass for BlockInIfCondition {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprIf(ref check, ref then, _) = expr.node {\n             if let ExprBlock(ref block) = check.node {\n                 if block.rules == DefaultBlock {"}, {"sha": "bd5657483112e5a89005a057cf1d3da322121ed6", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -53,8 +53,8 @@ impl LintPass for NonminimalBool {\n     }\n }\n \n-impl LateLintPass for NonminimalBool {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonminimalBool {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         NonminimalBoolVisitor { cx: cx }.visit_item(item)\n     }\n }"}, {"sha": "9fa38ad02b3eab4fa31c98df8eeba5fafff1f985", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -109,8 +109,8 @@ impl LintPass for CopyAndPaste {\n     }\n }\n \n-impl LateLintPass for CopyAndPaste {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if !in_macro(cx, expr.span) {\n             // skip ifs directly in else, it will be checked in the parent if\n             if let Some(&Expr { node: ExprIf(_, _, Some(ref else_expr)), .. }) = get_parent_expr(cx, expr) {"}, {"sha": "164633b7c6445281cbaf7b16d77ea1c980e05e86", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -90,31 +90,31 @@ impl CyclomaticComplexity {\n     }\n }\n \n-impl LateLintPass for CyclomaticComplexity {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemFn(_, _, _, _, _, eid) = item.node {\n             if !attr::contains_name(&item.attrs, \"test\") {\n                 self.check(cx, cx.tcx.map.expr(eid), item.span);\n             }\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(_, eid) = item.node {\n             self.check(cx, cx.tcx.map.expr(eid), item.span);\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         if let MethodTraitItem(_, Some(eid)) = item.node {\n             self.check(cx, cx.tcx.map.expr(eid), item.span);\n         }\n     }\n \n-    fn enter_lint_attrs<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n+    fn enter_lint_attrs(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n         self.limit.push_attrs(cx.sess(), attrs, \"cyclomatic_complexity\");\n     }\n-    fn exit_lint_attrs<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n+    fn exit_lint_attrs(&mut self, cx: &LateContext<'a, 'tcx>, attrs: &'tcx [Attribute]) {\n         self.limit.pop_attrs(cx.sess(), attrs, \"cyclomatic_complexity\");\n     }\n }"}, {"sha": "449227c9767972600bf4d26f1063d67e8503e64d", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -70,8 +70,8 @@ impl LintPass for Derive {\n     }\n }\n \n-impl LateLintPass for Derive {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n             let ty = cx.tcx.item_type(cx.tcx.map.local_def_id(item.id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n@@ -86,7 +86,7 @@ impl LateLintPass for Derive {\n }\n \n /// Implementation of the `DERIVE_HASH_XOR_EQ` lint.\n-fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_ref: &TraitRef, ty: ty::Ty<'tcx>,\n+fn check_hash_peq<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, trait_ref: &TraitRef, ty: ty::Ty<'tcx>,\n                                 hash_is_automatically_derived: bool) {\n     if_let_chain! {[\n         match_path_old(&trait_ref.path, &paths::HASH),"}, {"sha": "106e43e1b6f570a29f0427fb127e5ad24589d2f4", "filename": "clippy_lints/src/drop_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_ref.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -35,8 +35,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprCall(ref path, ref args) = expr.node {\n             if let ExprPath(ref qpath) = path.node {\n                 let def_id = cx.tcx.tables().qpath_def(qpath, path.id).def_id();"}, {"sha": "00a41c2e986cf60ffba1323f67c4fab7e75d5e40", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -39,8 +39,8 @@ impl LintPass for HashMapLint {\n     }\n }\n \n-impl LateLintPass for HashMapLint {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprIf(ref check, ref then_block, ref else_block) = expr.node {\n             if let ExprUnary(UnOp::UnNot, ref check) = check.node {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {"}, {"sha": "f4181da3c2b704b42ceecc201c00cafc640bf76e", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -36,9 +36,9 @@ impl LintPass for UnportableVariant {\n     }\n }\n \n-impl LateLintPass for UnportableVariant {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n     #[allow(cast_possible_truncation, cast_sign_loss)]\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemEnum(ref def, _) = item.node {\n             for var in &def.variants {\n                 let variant = &var.node;"}, {"sha": "4dafcf365a6c6b4ffe69b0bec724531fad9913cf", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for EnumGlobUse {\n     }\n }\n \n-impl LateLintPass for EnumGlobUse {\n-    fn check_mod<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: NodeId) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n+    fn check_mod(&mut self, cx: &LateContext<'a, 'tcx>, m: &'tcx Mod, _: Span, _: NodeId) {\n         // only check top level `use` statements\n         for item in &m.item_ids {\n             self.lint_item(cx, cx.krate.item(item.id));"}, {"sha": "c43dfe6e27ca260a49f69e6fd331ce4f74af8c14", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for EqOp {\n     }\n }\n \n-impl LateLintPass for EqOp {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n             if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n                 span_lint(cx,"}, {"sha": "0ca1f143b16471be926fe2a4b493bf710a7c86d0", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -60,8 +60,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_fn<'a, 'tcx: 'a>(\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: visit::FnKind<'tcx>,"}, {"sha": "56308ed390d8b6ce9c1d89f28c76fa67d34f1323", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -33,8 +33,8 @@ impl LintPass for EtaPass {\n     }\n }\n \n-impl LateLintPass for EtaPass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         match expr.node {\n             ExprCall(_, ref args) |\n             ExprMethodCall(_, _, ref args) => {"}, {"sha": "9e9a900fe7ab92f2ce870db685f3e5e2085c09ad", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -56,8 +56,8 @@ impl LintPass for EvalOrderDependence {\n     }\n }\n \n-impl LateLintPass for EvalOrderDependence {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // Find a write to a local variable.\n         match expr.node {\n             ExprAssign(ref lhs, _) | ExprAssignOp(_, ref lhs, _) => {\n@@ -79,7 +79,7 @@ impl LateLintPass for EvalOrderDependence {\n             _ => {}\n         }\n     }\n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         match stmt.node {\n             StmtExpr(ref e, _) | StmtSemi(ref e, _) => DivergenceVisitor { cx: cx }.maybe_walk_expr(e),\n             StmtDecl(ref d, _) => {\n@@ -214,7 +214,7 @@ enum StopEarly {\n     Stop,\n }\n \n-fn check_expr<'a, 'tcx: 'a>(vis: & mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> StopEarly {\n+fn check_expr<'a, 'tcx>(vis: & mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr) -> StopEarly {\n     if expr.id == vis.last_expr.id {\n         return StopEarly::KeepGoing;\n     }\n@@ -263,7 +263,7 @@ fn check_expr<'a, 'tcx: 'a>(vis: & mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr)\n     StopEarly::KeepGoing\n }\n \n-fn check_stmt<'a, 'tcx: 'a>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> StopEarly {\n+fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> StopEarly {\n     match stmt.node {\n         StmtExpr(ref expr, _) |\n         StmtSemi(ref expr, _) => check_expr(vis, expr),"}, {"sha": "0cf4762364ba27fe7de31039ef6631fa71a5dc87", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -38,8 +38,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some(span) = is_expn_of(cx, expr.span, \"format\") {\n             match expr.node {\n                 // `format!(\"{}\", foo)` expansion"}, {"sha": "52461d08ee8d721a3350ae0048eedecb6440a073", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -68,8 +68,8 @@ impl LintPass for Functions {\n     }\n }\n \n-impl LateLintPass for Functions {\n-    fn check_fn<'a, 'tcx: 'a>(\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n+    fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: intravisit::FnKind<'tcx>,\n@@ -105,7 +105,7 @@ impl LateLintPass for Functions {\n         self.check_raw_ptr(cx, unsafety, decl, expr, nodeid);\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n         if let hir::MethodTraitItem(ref sig, eid) = item.node {\n             // don't lint extern functions decls, it's not their fault\n             if sig.abi == Abi::Rust {\n@@ -120,7 +120,7 @@ impl LateLintPass for Functions {\n     }\n }\n \n-impl Functions {\n+impl<'a, 'tcx> Functions {\n     fn check_arg_number(&self, cx: &LateContext, decl: &hir::FnDecl, span: Span) {\n         let args = decl.inputs.len() as u64;\n         if args > self.threshold {\n@@ -131,7 +131,7 @@ impl Functions {\n         }\n     }\n \n-    fn check_raw_ptr<'a, 'tcx: 'a>(\n+    fn check_raw_ptr(\n         &self,\n         cx: &LateContext<'a, 'tcx>,\n         unsafety: hir::Unsafety,"}, {"sha": "547aa23f0de8405bd78da2cd356b8f6420711da0", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -31,8 +31,8 @@ impl LintPass for IdentityOp {\n     }\n }\n \n-impl LateLintPass for IdentityOp {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if in_macro(cx, e.span) {\n             return;\n         }"}, {"sha": "399b58956bd6334b49dddcc7f67cf4aa588d9de4", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -42,8 +42,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n \n         if let ExprMatch(ref op, ref arms, MatchSource::IfLetDesugar{..}) = expr.node {\n "}, {"sha": "fd58f86d42f66bcfae10c016f174c17da88abb9e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -59,8 +59,8 @@ impl LintPass for LenZero {\n     }\n }\n \n-impl LateLintPass for LenZero {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if in_macro(cx, item.span) {\n             return;\n         }\n@@ -72,7 +72,7 @@ impl LateLintPass for LenZero {\n         }\n     }\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n         }"}, {"sha": "474a86cdb7884a8c5322aff42edc193e83c9a10e", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -57,8 +57,8 @@ impl LintPass for LetIfSeq {\n     }\n }\n \n-impl LateLintPass for LetIfSeq {\n-    fn check_block<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {\n         let mut it = block.stmts.iter().peekable();\n         while let Some(stmt) = it.next() {\n             if_let_chain! {[\n@@ -149,7 +149,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n     }\n }\n \n-fn check_assign<'a, 'tcx: 'a>(\n+fn check_assign<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     decl: hir::def_id::DefId,\n     block: &'tcx hir::Block,"}, {"sha": "60132ad9161c4f6738cd363a7ee56555a3bb7353", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -56,20 +56,20 @@ impl LintPass for LifetimePass {\n     }\n }\n \n-impl LateLintPass for LifetimePass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemFn(ref decl, _, _, _, ref generics, _) = item.node {\n             check_fn_inner(cx, decl, generics, item.span);\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, _) = item.node {\n             check_fn_inner(cx, &sig.decl, &sig.generics, item.span);\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         if let MethodTraitItem(ref sig, _) = item.node {\n             check_fn_inner(cx, &sig.decl, &sig.generics, item.span);\n         }\n@@ -98,7 +98,7 @@ fn bound_lifetimes(bound: &TyParamBound) -> HirVec<&Lifetime> {\n     }\n }\n \n-fn check_fn_inner<'a, 'tcx: 'a>(\n+fn check_fn_inner<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     decl: &'tcx FnDecl,\n     generics: &'tcx Generics,"}, {"sha": "77f2df03a6a405fce66d06fea8592d1d2eb8506b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -307,8 +307,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n         }\n@@ -391,7 +391,7 @@ impl LateLintPass for Pass {\n         }\n     }\n \n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if let ExprMethodCall(ref method, _, ref args) = expr.node {\n                 if args.len() == 1 && &*method.node.as_str() == \"collect\" &&\n@@ -407,7 +407,7 @@ impl LateLintPass for Pass {\n     }\n }\n \n-fn check_for_loop<'a, 'tcx: 'a>(\n+fn check_for_loop<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,\n     arg: &'tcx Expr,\n@@ -423,7 +423,7 @@ fn check_for_loop<'a, 'tcx: 'a>(\n \n /// Check for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n-fn check_for_loop_range<'a, 'tcx: 'a>(\n+fn check_for_loop_range<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,\n     arg: &'tcx Expr,\n@@ -658,7 +658,7 @@ fn check_arg_type(cx: &LateContext, pat: &Pat, arg: &Expr) {\n     }\n }\n \n-fn check_for_loop_explicit_counter<'a, 'tcx: 'a>(\n+fn check_for_loop_explicit_counter<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     arg: &'tcx Expr,\n     body: &'tcx Expr,\n@@ -708,7 +708,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx: 'a>(\n }\n \n /// Check for the `FOR_KV_MAP` lint.\n-fn check_for_loop_over_map_kv<'a, 'tcx: 'a>(\n+fn check_for_loop_over_map_kv<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,\n     arg: &'tcx Expr,"}, {"sha": "4539c3c8c1054cd64d86fbebc2c04d684cf14984", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -24,8 +24,8 @@ declare_lint! {\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // call to .map()\n         if let ExprMethodCall(name, _, ref args) = expr.node {\n             if &*name.node.as_str() == \"map\" && args.len() == 2 {"}, {"sha": "1d59afd9eace101015018c70da50fab46eccfce7", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -129,8 +129,8 @@ impl LintPass for MatchPass {\n     }\n }\n \n-impl LateLintPass for MatchPass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MatchPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_external_macro(cx, expr.span) {\n             return;\n         }"}, {"sha": "55654a7de43b772a1b809f7ef9af0fb7e6f66d04", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -27,8 +27,8 @@ impl LintPass for MemForget {\n     }\n }\n \n-impl LateLintPass for MemForget {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprCall(ref path_expr, ref args) = e.node {\n             if let ExprPath(ref qpath) = path_expr.node {\n                 let def_id = cx.tcx.tables().qpath_def(qpath, path_expr.id).def_id();"}, {"sha": "cb8fd62961d86c552de5d5ac51625068baf342be", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -549,11 +549,11 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     #[allow(unused_attributes)]\n     // ^ required because `cyclomatic_complexity` attribute shows up as unused\n     #[cyclomatic_complexity = \"30\"]\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n         }\n@@ -629,7 +629,7 @@ impl LateLintPass for Pass {\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, implitem: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, implitem: &'tcx hir::ImplItem) {\n         if in_external_macro(cx, implitem.span) {\n             return;\n         }"}, {"sha": "ccfc01a0003089b9b7c55bae9d64c41d39c5f593", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -33,8 +33,8 @@ impl LintPass for MinMaxPass {\n     }\n }\n \n-impl LateLintPass for MinMaxPass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((outer_max, outer_c, oe)) = min_max(cx, expr) {\n             if let Some((inner_max, inner_c, _)) = min_max(cx, oe) {\n                 if outer_max == inner_max {"}, {"sha": "0680f6b41a16257185a23ace4b2dac94e7cc5c17", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -166,8 +166,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_fn<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, k: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span, _: NodeId) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, k: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span, _: NodeId) {\n         if let FnKind::Closure(_) = k {\n             // Does not apply to closures\n             return;\n@@ -182,7 +182,7 @@ impl LateLintPass for Pass {\n         }\n     }\n \n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, s: &'tcx Stmt) {\n         if_let_chain! {[\n             let StmtDecl(ref d, _) = s.node,\n             let DeclLocal(ref l) = d.node,\n@@ -216,7 +216,7 @@ impl LateLintPass for Pass {\n         }}\n     }\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n             let op = cmp.node;\n             if op.is_comparison() {\n@@ -294,7 +294,7 @@ impl LateLintPass for Pass {\n         }\n     }\n \n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n         if let PatKind::Binding(_, _, ref ident, Some(ref right)) = pat.node {\n             if right.node == PatKind::Wild {\n                 span_lint(cx,"}, {"sha": "2f3bdeb053c8fe3406f72939fe5215efbd54e8a9", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -94,8 +94,8 @@ impl LintPass for MissingDoc {\n     }\n }\n \n-impl LateLintPass for MissingDoc {\n-    fn enter_lint_attrs<'a, 'tcx: 'a>(&mut self, _: &LateContext<'a, 'tcx>, attrs: &'tcx [ast::Attribute]) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n+    fn enter_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, attrs: &'tcx [ast::Attribute]) {\n         let doc_hidden = self.doc_hidden() || attrs.iter().any(|attr| {\n             attr.check_name(\"doc\") && match attr.meta_item_list() {\n                 None => false,\n@@ -105,15 +105,15 @@ impl LateLintPass for MissingDoc {\n         self.doc_hidden_stack.push(doc_hidden);\n     }\n \n-    fn exit_lint_attrs<'a, 'tcx: 'a>(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) {\n+    fn exit_lint_attrs(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx [ast::Attribute]) {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         self.check_missing_docs_attrs(cx, &krate.attrs, krate.span, \"crate\");\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n         let desc = match it.node {\n             hir::ItemConst(..) => \"a constant\",\n             hir::ItemEnum(..) => \"an enum\",\n@@ -134,7 +134,7 @@ impl LateLintPass for MissingDoc {\n         self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem) {\n         let desc = match trait_item.node {\n             hir::ConstTraitItem(..) => \"an associated constant\",\n             hir::MethodTraitItem(..) => \"a trait method\",\n@@ -144,7 +144,7 @@ impl LateLintPass for MissingDoc {\n         self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n         let def_id = cx.tcx.map.local_def_id(impl_item.id);\n         match cx.tcx.associated_item(def_id).container {\n@@ -164,13 +164,13 @@ impl LateLintPass for MissingDoc {\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n     }\n \n-    fn check_struct_field<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, sf: &'tcx hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, sf: &'tcx hir::StructField) {\n         if !sf.is_positional() {\n             self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a struct field\");\n         }\n     }\n \n-    fn check_variant<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant, _: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, v: &'tcx hir::Variant, _: &hir::Generics) {\n         self.check_missing_docs_attrs(cx, &v.node.attrs, v.span, \"a variant\");\n     }\n }"}, {"sha": "40bb77871dbc641caaa23351c44474c078261507", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -31,12 +31,12 @@ impl LintPass for MutMut {\n     }\n }\n \n-impl LateLintPass for MutMut {\n-    fn check_block<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx hir::Block) {\n         intravisit::walk_block(&mut MutVisitor { cx: cx }, block);\n     }\n \n-    fn check_ty<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n+    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n         use rustc::hir::intravisit::Visitor;\n \n         MutVisitor { cx: cx }.visit_ty(ty);"}, {"sha": "c189ecba6de714ff21d0b1f8af6f350551b629fc", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for UnnecessaryMutPassed {\n     }\n }\n \n-impl LateLintPass for UnnecessaryMutPassed {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         let borrowed_table = cx.tcx.tables.borrow();\n         match e.node {\n             ExprCall(ref fn_expr, ref arguments) => {"}, {"sha": "8d927110b9d22494495c35ed84660e256a1e2c1b", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -54,8 +54,8 @@ impl LintPass for MutexAtomic {\n \n pub struct MutexAtomic;\n \n-impl LateLintPass for MutexAtomic {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutexAtomic {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         let ty = cx.tcx.tables().expr_ty(expr);\n         if let ty::TyAdt(_, subst) = ty.sty {\n             if match_type(cx, ty, &paths::MUTEX) {"}, {"sha": "3b08ebdbc8e04d03f252e6e17b1470afe4caa5ba", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -56,8 +56,8 @@ impl LintPass for NeedlessBool {\n     }\n }\n \n-impl LateLintPass for NeedlessBool {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use self::Expression::*;\n         if let ExprIf(ref pred, ref then_block, Some(ref else_expr)) = e.node {\n             let reduce = |ret, not| {\n@@ -116,8 +116,8 @@ impl LintPass for BoolComparison {\n     }\n }\n \n-impl LateLintPass for BoolComparison {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoolComparison {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use self::Expression::*;\n         if let ExprBinary(Spanned { node: BiEq, .. }, ref left_side, ref right_side) = e.node {\n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {"}, {"sha": "935e0da8c3edcd43c7e3ae595aa5b974d56945ca", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -34,8 +34,8 @@ impl LintPass for NeedlessBorrow {\n     }\n }\n \n-impl LateLintPass for NeedlessBorrow {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if in_macro(cx, e.span) {\n             return;\n         }\n@@ -53,7 +53,7 @@ impl LateLintPass for NeedlessBorrow {\n             }\n         }\n     }\n-    fn check_pat<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n+    fn check_pat(&mut self, cx: &LateContext<'a, 'tcx>, pat: &'tcx Pat) {\n         if in_macro(cx, pat.span) {\n             return;\n         }"}, {"sha": "de6277aa0ee5c8cefc6daaa9b8b019dff197ca4c", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -30,8 +30,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprStruct(_, ref fields, Some(ref base)) = expr.node {\n             let ty = cx.tcx.tables().expr_ty(expr);\n             if let TyAdt(def, _) = ty.sty {"}, {"sha": "05a6a92c9e9da5a76e359fd72f6cebc66b931854", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -31,8 +31,8 @@ impl LintPass for NegMultiply {\n }\n \n #[allow(match_same_arms)]\n-impl LateLintPass for NegMultiply {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(Spanned { node: BiMul, .. }, ref l, ref r) = e.node {\n             match (&l.node, &r.node) {\n                 (&ExprUnary(..), &ExprUnary(..)) => (),"}, {"sha": "f4a7ebee590f9f91cb0cc7e38ecf09a81e7c5168", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -89,8 +89,8 @@ impl LintPass for NewWithoutDefault {\n     }\n }\n \n-impl LateLintPass for NewWithoutDefault {\n-    fn check_fn<'a, 'tcx: 'a>(\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n+    fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,"}, {"sha": "4a4b73b697f82cee0e8e9fa9225f149e5fed786f", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -102,8 +102,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtSemi(ref expr, _) = stmt.node {\n             if has_no_effect(cx, expr) {\n                 span_lint(cx, NO_EFFECT, stmt.span, \"statement with no effect\");"}, {"sha": "6ac49c1f575d0886c23ae6141396f28d00140120", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -40,8 +40,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain! {[ //begin checking variables\n             let ExprMatch(ref op, ref body, ref source) = expr.node, //test if expr is a match\n             let MatchSource::IfLetDesugar { .. } = *source, //test if it is an If Let"}, {"sha": "f102bdcab33d7bf77e1dd983666c8a1b7e44e2a5", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for NonSensical {\n     }\n }\n \n-impl LateLintPass for NonSensical {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSensical {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprMethodCall(ref name, _, ref arguments) = e.node {\n             let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.tables().expr_ty(&arguments[0]));\n             if &*name.node.as_str() == \"open\" && match_type(cx, obj_ty, &paths::OPEN_OPTIONS) {"}, {"sha": "a09ff3bebf6837d86ea4d524beee09775b8b7ec9", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -29,9 +29,9 @@ impl LintPass for OverflowCheckConditional {\n     }\n }\n \n-impl LateLintPass for OverflowCheckConditional {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OverflowCheckConditional {\n     // a + b < a, a > a + b, a < a - b, a - b > a\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain! {[\n             let Expr_::ExprBinary(ref op, ref first, ref second) = expr.node,\n             let Expr_::ExprBinary(ref op2, ref ident1, ref ident2) = first.node,"}, {"sha": "3b4fbb3ab1b6da937baaeb9cf2739dd64f3542a2", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain! {[\n             let ExprBlock(ref block) = expr.node,\n             let Some(ref ex) = block.expr,"}, {"sha": "2677b40f757a9d4d57ce363d9d1b44ae28760321", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -35,8 +35,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if_let_chain! {[\n             let ItemImpl(_, _, _, Some(ref trait_ref), _, ref impl_items) = item.node,\n             !is_automatically_derived(&*item.attrs),"}, {"sha": "daa55c9675fcb029b6427384ab2bffe37d042b77", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -65,8 +65,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain! {[\n             let ExprCall(ref fun, ref args) = expr.node,\n             let ExprPath(ref qpath) = fun.node,"}, {"sha": "f1fdc78aca4a46651c1334592204a480c7b375b0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -54,14 +54,14 @@ impl LintPass for PointerPass {\n     }\n }\n \n-impl LateLintPass for PointerPass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemFn(ref decl, _, _, _, _, _) = item.node {\n             check_fn(cx, decl, item.id);\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, _) = item.node {\n             if let Some(NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n                 if let ItemImpl(_, _, _, Some(_), _, _) = it.node {\n@@ -72,13 +72,13 @@ impl LateLintPass for PointerPass {\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         if let MethodTraitItem(ref sig, _) = item.node {\n             check_fn(cx, &sig.decl, item.id);\n         }\n     }\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprBinary(ref op, ref l, ref r) = expr.node {\n             if (op.node == BiEq || op.node == BiNe) && (is_null_path(l) || is_null_path(r)) {\n                 span_lint(cx,"}, {"sha": "78f09700203982fa56262f149ce758aab426774f", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -46,8 +46,8 @@ impl LintPass for StepByZero {\n     }\n }\n \n-impl LateLintPass for StepByZero {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StepByZero {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprMethodCall(Spanned { node: ref name, .. }, _, ref args) = expr.node {\n             let name = &*name.as_str();\n "}, {"sha": "6e6b6156d6e69e47c6f7a32879764704b1745fed", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -82,12 +82,12 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_crate<'a, 'tcx: 'a>(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_crate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n         self.spans.clear();\n     }\n \n-    fn check_block<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n         if_let_chain!{[\n             self.last.is_none(),\n             let Some(ref expr) = block.expr,\n@@ -106,13 +106,13 @@ impl LateLintPass for Pass {\n         }}\n     }\n \n-    fn check_block_post<'a, 'tcx: 'a>(&mut self, _: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n+    fn check_block_post(&mut self, _: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n         if self.last.map_or(false, |id| block.id == id) {\n             self.last = None;\n         }\n     }\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if_let_chain!{[\n             let ExprCall(ref fun, ref args) = expr.node,\n             let ExprPath(ref qpath) = fun.node,"}, {"sha": "ec4bce5570618a8db30f26c05e55f739627cf724", "filename": "clippy_lints/src/serde.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -26,8 +26,8 @@ impl LintPass for Serde {\n     }\n }\n \n-impl LateLintPass for Serde {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Serde {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, ref items) = item.node {\n             let did = trait_ref.path.def.def_id();\n             if let Some(visit_did) = get_trait_def_id(cx, &paths::SERDE_DE_VISITOR) {"}, {"sha": "2d32a87927415bf97028c25a65d45877005badcd", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -79,8 +79,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_fn<'a, 'tcx: 'a>(\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         _: FnKind<'tcx>,\n@@ -96,7 +96,7 @@ impl LateLintPass for Pass {\n     }\n }\n \n-fn check_fn<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, expr: &'tcx Expr) {\n+fn check_fn<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, expr: &'tcx Expr) {\n     let mut bindings = Vec::new();\n     for arg in &decl.inputs {\n         if let PatKind::Binding(_, _, ident, _) = arg.pat.node {\n@@ -106,7 +106,7 @@ fn check_fn<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl, expr:\n     check_expr(cx, expr, &mut bindings);\n }\n \n-fn check_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, bindings: &mut Vec<(Name, Span)>) {\n+fn check_block<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, bindings: &mut Vec<(Name, Span)>) {\n     let len = bindings.len();\n     for stmt in &block.stmts {\n         match stmt.node {\n@@ -121,7 +121,7 @@ fn check_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, block: &'tcx Block, bin\n     bindings.truncate(len);\n }\n \n-fn check_decl<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings: &mut Vec<(Name, Span)>) {\n+fn check_decl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings: &mut Vec<(Name, Span)>) {\n     if in_external_macro(cx, decl.span) {\n         return;\n     }\n@@ -150,7 +150,7 @@ fn is_binding(cx: &LateContext, pat_id: NodeId) -> bool {\n     }\n }\n \n-fn check_pat<'a, 'tcx: 'a>(\n+fn check_pat<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,\n     init: Option<&'tcx Expr>,\n@@ -285,7 +285,7 @@ fn lint_shadow<'a, 'tcx: 'a>(\n     }\n }\n \n-fn check_expr<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings: &mut Vec<(Name, Span)>) {\n+fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings: &mut Vec<(Name, Span)>) {\n     if in_external_macro(cx, expr.span) {\n         return;\n     }\n@@ -334,7 +334,7 @@ fn check_expr<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindin\n     }\n }\n \n-fn check_ty<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut Vec<(Name, Span)>) {\n+fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut Vec<(Name, Span)>) {\n     match ty.node {\n         TyObjectSum(ref sty, _) |\n         TySlice(ref sty) => check_ty(cx, sty, bindings),"}, {"sha": "01f2f66c2fdebd640475fc79779aece980c56375", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -79,8 +79,8 @@ impl LintPass for StringAdd {\n     }\n }\n \n-impl LateLintPass for StringAdd {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(Spanned { node: BiAdd, .. }, ref left, _) = e.node {\n             if is_string(cx, left) {\n                 if let Allow = cx.current_level(STRING_ADD_ASSIGN) {\n@@ -136,8 +136,8 @@ impl LintPass for StringLitAsBytes {\n     }\n }\n \n-impl LateLintPass for StringLitAsBytes {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use std::ascii::AsciiExt;\n         use syntax::ast::LitKind;\n         use utils::{snippet, in_macro};"}, {"sha": "7393ee3890e5cf35670c6f1836edaa757dbecf9b", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -50,8 +50,8 @@ impl LintPass for Swap {\n     }\n }\n \n-impl LateLintPass for Swap {\n-    fn check_block<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Swap {\n+    fn check_block(&mut self, cx: &LateContext<'a, 'tcx>, block: &'tcx Block) {\n         check_manual_swap(cx, block);\n         check_suspicious_swap(cx, block);\n     }"}, {"sha": "2f6e6d97fbf7ef5566354397905c3adecd802f70", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -37,8 +37,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprAssign(ref target, _) = expr.node {\n             match target.node {\n                 ExprField(ref base, _) |"}, {"sha": "b6731db93839cac2aab4823a9e3d5f6a5ffd4e4a", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -84,8 +84,8 @@ impl LintPass for Transmute {\n     }\n }\n \n-impl LateLintPass for Transmute {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprCall(ref path_expr, ref args) = e.node {\n             if let ExprPath(ref qpath) = path_expr.node {\n                 let def_id = cx.tcx.tables().qpath_def(qpath, path_expr.id).def_id();"}, {"sha": "d2bc850e2078ddc217e935894334c26dd20c51ee", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -69,8 +69,8 @@ impl LintPass for TypePass {\n     }\n }\n \n-impl LateLintPass for TypePass {\n-    fn check_ty<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, ast_ty: &'tcx Ty) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n+    fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ast_ty: &'tcx Ty) {\n         if in_macro(cx, ast_ty.span) {\n             return;\n         }\n@@ -153,8 +153,8 @@ impl LintPass for LetPass {\n     }\n }\n \n-impl LateLintPass for LetPass {\n-    fn check_decl<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetPass {\n+    fn check_decl(&mut self, cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl) {\n         check_let_unit(cx, decl)\n     }\n }\n@@ -190,8 +190,8 @@ impl LintPass for UnitCmp {\n     }\n }\n \n-impl LateLintPass for UnitCmp {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n         }\n@@ -447,8 +447,8 @@ impl LintPass for CastPass {\n     }\n }\n \n-impl LateLintPass for CastPass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprCast(ref ex, _) = expr.node {\n             let (cast_from, cast_to) = (cx.tcx.tables().expr_ty(ex), cx.tcx.tables().expr_ty(expr));\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx, expr.span) {\n@@ -535,17 +535,17 @@ impl LintPass for TypeComplexityPass {\n     }\n }\n \n-impl LateLintPass for TypeComplexityPass {\n-    fn check_fn<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, _: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span, _: NodeId) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n+    fn check_fn(&mut self, cx: &LateContext<'a, 'tcx>, _: FnKind<'tcx>, decl: &'tcx FnDecl, _: &'tcx Expr, _: Span, _: NodeId) {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx StructField) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }\n \n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         match item.node {\n             ItemStatic(ref ty, _, _) |\n             ItemConst(ref ty, _) => self.check_type(cx, ty),\n@@ -554,7 +554,7 @@ impl LateLintPass for TypeComplexityPass {\n         }\n     }\n \n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem) {\n         match item.node {\n             ConstTraitItem(ref ty, _) |\n             TypeTraitItem(_, Some(ref ty)) => self.check_type(cx, ty),\n@@ -564,7 +564,7 @@ impl LateLintPass for TypeComplexityPass {\n         }\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         match item.node {\n             ImplItemKind::Const(ref ty, _) |\n             ImplItemKind::Type(ref ty) => self.check_type(cx, ty),\n@@ -573,15 +573,15 @@ impl LateLintPass for TypeComplexityPass {\n         }\n     }\n \n-    fn check_local<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, local: &'tcx Local) {\n+    fn check_local(&mut self, cx: &LateContext<'a, 'tcx>, local: &'tcx Local) {\n         if let Some(ref ty) = local.ty {\n             self.check_type(cx, ty);\n         }\n     }\n }\n \n-impl TypeComplexityPass {\n-    fn check_fndecl<'a, 'tcx: 'a>(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl) {\n+impl<'a, 'tcx> TypeComplexityPass {\n+    fn check_fndecl(&self, cx: &LateContext<'a, 'tcx>, decl: &'tcx FnDecl) {\n         for arg in &decl.inputs {\n             self.check_type(cx, &arg.ty);\n         }\n@@ -590,7 +590,7 @@ impl TypeComplexityPass {\n         }\n     }\n \n-    fn check_type<'a, 'tcx: 'a>(&self, cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty) {\n+    fn check_type(&self, cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty) {\n         if in_macro(cx, ty.span) {\n             return;\n         }\n@@ -682,8 +682,8 @@ impl LintPass for CharLitAsU8 {\n     }\n }\n \n-impl LateLintPass for CharLitAsU8 {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         use syntax::ast::{LitKind, UintTy};\n \n         if let ExprCast(ref e, _) = expr.node {\n@@ -846,8 +846,8 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n     })\n }\n \n-impl LateLintPass for AbsurdExtremeComparisons {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         use types::ExtremeType::*;\n         use types::AbsurdComparisonResult::*;\n \n@@ -1071,8 +1071,8 @@ fn upcast_comparison_bounds_err(cx: &LateContext, span: &Span, rel: comparisons:\n     }\n }\n \n-impl LateLintPass for InvalidUpcastComparisons {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidUpcastComparisons {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprBinary(ref cmp, ref lhs, ref rhs) = expr.node {\n \n             let normalized = comparisons::normalize_comparison(cmp.node, lhs, rhs);"}, {"sha": "1d5ab7db3461c2749f857305df20031303125150", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -68,8 +68,8 @@ impl LintPass for Unicode {\n     }\n }\n \n-impl LateLintPass for Unicode {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unicode {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprLit(ref lit) = expr.node {\n             if let LitKind::Str(_, _) = lit.node {\n                 check_str(cx, lit.span)"}, {"sha": "4f1e01af6e9f1e0458269a4c17f977a4fbb8a858", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -40,8 +40,8 @@ impl LintPass for UnusedLabel {\n     }\n }\n \n-impl LateLintPass for UnusedLabel {\n-    fn check_fn<'a, 'tcx: 'a>(\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedLabel {\n+    fn check_fn(\n         &mut self,\n         cx: &LateContext<'a, 'tcx>,\n         kind: FnKind<'tcx>,"}, {"sha": "b2900c5691c7caa838785565fb27a724f0349586", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -36,15 +36,15 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n         if !has_attr(&item.attrs) {\n             return;\n         }\n         print_item(cx, item);\n     }\n \n-    fn check_impl_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n         if !has_attr(&item.attrs) {\n             return;\n         }\n@@ -68,33 +68,33 @@ impl LateLintPass for Pass {\n         }\n     }\n /*\n-    fn check_trait_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n         if !has_attr(&item.attrs) {\n             return;\n         }\n     }\n \n-    fn check_variant<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, _: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'a, 'tcx>, var: &'tcx hir::Variant, _: &hir::Generics) {\n         if !has_attr(&var.node.attrs) {\n             return;\n         }\n     }\n \n-    fn check_struct_field<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n         if !has_attr(&field.attrs) {\n             return;\n         }\n     }\n */\n \n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if !has_attr(&expr.attrs) {\n             return;\n         }\n         print_expr(cx, expr, 0);\n     }\n \n-    fn check_arm<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, arm: &'tcx hir::Arm) {\n+    fn check_arm(&mut self, cx: &LateContext<'a, 'tcx>, arm: &'tcx hir::Arm) {\n         if !has_attr(&arm.attrs) {\n             return;\n         }\n@@ -109,7 +109,7 @@ impl LateLintPass for Pass {\n         print_expr(cx, &arm.body, 1);\n     }\n \n-    fn check_stmt<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx hir::Stmt) {\n+    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx hir::Stmt) {\n         if !has_attr(stmt.node.attrs()) {\n             return;\n         }\n@@ -120,7 +120,7 @@ impl LateLintPass for Pass {\n     }\n /*\n \n-    fn check_foreign_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ForeignItem) {\n+    fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ForeignItem) {\n         if !has_attr(&item.attrs) {\n             return;\n         }"}, {"sha": "91961f90691952afad20a7e7b3161283dfd0105a", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -104,8 +104,8 @@ impl LintPass for LintWithoutLintPass {\n }\n \n \n-impl LateLintPass for LintWithoutLintPass {\n-    fn check_item<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemStatic(ref ty, MutImmutable, ref expr) = item.node {\n             if is_lint_ref_type(ty) {\n                 self.declared_lints.insert(item.name, item.span);\n@@ -116,7 +116,7 @@ impl LateLintPass for LintWithoutLintPass {\n         }\n     }\n \n-    fn check_crate_post<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n+    fn check_crate_post(&mut self, cx: &LateContext<'a, 'tcx>, _: &'tcx Crate) {\n         for (lint_name, &lint_span) in &self.declared_lints {\n             // When using the `declare_lint!` macro, the original `lint_span`'s\n             // file points to \"<rustc macros>\"."}, {"sha": "1cfb57496f7ab22963d15fca46b29658ed1332ef", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -32,8 +32,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // search for `&vec![_]` expressions where the adjusted type is `&[_]`\n         if_let_chain!{[\n             let ty::TypeVariants::TyRef(_, ref ty) = cx.tcx.tables().expr_ty_adjusted(expr).sty,"}, {"sha": "daf0721af05aed7fd62358e08ba760b0d778a307", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778ce4dfd359eb8071ad76aa6447b23ce7a0c752/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=778ce4dfd359eb8071ad76aa6447b23ce7a0c752", "patch": "@@ -27,8 +27,8 @@ impl LintPass for Pass {\n     }\n }\n \n-impl LateLintPass for Pass {\n-    fn check_expr<'a, 'tcx: 'a>(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         // check for instances of 0.0/0.0\n         if_let_chain! {[\n             let ExprBinary(ref op, ref left, ref right) = expr.node,"}]}