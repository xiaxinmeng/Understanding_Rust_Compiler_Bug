{"sha": "9af03bf342708f591f5596916b08d5d5d784245e", "node_id": "C_kwDOAAsO6NoAKDlhZjAzYmYzNDI3MDhmNTkxZjU1OTY5MTZiMDhkNWQ1ZDc4NDI0NWU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-01T18:10:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-01T18:10:24Z"}, "message": "add -Zmiri-strict-provenance", "tree": {"sha": "0b0fb9e26709dc15ef8161a9b2f81c61e6f70fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b0fb9e26709dc15ef8161a9b2f81c61e6f70fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af03bf342708f591f5596916b08d5d5d784245e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af03bf342708f591f5596916b08d5d5d784245e", "html_url": "https://github.com/rust-lang/rust/commit/9af03bf342708f591f5596916b08d5d5d784245e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af03bf342708f591f5596916b08d5d5d784245e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1ed17295962b51fa8f1df14e3ff551eabed582", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1ed17295962b51fa8f1df14e3ff551eabed582", "html_url": "https://github.com/rust-lang/rust/commit/6e1ed17295962b51fa8f1df14e3ff551eabed582"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "2203a0643a90568dc3f833c47a935f3dec163fe2", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -294,6 +294,10 @@ environment variable:\n   entropy.  The default seed is 0.  **NOTE**: This entropy is not good enough\n   for cryptographic use!  Do not generate secret keys in Miri or perform other\n   kinds of cryptographic operations that rely on proper random numbers.\n+* `-Zmiri-strict-provenance` enables [strict\n+  provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n+  casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance\n+  that cannot be used for any memory access. Also implies `-Zmiri-tag-raw-pointers`.\n * `-Zmiri-symbolic-alignment-check` makes the alignment check more strict.  By\n   default, alignment is checked by casting the pointer to an integer, and making\n   sure that is a multiple of the alignment.  This can lead to cases where a"}, {"sha": "5a9c96ef99b48e99d717a0ac4bce2e56a25e25f2", "filename": "src/bin/miri.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -363,6 +363,10 @@ fn main() {\n                 \"-Zmiri-tag-raw-pointers\" => {\n                     miri_config.tag_raw = true;\n                 }\n+                \"-Zmiri-strict-provenance\" => {\n+                    miri_config.strict_provenance = true;\n+                    miri_config.tag_raw = true;\n+                }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     eprintln!(\n                         \"WARNING: -Zmiri-track-raw-pointers has been renamed to -Zmiri-tag-raw-pointers, the old name is deprecated.\""}, {"sha": "788e30c9e78ec3a40a52f7afcad12eedf06e90b5", "filename": "src/eval.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -108,9 +108,13 @@ pub struct MiriConfig {\n     /// If `Some`, enable the `measureme` profiler, writing results to a file\n     /// with the specified prefix.\n     pub measureme_out: Option<String>,\n-    /// Panic when unsupported functionality is encountered\n+    /// Panic when unsupported functionality is encountered.\n     pub panic_on_unsupported: bool,\n+    /// Which style to use for printing backtraces.\n     pub backtrace_style: BacktraceStyle,\n+    /// Whether to enforce \"strict provenance\" rules. Enabling this means int2ptr casts return\n+    /// pointers with an invalid provenance, i.e., not valid for any memory access.\n+    pub strict_provenance: bool,\n }\n \n impl Default for MiriConfig {\n@@ -136,6 +140,7 @@ impl Default for MiriConfig {\n             measureme_out: None,\n             panic_on_unsupported: false,\n             backtrace_style: BacktraceStyle::Short,\n+            strict_provenance: false,\n         }\n     }\n }"}, {"sha": "9333536c9c5fcb1e9c92523d5489b304b496fed0", "filename": "src/intptrcast.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -15,23 +15,27 @@ pub type MemoryExtra = RefCell<GlobalState>;\n pub struct GlobalState {\n     /// This is used as a map between the address of each allocation and its `AllocId`.\n     /// It is always sorted\n-    pub int_to_ptr_map: Vec<(u64, AllocId)>,\n+    int_to_ptr_map: Vec<(u64, AllocId)>,\n     /// The base address for each allocation.  We cannot put that into\n     /// `AllocExtra` because function pointers also have a base address, and\n     /// they do not have an `AllocExtra`.\n     /// This is the inverse of `int_to_ptr_map`.\n-    pub base_addr: FxHashMap<AllocId, u64>,\n+    base_addr: FxHashMap<AllocId, u64>,\n     /// This is used as a memory address when a new pointer is casted to an integer. It\n     /// is always larger than any address that was previously made part of a block.\n-    pub next_base_addr: u64,\n+    next_base_addr: u64,\n+    /// Whether to enforce \"strict provenance\" rules. Enabling this means int2ptr casts return\n+    /// pointers with an invalid provenance, i.e., not valid for any memory access.\n+    strict_provenance: bool,\n }\n \n-impl Default for GlobalState {\n-    fn default() -> Self {\n+impl GlobalState {\n+    pub fn new(config: &MiriConfig) -> Self {\n         GlobalState {\n             int_to_ptr_map: Vec::default(),\n             base_addr: FxHashMap::default(),\n             next_base_addr: STACK_ADDR,\n+            strict_provenance: config.strict_provenance,\n         }\n     }\n }\n@@ -43,8 +47,12 @@ impl<'mir, 'tcx> GlobalState {\n     ) -> Pointer<Option<Tag>> {\n         trace!(\"Casting 0x{:x} to a pointer\", addr);\n         let global_state = memory.extra.intptrcast.borrow();\n-        let pos = global_state.int_to_ptr_map.binary_search_by_key(&addr, |(addr, _)| *addr);\n \n+        if global_state.strict_provenance {\n+            return Pointer::new(None, Size::from_bytes(addr));\n+        }\n+\n+        let pos = global_state.int_to_ptr_map.binary_search_by_key(&addr, |(addr, _)| *addr);\n         let alloc_id = match pos {\n             Ok(pos) => Some(global_state.int_to_ptr_map[pos].1),\n             Err(0) => None,"}, {"sha": "e9ed50724426f46d27b6cb584f5658d685bd6e82", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -205,7 +205,7 @@ impl MemoryExtra {\n         MemoryExtra {\n             stacked_borrows,\n             data_race,\n-            intptrcast: Default::default(),\n+            intptrcast: RefCell::new(intptrcast::GlobalState::new(config)),\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id: config.tracked_alloc_id,"}, {"sha": "49cce2750784abee1b387f7c4d65454e7d7bbc68", "filename": "tests/compile-fail/box-cell-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbox-cell-alias.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance\n \n // Taken from <https://github.com/rust-lang/unsafe-code-guidelines/issues/194#issuecomment-520934222>.\n "}, {"sha": "d45b3dcac087b28482391752427f5a51ccb6704b", "filename": "tests/compile-fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fzst_slice.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance\n // error-pattern: does not exist in the borrow stack\n \n fn main() {"}, {"sha": "6955d0243a9af0d1e14b171510740f885929ce46", "filename": "tests/compile-fail/strict-provenance-offset.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fstrict-provenance-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Fcompile-fail%2Fstrict-provenance-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrict-provenance-offset.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Zmiri-strict-provenance\n+// error-pattern: not a valid pointer\n+\n+fn main() {\n+    let x = 22;\n+    let ptr = &x as *const _ as *const u8;\n+    let roundtrip = ptr as usize as *const u8;\n+    let _ = unsafe { roundtrip.offset(1) };\n+}"}, {"sha": "4e11aa5917e31c8a4a2b05e974b9dc9dfcb9f82b", "filename": "tests/run-pass/btreemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbtreemap.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n #![feature(btree_drain_filter)]\n use std::collections::{BTreeMap, BTreeSet};\n use std::mem;"}, {"sha": "7d28cd726d0e2fec59dfd916ffba517bd76b4dfa", "filename": "tests/run-pass/concurrency/channels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fchannels.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,5 +1,4 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n \n use std::sync::mpsc::{channel, sync_channel};\n use std::thread;"}, {"sha": "95ede8e6c02d90f31e9caa55a5b0bfd07d31df57", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance -Zmiri-check-number-validity\n \n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n use std::thread;"}, {"sha": "8b4f2a6f79d36f507c9a7be56e757eb802a86dad", "filename": "tests/run-pass/concurrency/thread_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n \n //! The main purpose of this test is to check that if we take a pointer to\n //! thread's `t1` thread-local `A` and send it to another thread `t2`,"}, {"sha": "ef8b2c02ed928eec0ce95b79f33546e2f3757743", "filename": "tests/run-pass/concurrency/tls_lib_drop_single_thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop_single_thread.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n //! Check that destructors of the thread locals are executed on all OSes.\n \n use std::cell::RefCell;"}, {"sha": "fcc5156de89a7fd2b9404c5967c75086c27da95e", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}, {"sha": "1b3bef5e07b5e029edbde84ad29bff5a3e5ce7ec", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n #![feature(new_uninit)]\n #![feature(slice_as_chunks)]\n #![feature(slice_partition_dedup)]"}, {"sha": "5c36168a6ea3edfc30d6f8ecc38807c0d81507f1", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n \n fn empty() -> &'static str {\n     \"\""}, {"sha": "0d4c8016cdb6189aef349415c66fd738bd1c542e", "filename": "tests/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers -Zmiri-check-number-validity\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n // Gather all references from a mutable iterator and make sure Miri notices if\n // using them is dangerous.\n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}, {"sha": "8e8b395cbd9ae71b1f8971cb516dbd0c168c7b2c", "filename": "tests/run-pass/vecdeque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af03bf342708f591f5596916b08d5d5d784245e/tests%2Frun-pass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecdeque.rs?ref=9af03bf342708f591f5596916b08d5d5d784245e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-tag-raw-pointers\n+// compile-flags: -Zmiri-strict-provenance -Zmiri-check-number-validity\n use std::collections::VecDeque;\n \n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}]}