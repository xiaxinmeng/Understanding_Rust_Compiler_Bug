{"sha": "808f98378e28d9e32c6ac76ced921bc2c1fc8114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOGY5ODM3OGUyOGQ5ZTMyYzZhYzc2Y2VkOTIxYmMyYzFmYzgxMTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T13:27:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-10T13:27:36Z"}, "message": "Rollup merge of #63432 - Centril:simplify-lowering, r=eddyb\n\nCleanup & Simplify stuff in lowering\n\nCloses https://github.com/rust-lang/rust/issues/60253 as a byproduct.\n\nIt turns out that it is in fact necessary to have a `DropTemps(...)` around the `match_expr` and there is a test (https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-13304.rs) which fails without that.\n\nr? @eddyb", "tree": {"sha": "236fde72942de4aebe39eaa0ddc56f2b42c2777d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236fde72942de4aebe39eaa0ddc56f2b42c2777d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808f98378e28d9e32c6ac76ced921bc2c1fc8114", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdTsZICRBK7hj4Ov3rIwAAdHIIAKuDcKLs9wQkhP2UWUWBsLZF\n/WnNPFze8PYuzS1CBxho2fBLWb/7b/aSx03KA2OEHH3g42Ujrn9EiT6pD3QLwwaR\neobKV4Vr78C77pIbrfs/xZtlH+RlrwapTsJhzfylW1+5TJEo/x3kdQQzCVn7Tqvg\nuNn3pYt3MPQaPPsET23aQzDHT6hRtF7XZjx/43Q1wrSudCUZU32jI3KFHj5peVd3\nWCRv2XRpM3RhzSklu3WMLs1mrQDN4csD5San0pQX1EcmeulDpuJNZ4qIdrPwDO96\n+/mBb8wkOJuwnStNJPs10WZIBvct4qYBQ+HA9cWyrjfaHUdgcVhkIKDlfzVddKM=\n=dv0Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 236fde72942de4aebe39eaa0ddc56f2b42c2777d\nparent 219336a06c674aadae2d7db56d4e73ddfc6c5749\nparent 8758d7f69d1aa22810fa148996ccc3e22ed9e4b0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565443656 +0200\ncommitter GitHub <noreply@github.com> 1565443656 +0200\n\nRollup merge of #63432 - Centril:simplify-lowering, r=eddyb\n\nCleanup & Simplify stuff in lowering\n\nCloses https://github.com/rust-lang/rust/issues/60253 as a byproduct.\n\nIt turns out that it is in fact necessary to have a `DropTemps(...)` around the `match_expr` and there is a test (https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-13304.rs) which fails without that.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808f98378e28d9e32c6ac76ced921bc2c1fc8114", "html_url": "https://github.com/rust-lang/rust/commit/808f98378e28d9e32c6ac76ced921bc2c1fc8114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808f98378e28d9e32c6ac76ced921bc2c1fc8114/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219336a06c674aadae2d7db56d4e73ddfc6c5749", "url": "https://api.github.com/repos/rust-lang/rust/commits/219336a06c674aadae2d7db56d4e73ddfc6c5749", "html_url": "https://github.com/rust-lang/rust/commit/219336a06c674aadae2d7db56d4e73ddfc6c5749"}, {"sha": "8758d7f69d1aa22810fa148996ccc3e22ed9e4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8758d7f69d1aa22810fa148996ccc3e22ed9e4b0", "html_url": "https://github.com/rust-lang/rust/commit/8758d7f69d1aa22810fa148996ccc3e22ed9e4b0"}], "stats": {"total": 77, "additions": 34, "deletions": 43}, "files": [{"sha": "591ceaf28a6c6f2aca017e717e2624015d84a1fc", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/808f98378e28d9e32c6ac76ced921bc2c1fc8114/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808f98378e28d9e32c6ac76ced921bc2c1fc8114/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=808f98378e28d9e32c6ac76ced921bc2c1fc8114", "patch": "@@ -4440,23 +4440,23 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n+    fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> HirVec<hir::Expr> {\n+        exprs.iter().map(|x| self.lower_expr(x)).collect()\n+    }\n+\n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {\n         let kind = match e.node {\n             ExprKind::Box(ref inner) => hir::ExprKind::Box(P(self.lower_expr(inner))),\n-            ExprKind::Array(ref exprs) => {\n-                hir::ExprKind::Array(exprs.iter().map(|x| self.lower_expr(x)).collect())\n-            }\n+            ExprKind::Array(ref exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n             ExprKind::Repeat(ref expr, ref count) => {\n                 let expr = P(self.lower_expr(expr));\n                 let count = self.lower_anon_const(count);\n                 hir::ExprKind::Repeat(expr, count)\n             }\n-            ExprKind::Tup(ref elts) => {\n-                hir::ExprKind::Tup(elts.iter().map(|x| self.lower_expr(x)).collect())\n-            }\n+            ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),\n             ExprKind::Call(ref f, ref args) => {\n                 let f = P(self.lower_expr(f));\n-                hir::ExprKind::Call(f, args.iter().map(|x| self.lower_expr(x)).collect())\n+                hir::ExprKind::Call(f, self.lower_exprs(args))\n             }\n             ExprKind::MethodCall(ref seg, ref args) => {\n                 let hir_seg = P(self.lower_path_segment(\n@@ -4468,7 +4468,7 @@ impl<'a> LoweringContext<'a> {\n                     ImplTraitContext::disallowed(),\n                     None,\n                 ));\n-                let args = args.iter().map(|x| self.lower_expr(x)).collect();\n+                let args = self.lower_exprs(args);\n                 hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args)\n             }\n             ExprKind::Binary(binop, ref lhs, ref rhs) => {\n@@ -5042,17 +5042,9 @@ impl<'a> LoweringContext<'a> {\n                     ));\n                     let arms = hir_vec![pat_arm, break_arm];\n \n-                    P(self.expr(\n-                        head_sp,\n-                        hir::ExprKind::Match(\n-                            next_expr,\n-                            arms,\n-                            hir::MatchSource::ForLoopDesugar\n-                        ),\n-                        ThinVec::new(),\n-                    ))\n+                    self.expr_match(head_sp, next_expr, arms, hir::MatchSource::ForLoopDesugar)\n                 };\n-                let match_stmt = self.stmt(head_sp, hir::StmtKind::Expr(match_expr));\n+                let match_stmt = self.stmt_expr(head_sp, match_expr);\n \n                 let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat_hid));\n \n@@ -5076,8 +5068,8 @@ impl<'a> LoweringContext<'a> {\n                 );\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n-                let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let body_stmt = self.stmt(body.span, hir::StmtKind::Expr(body_expr));\n+                let body_expr = self.expr_block(body_block, ThinVec::new());\n+                let body_stmt = self.stmt_expr(body.span, body_expr);\n \n                 let loop_block = P(self.block_all(\n                     e.span,\n@@ -5120,8 +5112,10 @@ impl<'a> LoweringContext<'a> {\n                 ));\n \n                 // This is effectively `{ let _result = ...; _result }`.\n-                // The construct was introduced in #21984.\n-                // FIXME(60253): Is this still necessary?\n+                // The construct was introduced in #21984 and is necessary to make sure that\n+                // temporaries in the `head` expression are dropped and do not leak to the\n+                // surrounding scope of the `match` since the `match` is not a terminating scope.\n+                //\n                 // Also, add the attributes to the outer returned expr node.\n                 return self.expr_drop_temps(head_sp, match_expr, e.attrs.clone())\n             }\n@@ -5247,7 +5241,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt; 1]> {\n-        smallvec![match s.node {\n+        let node = match s.node {\n             StmtKind::Local(ref l) => {\n                 let (l, item_ids) = self.lower_local(l);\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n@@ -5284,21 +5278,14 @@ impl<'a> LoweringContext<'a> {\n                     })\n                     .collect();\n             }\n-            StmtKind::Expr(ref e) => {\n-                hir::Stmt {\n-                    hir_id: self.lower_node_id(s.id),\n-                    node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n-                    span: s.span,\n-                }\n-            },\n-            StmtKind::Semi(ref e) => {\n-                hir::Stmt {\n-                    hir_id: self.lower_node_id(s.id),\n-                    node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n-                    span: s.span,\n-                }\n-            },\n+            StmtKind::Expr(ref e) => hir::StmtKind::Expr(P(self.lower_expr(e))),\n+            StmtKind::Semi(ref e) => hir::StmtKind::Semi(P(self.lower_expr(e))),\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n+        };\n+        smallvec![hir::Stmt {\n+            hir_id: self.lower_node_id(s.id),\n+            node,\n+            span: s.span,\n         }]\n     }\n \n@@ -5560,6 +5547,10 @@ impl<'a> LoweringContext<'a> {\n         hir::Stmt { span, node, hir_id: self.next_id() }\n     }\n \n+    fn stmt_expr(&mut self, span: Span, expr: hir::Expr) -> hir::Stmt {\n+        self.stmt(span, hir::StmtKind::Expr(P(expr)))\n+    }\n+\n     fn stmt_let_pat(\n         &mut self,\n         attrs: ThinVec<Attribute>,\n@@ -6053,23 +6044,23 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         let match_stmt = {\n-            let match_expr = P(self.expr_match(\n+            let match_expr = self.expr_match(\n                 span,\n                 poll_expr,\n                 hir_vec![ready_arm, pending_arm],\n                 hir::MatchSource::AwaitDesugar,\n-            ));\n-            self.stmt(span, hir::StmtKind::Expr(match_expr))\n+            );\n+            self.stmt_expr(span, match_expr)\n         };\n \n         let yield_stmt = {\n             let unit = self.expr_unit(span);\n-            let yield_expr = P(self.expr(\n+            let yield_expr = self.expr(\n                 span,\n                 hir::ExprKind::Yield(P(unit), hir::YieldSource::Await),\n                 ThinVec::new(),\n-            ));\n-            self.stmt(span, hir::StmtKind::Expr(yield_expr))\n+            );\n+            self.stmt_expr(span, yield_expr)\n         };\n \n         let loop_block = P(self.block_all("}]}