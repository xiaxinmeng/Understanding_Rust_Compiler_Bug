{"sha": "7344f930c053395909a965c413a906415e5a5d8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDRmOTMwYzA1MzM5NTkwOWE5NjVjNDEzYTkwNjQxNWU1YTVkOGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-12T08:43:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-12T08:43:08Z"}, "message": "Rollup merge of #76114 - marmeladema:duration-saturating-ops, r=shepmaster\n\nAdd saturating methods for `Duration`\n\nIn some project, I needed a `saturating_add` method for `Duration`. I implemented it myself but i thought it would be a nice addition to the standard library as it matches closely with the integers types.\n\n3 new methods have been introduced and are gated by the new `duration_saturating_ops` unstable feature:\n* `Duration::saturating_add`\n* `Duration::saturating_sub`\n* `Duration::saturating_mul`\n\nIf have left the tracking issue to `none` for now as I want first to understand if those methods would be acceptable at all. If agreed, I'll update the PR with the tracking issue.\n\nFurther more, to match the behavior of integers types, I introduced 2 associated constants:\n* `Duration::MIN`: this one is somehow a duplicate from `Duration::zero()` method, but at the time this method was added, `MIN` was rejected as it was considered a different semantic (see https://github.com/rust-lang/rust/pull/72790#issuecomment-636511743).\n* `Duration::MAX`\n\nBoth have been gated by the already existing unstable feature `duration_constants`, I can introduce a new unstable feature if needed or just re-use the `duration_saturating_ops`.\n\nWe might have to decide whether:\n* `MIN` should be replaced by `ZERO`?\n* associated constants over methods?", "tree": {"sha": "5a21b74d782ed354544dca96ad41df2ad0cb9187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a21b74d782ed354544dca96ad41df2ad0cb9187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7344f930c053395909a965c413a906415e5a5d8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXIocCRBK7hj4Ov3rIwAAdHIIABc+JKJVun+AOAr54sWPWlqR\npXOnajzahMQ6cAUcOQ/biZaHGaW2qkZ8MYcWqa6H2NHkxR/kut3FR9jjghJoBzmu\nE3PLWFAzd4oGaCfV8RMuPWVLcddVMQhRpKPvT8m8EVkxaqUj4EYPB+M21D/b6jsq\nbRiGovf8a7KnU5KqeM4UB69GQFe8O126y/TFP8fnnAJDXPEGf/uQJOU/3NJcO9YF\nc12/3xAl/SPgTfVMTjVPJYTBubEPcD2WEG5mxNSFaQoTjX85ymSDt3cz7wuFDvLx\nzJWyZcOi89Y2RCKm5f1QLilKLPwCKVPS4OsmJ/fPw/e/iKxHRvmKsjo2CtFAesA=\n=R/Vs\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a21b74d782ed354544dca96ad41df2ad0cb9187\nparent 0f5c76951327b912c8e92e83235430ebd9b349d9\nparent b869aa5f316ae065ce2215e69811e3216c6250cb\nauthor Ralf Jung <post@ralfj.de> 1599900188 +0200\ncommitter GitHub <noreply@github.com> 1599900188 +0200\n\nRollup merge of #76114 - marmeladema:duration-saturating-ops, r=shepmaster\n\nAdd saturating methods for `Duration`\n\nIn some project, I needed a `saturating_add` method for `Duration`. I implemented it myself but i thought it would be a nice addition to the standard library as it matches closely with the integers types.\n\n3 new methods have been introduced and are gated by the new `duration_saturating_ops` unstable feature:\n* `Duration::saturating_add`\n* `Duration::saturating_sub`\n* `Duration::saturating_mul`\n\nIf have left the tracking issue to `none` for now as I want first to understand if those methods would be acceptable at all. If agreed, I'll update the PR with the tracking issue.\n\nFurther more, to match the behavior of integers types, I introduced 2 associated constants:\n* `Duration::MIN`: this one is somehow a duplicate from `Duration::zero()` method, but at the time this method was added, `MIN` was rejected as it was considered a different semantic (see https://github.com/rust-lang/rust/pull/72790#issuecomment-636511743).\n* `Duration::MAX`\n\nBoth have been gated by the already existing unstable feature `duration_constants`, I can introduce a new unstable feature if needed or just re-use the `duration_saturating_ops`.\n\nWe might have to decide whether:\n* `MIN` should be replaced by `ZERO`?\n* associated constants over methods?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7344f930c053395909a965c413a906415e5a5d8f", "html_url": "https://github.com/rust-lang/rust/commit/7344f930c053395909a965c413a906415e5a5d8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7344f930c053395909a965c413a906415e5a5d8f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5c76951327b912c8e92e83235430ebd9b349d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5c76951327b912c8e92e83235430ebd9b349d9", "html_url": "https://github.com/rust-lang/rust/commit/0f5c76951327b912c8e92e83235430ebd9b349d9"}, {"sha": "b869aa5f316ae065ce2215e69811e3216c6250cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869aa5f316ae065ce2215e69811e3216c6250cb", "html_url": "https://github.com/rust-lang/rust/commit/b869aa5f316ae065ce2215e69811e3216c6250cb"}], "stats": {"total": 172, "additions": 156, "deletions": 16}, "files": [{"sha": "c3cadcbb01e31b339071c6d3bb8c12d4ab76bb75", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7344f930c053395909a965c413a906415e5a5d8f", "patch": "@@ -100,6 +100,7 @@\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n #![feature(duration_consts_2)]\n+#![feature(duration_saturating_ops)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]"}, {"sha": "f39781788d7c04e09a5da36744a9ab77e5b37553", "filename": "library/core/src/time.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=7344f930c053395909a965c413a906415e5a5d8f", "patch": "@@ -108,6 +108,34 @@ impl Duration {\n     #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n     pub const NANOSECOND: Duration = Duration::from_nanos(1);\n \n+    /// The minimum duration.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_constants)]\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::MIN, Duration::new(0, 0));\n+    /// ```\n+    #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+    pub const MIN: Duration = Duration::from_nanos(0);\n+\n+    /// The maximum duration.\n+    ///\n+    /// It is roughly equal to a duration of 584,942,417,355 years.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_constants)]\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::MAX, Duration::new(u64::MAX, 1_000_000_000 - 1));\n+    /// ```\n+    #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+    pub const MAX: Duration = Duration::new(u64::MAX, NANOS_PER_SEC - 1);\n+\n     /// Creates a new `Duration` from the specified number of whole seconds and\n     /// additional nanoseconds.\n     ///\n@@ -450,6 +478,29 @@ impl Duration {\n         }\n     }\n \n+    /// Saturating `Duration` addition. Computes `self + other`, returning [`Duration::MAX`]\n+    /// if overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_saturating_ops)]\n+    /// #![feature(duration_constants)]\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::new(0, 1));\n+    /// assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n+    /// ```\n+    #[unstable(feature = \"duration_saturating_ops\", issue = \"76416\")]\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn saturating_add(self, rhs: Duration) -> Duration {\n+        match self.checked_add(rhs) {\n+            Some(res) => res,\n+            None => Duration::MAX,\n+        }\n+    }\n+\n     /// Checked `Duration` subtraction. Computes `self - other`, returning [`None`]\n     /// if the result would be negative or if overflow occurred.\n     ///\n@@ -485,6 +536,29 @@ impl Duration {\n         }\n     }\n \n+    /// Saturating `Duration` subtraction. Computes `self - other`, returning [`Duration::MIN`]\n+    /// if the result would be negative or if overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_saturating_ops)]\n+    /// #![feature(duration_constants)]\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));\n+    /// assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::MIN);\n+    /// ```\n+    #[unstable(feature = \"duration_saturating_ops\", issue = \"76416\")]\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n+        match self.checked_sub(rhs) {\n+            Some(res) => res,\n+            None => Duration::MIN,\n+        }\n+    }\n+\n     /// Checked `Duration` multiplication. Computes `self * other`, returning\n     /// [`None`] if overflow occurred.\n     ///\n@@ -515,6 +589,29 @@ impl Duration {\n         None\n     }\n \n+    /// Saturating `Duration` multiplication. Computes `self * other`, returning\n+    /// [`Duration::MAX`] if overflow occurred.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_saturating_ops)]\n+    /// #![feature(duration_constants)]\n+    /// use std::time::Duration;\n+    ///\n+    /// assert_eq!(Duration::new(0, 500_000_001).saturating_mul(2), Duration::new(1, 2));\n+    /// assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n+    /// ```\n+    #[unstable(feature = \"duration_saturating_ops\", issue = \"76416\")]\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn saturating_mul(self, rhs: u32) -> Duration {\n+        match self.checked_mul(rhs) {\n+            Some(res) => res,\n+            None => Duration::MAX,\n+        }\n+    }\n+\n     /// Checked `Duration` division. Computes `self / other`, returning [`None`]\n     /// if `other == 0`.\n     ///"}, {"sha": "a2e294ace1860f2226350fb80c1df9fd2c647e82", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7344f930c053395909a965c413a906415e5a5d8f", "patch": "@@ -10,6 +10,8 @@\n #![feature(core_private_diy_float)]\n #![feature(debug_non_exhaustive)]\n #![feature(dec2flt)]\n+#![feature(duration_constants)]\n+#![feature(duration_saturating_ops)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]"}, {"sha": "4f90eb63b0472393c2d8e7beeaef66b9f56d0cdb", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7344f930c053395909a965c413a906415e5a5d8f/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=7344f930c053395909a965c413a906415e5a5d8f", "patch": "@@ -89,6 +89,16 @@ fn checked_add() {\n     assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n }\n \n+#[test]\n+fn saturating_add() {\n+    assert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::new(0, 1));\n+    assert_eq!(\n+        Duration::new(0, 500_000_000).saturating_add(Duration::new(0, 500_000_001)),\n+        Duration::new(1, 1)\n+    );\n+    assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n+}\n+\n #[test]\n fn sub() {\n     assert_eq!(Duration::new(0, 1) - Duration::new(0, 0), Duration::new(0, 1));\n@@ -107,6 +117,17 @@ fn checked_sub() {\n     assert_eq!(zero.checked_sub(one_sec), None);\n }\n \n+#[test]\n+fn saturating_sub() {\n+    let zero = Duration::new(0, 0);\n+    let one_nano = Duration::new(0, 1);\n+    let one_sec = Duration::new(1, 0);\n+    assert_eq!(one_nano.saturating_sub(zero), Duration::new(0, 1));\n+    assert_eq!(one_sec.saturating_sub(one_nano), Duration::new(0, 999_999_999));\n+    assert_eq!(zero.saturating_sub(one_nano), Duration::MIN);\n+    assert_eq!(zero.saturating_sub(one_sec), Duration::MIN);\n+}\n+\n #[test]\n #[should_panic]\n fn sub_bad1() {\n@@ -136,6 +157,15 @@ fn checked_mul() {\n     assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n }\n \n+#[test]\n+fn saturating_mul() {\n+    assert_eq!(Duration::new(0, 1).saturating_mul(2), Duration::new(0, 2));\n+    assert_eq!(Duration::new(1, 1).saturating_mul(3), Duration::new(3, 3));\n+    assert_eq!(Duration::new(0, 500_000_001).saturating_mul(4), Duration::new(2, 4));\n+    assert_eq!(Duration::new(0, 500_000_001).saturating_mul(4000), Duration::new(2000, 4000));\n+    assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n+}\n+\n #[test]\n fn div() {\n     assert_eq!(Duration::new(0, 1) / 2, Duration::new(0, 0));"}, {"sha": "bc0969e4f1fbadfb9454ab2b0c6855be6b94b5f9", "filename": "src/test/ui/consts/duration-consts-2.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7344f930c053395909a965c413a906415e5a5d8f/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7344f930c053395909a965c413a906415e5a5d8f/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs?ref=7344f930c053395909a965c413a906415e5a5d8f", "patch": "@@ -3,6 +3,7 @@\n #![feature(const_panic)]\n #![feature(duration_consts_2)]\n #![feature(div_duration)]\n+#![feature(duration_saturating_ops)]\n \n use std::time::Duration;\n \n@@ -15,29 +16,29 @@ fn duration() {\n \n     const MAX : Duration = Duration::new(u64::MAX, 1_000_000_000 - 1);\n \n-    const MAX_ADD_ZERO : Option<Duration> = MAX.checked_add(ZERO);\n-    assert_eq!(MAX_ADD_ZERO, Some(MAX));\n+    const MAX_CHECKED_ADD_ZERO : Option<Duration> = MAX.checked_add(ZERO);\n+    assert_eq!(MAX_CHECKED_ADD_ZERO, Some(MAX));\n \n-    const MAX_ADD_ONE : Option<Duration> = MAX.checked_add(ONE);\n-    assert_eq!(MAX_ADD_ONE, None);\n+    const MAX_CHECKED_ADD_ONE : Option<Duration> = MAX.checked_add(ONE);\n+    assert_eq!(MAX_CHECKED_ADD_ONE, None);\n \n-    const ONE_SUB_ONE : Option<Duration> = ONE.checked_sub(ONE);\n-    assert_eq!(ONE_SUB_ONE, Some(ZERO));\n+    const ONE_CHECKED_SUB_ONE : Option<Duration> = ONE.checked_sub(ONE);\n+    assert_eq!(ONE_CHECKED_SUB_ONE, Some(ZERO));\n \n-    const ZERO_SUB_ONE : Option<Duration> = ZERO.checked_sub(ONE);\n-    assert_eq!(ZERO_SUB_ONE, None);\n+    const ZERO_CHECKED_SUB_ONE : Option<Duration> = ZERO.checked_sub(ONE);\n+    assert_eq!(ZERO_CHECKED_SUB_ONE, None);\n \n-    const ONE_MUL_ONE : Option<Duration> = ONE.checked_mul(1);\n-    assert_eq!(ONE_MUL_ONE, Some(ONE));\n+    const ONE_CHECKED_MUL_ONE : Option<Duration> = ONE.checked_mul(1);\n+    assert_eq!(ONE_CHECKED_MUL_ONE, Some(ONE));\n \n-    const MAX_MUL_TWO : Option<Duration> = MAX.checked_mul(2);\n-    assert_eq!(MAX_MUL_TWO, None);\n+    const MAX_CHECKED_MUL_TWO : Option<Duration> = MAX.checked_mul(2);\n+    assert_eq!(MAX_CHECKED_MUL_TWO, None);\n \n-    const ONE_DIV_ONE : Option<Duration> = ONE.checked_div(1);\n-    assert_eq!(ONE_DIV_ONE, Some(ONE));\n+    const ONE_CHECKED_DIV_ONE : Option<Duration> = ONE.checked_div(1);\n+    assert_eq!(ONE_CHECKED_DIV_ONE, Some(ONE));\n \n-    const ONE_DIV_ZERO : Option<Duration> = ONE.checked_div(0);\n-    assert_eq!(ONE_DIV_ZERO, None);\n+    const ONE_CHECKED_DIV_ZERO : Option<Duration> = ONE.checked_div(0);\n+    assert_eq!(ONE_CHECKED_DIV_ZERO, None);\n \n     const MAX_AS_F32 : f32 = MAX.as_secs_f32();\n     assert_eq!(MAX_AS_F32, 18446744000000000000.0_f32);\n@@ -50,6 +51,15 @@ fn duration() {\n \n     const ONE_AS_F64 : f64 = ONE.div_duration_f64(ONE);\n     assert_eq!(ONE_AS_F64, 1.0_f64);\n+\n+    const MAX_SATURATING_ADD_ONE : Duration = MAX.saturating_add(ONE);\n+    assert_eq!(MAX_SATURATING_ADD_ONE, MAX);\n+\n+    const ZERO_SATURATING_SUB_ONE : Duration = ZERO.saturating_sub(ONE);\n+    assert_eq!(ZERO_SATURATING_SUB_ONE, ZERO);\n+\n+    const MAX_SATURATING_MUL_TWO : Duration = MAX.saturating_mul(2);\n+    assert_eq!(MAX_SATURATING_MUL_TWO, MAX);\n }\n \n fn main() {"}]}