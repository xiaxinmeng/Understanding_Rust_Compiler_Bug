{"sha": "4840064f85a28c9332d928ad0631e9dc2d21e150", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NDAwNjRmODVhMjhjOTMzMmQ5MjhhZDA2MzFlOWRjMmQyMWUxNTA=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-29T19:30:31Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-11-29T19:36:47Z"}, "message": "Removed module macro workaround for signed and unsigned integers", "tree": {"sha": "2d5212be3bdb732b3110d839ef13721dd1545960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5212be3bdb732b3110d839ef13721dd1545960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4840064f85a28c9332d928ad0631e9dc2d21e150", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4840064f85a28c9332d928ad0631e9dc2d21e150", "html_url": "https://github.com/rust-lang/rust/commit/4840064f85a28c9332d928ad0631e9dc2d21e150", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4840064f85a28c9332d928ad0631e9dc2d21e150/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8ace823b33489284cc60aaab3945d764ab3394", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8ace823b33489284cc60aaab3945d764ab3394", "html_url": "https://github.com/rust-lang/rust/commit/0d8ace823b33489284cc60aaab3945d764ab3394"}], "stats": {"total": 150, "additions": 93, "deletions": 57}, "files": [{"sha": "fcf1f24d0e4555e8192a5150906c8dbcd549c037", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i16`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i16, 16)\n \n impl BitCount for i16 {"}, {"sha": "385e1c91ca503005014e7ec5da0b091db489aa33", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i32`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i32, 32)\n \n impl BitCount for i32 {"}, {"sha": "f6b369b1312a5ec494125cc991e0ae175f8017a5", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,14 +10,20 @@\n \n //! Operations and constants for `i64`\n \n-use num::{BitCount, CheckedAdd, CheckedSub};\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n+use num::{BitCount, CheckedAdd, CheckedSub};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i64, 64)\n \n impl BitCount for i64 {"}, {"sha": "9de90ca4657d1147388fb4f8b79c5a87e02eedf6", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,18 @@\n \n //! Operations and constants for `i8`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n int_module!(i8, 8)\n \n impl BitCount for i8 {"}, {"sha": "517bd45e45bd1b51d9d64554ea6e9908db96955d", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -12,16 +12,18 @@\n \n #[allow(non_uppercase_statics)];\n \n+use prelude::*;\n+\n+use default::Default;\n use num::{BitCount, CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n-#[cfg(target_word_size = \"32\")] pub static bits: uint = 32;\n-#[cfg(target_word_size = \"64\")] pub static bits: uint = 64;\n-\n-int_module!(int, super::bits)\n+#[cfg(target_word_size = \"32\")] int_module!(int, 32)\n+#[cfg(target_word_size = \"64\")] int_module!(int, 64)\n \n #[cfg(target_word_size = \"32\")]\n impl BitCount for int {"}, {"sha": "8c60b0ec75a694cb841cf92ac34d7334dcca0cc9", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -8,22 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(#4375):  This shouldn't have to be a nested module named 'generated'...\n-// FIXME(#10716): ... but now that we could solve that, the import lines and\n-//                attributes still prevent a removal of that module.\n-\n #[macro_escape];\n #[doc(hidden)];\n \n-macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n-\n-#[allow(non_uppercase_statics)];\n-\n-use default::Default;\n-use num::{ToStrRadix, FromStrRadix};\n-use num::{CheckedDiv, Zero, One, strconv};\n-use prelude::*;\n-use str;\n+macro_rules! int_module (($T:ty, $bits:expr) => (\n \n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n@@ -781,4 +769,4 @@ mod tests {\n     }\n }\n \n-}))\n+))"}, {"sha": "ed8ec3b6c54b919230c2c34beb7ab73521eee254", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u16`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u16, i16, 16)\n \n impl CheckedAdd for u16 {"}, {"sha": "2977549803384b5562e87227cc607425ca59a5dc", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u32`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u32, i32, 32)\n \n impl CheckedAdd for u32 {"}, {"sha": "dc43801eb3958b43fef8ea47e0e94286b2fec650", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,14 +10,21 @@\n \n //! Operations and constants for `u64`\n \n-use num::{CheckedAdd, CheckedSub};\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n #[cfg(target_word_size = \"64\")]\n use num::CheckedMul;\n+use num::{CheckedAdd, CheckedSub};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u64, i64, 64)\n \n impl CheckedAdd for u64 {"}, {"sha": "12ad4efdbd5d1d4197f00fb89ba6fe5cc9e6b1d3", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,12 +10,19 @@\n \n //! Operations and constants for `u8`\n \n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n \n-pub use self::generated::*;\n-\n uint_module!(u8, i8, 8)\n \n impl CheckedAdd for u8 {"}, {"sha": "549490050c590d412c3d70608ee05e44aca57132", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -10,13 +10,20 @@\n \n //! Operations and constants for `uint`\n \n-use num;\n+#[allow(non_uppercase_statics)];\n+\n+use prelude::*;\n+\n+use default::Default;\n+use mem;\n+use num::BitCount;\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n+use num::{CheckedDiv, Zero, One, strconv};\n+use num::{ToStrRadix, FromStrRadix};\n+use num;\n use option::{Option, Some, None};\n+use str;\n use unstable::intrinsics;\n-use mem;\n-\n-pub use self::generated::*;\n \n uint_module!(uint, int, ::int::bits)\n "}, {"sha": "ee3cd6446089a32bd3d74f030b0bc3b775c2b97e", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4840064f85a28c9332d928ad0631e9dc2d21e150/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=4840064f85a28c9332d928ad0631e9dc2d21e150", "patch": "@@ -8,23 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME(#4375):  This shouldn't have to be a nested module named 'generated'...\n-// FIXME(#10716): ... but now that we could solve that, the import lines and\n-//                attributes still prevent a removal of that module.\n-\n #[macro_escape];\n #[doc(hidden)];\n \n-macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n-\n-#[allow(non_uppercase_statics)];\n-\n-use default::Default;\n-use num::BitCount;\n-use num::{ToStrRadix, FromStrRadix};\n-use num::{CheckedDiv, Zero, One, strconv};\n-use prelude::*;\n-use str;\n+macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n pub static bits : uint = $bits;\n pub static bytes : uint = ($bits / 8);\n@@ -554,4 +541,4 @@ mod tests {\n     }\n }\n \n-}))\n+))"}]}