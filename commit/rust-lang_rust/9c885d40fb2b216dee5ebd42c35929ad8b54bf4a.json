{"sha": "9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODg1ZDQwZmIyYjIxNmRlZTVlYmQ0MmMzNTkyOWFkOGI1NGJmNGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T15:29:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-01T10:47:48Z"}, "message": "ast: Implement `TryFrom<ItemKind>` for associated and foreign items", "tree": {"sha": "19056d976b0b5e29bed6063a2939047f818595cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19056d976b0b5e29bed6063a2939047f818595cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "html_url": "https://github.com/rust-lang/rust/commit/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857e34c7a39f3bdab948888d36c2ee614fc73857", "url": "https://api.github.com/repos/rust-lang/rust/commits/857e34c7a39f3bdab948888d36c2ee614fc73857", "html_url": "https://github.com/rust-lang/rust/commit/857e34c7a39f3bdab948888d36c2ee614fc73857"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "685b21a1717245b3952d74c4949d798bbb2a9ed5", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "patch": "@@ -38,6 +38,7 @@ use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n+use std::convert::TryFrom;\n use std::fmt;\n use std::iter;\n \n@@ -2668,6 +2669,20 @@ impl From<AssocItemKind> for ItemKind {\n     }\n }\n \n+impl TryFrom<ItemKind> for AssocItemKind {\n+    type Error = ItemKind;\n+\n+    fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {\n+        Ok(match item_kind {\n+            ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n+            ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n+            ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+            _ => return Err(item_kind),\n+        })\n+    }\n+}\n+\n /// An item in `extern` block.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ForeignItemKind {\n@@ -2692,4 +2707,18 @@ impl From<ForeignItemKind> for ItemKind {\n     }\n }\n \n+impl TryFrom<ItemKind> for ForeignItemKind {\n+    type Error = ItemKind;\n+\n+    fn try_from(item_kind: ItemKind) -> Result<ForeignItemKind, ItemKind> {\n+        Ok(match item_kind {\n+            ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n+            ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n+            ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n+            ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n+            _ => return Err(item_kind),\n+        })\n+    }\n+}\n+\n pub type ForeignItem = Item<ForeignItemKind>;"}, {"sha": "08e74034e86a1be9920b7f9c7b20cc1572b604e6", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c885d40fb2b216dee5ebd42c35929ad8b54bf4a/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=9c885d40fb2b216dee5ebd42c35929ad8b54bf4a", "patch": "@@ -24,6 +24,7 @@ use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use log::debug;\n+use std::convert::TryFrom;\n use std::mem;\n \n pub(super) type ItemInfo = (Ident, ItemKind);\n@@ -647,16 +648,16 @@ impl<'a> Parser<'a> {\n     /// Parses associated items.\n     fn parse_assoc_item(&mut self, req_name: ReqName) -> PResult<'a, Option<Option<P<AssocItem>>>> {\n         Ok(self.parse_item_(req_name)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n-            let kind = match kind {\n-                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c, d) => AssocItemKind::Fn(a, b, c, d),\n-                ItemKind::TyAlias(a, b, c, d) => AssocItemKind::TyAlias(a, b, c, d),\n-                ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),\n-                ItemKind::Static(a, _, b) => {\n-                    self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n-                    AssocItemKind::Const(Defaultness::Final, a, b)\n-                }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n+            let kind = match AssocItemKind::try_from(kind) {\n+                Ok(kind) => kind,\n+                Err(kind) => match kind {\n+                    ItemKind::Static(a, _, b) => {\n+                        self.struct_span_err(span, \"associated `static` items are not allowed\")\n+                            .emit();\n+                        AssocItemKind::Const(Defaultness::Final, a, b)\n+                    }\n+                    _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n+                },\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n@@ -833,16 +834,15 @@ impl<'a> Parser<'a> {\n     /// Parses a foreign item (one in an `extern { ... }` block).\n     pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n         Ok(self.parse_item_(|_| true)?.map(|Item { attrs, id, span, vis, ident, kind, tokens }| {\n-            let kind = match kind {\n-                ItemKind::Mac(a) => ForeignItemKind::Macro(a),\n-                ItemKind::Fn(a, b, c, d) => ForeignItemKind::Fn(a, b, c, d),\n-                ItemKind::TyAlias(a, b, c, d) => ForeignItemKind::TyAlias(a, b, c, d),\n-                ItemKind::Static(a, b, c) => ForeignItemKind::Static(a, b, c),\n-                ItemKind::Const(_, a, b) => {\n-                    self.error_on_foreign_const(span, ident);\n-                    ForeignItemKind::Static(a, Mutability::Not, b)\n-                }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n+            let kind = match ForeignItemKind::try_from(kind) {\n+                Ok(kind) => kind,\n+                Err(kind) => match kind {\n+                    ItemKind::Const(_, a, b) => {\n+                        self.error_on_foreign_const(span, ident);\n+                        ForeignItemKind::Static(a, Mutability::Not, b)\n+                    }\n+                    _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n+                },\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))"}]}