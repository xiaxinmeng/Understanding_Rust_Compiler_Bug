{"sha": "fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "node_id": "C_kwDOAAsO6NoAKGZlOTYzNWY3YzA3NTFhYWEyM2YwYjBkMjMwOTg4MmExYTQ2NDFmOWI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-17T00:14:51Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-17T00:24:50Z"}, "message": "Fix pretty printing of empty type bound lists in where-clause", "tree": {"sha": "bf79f7eb3a18349397454f0b28bd7904f0ce1591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf79f7eb3a18349397454f0b28bd7904f0ce1591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKrydIACgkQ+boUO5X/\nbYKDrQ/+NDnREFDwIcs+VrrhJrAHA2vtADweYXdhTkQFO2l0qc1okRHoJJNDYAch\nMmLy4PjE/agGwN+eV2imhby0B1Jvt9yz6vXjDn6ZLZNA6DCtdvgYSLezSrVfK3mO\nNk1It3LwMCIkHK5kbVsaTG2ergseV7+A3VbrkKXHpZXcaJFVMR9tlWY+ETtFMVl2\n5/WisW8Y/r6x0s0E48eR+LXsEo1dDnPtMmyAZrsBzMCQV3astx9MUe1ZfSO2uJuo\n9Q5PLz9gRD2ZPkVgJsXVds3SVIS1EK6xkNqAWQsrpn/eT5Hqr4kwhQKQlqp1OmPD\n/+t6EkQpEfqQxL7SPk6/6ZKFp/9M93BHquZOSlIpunoaOlgTimJi9JlUmXqw8OKt\njRbIlabiHzHAC7h5nBplmLSmFiIAgnXLCABVV9dFqe1O5kdl6uTH7AQRXHf/n4S9\nguTRJCMZ+zdtEfCVj/CjmgPiLrM2UmKjYIQDmcYKsaQ9kWuo58ifPCcofP1Z7bg1\nzep5t5yMVo/AOy/8/KsqtztuEtsyNFQVn8L/Kvf0OTEVB4L0YbwGA7YT2jcVQoYA\ncjLXpyz+hL36OVxF0d7V7MzhF5Z/cPTe55CvcyFS7HoHc0hXMtJc+JxUuYbn9jKm\nw21JIhLnVgkEs2AJaaUIrQgQKJ4GZF/qxkSIFWhJdLLmwHukDCQ=\n=nTtI\n-----END PGP SIGNATURE-----", "payload": "tree bf79f7eb3a18349397454f0b28bd7904f0ce1591\nparent 1b8ca54002cec4affe363584ca0946568beeabf0\nauthor David Tolnay <dtolnay@gmail.com> 1655424891 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655425490 -0700\n\nFix pretty printing of empty type bound lists in where-clause\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "html_url": "https://github.com/rust-lang/rust/commit/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b8ca54002cec4affe363584ca0946568beeabf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8ca54002cec4affe363584ca0946568beeabf0", "html_url": "https://github.com/rust-lang/rust/commit/1b8ca54002cec4affe363584ca0946568beeabf0"}], "stats": {"total": 126, "additions": 76, "deletions": 50}, "files": [{"sha": "ad8dbfd506d212f32d9931d945995a597f0e515d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "patch": "@@ -814,7 +814,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {\n-        Self::to_string(|s| s.print_type_bounds(\"\", bounds))\n+        Self::to_string(|s| s.print_type_bounds(bounds))\n     }\n \n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n@@ -991,7 +991,12 @@ impl<'a> State<'a> {\n                     Term::Const(c) => self.print_expr_anon_const(c, &[]),\n                 }\n             }\n-            ast::AssocConstraintKind::Bound { bounds } => self.print_type_bounds(\":\", &*bounds),\n+            ast::AssocConstraintKind::Bound { bounds } => {\n+                if !bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&bounds);\n+                }\n+            }\n         }\n     }\n \n@@ -1045,11 +1050,14 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, false),\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n-                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n-                self.print_type_bounds(prefix, &bounds);\n+                if syntax == ast::TraitObjectSyntax::Dyn {\n+                    self.word_nbsp(\"dyn\");\n+                }\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::ImplTrait(_, ref bounds) => {\n-                self.print_type_bounds(\"impl\", &bounds);\n+                self.word_nbsp(\"impl\");\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::Array(ref ty, ref length) => {\n                 self.word(\"[\");\n@@ -1549,29 +1557,24 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_type_bounds(&mut self, prefix: &'static str, bounds: &[ast::GenericBound]) {\n-        if !bounds.is_empty() {\n-            self.word(prefix);\n-            let mut first = true;\n-            for bound in bounds {\n-                if !(first && prefix.is_empty()) {\n-                    self.nbsp();\n-                }\n-                if first {\n-                    first = false;\n-                } else {\n-                    self.word_space(\"+\");\n-                }\n+    pub fn print_type_bounds(&mut self, bounds: &[ast::GenericBound]) {\n+        let mut first = true;\n+        for bound in bounds {\n+            if first {\n+                first = false;\n+            } else {\n+                self.nbsp();\n+                self.word_space(\"+\");\n+            }\n \n-                match bound {\n-                    GenericBound::Trait(tref, modifier) => {\n-                        if modifier == &TraitBoundModifier::Maybe {\n-                            self.word(\"?\");\n-                        }\n-                        self.print_poly_trait_ref(tref);\n+            match bound {\n+                GenericBound::Trait(tref, modifier) => {\n+                    if modifier == &TraitBoundModifier::Maybe {\n+                        self.word(\"?\");\n                     }\n-                    GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                    self.print_poly_trait_ref(tref);\n                 }\n+                GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n             }\n         }\n     }\n@@ -1580,22 +1583,14 @@ impl<'a> State<'a> {\n         self.print_name(lifetime.ident.name)\n     }\n \n-    pub(crate) fn print_lifetime_bounds(\n-        &mut self,\n-        lifetime: ast::Lifetime,\n-        bounds: &ast::GenericBounds,\n-    ) {\n-        self.print_lifetime(lifetime);\n-        if !bounds.is_empty() {\n-            self.word(\": \");\n-            for (i, bound) in bounds.iter().enumerate() {\n-                if i != 0 {\n-                    self.word(\" + \");\n-                }\n-                match bound {\n-                    ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n-                    _ => panic!(),\n-                }\n+    pub(crate) fn print_lifetime_bounds(&mut self, bounds: &ast::GenericBounds) {\n+        for (i, bound) in bounds.iter().enumerate() {\n+            if i != 0 {\n+                self.word(\" + \");\n+            }\n+            match bound {\n+                ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                _ => panic!(),\n             }\n         }\n     }\n@@ -1613,11 +1608,18 @@ impl<'a> State<'a> {\n             match param.kind {\n                 ast::GenericParamKind::Lifetime => {\n                     let lt = ast::Lifetime { id: param.id, ident: param.ident };\n-                    s.print_lifetime_bounds(lt, &param.bounds)\n+                    s.print_lifetime(lt);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_lifetime_bounds(&param.bounds)\n+                    }\n                 }\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_ident(param.ident);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");\n@@ -1630,7 +1632,10 @@ impl<'a> State<'a> {\n                     s.space();\n                     s.word_space(\":\");\n                     s.print_type(ty);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");"}, {"sha": "f1caf22f3640fc9ced4e03f4df36e955e1ff58de", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "patch": "@@ -114,7 +114,10 @@ impl<'a> State<'a> {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n-        self.print_type_bounds(\":\", bounds);\n+        if !bounds.is_empty() {\n+            self.word_nbsp(\":\");\n+            self.print_type_bounds(bounds);\n+        }\n         self.print_where_clause_parts(where_clauses.0.0, before_predicates);\n         if let Some(ty) = ty {\n             self.space();\n@@ -320,7 +323,10 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_type_bounds(\":\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\" \");\n                 self.bopen();\n@@ -347,7 +353,10 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.nbsp();\n-                self.print_type_bounds(\"=\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\"=\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n                 self.end(); // end inner head-block\n@@ -618,14 +627,23 @@ impl<'a> State<'a> {\n             }) => {\n                 self.print_formal_generic_params(bound_generic_params);\n                 self.print_type(bounded_ty);\n-                self.print_type_bounds(\":\", bounds);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_type_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 lifetime,\n                 bounds,\n                 ..\n             }) => {\n-                self.print_lifetime_bounds(*lifetime, bounds);\n+                self.print_lifetime(*lifetime);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_lifetime_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { lhs_ty, rhs_ty, .. }) => {\n                 self.print_type(lhs_ty);"}, {"sha": "ed671e05970be50a99e5d0e1f1d0c20aa339d70a", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9635f7c0751aaa23f0b0d2309882a1a4641f9b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=fe9635f7c0751aaa23f0b0d2309882a1a4641f9b", "patch": "@@ -1355,7 +1355,10 @@ impl<'a> Parser<'a> {\n                     s.print_mutability(mut_ty.mutbl, false);\n                     s.popen();\n                     s.print_type(&mut_ty.ty);\n-                    s.print_type_bounds(\" +\", &bounds);\n+                    if !bounds.is_empty() {\n+                        s.word(\" + \");\n+                        s.print_type_bounds(&bounds);\n+                    }\n                     s.pclose()\n                 });\n "}]}