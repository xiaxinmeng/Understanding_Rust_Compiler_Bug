{"sha": "f4bb5a7c1a3183f1af14695a48258331b0360860", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YmI1YTdjMWEzMTgzZjFhZjE0Njk1YTQ4MjU4MzMxYjAzNjA4NjA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T14:40:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T23:44:45Z"}, "message": "Move playground to shared context", "tree": {"sha": "5d3da1f0a21af7a80217210431fe1ae5e850f37f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d3da1f0a21af7a80217210431fe1ae5e850f37f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bb5a7c1a3183f1af14695a48258331b0360860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bb5a7c1a3183f1af14695a48258331b0360860", "html_url": "https://github.com/rust-lang/rust/commit/f4bb5a7c1a3183f1af14695a48258331b0360860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bb5a7c1a3183f1af14695a48258331b0360860/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26518086eed253924f2f9b91f2dd812084e4b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26518086eed253924f2f9b91f2dd812084e4b31", "html_url": "https://github.com/rust-lang/rust/commit/c26518086eed253924f2f9b91f2dd812084e4b31"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "9d5cddd6d47a7dbd8fe5ec1374006398bfc2256d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 38, "deletions": 35, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb5a7c1a3183f1af14695a48258331b0360860/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb5a7c1a3183f1af14695a48258331b0360860/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f4bb5a7c1a3183f1af14695a48258331b0360860", "patch": "@@ -166,7 +166,6 @@ struct Context {\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n-    playground: Option<markdown::Playground>,\n }\n \n crate struct SharedContext {\n@@ -208,6 +207,7 @@ crate struct SharedContext {\n     /// The default edition used to parse doctests.\n     pub edition: Edition,\n     pub codes: ErrorCodes,\n+    playground: Option<markdown::Playground>,\n }\n \n impl SharedContext {\n@@ -518,31 +518,6 @@ pub fn run(mut krate: clean::Crate,\n         _ => PathBuf::new(),\n     };\n     let mut errors = Arc::new(ErrorStorage::new());\n-    let mut scx = SharedContext {\n-        collapsed: krate.collapsed,\n-        src_root,\n-        include_sources: true,\n-        local_sources: Default::default(),\n-        issue_tracker_base_url: None,\n-        layout: layout::Layout {\n-            logo: String::new(),\n-            favicon: String::new(),\n-            external_html,\n-            krate: krate.name.clone(),\n-            css_file_extension: extension_css,\n-            generate_search_filter,\n-        },\n-        created_dirs: Default::default(),\n-        sort_modules_alphabetically,\n-        themes,\n-        resource_suffix,\n-        static_root_path,\n-        generate_redirect_pages,\n-        fs: DocFS::new(&errors),\n-        edition,\n-        codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n-    };\n-\n     // If user passed in `--playground-url` arg, we fill in crate name here\n     let mut playground = None;\n     if let Some(url) = playground_url {\n@@ -551,17 +526,27 @@ pub fn run(mut krate: clean::Crate,\n             url,\n         });\n     }\n+    let mut layout = layout::Layout {\n+        logo: String::new(),\n+        favicon: String::new(),\n+        external_html,\n+        krate: krate.name.clone(),\n+        css_file_extension: extension_css,\n+        generate_search_filter,\n+    };\n+    let mut issue_tracker_base_url = None;\n+    let mut include_sources = true;\n \n     // Crawl the crate attributes looking for attributes which control how we're\n     // going to emit HTML\n     if let Some(attrs) = krate.module.as_ref().map(|m| &m.attrs) {\n         for attr in attrs.lists(sym::doc) {\n             match (attr.name_or_empty(), attr.value_str()) {\n                 (sym::html_favicon_url, Some(s)) => {\n-                    scx.layout.favicon = s.to_string();\n+                    layout.favicon = s.to_string();\n                 }\n                 (sym::html_logo_url, Some(s)) => {\n-                    scx.layout.logo = s.to_string();\n+                    layout.logo = s.to_string();\n                 }\n                 (sym::html_playground_url, Some(s)) => {\n                     playground = Some(markdown::Playground {\n@@ -570,15 +555,34 @@ pub fn run(mut krate: clean::Crate,\n                     });\n                 }\n                 (sym::issue_tracker_base_url, Some(s)) => {\n-                    scx.issue_tracker_base_url = Some(s.to_string());\n+                    issue_tracker_base_url = Some(s.to_string());\n                 }\n                 (sym::html_no_source, None) if attr.is_word() => {\n-                    scx.include_sources = false;\n+                    include_sources = false;\n                 }\n                 _ => {}\n             }\n         }\n     }\n+    let mut scx = SharedContext {\n+        collapsed: krate.collapsed,\n+        src_root,\n+        include_sources,\n+        local_sources: Default::default(),\n+        issue_tracker_base_url,\n+        layout,\n+        created_dirs: Default::default(),\n+        sort_modules_alphabetically,\n+        themes,\n+        resource_suffix,\n+        static_root_path,\n+        generate_redirect_pages,\n+        fs: DocFS::new(&errors),\n+        edition,\n+        codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n+        playground,\n+    };\n+\n     let dst = output;\n     scx.ensure_dir(&dst)?;\n     krate = sources::render(&dst, &mut scx, krate)?;\n@@ -588,7 +592,6 @@ pub fn run(mut krate: clean::Crate,\n         render_redirect_pages: false,\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n-        playground,\n     };\n \n     // Crawl the crate to build various caches used for the output\n@@ -2353,7 +2356,7 @@ fn render_markdown(\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n            Markdown(md_text, &links, &mut ids,\n-           cx.shared.codes, cx.shared.edition, &cx.playground).to_string())\n+           cx.shared.codes, cx.shared.edition, &cx.shared.playground).to_string())\n }\n \n fn document_short(\n@@ -2711,7 +2714,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n         if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n             let html = MarkdownHtml(\n-                &note, &mut ids, error_codes, cx.shared.edition, &cx.playground);\n+                &note, &mut ids, error_codes, cx.shared.edition, &cx.shared.playground);\n             message.push_str(&format!(\": {}\", html.to_string()));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n@@ -2765,7 +2768,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                     &mut ids,\n                     error_codes,\n                     cx.shared.edition,\n-                    &cx.playground,\n+                    &cx.shared.playground,\n                 ).to_string()\n             );\n         }\n@@ -3961,7 +3964,7 @@ fn render_impl(w: &mut Buffer, cx: &Context, i: &Impl, link: AssocItemLink<'_>,\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links(), &mut ids,\n-                            cx.shared.codes, cx.shared.edition, &cx.playground).to_string());\n+                            cx.shared.codes, cx.shared.edition, &cx.shared.playground).to_string());\n         }\n     }\n "}]}