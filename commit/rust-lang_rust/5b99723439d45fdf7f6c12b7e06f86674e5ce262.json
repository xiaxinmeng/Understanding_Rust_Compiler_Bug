{"sha": "5b99723439d45fdf7f6c12b7e06f86674e5ce262", "node_id": "C_kwDOAAsO6NoAKDViOTk3MjM0MzlkNDVmZGY3ZjZjMTJiN2UwNmY4NjY3NGU1Y2UyNjI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-09T20:44:39Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-09T20:53:35Z"}, "message": "Make some report and emit errors take DefIds instead of BodyIds", "tree": {"sha": "e5e4569dfe9095fba90349a1537d8eb0fbf1e612", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e4569dfe9095fba90349a1537d8eb0fbf1e612"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b99723439d45fdf7f6c12b7e06f86674e5ce262", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQKR1AACgkQgTGiTgx5\n76+PcA/7BaCyBirkBoMcAgnIyz7JVmJZHvJUZQIsAyvW5BYBoi1CiM2CBJcjaGgn\nCwbFAqpQi7a4B/CKgzNFp6EdV9as1ngee+STWs/ngvlU5RoaqjENlvL4sfDScVae\n+Fz37NqtRbNTKdXX/CrxQbnZIPPEPXB2iqcESyvHvTmhWERDfRb+fqZddkllj0rX\n3GLIU5gTY+rr01G0uW+I3jaIdt3VxJykvpH67MNzDHOda7hsnSNbCOfo/d4i46R3\nxUP02+qztCqa7rEEiPU4FsmzJ+mdiFNKc/PoSw8AiYVBpbLJ3rtse+8UC4vNzZ+h\nkwRXObvVzz3oIT72j5HoH7D03l7ektMb+xzQYbBoOkthUF5B1kxWCBzR0Gj7iRp+\nSTg6AHmFNfgmytVklKZoLHK23+i+n/3dABx2PZIvjSsx6JFfs2vxzN/QwexzvIAd\nDVFjnVrb5jDFj2DpKRcx+egZ95Ulv0Auwb619pi7M0vSensj27sgi2XrQvrW+Rs5\n6V2r8c9zSV1SY/b0xDkM6Wd+jg1igGyh/d1KbAxA18cqTyEsrQWb2Auu2/nskRaY\nGg/ZeMCWQHSKL3ML3CFTg1231DSpkOEy8ZiKhVKtR6Ca9GkgA+FdUCHfFWldYSPc\nKC0EfaiDolhYpPSb+Or2fy64pu0RgDbhaCLIDPUUjb7Aq6mj3ls=\n=hO4E\n-----END PGP SIGNATURE-----", "payload": "tree e5e4569dfe9095fba90349a1537d8eb0fbf1e612\nparent 39f2657d1101b50f9b71ae460b762d330cc8426b\nauthor Santiago Pastorino <spastorino@gmail.com> 1678394679 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678395215 -0300\n\nMake some report and emit errors take DefIds instead of BodyIds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b99723439d45fdf7f6c12b7e06f86674e5ce262", "html_url": "https://github.com/rust-lang/rust/commit/5b99723439d45fdf7f6c12b7e06f86674e5ce262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b99723439d45fdf7f6c12b7e06f86674e5ce262/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f2657d1101b50f9b71ae460b762d330cc8426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f2657d1101b50f9b71ae460b762d330cc8426b", "html_url": "https://github.com/rust-lang/rust/commit/39f2657d1101b50f9b71ae460b762d330cc8426b"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "26a7fa31f0328aeda1957938c2c4bf9bf1ac7c24", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=5b99723439d45fdf7f6c12b7e06f86674e5ce262", "patch": "@@ -581,7 +581,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n-            self.err_ctxt().report_fulfillment_errors(&errors, self.inh.body_id);\n+            self.err_ctxt().report_fulfillment_errors(&errors, Some(self.inh.body_def_id));\n         }\n     }\n \n@@ -594,7 +594,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n-            self.err_ctxt().report_fulfillment_errors(&result, self.inh.body_id);\n+            self.err_ctxt().report_fulfillment_errors(&result, Some(self.inh.body_def_id));\n         }\n     }\n \n@@ -1411,7 +1411,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             let e = self.tainted_by_errors().unwrap_or_else(|| {\n                 self.err_ctxt()\n-                    .emit_inference_failure_err((**self).body_id, sp, ty.into(), E0282, true)\n+                    .emit_inference_failure_err(\n+                        Some(self.inh.body_def_id),\n+                        sp,\n+                        ty.into(),\n+                        E0282,\n+                        true,\n+                    )\n                     .emit()\n             });\n             let err = self.tcx.ty_error(e);"}, {"sha": "d732448723346858de9531e0c1a939c14a606a5e", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=5b99723439d45fdf7f6c12b7e06f86674e5ce262", "patch": "@@ -58,7 +58,7 @@ pub struct Inherited<'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(LocalDefId, hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n-    pub(super) body_id: Option<hir::BodyId>,\n+    pub(super) body_def_id: LocalDefId,\n \n     /// Whenever we introduce an adjustment from `!` into a type variable,\n     /// we record that type variable here. This is later used to inform\n@@ -116,7 +116,6 @@ impl<'tcx> Inherited<'tcx> {\n         typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n-        let body_id = tcx.hir().maybe_body_owned_by(def_id);\n \n         Inherited {\n             typeck_results,\n@@ -130,7 +129,7 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_asm_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n-            body_id,\n+            body_def_id: def_id,\n             infer_var_info: RefCell::new(Default::default()),\n         }\n     }"}, {"sha": "417c1adeb6ef299b346a60f0ae5d25fd94a0ab78", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=5b99723439d45fdf7f6c12b7e06f86674e5ce262", "patch": "@@ -748,7 +748,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                 .infcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n-                    Some(self.body.id()),\n+                    Some(self.tcx.hir().body_owner_def_id(self.body.id())),\n                     self.span.to_span(self.tcx),\n                     p.into(),\n                     E0282,"}, {"sha": "f299e939ed6ecb539a240ebb77fd3e7e05c9119f", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5b99723439d45fdf7f6c12b7e06f86674e5ce262", "patch": "@@ -10,7 +10,7 @@ use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Body, Closure, Expr, ExprKind, FnRetTy, HirId, Local, LocalSource};\n use rustc_middle::hir::nested_filter;\n@@ -386,7 +386,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, error_code))]\n     pub fn emit_inference_failure_err(\n         &self,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n         failure_span: Span,\n         arg: GenericArg<'tcx>,\n         error_code: TypeAnnotationNeeded,\n@@ -403,8 +403,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         };\n \n         let mut local_visitor = FindInferSourceVisitor::new(&self, typeck_results, arg);\n-        if let Some(body_id) = body_id {\n-            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n+        if let Some(body_def_id) = body_def_id\n+            && let Some(body_id) = self.tcx.hir().maybe_body_owned_by(body_def_id)\n+        {\n+            let expr = self.tcx.hir().body(body_id).value;\n             local_visitor.visit_expr(expr);\n         }\n "}, {"sha": "e56f5aa73c38c6c070de8b521959a8f9262d5cf5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b99723439d45fdf7f6c12b7e06f86674e5ce262/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5b99723439d45fdf7f6c12b7e06f86674e5ce262", "patch": "@@ -24,11 +24,9 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::GenericParam;\n-use rustc_hir::Item;\n-use rustc_hir::Node;\n+use rustc_hir::{GenericParam, Item, Node};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n@@ -129,7 +127,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     ) -> ErrorGuaranteed;\n \n     fn report_overflow_obligation<T>(\n@@ -391,7 +389,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn report_fulfillment_errors(\n         &self,\n         errors: &[FulfillmentError<'tcx>],\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     ) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n@@ -469,7 +467,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         for from_expansion in [false, true] {\n             for (error, suppressed) in iter::zip(errors, &is_suppressed) {\n                 if !suppressed && error.obligation.cause.span.from_expansion() == from_expansion {\n-                    self.report_fulfillment_error(error, body_id);\n+                    self.report_fulfillment_error(error, body_def_id);\n                 }\n             }\n         }\n@@ -955,8 +953,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n-                        let body_hir_id =\n-                            self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n+                        let body_def_id = obligation.cause.body_id;\n                         // Try to report a help message\n                         if is_fn_trait\n                             && let Ok((implemented_kind, params)) = self.type_implements_fn_trait(\n@@ -1037,7 +1034,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             if !self.report_similar_impl_candidates(\n                                 impl_candidates,\n                                 trait_ref,\n-                                body_hir_id,\n+                                body_def_id,\n                                 &mut err,\n                                 true,\n                             ) {\n@@ -1073,7 +1070,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                     self.report_similar_impl_candidates(\n                                         impl_candidates,\n                                         trait_ref,\n-                                        body_hir_id,\n+                                        body_def_id,\n                                         &mut err,\n                                         true,\n                                     );\n@@ -1497,7 +1494,7 @@ trait InferCtxtPrivExt<'tcx> {\n     fn report_fulfillment_error(\n         &self,\n         error: &FulfillmentError<'tcx>,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     );\n \n     fn report_projection_error(\n@@ -1531,7 +1528,7 @@ trait InferCtxtPrivExt<'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        body_id: hir::HirId,\n+        body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n         other: bool,\n     ) -> bool;\n@@ -1564,7 +1561,7 @@ trait InferCtxtPrivExt<'tcx> {\n     fn maybe_report_ambiguity(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     );\n \n     fn predicate_can_apply(\n@@ -1650,7 +1647,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn report_fulfillment_error(\n         &self,\n         error: &FulfillmentError<'tcx>,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     ) {\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n@@ -1664,7 +1661,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n-                self.maybe_report_ambiguity(&error.obligation, body_id);\n+                self.maybe_report_ambiguity(&error.obligation, body_def_id);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(\n@@ -2029,7 +2026,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         impl_candidates: Vec<ImplCandidate<'tcx>>,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n-        body_id: hir::HirId,\n+        body_def_id: LocalDefId,\n         err: &mut Diagnostic,\n         other: bool,\n     ) -> bool {\n@@ -2120,9 +2117,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // FIXME(compiler-errors): This could be generalized, both to\n                         // be more granular, and probably look past other `#[fundamental]`\n                         // types, too.\n-                        self.tcx\n-                            .visibility(def.did())\n-                            .is_accessible_from(body_id.owner.def_id, self.tcx)\n+                        self.tcx.visibility(def.did()).is_accessible_from(body_def_id, self.tcx)\n                     } else {\n                         true\n                     }\n@@ -2234,7 +2229,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn maybe_report_ambiguity(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n-        body_id: Option<hir::BodyId>,\n+        body_def_id: Option<LocalDefId>,\n     ) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n@@ -2277,7 +2272,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n                     if let None = self.tainted_by_errors() {\n                         self.emit_inference_failure_err(\n-                            body_id,\n+                            body_def_id,\n                             span,\n                             trait_ref.self_ty().skip_binder().into(),\n                             ErrorCode::E0282,\n@@ -2304,7 +2299,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let subst = data.trait_ref.substs.iter().find(|s| s.has_non_region_infer());\n \n                 let mut err = if let Some(subst) = subst {\n-                    self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283, true)\n+                    self.emit_inference_failure_err(\n+                        body_def_id,\n+                        span,\n+                        subst,\n+                        ErrorCode::E0283,\n+                        true,\n+                    )\n                 } else {\n                     struct_span_err!(\n                         self.tcx.sess,\n@@ -2348,12 +2349,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 predicate.to_opt_poly_trait_pred().unwrap(),\n                             );\n                             if impl_candidates.len() < 10 {\n-                                let hir =\n-                                    self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n                                 self.report_similar_impl_candidates(\n                                     impl_candidates,\n                                     trait_ref,\n-                                    body_id.map(|id| id.hir_id).unwrap_or(hir),\n+                                    body_def_id.unwrap_or(obligation.cause.body_id),\n                                     &mut err,\n                                     false,\n                                 );\n@@ -2375,9 +2374,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 }\n \n-                if let (Some(body_id), Some(ty::subst::GenericArgKind::Type(_))) =\n-                    (body_id, subst.map(|subst| subst.unpack()))\n+                if let (Some(body_def_id), Some(ty::subst::GenericArgKind::Type(_))) =\n+                    (body_def_id, subst.map(|subst| subst.unpack()))\n                 {\n+                    let body_id = self.tcx.hir().body_owned_by(body_def_id);\n                     let mut expr_finder = FindExprBySpan::new(span);\n                     expr_finder.visit_expr(&self.tcx.hir().body(body_id).value);\n \n@@ -2473,7 +2473,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_id, span, arg, ErrorCode::E0282, false)\n+                self.emit_inference_failure_err(body_def_id, span, arg, ErrorCode::E0282, false)\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2487,7 +2487,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_id, span, a.into(), ErrorCode::E0282, true)\n+                self.emit_inference_failure_err(body_def_id, span, a.into(), ErrorCode::E0282, true)\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(data)) => {\n                 if predicate.references_error() || self.tainted_by_errors().is_some() {\n@@ -2501,7 +2501,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     .find(|g| g.has_non_region_infer());\n                 if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n-                        body_id,\n+                        body_def_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,\n@@ -2530,7 +2530,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let subst = data.walk().find(|g| g.is_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n-                        body_id,\n+                        body_def_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,"}]}