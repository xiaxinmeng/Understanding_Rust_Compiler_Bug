{"sha": "55d55136629ddafa712480a6937a2d3654ce3c55", "node_id": "C_kwDOAAsO6NoAKDU1ZDU1MTM2NjI5ZGRhZmE3MTI0ODBhNjkzN2EyZDM2NTRjZTNjNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T05:58:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T05:58:27Z"}, "message": "Rollup merge of #92918 - compiler-errors:gat-expr-lifetime-elision, r=jackh726\n\nAllow eliding GATs in expression position\n\nThoughts on whether this is worthwhile?\n\nFixes #92836\n\nr? ``@jackh726``", "tree": {"sha": "07d22db07cc8acc54258624e5ae8884065371172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07d22db07cc8acc54258624e5ae8884065371172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d55136629ddafa712480a6937a2d3654ce3c55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93qDCRBK7hj4Ov3rIwAA/mUIABipKfjQmr4/iorY8NCMYKFg\ndpmch89OWZYpPoPvvq9I6TlMJd1afHEgV0vefpQ/ZSg5x0YvIoiDRRsQg6GrNGoe\nnarCPhTm8/An9nsb7x2V6UTiYqCSKXmm3RQ3ICYQ9F+mOeFT9liDhY9M9vYAdpPe\nOaMTw5XFkZhWS09YHy11UeBnGD1lW/voFj8UDz/8iW81wL8gnOlYqJKg2X4ujCM9\neLxPHLjn01uzqwiV2gdYqN/6KwU6KHAJy+fALdjIOS6d/AnXjazlQLBnETz0nuTe\nBHfX4rvX55g1eaEzd/Bw0Q4mHFqdFRzkXXk6gJ+6tZ/oCAMbU9P8hCXjNncPV2k=\n=8ef6\n-----END PGP SIGNATURE-----\n", "payload": "tree 07d22db07cc8acc54258624e5ae8884065371172\nparent 6749f32c3389185ab655b0781ea495d46040092b\nparent d671948779fc14c195833f48b64e2c6e1a54a0bb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608707 +0100\ncommitter GitHub <noreply@github.com> 1643608707 +0100\n\nRollup merge of #92918 - compiler-errors:gat-expr-lifetime-elision, r=jackh726\n\nAllow eliding GATs in expression position\n\nThoughts on whether this is worthwhile?\n\nFixes #92836\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d55136629ddafa712480a6937a2d3654ce3c55", "html_url": "https://github.com/rust-lang/rust/commit/55d55136629ddafa712480a6937a2d3654ce3c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d55136629ddafa712480a6937a2d3654ce3c55/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6749f32c3389185ab655b0781ea495d46040092b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6749f32c3389185ab655b0781ea495d46040092b", "html_url": "https://github.com/rust-lang/rust/commit/6749f32c3389185ab655b0781ea495d46040092b"}, {"sha": "d671948779fc14c195833f48b64e2c6e1a54a0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d671948779fc14c195833f48b64e2c6e1a54a0bb", "html_url": "https://github.com/rust-lang/rust/commit/d671948779fc14c195833f48b64e2c6e1a54a0bb"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "05ff7f818c75f22549d30a228cd0431e456dc261", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55d55136629ddafa712480a6937a2d3654ce3c55/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d55136629ddafa712480a6937a2d3654ce3c55/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=55d55136629ddafa712480a6937a2d3654ce3c55", "patch": "@@ -445,7 +445,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let named_type_param_count =\n             param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n-            gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n+            (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n         if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n             Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);"}, {"sha": "16fc9a01a27078f7ef9b31119249ed6ab52e3b28", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/55d55136629ddafa712480a6937a2d3654ce3c55/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d55136629ddafa712480a6937a2d3654ce3c55/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=55d55136629ddafa712480a6937a2d3654ce3c55", "patch": "@@ -482,7 +482,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ) -> subst::GenericArg<'tcx> {\n                 let tcx = self.astconv.tcx();\n                 match param.kind {\n-                    GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+                    GenericParamDefKind::Lifetime => self\n+                        .astconv\n+                        .re_infer(Some(param), self.span)\n+                        .unwrap_or_else(|| {\n+                            debug!(?param, \"unelided lifetime in signature\");\n+\n+                            // This indicates an illegal lifetime in a non-assoc-trait position\n+                            tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n+\n+                            // Supply some dummy value. We don't have an\n+                            // `re_error`, annoyingly, so use `'static`.\n+                            tcx.lifetimes.re_static\n+                        })\n+                        .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {\n                             // No type parameter provided, but a default exists."}, {"sha": "482d0d5c00a6319d69615a1ec4fe74a9b0d034dd", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/55d55136629ddafa712480a6937a2d3654ce3c55/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d55136629ddafa712480a6937a2d3654ce3c55/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs?ref=55d55136629ddafa712480a6937a2d3654ce3c55", "patch": "@@ -0,0 +1,38 @@\n+#![feature(generic_associated_types)]\n+#![allow(unused)]\n+\n+pub trait Trait  {\n+    type Assoc<'a> where Self: 'a;\n+\n+    fn f(&self) -> Self::Assoc<'_>;\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc;\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+}\n+\n+pub struct Struct {\n+    item: f32\n+}\n+\n+pub struct GenericStruct<'a> {\n+    ref_item: &'a f32\n+}\n+\n+impl Trait for Struct {\n+    type Assoc<'a> = GenericStruct<'a>;\n+\n+    fn f(&self) -> Self::Assoc<'_> {\n+        Self::Assoc {\n+            ref_item: &self.item\n+        }\n+    }\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc {\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9263f3d67e3d2f28f2c944e6dde8938e384835b0", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/55d55136629ddafa712480a6937a2d3654ce3c55/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55d55136629ddafa712480a6937a2d3654ce3c55/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=55d55136629ddafa712480a6937a2d3654ce3c55", "patch": "@@ -0,0 +1,35 @@\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:10:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc;\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_>;\n+   |                          ~~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:32:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc {\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_> {\n+   |                          ~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}