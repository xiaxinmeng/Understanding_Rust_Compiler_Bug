{"sha": "8d6ee8f54ad802231f1e09e4b4433ef84d8a4248", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNmVlOGY1NGFkODAyMjMxZjFlMDllNGI0NDMzZWY4NGQ4YTQyNDg=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-10-23T11:53:48Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-10-23T11:53:48Z"}, "message": "Do some copy editing on the release notes\n\nI was reading through the release notes to find something and noticed\nsome small grammatical and consistency issues.", "tree": {"sha": "1bc3c254c19cd1d3c7dc60c09f37c55a0d66a10d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc3c254c19cd1d3c7dc60c09f37c55a0d66a10d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJMBAABCAA2FiEET6WvJ6ML0pFC5CKw0Es5psokOQIFAlvPC/oYHGNhcm9sLm5p\nY2hvbHNAZ21haWwuY29tAAoJENBLOabKJDkC5ggP/ijmNmjeS14VJ+8kG4BT/AAO\ndqPCubP8SOgKck2Za2W3MewamCd6lcGLBUzqqb0gHqKDjmcjHbmnlbbjSHsOs4iu\ndRkOubwMXBfnGY7PbjD7U+5erdkqH7ltLPY0wABcMJasiFvVP8fCprfxwZ35sQyL\nxczMxgFscgJmZQu1A0vHXke7ykraxkNuttixtzdUU6KK5FwyoLiXq3+hGHHIZWBw\nJ3yqtoEntGM3P5SBcwbe4Vmz14kGr6mbvHfPDq1vJfCdL69j0vU22QsNOVu0ny9E\npZhpbXdP0eXbeegUDyFNOyJeGdf90stzR4CpK/m/eV/PMuxwsMnvWoXMHZDbqA2e\norq/MwxgSr8mb6qC25U1oOha/GpCo+RLJBMhm/lwhIQnKGltBod1qLQS/dBQAduh\n593kTmHpVlPvQYz/7SfX9ATPEP5lbFz2gm0M27rIlkmYiJLoFs5VBpkFW+M5OtQ4\nrahq/3CXyCO7MGnEMe0P9TTkBJkWIZvfy4mt0H+IkkLLIvHQbZtoVI7EIJU/3krB\n6gQ7lNg/KQOjbfZZg3Fu9n0QJ7oOi+yPgrW4Lt8Ybzxy8FC2tu+T87PTTMRVKrbI\nz0Itar8QDeSEbXfdXEhftOtG+RmRK7XaiKBr/zWiXekqTDEDxnz7UwYbGgKN7/S0\nRxcr8Us3tbczrEvZQDwr\n=YSbo\n-----END PGP SIGNATURE-----", "payload": "tree 1bc3c254c19cd1d3c7dc60c09f37c55a0d66a10d\nparent a66dc8a1489d2818b5e63f18e1464be79da1f137\nauthor Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1540295628 -0400\ncommitter Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1540295628 -0400\n\nDo some copy editing on the release notes\n\nI was reading through the release notes to find something and noticed\nsome small grammatical and consistency issues.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248", "html_url": "https://github.com/rust-lang/rust/commit/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66dc8a1489d2818b5e63f18e1464be79da1f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66dc8a1489d2818b5e63f18e1464be79da1f137", "html_url": "https://github.com/rust-lang/rust/commit/a66dc8a1489d2818b5e63f18e1464be79da1f137"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "1d888731e94a287d8a2afd6e2f50672f064cb75a", "filename": "RELEASES.md", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d6ee8f54ad802231f1e09e4b4433ef84d8a4248/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=8d6ee8f54ad802231f1e09e4b4433ef84d8a4248", "patch": "@@ -4,34 +4,34 @@ Version 1.30.0 (2018-10-25)\n Language\n --------\n - [Procedural macros are now available.][52081] These kinds of macros allow for\n-  more powerful code generation, there is a [new chapter available][proc-macros]\n-  in Rust Programming Language book that goes further in depth.\n+  more powerful code generation. There is a [new chapter available][proc-macros]\n+  in the Rust Programming Language book that goes further in depth.\n - [You can now use keywords as identifiers using the raw identifiers\n-  syntax (`r#`).][53236] e.g. `let r#for = true;`\n+  syntax (`r#`),][53236] e.g. `let r#for = true;`\n - [Using anonymous parameters in traits is now deprecated with a warning and\n   will be a hard error in the 2018 edition.][53272]\n - [You can now use `crate` in paths.][54404] This allows you to refer to the\n-  crate root in the path. e.g. `use crate::foo;` refers to `foo` in `src/lib.rs`.\n-- [Using a external crate now no longer requires being prefixed with `::`.][54404]\n-  e.g. previously using a external crate in a module without a use statement\n-  required `let json = ::serde_json::from_str(foo);` can now be written\n+  crate root in the path, e.g. `use crate::foo;` refers to `foo` in `src/lib.rs`.\n+- [Using a external crate no longer requires being prefixed with `::`.][54404]\n+  Previously, using a external crate in a module without a use statement\n+  required `let json = ::serde_json::from_str(foo);` but can now be written\n   as `let json = serde_json::from_str(foo);`.\n - [You can now apply the `#[used]` attribute to static items to prevent the\n-  compiler from optimising them away even if they appear to be unused.][51363]\n+  compiler from optimising them away, even if they appear to be unused,][51363]\n   e.g. `#[used] static FOO: u32 = 1;`\n - [You can now import and reexport macros from other crates with the `use`\n   syntax.][50911] Macros exported with `#[macro_export]` are now placed into\n   the root module of the crate. If your macro relies on calling other local\n-  macros it is recommended to export with the\n-  `#[macro_export(local_inner_macros)]` attribute so that users won't have to\n-  import those macros.\n-- [`mod.rs` files are now optional.][54146] Previously if you had a `foo` module\n+  macros, it is recommended to export with the\n+  `#[macro_export(local_inner_macros)]` attribute so users won't have to import\n+  those macros.\n+- [`mod.rs` files are now optional.][54146] Previously, if you had a `foo` module\n   with a `bar` submodule, you would have `src/foo/mod.rs` and `src/foo/bar.rs`.\n   Now you can have `src/foo.rs` and `src/foo/bar.rs` to achieve the same effect.\n - [You can now catch visibility keywords (e.g. `pub`, `pub(crate)`) in macros\n   using the `vis` specifier.][53370]\n-- [Non-macro attributes now allow all forms of literals not just\n-  strings.][53044] e.g. Previously you would write `#[attr(\"true\")]` you can now\n+- [Non-macro attributes now allow all forms of literals, not just\n+  strings.][53044] Previously, you would write `#[attr(\"true\")]`, and you can now\n   write `#[attr(true)]`.\n - [You can now specify a function to handle a panic in the Rust runtime with the\n   `#[panic_handler]` attribute.][51366]\n@@ -54,9 +54,9 @@ Stabilized APIs\n - [`Ipv6Addr::UNSPECIFIED`]\n - [`Iterator::find_map`]\n \n-  The following methods are a replacement methods for `trim_left`, `trim_right`,\n-  `trim_left_matches`, and `trim_right_matches`. Which will be deprecated\n-  in 1.33.0.\n+  The following methods are replacement methods for `trim_left`, `trim_right`,\n+  `trim_left_matches`, and `trim_right_matches`, which will be deprecated\n+  in 1.33.0:\n - [`str::trim_end_matches`]\n - [`str::trim_end`]\n - [`str::trim_start_matches`]\n@@ -76,12 +76,12 @@ Misc\n ----\n - [`rustdoc` allows you to specify what edition to treat your code as with the\n   `--edition` option.][54057]\n-- [`rustdoc` now has the `--color` (Specify whether to output color) and\n-  `--error-format` (Specify error format e.g. `json`) options.][53003]\n+- [`rustdoc` now has the `--color` (specify whether to output color) and\n+  `--error-format` (specify error format, e.g. `json`) options.][53003]\n - [We now distribute a `rust-gdbgui` script that invokes `gdbgui` with Rust\n   debug symbols.][53774]\n - [Attributes from Rust tools such as `rustfmt` or `clippy` are now\n-  available.][53459] e.g. `#[rustfmt::skip]` will skip formatting the next item.\n+  available,][53459] e.g. `#[rustfmt::skip]` will skip formatting the next item.\n \n [50911]: https://github.com/rust-lang/rust/pull/50911/\n [51363]: https://github.com/rust-lang/rust/pull/51363/\n@@ -153,7 +153,7 @@ Compiler\n \n Libraries\n ---------\n-- [`Once::call_once` now no longer requires `Once` to be `'static`.][52239]\n+- [`Once::call_once` no longer requires `Once` to be `'static`.][52239]\n - [`BuildHasherDefault` now implements `PartialEq` and `Eq`.][52402]\n - [`Box<CStr>`, `Box<OsStr>`, and `Box<Path>` now implement `Clone`.][51912]\n - [Implemented `PartialEq<&str>` for `OsString` and `PartialEq<OsString>`\n@@ -169,10 +169,10 @@ Stabilized APIs\n \n Cargo\n -----\n-- [Cargo can silently fix some bad lockfiles ][cargo/5831] You can use\n-  `--locked` to disable this behaviour.\n+- [Cargo can silently fix some bad lockfiles.][cargo/5831] You can use\n+  `--locked` to disable this behavior.\n - [`cargo-install` will now allow you to cross compile an install\n-  using `--target`][cargo/5614]\n+  using `--target`.][cargo/5614]\n - [Added the `cargo-fix` subcommand to automatically move project code from\n   2015 edition to 2018.][cargo/5723]\n - [`cargo doc` can now optionally document private types using the\n@@ -184,15 +184,15 @@ Misc\n   the specified level to that level.][52354] For example `--cap-lints warn`\n   will demote `deny` and `forbid` lints to `warn`.\n - [`rustc` and `rustdoc` will now have the exit code of `1` if compilation\n-  fails, and `101` if there is a panic.][52197]\n+  fails and `101` if there is a panic.][52197]\n - [A preview of clippy has been made available through rustup.][51122]\n-  You can install the preview with `rustup component add clippy-preview`\n+  You can install the preview with `rustup component add clippy-preview`.\n \n Compatibility Notes\n -------------------\n - [`str::{slice_unchecked, slice_unchecked_mut}` are now deprecated.][51807]\n   Use `str::get_unchecked(begin..end)` instead.\n-- [`std::env::home_dir` is now deprecated for its unintuitive behaviour.][51656]\n+- [`std::env::home_dir` is now deprecated for its unintuitive behavior.][51656]\n   Consider using the `home_dir` function from\n   https://crates.io/crates/dirs instead.\n - [`rustc` will no longer silently ignore invalid data in target spec.][52330]\n@@ -432,7 +432,7 @@ Language\n   be used as an identifier.\n - [The dyn syntax is now available.][49968] This syntax is equivalent to the\n   bare `Trait` syntax, and should make it clearer when being used in tandem with\n-  `impl Trait`. Since it is equivalent to the following syntax:\n+  `impl Trait` because it is equivalent to the following syntax:\n   `&Trait == &dyn Trait`, `&mut Trait == &mut dyn Trait`, and\n   `Box<Trait> == Box<dyn Trait>`.\n - [Attributes on generic parameters such as types and lifetimes are\n@@ -495,10 +495,10 @@ Cargo\n   a different directory than `target` for placing compilation artifacts.\n - [Cargo will be adding automatic target inference for binaries, benchmarks,\n   examples, and tests in the Rust 2018 edition.][cargo/5335] If your project specifies\n-  specific targets e.g. using `[[bin]]` and have other binaries in locations\n+  specific targets, e.g. using `[[bin]]`, and have other binaries in locations\n   where cargo would infer a binary, Cargo will produce a warning. You can\n-  disable this feature ahead of time by setting any of the following `autobins`,\n-  `autobenches`, `autoexamples`, `autotests` to false.\n+  disable this feature ahead of time by setting any of the following to false:\n+  `autobins`, `autobenches`, `autoexamples`, `autotests`.\n - [Cargo will now cache compiler information.][cargo/5359] This can be disabled by\n   setting `CARGO_CACHE_RUSTC_INFO=0` in your environment.\n \n@@ -514,8 +514,8 @@ Compatibility Notes\n   work.][49896] e.g. `::core::prelude::v1::StrExt::is_empty(\"\")` will not\n   compile, `\"\".is_empty()` will still compile.\n - [`Debug` output on `atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize}`\n-  will only print the inner type.][48553] e.g.\n-  `print!(\"{:?}\", AtomicBool::new(true))` will print `true`\n+  will only print the inner type.][48553] E.g.\n+  `print!(\"{:?}\", AtomicBool::new(true))` will print `true`,\n   not `AtomicBool(true)`.\n - [The maximum number for `repr(align(N))` is now 2\u00b2\u2079.][50378] Previously you\n   could enter higher numbers but they were not supported by LLVM. Up to 512MB\n@@ -578,7 +578,7 @@ Version 1.26.2 (2018-06-05)\n Compatibility Notes\n -------------------\n \n-- [The borrow checker was fixed to avoid unsoundness when using match ergonomics][51117]\n+- [The borrow checker was fixed to avoid unsoundness when using match ergonomics.][51117]\n \n [51117]: https://github.com/rust-lang/rust/issues/51117\n \n@@ -589,18 +589,18 @@ Version 1.26.1 (2018-05-29)\n Tools\n -----\n \n-- [RLS now works on Windows][50646]\n-- [Rustfmt stopped badly formatting text in some cases][rustfmt/2695]\n+- [RLS now works on Windows.][50646]\n+- [Rustfmt stopped badly formatting text in some cases.][rustfmt/2695]\n \n \n Compatibility Notes\n --------\n \n - [`fn main() -> impl Trait` no longer works for non-Termination\n-  trait][50656]\n+  trait.][50656]\n   This reverts an accidental stabilization.\n-- [`NaN > NaN` no longer returns true in const-fn contexts][50812]\n-- [Prohibit using turbofish for `impl Trait` in method arguments][50950]\n+- [`NaN > NaN` no longer returns true in const-fn contexts.][50812]\n+- [Prohibit using turbofish for `impl Trait` in method arguments.][50950]\n \n [50646]: https://github.com/rust-lang/rust/issues/50646\n [50656]: https://github.com/rust-lang/rust/pull/50656\n@@ -616,18 +616,18 @@ Language\n - [Closures now implement `Copy` and/or `Clone` if all captured variables\n   implement either or both traits.][49299]\n - [The inclusive range syntax e.g. `for x in 0..=10` is now stable.][47813]\n-- [The `'_` lifetime is now stable. The underscore lifetime can be used anywhere where a\n+- [The `'_` lifetime is now stable. The underscore lifetime can be used anywhere a\n   lifetime can be elided.][49458]\n - [`impl Trait` is now stable allowing you to have abstract types in returns\n-   or in function parameters.][49255] e.g. `fn foo() -> impl Iterator<Item=u8>` or\n+   or in function parameters.][49255] E.g. `fn foo() -> impl Iterator<Item=u8>` or\n   `fn open(path: impl AsRef<Path>)`.\n - [Pattern matching will now automatically apply dereferences.][49394]\n - [128-bit integers in the form of `u128` and `i128` are now stable.][49101]\n - [`main` can now return `Result<(), E: Debug>`][49162] in addition to `()`.\n - [A lot of operations are now available in a const context.][46882] E.g. You\n   can now index into constant arrays, reference and dereference into constants,\n-  and use Tuple struct constructors.\n-- [Fixed entry slice patterns are now stable.][48516] e.g.\n+  and use tuple struct constructors.\n+- [Fixed entry slice patterns are now stable.][48516] E.g.\n   ```rust\n   let points = [1, 2, 3, 4];\n   match points {\n@@ -1052,7 +1052,7 @@ Language\n Compiler\n --------\n - [Enabled `TrapUnreachable` in LLVM which should mitigate the impact of\n-  undefined behaviour.][45920]\n+  undefined behavior.][45920]\n - [rustc now suggests renaming import if names clash.][45660]\n - [Display errors/warnings correctly when there are zero-width or\n   wide characters.][45711]"}]}