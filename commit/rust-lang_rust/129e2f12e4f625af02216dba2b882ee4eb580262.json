{"sha": "129e2f12e4f625af02216dba2b882ee4eb580262", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOWUyZjEyZTRmNjI1YWYwMjIxNmRiYTJiODgyZWU0ZWI1ODAyNjI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-15T21:45:01Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-15T21:45:01Z"}, "message": "Merge pull request #96 from marcusklaas/find-uncommented\n\nDeal with problematic characters in comments", "tree": {"sha": "1c156ab43a0e7507a59307e7058ac0649b99acc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c156ab43a0e7507a59307e7058ac0649b99acc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/129e2f12e4f625af02216dba2b882ee4eb580262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/129e2f12e4f625af02216dba2b882ee4eb580262", "html_url": "https://github.com/rust-lang/rust/commit/129e2f12e4f625af02216dba2b882ee4eb580262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/129e2f12e4f625af02216dba2b882ee4eb580262/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ecf74af0670047481f4bc8697c18f692bc2bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ecf74af0670047481f4bc8697c18f692bc2bf4", "html_url": "https://github.com/rust-lang/rust/commit/c7ecf74af0670047481f4bc8697c18f692bc2bf4"}, {"sha": "b17c920e46403921f1d45db68715f1615a6b985d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17c920e46403921f1d45db68715f1615a6b985d", "html_url": "https://github.com/rust-lang/rust/commit/b17c920e46403921f1d45db68715f1615a6b985d"}], "stats": {"total": 88, "additions": 76, "deletions": 12}, "files": [{"sha": "29c950f1464174594f43f1e2f120745ee6bff756", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/129e2f12e4f625af02216dba2b882ee4eb580262/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129e2f12e4f625af02216dba2b882ee4eb580262/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=129e2f12e4f625af02216dba2b882ee4eb580262", "patch": "@@ -11,7 +11,7 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use {ReturnIndent, BraceStyle};\n-use utils::{format_visibility, make_indent};\n+use utils::{format_visibility, make_indent, FindUncommented};\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n use visitor::FmtVisitor;\n use syntax::{ast, abi};\n@@ -336,12 +336,11 @@ impl<'a> FmtVisitor<'a> {\n         // FIXME If you thought the crap with the commas was ugly, just wait.\n         // This is awful. We're going to look from the last item span to the\n         // start of the return type span, then we drop everything after the\n-        // first closing paren. Obviously, this will break if there is a\n-        // closing paren in the comment.\n+        // first closing paren.\n         // The fix is comments in the AST or a span for the closing paren.\n         let snippet = self.snippet(codemap::mk_sp(prev_end, next_span_start));\n         let snippet = snippet.trim();\n-        let snippet = &snippet[..snippet.find(terminator).unwrap_or(snippet.len())];\n+        let snippet = &snippet[..snippet.find_uncommented(terminator).unwrap_or(snippet.len())];\n         let snippet = snippet.trim();\n         result.push(snippet.to_owned());\n \n@@ -417,8 +416,7 @@ impl<'a> FmtVisitor<'a> {\n         self.changes.push_str_span(span, &header_str);\n \n         let enum_snippet = self.snippet(span);\n-        // FIXME this will give incorrect results if there is a { in a comment.\n-        let body_start = span.lo + BytePos(enum_snippet.find('{').unwrap() as u32 + 1);\n+        let body_start = span.lo + BytePos(enum_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n         let generics_str = self.format_generics(generics, body_start);\n         self.changes.push_str_span(span, &generics_str);\n \n@@ -542,8 +540,8 @@ impl<'a> FmtVisitor<'a> {\n         self.changes.push_str_span(span, &generics_str);\n \n         let struct_snippet = self.snippet(span);\n-        // FIXME this will give incorrect results if there is a { in a comment.\n-        self.last_pos = span.lo + BytePos(struct_snippet.find('{').unwrap() as u32 + 1);\n+        // This will drop the comment in between the header and body.\n+        self.last_pos = span.lo + BytePos(struct_snippet.find_uncommented(\"{\").unwrap() as u32 + 1);\n \n         self.block_indent += config!(tab_spaces);\n         for (i, f) in struct_def.fields.iter().enumerate() {\n@@ -632,8 +630,7 @@ impl<'a> FmtVisitor<'a> {\n         // This hack makes sure we only add comments etc. after the comma, and\n         // makes sure we don't repeat any commas.\n         let hi = field.span.hi;\n-        // FIXME a comma in a comment will break this hack.\n-        let comma_pos = match struct_snippet[(hi.0 - struct_start.0) as usize..].find(',') {\n+        let comma_pos = match struct_snippet[(hi.0 - struct_start.0) as usize..].find_uncommented(\",\") {\n             Some(i) => i,\n             None => 0,\n         };"}, {"sha": "5e7f8baf1dc7a0f30f22dd43bd5ba64eaa557831", "filename": "src/utils.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/129e2f12e4f625af02216dba2b882ee4eb580262/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129e2f12e4f625af02216dba2b882ee4eb580262/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=129e2f12e4f625af02216dba2b882ee4eb580262", "patch": "@@ -10,6 +10,72 @@\n \n use syntax::ast::Visibility;\n \n+pub trait FindUncommented {\n+    fn find_uncommented(&self, pat: &str) -> Option<usize>;\n+}\n+\n+impl FindUncommented for str {\n+    fn find_uncommented(&self, pat: &str) -> Option<usize> {\n+        let mut needle_iter = pat.chars();\n+        let mut possible_comment = false;\n+\n+        for (i, b) in self.char_indices() {\n+            match needle_iter.next() {\n+                Some(c) => {\n+                    if b != c {\n+                        needle_iter = pat.chars();\n+                    }\n+                },\n+                None => return Some(i - pat.len())\n+            }\n+\n+            if possible_comment {\n+                if b == '/' {\n+                    return self[(i+1)..].find('\\n')\n+                                        .and_then(|end| {\n+                                            self[(end + i + 2)..].find_uncommented(pat)\n+                                                                 .map(|idx| idx + end + i + 2)\n+                                        });\n+                } else if b == '*' {\n+                    return self[(i+1)..].find(\"*/\")\n+                                        .and_then(|end| {\n+                                            self[(end + i + 3)..].find_uncommented(pat)\n+                                                                 .map(|idx| idx + end + i + 3)\n+                                        });\n+                } else {\n+                    possible_comment = false;\n+                }\n+            } else {\n+                possible_comment = b == '/';\n+            }\n+        }\n+\n+        // Handle case where the pattern is a suffix of the search string\n+        match needle_iter.next() {\n+            Some(_) => None,\n+            None => Some(self.len() - pat.len())\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_find_uncommented() {\n+    fn check(haystack: &str, needle: &str, expected: Option<usize>) {\n+        assert_eq!(expected, haystack.find_uncommented(needle));\n+    }\n+\n+    check(\"/*//*/test\", \"test\", Some(6));\n+    check(\"//test\\ntest\", \"test\", Some(7));\n+    check(\"/* comment only */\", \"whatever\", None);\n+    check(\"/* comment */ some text /* more commentary */ result\", \"result\", Some(46));\n+    check(\"sup // sup\", \"p\", Some(2));\n+    check(\"sup\", \"x\", None);\n+    check(\"\u03c0? /**/ \u03c0 is nice!\", \"\u03c0 is nice\", Some(9));\n+    check(\"/*sup yo? \\n sup*/ sup\", \"p\", Some(20));\n+    check(\"hel/*lohello*/lo\", \"hello\", None);\n+    check(\"acb\", \"ab\", None);\n+}\n+\n #[inline]\n pub fn prev_char(s: &str, mut i: usize) -> usize {\n     if i == 0 { return 0; }\n@@ -63,6 +129,7 @@ pub fn round_up_to_power_of_two(mut x: usize) -> usize {\n     x + 1\n }\n \n+#[inline]\n #[cfg(target_pointer_width=\"32\")]\n pub fn round_up_to_power_of_two(mut x: usize) -> usize {\n     x -= 1;"}, {"sha": "dff8085136ee0e87cf07f558f806995f7e12437a", "filename": "tests/target/fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/129e2f12e4f625af02216dba2b882ee4eb580262/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/129e2f12e4f625af02216dba2b882ee4eb580262/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=129e2f12e4f625af02216dba2b882ee4eb580262", "patch": "@@ -4,13 +4,13 @@ fn foo(a: AAAA, b: BBB, c: CCC) -> RetType {\n \n }\n \n-fn foo(a: AAAA, b: BBB, c: CCC) -> RetType\n+fn foo(a: AAAA, b: BBB /* some, weird, inline comment */, c: CCC) -> RetType\n     where T: Blah\n {\n \n }\n \n-fn foo(a: AAA)\n+fn foo(a: AAA /* (comment) */)\n     where T: Blah\n {\n "}]}