{"sha": "d0625a380b03e83fcfc2f0230986186992d13c71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjI1YTM4MGIwM2U4M2ZjZmMyZjAyMzA5ODYxODY5OTJkMTNjNzE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-24T16:14:53Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-24T16:14:53Z"}, "message": "Allow usage_of_ty_tykind only in sty\n\nand in some special cases", "tree": {"sha": "6ce5b3e023d08ae037e5136e4d1f6cdfda53caa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce5b3e023d08ae037e5136e4d1f6cdfda53caa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0625a380b03e83fcfc2f0230986186992d13c71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl0Q9v0ACgkQaTCGhp1Q\nZjelYw/+PNM3fHwnyzoqVtXwoX6qpgnnYE1rnqU0ycESVKWHtu51Y4lai+3FbfhK\nBJ0TI9YS89ExtDaA5juUJHIkXUEl7werSj2lXaamwlXzBgATfypRnCVygQN95NCY\nPDoS7s9hsXAPBl2UrEi+WzPLcwdkMna/EZgfND/34VXwi7FdEDuwqM4ov6Z5FEJJ\n/S9Ug1ejCUiBQv2Zpira15rVedPz3E7wT5dLI3NZa7u5w5nBpLDNXCgBo+Zu1y3z\ncypfVKCEv3a4KYve1jIv2Lx3aVCvtatyZxsrLa4O5baBko3R+JAvdh5xg+ybMQfy\nNz6z0aIWN1ivL5ARg7OhyLBfeUwd5Z+G4qNr3s8SaBvnCqsZ0BUOXyNh685Uehj5\nVTYjILLqWzZKjdSwOENMDqwvNThbbEp0XQ1fFoD85WjQjWxDiWax2pSz3B/TfCaM\ns8oAHeWkKUZBfvI47eap+/ud3wfnFo3O1N86CGWlBK3bTZF+MAqlac1/9Tg3MUSo\n8i/cmw14KMekLbhaH1pIrk4MPsXZ6nMTRAn4Na2qU9d/QfdQRCsRAAkmp5nI9not\nrzjp8fDtbT/q5zCMt9C2oumLwYuoqGwaq262/1oTUCcPiMS8h/aNHI88Zt6fAZPY\njuK5H0QEPhSXw+Pp5nuhneUKG3fwZVWq8hTD0/3v91muSVSJOWM=\n=wnx6\n-----END PGP SIGNATURE-----", "payload": "tree 6ce5b3e023d08ae037e5136e4d1f6cdfda53caa4\nparent 8e087cdd98850f9bdb998ddfa6c4dfe2d4553260\nauthor flip1995 <hello@philkrones.com> 1561392893 +0200\ncommitter flip1995 <hello@philkrones.com> 1561392893 +0200\n\nAllow usage_of_ty_tykind only in sty\n\nand in some special cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0625a380b03e83fcfc2f0230986186992d13c71", "html_url": "https://github.com/rust-lang/rust/commit/d0625a380b03e83fcfc2f0230986186992d13c71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0625a380b03e83fcfc2f0230986186992d13c71/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e087cdd98850f9bdb998ddfa6c4dfe2d4553260", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e087cdd98850f9bdb998ddfa6c4dfe2d4553260", "html_url": "https://github.com/rust-lang/rust/commit/8e087cdd98850f9bdb998ddfa6c4dfe2d4553260"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "26e7cc9004d4ee4d5032a1af0999a42ac51c316a", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=d0625a380b03e83fcfc2f0230986186992d13c71", "patch": "@@ -27,6 +27,7 @@ pub trait EncodableWithShorthand: Clone + Eq + Hash {\n     fn variant(&self) -> &Self::Variant;\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n impl<'tcx> EncodableWithShorthand for Ty<'tcx> {\n     type Variant = ty::TyKind<'tcx>;\n     fn variant(&self) -> &Self::Variant {\n@@ -159,6 +160,7 @@ where\n     Ok(decoder.map_encoded_cnum_to_current(cnum))\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n #[inline]\n pub fn decode_ty<D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n where"}, {"sha": "a00eed3fdda953cefe10765c0661f5eefff0cffe", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d0625a380b03e83fcfc2f0230986186992d13c71", "patch": "@@ -135,6 +135,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     /// Intern a type\n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     #[inline(never)]\n     fn intern_ty(\n         local: &CtxtInterners<'tcx>,\n@@ -2195,6 +2196,7 @@ impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {\n     }\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.sty\n@@ -2429,6 +2431,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_fn_ptr(converted_sig)\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {\n         CtxtInterners::intern_ty(&self.interners, &self.global_interners, st)"}, {"sha": "411b18e043a203a36dd5e3a575e3c9564b86c235", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=d0625a380b03e83fcfc2f0230986186992d13c71", "patch": "@@ -18,6 +18,7 @@ impl FlagComputation {\n         }\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     pub fn for_sty(st: &ty::TyKind<'_>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_sty(st);\n@@ -61,6 +62,7 @@ impl FlagComputation {\n         } // otherwise, this binder captures nothing\n     }\n \n+    #[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n     fn add_sty(&mut self, st: &ty::TyKind<'_>) {\n         match st {\n             &ty::Bool |"}, {"sha": "90c18a7e364ead7d4e2410c74963fa9a4afd55ef", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d0625a380b03e83fcfc2f0230986186992d13c71", "patch": "@@ -1,7 +1,5 @@\n // ignore-tidy-filelength\n \n-#![cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n-\n pub use self::Variance::*;\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -484,6 +482,7 @@ bitflags! {\n     }\n }\n \n+#[cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n pub struct TyS<'tcx> {\n     pub sty: TyKind<'tcx>,\n     pub flags: TypeFlags,\n@@ -541,29 +540,29 @@ impl<'tcx> Hash for TyS<'tcx> {\n impl<'tcx> TyS<'tcx> {\n     pub fn is_primitive_ty(&self) -> bool {\n         match self.sty {\n-            TyKind::Bool |\n-            TyKind::Char |\n-            TyKind::Int(_) |\n-            TyKind::Uint(_) |\n-            TyKind::Float(_) |\n-            TyKind::Infer(InferTy::IntVar(_)) |\n-            TyKind::Infer(InferTy::FloatVar(_)) |\n-            TyKind::Infer(InferTy::FreshIntTy(_)) |\n-            TyKind::Infer(InferTy::FreshFloatTy(_)) => true,\n-            TyKind::Ref(_, x, _) => x.is_primitive_ty(),\n+            Bool |\n+            Char |\n+            Int(_) |\n+            Uint(_) |\n+            Float(_) |\n+            Infer(InferTy::IntVar(_)) |\n+            Infer(InferTy::FloatVar(_)) |\n+            Infer(InferTy::FreshIntTy(_)) |\n+            Infer(InferTy::FreshFloatTy(_)) => true,\n+            Ref(_, x, _) => x.is_primitive_ty(),\n             _ => false,\n         }\n     }\n \n     pub fn is_suggestable(&self) -> bool {\n         match self.sty {\n-            TyKind::Opaque(..) |\n-            TyKind::FnDef(..) |\n-            TyKind::FnPtr(..) |\n-            TyKind::Dynamic(..) |\n-            TyKind::Closure(..) |\n-            TyKind::Infer(..) |\n-            TyKind::Projection(..) => false,\n+            Opaque(..) |\n+            FnDef(..) |\n+            FnPtr(..) |\n+            Dynamic(..) |\n+            Closure(..) |\n+            Infer(..) |\n+            Projection(..) => false,\n             _ => true,\n         }\n     }"}, {"sha": "5d17080a9b2bce0c30de8ca16264a3668c105f3e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0625a380b03e83fcfc2f0230986186992d13c71/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d0625a380b03e83fcfc2f0230986186992d13c71", "patch": "@@ -1,5 +1,7 @@\n //! This module contains `TyKind` and its major components.\n \n+#![cfg_attr(not(bootstrap), allow(rustc::usage_of_ty_tykind))]\n+\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::infer::canonical::Canonical;"}]}