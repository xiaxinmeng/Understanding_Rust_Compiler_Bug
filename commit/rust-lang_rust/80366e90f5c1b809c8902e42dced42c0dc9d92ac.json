{"sha": "80366e90f5c1b809c8902e42dced42c0dc9d92ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMzY2ZTkwZjVjMWI4MDljODkwMmU0MmRjZWQ0MmMwZGM5ZDkyYWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T16:06:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-05T16:06:14Z"}, "message": "File symnols", "tree": {"sha": "d0c7c97a47bdb9375325569020290738e859eff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c7c97a47bdb9375325569020290738e859eff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80366e90f5c1b809c8902e42dced42c0dc9d92ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80366e90f5c1b809c8902e42dced42c0dc9d92ac", "html_url": "https://github.com/rust-lang/rust/commit/80366e90f5c1b809c8902e42dced42c0dc9d92ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80366e90f5c1b809c8902e42dced42c0dc9d92ac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ba52b3e022aa88b011295b38fcf50fe440d1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ba52b3e022aa88b011295b38fcf50fe440d1f9", "html_url": "https://github.com/rust-lang/rust/commit/60ba52b3e022aa88b011295b38fcf50fe440d1f9"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "ac89a48d3b610b0d13bbf39e1e4043d123fc808e", "filename": "cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80366e90f5c1b809c8902e42dced42c0dc9d92ac/cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80366e90f5c1b809c8902e42dced42c0dc9d92ac/cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2FCargo.toml?ref=80366e90f5c1b809c8902e42dced42c0dc9d92ac", "patch": "@@ -7,5 +7,5 @@ publish = false\n [dependencies]\n clap = \"2.32.0\"\n failure = \"0.1.1\"\n-libsyntax2 = { path = \"../\" }\n+libeditor = { path = \"../libeditor\" }\n tools = { path = \"../tools\" }"}, {"sha": "a3a317c697a37f02418c0d6ea8baadf71cd1583c", "filename": "cli/src/main.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/80366e90f5c1b809c8902e42dced42c0dc9d92ac/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80366e90f5c1b809c8902e42dced42c0dc9d92ac/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=80366e90f5c1b809c8902e42dced42c0dc9d92ac", "patch": "@@ -1,13 +1,16 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n-extern crate libsyntax2;\n+extern crate libeditor;\n extern crate tools;\n \n+use std::{\n+    fs, io::Read, path::Path,\n+    time::Instant\n+};\n use clap::{App, Arg, SubCommand};\n-use std::time::Instant;\n-use std::{fs, io::Read, path::Path};\n use tools::collect_tests;\n+use libeditor::File;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -30,11 +33,21 @@ fn main() -> Result<()> {\n                 ),\n         )\n         .subcommand(SubCommand::with_name(\"parse\"))\n+        .subcommand(SubCommand::with_name(\"symbols\"))\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", _) => {\n-            let tree = parse()?;\n-            println!(\"{}\", tree);\n+            let start = Instant::now();\n+            let file = file()?;\n+            let elapsed = start.elapsed();\n+            println!(\"{}\", file.syntax_tree());\n+            eprintln!(\"parsing: {:?}\", elapsed);\n+        }\n+        (\"symbols\", _) => {\n+            let file = file()?;\n+            for s in file.symbols() {\n+                println!(\"{:?}\", s);\n+            }\n         }\n         (\"render-test\", Some(matches)) => {\n             let file = matches.value_of(\"file\").unwrap();\n@@ -49,13 +62,9 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n-fn parse() -> Result<String> {\n+fn file() -> Result<File> {\n     let text = read_stdin()?;\n-    let start = Instant::now();\n-    let file = libsyntax2::parse(&text);\n-    eprintln!(\"elapsed {:?}\", start.elapsed());\n-    let tree = libsyntax2::utils::dump_tree(&file);\n-    Ok(tree)\n+    Ok(File::new(&text))\n }\n \n fn read_stdin() -> Result<String> {\n@@ -74,7 +83,7 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         None => bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n-    let file = libsyntax2::parse(&test.text);\n-    let tree = libsyntax2::utils::dump_tree(&file);\n+    let file = File::new(&test.text);\n+    let tree = file.syntax_tree();\n     Ok((test.text, tree))\n }"}, {"sha": "091aed1256bf6ca0f23db81417d5cb8dfd3b612f", "filename": "libeditor/src/lib.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/80366e90f5c1b809c8902e42dced42c0dc9d92ac/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80366e90f5c1b809c8902e42dced42c0dc9d92ac/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=80366e90f5c1b809c8902e42dced42c0dc9d92ac", "patch": "@@ -2,6 +2,7 @@ extern crate libsyntax2;\n extern crate text_unit;\n \n use libsyntax2::{\n+    SyntaxNodeRef,\n     algo::walk,\n     SyntaxKind::*,\n };\n@@ -16,6 +17,13 @@ pub struct HighlightedRange {\n     pub tag: &'static str,\n }\n \n+#[derive(Debug)]\n+pub struct Symbol {\n+    // pub parent: ???,\n+    pub name: String,\n+    pub range: TextRange,\n+}\n+\n impl File {\n     pub fn new(text: &str) -> File {\n         File {\n@@ -41,7 +49,7 @@ impl File {\n             };\n             res.push(HighlightedRange {\n                 range: node.range(),\n-                tag\n+                tag,\n             })\n         }\n         res\n@@ -50,4 +58,41 @@ impl File {\n     pub fn syntax_tree(&self) -> String {\n         ::libsyntax2::utils::dump_tree(&self.inner.syntax())\n     }\n+\n+    pub fn symbols(&self) -> Vec<Symbol> {\n+        let syntax = self.inner.syntax();\n+        let res: Vec<Symbol> = walk::preorder(syntax.as_ref())\n+            .filter_map(Declaration::cast)\n+            .filter_map(|decl| {\n+                let name = decl.name()?;\n+                let range = decl.range();\n+                Some(Symbol { name, range })\n+            })\n+            .collect();\n+        res // NLL :-(\n+    }\n+}\n+\n+\n+struct Declaration<'f>(SyntaxNodeRef<'f>);\n+\n+impl<'f> Declaration<'f> {\n+    fn cast(node: SyntaxNodeRef<'f>) -> Option<Declaration<'f>> {\n+        match node.kind() {\n+            | STRUCT_ITEM | ENUM_ITEM | FN_ITEM | TRAIT_ITEM\n+            | CONST_ITEM | STATIC_ITEM | MOD_ITEM | NAMED_FIELD\n+            | TYPE_ITEM => Some(Declaration(node)),\n+            _ => None\n+        }\n+    }\n+\n+    fn name(&self) -> Option<String> {\n+        let name = self.0.children()\n+            .find(|child| child.kind() == NAME)?;\n+        Some(name.text())\n+    }\n+\n+    fn range(&self) -> TextRange {\n+        self.0.range()\n+    }\n }"}]}