{"sha": "56566d816deda17b2ddaf3e3e603f2af16e26653", "node_id": "C_kwDOAAsO6NoAKDU2NTY2ZDgxNmRlZGExN2IyZGRhZjNlM2U2MDNmMmFmMTZlMjY2NTM", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-01-20T23:48:46Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-01-21T03:22:14Z"}, "message": "Annotate signed type in int_divrem_guard\n\nThe way the macro expands, it may sometimes infer\n\"this is a uint, but doesn't impl Neg???\"\nAlso, I made the \"wrong path for intrinsics\" error.\nThese fixes allow integration into libcore.", "tree": {"sha": "f8f31812ac3dc3b5c3f4abae18d98df71ef42cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f31812ac3dc3b5c3f4abae18d98df71ef42cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56566d816deda17b2ddaf3e3e603f2af16e26653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56566d816deda17b2ddaf3e3e603f2af16e26653", "html_url": "https://github.com/rust-lang/rust/commit/56566d816deda17b2ddaf3e3e603f2af16e26653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56566d816deda17b2ddaf3e3e603f2af16e26653/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f5f01b8aa92780e695d471e72e699ef10abe30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f5f01b8aa92780e695d471e72e699ef10abe30", "html_url": "https://github.com/rust-lang/rust/commit/a4f5f01b8aa92780e695d471e72e699ef10abe30"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "b65038933bf33c185305f31fbcad70d1576166a1", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56566d816deda17b2ddaf3e3e603f2af16e26653/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56566d816deda17b2ddaf3e3e603f2af16e26653/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=56566d816deda17b2ddaf3e3e603f2af16e26653", "patch": "@@ -33,7 +33,7 @@ where\n \n macro_rules! unsafe_base {\n     ($lhs:ident, $rhs:ident, {$simd_call:ident}, $($_:tt)*) => {\n-        unsafe { $crate::intrinsics::$simd_call($lhs, $rhs) }\n+        unsafe { $crate::simd::intrinsics::$simd_call($lhs, $rhs) }\n     };\n }\n \n@@ -49,7 +49,10 @@ macro_rules! unsafe_base {\n macro_rules! wrap_bitshift {\n     ($lhs:ident, $rhs:ident, {$simd_call:ident}, $int:ident) => {\n         unsafe {\n-            $crate::intrinsics::$simd_call($lhs, $rhs.bitand(Simd::splat(<$int>::BITS as $int - 1)))\n+            $crate::simd::intrinsics::$simd_call(\n+                $lhs,\n+                $rhs.bitand(Simd::splat(<$int>::BITS as $int - 1)),\n+            )\n         }\n     };\n }\n@@ -70,11 +73,13 @@ macro_rules! int_divrem_guard {\n         if $rhs.lanes_eq(Simd::splat(0)).any() {\n             panic!($zero);\n         } else if <$int>::MIN != 0\n-            && ($lhs.lanes_eq(Simd::splat(<$int>::MIN)) & $rhs.lanes_eq(Simd::splat(-1 as _))).any()\n+            && ($lhs.lanes_eq(Simd::splat(<$int>::MIN))\n+                // type inference can break here, so cut an SInt to size\n+                & $rhs.lanes_eq(Simd::splat(-1i64 as _))).any()\n         {\n             panic!($overflow);\n         } else {\n-            unsafe { $crate::intrinsics::$simd_call($lhs, $rhs) }\n+            unsafe { $crate::simd::intrinsics::$simd_call($lhs, $rhs) }\n         }\n     };\n }"}]}