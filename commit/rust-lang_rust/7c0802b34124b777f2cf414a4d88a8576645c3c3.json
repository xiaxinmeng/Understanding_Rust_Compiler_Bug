{"sha": "7c0802b34124b777f2cf414a4d88a8576645c3c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDgwMmIzNDEyNGI3NzdmMmNmNDE0YTRkODhhODU3NjY0NWMzYzM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-03T23:31:59Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-04-15T18:53:41Z"}, "message": "Remove other Rvalues", "tree": {"sha": "4b2266ac6a2228efaa98ecbfbc8eb2cd948c0e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2266ac6a2228efaa98ecbfbc8eb2cd948c0e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0802b34124b777f2cf414a4d88a8576645c3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0802b34124b777f2cf414a4d88a8576645c3c3", "html_url": "https://github.com/rust-lang/rust/commit/7c0802b34124b777f2cf414a4d88a8576645c3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0802b34124b777f2cf414a4d88a8576645c3c3/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0a71a3931bbfe5c296e9f55adabb2585974c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0a71a3931bbfe5c296e9f55adabb2585974c2c", "html_url": "https://github.com/rust-lang/rust/commit/0e0a71a3931bbfe5c296e9f55adabb2585974c2c"}], "stats": {"total": 265, "additions": 120, "deletions": 145}, "files": [{"sha": "da79a065eb797da938866a24caee7b8d8eb63320", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -368,21 +368,39 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n             if location.statement_index != block.statements.len() {\n                 let stmt = &block.statements[location.statement_index];\n \n+                fn can_skip_constant(c: &ty::Const<'tcx>) -> bool {\n+                    // Keep assignments from unevaluated constants around, since the\n+                    // evaluation may report errors, even if the use of the constant\n+                    // is dead code.\n+                    !matches!(c.val, ty::ConstKind::Unevaluated(..))\n+                }\n+\n+                fn can_skip_operand(o: &Operand<'_>) -> bool {\n+                    match o {\n+                        Operand::Copy(p) | Operand::Move(p) => !p.is_indirect(),\n+                        Operand::Constant(c) => can_skip_constant(c.literal),\n+                    }\n+                }\n+\n                 if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n                     if !dest.is_indirect() && dest.local == *local {\n-                        if let Rvalue::Use(Operand::Constant(c)) = rvalue {\n-                            match c.literal.val {\n-                                // Keep assignments from unevaluated constants around, since the\n-                                // evaluation may report errors, even if the use of the constant\n-                                // is dead code.\n-                                ty::ConstKind::Unevaluated(..) => {}\n-                                _ => {\n-                                    trace!(\"skipping store of const value {:?} to {:?}\", c, dest);\n-                                    return;\n-                                }\n+                        let can_skip = match rvalue {\n+                            Rvalue::Use(op) => can_skip_operand(op),\n+                            Rvalue::Discriminant(_) => true,\n+                            Rvalue::BinaryOp(_, l, r) | Rvalue::CheckedBinaryOp(_, l, r) => {\n+                                can_skip_operand(l) && can_skip_operand(r)\n                             }\n-                        } else if let Rvalue::Discriminant(d) = rvalue {\n-                            trace!(\"skipping store of discriminant value {:?} to {:?}\", d, dest);\n+                            Rvalue::Repeat(op, c) => can_skip_operand(op) && can_skip_constant(c),\n+                            Rvalue::AddressOf(_, _) => true,\n+                            Rvalue::Len(_) => true,\n+                            Rvalue::UnaryOp(_, op) => can_skip_operand(op),\n+                            Rvalue::Aggregate(_, operands) => operands.iter().all(can_skip_operand),\n+\n+                            _ => false,\n+                        };\n+\n+                        if can_skip {\n+                            trace!(\"skipping store of {:?} to {:?}\", rvalue, dest);\n                             return;\n                         }\n                     }"}, {"sha": "63e6b8358a534d3ae3e9dd566df55f0c75e0c7de", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -30,30 +30,30 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257ealloc10+0\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257ealloc9+0\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc10 (size: 168, align: 1) {\n+alloc9 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc5+0\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc4+0\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257ealloc7+0\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257ealloc8+99\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257ealloc6+0\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257ealloc7+99\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc7 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "7dea5c664d858db302169c17c7997e6dd5b0f2d1", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -30,31 +30,31 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc10+0\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc9+0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc10 (size: 180, align: 1) {\n+alloc9 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5+0\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4+0\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500alloc7+0\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc8+99\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500alloc6+0\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500alloc7+99\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc7 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "f8aea27df6660c846f9281e1332a50cee391c35a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.SimplifyLocals.after.mir?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -3,15 +3,14 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             scope 3 {\n-                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             }\n         }\n     }\n@@ -26,70 +25,31 @@ fn main() -> () {\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "f8aea27df6660c846f9281e1332a50cee391c35a", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.SimplifyLocals.after.mir", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.SimplifyLocals.after.mir?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -3,15 +3,14 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:11:11: 11:11\n     let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n-    let mut _3: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n         let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n         scope 2 {\n             debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-            let _4: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             scope 3 {\n-                debug z => _4;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n             }\n         }\n     }\n@@ -26,70 +25,31 @@ fn main() -> () {\n                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n         StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/optimizes_into_variable.rs:13:9: 13:10\n-        StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-        _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32]; // bb0[4]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:31\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000000))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:14: 13:15\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000001))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:17: 13:18\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000002))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:20: 13:21\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000003))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:23: 13:24\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000004))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:26: 13:27\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n-                                         // ty::Const\n-                                         // + ty: i32\n-                                         // + val: Value(Scalar(0x00000005))\n-                                         // mir::Constant\n-                                         // + span: $DIR/optimizes_into_variable.rs:13:29: 13:30\n-                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n-        _2 = const 3i32;                 // bb0[5]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+        _2 = const 3i32;                 // bb0[3]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000003))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000003)) }\n-        StorageDead(_3);                 // bb0[6]: scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n-        StorageLive(_4);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n-        _4 = const 42u32;                // bb0[8]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n+        StorageLive(_3);                 // bb0[4]: scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n+        _3 = const 42u32;                // bb0[5]: scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // ty::Const\n                                          // + ty: u32\n                                          // + val: Value(Scalar(0x0000002a))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:14:13: 14:38\n                                          // + literal: Const { ty: u32, val: Value(Scalar(0x0000002a)) }\n-        _0 = const ();                   // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n+        _0 = const ();                   // bb0[6]: scope 0 at $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/optimizes_into_variable.rs:11:11: 15:2\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        StorageDead(_4);                 // bb0[10]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_2);                 // bb0[11]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        StorageDead(_1);                 // bb0[12]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n-        return;                          // bb0[13]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n+        StorageDead(_3);                 // bb0[7]: scope 2 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_2);                 // bb0[8]: scope 1 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        StorageDead(_1);                 // bb0[9]: scope 0 at $DIR/optimizes_into_variable.rs:15:1: 15:2\n+        return;                          // bb0[10]: scope 0 at $DIR/optimizes_into_variable.rs:15:2: 15:2\n     }\n }"}, {"sha": "bc59be48eee0fb565108da5d360f250b285cd854", "filename": "src/test/mir-opt/simplify-locals-fixedpoint/rustc.foo.SimplifyLocals.diff", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7c0802b34124b777f2cf414a4d88a8576645c3c3/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-fixedpoint%2Frustc.foo.SimplifyLocals.diff?ref=7c0802b34124b777f2cf414a4d88a8576645c3c3", "patch": "@@ -26,40 +26,77 @@\n           StorageDead(_3);                 // bb0[7]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n           StorageDead(_2);                 // bb0[8]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n           _5 = discriminant((_1.0: std::option::Option<u8>)); // bb0[9]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-          switchInt(move _5) -> [1isize: bb1, otherwise: bb3]; // bb0[10]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          switchInt(move _5) -> [1isize: bb2, otherwise: bb1]; // bb0[10]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n       }\n   \n       bb1: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // bb1[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n-          switchInt(move _4) -> [0isize: bb2, otherwise: bb3]; // bb1[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          _0 = const ();                   // bb1[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb7;                     // bb1[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // bb2[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // bb2[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n-          StorageLive(_7);                 // bb2[2]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n-          StorageLive(_8);                 // bb2[3]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n-          _8 = _6;                         // bb2[4]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n-          _7 = Gt(move _8, const 42u8);    // bb2[5]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // bb2[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          switchInt(move _4) -> [0isize: bb3, otherwise: bb1]; // bb2[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+      }\n+  \n+      bb3: {\n+          StorageLive(_6);                 // bb3[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // bb3[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:18: 4:19\n+          StorageLive(_7);                 // bb3[2]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n+          StorageLive(_8);                 // bb3[3]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _8 = _6;                         // bb3[4]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:13\n+          _7 = Gt(move _8, const 42u8);    // bb3[5]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:12: 5:20\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x2a))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-fixedpoint.rs:5:16: 5:20\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x2a)) }\n-          StorageDead(_8);                 // bb2[6]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n-          StorageDead(_7);                 // bb2[7]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n-          StorageDead(_6);                 // bb2[8]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n-          goto -> bb3;                     // bb2[9]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+          StorageDead(_8);                 // bb3[6]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:19: 5:20\n+          switchInt(_7) -> [false: bb4, otherwise: bb5]; // bb3[7]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n-      bb3: {\n-          drop(_1) -> bb4;                 // bb3[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+      bb4: {\n+          _0 = const ();                   // bb4[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb6;                     // bb4[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n       }\n   \n-      bb4: {\n-          StorageDead(_1);                 // bb4[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n-          return;                          // bb4[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:2: 9:2\n+      bb5: {\n+          _0 = const ();                   // bb5[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/simplify-locals-fixedpoint.rs:5:21: 7:10\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb6;                     // bb5[1]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:5:9: 7:10\n+      }\n+  \n+      bb6: {\n+          StorageDead(_7);                 // bb6[0]: scope 1 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          StorageDead(_6);                 // bb6[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:8:5: 8:6\n+          goto -> bb7;                     // bb6[2]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:5: 8:6\n+      }\n+  \n+      bb7: {\n+          drop(_1) -> bb8;                 // bb7[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+      }\n+  \n+      bb8: {\n+          StorageDead(_1);                 // bb8[0]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:1: 9:2\n+          return;                          // bb8[1]: scope 0 at $DIR/simplify-locals-fixedpoint.rs:9:2: 9:2\n       }\n   }\n   "}]}