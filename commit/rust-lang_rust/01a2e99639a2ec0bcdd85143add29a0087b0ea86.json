{"sha": "01a2e99639a2ec0bcdd85143add29a0087b0ea86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTJlOTk2MzlhMmVjMGJjZGQ4NTE0M2FkZDI5YTAwODdiMGVhODY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-22T20:52:28Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-23T13:30:29Z"}, "message": "prepare for gather to gather up multiple maps", "tree": {"sha": "67f17d1961a05eedc9f4a6e55d8ab6e7501599c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f17d1961a05eedc9f4a6e55d8ab6e7501599c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a2e99639a2ec0bcdd85143add29a0087b0ea86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a2e99639a2ec0bcdd85143add29a0087b0ea86", "html_url": "https://github.com/rust-lang/rust/commit/01a2e99639a2ec0bcdd85143add29a0087b0ea86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a2e99639a2ec0bcdd85143add29a0087b0ea86/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2ec15bcf14d6f387befe11eabee529018004901", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ec15bcf14d6f387befe11eabee529018004901", "html_url": "https://github.com/rust-lang/rust/commit/d2ec15bcf14d6f387befe11eabee529018004901"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "f0ff9ba49d25fbbe72d2a1053963b2a91bda9c24", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/01a2e99639a2ec0bcdd85143add29a0087b0ea86/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a2e99639a2ec0bcdd85143add29a0087b0ea86/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=01a2e99639a2ec0bcdd85143add29a0087b0ea86", "patch": "@@ -35,12 +35,12 @@ fn check_crate(tcx: ty::ctxt,\n                  root_map: root_map(),\n                  mutbl_map: int_hash()};\n \n-    let req_loan_map = if msg_level > 0u {\n+    let req_maps = if msg_level > 0u {\n         gather_loans(bccx, crate)\n     } else {\n-        int_hash()\n+        {req_loan_map: int_hash()}\n     };\n-    check_loans(bccx, req_loan_map, crate);\n+    check_loans(bccx, req_maps, crate);\n     ret (bccx.root_map, bccx.mutbl_map);\n }\n \n@@ -189,17 +189,19 @@ fn root_map() -> root_map {\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-// Maps a scope to a list of loans that were issued within that scope.\n-type req_loan_map = hashmap<ast::node_id, @mut [@const [loan]]>;\n+type req_maps = {\n+    req_loan_map: hashmap<ast::node_id, @mut [@const [loan]]>\n+};\n \n-enum gather_loan_ctxt = @{bccx: borrowck_ctxt, req_loan_map: req_loan_map};\n+enum gather_loan_ctxt = @{bccx: borrowck_ctxt, req_maps: req_maps};\n \n-fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_loan_map {\n-    let glcx = gather_loan_ctxt(@{bccx: bccx, req_loan_map: int_hash()});\n+fn gather_loans(bccx: borrowck_ctxt, crate: @ast::crate) -> req_maps {\n+    let glcx = gather_loan_ctxt(@{bccx: bccx,\n+                                  req_maps: {req_loan_map: int_hash()}});\n     let v = visit::mk_vt(@{visit_expr: req_loans_in_expr\n                            with *visit::default_visitor()});\n     visit::visit_crate(*crate, glcx, v);\n-    ret glcx.req_loan_map;\n+    ret glcx.req_maps;\n }\n \n fn req_loans_in_expr(ex: @ast::expr,\n@@ -332,12 +334,12 @@ impl methods for gather_loan_ctxt {\n     }\n \n     fn add_loans(scope_id: ast::node_id, loans: @const [loan]) {\n-        alt self.req_loan_map.find(scope_id) {\n+        alt self.req_maps.req_loan_map.find(scope_id) {\n           some(l) {\n             *l += [loans];\n           }\n           none {\n-            self.req_loan_map.insert(scope_id, @mut [loans]);\n+            self.req_maps.req_loan_map.insert(scope_id, @mut [loans]);\n           }\n         }\n     }\n@@ -467,7 +469,7 @@ impl methods for gather_loan_ctxt {\n \n enum check_loan_ctxt = @{\n     bccx: borrowck_ctxt,\n-    req_loan_map: req_loan_map,\n+    req_maps: req_maps,\n \n     // Keep track of whether we're inside a ctor, so as to\n     // allow mutating immutable fields in the same class if\n@@ -478,10 +480,10 @@ enum check_loan_ctxt = @{\n };\n \n fn check_loans(bccx: borrowck_ctxt,\n-               req_loan_map: req_loan_map,\n+               req_maps: req_maps,\n                crate: @ast::crate) {\n     let clcx = check_loan_ctxt(@{bccx: bccx,\n-                                 req_loan_map: req_loan_map,\n+                                 req_maps: req_maps,\n                                  mut in_ctor: false,\n                                  mut is_pure: false});\n     let vt = visit::mk_vt(@{visit_expr: check_loans_in_expr,\n@@ -514,7 +516,7 @@ impl methods for check_loan_ctxt {\n                   f: fn(loan) -> bool) {\n         let mut scope_id = scope_id;\n         let region_map = self.tcx().region_map;\n-        let req_loan_map = self.req_loan_map;\n+        let req_loan_map = self.req_maps.req_loan_map;\n \n         loop {\n             for req_loan_map.find(scope_id).each { |loanss|\n@@ -613,7 +615,7 @@ impl methods for check_loan_ctxt {\n     }\n \n     fn check_for_conflicting_loans(scope_id: ast::node_id) {\n-        let new_loanss = alt self.req_loan_map.find(scope_id) {\n+        let new_loanss = alt self.req_maps.req_loan_map.find(scope_id) {\n             none { ret; }\n             some(loanss) { loanss }\n         };"}]}