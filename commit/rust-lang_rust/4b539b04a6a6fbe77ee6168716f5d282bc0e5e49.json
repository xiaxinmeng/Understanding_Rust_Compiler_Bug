{"sha": "4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "node_id": "C_kwDOAAsO6NoAKDRiNTM5YjA0YTZhNmZiZTc3ZWU2MTY4NzE2ZjVkMjgyYmMwZTVlNDk", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-25T03:00:48Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T03:48:42Z"}, "message": "Add more `const_trait` annotations", "tree": {"sha": "086a691c30f5873bca19c37289e2b2a5388c2e46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/086a691c30f5873bca19c37289e2b2a5388c2e46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "html_url": "https://github.com/rust-lang/rust/commit/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be65e03676607dabac87cb4771692e5fc0fb6ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/be65e03676607dabac87cb4771692e5fc0fb6ad7", "html_url": "https://github.com/rust-lang/rust/commit/be65e03676607dabac87cb4771692e5fc0fb6ad7"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "0480704a6d6fa2408a92b5a279689c8475339621", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "patch": "@@ -155,6 +155,7 @@ pub const fn identity<T>(x: T) -> T {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\n+#[const_trait]\n pub trait AsRef<T: ?Sized> {\n     /// Converts this type into a shared reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -197,6 +198,7 @@ pub trait AsRef<T: ?Sized> {\n /// [`Box<T>`]: ../../std/boxed/struct.Box.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\n+#[const_trait]\n pub trait AsMut<T: ?Sized> {\n     /// Converts this type into a mutable reference of the (usually inferred) input type.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -273,6 +275,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n #[rustc_diagnostic_item = \"Into\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait Into<T>: Sized {\n     /// Converts this type into the (usually inferred) input type.\n     #[must_use]\n@@ -393,6 +396,7 @@ pub trait From<T>: Sized {\n /// [`Into`], see there for details.\n #[rustc_diagnostic_item = \"TryInto\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+#[const_trait]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n     #[stable(feature = \"try_from\", since = \"1.34.0\")]\n@@ -469,6 +473,7 @@ pub trait TryInto<T>: Sized {\n /// [`try_from`]: TryFrom::try_from\n #[rustc_diagnostic_item = \"TryFrom\"]\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n+#[const_trait]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n     #[stable(feature = \"try_from\", since = \"1.34.0\")]"}, {"sha": "8d74f9d2d984a0cdcdd752ab0cb3d7ffdef938a9", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "patch": "@@ -97,6 +97,7 @@\n     )\n )]\n #[doc(alias = \"+\")]\n+#[const_trait]\n pub trait Add<Rhs = Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -204,6 +205,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n     label = \"no implementation for `{Self} - {Rhs}`\"\n )]\n #[doc(alias = \"-\")]\n+#[const_trait]\n pub trait Sub<Rhs = Self> {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -333,6 +335,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n     label = \"no implementation for `{Self} * {Rhs}`\"\n )]\n #[doc(alias = \"*\")]\n+#[const_trait]\n pub trait Mul<Rhs = Self> {\n     /// The resulting type after applying the `*` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -466,6 +469,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n     label = \"no implementation for `{Self} / {Rhs}`\"\n )]\n #[doc(alias = \"/\")]\n+#[const_trait]\n pub trait Div<Rhs = Self> {\n     /// The resulting type after applying the `/` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -568,6 +572,7 @@ div_impl_float! { f32 f64 }\n     label = \"no implementation for `{Self} % {Rhs}`\"\n )]\n #[doc(alias = \"%\")]\n+#[const_trait]\n pub trait Rem<Rhs = Self> {\n     /// The resulting type after applying the `%` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -682,6 +687,7 @@ rem_impl_float! { f32 f64 }\n #[lang = \"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(alias = \"-\")]\n+#[const_trait]\n pub trait Neg {\n     /// The resulting type after applying the `-` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -755,6 +761,7 @@ neg_impl! { isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"+\")]\n #[doc(alias = \"+=\")]\n+#[const_trait]\n pub trait AddAssign<Rhs = Self> {\n     /// Performs the `+=` operation.\n     ///\n@@ -822,6 +829,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"-\")]\n #[doc(alias = \"-=\")]\n+#[const_trait]\n pub trait SubAssign<Rhs = Self> {\n     /// Performs the `-=` operation.\n     ///\n@@ -880,6 +888,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n )]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*=\")]\n+#[const_trait]\n pub trait MulAssign<Rhs = Self> {\n     /// Performs the `*=` operation.\n     ///"}, {"sha": "327009801d1bdd9df8c6e7ea4f744851a6e76b13", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "patch": "@@ -144,6 +144,7 @@ impl const Not for ! {\n     message = \"no implementation for `{Self} & {Rhs}`\",\n     label = \"no implementation for `{Self} & {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitAnd<Rhs = Self> {\n     /// The resulting type after applying the `&` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -245,6 +246,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} | {Rhs}`\",\n     label = \"no implementation for `{Self} | {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitOr<Rhs = Self> {\n     /// The resulting type after applying the `|` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -346,6 +348,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} ^ {Rhs}`\",\n     label = \"no implementation for `{Self} ^ {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitXor<Rhs = Self> {\n     /// The resulting type after applying the `^` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -446,6 +449,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} << {Rhs}`\",\n     label = \"no implementation for `{Self} << {Rhs}`\"\n )]\n+#[const_trait]\n pub trait Shl<Rhs = Self> {\n     /// The resulting type after applying the `<<` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -565,6 +569,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n     message = \"no implementation for `{Self} >> {Rhs}`\",\n     label = \"no implementation for `{Self} >> {Rhs}`\"\n )]\n+#[const_trait]\n pub trait Shr<Rhs = Self> {\n     /// The resulting type after applying the `>>` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -693,6 +698,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n     message = \"no implementation for `{Self} &= {Rhs}`\",\n     label = \"no implementation for `{Self} &= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitAndAssign<Rhs = Self> {\n     /// Performs the `&=` operation.\n     ///\n@@ -765,6 +771,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} |= {Rhs}`\",\n     label = \"no implementation for `{Self} |= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitOrAssign<Rhs = Self> {\n     /// Performs the `|=` operation.\n     ///\n@@ -837,6 +844,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n     message = \"no implementation for `{Self} ^= {Rhs}`\",\n     label = \"no implementation for `{Self} ^= {Rhs}`\"\n )]\n+#[const_trait]\n pub trait BitXorAssign<Rhs = Self> {\n     /// Performs the `^=` operation.\n     ///"}, {"sha": "4f4c99c4ad97c829251f2f9c26fbffe051680a8a", "filename": "library/core/src/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fderef.rs?ref=4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "patch": "@@ -61,7 +61,7 @@\n #[doc(alias = \"&*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"Deref\"]\n-#[const_trait]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Deref {\n     /// The resulting type after dereferencing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -170,6 +170,7 @@ impl<T: ?Sized> const Deref for &mut T {\n #[lang = \"deref_mut\"]\n #[doc(alias = \"*\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[const_trait]\n pub trait DerefMut: Deref {\n     /// Mutably dereferences the value.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "dd4e3ac1c2fe5319dca6f39370dcddc34b0e8827", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b539b04a6a6fbe77ee6168716f5d282bc0e5e49/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=4b539b04a6a6fbe77ee6168716f5d282bc0e5e49", "patch": "@@ -55,7 +55,7 @@\n #[doc(alias = \"]\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"[]\")]\n-#[const_trait]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -164,7 +164,7 @@ see chapter in The Book <https://doc.rust-lang.org/book/ch08-02-strings.html#ind\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n-#[const_trait]\n+#[cfg_attr(not(bootstrap), const_trait)]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// Performs the mutable indexing (`container[index]`) operation.\n     ///"}]}