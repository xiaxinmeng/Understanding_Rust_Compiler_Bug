{"sha": "30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNjMyZmI4ZTZlNGQ2Yjk5OGYyYWY3ZGE5MzkzMWRkYjlmNWRlMDM=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-10-18T08:55:25Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Allow this lint on lint tests", "tree": {"sha": "a8c0adf7af422212b6fb324ed9766f1cf3de5697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c0adf7af422212b6fb324ed9766f1cf3de5697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "html_url": "https://github.com/rust-lang/rust/commit/30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7692cf7493facefd520a98bf86aa1f4a031f435", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7692cf7493facefd520a98bf86aa1f4a031f435", "html_url": "https://github.com/rust-lang/rust/commit/c7692cf7493facefd520a98bf86aa1f4a031f435"}], "stats": {"total": 322, "additions": 173, "deletions": 149}, "files": [{"sha": "78ec1727fc11fc8d17e5bedd4b4e2c5cac60a61b", "filename": "tests/ui/derive_ord_xor_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fderive_ord_xor_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::derive_ord_xor_partial_ord)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::cmp::Ordering;\n "}, {"sha": "97b46a4aa89828c3dda6d9ed82f65c8f288cf835", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,12 +1,12 @@\n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:20:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:21:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n    = note: `-D clippy::derive-ord-xor-partial-ord` implied by `-D warnings`\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:23:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:24:1\n    |\n LL | / impl PartialOrd for DeriveOrd {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -17,13 +17,13 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n-  --> $DIR/derive_ord_xor_partial_ord.rs:29:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:30:10\n    |\n LL | #[derive(Ord, PartialEq, Eq)]\n    |          ^^^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:32:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:33:1\n    |\n LL | / impl PartialOrd<DeriveOrdWithExplicitTypeVariable> for DeriveOrdWithExplicitTypeVariable {\n LL | |     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -34,7 +34,7 @@ LL | | }\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:41:1\n+  --> $DIR/derive_ord_xor_partial_ord.rs:42:1\n    |\n LL | / impl std::cmp::Ord for DerivePartialOrd {\n LL | |     fn cmp(&self, other: &Self) -> Ordering {\n@@ -44,14 +44,14 @@ LL | | }\n    | |_^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:38:10\n+  --> $DIR/derive_ord_xor_partial_ord.rs:39:10\n    |\n LL | #[derive(PartialOrd, PartialEq, Eq)]\n    |          ^^^^^^^^^^\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n-  --> $DIR/derive_ord_xor_partial_ord.rs:61:5\n+  --> $DIR/derive_ord_xor_partial_ord.rs:62:5\n    |\n LL | /     impl Ord for DerivePartialOrdInUseOrd {\n LL | |         fn cmp(&self, other: &Self) -> Ordering {\n@@ -61,7 +61,7 @@ LL | |     }\n    | |_____^\n    |\n note: `PartialOrd` implemented here\n-  --> $DIR/derive_ord_xor_partial_ord.rs:58:14\n+  --> $DIR/derive_ord_xor_partial_ord.rs:59:14\n    |\n LL |     #[derive(PartialOrd, PartialEq, Eq)]\n    |              ^^^^^^^^^^"}, {"sha": "77df7f176f029903a7c7ac7a9197dffc262930a6", "filename": "tests/ui/doc_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fdoc_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fdoc_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_errors.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n #![warn(clippy::missing_errors_doc)]\n #![allow(clippy::result_unit_err)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::io;\n "}, {"sha": "ba12e76382152d49199cdd39d13a79d2d556e79a", "filename": "tests/ui/drop_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,6 +1,7 @@\n #![warn(clippy::drop_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n #![allow(clippy::map_err_ignore)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::mem::drop;\n "}, {"sha": "a9c2a92ce6be1f004766c9385bf3aab53edc3a4e", "filename": "tests/ui/forget_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,6 @@\n #![warn(clippy::forget_ref)]\n #![allow(clippy::toplevel_ref_arg)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::mem::forget;\n "}, {"sha": "b2c7f2023bfbf47519d00125d17da0babb767022", "filename": "tests/ui/forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,108 +1,108 @@\n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:9:5\n+  --> $DIR/forget_ref.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:9:12\n+  --> $DIR/forget_ref.rs:10:12\n    |\n LL |     forget(&SomeStruct);\n    |            ^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:12:5\n+  --> $DIR/forget_ref.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:12:12\n+  --> $DIR/forget_ref.rs:13:12\n    |\n LL |     forget(&owned);\n    |            ^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forget_ref.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^^^^^^^^^\n    |\n note: argument has type `&&SomeStruct`\n-  --> $DIR/forget_ref.rs:13:12\n+  --> $DIR/forget_ref.rs:14:12\n    |\n LL |     forget(&&owned);\n    |            ^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forget_ref.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:14:12\n+  --> $DIR/forget_ref.rs:15:12\n    |\n LL |     forget(&mut owned);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:18:5\n+  --> $DIR/forget_ref.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:18:12\n+  --> $DIR/forget_ref.rs:19:12\n    |\n LL |     forget(&*reference1);\n    |            ^^^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:21:5\n+  --> $DIR/forget_ref.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&mut SomeStruct`\n-  --> $DIR/forget_ref.rs:21:12\n+  --> $DIR/forget_ref.rs:22:12\n    |\n LL |     forget(reference2);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:24:5\n+  --> $DIR/forget_ref.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:24:12\n+  --> $DIR/forget_ref.rs:25:12\n    |\n LL |     forget(reference3);\n    |            ^^^^^^^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:29:5\n+  --> $DIR/forget_ref.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n note: argument has type `&T`\n-  --> $DIR/forget_ref.rs:29:12\n+  --> $DIR/forget_ref.rs:30:12\n    |\n LL |     forget(&val);\n    |            ^^^^\n \n error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/forget_ref.rs:37:5\n+  --> $DIR/forget_ref.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: argument has type `&SomeStruct`\n-  --> $DIR/forget_ref.rs:37:22\n+  --> $DIR/forget_ref.rs:38:22\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |                      ^^^^^^^^^^^"}, {"sha": "e3800cda1b1841e60a2902f225f207c410a955b2", "filename": "tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::let_underscore_must_use)]\n+#![allow(clippy::unnecessary_wrap)]\n \n // Debug implementations can fire this lint,\n // so we shouldn't lint external macros"}, {"sha": "5b751ea56deffe96d0413506ba5ed67abd039e6b", "filename": "tests/ui/let_underscore_must_use.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:66:5\n+  --> $DIR/let_underscore_must_use.rs:67:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n@@ -8,87 +8,87 @@ LL |     let _ = f();\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:67:5\n+  --> $DIR/let_underscore_must_use.rs:68:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:69:5\n+  --> $DIR/let_underscore_must_use.rs:70:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:73:5\n+  --> $DIR/let_underscore_must_use.rs:74:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:74:5\n+  --> $DIR/let_underscore_must_use.rs:75:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:77:5\n+  --> $DIR/let_underscore_must_use.rs:78:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:78:5\n+  --> $DIR/let_underscore_must_use.rs:79:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:80:5\n+  --> $DIR/let_underscore_must_use.rs:81:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:82:5\n+  --> $DIR/let_underscore_must_use.rs:83:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on a result of a `#[must_use]` function\n-  --> $DIR/let_underscore_must_use.rs:86:5\n+  --> $DIR/let_underscore_must_use.rs:87:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:88:5\n+  --> $DIR/let_underscore_must_use.rs:89:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n error: non-binding let on an expression with `#[must_use]` type\n-  --> $DIR/let_underscore_must_use.rs:90:5\n+  --> $DIR/let_underscore_must_use.rs:91:5\n    |\n LL |     let _ = a;\n    |     ^^^^^^^^^^"}, {"sha": "b4a51837b2fbcc668c81f9699e2050cf2c18a265", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -4,6 +4,7 @@\n #![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "e83cc46bda2837c3dd32dd03c55cc6fe1cf76cbe", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -4,6 +4,7 @@\n #![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn main() {\n     // mapping to Option on Iterator"}, {"sha": "e5973bbef8d4aa84400ad99a2988c27141d96d3e", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value)]\n+#![allow(dead_code, clippy::needless_pass_by_value, clippy::unnecessary_wrap)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "de2e91559060828f88cca7ac7be789599dd2a9b3", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "f0887c8a4bce05de76ec41999773871df8c8f94d", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn do_nothing<T>(_: T) {}\n "}, {"sha": "8abdbcafb6e935ed9ae422fc893e801f27363723", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n@@ -9,135 +9,135 @@ LL |     x.field.map(do_nothing);\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:40:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:41:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:42:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:43:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:48:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:50:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:57:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:59:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:66:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:67:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:68:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:75:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:77:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:78:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:80:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:81:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n-  --> $DIR/option_map_unit_fn_fixable.rs:82:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:83:5\n    |\n LL |     option().map(do_nothing);}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^-"}, {"sha": "557d29dff67ab1eaf4ad697e558fd4f68042c260", "filename": "tests/ui/option_option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,4 +1,5 @@\n #![deny(clippy::option_option)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn input(_: Option<Option<u8>>) {}\n "}, {"sha": "8ace8338fcf036d869c13d0a7062edd65941d741", "filename": "tests/ui/option_option.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Foption_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_option.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:3:13\n+  --> $DIR/option_option.rs:4:13\n    |\n LL | fn input(_: Option<Option<u8>>) {}\n    |             ^^^^^^^^^^^^^^^^^^\n@@ -11,55 +11,55 @@ LL | #![deny(clippy::option_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:5:16\n+  --> $DIR/option_option.rs:6:16\n    |\n LL | fn output() -> Option<Option<u8>> {\n    |                ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:9:27\n+  --> $DIR/option_option.rs:10:27\n    |\n LL | fn output_nested() -> Vec<Option<Option<u8>>> {\n    |                           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:14:30\n+  --> $DIR/option_option.rs:15:30\n    |\n LL | fn output_nested_nested() -> Option<Option<Option<u8>>> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:19:8\n+  --> $DIR/option_option.rs:20:8\n    |\n LL |     x: Option<Option<u8>>,\n    |        ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:23:23\n+  --> $DIR/option_option.rs:24:23\n    |\n LL |     fn struct_fn() -> Option<Option<u8>> {\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:29:22\n+  --> $DIR/option_option.rs:30:22\n    |\n LL |     fn trait_fn() -> Option<Option<u8>>;\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:33:11\n+  --> $DIR/option_option.rs:34:11\n    |\n LL |     Tuple(Option<Option<u8>>),\n    |           ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:34:17\n+  --> $DIR/option_option.rs:35:17\n    |\n LL |     Struct { x: Option<Option<u8>> },\n    |                 ^^^^^^^^^^^^^^^^^^\n \n error: consider using `Option<T>` instead of `Option<Option<T>>` or a custom enum if you need to distinguish all 3 cases\n-  --> $DIR/option_option.rs:75:14\n+  --> $DIR/option_option.rs:78:14\n    |\n LL |         foo: Option<Option<Cow<'a, str>>>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e1735bc88f57b4ab38a0c1f743ebb16148d694ce", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "a6abd2e8b349845522aa4917197a8d63a866de97", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n \n #![warn(clippy::or_fun_call)]\n #![allow(dead_code)]\n+#![allow(clippy::unnecessary_wrap)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "8a7b5574c84e74fb09b564505ccc3fcb6dd13b25", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,61 +1,61 @@\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:32:19\n+  --> $DIR/or_fun_call.rs:33:19\n    |\n LL |     with_const_fn.unwrap_or(Duration::from_secs(5));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Duration::from_secs(5))`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:35:22\n+  --> $DIR/or_fun_call.rs:36:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:38:5\n+  --> $DIR/or_fun_call.rs:39:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:41:21\n+  --> $DIR/or_fun_call.rs:42:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:44:14\n+  --> $DIR/or_fun_call.rs:45:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:47:19\n+  --> $DIR/or_fun_call.rs:48:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:50:5\n+  --> $DIR/or_fun_call.rs:51:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/or_fun_call.rs:53:5\n+  --> $DIR/or_fun_call.rs:54:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/or_fun_call.rs:56:5\n+  --> $DIR/or_fun_call.rs:57:5\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:59:21\n+  --> $DIR/or_fun_call.rs:60:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`"}, {"sha": "be4e85d05a7239797d9ea54f559a243314371616", "filename": "tests/ui/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wrap)]\n \n struct A;\n "}, {"sha": "ca73ac5a4111405c946c7dc8f6a422917cae48da", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:6:5\n+  --> $DIR/panic_in_result_fn.rs:7:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -10,14 +10,14 @@ LL | |     }\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:8:9\n+  --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:11:5\n+  --> $DIR/panic_in_result_fn.rs:12:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -27,14 +27,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:13:9\n+  --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:16:5\n+  --> $DIR/panic_in_result_fn.rs:17:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -44,14 +44,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:18:9\n+  --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:21:5\n+  --> $DIR/panic_in_result_fn.rs:22:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n LL | |     {\n@@ -61,14 +61,14 @@ LL | |     }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:23:9\n+  --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:52:1\n+  --> $DIR/panic_in_result_fn.rs:53:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n LL | | {\n@@ -78,14 +78,14 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:54:5\n+  --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn.rs:67:1\n+  --> $DIR/panic_in_result_fn.rs:68:1\n    |\n LL | / fn main() -> Result<(), String> {\n LL | |     todo!(\"finish main method\");\n@@ -95,7 +95,7 @@ LL | | }\n    |\n    = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn.rs:68:5\n+  --> $DIR/panic_in_result_fn.rs:69:5\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "df3c98a0aa57acb284d5d4ed4112c7cae5851aaf", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     a?;"}, {"sha": "62b3e96b65a89bf61e58cb9e2621b846f3fe05dd", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(unreachable_code)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn some_func(a: Option<u32>) -> Option<u32> {\n     if a.is_none() {"}, {"sha": "6f330cfa385dddeaab2c9473fb9c684f381aea27", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:5:5\n+  --> $DIR/question_mark.rs:6:5\n    |\n LL | /     if a.is_none() {\n LL | |         return None;\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:50:9\n+  --> $DIR/question_mark.rs:51:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:54:9\n+  --> $DIR/question_mark.rs:55:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:58:17\n+  --> $DIR/question_mark.rs:59:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -36,7 +36,7 @@ LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:64:17\n+  --> $DIR/question_mark.rs:65:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,31 +47,31 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:81:9\n+  --> $DIR/question_mark.rs:82:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:89:9\n+  --> $DIR/question_mark.rs:90:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:97:9\n+  --> $DIR/question_mark.rs:98:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:104:26\n+  --> $DIR/question_mark.rs:105:26\n    |\n LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n    |  __________________________^\n@@ -82,7 +82,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:114:17\n+  --> $DIR/question_mark.rs:115:17\n    |\n LL |           let v = if let Some(v) = self.opt {\n    |  _________________^\n@@ -93,7 +93,7 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:129:5\n+  --> $DIR/question_mark.rs:130:5\n    |\n LL | /     if f().is_none() {\n LL | |         return None;"}, {"sha": "2e7ba8bc04d8de7af386b3d6977393cdef782814", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wrap,\n     deprecated\n )]\n "}, {"sha": "ea0e18f5970a8fdce401217daab42fe5f34acacb", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -7,6 +7,7 @@\n     unused_must_use,\n     clippy::needless_bool,\n     clippy::match_like_matches_macro,\n+    clippy::unnecessary_wrap,\n     deprecated\n )]\n "}, {"sha": "5341e81836a4ef7daca2c6dc42fe11184aaceaab", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,19 +1,19 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:15:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Ok(_) = &result {}\n    |     -------^^^^^---------- help: try this: `if result.is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:17:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:19:12\n+  --> $DIR/redundant_pattern_matching.rs:20:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`"}, {"sha": "19458ddf68efc76585733023129b1fe359e9517b", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wrap)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "ab6a32dbe4d053893d4a0abca2614c549689529e", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -2,6 +2,7 @@\n // aux-build:macro_rules.rs\n \n #![deny(clippy::try_err)]\n+#![allow(clippy::unnecessary_wrap)]\n \n #[macro_use]\n extern crate macro_rules;"}, {"sha": "ababa64e6d843f9967683964a4c006013ebd8070", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:18:9\n+  --> $DIR/try_err.rs:19:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err)`\n@@ -11,19 +11,19 @@ LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:28:9\n+  --> $DIR/try_err.rs:29:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:48:17\n+  --> $DIR/try_err.rs:49:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:67:17\n+  --> $DIR/try_err.rs:68:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`"}, {"sha": "6bf704c09e0ee040bf02252358ac76d95db61118", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -4,6 +4,7 @@\n     unused_must_use,\n     unused_variables,\n     clippy::unused_unit,\n+    clippy::unnecessary_wrap,\n     clippy::or_fun_call\n )]\n "}, {"sha": "c3a839a9bf8120fcefe07023da88df1948f89ff8", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:29:5\n+  --> $DIR/unit_arg.rs:30:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:5\n+  --> $DIR/unit_arg.rs:33:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:33:5\n+  --> $DIR/unit_arg.rs:34:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:38:5\n+  --> $DIR/unit_arg.rs:39:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:41:5\n+  --> $DIR/unit_arg.rs:42:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:42:5\n+  --> $DIR/unit_arg.rs:43:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:46:5\n+  --> $DIR/unit_arg.rs:47:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -140,7 +140,7 @@ LL |         foo(2);\n  ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:57:13\n+  --> $DIR/unit_arg.rs:58:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:60:5\n+  --> $DIR/unit_arg.rs:61:5\n    |\n LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |     foo(())\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:93:5\n+  --> $DIR/unit_arg.rs:94:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "3b1a6cf57c65b6bd055832c086a9a12614f44bc8", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,7 +1,7 @@\n // does not test any rustfixable lints\n \n #![warn(clippy::clone_on_ref_ptr)]\n-#![allow(unused, clippy::redundant_clone)]\n+#![allow(unused, clippy::redundant_clone, clippy::unnecessary_wrap)]\n \n use std::cell::RefCell;\n use std::rc::{self, Rc};"}, {"sha": "45ee367d649bb74c113a888c6cbe04e4508b93d1", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = val;"}, {"sha": "e5bdffed20d96ee5f190dc86e59f0f80a02608ad", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![deny(clippy::useless_conversion)]\n+#![allow(clippy::unnecessary_wrap)]\n \n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::from(val);"}, {"sha": "26a33595031bd9455e54317395bf978e55ee7b1f", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,5 +1,5 @@\n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:6:13\n+  --> $DIR/useless_conversion.rs:7:13\n    |\n LL |     let _ = T::from(val);\n    |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion.rs:7:5\n+  --> $DIR/useless_conversion.rs:8:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:19:22\n+  --> $DIR/useless_conversion.rs:20:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:60:21\n+  --> $DIR/useless_conversion.rs:61:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:61:21\n+  --> $DIR/useless_conversion.rs:62:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:62:13\n+  --> $DIR/useless_conversion.rs:63:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:63:13\n+  --> $DIR/useless_conversion.rs:64:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n error: useless conversion to the same type: `std::str::Lines`\n-  --> $DIR/useless_conversion.rs:64:13\n+  --> $DIR/useless_conversion.rs:65:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n-  --> $DIR/useless_conversion.rs:65:13\n+  --> $DIR/useless_conversion.rs:66:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion.rs:66:21\n+  --> $DIR/useless_conversion.rs:67:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `format!(\"Hello {}\", \"world\")`\n \n error: useless conversion to the same type: `i32`\n-  --> $DIR/useless_conversion.rs:71:13\n+  --> $DIR/useless_conversion.rs:72:13\n    |\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`"}, {"sha": "14007e5f251da5ecad137c6be43d922c239c8886", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wrap)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "0e8631ca7047e568008d1ec13fe8547aaa812c09", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -4,6 +4,7 @@\n #![warn(clippy::wildcard_imports)]\n //#![allow(clippy::redundant_pub_crate)]\n #![allow(unused)]\n+#![allow(clippy::unnecessary_wrap)]\n #![warn(unused_imports)]\n \n extern crate wildcard_imports_helper;"}, {"sha": "66267dd27b84fcf4da55e265ed164709a6e6647e", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30632fb8e6e4d6b998f2af7da93931ddb9f5de03/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=30632fb8e6e4d6b998f2af7da93931ddb9f5de03", "patch": "@@ -1,123 +1,123 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:11:5\n+  --> $DIR/wildcard_imports.rs:12:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:12:5\n+  --> $DIR/wildcard_imports.rs:13:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:13:5\n+  --> $DIR/wildcard_imports.rs:14:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:15:5\n+  --> $DIR/wildcard_imports.rs:16:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:19:5\n+  --> $DIR/wildcard_imports.rs:20:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:21:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:91:13\n+  --> $DIR/wildcard_imports.rs:92:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:97:75\n+  --> $DIR/wildcard_imports.rs:98:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:98:13\n+  --> $DIR/wildcard_imports.rs:99:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:20\n+  --> $DIR/wildcard_imports.rs:110:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:109:30\n+  --> $DIR/wildcard_imports.rs:110:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:116:13\n+  --> $DIR/wildcard_imports.rs:117:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:145:9\n+  --> $DIR/wildcard_imports.rs:146:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:154:9\n+  --> $DIR/wildcard_imports.rs:155:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:155:9\n+  --> $DIR/wildcard_imports.rs:156:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:166:13\n+  --> $DIR/wildcard_imports.rs:167:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:201:17\n+  --> $DIR/wildcard_imports.rs:202:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:209:13\n+  --> $DIR/wildcard_imports.rs:210:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:218:17\n+  --> $DIR/wildcard_imports.rs:219:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:227:13\n+  --> $DIR/wildcard_imports.rs:228:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`"}]}