{"sha": "66ef652559ab670b4f7c3be973e019f0d55b3644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZWY2NTI1NTlhYjY3MGI0ZjdjM2JlOTczZTAxOWYwZDU1YjM2NDQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-24T03:23:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-29T01:25:36Z"}, "message": "Disallow `derive` on items with type macros", "tree": {"sha": "1182fa7ac90ab3c713b6abbdc763b11cddfa59dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1182fa7ac90ab3c713b6abbdc763b11cddfa59dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66ef652559ab670b4f7c3be973e019f0d55b3644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66ef652559ab670b4f7c3be973e019f0d55b3644", "html_url": "https://github.com/rust-lang/rust/commit/66ef652559ab670b4f7c3be973e019f0d55b3644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66ef652559ab670b4f7c3be973e019f0d55b3644/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0dc9297283daff6486807f43e190b4eb561412", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0dc9297283daff6486807f43e190b4eb561412", "html_url": "https://github.com/rust-lang/rust/commit/ea0dc9297283daff6486807f43e190b4eb561412"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "e01f4ed1f9bd233a932762ebf3cd110078703805", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66ef652559ab670b4f7c3be973e019f0d55b3644/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ef652559ab670b4f7c3be973e019f0d55b3644/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=66ef652559ab670b4f7c3be973e019f0d55b3644", "patch": "@@ -345,15 +345,18 @@ pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n /// This method helps to extract all the type parameters referenced from a\n /// type. For a type parameter `<T>`, it looks for either a `TyPath` that\n /// is not global and starts with `T`, or a `TyQPath`.\n-fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast::Ty>> {\n+fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name], span: Span, cx: &ExtCtxt)\n+                        -> Vec<P<ast::Ty>> {\n     use syntax::visit;\n \n-    struct Visitor<'a> {\n+    struct Visitor<'a, 'b: 'a> {\n+        cx: &'a ExtCtxt<'b>,\n+        span: Span,\n         ty_param_names: &'a [ast::Name],\n         types: Vec<P<ast::Ty>>,\n     }\n \n-    impl<'a> visit::Visitor for Visitor<'a> {\n+    impl<'a, 'b> visit::Visitor for Visitor<'a, 'b> {\n         fn visit_ty(&mut self, ty: &ast::Ty) {\n             match ty.node {\n                 ast::TyKind::Path(_, ref path) if !path.global => {\n@@ -371,11 +374,18 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n \n             visit::walk_ty(self, ty)\n         }\n+\n+        fn visit_mac(&mut self, mac: &ast::Mac) {\n+            let span = Span { expn_id: self.span.expn_id, ..mac.span };\n+            self.cx.span_err(span, \"`derive` cannot be used on items with type macros\");\n+        }\n     }\n \n     let mut visitor = Visitor {\n         ty_param_names: ty_param_names,\n         types: Vec::new(),\n+        span: span,\n+        cx: cx,\n     };\n \n     visit::Visitor::visit_ty(&mut visitor, ty);\n@@ -556,7 +566,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut processed_field_types = HashSet::new();\n             for field_ty in field_tys {\n-                let tys = find_type_parameters(&field_ty, &ty_param_names);\n+                let tys = find_type_parameters(&field_ty, &ty_param_names, self.span, cx);\n \n                 for ty in tys {\n                     // if we have already handled this type, skip it"}, {"sha": "e8ca1c1fa98ff4a99c755f274b3a7d3aa2c8f799", "filename": "src/test/compile-fail/issue-32950.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66ef652559ab670b4f7c3be973e019f0d55b3644/src%2Ftest%2Fcompile-fail%2Fissue-32950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ef652559ab670b4f7c3be973e019f0d55b3644/src%2Ftest%2Fcompile-fail%2Fissue-32950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32950.rs?ref=66ef652559ab670b4f7c3be973e019f0d55b3644", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(type_macros, concat_idents, rustc_attrs)]\n-#![allow(unused)]\n+#![feature(type_macros, concat_idents)]\n \n-#[derive(Debug)] struct FooBar;\n-#[derive(Debug)] struct Baz<T>(T, concat_idents!(Foo, Bar));\n+#[derive(Debug)] //~ NOTE in this expansion\n+struct Baz<T>(\n+    concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+);\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}]}