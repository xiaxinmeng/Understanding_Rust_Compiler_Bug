{"sha": "069c1655369aa33223788b4f1b8407b6d6b63193", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWMxNjU1MzY5YWEzMzIyMzc4OGI0ZjFiODQwN2I2ZDZiNjMxOTM=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:17:54Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T18:17:54Z"}, "message": "Actually respect disabling cargo check functionality", "tree": {"sha": "09d087f08a19e74aa2e5b84299607795d15dde8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d087f08a19e74aa2e5b84299607795d15dde8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069c1655369aa33223788b4f1b8407b6d6b63193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069c1655369aa33223788b4f1b8407b6d6b63193", "html_url": "https://github.com/rust-lang/rust/commit/069c1655369aa33223788b4f1b8407b6d6b63193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069c1655369aa33223788b4f1b8407b6d6b63193/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d04d05756e7074de2b73b35718b5b4ae670d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d04d05756e7074de2b73b35718b5b4ae670d1b", "html_url": "https://github.com/rust-lang/rust/commit/f7d04d05756e7074de2b73b35718b5b4ae670d1b"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "42e55565f2fa14e9fae24c90a2dcf92854b7ca40", "filename": "crates/ra_lsp_server/src/cargo_check.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/069c1655369aa33223788b4f1b8407b6d6b63193/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069c1655369aa33223788b4f1b8407b6d6b63193/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_check.rs?ref=069c1655369aa33223788b4f1b8407b6d6b63193", "patch": "@@ -33,6 +33,7 @@ pub struct CheckWatcher {\n \n impl CheckWatcher {\n     pub fn new(options: &Options, workspace_root: PathBuf) -> CheckWatcher {\n+        let check_enabled = options.cargo_check_enable;\n         let check_command = options.cargo_check_command.clone();\n         let check_args = options.cargo_check_args.clone();\n         let shared = Arc::new(RwLock::new(CheckWatcherSharedState::new()));\n@@ -41,8 +42,13 @@ impl CheckWatcher {\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let shared_ = shared.clone();\n         let handle = std::thread::spawn(move || {\n-            let mut check =\n-                CheckWatcherState::new(check_command, check_args, workspace_root, shared_);\n+            let mut check = CheckWatcherState::new(\n+                check_enabled,\n+                check_command,\n+                check_args,\n+                workspace_root,\n+                shared_,\n+            );\n             check.run(&task_send, &cmd_recv);\n         });\n \n@@ -55,6 +61,7 @@ impl CheckWatcher {\n }\n \n pub struct CheckWatcherState {\n+    check_enabled: bool,\n     check_command: Option<String>,\n     check_args: Vec<String>,\n     workspace_root: PathBuf,\n@@ -142,13 +149,16 @@ pub enum CheckCommand {\n \n impl CheckWatcherState {\n     pub fn new(\n+        check_enabled: bool,\n         check_command: Option<String>,\n         check_args: Vec<String>,\n         workspace_root: PathBuf,\n         shared: Arc<RwLock<CheckWatcherSharedState>>,\n     ) -> CheckWatcherState {\n-        let watcher = WatchThread::new(check_command.as_ref(), &check_args, &workspace_root);\n+        let watcher =\n+            WatchThread::new(check_enabled, check_command.as_ref(), &check_args, &workspace_root);\n         CheckWatcherState {\n+            check_enabled,\n             check_command,\n             check_args,\n             workspace_root,\n@@ -182,6 +192,7 @@ impl CheckWatcherState {\n \n                 self.watcher.cancel();\n                 self.watcher = WatchThread::new(\n+                    self.check_enabled,\n                     self.check_command.as_ref(),\n                     &self.check_args,\n                     &self.workspace_root,\n@@ -283,6 +294,7 @@ enum CheckEvent {\n \n impl WatchThread {\n     fn new(\n+        check_enabled: bool,\n         check_command: Option<&String>,\n         check_args: &[String],\n         workspace_root: &PathBuf,\n@@ -299,6 +311,10 @@ impl WatchThread {\n         let (message_send, message_recv) = unbounded();\n         let (cancel_send, cancel_recv) = unbounded();\n         std::thread::spawn(move || {\n+            if !check_enabled {\n+                return;\n+            }\n+\n             let mut command = Command::new(\"cargo\")\n                 .args(&args)\n                 .stdout(Stdio::piped())"}]}