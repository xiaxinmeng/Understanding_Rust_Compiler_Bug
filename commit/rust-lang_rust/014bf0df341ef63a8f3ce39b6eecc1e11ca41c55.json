{"sha": "014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNGJmMGRmMzQxZWY2M2E4ZjNjZTM5YjZlZWNjMWUxMWNhNDFjNTU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-25T17:51:16Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-26T08:38:56Z"}, "message": "Clean-up some junk", "tree": {"sha": "4bca9604995190b829510a655702793acd696dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bca9604995190b829510a655702793acd696dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "html_url": "https://github.com/rust-lang/rust/commit/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cb9914fceaeaa6a39add43d3da15bb6e1d191f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb9914fceaeaa6a39add43d3da15bb6e1d191f6", "html_url": "https://github.com/rust-lang/rust/commit/7cb9914fceaeaa6a39add43d3da15bb6e1d191f6"}], "stats": {"total": 257, "additions": 2, "deletions": 255}, "files": [{"sha": "57b75383bc834c2a31181aa90133fe056c80c087", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "patch": "@@ -297,15 +297,6 @@ pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     decoder::get_impl_trait(&*cdata, def.node, tcx)\n }\n \n-// Given a def_id for an impl, return information about its vtables\n-pub fn get_impl_vtables<'tcx>(tcx: &ty::ctxt<'tcx>,\n-                              def: ast::DefId)\n-                              -> ty::vtable_res<'tcx> {\n-    let cstore = &tcx.sess.cstore;\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::get_impl_vtables(&*cdata, def.node, tcx)\n-}\n-\n pub fn get_native_libraries(cstore: &cstore::CStore, crate_num: ast::CrateNum)\n                             -> Vec<(cstore::NativeLibraryKind, String)> {\n     let cdata = cstore.get_crate_data(crate_num);\n@@ -414,11 +405,6 @@ pub fn get_repr_attrs(cstore: &cstore::CStore, def: ast::DefId)\n     decoder::get_repr_attrs(&*cdata, def.node)\n }\n \n-pub fn is_associated_type(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n-    let cdata = cstore.get_crate_data(def.krate);\n-    decoder::is_associated_type(&*cdata, def.node)\n-}\n-\n pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: ast::DefId) -> bool {\n     let cdata = cstore.get_crate_data(trait_def_id.krate);\n     decoder::is_defaulted_trait(&*cdata, trait_def_id.node)"}, {"sha": "aaebacf966aada6f4a813bd9575c5c2229a01695", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "patch": "@@ -30,7 +30,6 @@ use middle::lang_items;\n use middle::subst;\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty::{self, Ty};\n-use middle::astencode::vtable_decoder_helpers;\n use util::nodemap::FnvHashMap;\n \n use std::cell::{Cell, RefCell};\n@@ -522,18 +521,6 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n     }\n }\n \n-pub fn get_impl_vtables<'tcx>(cdata: Cmd,\n-                              id: ast::NodeId,\n-                              tcx: &ty::ctxt<'tcx>)\n-                              -> ty::vtable_res<'tcx>\n-{\n-    let item_doc = lookup_item(id, cdata.data());\n-    let vtables_doc = reader::get_doc(item_doc, tag_item_impl_vtables);\n-    let mut decoder = reader::Decoder::new(vtables_doc);\n-    decoder.read_vtable_res(tcx, cdata)\n-}\n-\n-\n pub fn get_symbol(data: &[u8], id: ast::NodeId) -> String {\n     return item_symbol(lookup_item(id, data));\n }\n@@ -1623,14 +1610,6 @@ fn doc_predicates<'tcx>(base_doc: rbml::Doc,\n     ty::GenericPredicates { predicates: predicates }\n }\n \n-pub fn is_associated_type(cdata: Cmd, id: ast::NodeId) -> bool {\n-    let items = reader::get_doc(rbml::Doc::new(cdata.data()), tag_items);\n-    match maybe_find_item(id, items) {\n-        None => false,\n-        Some(item) => item_sort(item) == Some('t'),\n-    }\n-}\n-\n pub fn is_defaulted_trait(cdata: Cmd, trait_id: ast::NodeId) -> bool {\n     let trait_doc = lookup_item(trait_id, cdata.data());\n     assert!(item_family(trait_doc) == Family::Trait);"}, {"sha": "bfc74ccc2437c28804028c3d0d571d1892d84c92", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "patch": "@@ -696,19 +696,6 @@ pub fn encode_cast_kind(ebml_w: &mut Encoder, kind: cast::CastKind) {\n pub trait vtable_decoder_helpers<'tcx> {\n     fn read_vec_per_param_space<T, F>(&mut self, f: F) -> VecPerParamSpace<T> where\n         F: FnMut(&mut Self) -> T;\n-    fn read_vtable_res_with_key(&mut self,\n-                                tcx: &ty::ctxt<'tcx>,\n-                                cdata: &cstore::crate_metadata)\n-                                -> (u32, ty::vtable_res<'tcx>);\n-    fn read_vtable_res(&mut self,\n-                       tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> ty::vtable_res<'tcx>;\n-    fn read_vtable_param_res(&mut self,\n-                       tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> ty::vtable_param_res<'tcx>;\n-    fn read_vtable_origin(&mut self,\n-                          tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                          -> ty::vtable_origin<'tcx>;\n }\n \n impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n@@ -720,85 +707,6 @@ impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         let fns = self.read_to_vec(|this| Ok(f(this))).unwrap();\n         VecPerParamSpace::new(types, selfs, fns)\n     }\n-\n-    fn read_vtable_res_with_key(&mut self,\n-                                tcx: &ty::ctxt<'tcx>,\n-                                cdata: &cstore::crate_metadata)\n-                                -> (u32, ty::vtable_res<'tcx>) {\n-        self.read_struct(\"VtableWithKey\", 2, |this| {\n-            let autoderef = this.read_struct_field(\"autoderef\", 0, |this| {\n-                Decodable::decode(this)\n-            }).unwrap();\n-            Ok((autoderef, this.read_struct_field(\"vtable_res\", 1, |this| {\n-                Ok(this.read_vtable_res(tcx, cdata))\n-            }).unwrap()))\n-        }).unwrap()\n-    }\n-\n-    fn read_vtable_res(&mut self,\n-                       tcx: &ty::ctxt<'tcx>,\n-                       cdata: &cstore::crate_metadata)\n-                       -> ty::vtable_res<'tcx>\n-    {\n-        self.read_vec_per_param_space(\n-            |this| this.read_vtable_param_res(tcx, cdata))\n-    }\n-\n-    fn read_vtable_param_res(&mut self,\n-                             tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-                      -> ty::vtable_param_res<'tcx> {\n-        self.read_to_vec(|this| Ok(this.read_vtable_origin(tcx, cdata)))\n-             .unwrap().into_iter().collect()\n-    }\n-\n-    fn read_vtable_origin(&mut self,\n-                          tcx: &ty::ctxt<'tcx>, cdata: &cstore::crate_metadata)\n-        -> ty::vtable_origin<'tcx> {\n-        self.read_enum(\"vtable_origin\", |this| {\n-            this.read_enum_variant(&[\"vtable_static\",\n-                                     \"vtable_param\",\n-                                     \"vtable_error\",\n-                                     \"vtable_closure\"],\n-                                   |this, i| {\n-                Ok(match i {\n-                  0 => {\n-                    ty::vtable_static(\n-                        this.read_enum_variant_arg(0, |this| {\n-                            Ok(this.read_def_id_nodcx(cdata))\n-                        }).unwrap(),\n-                        this.read_enum_variant_arg(1, |this| {\n-                            Ok(this.read_substs_nodcx(tcx, cdata))\n-                        }).unwrap(),\n-                        this.read_enum_variant_arg(2, |this| {\n-                            Ok(this.read_vtable_res(tcx, cdata))\n-                        }).unwrap()\n-                    )\n-                  }\n-                  1 => {\n-                    ty::vtable_param(\n-                        this.read_enum_variant_arg(0, |this| {\n-                            Decodable::decode(this)\n-                        }).unwrap(),\n-                        this.read_enum_variant_arg(1, |this| {\n-                            this.read_uint()\n-                        }).unwrap()\n-                    )\n-                  }\n-                  2 => {\n-                    ty::vtable_closure(\n-                        this.read_enum_variant_arg(0, |this| {\n-                            Ok(this.read_def_id_nodcx(cdata))\n-                        }).unwrap()\n-                    )\n-                  }\n-                  3 => {\n-                    ty::vtable_error\n-                  }\n-                  _ => panic!(\"bad enum variant\")\n-                })\n-            })\n-        }).unwrap()\n-    }\n }\n \n // ___________________________________________________________________________"}, {"sha": "3ae3f34284a3454ced150ad137257babc104ee7e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 107, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "patch": "@@ -32,7 +32,6 @@ pub use self::ImplOrTraitItem::*;\n pub use self::BoundRegion::*;\n pub use self::sty::*;\n pub use self::IntVarValue::*;\n-pub use self::vtable_origin::*;\n pub use self::MethodOrigin::*;\n pub use self::CopyImplementationError::*;\n \n@@ -402,12 +401,6 @@ pub enum CustomCoerceUnsized {\n     Struct(usize)\n }\n \n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Debug)]\n-pub struct param_index {\n-    pub space: subst::ParamSpace,\n-    pub index: usize\n-}\n-\n #[derive(Clone, Debug)]\n pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n@@ -510,46 +503,6 @@ impl MethodCall {\n // of the method to be invoked\n pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n \n-pub type vtable_param_res<'tcx> = Vec<vtable_origin<'tcx>>;\n-\n-// Resolutions for bounds of all parameters, left to right, for a given path.\n-pub type vtable_res<'tcx> = VecPerParamSpace<vtable_param_res<'tcx>>;\n-\n-#[derive(Clone)]\n-pub enum vtable_origin<'tcx> {\n-    /*\n-      Statically known vtable. def_id gives the impl item\n-      from whence comes the vtable, and tys are the type substs.\n-      vtable_res is the vtable itself.\n-     */\n-    vtable_static(ast::DefId, subst::Substs<'tcx>, vtable_res<'tcx>),\n-\n-    /*\n-      Dynamic vtable, comes from a parameter that has a bound on it:\n-      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a\n-      vtable_param origin\n-\n-      The first argument is the param index (identifying T in the example),\n-      and the second is the bound number (identifying baz)\n-     */\n-    vtable_param(param_index, usize),\n-\n-    /*\n-      Vtable automatically generated for a closure. The def ID is the\n-      ID of the closure expression.\n-     */\n-    vtable_closure(ast::DefId),\n-\n-    /*\n-      Asked to determine the vtable for ty_err. This is the value used\n-      for the vtables of `Self` in a virtual call like `foo.bar()`\n-      where `foo` is of object type. The same value is also used when\n-      type errors occur.\n-     */\n-    vtable_error,\n-}\n-\n-\n // For every explicit cast into an object type, maps from the cast\n // expr to the associated trait ref.\n pub type ObjectCastMap<'tcx> = RefCell<NodeMap<ty::PolyTraitRef<'tcx>>>;\n@@ -803,9 +756,6 @@ pub struct ctxt<'tcx> {\n     /// Maps any item's def-id to its stability index.\n     pub stability: RefCell<stability::Index>,\n \n-    /// Maps def IDs to true if and only if they're associated types.\n-    pub associated_types: RefCell<DefIdMap<bool>>,\n-\n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache<'tcx>,\n@@ -2816,7 +2766,6 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         node_lint_levels: RefCell::new(FnvHashMap()),\n         transmute_restrictions: RefCell::new(Vec::new()),\n         stability: RefCell::new(stability),\n-        associated_types: RefCell::new(DefIdMap()),\n         selection_cache: traits::SelectionCache::new(),\n         repr_hint_cache: RefCell::new(DefIdMap()),\n         type_impls_copy_cache: RefCell::new(HashMap::new()),\n@@ -4305,17 +4254,9 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n }\n \n pub fn type_is_trait(ty: Ty) -> bool {\n-    type_trait_info(ty).is_some()\n-}\n-\n-pub fn type_trait_info<'tcx>(ty: Ty<'tcx>) -> Option<&'tcx TyTrait<'tcx>> {\n     match ty.sty {\n-        ty_uniq(ty) | ty_rptr(_, mt { ty, ..}) | ty_ptr(mt { ty, ..}) => match ty.sty {\n-            ty_trait(ref t) => Some(&**t),\n-            _ => None\n-        },\n-        ty_trait(ref t) => Some(&**t),\n-        _ => None\n+        ty_trait(..) => true,\n+        _ => false\n     }\n }\n \n@@ -5399,26 +5340,6 @@ pub fn impl_or_trait_item<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n     })\n }\n \n-/// Returns true if the given ID refers to an associated type and false if it\n-/// refers to anything else.\n-pub fn is_associated_type(cx: &ctxt, id: ast::DefId) -> bool {\n-    memoized(&cx.associated_types, id, |id: ast::DefId| {\n-        if id.krate == ast::LOCAL_CRATE {\n-            match cx.impl_or_trait_items.borrow().get(&id) {\n-                Some(ref item) => {\n-                    match **item {\n-                        TypeTraitItem(_) => true,\n-                        _ => false,\n-                    }\n-                }\n-                None => false,\n-            }\n-        } else {\n-            csearch::is_associated_type(&cx.sess.cstore, id)\n-        }\n-    })\n-}\n-\n /// Returns the parameter index that the given associated type corresponds to.\n pub fn associated_type_parameter_index(cx: &ctxt,\n                                        trait_def: &TraitDef,\n@@ -7223,32 +7144,6 @@ impl<'tcx> Repr<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for vtable_origin<'tcx> {\n-    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n-        match *self {\n-            vtable_static(def_id, ref tys, ref vtable_res) => {\n-                format!(\"vtable_static({:?}:{}, {}, {})\",\n-                        def_id,\n-                        ty::item_path_str(tcx, def_id),\n-                        tys.repr(tcx),\n-                        vtable_res.repr(tcx))\n-            }\n-\n-            vtable_param(x, y) => {\n-                format!(\"vtable_param({:?}, {})\", x, y)\n-            }\n-\n-            vtable_closure(def_id) => {\n-                format!(\"vtable_closure({:?})\", def_id)\n-            }\n-\n-            vtable_error => {\n-                format!(\"vtable_error\")\n-            }\n-        }\n-    }\n-}\n-\n pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                             trait_ref: &ty::TraitRef<'tcx>,\n                                             method: &ty::Method<'tcx>)"}, {"sha": "6f098a53238b68ee2d7a122145564b68550910bf", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014bf0df341ef63a8f3ce39b6eecc1e11ca41c55/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=014bf0df341ef63a8f3ce39b6eecc1e11ca41c55", "patch": "@@ -336,27 +336,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::vtable_origin<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::vtable_origin<'tcx> {\n-        match *self {\n-            ty::vtable_static(def_id, ref substs, ref origins) => {\n-                let r_substs = substs.fold_with(folder);\n-                let r_origins = origins.fold_with(folder);\n-                ty::vtable_static(def_id, r_substs, r_origins)\n-            }\n-            ty::vtable_param(n, b) => {\n-                ty::vtable_param(n, b)\n-            }\n-            ty::vtable_closure(def_id) => {\n-                ty::vtable_closure(def_id)\n-            }\n-            ty::vtable_error => {\n-                ty::vtable_error\n-            }\n-        }\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> ty::BuiltinBounds {\n         *self"}]}