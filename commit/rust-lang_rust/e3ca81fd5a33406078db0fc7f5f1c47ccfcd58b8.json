{"sha": "e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzY2E4MWZkNWEzMzQwNjA3OGRiMGZjN2Y1ZjFjNDdjY2ZjZDU4Yjg=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-14T21:40:09Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-06-14T21:40:09Z"}, "message": "Use the now available implementation of `IntoIterator` for arrays", "tree": {"sha": "ef305e0bbcf029d6a67b38be2fe77d0756ad29a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef305e0bbcf029d6a67b38be2fe77d0756ad29a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "html_url": "https://github.com/rust-lang/rust/commit/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a216131c3566858b78f45ccc0c36b5578f5c5155", "url": "https://api.github.com/repos/rust-lang/rust/commits/a216131c3566858b78f45ccc0c36b5578f5c5155", "html_url": "https://github.com/rust-lang/rust/commit/a216131c3566858b78f45ccc0c36b5578f5c5155"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "22641064315926fb8d780c955420fe0ef772dbc4", "filename": "compiler/rustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fieee.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -1939,7 +1939,7 @@ fn add() {\n         (m_smallest_normalized, m_smallest_normalized, \"-0x1p-125\", Status::OK, Category::Normal),\n     ];\n \n-    for &(x, y, e_result, e_status, e_category) in &special_cases[..] {\n+    for (x, y, e_result, e_status, e_category) in special_cases {\n         let status;\n         let result = unpack!(status=, x + y);\n         assert_eq!(status, e_status);\n@@ -2262,7 +2262,7 @@ fn subtract() {\n         (m_smallest_normalized, m_smallest_normalized, \"0x0p+0\", Status::OK, Category::Zero),\n     ];\n \n-    for &(x, y, e_result, e_status, e_category) in &special_cases[..] {\n+    for (x, y, e_result, e_status, e_category) in special_cases {\n         let status;\n         let result = unpack!(status=, x - y);\n         assert_eq!(status, e_status);\n@@ -2538,7 +2538,7 @@ fn multiply() {\n         (m_smallest_normalized, m_smallest_normalized, \"0x0p+0\", underflow_status, Category::Zero),\n     ];\n \n-    for &(x, y, e_result, e_status, e_category) in &special_cases[..] {\n+    for (x, y, e_result, e_status, e_category) in special_cases {\n         let status;\n         let result = unpack!(status=, x * y);\n         assert_eq!(status, e_status);\n@@ -2814,7 +2814,7 @@ fn divide() {\n         (m_smallest_normalized, m_smallest_normalized, \"0x1p+0\", Status::OK, Category::Normal),\n     ];\n \n-    for &(x, y, e_result, e_status, e_category) in &special_cases[..] {\n+    for (x, y, e_result, e_status, e_category) in special_cases {\n         let status;\n         let result = unpack!(status=, x / y);\n         assert_eq!(status, e_status);"}, {"sha": "c769d26543786a5ea39a637b4c512536b7c9f837", "filename": "compiler/rustc_apfloat/tests/ppc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_apfloat%2Ftests%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_apfloat%2Ftests%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Ftests%2Fppc.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -64,7 +64,7 @@ fn ppc_double_double_add_special() {\n         (0x7ff8000000000000, 0x3ff0000000000000, Category::NaN, Round::NearestTiesToEven),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         {\n             let mut a1 = DoubleDouble::from_bits(op1);\n             let a2 = DoubleDouble::from_bits(op2);\n@@ -135,7 +135,7 @@ fn ppc_double_double_add() {\n         ),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         {\n             let mut a1 = DoubleDouble::from_bits(op1);\n             let a2 = DoubleDouble::from_bits(op2);\n@@ -172,7 +172,7 @@ fn ppc_double_double_subtract() {\n         ),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         let mut a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         a1 = a1.sub_r(a2, round).value;\n@@ -204,7 +204,7 @@ fn ppc_double_double_multiply_special() {\n         (0, 0x3ff0000000000000, Category::Zero, Round::NearestTiesToEven),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         {\n             let mut a1 = DoubleDouble::from_bits(op1);\n             let a2 = DoubleDouble::from_bits(op2);\n@@ -290,7 +290,7 @@ fn ppc_double_double_multiply() {\n         ),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         {\n             let mut a1 = DoubleDouble::from_bits(op1);\n             let a2 = DoubleDouble::from_bits(op2);\n@@ -322,7 +322,7 @@ fn ppc_double_double_divide() {\n         ),\n     ];\n \n-    for &(op1, op2, expected, round) in &data {\n+    for (op1, op2, expected, round) in data {\n         let mut a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         a1 = a1.div_r(a2, round).value;\n@@ -348,7 +348,7 @@ fn ppc_double_double_remainder() {\n         ),\n     ];\n \n-    for &(op1, op2, expected) in &data {\n+    for (op1, op2, expected) in data {\n         let a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         let result = a1.ieee_rem(a2).value;\n@@ -376,7 +376,7 @@ fn ppc_double_double_mod() {\n         ),\n     ];\n \n-    for &(op1, op2, expected) in &data {\n+    for (op1, op2, expected) in data {\n         let a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         let r = (a1 % a2).value;\n@@ -426,7 +426,7 @@ fn ppc_double_double_compare() {\n         (0x7ff0000000000000, 0x7ff0000000000000, Some(Ordering::Equal)),\n     ];\n \n-    for &(op1, op2, expected) in &data {\n+    for (op1, op2, expected) in data {\n         let a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         assert_eq!(expected, a1.partial_cmp(&a2), \"compare({:#x}, {:#x})\", op1, op2,);\n@@ -448,7 +448,7 @@ fn ppc_double_double_bitwise_eq() {\n         (0x7ff0000000000000, 0x7ff0000000000000, true),\n     ];\n \n-    for &(op1, op2, expected) in &data {\n+    for (op1, op2, expected) in data {\n         let a1 = DoubleDouble::from_bits(op1);\n         let a2 = DoubleDouble::from_bits(op2);\n         assert_eq!(expected, a1.bitwise_eq(a2), \"{:#x} = {:#x}\", op1, op2);"}, {"sha": "dbab7e154845034ad69c512eb47c2786f1ff2892", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             fn allocate_use_tree_hir_id_counters(&mut self, tree: &UseTree) {\n                 match tree.kind {\n                     UseTreeKind::Simple(_, id1, id2) => {\n-                        for &id in &[id1, id2] {\n+                        for id in [id1, id2] {\n                             self.lctx.allocate_hir_id_counter(id);\n                         }\n                     }"}, {"sha": "100c3b43160bbbb3384390e4741f537db05c0e61", "filename": "compiler/rustc_codegen_cranelift/src/compiler_builtins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -7,7 +7,7 @@ macro builtin_functions($register:ident; $(fn $name:ident($($arg_name:ident: $ar\n \n     #[cfg(feature = \"jit\")]\n     pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n-        for &(name, val) in &[$((stringify!($name), $name as *const u8)),*] {\n+        for (name, val) in [$((stringify!($name), $name as *const u8)),*] {\n             builder.symbol(name, val);\n         }\n     }"}, {"sha": "288efe22982fa13cbfba4e7569549357a249f9c7", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -193,7 +193,7 @@ fn span_of_self_arg_pat_idents_are_correct() {\n             \"impl z { fn a (self: Foo, &myarg: i32) {} }\",\n         ];\n \n-        for &src in &srcs {\n+        for src in srcs {\n             let spans = get_spans_of_pat_idents(src);\n             let (lo, hi) = (spans[0].lo(), spans[0].hi());\n             assert!("}, {"sha": "7f4c33c5792cbb4d58438b49ca5abd96769711e5", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -674,7 +674,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.combine_map(t).insert(vars, c);\n         self.undo_log.push(AddCombination(t, vars));\n         let new_r = tcx.mk_region(ReVar(c));\n-        for &old_r in &[a, b] {\n+        for old_r in [a, b] {\n             match t {\n                 Glb => self.make_subregion(origin.clone(), new_r, old_r),\n                 Lub => self.make_subregion(origin.clone(), old_r, new_r),"}, {"sha": "ca9b83876b4443f4c1ccd05a90a0d56adf9fcdf7", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -938,7 +938,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if !remaining_lib_features.is_empty() {\n         check_features(&mut remaining_lib_features, &local_defined_features);\n \n-        for &cnum in &*tcx.crates() {\n+        for &cnum in tcx.crates() {\n             if remaining_lib_features.is_empty() {\n                 break;\n             }"}, {"sha": "a759fa1bf1a7579f4eb11f1a3eccc44bc3c7b5a3", "filename": "compiler/rustc_serialize/tests/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_serialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_serialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fjson.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -437,7 +437,7 @@ fn test_decode_str() {\n         (\"\\\"\\\\uAB12\\\"\", \"\\u{AB12}\"),\n     ];\n \n-    for &(i, o) in &s {\n+    for (i, o) in s {\n         let v: string::String = json::decode(i).unwrap();\n         assert_eq!(v, o);\n     }"}, {"sha": "1ed336f6ed381f089951ee8793cb74356dc67faf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -833,7 +833,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     if sess.target.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));\n     }\n-    for &(i, align) in &[\n+    for (i, align) in [\n         (8, layout.i8_align.abi),\n         (16, layout.i16_align.abi),\n         (32, layout.i32_align.abi),\n@@ -1169,7 +1169,7 @@ pub fn get_cmd_lint_options(\n     let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n-    for &level in &[lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {\n+    for level in [lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {\n         for (passed_arg_pos, lint_name) in matches.opt_strs_pos(level.as_str()) {\n             let arg_pos = if let lint::Forbid = level {\n                 // HACK: forbid is always specified last, so it can't be overridden."}, {"sha": "a55658b7a3ec6caf1b2c30a5785a1fe04b146ea9", "filename": "compiler/rustc_target/src/abi/call/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86_64.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -185,7 +185,7 @@ where\n             if let Ok(cls) = cls_or_mem {\n                 let mut needed_int = 0;\n                 let mut needed_sse = 0;\n-                for &c in &cls {\n+                for c in cls {\n                     match c {\n                         Some(Class::Int) => needed_int += 1,\n                         Some(Class::Sse) => needed_sse += 1,"}, {"sha": "e3a721fc7369e34ac821e700967d38b7162098f3", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -590,7 +590,7 @@ impl Integer {\n     pub fn for_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Option<Integer> {\n         let dl = cx.data_layout();\n \n-        for &candidate in &[I8, I16, I32, I64, I128] {\n+        for candidate in [I8, I16, I32, I64, I128] {\n             if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {\n                 return Some(candidate);\n             }\n@@ -603,7 +603,7 @@ impl Integer {\n         let dl = cx.data_layout();\n \n         // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.\n-        for &candidate in &[I64, I32, I16] {\n+        for candidate in [I64, I32, I16] {\n             if wanted >= candidate.align(dl).abi && wanted.bytes() >= candidate.size().bytes() {\n                 return candidate;\n             }"}, {"sha": "ed62899c04ebb0a47b3b6caf091f0841b7c9e3e1", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         opt_arg_exprs: Option<&'tcx [hir::Expr<'tcx>]>,\n     ) -> Option<(Option<Adjustment<'tcx>>, MethodCallee<'tcx>)> {\n         // Try the options that are least restrictive on the caller first.\n-        for &(opt_trait_def_id, method_name, borrow) in &[\n+        for (opt_trait_def_id, method_name, borrow) in [\n             (self.tcx.lang_items().fn_trait(), Ident::with_dummy_span(sym::call), true),\n             (self.tcx.lang_items().fn_mut_trait(), Ident::with_dummy_span(sym::call_mut), true),\n             (self.tcx.lang_items().fn_once_trait(), Ident::with_dummy_span(sym::call_once), false),"}, {"sha": "95a1bfbbb01cf89f87929d7bd72ddca6cc324950", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -579,7 +579,7 @@ fn compare_number_of_generics<'tcx>(\n     let item_kind = assoc_item_kind_str(impl_);\n \n     let mut err_occurred = false;\n-    for &(kind, trait_count, impl_count) in &matchings {\n+    for (kind, trait_count, impl_count) in matchings {\n         if impl_count != trait_count {\n             err_occurred = true;\n "}, {"sha": "d6989b866c1d29aa55329625596777724dcc337e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // that are not closures, then we type-check the closures. This is so\n         // that we have more information about the types of arguments when we\n         // type-check the functions. This isn't really the right way to do this.\n-        for &check_closures in &[false, true] {\n+        for check_closures in [false, true] {\n             debug!(\"check_closures={}\", check_closures);\n \n             // More awful hacks: before we check argument types, try to do"}, {"sha": "9037ffe49a9a26c2b3335926e2125d05e8968c9a", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -668,7 +668,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::Slice(_) => {\n-                for &lang_def_id in &[\n+                for lang_def_id in [\n                     lang_items.slice_impl(),\n                     lang_items.slice_u8_impl(),\n                     lang_items.slice_alloc_impl(),"}, {"sha": "055072d3a1d9d4a9cf020d6d7f999592b7029091", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -82,7 +82,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n-        for &unsize in &[false, true] {\n+        for unsize in [false, true] {\n             let mut self_ty = adjusted_ty;\n             if unsize {\n                 // We only unsize arrays here."}, {"sha": "9db83c903abf07a374307567239bd3d7bb81485f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e3ca81fd5a33406078db0fc7f5f1c47ccfcd58b8", "patch": "@@ -1346,7 +1346,7 @@ impl LinkCollector<'_, '_> {\n                             let other_ns = if expected_ns == ValueNS { TypeNS } else { ValueNS };\n                             // FIXME: really it should be `resolution_failure` that does this, not `resolve_with_disambiguator`\n                             // See https://github.com/rust-lang/rust/pull/76955#discussion_r493953382 for a good approach\n-                            for &new_ns in &[other_ns, MacroNS] {\n+                            for new_ns in [other_ns, MacroNS] {\n                                 if let Some(res) =\n                                     self.check_full_res(new_ns, path_str, base_node, extra_fragment)\n                                 {\n@@ -1444,7 +1444,7 @@ impl LinkCollector<'_, '_> {\n                     Ok(res) => Some((res, extra_fragment.clone())),\n                     Err(mut kind) => {\n                         // `resolve_macro` only looks in the macro namespace. Try to give a better error if possible.\n-                        for &ns in &[TypeNS, ValueNS] {\n+                        for ns in [TypeNS, ValueNS] {\n                             if let Some(res) =\n                                 self.check_full_res(ns, path_str, base_node, extra_fragment)\n                             {\n@@ -1558,7 +1558,7 @@ impl Disambiguator {\n                 (\"()\", DefKind::Fn),\n                 (\"!\", DefKind::Macro(MacroKind::Bang)),\n             ];\n-            for &(suffix, kind) in &suffixes {\n+            for (suffix, kind) in suffixes {\n                 if let Some(link) = link.strip_suffix(suffix) {\n                     // Avoid turning `!` or `()` into an empty string\n                     if !link.is_empty() {\n@@ -1798,7 +1798,7 @@ fn resolution_failure(\n                             break;\n                         };\n                         name = start;\n-                        for &ns in &[TypeNS, ValueNS, MacroNS] {\n+                        for ns in [TypeNS, ValueNS, MacroNS] {\n                             if let Some(res) =\n                                 collector.check_full_res(ns, &start, module_id.into(), &None)\n                             {"}]}