{"sha": "f5e0d0cc18c4450fa0d8cbe0802154c392eb4570", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTBkMGNjMThjNDQ1MGZhMGQ4Y2JlMDgwMjE1NGMzOTJlYjQ1NzA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-03T21:20:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-04T12:13:59Z"}, "message": "Make some formatting improvements", "tree": {"sha": "2d2f20b1b853ed9785d1815a45ea6d95b5eaf950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d2f20b1b853ed9785d1815a45ea6d95b5eaf950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570", "html_url": "https://github.com/rust-lang/rust/commit/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91e021a59cecb995a8fdf492d55031d8cfca00f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/91e021a59cecb995a8fdf492d55031d8cfca00f5", "html_url": "https://github.com/rust-lang/rust/commit/91e021a59cecb995a8fdf492d55031d8cfca00f5"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "1880824571a5946e54de5d4e23d1ed57c56c51c5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0d0cc18c4450fa0d8cbe0802154c392eb4570/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f5e0d0cc18c4450fa0d8cbe0802154c392eb4570", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-filelength\n-\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::default::Default;\n@@ -88,7 +86,6 @@ pub struct Item {\n \n impl fmt::Debug for Item {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-\n         let fake = MAX_DEF_ID.with(|m| m.borrow().get(&self.def_id.krate)\n                                    .map(|id| self.def_id >= *id).unwrap_or(false));\n         let def_id: &dyn fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n@@ -112,6 +109,7 @@ impl Item {\n     pub fn doc_value(&self) -> Option<&str> {\n         self.attrs.doc_value()\n     }\n+\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n     /// with newlines.\n     pub fn collapsed_doc_value(&self) -> Option<String> {\n@@ -174,7 +172,6 @@ impl Item {\n     pub fn is_keyword(&self) -> bool {\n         self.type_() == ItemType::Keyword\n     }\n-\n     pub fn is_stripped(&self) -> bool {\n         match self.inner { StrippedItem(..) => true, _ => false }\n     }\n@@ -456,9 +453,7 @@ impl Attributes {\n     /// Reads a `MetaItem` from within an attribute, looks for whether it is a\n     /// `#[doc(include=\"file\")]`, and returns the filename and contents of the file as loaded from\n     /// its expansion.\n-    pub fn extract_include(mi: &ast::MetaItem)\n-        -> Option<(String, String)>\n-    {\n+    pub fn extract_include(mi: &ast::MetaItem) -> Option<(String, String)> {\n         mi.meta_item_list().and_then(|list| {\n             for meta in list {\n                 if meta.check_name(sym::include) {\n@@ -508,8 +503,7 @@ impl Attributes {\n         false\n     }\n \n-    pub fn from_ast(diagnostic: &::errors::Handler,\n-                    attrs: &[ast::Attribute]) -> Attributes {\n+    pub fn from_ast(diagnostic: &::errors::Handler, attrs: &[ast::Attribute]) -> Attributes {\n         let mut doc_strings = vec![];\n         let mut sp = None;\n         let mut cfg = Cfg::True;\n@@ -520,7 +514,7 @@ impl Attributes {\n         /// returns `attr` unchanged.\n         pub fn with_doc_comment_markers_stripped<T>(\n             attr: &Attribute,\n-            f: impl FnOnce(&Attribute) -> T\n+            f: impl FnOnce(&Attribute) -> T,\n         ) -> T {\n             match attr.kind {\n                 AttrKind::Normal(_) => {\n@@ -823,7 +817,6 @@ impl GenericParamDefKind {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct GenericParamDef {\n     pub name: String,\n-\n     pub kind: GenericParamDefKind,\n }\n "}]}