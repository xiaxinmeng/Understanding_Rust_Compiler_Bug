{"sha": "2a3442825335fe55ba30ef000f472bffb0ee9fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzQ0MjgyNTMzNWZlNTViYTMwZWYwMDBmNDcyYmZmYjBlZTlmZTk=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-07T14:09:00Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-11T18:42:39Z"}, "message": "Make THIR data structures public", "tree": {"sha": "dbcf962e01d3373f2e0e1d424e4b817ccdfcb652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcf962e01d3373f2e0e1d424e4b817ccdfcb652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3442825335fe55ba30ef000f472bffb0ee9fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3442825335fe55ba30ef000f472bffb0ee9fe9", "html_url": "https://github.com/rust-lang/rust/commit/2a3442825335fe55ba30ef000f472bffb0ee9fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3442825335fe55ba30ef000f472bffb0ee9fe9/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61365c06250e2ba6e0a578ae990f055ac5339107", "url": "https://api.github.com/repos/rust-lang/rust/commits/61365c06250e2ba6e0a578ae990f055ac5339107", "html_url": "https://github.com/rust-lang/rust/commit/61365c06250e2ba6e0a578ae990f055ac5339107"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "9c83c0d09aa8e3a6bad3758077ad3b0b002d2870", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=2a3442825335fe55ba30ef000f472bffb0ee9fe9", "patch": "@@ -1,7 +1,6 @@\n use crate::build;\n use crate::build::scope::DropKind;\n-use crate::thir::cx::build_thir;\n-use crate::thir::{Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n+use crate::thir::{build_thir, Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;"}, {"sha": "b1591d8ba35f4e62ef6937d0b9eaa4b1fa1b24c6", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=2a3442825335fe55ba30ef000f472bffb0ee9fe9", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_middle;\n \n mod build;\n mod lints;\n-mod thir;\n+pub mod thir;\n \n use rustc_middle::ty::query::Providers;\n "}, {"sha": "fe8a58c00887265989de8f77c1c0defb67581f47", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=2a3442825335fe55ba30ef000f472bffb0ee9fe9", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-crate fn build_thir<'thir, 'tcx>(\n+pub fn build_thir<'thir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n     arena: &'thir Arena<'thir, 'tcx>,"}, {"sha": "0c9df32c1880329dd2b41f0505553a548621fa4e", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=2a3442825335fe55ba30ef000f472bffb0ee9fe9", "patch": "@@ -18,50 +18,51 @@ use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n \n crate mod constant;\n+\n crate mod cx;\n+pub use cx::build_thir;\n \n crate mod pattern;\n-crate use self::pattern::PatTyProj;\n-crate use self::pattern::{BindingMode, FieldPat, Pat, PatKind, PatRange};\n+pub use self::pattern::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange, PatTyProj};\n \n mod arena;\n-crate use arena::Arena;\n+pub use arena::Arena;\n \n mod util;\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LintLevel {\n+pub enum LintLevel {\n     Inherited,\n     Explicit(hir::HirId),\n }\n \n #[derive(Debug)]\n-crate struct Block<'thir, 'tcx> {\n-    crate targeted_by_break: bool,\n-    crate region_scope: region::Scope,\n-    crate opt_destruction_scope: Option<region::Scope>,\n-    crate span: Span,\n-    crate stmts: &'thir [Stmt<'thir, 'tcx>],\n-    crate expr: Option<&'thir Expr<'thir, 'tcx>>,\n-    crate safety_mode: BlockSafety,\n+pub struct Block<'thir, 'tcx> {\n+    pub targeted_by_break: bool,\n+    pub region_scope: region::Scope,\n+    pub opt_destruction_scope: Option<region::Scope>,\n+    pub span: Span,\n+    pub stmts: &'thir [Stmt<'thir, 'tcx>],\n+    pub expr: Option<&'thir Expr<'thir, 'tcx>>,\n+    pub safety_mode: BlockSafety,\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum BlockSafety {\n+pub enum BlockSafety {\n     Safe,\n     ExplicitUnsafe(hir::HirId),\n     PushUnsafe,\n     PopUnsafe,\n }\n \n #[derive(Debug)]\n-crate struct Stmt<'thir, 'tcx> {\n-    crate kind: StmtKind<'thir, 'tcx>,\n-    crate opt_destruction_scope: Option<region::Scope>,\n+pub struct Stmt<'thir, 'tcx> {\n+    pub kind: StmtKind<'thir, 'tcx>,\n+    pub opt_destruction_scope: Option<region::Scope>,\n }\n \n #[derive(Debug)]\n-crate enum StmtKind<'thir, 'tcx> {\n+pub enum StmtKind<'thir, 'tcx> {\n     Expr {\n         /// scope for this statement; may be used as lifetime of temporaries\n         scope: region::Scope,\n@@ -111,23 +112,23 @@ rustc_data_structures::static_assert_size!(Expr<'_, '_>, 144);\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n #[derive(Debug)]\n-crate struct Expr<'thir, 'tcx> {\n+pub struct Expr<'thir, 'tcx> {\n     /// type of this expression\n-    crate ty: Ty<'tcx>,\n+    pub ty: Ty<'tcx>,\n \n     /// lifetime of this expression if it should be spilled into a\n     /// temporary; should be None only if in a constant context\n-    crate temp_lifetime: Option<region::Scope>,\n+    pub temp_lifetime: Option<region::Scope>,\n \n     /// span of the expression in the source\n-    crate span: Span,\n+    pub span: Span,\n \n     /// kind of expression\n-    crate kind: ExprKind<'thir, 'tcx>,\n+    pub kind: ExprKind<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate enum ExprKind<'thir, 'tcx> {\n+pub enum ExprKind<'thir, 'tcx> {\n     Scope {\n         region_scope: region::Scope,\n         lint_level: LintLevel,\n@@ -316,41 +317,41 @@ crate enum ExprKind<'thir, 'tcx> {\n }\n \n #[derive(Debug)]\n-crate struct FieldExpr<'thir, 'tcx> {\n-    crate name: Field,\n-    crate expr: &'thir Expr<'thir, 'tcx>,\n+pub struct FieldExpr<'thir, 'tcx> {\n+    pub name: Field,\n+    pub expr: &'thir Expr<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate struct FruInfo<'thir, 'tcx> {\n-    crate base: &'thir Expr<'thir, 'tcx>,\n-    crate field_types: &'thir [Ty<'tcx>],\n+pub struct FruInfo<'thir, 'tcx> {\n+    pub base: &'thir Expr<'thir, 'tcx>,\n+    pub field_types: &'thir [Ty<'tcx>],\n }\n \n #[derive(Debug)]\n-crate struct Arm<'thir, 'tcx> {\n-    crate pattern: Pat<'tcx>,\n-    crate guard: Option<Guard<'thir, 'tcx>>,\n-    crate body: &'thir Expr<'thir, 'tcx>,\n-    crate lint_level: LintLevel,\n-    crate scope: region::Scope,\n-    crate span: Span,\n+pub struct Arm<'thir, 'tcx> {\n+    pub pattern: Pat<'tcx>,\n+    pub guard: Option<Guard<'thir, 'tcx>>,\n+    pub body: &'thir Expr<'thir, 'tcx>,\n+    pub lint_level: LintLevel,\n+    pub scope: region::Scope,\n+    pub span: Span,\n }\n \n #[derive(Debug)]\n-crate enum Guard<'thir, 'tcx> {\n+pub enum Guard<'thir, 'tcx> {\n     If(&'thir Expr<'thir, 'tcx>),\n     IfLet(Pat<'tcx>, &'thir Expr<'thir, 'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LogicalOp {\n+pub enum LogicalOp {\n     And,\n     Or,\n }\n \n #[derive(Debug)]\n-crate enum InlineAsmOperand<'thir, 'tcx> {\n+pub enum InlineAsmOperand<'thir, 'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n         expr: &'thir Expr<'thir, 'tcx>,"}, {"sha": "9ac79a37ac6903dcbf3e72ffbb8fb9d87bb5d2b0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3442825335fe55ba30ef000f472bffb0ee9fe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=2a3442825335fe55ba30ef000f472bffb0ee9fe9", "patch": "@@ -40,22 +40,22 @@ crate enum PatternError {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate enum BindingMode {\n+pub enum BindingMode {\n     ByValue,\n     ByRef(BorrowKind),\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct FieldPat<'tcx> {\n-    crate field: Field,\n-    crate pattern: Pat<'tcx>,\n+pub struct FieldPat<'tcx> {\n+    pub field: Field,\n+    pub pattern: Pat<'tcx>,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct Pat<'tcx> {\n-    crate ty: Ty<'tcx>,\n-    crate span: Span,\n-    crate kind: Box<PatKind<'tcx>>,\n+pub struct Pat<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub span: Span,\n+    pub kind: Box<PatKind<'tcx>>,\n }\n \n impl<'tcx> Pat<'tcx> {\n@@ -65,8 +65,8 @@ impl<'tcx> Pat<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatTyProj<'tcx> {\n-    crate user_ty: CanonicalUserType<'tcx>,\n+pub struct PatTyProj<'tcx> {\n+    pub user_ty: CanonicalUserType<'tcx>,\n }\n \n impl<'tcx> PatTyProj<'tcx> {\n@@ -92,8 +92,8 @@ impl<'tcx> PatTyProj<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct Ascription<'tcx> {\n-    crate user_ty: PatTyProj<'tcx>,\n+pub struct Ascription<'tcx> {\n+    pub user_ty: PatTyProj<'tcx>,\n     /// Variance to use when relating the type `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n@@ -112,12 +112,12 @@ crate struct Ascription<'tcx> {\n     /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n     /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n     /// of the old type-check for now. See #57280 for details.\n-    crate variance: ty::Variance,\n-    crate user_ty_span: Span,\n+    pub variance: ty::Variance,\n+    pub user_ty_span: Span,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate enum PatKind<'tcx> {\n+pub enum PatKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n@@ -195,10 +195,10 @@ crate enum PatKind<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatRange<'tcx> {\n-    crate lo: &'tcx ty::Const<'tcx>,\n-    crate hi: &'tcx ty::Const<'tcx>,\n-    crate end: RangeEnd,\n+pub struct PatRange<'tcx> {\n+    pub lo: &'tcx ty::Const<'tcx>,\n+    pub hi: &'tcx ty::Const<'tcx>,\n+    pub end: RangeEnd,\n }\n \n impl<'tcx> fmt::Display for Pat<'tcx> {"}]}