{"sha": "1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODUwZjYxZWFkOGI2ZmMwNTIzNmU1ZTI1MTRjMmI2YzlmZTM0ZGU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-26T22:30:54Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-26T23:18:41Z"}, "message": "Record temporary static references in generator witnesses", "tree": {"sha": "c8b02fe00fae9350c076c327137a825075a8d4e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b02fe00fae9350c076c327137a825075a8d4e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "html_url": "https://github.com/rust-lang/rust/commit/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797fd92628842c1f5face9fb93b0fe4f1f9d297f", "url": "https://api.github.com/repos/rust-lang/rust/commits/797fd92628842c1f5face9fb93b0fe4f1f9d297f", "html_url": "https://github.com/rust-lang/rust/commit/797fd92628842c1f5face9fb93b0fe4f1f9d297f"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "0b11a9efd81d7a5a387c9fae1b58edb9c60ff431", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "patch": "@@ -682,6 +682,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.static_mutability(def_id) == Some(hir::Mutability::Mutable)\n     }\n \n+    /// Get the type of the pointer to the static that we use in MIR.\n+    pub fn static_ptr_ty(&self, def_id: DefId) -> Ty<'tcx> {\n+        // Make sure that any constants in the static's type are evaluated.\n+        let static_ty = self.normalize_erasing_regions(\n+            ty::ParamEnv::empty(),\n+            self.type_of(def_id),\n+        );\n+\n+        if self.is_mutable_static(def_id) {\n+            self.mk_mut_ptr(static_ty)\n+        } else if self.is_foreign_item(def_id) {\n+            self.mk_imm_ptr(static_ty)\n+        } else {\n+            self.mk_imm_ref(self.lifetimes.re_erased, static_ty)\n+        }\n+    }\n+\n     /// Expands the given impl trait type, stopping if the type is recursive.\n     pub fn try_expand_impl_trait_type(\n         self,"}, {"sha": "8c852854be1f99f0c697c875ed85eea403c650e1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "patch": "@@ -933,14 +933,7 @@ fn convert_path_expr<'a, 'tcx>(\n         // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is\n         // a constant reference (or constant raw pointer for `static mut`) in MIR\n         Res::Def(DefKind::Static, id) => {\n-            let ty = cx.tcx.type_of(id);\n-            let ty = if cx.tcx.is_mutable_static(id) {\n-                cx.tcx.mk_mut_ptr(ty)\n-            } else if cx.tcx.is_foreign_item(id) {\n-                cx.tcx.mk_imm_ptr(ty)\n-            } else {\n-                cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_static, ty)\n-            };\n+            let ty = cx.tcx.static_ptr_ty(id);\n             let ptr = cx.tcx.alloc_map.lock().create_static_alloc(id);\n             let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n             ExprKind::Deref { arg: Expr {"}, {"sha": "fcf6b22f74f3c01e49c12fa836d7e3d5f7189cc5", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "patch": "@@ -185,6 +185,8 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+\n         match &expr.kind {\n             ExprKind::Call(callee, args) => match &callee.kind {\n                 ExprKind::Path(qpath) => {\n@@ -210,13 +212,20 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 }\n                 _ => intravisit::walk_expr(self, expr),\n             }\n+            ExprKind::Path(qpath) => {\n+                let res = self.fcx.tables.borrow().qpath_res(qpath, expr.hir_id);\n+                if let Res::Def(DefKind::Static, def_id) = res {\n+                    // Statics are lowered to temporary references or\n+                    // pointers in MIR, so record that type.\n+                    let ptr_ty = self.fcx.tcx.static_ptr_ty(def_id);\n+                    self.record(ptr_ty, scope, Some(expr), expr.span);\n+                }\n+            }\n             _ => intravisit::walk_expr(self, expr),\n         }\n \n         self.expr_count += 1;\n \n-        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n-\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.tables.borrow().expr_ty_adjusted_opt(expr) {"}, {"sha": "23b11593bb5d6444354972faea766d580765247f", "filename": "src/test/ui/generator/static-reference-across-yield.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Ftest%2Fui%2Fgenerator%2Fstatic-reference-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f850f61ead8b6fc05236e5e2514c2b6c9fe34de/src%2Ftest%2Fui%2Fgenerator%2Fstatic-reference-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-reference-across-yield.rs?ref=1f850f61ead8b6fc05236e5e2514c2b6c9fe34de", "patch": "@@ -0,0 +1,16 @@\n+// build-pass\n+#![feature(generators)]\n+\n+static A: [i32; 5] = [1, 2, 3, 4, 5];\n+\n+fn main() {\n+    static || {\n+        let u = A[{yield; 1}];\n+    };\n+    static || {\n+        match A {\n+            i if { yield; true } => (),\n+            _ => (),\n+        }\n+    };\n+}"}]}