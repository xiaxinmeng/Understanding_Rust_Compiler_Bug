{"sha": "6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDFhNGExMDgxMzFhMzgxMmZiNjAwZjNhMGYwZWI3YmE3NWFkNzY=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T00:52:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T00:52:38Z"}, "message": "Rollup merge of #65340 - bjorn3:cg_ssa_refactor4, r=eddyb\n\nSeveral changes to the codegen backend organization\n\n* Split functions from values in cg_ssa `BackendTypes`.\n* Remove `is_const_integral` function from `ConstMethods`.\n* Actually register the invalid monomorphization of intrinsic long diagnostic and remove the `diagnostics` method from `CodegenBackends`, as it was unused.\n* Add cg_ssa and cg_utils provided methods to `default_provide`, so codegen backend don't have to do it themself.", "tree": {"sha": "4439a0ecd5010a5518f1596dca71175be49af7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4439a0ecd5010a5518f1596dca71175be49af7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdpRhWCRBK7hj4Ov3rIwAAdHIIADHnylnAvDKrJ+0BCN8VXqpv\nJoQzRMxLSRonwIA9iUhT9W8K6l0Yk1SnOjE4nJ5xzh48MAcMd5PnPQRW+1eJ3Mfw\nc91bD1wITgg23GvKvmc7l+FmU89DQBpv56rezAM/D2lGG4DE/w/xz9hUUSCuKtP6\nS5805YGFxXCv412Roc1G8Vx7z7sTAGS9/Jk0K0K/HHcNFbXf+UACmfC/tyjqswuY\nbRDCFxPouaHjtP/WIUk3IIXYSHvYUdTCv1IMKFPQW8RSMG2gj6eF0m+KDQSf9pHb\nlBPi4NgvADzC1wt6ZT8AJGlEkSTMjSNc7WzJabJEC4myRKLHgS7H8eSrZTWQg7Y=\n=M3n/\n-----END PGP SIGNATURE-----\n", "payload": "tree 4439a0ecd5010a5518f1596dca71175be49af7e1\nparent e38639fe123194200842b3e18e0c2313b0372a8c\nparent f0e2fc76235cb5184e264d028d86e1ab718b6214\nauthor Tyler Mandry <tmandry@gmail.com> 1571100758 -0700\ncommitter GitHub <noreply@github.com> 1571100758 -0700\n\nRollup merge of #65340 - bjorn3:cg_ssa_refactor4, r=eddyb\n\nSeveral changes to the codegen backend organization\n\n* Split functions from values in cg_ssa `BackendTypes`.\n* Remove `is_const_integral` function from `ConstMethods`.\n* Actually register the invalid monomorphization of intrinsic long diagnostic and remove the `diagnostics` method from `CodegenBackends`, as it was unused.\n* Add cg_ssa and cg_utils provided methods to `default_provide`, so codegen backend don't have to do it themself.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "html_url": "https://github.com/rust-lang/rust/commit/6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38639fe123194200842b3e18e0c2313b0372a8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38639fe123194200842b3e18e0c2313b0372a8c", "html_url": "https://github.com/rust-lang/rust/commit/e38639fe123194200842b3e18e0c2313b0372a8c"}, {"sha": "f0e2fc76235cb5184e264d028d86e1ab718b6214", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e2fc76235cb5184e264d028d86e1ab718b6214", "html_url": "https://github.com/rust-lang/rust/commit/f0e2fc76235cb5184e264d028d86e1ab718b6214"}], "stats": {"total": 335, "additions": 157, "deletions": 178}, "files": [{"sha": "98be0ae44335f14723e212d60012aa8a25d5f54c", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -52,6 +52,7 @@ const UNNAMED: *const c_char = EMPTY_C_STR.as_ptr();\n \n impl BackendTypes for Builder<'_, 'll, 'tcx> {\n     type Value = <CodegenCx<'ll, 'tcx> as BackendTypes>::Value;\n+    type Function = <CodegenCx<'ll, 'tcx> as BackendTypes>::Function;\n     type BasicBlock = <CodegenCx<'ll, 'tcx> as BackendTypes>::BasicBlock;\n     type Type = <CodegenCx<'ll, 'tcx> as BackendTypes>::Type;\n     type Funclet = <CodegenCx<'ll, 'tcx> as BackendTypes>::Funclet;"}, {"sha": "08fa23f2a7c9e31b09b539309692a655f9384926", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -33,7 +33,7 @@ pub fn get_fn(\n     assert!(!instance.substs.has_param_types());\n \n     let sig = instance.fn_sig(cx.tcx());\n-    if let Some(&llfn) = cx.instances().borrow().get(&instance) {\n+    if let Some(&llfn) = cx.instances.borrow().get(&instance) {\n         return llfn;\n     }\n "}, {"sha": "a1a5232d588327c7fc8d3eb95bcadd8bd8181557", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -2,7 +2,7 @@\n \n //! Code that is useful in various codegen modules.\n \n-use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef};\n+use crate::llvm::{self, True, False, Bool, BasicBlock, OperandBundleDef, ConstantInt};\n use crate::abi;\n use crate::consts;\n use crate::type_::Type;\n@@ -86,6 +86,8 @@ impl Funclet<'ll> {\n \n impl BackendTypes for CodegenCx<'ll, 'tcx> {\n     type Value = &'ll Value;\n+    type Function = &'ll Value;\n+\n     type BasicBlock = &'ll BasicBlock;\n     type Type = &'ll Type;\n     type Funclet = Funclet<'ll>;\n@@ -243,33 +245,23 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         struct_in_context(self.llcx, elts, packed)\n     }\n \n-    fn const_to_uint(&self, v: &'ll Value) -> u64 {\n-        unsafe {\n+    fn const_to_opt_uint(&self, v: &'ll Value) -> Option<u64> {\n+        try_as_const_integral(v).map(|v| unsafe {\n             llvm::LLVMConstIntGetZExtValue(v)\n-        }\n-    }\n-\n-    fn is_const_integral(&self, v: &'ll Value) -> bool {\n-        unsafe {\n-            llvm::LLVMIsAConstantInt(v).is_some()\n-        }\n+        })\n     }\n \n     fn const_to_opt_u128(&self, v: &'ll Value, sign_ext: bool) -> Option<u128> {\n-        unsafe {\n-            if self.is_const_integral(v) {\n-                let (mut lo, mut hi) = (0u64, 0u64);\n-                let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n-                                                           &mut hi, &mut lo);\n-                if success {\n-                    Some(hi_lo_to_u128(lo, hi))\n-                } else {\n-                    None\n-                }\n+        try_as_const_integral(v).and_then(|v| unsafe {\n+            let (mut lo, mut hi) = (0u64, 0u64);\n+            let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n+                                                        &mut hi, &mut lo);\n+            if success {\n+                Some(hi_lo_to_u128(lo, hi))\n             } else {\n                 None\n             }\n-        }\n+        })\n     }\n \n     fn scalar_to_backend(\n@@ -305,7 +297,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         }\n                     }\n                     Some(GlobalAlloc::Function(fn_instance)) => {\n-                        self.get_fn(fn_instance)\n+                        self.get_fn_addr(fn_instance)\n                     }\n                     Some(GlobalAlloc::Static(def_id)) => {\n                         assert!(self.tcx.is_static(def_id));\n@@ -386,3 +378,9 @@ pub fn struct_in_context(\n fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }\n+\n+fn try_as_const_integral(v: &'ll Value) -> Option<&'ll ConstantInt> {\n+    unsafe {\n+        llvm::LLVMIsAConstantInt(v)\n+    }\n+}"}, {"sha": "2da93877172141890b20c3ba11cbc146e5c83733", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -20,7 +20,6 @@ use rustc::ty::layout::{\n use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::util::nodemap::FxHashMap;\n use rustc_target::spec::{HasTargetSpec, Target};\n-use rustc_codegen_ssa::callee::resolve_and_get_fn;\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use crate::callee::get_fn;\n \n@@ -327,11 +326,11 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self.vtables\n     }\n \n-    fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, &'ll Value>> {\n-        &self.instances\n+    fn get_fn(&self, instance: Instance<'tcx>) -> &'ll Value {\n+        get_fn(self, instance)\n     }\n \n-    fn get_fn(&self, instance: Instance<'tcx>) -> &'ll Value {\n+    fn get_fn_addr(&self, instance: Instance<'tcx>) -> &'ll Value {\n         get_fn(self, instance)\n     }\n \n@@ -362,7 +361,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         let llfn = match tcx.lang_items().eh_personality() {\n             Some(def_id) if !wants_msvc_seh(self.sess()) => {\n-                resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]))\n+                self.get_fn_addr(\n+                    ty::Instance::resolve(\n+                        tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        def_id,\n+                        tcx.intern_substs(&[]),\n+                    ).unwrap()\n+                )\n             }\n             _ => {\n                 let name = if wants_msvc_seh(self.sess()) {\n@@ -390,7 +396,14 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let tcx = self.tcx;\n         assert!(self.sess().target.target.options.custom_unwind_resume);\n         if let Some(def_id) = tcx.lang_items().eh_unwind_resume() {\n-            let llfn = resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]));\n+            let llfn = self.get_fn_addr(\n+                ty::Instance::resolve(\n+                    tcx,\n+                    ty::ParamEnv::reveal_all(),\n+                    def_id,\n+                    tcx.intern_substs(&[]),\n+                ).unwrap()\n+            );\n             unwresume.set(Some(llfn));\n             return llfn;\n         }"}, {"sha": "042e51ed2ba7a4e95e0f4bacd7e16142947df71c", "filename": "src/librustc_codegen_llvm/error_codes.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e38639fe123194200842b3e18e0c2313b0372a8c/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38639fe123194200842b3e18e0c2313b0372a8c/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ferror_codes.rs?ref=e38639fe123194200842b3e18e0c2313b0372a8c", "patch": "@@ -1,38 +0,0 @@\n-register_diagnostics! {\n-\n-E0511: r##\"\n-Invalid monomorphization of an intrinsic function was used. Erroneous code\n-example:\n-\n-```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n-#![feature(platform_intrinsics)]\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_add<T>(a: T, b: T) -> T;\n-}\n-\n-fn main() {\n-    unsafe { simd_add(0, 1); }\n-    // error: invalid monomorphization of `simd_add` intrinsic\n-}\n-```\n-\n-The generic type has to be a SIMD type. Example:\n-\n-```\n-#![feature(repr_simd)]\n-#![feature(platform_intrinsics)]\n-\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct i32x2(i32, i32);\n-\n-extern \"platform-intrinsic\" {\n-    fn simd_add<T>(a: T, b: T) -> T;\n-}\n-\n-unsafe { simd_add(i32x2(0, 0), i32x2(1, 2)); } // ok!\n-```\n-\"##,\n-\n-}"}, {"sha": "3df8d4c26903bd43e859632e2c53a334b69689aa", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -20,9 +20,9 @@ use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc::hir;\n use syntax::ast::{self, FloatTy};\n \n+use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::traits::*;\n \n-use rustc::session::Session;\n use syntax_pos::Span;\n \n use std::cmp::Ordering;\n@@ -1026,10 +1026,6 @@ fn get_rust_try_fn<'ll, 'tcx>(\n     rust_try\n }\n \n-fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) {\n-    span_err!(a, b, E0511, \"{}\", c);\n-}\n-\n fn generic_simd_intrinsic(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n     name: &str,"}, {"sha": "fde04a68457d074898181d000749889a64ae86c3", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -38,7 +38,7 @@ extern crate rustc_fs_util;\n extern crate rustc_driver as _;\n \n #[macro_use] extern crate log;\n-#[macro_use] extern crate syntax;\n+extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n \n@@ -64,8 +64,6 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n \n-mod error_codes;\n-\n mod back {\n     pub mod archive;\n     pub mod bytecode;\n@@ -258,10 +256,6 @@ impl CodegenBackend for LlvmCodegenBackend {\n         llvm_util::print_version();\n     }\n \n-    fn diagnostics(&self) -> &[(&'static str, &'static str)] {\n-        &error_codes::DIAGNOSTICS\n-    }\n-\n     fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n         target_features(sess)\n     }\n@@ -271,15 +265,10 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers<'_>) {\n-        rustc_codegen_utils::symbol_names::provide(providers);\n-        rustc_codegen_ssa::back::symbol_export::provide(providers);\n-        rustc_codegen_ssa::base::provide_both(providers);\n         attributes::provide(providers);\n     }\n \n     fn provide_extern(&self, providers: &mut ty::query::Providers<'_>) {\n-        rustc_codegen_ssa::back::symbol_export::provide_extern(providers);\n-        rustc_codegen_ssa::base::provide_both(providers);\n         attributes::provide_extern(providers);\n     }\n "}, {"sha": "a2313b933a6c970b56e63811f4a904bd40a7a81e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -510,6 +510,7 @@ extern { pub type Module; }\n extern { pub type Context; }\n extern { pub type Type; }\n extern { pub type Value; }\n+extern { pub type ConstantInt; }\n extern { pub type Metadata; }\n extern { pub type BasicBlock; }\n #[repr(C)]\n@@ -719,8 +720,8 @@ extern \"C\" {\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n     pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n-    pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n-    pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n+    pub fn LLVMConstIntGetZExtValue(ConstantVal: &ConstantInt) -> c_ulonglong;\n+    pub fn LLVMRustConstInt128Get(ConstantVal: &ConstantInt, SExt: bool,\n                                   high: &mut u64, low: &mut u64) -> bool;\n \n \n@@ -1666,7 +1667,7 @@ extern \"C\" {\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n \n-    pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n+    pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&ConstantInt>;\n \n     pub fn LLVMRustPassKind(Pass: &Pass) -> PassKind;\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;"}, {"sha": "a09a0c22c1ba5ec8dbd1918c809ee71fbde5fa99", "filename": "src/librustc_codegen_ssa/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FREADME.md?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -84,7 +84,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n {\n     fn new_block<'b>(\n         cx: &'a Self::CodegenCx,\n-        llfn: Self::Value,\n+        llfn: Self::Function,\n         name: &'b str\n     ) -> Self;\n     /* ... */"}, {"sha": "1c441ca7cbf2e277b860dc3d70e6dc58a126a909", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -36,7 +36,6 @@ use crate::mir::place::PlaceRef;\n use crate::back::write::{OngoingCodegen, start_async_codegen, submit_pre_lto_module_to_llvm,\n     submit_post_lto_module_to_llvm};\n use crate::{MemFlags, CrateInfo};\n-use crate::callee;\n use crate::common::{RealPredicate, TypeKind, IntPredicate};\n use crate::meth;\n use crate::mir;\n@@ -377,8 +376,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     let sig = instance.fn_sig(cx.tcx());\n     let sig = cx.tcx().normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n \n-    let lldecl = cx.instances().borrow().get(&instance).cloned().unwrap_or_else(||\n-        bug!(\"Instance `{:?}` not already declared\", instance));\n+    let lldecl = cx.get_fn(instance);\n \n     let mir = cx.tcx().instance_mir(instance.def);\n     mir::codegen_mir::<Bx>(cx, lldecl, &mir, instance, sig);\n@@ -400,7 +398,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n         return;\n     }\n \n-    let main_llfn = cx.get_fn(instance);\n+    let main_llfn = cx.get_fn_addr(instance);\n \n     let et = cx.tcx().entry_fn(LOCAL_CRATE).map(|e| e.1);\n     match et {\n@@ -455,10 +453,13 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(cx: &'\n \n         let (start_fn, args) = if use_start_lang_item {\n             let start_def_id = cx.tcx().require_lang_item(StartFnLangItem, None);\n-            let start_fn = callee::resolve_and_get_fn(\n-                cx,\n-                start_def_id,\n-                cx.tcx().intern_substs(&[main_ret_ty.into()]),\n+            let start_fn = cx.get_fn_addr(\n+                ty::Instance::resolve(\n+                    cx.tcx(),\n+                    ty::ParamEnv::reveal_all(),\n+                    start_def_id,\n+                    cx.tcx().intern_substs(&[main_ret_ty.into()]),\n+                ).unwrap()\n             );\n             (start_fn, vec![bx.pointercast(rust_main, cx.type_ptr_to(cx.type_i8p())),\n                             arg_argc, arg_argv])"}, {"sha": "6ba6774cbf881cb72210a0595d34c17880ec6cff", "filename": "src/librustc_codegen_ssa/callee.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e38639fe123194200842b3e18e0c2313b0372a8c/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38639fe123194200842b3e18e0c2313b0372a8c/src%2Flibrustc_codegen_ssa%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcallee.rs?ref=e38639fe123194200842b3e18e0c2313b0372a8c", "patch": "@@ -1,53 +0,0 @@\n-use crate::traits::*;\n-use rustc::ty;\n-use rustc::ty::subst::SubstsRef;\n-use rustc::hir::def_id::DefId;\n-\n-pub fn resolve_and_get_fn<'tcx, Cx: CodegenMethods<'tcx>>(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}\n-\n-pub fn resolve_and_get_fn_for_ptr<'tcx,\n-    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n->(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve_for_fn_ptr(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}\n-\n-pub fn resolve_and_get_fn_for_vtable<'tcx,\n-    Cx: Backend<'tcx> + MiscMethods<'tcx> + TypeMethods<'tcx>\n->(\n-    cx: &Cx,\n-    def_id: DefId,\n-    substs: SubstsRef<'tcx>,\n-) -> Cx::Value {\n-    cx.get_fn(\n-        ty::Instance::resolve_for_vtable(\n-            cx.tcx(),\n-            ty::ParamEnv::reveal_all(),\n-            def_id,\n-            substs\n-        ).unwrap()\n-    )\n-}"}, {"sha": "ac39ca98476670ed2761ade3808667e35b4b2e51", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -1,6 +1,7 @@\n #![allow(non_camel_case_types, non_snake_case)]\n \n use rustc::ty::{Ty, TyCtxt};\n+use rustc::session::Session;\n use syntax_pos::Span;\n \n use rustc::hir::def_id::DefId;\n@@ -200,3 +201,7 @@ pub fn shift_mask_val<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         _ => bug!(\"shift_mask_val: expected Integer or Vector, found {:?}\", kind),\n     }\n }\n+\n+pub fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) {\n+    span_err!(a, b, E0511, \"{}\", c);\n+}"}, {"sha": "02e26d8f6ecf0f9bebb552fc5dbb11b3717c7120", "filename": "src/librustc_codegen_ssa/error_codes.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ferror_codes.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -1,5 +1,40 @@\n syntax::register_diagnostics! {\n \n+E0511: r##\"\n+Invalid monomorphization of an intrinsic function was used. Erroneous code\n+example:\n+\n+```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+#![feature(platform_intrinsics)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(a: T, b: T) -> T;\n+}\n+\n+fn main() {\n+    unsafe { simd_add(0, 1); }\n+    // error: invalid monomorphization of `simd_add` intrinsic\n+}\n+```\n+\n+The generic type has to be a SIMD type. Example:\n+\n+```\n+#![feature(repr_simd)]\n+#![feature(platform_intrinsics)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct i32x2(i32, i32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_add<T>(a: T, b: T) -> T;\n+}\n+\n+unsafe { simd_add(i32x2(0, 0), i32x2(1, 2)); } // ok!\n+```\n+\"##,\n+\n E0668: r##\"\n Malformed inline assembly rejected by LLVM.\n "}, {"sha": "0221a04b045188840e07efef6cf66154fdfecb9c", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -27,6 +27,7 @@ use rustc::dep_graph::WorkProduct;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::middle::lang_items::LangItem;\n use rustc::hir::def_id::CrateNum;\n+use rustc::ty::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::svh::Svh;\n@@ -41,7 +42,6 @@ pub mod traits;\n pub mod mir;\n pub mod debuginfo;\n pub mod base;\n-pub mod callee;\n pub mod glue;\n pub mod meth;\n pub mod mono_item;\n@@ -156,3 +156,13 @@ pub struct CodegenResults {\n     pub linker_info: back::linker::LinkerInfo,\n     pub crate_info: CrateInfo,\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    crate::back::symbol_export::provide(providers);\n+    crate::base::provide_both(providers);\n+}\n+\n+pub fn provide_extern(providers: &mut Providers<'_>) {\n+    crate::back::symbol_export::provide_extern(providers);\n+    crate::base::provide_both(providers);\n+}"}, {"sha": "266d2e5b18d22bbbfe2aa256b472cb495bb02c1e", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -1,6 +1,5 @@\n use rustc_target::abi::call::FnType;\n \n-use crate::callee;\n use crate::traits::*;\n \n use rustc::ty::{self, Ty, Instance};\n@@ -92,7 +91,14 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n \n     let methods = methods.cloned().map(|opt_mth| {\n         opt_mth.map_or(nullptr, |(def_id, substs)| {\n-            callee::resolve_and_get_fn_for_vtable(cx, def_id, substs)\n+            cx.get_fn_addr(\n+                ty::Instance::resolve_for_vtable(\n+                    cx.tcx(),\n+                    ty::ParamEnv::reveal_all(),\n+                    def_id,\n+                    substs,\n+                ).unwrap()\n+            )\n         })\n     });\n \n@@ -102,7 +108,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n-        cx.get_fn(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n+        cx.get_fn_addr(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(layout.size.bytes()),\n         cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();"}, {"sha": "dc77d025c005fa4307d5dd77f187a95ffd31609f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 (meth::DESTRUCTOR.get_fn(&mut bx, vtable, &fn_ty), fn_ty)\n             }\n             _ => {\n-                (bx.get_fn(drop_fn),\n+                (bx.get_fn_addr(drop_fn),\n                  FnType::of_instance(&bx, drop_fn))\n             }\n         };\n@@ -460,7 +460,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n         let instance = ty::Instance::mono(bx.tcx(), def_id);\n         let fn_ty = FnType::of_instance(&bx, instance);\n-        let llfn = bx.get_fn(instance);\n+        let llfn = bx.get_fn_addr(instance);\n \n         // Codegen the actual panic invoke/call.\n         helper.do_call(self, &mut bx, fn_ty, llfn, &args, None, cleanup);\n@@ -576,7 +576,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n                 let fn_ty = FnType::of_instance(&bx, instance);\n-                let llfn = bx.get_fn(instance);\n+                let llfn = bx.get_fn_addr(instance);\n \n                 if let Some((_, target)) = destination.as_ref() {\n                     helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n@@ -793,7 +793,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         let fn_ptr = match (llfn, instance) {\n             (Some(llfn), _) => llfn,\n-            (None, Some(instance)) => bx.get_fn(instance),\n+            (None, Some(instance)) => bx.get_fn_addr(instance),\n             _ => span_bug!(span, \"no llfn for call\"),\n         };\n "}, {"sha": "1a2e796a5b7be6adc44b375316295c035d5ed2c9", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -30,7 +30,7 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n \n     debug_context: FunctionDebugContext<Bx::DIScope>,\n \n-    llfn: Bx::Value,\n+    llfn: Bx::Function,\n \n     cx: &'a Bx::CodegenCx,\n \n@@ -183,7 +183,7 @@ impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n \n pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n-    llfn: Bx::Value,\n+    llfn: Bx::Function,\n     mir: &'a Body<'tcx>,\n     instance: Instance<'tcx>,\n     sig: ty::FnSig<'tcx>,"}, {"sha": "1d1bc2a81a2ca7459205a34391f665b92ec35a4e", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -394,8 +394,8 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         // Statically compute the offset if we can, otherwise just use the element size,\n         // as this will yield the lowest alignment.\n         let layout = self.layout.field(bx, 0);\n-        let offset = if bx.is_const_integral(llindex) {\n-            layout.size.checked_mul(bx.const_to_uint(llindex), bx).unwrap_or(layout.size)\n+        let offset = if let Some(llindex) = bx.const_to_opt_uint(llindex) {\n+            layout.size.checked_mul(llindex, bx).unwrap_or(layout.size)\n         } else {\n             layout.size\n         };"}, {"sha": "27442bb6bff887f54d866f6fe090267d1e89e427", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -10,7 +10,6 @@ use syntax::source_map::{DUMMY_SP, Span};\n \n use crate::base;\n use crate::MemFlags;\n-use crate::callee;\n use crate::common::{self, RealPredicate, IntPredicate};\n \n use crate::traits::*;\n@@ -95,7 +94,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let size = bx.const_usize(dest.layout.size.bytes());\n \n                     // Use llvm.memset.p0i8.* to initialize all zero arrays\n-                    if bx.cx().is_const_integral(v) && bx.cx().const_to_uint(v) == 0 {\n+                    if bx.cx().const_to_opt_uint(v) == Some(0) {\n                         let fill = bx.cx().const_u8(0);\n                         bx.memset(start, fill, size, dest.align, MemFlags::empty());\n                         return bx;\n@@ -190,7 +189,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bug!(\"reifying a fn ptr that requires const arguments\");\n                                 }\n                                 OperandValue::Immediate(\n-                                    callee::resolve_and_get_fn_for_ptr(bx.cx(), def_id, substs))\n+                                    bx.get_fn_addr(\n+                                        ty::Instance::resolve_for_fn_ptr(\n+                                            bx.tcx(),\n+                                            ty::ParamEnv::reveal_all(),\n+                                            def_id,\n+                                            substs\n+                                        ).unwrap()\n+                                    )\n+                                )\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be reified to a fn ptr\", operand.layout.ty)\n@@ -205,7 +212,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     def_id,\n                                     substs,\n                                     ty::ClosureKind::FnOnce);\n-                                OperandValue::Immediate(bx.cx().get_fn(instance))\n+                                OperandValue::Immediate(bx.cx().get_fn_addr(instance))\n                             }\n                             _ => {\n                                 bug!(\"{} cannot be cast to a fn ptr\", operand.layout.ty)\n@@ -488,7 +495,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 };\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let r = bx.cx().get_fn(instance);\n+                let r = bx.cx().get_fn_addr(instance);\n                 let call = bx.call(r, &[llsize, llalign], None);\n                 let val = bx.pointercast(call, llty_ptr);\n "}, {"sha": "a7faf4eaf10227de4c1297c3422c6c793ced34a8", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -14,6 +14,8 @@ use syntax_pos::symbol::InternedString;\n \n pub trait BackendTypes {\n     type Value: CodegenObject;\n+    type Function: CodegenObject;\n+\n     type BasicBlock: Copy;\n     type Type: CodegenObject;\n     type Funclet;"}, {"sha": "62b5bcbb6c9dcff67c89e7899ae4d0a50c0e7951", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -34,7 +34,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n     + HasTargetSpec\n \n {\n-    fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;\n+    fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Function, name: &'b str) -> Self;\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n     fn build_sibling_block(&self, name: &str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;"}, {"sha": "95ada60fae08dd74ffc6f926967232489a27e50d", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -21,11 +21,9 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n \n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n \n-    fn const_to_uint(&self, v: Self::Value) -> u64;\n+    fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;\n     fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n \n-    fn is_const_integral(&self, v: Self::Value) -> bool;\n-\n     fn scalar_to_backend(\n         &self,\n         cv: Scalar,"}, {"sha": "989e6cf9dcaf1ea57aad2df096189b725a1adab8", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -20,7 +20,7 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n         &self,\n         instance: Instance<'tcx>,\n         sig: ty::FnSig<'tcx>,\n-        llfn: Self::Value,\n+        llfn: Self::Function,\n         mir: &mir::Body<'_>,\n     ) -> FunctionDebugContext<Self::DIScope>;\n "}, {"sha": "cd42044e48df8cf6d6c5cf0dfa458acc50c31b85", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -17,13 +17,13 @@ pub trait DeclareMethods<'tcx>: BackendTypes {\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n     /// update the declaration and return existing Value instead.\n-    fn declare_cfn(&self, name: &str, fn_type: Self::Type) -> Self::Value;\n+    fn declare_cfn(&self, name: &str, fn_type: Self::Type) -> Self::Function;\n \n     /// Declare a Rust function.\n     ///\n     /// If there\u2019s a value with the same name already declared, the function will\n     /// update the declaration and return existing Value instead.\n-    fn declare_fn(&self, name: &str, sig: ty::PolyFnSig<'tcx>) -> Self::Value;\n+    fn declare_fn(&self, name: &str, sig: ty::PolyFnSig<'tcx>) -> Self::Function;\n \n     /// Declare a global with an intention to define it.\n     ///"}, {"sha": "658ddd0028076970726f1d05b38a9b39400b7699", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -11,14 +11,14 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n         &self,\n     ) -> &RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), Self::Value>>;\n     fn check_overflow(&self) -> bool;\n-    fn instances(&self) -> &RefCell<FxHashMap<Instance<'tcx>, Self::Value>>;\n-    fn get_fn(&self, instance: Instance<'tcx>) -> Self::Value;\n+    fn get_fn(&self, instance: Instance<'tcx>) -> Self::Function;\n+    fn get_fn_addr(&self, instance: Instance<'tcx>) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n     fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n-    fn set_frame_pointer_elimination(&self, llfn: Self::Value);\n-    fn apply_target_cpu_attr(&self, llfn: Self::Value);\n+    fn set_frame_pointer_elimination(&self, llfn: Self::Function);\n+    fn apply_target_cpu_attr(&self, llfn: Self::Function);\n     fn create_used_variable(&self);\n }"}, {"sha": "4318ef16494a11194af39f0c434f3488106909ec", "filename": "src/librustc_codegen_ssa/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmod.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -88,6 +88,7 @@ pub trait HasCodegen<'tcx>:\n     type CodegenCx: CodegenMethods<'tcx>\n         + BackendTypes<\n             Value = Self::Value,\n+            Function = Self::Function,\n             BasicBlock = Self::BasicBlock,\n             Type = Self::Type,\n             Funclet = Self::Funclet,"}, {"sha": "1077c1f42637ebf85a00c5d41a9b3c5b378a0eef", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -25,7 +25,6 @@ pub trait CodegenBackend {\n     fn target_features(&self, _sess: &Session) -> Vec<Symbol> { vec![] }\n     fn print_passes(&self) {}\n     fn print_version(&self) {}\n-    fn diagnostics(&self) -> &[(&'static str, &'static str)] { &[] }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync>;\n     fn provide(&self, _providers: &mut Providers<'_>);"}, {"sha": "66920342ff6ba3b894ec3135af73e45a0257fa90", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -18,6 +18,7 @@\n extern crate rustc;\n \n use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n use rustc::hir::def_id::LOCAL_CRATE;\n use syntax::symbol::sym;\n \n@@ -37,3 +38,7 @@ pub fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n         }\n     }\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    crate::symbol_names::provide(providers);\n+}"}, {"sha": "396c5610251a34075404e1ff65dbd76a5babbea7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241a4a108131a3812fb600f3a0f0eb7ba75ad76/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=6241a4a108131a3812fb600f3a0f0eb7ba75ad76", "patch": "@@ -791,10 +791,13 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     cstore::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);\n+    rustc_codegen_utils::provide(providers);\n+    rustc_codegen_ssa::provide(providers);\n }\n \n pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n     cstore::provide_extern(providers);\n+    rustc_codegen_ssa::provide_extern(providers);\n }\n \n declare_box_region_type!("}]}