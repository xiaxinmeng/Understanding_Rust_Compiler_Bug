{"sha": "bef0b4bb0217fa530e4e2951458f215c4b346c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZjBiNGJiMDIxN2ZhNTMwZTRlMjk1MTQ1OGYyMTVjNGIzNDZjODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-11T00:58:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-11T00:58:33Z"}, "message": "Auto merge of #24934 - jooert:bitset-append-split_off, r=Gankro\n\ncc #19986", "tree": {"sha": "c86ca442b21ae2fb83d07a3c146e37c3f88bd8ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c86ca442b21ae2fb83d07a3c146e37c3f88bd8ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef0b4bb0217fa530e4e2951458f215c4b346c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef0b4bb0217fa530e4e2951458f215c4b346c84", "html_url": "https://github.com/rust-lang/rust/commit/bef0b4bb0217fa530e4e2951458f215c4b346c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef0b4bb0217fa530e4e2951458f215c4b346c84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f", "html_url": "https://github.com/rust-lang/rust/commit/9ecc9896dedb426e3f4eb3d23dfc60192fe5275f"}, {"sha": "f95c8123112ee55d3be429fa839a270732ad0976", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95c8123112ee55d3be429fa839a270732ad0976", "html_url": "https://github.com/rust-lang/rust/commit/f95c8123112ee55d3be429fa839a270732ad0976"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "31cad0fdbb1a788c0fa861c7e1ad3efccbdab8b3", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=bef0b4bb0217fa530e4e2951458f215c4b346c84", "patch": "@@ -1796,6 +1796,89 @@ impl BitSet {\n         self.other_op(other, |w1, w2| w1 ^ w2);\n     }\n \n+    /// Moves all elements from `other` into `Self`, leaving `other` empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(collections, bit_set_append_split_off)]\n+    /// use std::collections::{BitVec, BitSet};\n+    ///\n+    /// let mut a = BitSet::new();\n+    /// a.insert(2);\n+    /// a.insert(6);\n+    ///\n+    /// let mut b = BitSet::new();\n+    /// b.insert(1);\n+    /// b.insert(3);\n+    /// b.insert(6);\n+    ///\n+    /// a.append(&mut b);\n+    ///\n+    /// assert_eq!(a.len(), 4);\n+    /// assert_eq!(b.len(), 0);\n+    /// assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b01110010])));\n+    /// ```\n+    #[unstable(feature = \"bit_set_append_split_off\",\n+               reason = \"recently added as part of collections reform 2\")]\n+    pub fn append(&mut self, other: &mut Self) {\n+        self.union_with(other);\n+        other.clear();\n+    }\n+\n+    /// Splits the `BitSet` into two at the given key including the key.\n+    /// Retains the first part in-place while returning the second part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(collections, bit_set_append_split_off)]\n+    /// use std::collections::{BitSet, BitVec};\n+    /// let mut a = BitSet::new();\n+    /// a.insert(2);\n+    /// a.insert(6);\n+    /// a.insert(1);\n+    /// a.insert(3);\n+    ///\n+    /// let b = a.split_off(3);\n+    ///\n+    /// assert_eq!(a.len(), 2);\n+    /// assert_eq!(b.len(), 2);\n+    /// assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b01100000])));\n+    /// assert_eq!(b, BitSet::from_bit_vec(BitVec::from_bytes(&[0b00010010])));\n+    /// ```\n+    #[unstable(feature = \"bit_set_append_split_off\",\n+               reason = \"recently added as part of collections reform 2\")]\n+    pub fn split_off(&mut self, at: usize) -> Self {\n+        let mut other = BitSet::new();\n+\n+        if at == 0 {\n+            swap(self, &mut other);\n+            return other;\n+        } else if at >= self.bit_vec.len() {\n+            return other;\n+        }\n+\n+        // Calculate block and bit at which to split\n+        let w = at / u32::BITS;\n+        let b = at % u32::BITS;\n+\n+        // Pad `other` with `w` zero blocks,\n+        // append `self`'s blocks in the range from `w` to the end to `other`\n+        other.bit_vec.storage.extend(repeat(0u32).take(w)\n+                                     .chain(self.bit_vec.storage[w..].iter().cloned()));\n+        other.bit_vec.nbits = self.bit_vec.nbits;\n+\n+        if b > 0 {\n+            other.bit_vec.storage[w] &= !0 << b;\n+        }\n+\n+        // Sets `bit_vec.len()` and fixes the last block as well\n+        self.bit_vec.truncate(at);\n+\n+        other\n+    }\n+\n     /// Returns the number of set bits in this set.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e6aa15608f03eb0297afcae622927e105a55c92d", "filename": "src/libcollectionstest/bit/set.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollectionstest%2Fbit%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollectionstest%2Fbit%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbit%2Fset.rs?ref=bef0b4bb0217fa530e4e2951458f215c4b346c84", "patch": "@@ -387,6 +387,67 @@ fn test_bit_vec_clone() {\n     assert!(b.contains(&1000));\n }\n \n+#[test]\n+fn test_bit_set_append() {\n+    let mut a = BitSet::new();\n+    a.insert(2);\n+    a.insert(6);\n+\n+    let mut b = BitSet::new();\n+    b.insert(1);\n+    b.insert(3);\n+    b.insert(6);\n+\n+    a.append(&mut b);\n+\n+    assert_eq!(a.len(), 4);\n+    assert_eq!(b.len(), 0);\n+    assert!(b.capacity() >= 6);\n+\n+    assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b01110010])));\n+}\n+\n+#[test]\n+fn test_bit_set_split_off() {\n+    // Split at 0\n+    let mut a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                          0b00110011, 0b01101011, 0b10101101]));\n+\n+    let b = a.split_off(0);\n+\n+    assert_eq!(a.len(), 0);\n+    assert_eq!(b.len(), 21);\n+\n+    assert_eq!(b, BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                            0b00110011, 0b01101011, 0b10101101])));\n+\n+    // Split behind last element\n+    let mut a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                          0b00110011, 0b01101011, 0b10101101]));\n+\n+    let b = a.split_off(50);\n+\n+    assert_eq!(a.len(), 21);\n+    assert_eq!(b.len(), 0);\n+\n+    assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                            0b00110011, 0b01101011, 0b10101101])));\n+\n+    // Split at arbitrary element\n+    let mut a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                          0b00110011, 0b01101011, 0b10101101]));\n+\n+    let b = a.split_off(34);\n+\n+    assert_eq!(a.len(), 12);\n+    assert_eq!(b.len(), 9);\n+\n+    assert_eq!(a, BitSet::from_bit_vec(BitVec::from_bytes(&[0b10100000, 0b00010010, 0b10010010,\n+                                                            0b00110011, 0b01000000])));\n+    assert_eq!(b, BitSet::from_bit_vec(BitVec::from_bytes(&[0, 0, 0, 0,\n+                                                            0b00101011, 0b10101101])));\n+}\n+\n mod bench {\n     use std::collections::{BitSet, BitVec};\n     use std::__rand::{Rng, thread_rng, ThreadRng};"}, {"sha": "9b50478472fa92d30ad3f3e5c63a2c7217b174ef", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef0b4bb0217fa530e4e2951458f215c4b346c84/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=bef0b4bb0217fa530e4e2951458f215c4b346c84", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(bit_set_append_split_off)]\n #![feature(bit_vec_append_split_off)]\n #![feature(box_syntax)]\n #![feature(collections)]"}]}