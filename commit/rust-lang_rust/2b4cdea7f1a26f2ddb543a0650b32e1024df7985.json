{"sha": "2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNGNkZWE3ZjFhMjZmMmRkYjU0M2EwNjUwYjMyZTEwMjRkZjc5ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T09:51:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-18T09:51:30Z"}, "message": "auto merge of #14258 : alexcrichton/rust/dox-format-writer, r=cmr\n\nThis commit fills in the documentation holes for the FormatWriter trait which\r\nwere previously accidentally left blank. Additionally, this adds the `write_fmt`\r\nmethod to the trait to allow usage of the `write!` macro with implementors of\r\nthe `FormatWriter` trait. This is not useful for consumers of the standard\r\nlibrary who should generally avoid the `FormatWriter` trait, but it is useful\r\nfor consumers of the core library who are not using the standard library.", "tree": {"sha": "90a105b9a8e37e5eeb1096b5401dc83f650881ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a105b9a8e37e5eeb1096b5401dc83f650881ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "html_url": "https://github.com/rust-lang/rust/commit/2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b4cdea7f1a26f2ddb543a0650b32e1024df7985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8648dbdad525eebe90e4920439b30c0440d682", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8648dbdad525eebe90e4920439b30c0440d682", "html_url": "https://github.com/rust-lang/rust/commit/bf8648dbdad525eebe90e4920439b30c0440d682"}, {"sha": "14d3dbe292dc4ac590dabd0c33fe18edb7810be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d3dbe292dc4ac590dabd0c33fe18edb7810be9", "html_url": "https://github.com/rust-lang/rust/commit/14d3dbe292dc4ac590dabd0c33fe18edb7810be9"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "af492dc295aca2996b9e5297e4651334e862fc9d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2b4cdea7f1a26f2ddb543a0650b32e1024df7985/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b4cdea7f1a26f2ddb543a0650b32e1024df7985/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "patch": "@@ -43,16 +43,44 @@ pub mod rt;\n \n pub type Result = result::Result<(), FormatError>;\n \n-/// dox\n+/// The error type which is returned from formatting a message into a stream.\n+///\n+/// This type does not support transmission of an error other than that an error\n+/// occurred. Any extra information must be arranged to be transmitted through\n+/// some other means.\n pub enum FormatError {\n-    /// dox\n+    /// A generic write error occurred during formatting, no other information\n+    /// is transmitted via this variant.\n     WriteError,\n }\n \n-/// dox\n+/// A collection of methods that are required to format a message into a stream.\n+///\n+/// This trait is the type which this modules requires when formatting\n+/// information. This is similar to the standard library's `io::Writer` trait,\n+/// but it is only intended for use in libcore.\n+///\n+/// This trait should generally not be implemented by consumers of the standard\n+/// library. The `write!` macro accepts an instance of `io::Writer`, and the\n+/// `io::Writer` trait is favored over implementing this trait.\n pub trait FormatWriter {\n-    /// dox\n+    /// Writes a slice of bytes into this writer, returning whether the write\n+    /// succeeded.\n+    ///\n+    /// This method can only succeed if the entire byte slice was successfully\n+    /// written, and this method will not return until all data has been\n+    /// written or an error occurs.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an instance of `FormatError` on error.\n     fn write(&mut self, bytes: &[u8]) -> Result;\n+\n+    /// Glue for usage of the `write!` macro with implementors of this trait.\n+    ///\n+    /// This method should generally not be invoked manually, but rather through\n+    /// the `write!` macro itself.\n+    fn write_fmt(&mut self, args: &Arguments) -> Result { write(self, args) }\n }\n \n /// A struct to represent both where to emit formatting strings to and how they"}, {"sha": "724e57bdef23d5752f2859c44463951a0465c77e", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b4cdea7f1a26f2ddb543a0650b32e1024df7985/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b4cdea7f1a26f2ddb543a0650b32e1024df7985/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=2b4cdea7f1a26f2ddb543a0650b32e1024df7985", "patch": "@@ -14,12 +14,22 @@\n #![feature(macro_rules)]\n \n use std::io::MemWriter;\n+use std::fmt;\n+use std::fmt::FormatWriter;\n \n struct Foo<'a> {\n     writer: &'a mut Writer,\n     other: &'a str,\n }\n \n+struct Bar;\n+\n+impl fmt::FormatWriter for Bar {\n+    fn write(&mut self, _: &[u8]) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n     write!(foo.writer, \"{}\", foo.other);\n }\n@@ -29,4 +39,7 @@ fn main() {\n     write!(&mut w as &mut Writer, \"\");\n     write!(&mut w, \"\"); // should coerce\n     println!(\"ok\");\n+\n+    let mut s = Bar;\n+    write!(&mut s, \"test\");\n }"}]}