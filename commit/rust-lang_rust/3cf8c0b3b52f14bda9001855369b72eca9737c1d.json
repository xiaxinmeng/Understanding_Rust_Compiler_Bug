{"sha": "3cf8c0b3b52f14bda9001855369b72eca9737c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZjhjMGIzYjUyZjE0YmRhOTAwMTg1NTM2OWI3MmVjYTk3MzdjMWQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-31T04:20:49Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-01-31T04:32:29Z"}, "message": "Fix `cast_sign_loss` false positive\n\nThis checks if the value is a non-negative constant before linting about\nlosing the sign.\n\nBecause the `constant` function doesn't handle const functions, we check if\nthe value is from a call to a `max_value` function directly. A utility method\ncalled `get_def_path` was added to make checking for the function paths\neasier.\n\nFixes #2728", "tree": {"sha": "8e0badc172345aade28fa4784e9e4b33328271f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0badc172345aade28fa4784e9e4b33328271f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf8c0b3b52f14bda9001855369b72eca9737c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf8c0b3b52f14bda9001855369b72eca9737c1d", "html_url": "https://github.com/rust-lang/rust/commit/3cf8c0b3b52f14bda9001855369b72eca9737c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf8c0b3b52f14bda9001855369b72eca9737c1d/comments", "author": null, "committer": null, "parents": [{"sha": "6ce78d1257ac6fd77f245730fcfbadd536a173eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce78d1257ac6fd77f245730fcfbadd536a173eb", "html_url": "https://github.com/rust-lang/rust/commit/6ce78d1257ac6fd77f245730fcfbadd536a173eb"}], "stats": {"total": 117, "additions": 70, "deletions": 47}, "files": [{"sha": "3c0171ce8c62cf9b6ed0b5aac4380e3f181d7b10", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3cf8c0b3b52f14bda9001855369b72eca9737c1d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf8c0b3b52f14bda9001855369b72eca9737c1d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=3cf8c0b3b52f14bda9001855369b72eca9737c1d", "patch": "@@ -4,8 +4,8 @@ use crate::consts::{constant, Constant};\n use crate::reexport::*;\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n-    match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n+    clip, comparisons, differing_macro_contexts, get_def_path, higher, in_constant, in_macro, int_bits,\n+    last_path_segment, match_def_path, match_path, multispan_sugg, opt_def_id, same_tys, sext, snippet, snippet_opt,\n     snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n     AbsolutePathBuffer,\n };\n@@ -1001,6 +1001,48 @@ enum ArchSuffix {\n     None,\n }\n \n+fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr, op: &Expr, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    if !cast_from.is_signed() || cast_to.is_signed() {\n+        return;\n+    }\n+\n+    // don't lint for positive constants\n+    let const_val = constant(cx, &cx.tables, op);\n+    if_chain! {\n+        if let Some((const_val, _)) = const_val;\n+        if let Constant::Int(n) = const_val;\n+        if let ty::Int(ity) = cast_from.sty;\n+        if sext(cx.tcx, n, ity) >= 0;\n+        then {\n+            return\n+        }\n+    }\n+\n+    // don't lint for max_value const fns\n+    if_chain! {\n+        if let ExprKind::Call(callee, args) = &op.node;\n+        if args.is_empty();\n+        if let ExprKind::Path(qpath) = &callee.node;\n+        let def = cx.tables.qpath_def(qpath, callee.hir_id);\n+        if let Some(def_id) = def.opt_def_id();\n+        let def_path = get_def_path(cx.tcx, def_id);\n+        if let &[\"core\", \"num\", impl_ty, \"max_value\"] = &def_path[..];\n+        then {\n+           if let \"<impl i8>\" | \"<impl i16>\" | \"<impl i32>\" |\n+                  \"<impl i64>\" | \"<impl i128>\" = impl_ty {\n+               return;\n+           }\n+        }\n+    }\n+\n+    span_lint(\n+        cx,\n+        CAST_SIGN_LOSS,\n+        expr.span,\n+        &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+    );\n+}\n+\n fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let arch_64_suffix = \" on targets with 64-bit wide pointers\";\n     let arch_32_suffix = \" on targets with 32-bit wide pointers\";\n@@ -1176,14 +1218,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n                         }\n                     },\n                     (true, true) => {\n-                        if cast_from.is_signed() && !cast_to.is_signed() {\n-                            span_lint(\n-                                cx,\n-                                CAST_SIGN_LOSS,\n-                                expr.span,\n-                                &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n-                            );\n-                        }\n+                        check_loss_of_sign(cx, expr, ex, cast_from, cast_to);\n                         check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n                         check_lossless(cx, expr, ex, cast_from, cast_to);\n                     },"}, {"sha": "b9cde75d51d8ab4c886fe20a3f1ce4341c1f7ddb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cf8c0b3b52f14bda9001855369b72eca9737c1d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf8c0b3b52f14bda9001855369b72eca9737c1d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3cf8c0b3b52f14bda9001855369b72eca9737c1d", "patch": "@@ -130,6 +130,12 @@ pub fn match_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId, path: &[&str]) ->\n     apb.names.len() == path.len() && apb.names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n }\n \n+pub fn get_def_path(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Vec<&'static str> {\n+    let mut apb = AbsolutePathBuffer { names: vec![] };\n+    tcx.push_item_path(&mut apb, def_id, false);\n+    apb.names.iter().map(|n| n.get()).collect()\n+}\n+\n /// Check if type is struct, enum or union type with given def path.\n pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.sty {"}, {"sha": "c248b5bf5984440024388d0334afe6fc110681ec", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=3cf8c0b3b52f14bda9001855369b72eca9737c1d", "patch": "@@ -34,7 +34,15 @@ fn main() {\n     (1u8 + 1u8) as u16;\n     // Test clippy::cast_sign_loss\n     1i32 as u32;\n+    -1i32 as u32;\n     1isize as usize;\n+    -1isize as usize;\n+    0i8 as u8;\n+    i8::max_value() as u8;\n+    i16::max_value() as u16;\n+    i32::max_value() as u32;\n+    i64::max_value() as u64;\n+    i128::max_value() as u128;\n     // Extra checks for *size\n     // Test cast_unnecessary\n     1i32 as i32;"}, {"sha": "c01393793f1f581f1d598c85b931eda8440a1e53", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=3cf8c0b3b52f14bda9001855369b72eca9737c1d", "patch": "@@ -70,12 +70,6 @@ error: casting i32 to i8 may truncate the value\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n-error: casting i32 to u8 may lose the sign of the value\n-  --> $DIR/cast.rs:22:5\n-   |\n-LL |     1i32 as u8;\n-   |     ^^^^^^^^^^\n-\n error: casting i32 to u8 may truncate the value\n   --> $DIR/cast.rs:22:5\n    |\n@@ -147,36 +141,36 @@ LL |     (1u8 + 1u8) as u16;\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:36:5\n+  --> $DIR/cast.rs:37:5\n    |\n-LL |     1i32 as u32;\n-   |     ^^^^^^^^^^^\n+LL |     -1i32 as u32;\n+   |     ^^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:37:5\n+  --> $DIR/cast.rs:39:5\n    |\n-LL |     1isize as usize;\n-   |     ^^^^^^^^^^^^^^^\n+LL |     -1isize as usize;\n+   |     ^^^^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:40:5\n+  --> $DIR/cast.rs:48:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:49:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:42:5\n+  --> $DIR/cast.rs:50:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "a77aafaf11d9dc3d52e38b20cb36e204f70ecfa3", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cf8c0b3b52f14bda9001855369b72eca9737c1d/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=3cf8c0b3b52f14bda9001855369b72eca9737c1d", "patch": "@@ -38,14 +38,6 @@ error: casting isize to i32 may truncate the value on targets with 64-bit wide p\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting isize to u32 may lose the sign of the value\n-  --> $DIR/cast_size.rs:17:5\n-   |\n-LL |     1isize as u32;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n-\n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:17:5\n    |\n@@ -78,12 +70,6 @@ error: casting i64 to isize may truncate the value on targets with 32-bit wide p\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i64 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:22:5\n-   |\n-LL |     1i64 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n@@ -114,11 +100,5 @@ error: casting u32 to isize may wrap around the value on targets with 32-bit wid\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i32 to usize may lose the sign of the value\n-  --> $DIR/cast_size.rs:28:5\n-   |\n-LL |     1i32 as usize;\n-   |     ^^^^^^^^^^^^^\n-\n-error: aborting due to 19 previous errors\n+error: aborting due to 16 previous errors\n "}]}