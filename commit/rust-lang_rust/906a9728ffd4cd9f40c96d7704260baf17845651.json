{"sha": "906a9728ffd4cd9f40c96d7704260baf17845651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNmE5NzI4ZmZkNGNkOWY0MGM5NmQ3NzA0MjYwYmFmMTc4NDU2NTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-09T18:48:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-10T10:11:28Z"}, "message": "Add a new `span_suggestion` infrastructure. This lets you edit a snippet\nof text (perhaps obtained by span_snippet) and then splice that edited\nform back into the original file in the form of a suggestion.", "tree": {"sha": "448fb8de4dda0fb0d1e963069493ef5d55abd4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448fb8de4dda0fb0d1e963069493ef5d55abd4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/906a9728ffd4cd9f40c96d7704260baf17845651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/906a9728ffd4cd9f40c96d7704260baf17845651", "html_url": "https://github.com/rust-lang/rust/commit/906a9728ffd4cd9f40c96d7704260baf17845651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/906a9728ffd4cd9f40c96d7704260baf17845651/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5156b3a6cd1c60982f0bea9f3b7243f66cab9bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5156b3a6cd1c60982f0bea9f3b7243f66cab9bb5", "html_url": "https://github.com/rust-lang/rust/commit/5156b3a6cd1c60982f0bea9f3b7243f66cab9bb5"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "88faf1cb68ae4db505359543eff52f5c592f25d1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/906a9728ffd4cd9f40c96d7704260baf17845651/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906a9728ffd4cd9f40c96d7704260baf17845651/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=906a9728ffd4cd9f40c96d7704260baf17845651", "patch": "@@ -143,6 +143,13 @@ impl Session {\n     pub fn span_end_note(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_end_note(sp, msg)\n     }\n+\n+    /// Prints out a message with a suggested edit of the code.\n+    ///\n+    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n+    pub fn span_suggestion(&self, sp: Span, msg: &str, suggestion: String) {\n+        self.diagnostic().span_suggestion(sp, msg, suggestion)\n+    }\n     pub fn span_help(&self, sp: Span, msg: &str) {\n         self.diagnostic().span_help(sp, msg)\n     }"}, {"sha": "ed7bdcd898e9357ebcfa60cd65d187623ba3aa0d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/906a9728ffd4cd9f40c96d7704260baf17845651/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/906a9728ffd4cd9f40c96d7704260baf17845651/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=906a9728ffd4cd9f40c96d7704260baf17845651", "patch": "@@ -18,6 +18,7 @@ use codemap;\n use diagnostics;\n \n use std::cell::{RefCell, Cell};\n+use std::cmp;\n use std::fmt;\n use std::io::prelude::*;\n use std::io;\n@@ -28,7 +29,7 @@ use libc;\n /// maximum number of lines we will print for each error; arbitrary.\n const MAX_LINES: usize = 6;\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n pub enum RenderSpan {\n     /// A FullSpan renders with both with an initial line for the\n     /// message, prefixed by file:linenum, followed by a summary of\n@@ -42,6 +43,12 @@ pub enum RenderSpan {\n     /// of the span).\n     EndSpan(Span),\n \n+    /// A suggestion renders with both with an initial line for the\n+    /// message, prefixed by file:linenum, followed by a summary\n+    /// of hypothetical source code, where the `String` is spliced\n+    /// into the lines in place of the code covered by the span.\n+    Suggestion(Span, String),\n+\n     /// A FileLine renders with just a line for the message prefixed\n     /// by file:linenum.\n     FileLine(Span),\n@@ -51,6 +58,7 @@ impl RenderSpan {\n     fn span(&self) -> Span {\n         match *self {\n             FullSpan(s) |\n+            Suggestion(s, _) |\n             EndSpan(s) |\n             FileLine(s) =>\n                 s\n@@ -124,6 +132,12 @@ impl SpanHandler {\n     pub fn span_help(&self, sp: Span, msg: &str) {\n         self.handler.emit(Some((&self.cm, sp)), msg, Help);\n     }\n+    /// Prints out a message with a suggested edit of the code.\n+    ///\n+    /// See `diagnostic::RenderSpan::Suggestion` for more information.\n+    pub fn span_suggestion(&self, sp: Span, msg: &str, suggestion: String) {\n+        self.handler.custom_emit(&self.cm, Suggestion(sp, suggestion), msg, Help);\n+    }\n     pub fn fileline_note(&self, sp: Span, msg: &str) {\n         self.handler.custom_emit(&self.cm, FileLine(sp), msg, Note);\n     }\n@@ -455,6 +469,9 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n         EndSpan(_) => {\n             try!(end_highlight_lines(dst, cm, sp, lvl, cm.span_to_lines(sp)));\n         }\n+        Suggestion(_, ref suggestion) => {\n+            try!(highlight_suggestion(dst, cm, sp, suggestion));\n+        }\n         FileLine(..) => {\n             // no source text in this case!\n         }\n@@ -479,6 +496,53 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n     Ok(())\n }\n \n+fn highlight_suggestion(err: &mut EmitterWriter,\n+                        cm: &codemap::CodeMap,\n+                        sp: Span,\n+                        suggestion: &str)\n+                        -> io::Result<()>\n+{\n+    let lines = cm.span_to_lines(sp);\n+    assert!(!lines.lines.is_empty());\n+\n+    // To build up the result, we want to take the snippet from the first\n+    // line that precedes the span, prepend that with the suggestion, and\n+    // then append the snippet from the last line that trails the span.\n+    let fm = &lines.file;\n+\n+    let first_line = &lines.lines[0];\n+    let prefix = fm.get_line(first_line.line_index)\n+                   .map(|l| &l[..first_line.start_col.0])\n+                   .unwrap_or(\"\");\n+\n+    let last_line = lines.lines.last().unwrap();\n+    let suffix = fm.get_line(last_line.line_index)\n+                   .map(|l| &l[last_line.end_col.0..])\n+                   .unwrap_or(\"\");\n+\n+    let complete = format!(\"{}{}{}\", prefix, suggestion, suffix);\n+\n+    // print the suggestion without any line numbers, but leave\n+    // space for them. This helps with lining up with previous\n+    // snippets from the actual error being reported.\n+    let fm = &*lines.file;\n+    let mut lines = complete.lines();\n+    for (line, line_index) in lines.by_ref().take(MAX_LINES).zip(first_line.line_index..) {\n+        let elided_line_num = format!(\"{}\", line_index+1);\n+        try!(write!(&mut err.dst, \"{0}:{1:2$} {3}\\n\",\n+                    fm.name, \"\", elided_line_num.len(), line));\n+    }\n+\n+    // if we elided some lines, add an ellipsis\n+    if lines.next().is_some() {\n+        let elided_line_num = format!(\"{}\", first_line.line_index + MAX_LINES + 1);\n+        try!(write!(&mut err.dst, \"{0:1$} {0:2$} ...\\n\",\n+                    \"\", fm.name.len(), elided_line_num.len()));\n+    }\n+\n+    Ok(())\n+}\n+\n fn highlight_lines(err: &mut EmitterWriter,\n                    cm: &codemap::CodeMap,\n                    sp: Span,"}]}