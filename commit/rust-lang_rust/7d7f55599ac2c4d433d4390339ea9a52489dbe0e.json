{"sha": "7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "node_id": "C_kwDOAAsO6NoAKDdkN2Y1NTU5OWFjMmM0ZDQzM2Q0MzkwMzM5ZWE5YTUyNDg5ZGJlMGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-21T13:31:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-21T13:31:08Z"}, "message": "Rollup merge of #102045 - RalfJung:const-prop-regression-fix, r=oli-obk\n\nfix ConstProp handling of written_only_inside_own_block_locals\n\nFixes a regression introduced by https://github.com/rust-lang/rust/pull/100239, which adds an early return and thus skips some code in `visit_terminator` that must be run for soundness.\n\nFixes https://github.com/rust-lang/rust/issues/101973", "tree": {"sha": "4d60a385db236ad014f5e5acd96056fd1a001b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d60a385db236ad014f5e5acd96056fd1a001b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjKxIcCRBK7hj4Ov3rIwAAIvAIAIC2kjKMeqjBEKqrSMu+z8xE\ni6/941hB+J9fD5kTPX5gDPVOxnLjdEcMTCuVr0nQVqkkgSbcRS72J39hMN0BkETc\nrfPeBkIXhQoQwGY0R5LLVO2M0E9ZAvjM9GKblH6dmiEy4+GLhF/EglYm9OK4frgd\nr+7Tm/csD+bHxOJBiDLyo9p/NbkVuRxGJ/MZy5cuGnVAHfkg3F39JFr2pMNQlzot\n5zaY8Jc61NUUEMGOy1HkE2gvR/oaIQIoPrkz1q4f4TtlnsLnqB4JcaguQ7Z2mv9e\nHUe++2CVKcoXjzRyX4tVd2WF3FchU7zZK9pP6VFXpOjmF6pFaqyapgMKKQnswxo=\n=orYE\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d60a385db236ad014f5e5acd96056fd1a001b0a\nparent 4b7c596b3aa232f40f4b4fa796240d683fe6544f\nparent 7373788c370a917c0472cbca30cfdf5d3c6ca086\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1663767068 +0530\ncommitter GitHub <noreply@github.com> 1663767068 +0530\n\nRollup merge of #102045 - RalfJung:const-prop-regression-fix, r=oli-obk\n\nfix ConstProp handling of written_only_inside_own_block_locals\n\nFixes a regression introduced by https://github.com/rust-lang/rust/pull/100239, which adds an early return and thus skips some code in `visit_terminator` that must be run for soundness.\n\nFixes https://github.com/rust-lang/rust/issues/101973\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "html_url": "https://github.com/rust-lang/rust/commit/7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b7c596b3aa232f40f4b4fa796240d683fe6544f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7c596b3aa232f40f4b4fa796240d683fe6544f", "html_url": "https://github.com/rust-lang/rust/commit/4b7c596b3aa232f40f4b4fa796240d683fe6544f"}, {"sha": "7373788c370a917c0472cbca30cfdf5d3c6ca086", "url": "https://api.github.com/repos/rust-lang/rust/commits/7373788c370a917c0472cbca30cfdf5d3c6ca086", "html_url": "https://github.com/rust-lang/rust/commit/7373788c370a917c0472cbca30cfdf5d3c6ca086"}], "stats": {"total": 160, "additions": 140, "deletions": 20}, "files": [{"sha": "4a9bd9df327f54d3d4e8a4f3e07c5e7dd25e4d6b", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "patch": "@@ -1066,32 +1066,32 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         let source_info = terminator.source_info;\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n+        // Do NOT early return in this function, it does some crucial fixup of the state at the end!\n         match &mut terminator.kind {\n             TerminatorKind::Assert { expected, ref mut cond, .. } => {\n                 if let Some(ref value) = self.eval_operand(&cond) {\n                     trace!(\"assertion on {:?} should be {:?}\", value, expected);\n                     let expected = Scalar::from_bool(*expected);\n-                    let Ok(value_const) = self.ecx.read_scalar(&value) else {\n-                        // FIXME should be used use_ecx rather than a local match... but we have\n-                        // quite a few of these read_scalar/read_immediate that need fixing.\n-                        return\n-                    };\n-                    if expected != value_const {\n-                        // Poison all places this operand references so that further code\n-                        // doesn't use the invalid value\n-                        match cond {\n-                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                                Self::remove_const(&mut self.ecx, place.local);\n+                    // FIXME should be used use_ecx rather than a local match... but we have\n+                    // quite a few of these read_scalar/read_immediate that need fixing.\n+                    if let Ok(value_const) = self.ecx.read_scalar(&value) {\n+                        if expected != value_const {\n+                            // Poison all places this operand references so that further code\n+                            // doesn't use the invalid value\n+                            match cond {\n+                                Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                                    Self::remove_const(&mut self.ecx, place.local);\n+                                }\n+                                Operand::Constant(_) => {}\n+                            }\n+                        } else {\n+                            if self.should_const_prop(value) {\n+                                *cond = self.operand_from_scalar(\n+                                    value_const,\n+                                    self.tcx.types.bool,\n+                                    source_info.span,\n+                                );\n                             }\n-                            Operand::Constant(_) => {}\n-                        }\n-                    } else {\n-                        if self.should_const_prop(value) {\n-                            *cond = self.operand_from_scalar(\n-                                value_const,\n-                                self.tcx.types.bool,\n-                                source_info.span,\n-                            );\n                         }\n                     }\n                 }"}, {"sha": "216659a235ef7729df5c632b53a9f90968eba10c", "filename": "src/test/mir-opt/issue-101973.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/src%2Ftest%2Fmir-opt%2Fissue-101973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/src%2Ftest%2Fmir-opt%2Fissue-101973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-101973.rs?ref=7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -O -C debug-assertions=on\n+// This needs inlining followed by ConstProp to reproduce, so we cannot use \"unit-test\".\n+\n+#[inline]\n+pub fn imm8(x: u32) -> u32 {\n+    let mut out = 0u32;\n+    out |= (x >> 0) & 0xff;\n+    out\n+}\n+\n+// EMIT_MIR issue_101973.inner.ConstProp.diff\n+#[inline(never)]\n+pub fn inner(fields: u32) -> i64 {\n+    imm8(fields).rotate_right(((fields >> 8) & 0xf) << 1) as i32 as i64\n+}\n+\n+fn main() {\n+    let val = inner(0xe32cf20f);\n+    assert_eq!(val as u64, 0xfffffffff0000000);\n+}"}, {"sha": "89733a9a2cb7ced7d4188c0f9a29bcca83f1efde", "filename": "src/test/mir-opt/issue_101973.inner.ConstProp.diff", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7f55599ac2c4d433d4390339ea9a52489dbe0e/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=7d7f55599ac2c4d433d4390339ea9a52489dbe0e", "patch": "@@ -0,0 +1,100 @@\n+- // MIR for `inner` before ConstProp\n++ // MIR for `inner` after ConstProp\n+  \n+  fn inner(_1: u32) -> i64 {\n+      debug fields => _1;                  // in scope 0 at $DIR/issue-101973.rs:+0:14: +0:20\n+      let mut _0: i64;                     // return place in scope 0 at $DIR/issue-101973.rs:+0:30: +0:33\n+      let mut _2: i32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n+      let mut _3: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:58\n+      let mut _4: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:5: +1:17\n+      let mut _5: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n+      let mut _6: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+      let mut _7: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n+      let mut _8: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+      let mut _9: u32;                     // in scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n+      let mut _10: (u32, bool);            // in scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+      let mut _11: (u32, bool);            // in scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+      scope 1 (inlined imm8) {             // at $DIR/issue-101973.rs:14:5: 14:17\n+          debug x => _5;                   // in scope 1 at $DIR/issue-101973.rs:5:13: 5:14\n+          let mut _12: u32;                // in scope 1 at $DIR/issue-101973.rs:7:12: 7:27\n+          let mut _13: u32;                // in scope 1 at $DIR/issue-101973.rs:7:12: 7:20\n+          let mut _14: u32;                // in scope 1 at $DIR/issue-101973.rs:7:13: 7:14\n+          let mut _15: (u32, bool);        // in scope 1 at $DIR/issue-101973.rs:7:12: 7:20\n+          scope 2 {\n+              debug out => _4;             // in scope 2 at $DIR/issue-101973.rs:6:9: 6:16\n+          }\n+      }\n+      scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue-101973.rs:14:5: 14:58\n+          debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          let mut _16: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          let mut _17: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:58\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:5: +1:17\n+          StorageLive(_5);                 // scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n+          _5 = _1;                         // scope 0 at $DIR/issue-101973.rs:+1:10: +1:16\n+          _4 = const 0_u32;                // scope 1 at $DIR/issue-101973.rs:6:19: 6:23\n+          StorageLive(_12);                // scope 2 at $DIR/issue-101973.rs:7:12: 7:27\n+          StorageLive(_13);                // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n+          StorageLive(_14);                // scope 2 at $DIR/issue-101973.rs:7:13: 7:14\n+          _14 = _5;                        // scope 2 at $DIR/issue-101973.rs:7:13: 7:14\n+          _15 = CheckedShr(_14, const 0_i32); // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n+          assert(!move (_15.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 0_i32) -> bb3; // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n+      }\n+  \n+      bb1: {\n+          _8 = move (_10.0: u32);          // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+          StorageDead(_9);                 // scope 0 at $DIR/issue-101973.rs:+1:44: +1:45\n+          _7 = BitAnd(move _8, const 15_u32); // scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n+          StorageDead(_8);                 // scope 0 at $DIR/issue-101973.rs:+1:51: +1:52\n+          _11 = CheckedShl(_7, const 1_i32); // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+          assert(!move (_11.1: bool), \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> bb2; // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+      }\n+  \n+      bb2: {\n+          _6 = move (_11.0: u32);          // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+          StorageDead(_7);                 // scope 0 at $DIR/issue-101973.rs:+1:56: +1:57\n+          StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _16 = _4;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          StorageLive(_17);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _17 = _6;                        // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _3 = rotate_right::<u32>(move _16, move _17) -> bb4; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                           // + literal: Const { ty: extern \"rust-intrinsic\" fn(u32, u32) -> u32 {rotate_right::<u32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          _13 = move (_15.0: u32);         // scope 2 at $DIR/issue-101973.rs:7:12: 7:20\n+          StorageDead(_14);                // scope 2 at $DIR/issue-101973.rs:7:19: 7:20\n+          _12 = BitAnd(move _13, const 255_u32); // scope 2 at $DIR/issue-101973.rs:7:12: 7:27\n+          StorageDead(_13);                // scope 2 at $DIR/issue-101973.rs:7:26: 7:27\n+          _4 = BitOr(_4, move _12);        // scope 2 at $DIR/issue-101973.rs:7:5: 7:27\n+          StorageDead(_12);                // scope 2 at $DIR/issue-101973.rs:7:26: 7:27\n+          StorageDead(_5);                 // scope 0 at $DIR/issue-101973.rs:+1:16: +1:17\n+          StorageLive(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:31: +1:57\n+          StorageLive(_7);                 // scope 0 at $DIR/issue-101973.rs:+1:31: +1:52\n+          StorageLive(_8);                 // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+          StorageLive(_9);                 // scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n+          _9 = _1;                         // scope 0 at $DIR/issue-101973.rs:+1:33: +1:39\n+          _10 = CheckedShr(_9, const 8_i32); // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+          assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue-101973.rs:+1:32: +1:45\n+      }\n+  \n+      bb4: {\n+          StorageDead(_17);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          StorageDead(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n+          _2 = move _3 as i32 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:64: +1:65\n+          _0 = move _2 as i64 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:71: +1:72\n+          return;                          // scope 0 at $DIR/issue-101973.rs:+2:2: +2:2\n+      }\n+  }\n+  "}]}