{"sha": "2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNmIxM2E2NDljZTRhOGY1YTYwOGQxMDEzM2RkMmI0YjMwYzM1YzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-20T11:20:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-20T11:20:08Z"}, "message": "references must be aligned; also move up the warning that fn ptrs must be non-NULL", "tree": {"sha": "7e5768cd1e6b53d38f0517baeebd1f3974ebdf31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e5768cd1e6b53d38f0517baeebd1f3974ebdf31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1", "html_url": "https://github.com/rust-lang/rust/commit/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b502b275ca7d9a7f43c4e1cf09b0b547ecc645", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b502b275ca7d9a7f43c4e1cf09b0b547ecc645", "html_url": "https://github.com/rust-lang/rust/commit/21b502b275ca7d9a7f43c4e1cf09b0b547ecc645"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "95b803e3461ec4c9583a068b5cdd2d0089c1a563", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=2e6b13a649ce4a8f5a608d10133dd2b4b30c35c1", "patch": "@@ -895,9 +895,9 @@ mod prim_usize { }\n /// A reference represents a borrow of some owned value. You can get one by using the `&` or `&mut`\n /// operators on a value, or by using a `ref` or `ref mut` pattern.\n ///\n-/// For those familiar with pointers, a reference is just a pointer that is assumed to not be null.\n-/// In fact, `Option<&T>` has the same memory representation as a nullable pointer, and can be\n-/// passed across FFI boundaries as such.\n+/// For those familiar with pointers, a reference is just a pointer that is assumed to be\n+/// aligned and not null. In fact, `Option<&T>` has the same memory representation as a\n+/// nullable but aligned pointer, and can be passed across FFI boundaries as such.\n ///\n /// In most cases, references can be used much like the original value. Field access, method\n /// calling, and indexing work the same (save for mutability rules, of course). In addition, the\n@@ -1040,6 +1040,11 @@ mod prim_ref { }\n /// [`FnMut`]: ops/trait.FnMut.html\n /// [`FnOnce`]: ops/trait.FnOnce.html\n ///\n+/// Function pointers are pointers that point to *code*, not data. They can be called\n+/// just like functions. Like references, function pointers are assumed to not be null,\n+/// so if you want to pass a function pointer over FFI and be able to accommodate null pointers,\n+/// make your type `Option<fn()>` with your required signature.\n+///\n /// Plain function pointers are obtained by casting either plain functions, or closures that don't\n /// capture an environment:\n ///\n@@ -1095,10 +1100,6 @@ mod prim_ref { }\n ///\n /// These markers can be combined, so `unsafe extern \"stdcall\" fn()` is a valid type.\n ///\n-/// Like references in rust, function pointers are assumed to not be null, so if you want to pass a\n-/// function pointer over FFI and be able to accommodate null pointers, make your type\n-/// `Option<fn()>` with your required signature.\n-///\n /// Function pointers implement the following traits:\n ///\n /// * [`Clone`]"}]}