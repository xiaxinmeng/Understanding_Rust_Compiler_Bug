{"sha": "cf309b6a5f2d51e9509568ab82446cc3eae29f94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzA5YjZhNWYyZDUxZTk1MDk1NjhhYjgyNDQ2Y2MzZWFlMjlmOTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-27T14:38:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T14:38:28Z"}, "message": "Merge #2094\n\n2094: simplify AssistCtx API r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "54c4a26d7a6688a89515cdc97ec02c1a9f9103bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54c4a26d7a6688a89515cdc97ec02c1a9f9103bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf309b6a5f2d51e9509568ab82446cc3eae29f94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtavkCRBK7hj4Ov3rIwAAdHIIAHsj95gZket48uVVpa9uKZJ5\nG+7lyfebvLsyShdiO31bNznU+4Mb68F1KBmqxQ00m5CQrLjqYXzA2wxHY60CL2XI\nprPzqYgir5F3rFvpXGDxUP4tdnGnKTk46JUo8Pj25CD8vQIbIG9zp4CwyYCNp/Ef\nmtcDLaide8AgYWz+Q+9ijJO8GszwX5wyCNZCmrFhQBGhCN7cnuglLBEu7BobymGY\n803G5Pb3A7rMHRwL3YVdX0yQKTjzQjIoS9U0vqN7PLTUdRwmi1/3s/uWNY2TPKix\nphxY1jYxLcKxVGJFClgtL1d98C8RwkKRJLEWr2RhQ2Gf/q+cyPdz29Uxh2sWtak=\n=D5ki\n-----END PGP SIGNATURE-----\n", "payload": "tree 54c4a26d7a6688a89515cdc97ec02c1a9f9103bf\nparent ad950830d0902aaacfb5a76355a203626eb93b5f\nparent cda6355de23825c201d02e6062cb2dd414e98bf9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572187108 +0000\ncommitter GitHub <noreply@github.com> 1572187108 +0000\n\nMerge #2094\n\n2094: simplify AssistCtx API r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf309b6a5f2d51e9509568ab82446cc3eae29f94", "html_url": "https://github.com/rust-lang/rust/commit/cf309b6a5f2d51e9509568ab82446cc3eae29f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf309b6a5f2d51e9509568ab82446cc3eae29f94/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad950830d0902aaacfb5a76355a203626eb93b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad950830d0902aaacfb5a76355a203626eb93b5f", "html_url": "https://github.com/rust-lang/rust/commit/ad950830d0902aaacfb5a76355a203626eb93b5f"}, {"sha": "cda6355de23825c201d02e6062cb2dd414e98bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda6355de23825c201d02e6062cb2dd414e98bf9", "html_url": "https://github.com/rust-lang/rust/commit/cda6355de23825c201d02e6062cb2dd414e98bf9"}], "stats": {"total": 298, "additions": 113, "deletions": 185}, "files": [{"sha": "c5e9056afb184b7912fbe4e0847f2164ce2000e8", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -82,12 +82,12 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n         f(ctx)\n     }\n \n-    pub(crate) fn add_action(\n-        &mut self,\n+    pub(crate) fn add_assist(\n+        mut self,\n         id: AssistId,\n         label: impl Into<String>,\n         f: impl FnOnce(&mut AssistBuilder),\n-    ) -> &mut Self {\n+    ) -> Option<Assist> {\n         let label = AssistLabel { label: label.into(), id };\n         match &mut self.assist {\n             Assist::Unresolved(labels) => labels.push(label),\n@@ -100,10 +100,6 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n                 labels_actions.push((label, action));\n             }\n         }\n-        self\n-    }\n-\n-    pub(crate) fn build(self) -> Option<Assist> {\n         Some(self.assist)\n     }\n "}, {"sha": "764b17bd8dc48c886c5a7161df9f250678806db1", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -25,10 +25,10 @@ use crate::{Assist, AssistCtx, AssistId};\n //     y: u32,\n // }\n // ```\n-pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n-    ctx.add_action(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n+    ctx.add_assist(AssistId(\"add_derive\"), \"add `#[derive]`\", |edit| {\n         let derive_attr = nominal\n             .attrs()\n             .filter_map(|x| x.as_simple_call())\n@@ -44,9 +44,7 @@ pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         };\n         edit.target(nominal.syntax().text_range());\n         edit.set_cursor(offset)\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n // Insert `derive` after doc comments."}, {"sha": "ddda1a0f2c665a29f847525ada5a1b14dc2cf69a", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -21,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let x: i32 = 92;\n // }\n // ```\n-pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;\n@@ -47,11 +47,10 @@ pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n         return None;\n     }\n \n-    ctx.add_action(AssistId(\"add_explicit_type\"), \"add explicit type\", |edit| {\n+    ctx.add_assist(AssistId(\"add_explicit_type\"), \"add explicit type\", |edit| {\n         edit.target(pat_range);\n         edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n-    });\n-    ctx.build()\n+    })\n }\n \n /// Returns true if any type parameter is unknown"}, {"sha": "7da0cfd0d3261d9f8400801557af19d454d11961", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -27,10 +27,10 @@ use crate::{Assist, AssistCtx, AssistId};\n //\n // }\n // ```\n-pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n-    ctx.add_action(AssistId(\"add_impl\"), \"add impl\", |edit| {\n+    ctx.add_assist(AssistId(\"add_impl\"), \"add impl\", |edit| {\n         edit.target(nominal.syntax().text_range());\n         let type_params = nominal.type_param_list();\n         let start_offset = nominal.syntax().text_range().end();\n@@ -54,9 +54,7 @@ pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         edit.set_cursor(start_offset + TextUnit::of_str(&buf));\n         buf.push_str(\"\\n}\");\n         edit.insert(start_offset, buf);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "c522d6a5a71cc58292a06f18fde0b3423c925a4a", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -39,7 +39,7 @@ pub fn auto_import_text_edit(\n     }\n }\n \n-pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n@@ -52,38 +52,18 @@ pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         return None;\n     }\n \n-    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n-        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n-            ctx.add_action(\n-                AssistId(\"add_import\"),\n-                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n-                |edit| {\n-                    apply_auto_import(\n-                        item_list.syntax(),\n-                        &path,\n-                        &segments,\n-                        edit.text_edit_builder(),\n-                    );\n-                },\n-            );\n+    let module = path.syntax().ancestors().find_map(ast::Module::cast);\n+    let position = match module.and_then(|it| it.item_list()) {\n+        Some(item_list) => item_list.syntax().clone(),\n+        None => {\n+            let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n+            current_file.syntax().clone()\n         }\n-    } else {\n-        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n-        ctx.add_action(\n-            AssistId(\"add_import\"),\n-            format!(\"import {} in the current file\", fmt_segments(&segments)),\n-            |edit| {\n-                apply_auto_import(\n-                    current_file.syntax(),\n-                    &path,\n-                    &segments,\n-                    edit.text_edit_builder(),\n-                );\n-            },\n-        );\n-    }\n+    };\n \n-    ctx.build()\n+    ctx.add_assist(AssistId(\"add_import\"), format!(\"import {}\", fmt_segments(&segments)), |edit| {\n+        apply_auto_import(&position, &path, &segments, edit.text_edit_builder());\n+    })\n }\n \n fn collect_path_segments_raw(\n@@ -595,9 +575,10 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n+    use super::*;\n+\n     #[test]\n     fn test_auto_import_add_use_no_anchor() {\n         check_assist("}, {"sha": "41de239219fbdf19badebc5217c14f2f9af09ac3", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> O\n }\n \n fn add_missing_impl_members_inner(\n-    mut ctx: AssistCtx<impl HirDatabase>,\n+    ctx: AssistCtx<impl HirDatabase>,\n     mode: AddMissingImplMembersMode,\n     assist_id: &'static str,\n     label: &'static str,\n@@ -133,7 +133,7 @@ fn add_missing_impl_members_inner(\n         return None;\n     }\n \n-    ctx.add_action(AssistId(assist_id), label, |edit| {\n+    ctx.add_assist(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n         let items = missing_items\n             .into_iter()\n@@ -150,9 +150,7 @@ fn add_missing_impl_members_inner(\n \n         edit.replace_ast(impl_item_list, new_impl_item_list);\n         edit.set_cursor(cursor_position);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {"}, {"sha": "068da1774d98e544ce2aee16b029d680b4f1c002", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     if !(x == 4 && y) {}\n // }\n // ```\n-pub(crate) fn apply_demorgan(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n     let op = expr.op_kind()?;\n     let op_range = expr.op_token()?.text_range();\n@@ -39,13 +39,12 @@ pub(crate) fn apply_demorgan(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n     let not_lhs = undo_negation(lhs)?;\n     let not_rhs = undo_negation(rhs)?;\n \n-    ctx.add_action(AssistId(\"apply_demorgan\"), \"apply demorgan's law\", |edit| {\n+    ctx.add_assist(AssistId(\"apply_demorgan\"), \"apply demorgan's law\", |edit| {\n         edit.target(op_range);\n         edit.replace(op_range, opposite_op);\n         edit.replace(lhs_range, format!(\"!({}\", not_lhs));\n         edit.replace(rhs_range, format!(\"{})\", not_rhs));\n-    });\n-    ctx.build()\n+    })\n }\n \n // Return the opposite text for a given logical operator, if it makes sense"}, {"sha": "132c9dc1d750e243c560003baff8a81ce6e3e9aa", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n     add_vis(ctx)\n }\n \n-fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let item_keyword = ctx.token_at_offset().find(|leaf| match leaf.kind() {\n         T![fn] | T![mod] | T![struct] | T![enum] | T![trait] => true,\n         _ => false,\n@@ -57,13 +57,11 @@ fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(field.syntax()), ident.text_range())\n     };\n \n-    ctx.add_action(AssistId(\"change_visibility\"), \"make pub(crate)\", |edit| {\n+    ctx.add_assist(AssistId(\"change_visibility\"), \"make pub(crate)\", |edit| {\n         edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n fn vis_offset(node: &SyntaxNode) -> TextUnit {\n@@ -77,24 +75,20 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n+fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n-        ctx.add_action(AssistId(\"change_visibility\"), \"change to pub(crate)\", |edit| {\n+        return ctx.add_assist(AssistId(\"change_visibility\"), \"change to pub(crate)\", |edit| {\n             edit.target(vis.syntax().text_range());\n             edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n             edit.set_cursor(vis.syntax().text_range().start())\n         });\n-\n-        return ctx.build();\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        ctx.add_action(AssistId(\"change_visibility\"), \"change to pub\", |edit| {\n+        return ctx.add_assist(AssistId(\"change_visibility\"), \"change to pub\", |edit| {\n             edit.target(vis.syntax().text_range());\n             edit.replace(vis.syntax().text_range(), \"pub\");\n             edit.set_cursor(vis.syntax().text_range().start());\n         });\n-\n-        return ctx.build();\n     }\n     None\n }"}, {"sha": "e839d831e06f66cef51d1e43145b6b4bea9d4921", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -35,7 +35,7 @@ use crate::{\n //     bar();\n // }\n // ```\n-pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let expr = if_expr.condition()?.expr()?;\n     let then_block = if_expr.then_branch()?.block()?;\n@@ -75,7 +75,7 @@ pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) ->\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n     let cursor_position = ctx.frange.range.start();\n \n-    ctx.add_action(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n+    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"convert to guarded return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n         let new_if_expr =\n             if_indent_level.increase_indent(make::if_expression(&expr, early_expression));\n@@ -105,8 +105,7 @@ pub(crate) fn convert_to_guarded_return(mut ctx: AssistCtx<impl HirDatabase>) ->\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_ast(parent_block, ast::Block::cast(new_block).unwrap());\n         edit.set_cursor(cursor_position);\n-    });\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "2b74f355c6ab5ada8d9fd6767ed15d4b27d47045", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.find_node_at_offset::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n \n@@ -53,7 +53,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     };\n     let variant_list = enum_def.variant_list()?;\n \n-    ctx.add_action(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n+    ctx.add_assist(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n         let indent_level = IndentLevel::from_node(match_arm_list.syntax());\n \n         let new_arm_list = {\n@@ -67,9 +67,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n         edit.target(match_expr.syntax().text_range());\n         edit.set_cursor(expr.syntax().text_range().start());\n         edit.replace_ast(match_arm_list, new_arm_list);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n fn is_trivial(arm: &ast::MatchArm) -> bool {"}, {"sha": "386045eb0a05f3699819dd76167626c248d65183", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -18,7 +18,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let _ = 2 + 90;\n // }\n // ```\n-pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_binexpr(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();\n     let rhs = expr.rhs()?.syntax().clone();\n@@ -34,16 +34,14 @@ pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         return None;\n     }\n \n-    ctx.add_action(AssistId(\"flip_binexpr\"), \"flip binary expression\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_binexpr\"), \"flip binary expression\", |edit| {\n         edit.target(op_range);\n         if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);\n         }\n         edit.replace(lhs.text_range(), rhs.text());\n         edit.replace(rhs.text_range(), lhs.text());\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n enum FlipAction {"}, {"sha": "9be1c1dc6997b0f769c8e2e7cb3978d96d5882c5", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -18,7 +18,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     ((3, 4), (1, 2));\n // }\n // ```\n-pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.find_token_at_offset(T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;\n@@ -29,13 +29,11 @@ pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         return None;\n     }\n \n-    ctx.add_action(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n         edit.target(comma.text_range());\n         edit.replace(prev.text_range(), next.to_string());\n         edit.replace(next.text_range(), prev.to_string());\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "6017b39dd84b3678f7ddf656fcbb5f23b769613b", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -18,7 +18,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // fn foo<T: Copy + Clone>() { }\n // ```\n-pub(crate) fn flip_trait_bound(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_trait_bound(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     // We want to replicate the behavior of `flip_binexpr` by only suggesting\n     // the assist when the cursor is on a `+`\n     let plus = ctx.find_token_at_offset(T![+])?;\n@@ -33,13 +33,11 @@ pub(crate) fn flip_trait_bound(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n         non_trivia_sibling(plus.clone().into(), Direction::Next)?,\n     );\n \n-    ctx.add_action(AssistId(\"flip_trait_bound\"), \"flip trait bound\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"flip trait bound\", |edit| {\n         edit.target(plus.text_range());\n         edit.replace(before.text_range(), after.to_string());\n         edit.replace(after.text_range(), before.to_string());\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "f439105748971b51f2b2647c10f05142cc0d63ea", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -23,7 +23,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     (1 + 2) * 4;\n // }\n // ```\n-pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,\n@@ -93,7 +93,7 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n     let init_str = initializer_expr.syntax().text().to_string();\n     let init_in_paren = format!(\"({})\", &init_str);\n \n-    ctx.add_action(\n+    ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n         \"inline local variable\",\n         move |edit: &mut AssistBuilder| {\n@@ -107,9 +107,7 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n             }\n             edit.set_cursor(delete_range.start())\n         },\n-    );\n-\n-    ctx.build()\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "0623d44759e5dd3d11d0fb3d04176ed93d036067", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -28,7 +28,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     var_name * 4;\n // }\n // ```\n-pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     if ctx.frange.range.is_empty() {\n         return None;\n     }\n@@ -43,7 +43,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.add_action(AssistId(\"introduce_variable\"), \"introduce variable\", move |edit| {\n+    ctx.add_assist(AssistId(\"introduce_variable\"), \"introduce variable\", move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {\n@@ -88,9 +88,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             }\n         }\n         edit.set_cursor(anchor_stmt.text_range().start() + cursor_offset);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n /// Check whether the node is a valid expression which can be extracted to a variable."}, {"sha": "e9f2cae91d3514fbc3de646a5f5ff9779e98c085", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -26,7 +26,7 @@ use ra_syntax::ast::{AstNode, MatchArm};\n //     }\n // }\n // ```\n-pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn merge_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let current_arm = ctx.find_node_at_offset::<MatchArm>()?;\n \n     // We check if the following match arm matches this one. We could, but don't,\n@@ -52,7 +52,7 @@ pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n \n     let cursor_to_end = current_arm.syntax().text_range().end() - ctx.frange.range.start();\n \n-    ctx.add_action(AssistId(\"merge_match_arms\"), \"merge match arms\", |edit| {\n+    ctx.add_assist(AssistId(\"merge_match_arms\"), \"merge match arms\", |edit| {\n         fn contains_placeholder(a: &MatchArm) -> bool {\n             a.pats().any(|x| match x {\n                 ra_syntax::ast::Pat::PlaceholderPat(..) => true,\n@@ -80,9 +80,7 @@ pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n         edit.target(current_arm.syntax().text_range());\n         edit.replace(TextRange::from_to(start, end), arm);\n         edit.set_cursor(start + offset);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "3145d7625de6095a0533cf92984ccbd86122bc8e", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -22,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     f(x)\n // }\n // ```\n-pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let type_param_list = ctx.find_node_at_offset::<ast::TypeParamList>()?;\n \n     let mut type_params = type_param_list.type_params();\n@@ -46,38 +46,30 @@ pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>)\n         _ => return None,\n     };\n \n-    ctx.add_action(\n-        AssistId(\"move_bounds_to_where_clause\"),\n-        \"move_bounds_to_where_clause\",\n-        |edit| {\n-            let new_params = type_param_list\n-                .type_params()\n-                .filter(|it| it.type_bound_list().is_some())\n-                .map(|type_param| {\n-                    let without_bounds = type_param.remove_bounds();\n-                    (type_param, without_bounds)\n-                });\n-\n-            let new_type_param_list = edit::replace_descendants(&type_param_list, new_params);\n-            edit.replace_ast(type_param_list.clone(), new_type_param_list);\n-\n-            let where_clause = {\n-                let predicates = type_param_list.type_params().filter_map(build_predicate);\n-                make::where_clause(predicates)\n-            };\n-\n-            let to_insert = match anchor.prev_sibling_or_token() {\n-                Some(ref elem) if elem.kind() == WHITESPACE => {\n-                    format!(\"{} \", where_clause.syntax())\n-                }\n-                _ => format!(\" {}\", where_clause.syntax()),\n-            };\n-            edit.insert(anchor.text_range().start(), to_insert);\n-            edit.target(type_param_list.syntax().text_range());\n-        },\n-    );\n-\n-    ctx.build()\n+    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"move_bounds_to_where_clause\", |edit| {\n+        let new_params = type_param_list\n+            .type_params()\n+            .filter(|it| it.type_bound_list().is_some())\n+            .map(|type_param| {\n+                let without_bounds = type_param.remove_bounds();\n+                (type_param, without_bounds)\n+            });\n+\n+        let new_type_param_list = edit::replace_descendants(&type_param_list, new_params);\n+        edit.replace_ast(type_param_list.clone(), new_type_param_list);\n+\n+        let where_clause = {\n+            let predicates = type_param_list.type_params().filter_map(build_predicate);\n+            make::where_clause(predicates)\n+        };\n+\n+        let to_insert = match anchor.prev_sibling_or_token() {\n+            Some(ref elem) if elem.kind() == WHITESPACE => format!(\"{} \", where_clause.syntax()),\n+            _ => format!(\" {}\", where_clause.syntax()),\n+        };\n+        edit.insert(anchor.text_range().start(), to_insert);\n+        edit.target(type_param_list.syntax().text_range());\n+    })\n }\n \n fn build_predicate(param: ast::TypeParam) -> Option<ast::WherePred> {"}, {"sha": "b49ec6172ac35dd6d536c29f2db2dc9abf513ba8", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -32,7 +32,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_arm = ctx.find_node_at_offset::<MatchArm>()?;\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n@@ -41,7 +41,7 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n     let arm_expr = match_arm.expr()?;\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n-    ctx.add_action(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n+    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n         edit.target(guard.syntax().text_range());\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {\n@@ -61,8 +61,7 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n         edit.set_cursor(\n             arm_expr.syntax().text_range().start() + TextUnit::from(3) - offseting_amount,\n         );\n-    });\n-    ctx.build()\n+    })\n }\n \n // Assist: move_arm_cond_to_match_guard\n@@ -90,7 +89,7 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n //     }\n // }\n // ```\n-pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let last_match_pat = match_arm.pats().last()?;\n \n@@ -110,7 +109,7 @@ pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>)\n \n     let buf = format!(\" if {}\", cond.syntax().text());\n \n-    ctx.add_action(\n+    ctx.add_assist(\n         AssistId(\"move_arm_cond_to_match_guard\"),\n         \"move condition to match guard\",\n         |edit| {\n@@ -127,8 +126,7 @@ pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>)\n             edit.insert(last_match_pat.syntax().text_range().end(), buf);\n             edit.set_cursor(last_match_pat.syntax().text_range().end() + TextUnit::from(1));\n         },\n-    );\n-    ctx.build()\n+    )\n }\n \n #[cfg(test)]"}, {"sha": "86bbaeeeff78790559a0860cfb7680b17749eefc", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -22,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     r#\"Hello, World!\"#;\n // }\n // ```\n-pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING)?;\n     let text = token.text().as_str();\n     let usual_string_range = find_usual_string_range(text)?;\n@@ -41,16 +41,15 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     if error.is_err() {\n         return None;\n     }\n-    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n         edit.target(token.text_range());\n         let max_hash_streak = count_hashes(&unescaped);\n         let mut hashes = String::with_capacity(max_hash_streak + 1);\n         for _ in 0..hashes.capacity() {\n             hashes.push('#');\n         }\n         edit.replace(token.text_range(), format!(\"r{}\\\"{}\\\"{}\", hashes, unescaped, hashes));\n-    });\n-    ctx.build()\n+    })\n }\n \n // Assist: make_usual_string\n@@ -68,20 +67,19 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n //     \"Hello, \\\"World!\\\"\";\n // }\n // ```\n-pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     let usual_string_range = find_usual_string_range(text)?;\n-    ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\n+    ctx.add_assist(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\n         edit.target(token.text_range());\n         // parse inside string to escape `\"`\n         let start_of_inside = usual_string_range.start().to_usize() + 1;\n         let end_of_inside = usual_string_range.end().to_usize();\n         let inside_str = &text[start_of_inside..end_of_inside];\n         let escaped = inside_str.escape_default().to_string();\n         edit.replace(token.text_range(), format!(\"\\\"{}\\\"\", escaped));\n-    });\n-    ctx.build()\n+    })\n }\n \n // Assist: add_hash\n@@ -99,14 +97,13 @@ pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n //     r##\"Hello, World!\"##;\n // }\n // ```\n-pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n-    ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n         edit.target(token.text_range());\n         edit.insert(token.text_range().start() + TextUnit::of_char('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n-    });\n-    ctx.build()\n+    })\n }\n \n // Assist: remove_hash\n@@ -124,14 +121,14 @@ pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n //     r\"Hello, World!\";\n // }\n // ```\n-pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     if text.starts_with(\"r\\\"\") {\n         // no hash to remove\n         return None;\n     }\n-    ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n         edit.target(token.text_range());\n         let result = &text[2..text.len() - 1];\n         let result = if result.starts_with(\"\\\"\") {\n@@ -142,8 +139,7 @@ pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n             result.to_owned()\n         };\n         edit.replace(token.text_range(), format!(\"r{}\", result));\n-    });\n-    ctx.build()\n+    })\n }\n \n fn count_hashes(s: &str) -> usize {"}, {"sha": "aedf8747f22a79dc2d87ee2cab1f782b626c202d", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -21,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     92;\n // }\n // ```\n-pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n \n     if !is_valid_macrocall(&macro_call, \"dbg\")? {\n@@ -58,13 +58,11 @@ pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         text.slice(without_parens).to_string()\n     };\n \n-    ctx.add_action(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {\n+    ctx.add_assist(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {\n         edit.target(macro_call.syntax().text_range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n /// Verifies that the given macro_call actually matches the given name"}, {"sha": "dff84d86516cba7aaaa26c8ccc399bf3190c7a5a", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n     let pat = cond.pat()?;\n@@ -42,14 +42,12 @@ pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) ->\n         ast::ElseBranch::IfExpr(_) => return None,\n     };\n \n-    ctx.add_action(AssistId(\"replace_if_let_with_match\"), \"replace with match\", |edit| {\n+    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n         edit.set_cursor(if_expr.syntax().text_range().start())\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n fn build_match_expr("}, {"sha": "5f8d6b0be1ff11b9a3d7359de8af24c8fcd51377", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf309b6a5f2d51e9509568ab82446cc3eae29f94/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=cf309b6a5f2d51e9509568ab82446cc3eae29f94", "patch": "@@ -16,7 +16,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // use std::{collections::HashMap};\n // ```\n-pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let colon_colon = ctx.find_token_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?;\n     let top_path = successors(Some(path), |it| it.parent_path()).last()?;\n@@ -32,14 +32,12 @@ pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         None => top_path.syntax().text_range().end(),\n     };\n \n-    ctx.add_action(AssistId(\"split_import\"), \"split import\", |edit| {\n+    ctx.add_assist(AssistId(\"split_import\"), \"split import\", |edit| {\n         edit.target(colon_colon.text_range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");\n         edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));\n-    });\n-\n-    ctx.build()\n+    })\n }\n \n #[cfg(test)]"}]}