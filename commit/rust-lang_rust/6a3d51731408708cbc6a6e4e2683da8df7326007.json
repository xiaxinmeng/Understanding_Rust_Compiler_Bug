{"sha": "6a3d51731408708cbc6a6e4e2683da8df7326007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2Q1MTczMTQwODcwOGNiYzZhNmU0ZTI2ODNkYThkZjczMjYwMDc=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-08-24T16:54:40Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-08-24T16:54:40Z"}, "message": "Modifies how Arg, Arm, Field, FieldPattern and Variant are visited\n\nPart of the necessary work to accomplish #63468.", "tree": {"sha": "e57ad90ed14af52efe942e2280640e5ed6dd8c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57ad90ed14af52efe942e2280640e5ed6dd8c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3d51731408708cbc6a6e4e2683da8df7326007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3d51731408708cbc6a6e4e2683da8df7326007", "html_url": "https://github.com/rust-lang/rust/commit/6a3d51731408708cbc6a6e4e2683da8df7326007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3d51731408708cbc6a6e4e2683da8df7326007/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478464570e60523adc6d303577d1782229ca1f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/478464570e60523adc6d303577d1782229ca1f93", "html_url": "https://github.com/rust-lang/rust/commit/478464570e60523adc6d303577d1782229ca1f93"}], "stats": {"total": 292, "additions": 147, "deletions": 145}, "files": [{"sha": "17bcb1d0859683af3106c08dce35a1a49c9cf6b4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -154,20 +154,19 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         });\n     }\n \n-    fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n+    fn visit_variant(&mut self, v: &'a Variant) {\n         let def = self.create_def(v.id,\n                                   DefPathData::TypeNs(v.ident.as_interned_str()),\n                                   v.span);\n         self.with_parent(def, |this| {\n             if let Some(ctor_hir_id) = v.data.ctor_id() {\n                 this.create_def(ctor_hir_id, DefPathData::Ctor, v.span);\n             }\n-            visit::walk_variant(this, v, g, item_id)\n+            visit::walk_variant(this, v)\n         });\n     }\n \n-    fn visit_variant_data(&mut self, data: &'a VariantData, _: Ident,\n-                          _: &'a Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, data: &'a VariantData) {\n         for (index, field) in data.fields().iter().enumerate() {\n             let name = field.ident.map(|ident| ident.name)\n                 .unwrap_or_else(|| sym::integer(index));"}, {"sha": "8126db1429247c57d68148642fb642c24a9a9907", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -1040,13 +1040,13 @@ for LateContextAndPass<'a, 'tcx, T> {\n \n     fn visit_variant_data(&mut self,\n                         s: &'tcx hir::VariantData,\n-                        name: ast::Name,\n-                        g: &'tcx hir::Generics,\n-                        item_id: hir::HirId,\n+                        _: ast::Name,\n+                        _: &'tcx hir::Generics,\n+                        _: hir::HirId,\n                         _: Span) {\n-        lint_callback!(self, check_struct_def, s, name, g, item_id);\n+        lint_callback!(self, check_struct_def, s);\n         hir_visit::walk_struct_def(self, s);\n-        lint_callback!(self, check_struct_def_post, s, name, g, item_id);\n+        lint_callback!(self, check_struct_def_post, s);\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField) {\n@@ -1061,9 +1061,9 @@ for LateContextAndPass<'a, 'tcx, T> {\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n-            lint_callback!(cx, check_variant, v, g);\n+            lint_callback!(cx, check_variant, v);\n             hir_visit::walk_variant(cx, v, g, item_id);\n-            lint_callback!(cx, check_variant_post, v, g);\n+            lint_callback!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -1214,18 +1214,13 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_fn_post, fk, decl, span, id);\n     }\n \n-    fn visit_variant_data(&mut self,\n-                        s: &'a ast::VariantData,\n-                        ident: ast::Ident,\n-                        g: &'a ast::Generics,\n-                        item_id: ast::NodeId,\n-                        _: Span) {\n-        run_early_pass!(self, check_struct_def, s, ident, g, item_id);\n+    fn visit_variant_data(&mut self, s: &'a ast::VariantData) {\n+        run_early_pass!(self, check_struct_def, s);\n         if let Some(ctor_hir_id) = s.ctor_id() {\n             self.check_id(ctor_hir_id);\n         }\n         ast_visit::walk_struct_def(self, s);\n-        run_early_pass!(self, check_struct_def_post, s, ident, g, item_id);\n+        run_early_pass!(self, check_struct_def_post, s);\n     }\n \n     fn visit_struct_field(&mut self, s: &'a ast::StructField) {\n@@ -1235,11 +1230,11 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         })\n     }\n \n-    fn visit_variant(&mut self, v: &'a ast::Variant, g: &'a ast::Generics, item_id: ast::NodeId) {\n-        self.with_lint_attrs(item_id, &v.attrs, |cx| {\n-            run_early_pass!(cx, check_variant, v, g);\n-            ast_visit::walk_variant(cx, v, g, item_id);\n-            run_early_pass!(cx, check_variant_post, v, g);\n+    fn visit_variant(&mut self, v: &'a ast::Variant) {\n+        self.with_lint_attrs(v.id, &v.attrs, |cx| {\n+            run_early_pass!(cx, check_variant, v);\n+            ast_visit::walk_variant(cx, v);\n+            run_early_pass!(cx, check_variant_post, v);\n         })\n     }\n "}, {"sha": "7e2707b98d50a655396044c2e6956022f94964e2", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -248,21 +248,11 @@ macro_rules! late_lint_methods {\n             fn check_trait_item_post(a: &$hir hir::TraitItem);\n             fn check_impl_item(a: &$hir hir::ImplItem);\n             fn check_impl_item_post(a: &$hir hir::ImplItem);\n-            fn check_struct_def(\n-                a: &$hir hir::VariantData,\n-                b: ast::Name,\n-                c: &$hir hir::Generics,\n-                d: hir::HirId\n-            );\n-            fn check_struct_def_post(\n-                a: &$hir hir::VariantData,\n-                b: ast::Name,\n-                c: &$hir hir::Generics,\n-                d: hir::HirId\n-            );\n+            fn check_struct_def(a: &$hir hir::VariantData);\n+            fn check_struct_def_post(a: &$hir hir::VariantData);\n             fn check_struct_field(a: &$hir hir::StructField);\n-            fn check_variant(a: &$hir hir::Variant, b: &$hir hir::Generics);\n-            fn check_variant_post(a: &$hir hir::Variant, b: &$hir hir::Generics);\n+            fn check_variant(a: &$hir hir::Variant);\n+            fn check_variant_post(a: &$hir hir::Variant);\n             fn check_lifetime(a: &$hir hir::Lifetime);\n             fn check_path(a: &$hir hir::Path, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n@@ -395,21 +385,11 @@ macro_rules! early_lint_methods {\n             fn check_trait_item_post(a: &ast::TraitItem);\n             fn check_impl_item(a: &ast::ImplItem);\n             fn check_impl_item_post(a: &ast::ImplItem);\n-            fn check_struct_def(\n-                a: &ast::VariantData,\n-                b: ast::Ident,\n-                c: &ast::Generics,\n-                d: ast::NodeId\n-            );\n-            fn check_struct_def_post(\n-                a: &ast::VariantData,\n-                b: ast::Ident,\n-                c: &ast::Generics,\n-                d: ast::NodeId\n-            );\n+            fn check_struct_def(a: &ast::VariantData);\n+            fn check_struct_def_post(a: &ast::VariantData);\n             fn check_struct_field(a: &ast::StructField);\n-            fn check_variant(a: &ast::Variant, b: &ast::Generics);\n-            fn check_variant_post(a: &ast::Variant, b: &ast::Generics);\n+            fn check_variant(a: &ast::Variant);\n+            fn check_variant_post(a: &ast::Variant);\n             fn check_lifetime(a: &ast::Lifetime);\n             fn check_path(a: &ast::Path, b: ast::NodeId);\n             fn check_attribute(a: &ast::Attribute);"}, {"sha": "d3c94060e274aec697824fa83b1d5073813cc468", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant, _: &hir::Generics) {\n+    fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant) {\n         self.check_missing_docs_attrs(cx,\n                                       Some(v.id),\n                                       &v.attrs,"}, {"sha": "bb6119d0ff2aa0fbdb7eb701ebb148ea6d592456", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -146,7 +146,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n         }\n     }\n \n-    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant, _: &ast::Generics) {\n+    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant) {\n         self.check_case(cx, \"variant\", &v.ident);\n     }\n \n@@ -350,9 +350,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         &mut self,\n         cx: &LateContext<'_, '_>,\n         s: &hir::VariantData,\n-        _: ast::Name,\n-        _: &hir::Generics,\n-        _: hir::HirId,\n     ) {\n         for sf in s.fields() {\n             self.check_snake_case(cx, \"structure field\", &sf.ident);"}, {"sha": "5b78727fdd5ad133fff2905eee7a35a299a63053", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -813,8 +813,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_poly_trait_ref(self, t, m);\n     }\n \n-    fn visit_variant_data(&mut self, s: &'a VariantData, _: Ident,\n-                          _: &'a Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, s: &'a VariantData) {\n         self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n     }\n "}, {"sha": "7e03df5b75bdc38b2bd26ae9bb701ffb649f756e", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -334,12 +334,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_struct_field(self, s)\n     }\n \n-    fn visit_variant(&mut self,\n-                     v: &'v ast::Variant,\n-                     g: &'v ast::Generics,\n-                     item_id: NodeId) {\n+    fn visit_variant(&mut self, v: &'v ast::Variant) {\n         self.record(\"Variant\", Id::None, v);\n-        ast_visit::walk_variant(self, v, g, item_id)\n+        ast_visit::walk_variant(self, v)\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &'v ast::Lifetime) {"}, {"sha": "92b48ed62cdce23520c5dfe2b09e71f062c462c3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -1210,9 +1210,13 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_generic_params(&mut self, params: &mut Vec<ast::GenericParam>) {\n-        self.cfg.configure_generic_params(params);\n-        noop_visit_generic_params(params, self);\n+   fn flat_map_generic_param(\n+       &mut self,\n+       param: ast::GenericParam\n+    ) -> SmallVec<[ast::GenericParam; 1]>\n+    {\n+        let param = configure!(self, param);\n+        noop_flat_map_generic_param(param, self)\n     }\n \n     fn visit_attribute(&mut self, at: &mut ast::Attribute) {"}, {"sha": "414d234e4341929e0a82e8b2c9d09344545ce620", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 77, "deletions": 49, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -98,8 +98,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_fn_header(header, self);\n     }\n \n-    fn visit_struct_field(&mut self, sf: &mut StructField) {\n-        noop_visit_struct_field(sf, self);\n+    fn flat_map_struct_field(&mut self, sf: StructField) -> SmallVec<[StructField; 1]> {\n+        noop_flat_map_struct_field(sf, self)\n     }\n \n     fn visit_item_kind(&mut self, i: &mut ItemKind) {\n@@ -130,8 +130,8 @@ pub trait MutVisitor: Sized {\n         noop_flat_map_stmt(s, self)\n     }\n \n-    fn visit_arm(&mut self, a: &mut Arm) {\n-        noop_visit_arm(a, self);\n+    fn flat_map_arm(&mut self, arm: Arm) -> SmallVec<[Arm; 1]> {\n+        noop_flat_map_arm(arm, self)\n     }\n \n     fn visit_pat(&mut self, p: &mut P<Pat>) {\n@@ -174,8 +174,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_foreign_mod(nm, self);\n     }\n \n-    fn visit_variant(&mut self, v: &mut Variant) {\n-        noop_visit_variant(v, self);\n+    fn flat_map_variant(&mut self, v: Variant) -> SmallVec<[Variant; 1]>  {\n+        noop_flat_map_variant(v, self)\n     }\n \n     fn visit_ident(&mut self, i: &mut Ident) {\n@@ -225,8 +225,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_attribute(at, self);\n     }\n \n-    fn visit_arg(&mut self, a: &mut Arg) {\n-        noop_visit_arg(a, self);\n+    fn flat_map_arg(&mut self, arg: Arg) -> SmallVec<[Arg; 1]> {\n+        noop_flat_map_arg(arg, self)\n     }\n \n     fn visit_generics(&mut self, generics: &mut Generics) {\n@@ -245,12 +245,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_variant_data(vdata, self);\n     }\n \n-    fn visit_generic_param(&mut self, param: &mut GenericParam) {\n-        noop_visit_generic_param(param, self);\n-    }\n-\n-    fn visit_generic_params(&mut self, params: &mut Vec<GenericParam>) {\n-        noop_visit_generic_params(params, self);\n+    fn flat_map_generic_param(&mut self, param: GenericParam) -> SmallVec<[GenericParam; 1]> {\n+        noop_flat_map_generic_param(param, self)\n     }\n \n     fn visit_tt(&mut self, tt: &mut TokenTree) {\n@@ -277,8 +273,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_mt(mt, self);\n     }\n \n-    fn visit_field(&mut self, field: &mut Field) {\n-        noop_visit_field(field, self);\n+    fn flat_map_field(&mut self, f: Field) -> SmallVec<[Field; 1]> {\n+        noop_flat_map_field(f, self)\n     }\n \n     fn visit_where_clause(&mut self, where_clause: &mut WhereClause) {\n@@ -300,6 +296,10 @@ pub trait MutVisitor: Sized {\n     fn visit_span(&mut self, _sp: &mut Span) {\n         // Do nothing.\n     }\n+\n+    fn flat_map_field_pattern(&mut self, fp: FieldPat) -> SmallVec<[FieldPat; 1]> {\n+        noop_flat_map_field_pattern(fp, self)\n+    }\n }\n \n /// Use a map-style function (`FnOnce(T) -> T`) to overwrite a `&mut T`. Useful\n@@ -362,6 +362,26 @@ pub fn visit_method_sig<T: MutVisitor>(MethodSig { header, decl }: &mut MethodSi\n     vis.visit_fn_decl(decl);\n }\n \n+pub fn noop_flat_map_field_pattern<T: MutVisitor>(\n+    mut fp: FieldPat,\n+    vis: &mut T,\n+) -> SmallVec<[FieldPat; 1]> {\n+    let FieldPat {\n+        attrs,\n+        id,\n+        ident,\n+        is_shorthand: _,\n+        pat,\n+        span,\n+    } = &mut fp;\n+    vis.visit_id(id);\n+    vis.visit_ident(ident);\n+    vis.visit_pat(pat);\n+    vis.visit_span(span);\n+    visit_thin_attrs(attrs, vis);\n+    smallvec![fp]\n+}\n+\n pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n     let UseTree { prefix, kind, span } = use_tree;\n     vis.visit_path(prefix);\n@@ -382,16 +402,18 @@ pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arm<T: MutVisitor>(\n-    Arm { attrs, pats, guard, body, span, id }: &mut Arm,\n+pub fn noop_flat_map_arm<T: MutVisitor>(\n+    mut arm: Arm,\n     vis: &mut T,\n-) {\n+) -> SmallVec<[Arm; 1]> {\n+    let Arm { attrs, pats, guard, body, span, id } = &mut arm;\n     visit_attrs(attrs, vis);\n     vis.visit_id(id);\n     visit_vec(pats, |pat| vis.visit_pat(pat));\n     visit_opt(guard, |guard| vis.visit_expr(guard));\n     vis.visit_expr(body);\n     vis.visit_span(span);\n+    smallvec![arm]\n }\n \n pub fn noop_visit_ty_constraint<T: MutVisitor>(\n@@ -425,7 +447,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n         }\n         TyKind::BareFn(bft) => {\n             let BareFnTy { unsafety: _, abi: _, generic_params, decl } = bft.deref_mut();\n-            vis.visit_generic_params(generic_params);\n+            generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_fn_decl(decl);\n         }\n         TyKind::Tup(tys) => visit_vec(tys, |ty| vis.visit_ty(ty)),\n@@ -455,14 +477,17 @@ pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis:\n     items.flat_map_in_place(|item| vis.flat_map_foreign_item(item));\n }\n \n-pub fn noop_visit_variant<T: MutVisitor>(variant: &mut Variant, vis: &mut T) {\n-    let Variant { ident, attrs, id, data, disr_expr, span } = variant;\n+pub fn noop_flat_map_variant<T: MutVisitor>(mut variant: Variant, vis: &mut T)\n+    -> SmallVec<[Variant; 1]>\n+{\n+    let Variant { ident, attrs, id, data, disr_expr, span } = &mut variant;\n     vis.visit_ident(ident);\n     visit_attrs(attrs, vis);\n     vis.visit_id(id);\n     vis.visit_variant_data(data);\n     visit_opt(disr_expr, |disr_expr| vis.visit_anon_const(disr_expr));\n     vis.visit_span(span);\n+    smallvec![variant]\n }\n \n pub fn noop_visit_ident<T: MutVisitor>(Ident { name: _, span }: &mut Ident, vis: &mut T) {\n@@ -562,12 +587,14 @@ pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arg<T: MutVisitor>(Arg { attrs, id, pat, span, ty }: &mut Arg, vis: &mut T) {\n+pub fn noop_flat_map_arg<T: MutVisitor>(mut arg: Arg, vis: &mut T) -> SmallVec<[Arg; 1]> {\n+    let Arg { attrs, id, pat, span, ty } = &mut arg;\n     vis.visit_id(id);\n     visit_thin_attrs(attrs, vis);\n     vis.visit_pat(pat);\n     vis.visit_span(span);\n     vis.visit_ty(ty);\n+    smallvec![arg]\n }\n \n pub fn noop_visit_tt<T: MutVisitor>(tt: &mut TokenTree, vis: &mut T) {\n@@ -693,7 +720,7 @@ pub fn noop_visit_asyncness<T: MutVisitor>(asyncness: &mut IsAsync, vis: &mut T)\n \n pub fn noop_visit_fn_decl<T: MutVisitor>(decl: &mut P<FnDecl>, vis: &mut T) {\n     let FnDecl { inputs, output, c_variadic: _ } = decl.deref_mut();\n-    visit_vec(inputs, |input| vis.visit_arg(input));\n+    inputs.flat_map_in_place(|arg| vis.flat_map_arg(arg));\n     match output {\n         FunctionRetTy::Default(span) => vis.visit_span(span),\n         FunctionRetTy::Ty(ty) => vis.visit_ty(ty),\n@@ -707,8 +734,12 @@ pub fn noop_visit_param_bound<T: MutVisitor>(pb: &mut GenericBound, vis: &mut T)\n     }\n }\n \n-pub fn noop_visit_generic_param<T: MutVisitor>(param: &mut GenericParam, vis: &mut T) {\n-    let GenericParam { id, ident, attrs, bounds, kind } = param;\n+pub fn noop_flat_map_generic_param<T: MutVisitor>(\n+    mut param: GenericParam,\n+    vis: &mut T\n+) -> SmallVec<[GenericParam; 1]>\n+{\n+    let GenericParam { id, ident, attrs, bounds, kind } = &mut param;\n     vis.visit_id(id);\n     vis.visit_ident(ident);\n     visit_thin_attrs(attrs, vis);\n@@ -722,10 +753,7 @@ pub fn noop_visit_generic_param<T: MutVisitor>(param: &mut GenericParam, vis: &m\n             vis.visit_ty(ty);\n         }\n     }\n-}\n-\n-pub fn noop_visit_generic_params<T: MutVisitor>(params: &mut Vec<GenericParam>, vis: &mut T){\n-    visit_vec(params, |param| vis.visit_generic_param(param));\n+    smallvec![param]\n }\n \n pub fn noop_visit_label<T: MutVisitor>(Label { ident }: &mut Label, vis: &mut T) {\n@@ -739,7 +767,7 @@ fn noop_visit_lifetime<T: MutVisitor>(Lifetime { id, ident }: &mut Lifetime, vis\n \n pub fn noop_visit_generics<T: MutVisitor>(generics: &mut Generics, vis: &mut T) {\n     let Generics { params, where_clause, span } = generics;\n-    vis.visit_generic_params(params);\n+    params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n     vis.visit_where_clause(where_clause);\n     vis.visit_span(span);\n }\n@@ -755,7 +783,7 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n         WherePredicate::BoundPredicate(bp) => {\n             let WhereBoundPredicate { span, bound_generic_params, bounded_ty, bounds } = bp;\n             vis.visit_span(span);\n-            vis.visit_generic_params(bound_generic_params);\n+            bound_generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_ty(bounded_ty);\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n@@ -777,9 +805,11 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n \n pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut T) {\n     match vdata {\n-        VariantData::Struct(fields, ..) => visit_vec(fields, |field| vis.visit_struct_field(field)),\n+        VariantData::Struct(fields, ..) => {\n+            fields.flat_map_in_place(|field| vis.flat_map_struct_field(field));\n+        },\n         VariantData::Tuple(fields, id) => {\n-            visit_vec(fields, |field| vis.visit_struct_field(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_struct_field(field));\n             vis.visit_id(id);\n         },\n         VariantData::Unit(id) => vis.visit_id(id),\n@@ -793,28 +823,32 @@ pub fn noop_visit_trait_ref<T: MutVisitor>(TraitRef { path, ref_id }: &mut Trait\n \n pub fn noop_visit_poly_trait_ref<T: MutVisitor>(p: &mut PolyTraitRef, vis: &mut T) {\n     let PolyTraitRef { bound_generic_params, trait_ref, span } = p;\n-    vis.visit_generic_params(bound_generic_params);\n+    bound_generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n     vis.visit_trait_ref(trait_ref);\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_struct_field<T: MutVisitor>(f: &mut StructField, visitor: &mut T) {\n-    let StructField { span, ident, vis, id, ty, attrs } = f;\n+pub fn noop_flat_map_struct_field<T: MutVisitor>(mut sf: StructField, visitor: &mut T)\n+    -> SmallVec<[StructField; 1]>\n+{\n+    let StructField { span, ident, vis, id, ty, attrs } = &mut sf;\n     visitor.visit_span(span);\n     visit_opt(ident, |ident| visitor.visit_ident(ident));\n     visitor.visit_vis(vis);\n     visitor.visit_id(id);\n     visitor.visit_ty(ty);\n     visit_attrs(attrs, visitor);\n+    smallvec![sf]\n }\n \n-pub fn noop_visit_field<T: MutVisitor>(f: &mut Field, vis: &mut T) {\n-    let Field { ident, expr, span, is_shorthand: _, attrs, id } = f;\n+pub fn noop_flat_map_field<T: MutVisitor>(mut f: Field, vis: &mut T) -> SmallVec<[Field; 1]> {\n+    let Field { ident, expr, span, is_shorthand: _, attrs, id } = &mut f;\n     vis.visit_ident(ident);\n     vis.visit_expr(expr);\n     vis.visit_id(id);\n     vis.visit_span(span);\n     visit_thin_attrs(attrs, vis);\n+    smallvec![f]\n }\n \n pub fn noop_visit_mt<T: MutVisitor>(MutTy { ty, mutbl: _ }: &mut MutTy, vis: &mut T) {\n@@ -858,7 +892,7 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n             vis.visit_generics(generics);\n         }\n         ItemKind::Enum(EnumDef { variants }, generics) => {\n-            visit_vec(variants, |variant| vis.visit_variant(variant));\n+            variants.flat_map_in_place(|variant| vis.flat_map_variant(variant));\n             vis.visit_generics(generics);\n         }\n         ItemKind::Struct(variant_data, generics) |\n@@ -1042,13 +1076,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n         }\n         PatKind::Struct(path, fields, _etc) => {\n             vis.visit_path(path);\n-            for FieldPat { ident, pat, is_shorthand: _, attrs, id, span } in fields {\n-                vis.visit_ident(ident);\n-                vis.visit_id(id);\n-                vis.visit_pat(pat);\n-                visit_thin_attrs(attrs, vis);\n-                vis.visit_span(span);\n-            };\n+            fields.flat_map_in_place(|field| vis.flat_map_field_pattern(field));\n         }\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n@@ -1130,7 +1158,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n         }\n         ExprKind::Match(expr, arms) => {\n             vis.visit_expr(expr);\n-            visit_vec(arms, |arm| vis.visit_arm(arm));\n+            arms.flat_map_in_place(|arm| vis.flat_map_arm(arm));\n         }\n         ExprKind::Closure(_capture_by, asyncness, _movability, decl, body, span) => {\n             vis.visit_asyncness(asyncness);\n@@ -1193,7 +1221,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n         ExprKind::Mac(mac) => vis.visit_mac(mac),\n         ExprKind::Struct(path, fields, expr) => {\n             vis.visit_path(path);\n-            visit_vec(fields, |field| vis.visit_field(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_field(field));\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         },\n         ExprKind::Paren(expr) => {"}, {"sha": "a64fec7096132303f403d2edda33f05674fa949f", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -93,8 +93,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(&mut self, s: &VariantData, _: Ident,\n-                          _: &Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, s: &VariantData) {\n         self.count += 1;\n         walk_struct_def(self, s)\n     }\n@@ -107,9 +106,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-    fn visit_variant(&mut self, v: &Variant, g: &Generics, item_id: NodeId) {\n+    fn visit_variant(&mut self, v: &Variant) {\n         self.count += 1;\n-        walk_variant(self, v, g, item_id)\n+        walk_variant(self, v)\n     }\n     fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n         self.count += 1;"}, {"sha": "86f6d36c3c6ba53ab7d8bd98fda70e161d65c1e8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3d51731408708cbc6a6e4e2683da8df7326007/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6a3d51731408708cbc6a6e4e2683da8df7326007", "patch": "@@ -92,17 +92,16 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_variant_data(&mut self, s: &'ast VariantData, _: Ident,\n-                          _: &'ast Generics, _: NodeId, _: Span) {\n+    fn visit_variant_data(&mut self, s: &'ast VariantData) {\n         walk_struct_def(self, s)\n     }\n     fn visit_struct_field(&mut self, s: &'ast StructField) { walk_struct_field(self, s) }\n     fn visit_enum_def(&mut self, enum_definition: &'ast EnumDef,\n                       generics: &'ast Generics, item_id: NodeId, _: Span) {\n         walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-    fn visit_variant(&mut self, v: &'ast Variant, g: &'ast Generics, item_id: NodeId) {\n-        walk_variant(self, v, g, item_id)\n+    fn visit_variant(&mut self, v: &'ast Variant) {\n+        walk_variant(self, v)\n     }\n     fn visit_label(&mut self, label: &'ast Label) {\n         walk_label(self, label)\n@@ -163,6 +162,12 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn_header(&mut self, _header: &'ast FnHeader) {\n         // Nothing to do\n     }\n+    fn visit_field(&mut self, f: &'ast Field) {\n+        walk_field(self, f)\n+    }\n+    fn visit_field_pattern(&mut self, fp: &'ast FieldPat) {\n+        walk_field_pattern(self, fp)\n+    }\n }\n \n #[macro_export]\n@@ -280,8 +285,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::Struct(ref struct_definition, ref generics) |\n         ItemKind::Union(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_variant_data(struct_definition, item.ident,\n-                                     generics, item.id, item.span);\n+            visitor.visit_variant_data(struct_definition);\n         }\n         ItemKind::Trait(.., ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n@@ -300,24 +304,32 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n \n pub fn walk_enum_def<'a, V: Visitor<'a>>(visitor: &mut V,\n                                  enum_definition: &'a EnumDef,\n-                                 generics: &'a Generics,\n-                                 item_id: NodeId) {\n-    walk_list!(visitor, visit_variant, &enum_definition.variants, generics, item_id);\n+                                 _: &'a Generics,\n+                                 _: NodeId) {\n+    walk_list!(visitor, visit_variant, &enum_definition.variants);\n }\n \n-pub fn walk_variant<'a, V>(visitor: &mut V,\n-                           variant: &'a Variant,\n-                           generics: &'a Generics,\n-                           item_id: NodeId)\n+pub fn walk_variant<'a, V: Visitor<'a>>(visitor: &mut V, variant: &'a Variant)\n     where V: Visitor<'a>,\n {\n     visitor.visit_ident(variant.ident);\n-    visitor.visit_variant_data(&variant.data, variant.ident,\n-                             generics, item_id, variant.span);\n+    visitor.visit_variant_data(&variant.data);\n     walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.attrs);\n }\n \n+pub fn walk_field<'a, V: Visitor<'a>>(visitor: &mut V, f: &'a Field) {\n+    visitor.visit_expr(&f.expr);\n+    visitor.visit_ident(f.ident);\n+    walk_list!(visitor, visit_attribute, f.attrs.iter());\n+}\n+\n+pub fn walk_field_pattern<'a, V: Visitor<'a>>(visitor: &mut V, fp: &'a FieldPat) {\n+    visitor.visit_ident(fp.ident);\n+    visitor.visit_pat(&fp.pat);\n+    walk_list!(visitor, visit_attribute, fp.attrs.iter());\n+}\n+\n pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n     match typ.node {\n         TyKind::Slice(ref ty) | TyKind::Paren(ref ty) => {\n@@ -441,11 +453,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         }\n         PatKind::Struct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n-            for field in fields {\n-                walk_list!(visitor, visit_attribute, field.attrs.iter());\n-                visitor.visit_ident(field.ident);\n-                visitor.visit_pat(&field.pat)\n-            }\n+            walk_list!(visitor, visit_field_pattern, fields);\n         }\n         PatKind::Box(ref subpattern) |\n         PatKind::Ref(ref subpattern, _) |\n@@ -686,11 +694,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::Struct(ref path, ref fields, ref optional_base) => {\n             visitor.visit_path(path, expression.id);\n-            for field in fields {\n-                walk_list!(visitor, visit_attribute, field.attrs.iter());\n-                visitor.visit_ident(field.ident);\n-                visitor.visit_expr(&field.expr)\n-            }\n+            walk_list!(visitor, visit_field, fields);\n             walk_list!(visitor, visit_expr, optional_base);\n         }\n         ExprKind::Tup(ref subexpressions) => {"}]}