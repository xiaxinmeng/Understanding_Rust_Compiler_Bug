{"sha": "af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "node_id": "C_kwDOAAsO6NoAKGFmMmM3ZTBmOWI1NzMwYjk1OThjYTcwZmM2NzM2MGZhNjliNDY5Yzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-29T06:17:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-29T06:17:37Z"}, "message": "Auto merge of #110978 - Dylan-DPC:rollup-xclzwax, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110614 (Clear response values for overflow in new solver)\n - #110894 (Bump libffi-sys to 2.3.0)\n - #110932 (include source error for LoadLibraryExW)\n - #110958 (Make sure that some stdlib method signatures aren't accidental refinements)\n - #110962 (Make drop_flags an IndexVec.)\n - #110965 (Don't duplicate anonymous lifetimes for async fn in traits)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7e0605d54f2d79e843fcacde49c3c51ccd478f21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0605d54f2d79e843fcacde49c3c51ccd478f21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "html_url": "https://github.com/rust-lang/rust/commit/af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572c0d553f2bd1b934b08fe240310112369a5c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/572c0d553f2bd1b934b08fe240310112369a5c76", "html_url": "https://github.com/rust-lang/rust/commit/572c0d553f2bd1b934b08fe240310112369a5c76"}, {"sha": "81910a1b21ecb05980df8d18970595c1729cc030", "url": "https://api.github.com/repos/rust-lang/rust/commits/81910a1b21ecb05980df8d18970595c1729cc030", "html_url": "https://github.com/rust-lang/rust/commit/81910a1b21ecb05980df8d18970595c1729cc030"}], "stats": {"total": 453, "additions": 390, "deletions": 63}, "files": [{"sha": "683331d4724687cb5d102da9a01bd0819c6747ce", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -1956,9 +1956,9 @@ dependencies = [\n \n [[package]]\n name = \"libffi-sys\"\n-version = \"2.2.1\"\n+version = \"2.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dc65067b78c0fc069771e8b9a9e02df71e08858bec92c1f101377c67b9dca7c7\"\n+checksum = \"f36115160c57e8529781b4183c2bb51fdc1f6d6d1ed345591d84be7703befb3c\"\n dependencies = [\n  \"cc\",\n ]"}, {"sha": "01b69966ca92c643ba9899128031895976df6e07", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -27,6 +27,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n+use std::error::Error;\n use std::ops::Fn;\n use std::path::Path;\n use std::time::Duration;\n@@ -1094,5 +1095,12 @@ fn load_dylib(path: &Path, max_attempts: usize) -> Result<libloading::Library, S\n     }\n \n     debug!(\"Failed to load proc-macro `{}` even after {} attempts.\", path.display(), max_attempts);\n-    Err(format!(\"{} (retried {} times)\", last_error.unwrap(), max_attempts))\n+\n+    let last_error = last_error.unwrap();\n+    let message = if let Some(src) = last_error.source() {\n+        format!(\"{last_error} ({src}) (retried {max_attempts} times)\")\n+    } else {\n+        format!(\"{last_error} (retried {max_attempts} times)\")\n+    };\n+    Err(message)\n }"}, {"sha": "443f469ce52db3d1888cc99a539417e5d48093d6", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -1,7 +1,7 @@\n use crate::deref_separator::deref_finder;\n use crate::MirPass;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -84,12 +84,13 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n \n             let reachable = traversal::reachable_as_bitset(body);\n \n+            let drop_flags = IndexVec::from_elem(None, &env.move_data.move_paths);\n             ElaborateDropsCtxt {\n                 tcx,\n                 body,\n                 env: &env,\n                 init_data: InitializationData { inits, uninits },\n-                drop_flags: Default::default(),\n+                drop_flags,\n                 patch: MirPatch::new(body),\n                 un_derefer: un_derefer,\n                 reachable,\n@@ -293,7 +294,7 @@ struct ElaborateDropsCtxt<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n     env: &'a MoveDataParamEnv<'tcx>,\n     init_data: InitializationData<'a, 'tcx>,\n-    drop_flags: FxHashMap<MovePathIndex, Local>,\n+    drop_flags: IndexVec<MovePathIndex, Option<Local>>,\n     patch: MirPatch<'tcx>,\n     un_derefer: UnDerefer<'tcx>,\n     reachable: BitSet<BasicBlock>,\n@@ -312,11 +313,11 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let tcx = self.tcx;\n         let patch = &mut self.patch;\n         debug!(\"create_drop_flag({:?})\", self.body.span);\n-        self.drop_flags.entry(index).or_insert_with(|| patch.new_internal(tcx.types.bool, span));\n+        self.drop_flags[index].get_or_insert_with(|| patch.new_internal(tcx.types.bool, span));\n     }\n \n     fn drop_flag(&mut self, index: MovePathIndex) -> Option<Place<'tcx>> {\n-        self.drop_flags.get(&index).map(|t| Place::from(*t))\n+        self.drop_flags[index].map(Place::from)\n     }\n \n     /// create a patch that elaborates all drops in the input\n@@ -463,7 +464,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn set_drop_flag(&mut self, loc: Location, path: MovePathIndex, val: DropFlagState) {\n-        if let Some(&flag) = self.drop_flags.get(&path) {\n+        if let Some(flag) = self.drop_flags[path] {\n             let span = self.patch.source_info_for_location(self.body, loc).span;\n             let val = self.constant_bool(span, val.value());\n             self.patch.add_assign(loc, Place::from(flag), val);\n@@ -474,7 +475,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let loc = Location::START;\n         let span = self.patch.source_info_for_location(self.body, loc).span;\n         let false_ = self.constant_bool(span, false);\n-        for flag in self.drop_flags.values() {\n+        for flag in self.drop_flags.iter().flatten() {\n             self.patch.add_assign(loc, Place::from(*flag), false_.clone());\n         }\n     }"}, {"sha": "5c02e7193a216af6219dd6367c27fd41c89a3ea6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -859,13 +859,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                             sig.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n                             &sig.decl.output,\n                         );\n-\n-                        this.record_lifetime_params_for_async(\n-                            fn_id,\n-                            sig.header.asyncness.opt_return_id(),\n-                        );\n                     },\n                 );\n+                self.record_lifetime_params_for_async(fn_id, sig.header.asyncness.opt_return_id());\n                 return;\n             }\n             FnKind::Fn(..) => {"}, {"sha": "63a73f8d50d93b62f1b51e7027609b2ac7b552e9", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -3,7 +3,8 @@ use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{\n-    DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, TyCtxtInferExt,\n+    DefineOpaqueTypes, InferCtxt, InferOk, LateBoundRegionConversionTime, RegionVariableOrigin,\n+    TyCtxtInferExt,\n };\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n@@ -223,18 +224,20 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         {\n             debug!(\"rerunning goal to check result is stable\");\n             let (_orig_values, canonical_goal) = self.canonicalize_goal(goal);\n-            let canonical_response =\n+            let new_canonical_response =\n                 EvalCtxt::evaluate_canonical_goal(self.tcx(), self.search_graph, canonical_goal)?;\n-            if !canonical_response.value.var_values.is_identity() {\n+            if !new_canonical_response.value.var_values.is_identity() {\n                 bug!(\n                     \"unstable result: re-canonicalized goal={canonical_goal:#?} \\\n-                     response={canonical_response:#?}\"\n+                    first_response={canonical_response:#?} \\\n+                    second_response={new_canonical_response:#?}\"\n                 );\n             }\n-            if certainty != canonical_response.value.certainty {\n+            if certainty != new_canonical_response.value.certainty {\n                 bug!(\n                     \"unstable certainty: {certainty:#?} re-canonicalized goal={canonical_goal:#?} \\\n-                     response={canonical_response:#?}\"\n+                     first_response={canonical_response:#?} \\\n+                     second_response={new_canonical_response:#?}\"\n                 );\n             }\n         }\n@@ -434,6 +437,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         })\n     }\n \n+    pub(super) fn next_region_infer(&self) -> ty::Region<'tcx> {\n+        self.infcx.next_region_var(RegionVariableOrigin::MiscVariable(DUMMY_SP))\n+    }\n+\n     pub(super) fn next_const_infer(&self, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n         self.infcx.next_const_var(\n             ty,"}, {"sha": "67ad7fb4bd21debff85d1035cd160da03a26fd8b", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::infer::canonical::query_response::make_query_region_constraints\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};\n use rustc_middle::traits::query::NoSolution;\n-use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData, MaybeCause};\n use rustc_middle::ty::{self, BoundVar, GenericArgKind};\n use rustc_span::DUMMY_SP;\n use std::iter;\n@@ -60,9 +60,27 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n         let certainty = certainty.unify_with(goals_certainty);\n \n-        let external_constraints = self.compute_external_query_constraints()?;\n+        let response = match certainty {\n+            Certainty::Yes | Certainty::Maybe(MaybeCause::Ambiguity) => {\n+                let external_constraints = self.compute_external_query_constraints()?;\n+                Response { var_values: self.var_values, external_constraints, certainty }\n+            }\n+            Certainty::Maybe(MaybeCause::Overflow) => {\n+                // If we have overflow, it's probable that we're substituting a type\n+                // into itself infinitely and any partial substitutions in the query\n+                // response are probably not useful anyways, so just return an empty\n+                // query response.\n+                //\n+                // This may prevent us from potentially useful inference, e.g.\n+                // 2 candidates, one ambiguous and one overflow, which both\n+                // have the same inference constraints.\n+                //\n+                // Changing this to retain some constraints in the future\n+                // won't be a breaking change, so this is good enough for now.\n+                return Ok(self.make_ambiguous_response_no_constraints(MaybeCause::Overflow));\n+            }\n+        };\n \n-        let response = Response { var_values: self.var_values, external_constraints, certainty };\n         let canonical = Canonicalizer::canonicalize(\n             self.infcx,\n             CanonicalizeMode::Response { max_input_universe: self.max_input_universe },\n@@ -72,6 +90,40 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         Ok(canonical)\n     }\n \n+    /// Constructs a totally unconstrained, ambiguous response to a goal.\n+    ///\n+    /// Take care when using this, since often it's useful to respond with\n+    /// ambiguity but return constrained variables to guide inference.\n+    pub(in crate::solve) fn make_ambiguous_response_no_constraints(\n+        &self,\n+        maybe_cause: MaybeCause,\n+    ) -> CanonicalResponse<'tcx> {\n+        let unconstrained_response = Response {\n+            var_values: CanonicalVarValues {\n+                var_values: self.tcx().mk_substs_from_iter(self.var_values.var_values.iter().map(\n+                    |arg| -> ty::GenericArg<'tcx> {\n+                        match arg.unpack() {\n+                            GenericArgKind::Lifetime(_) => self.next_region_infer().into(),\n+                            GenericArgKind::Type(_) => self.next_ty_infer().into(),\n+                            GenericArgKind::Const(ct) => self.next_const_infer(ct.ty()).into(),\n+                        }\n+                    },\n+                )),\n+            },\n+            external_constraints: self\n+                .tcx()\n+                .mk_external_constraints(ExternalConstraintsData::default()),\n+            certainty: Certainty::Maybe(maybe_cause),\n+        };\n+\n+        Canonicalizer::canonicalize(\n+            self.infcx,\n+            CanonicalizeMode::Response { max_input_universe: self.max_input_universe },\n+            &mut Default::default(),\n+            unconstrained_response,\n+        )\n+    }\n+\n     #[instrument(level = \"debug\", skip(self), ret)]\n     fn compute_external_query_constraints(&self) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n         // Cannot use `take_registered_region_obligations` as we may compute the response"}, {"sha": "d94679fef283399422c27223ca77d34afef77262", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -340,17 +340,17 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         if responses.is_empty() {\n             return Err(NoSolution);\n         }\n-        let certainty = responses.iter().fold(Certainty::AMBIGUOUS, |certainty, response| {\n-            certainty.unify_with(response.value.certainty)\n-        });\n-\n-        let response = self.evaluate_added_goals_and_make_canonical_response(certainty);\n-        if let Ok(response) = response {\n-            assert!(response.has_no_inference_or_external_constraints());\n-            Ok(response)\n-        } else {\n-            bug!(\"failed to make floundered response: {responses:?}\");\n-        }\n+\n+        let Certainty::Maybe(maybe_cause) = responses.iter().fold(\n+            Certainty::AMBIGUOUS,\n+            |certainty, response| {\n+                certainty.unify_with(response.value.certainty)\n+            },\n+        ) else {\n+            bug!(\"expected flounder response to be ambiguous\")\n+        };\n+\n+        Ok(self.make_ambiguous_response_no_constraints(maybe_cause))\n     }\n }\n "}, {"sha": "efbbc1c2331cf54ac9840047f68ca8297849b2ca", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -1543,11 +1543,17 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1612,11 +1618,17 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1779,11 +1791,17 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a K> {\n+    fn min(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a K> {\n+    fn max(mut self) -> Option<&'a K>\n+    where\n+        &'a K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2008,11 +2026,17 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a V)>\n+    where\n+        (&'a K, &'a V): Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2081,11 +2105,17 @@ impl<K, V, A: Allocator + Clone> Iterator for IntoKeys<K, V, A> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<K> {\n+    fn min(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<K> {\n+    fn max(mut self) -> Option<K>\n+    where\n+        K: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -2204,11 +2234,17 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)>\n+    where\n+        (&'a K, &'a mut V): Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "940fa30afb80fe8d5a13f12007777350b751912d", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -1501,11 +1501,17 @@ impl<'a, T> Iterator for Iter<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }\n@@ -1604,11 +1610,17 @@ impl<'a, T> Iterator for Range<'a, T> {\n         self.next_back()\n     }\n \n-    fn min(mut self) -> Option<&'a T> {\n+    fn min(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next()\n     }\n \n-    fn max(mut self) -> Option<&'a T> {\n+    fn max(mut self) -> Option<&'a T>\n+    where\n+        &'a T: Ord,\n+    {\n         self.next_back()\n     }\n }"}, {"sha": "896da37f94c02680f5a8d419fbdd439a994fd22a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -2815,7 +2815,7 @@ impl<'a, T: 'a + Copy, A: Allocator> Extend<&'a T> for VecDeque<T, A> {\n     }\n \n     #[inline]\n-    fn extend_one(&mut self, &elem: &T) {\n+    fn extend_one(&mut self, &elem: &'a T) {\n         self.push_back(elem);\n     }\n "}, {"sha": "940558974e69b20e952a10864a0704080c45bdc7", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -248,7 +248,7 @@ where\n impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &[T]) -> Result<&[T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a [T]) -> Result<&'a [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_ptr() as *const [T; N];\n             // SAFETY: ok because we just checked that the length fits\n@@ -275,7 +275,7 @@ impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     type Error = TryFromSliceError;\n \n-    fn try_from(slice: &mut [T]) -> Result<&mut [T; N], TryFromSliceError> {\n+    fn try_from(slice: &'a mut [T]) -> Result<&'a mut [T; N], TryFromSliceError> {\n         if slice.len() == N {\n             let ptr = slice.as_mut_ptr() as *mut [T; N];\n             // SAFETY: ok because we just checked that the length fits"}, {"sha": "0171d89812feb05143a4a9960274f83d0713cadd", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -732,12 +732,18 @@ impl<A: Step> Iterator for ops::Range<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n \n@@ -1158,12 +1164,18 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     }\n \n     #[inline]\n-    fn min(mut self) -> Option<A> {\n+    fn min(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next()\n     }\n \n     #[inline]\n-    fn max(mut self) -> Option<A> {\n+    fn max(mut self) -> Option<A>\n+    where\n+        A: Ord,\n+    {\n         self.next_back()\n     }\n "}, {"sha": "302bf148bd3ef4fe2acad8c659907d9cf42020df", "filename": "library/portable-simd/crates/core_simd/src/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fops%2Fderef.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -71,7 +71,7 @@ macro_rules! deref_ops {\n \n                 #[inline]\n                 #[must_use = \"operator returns a new vector without mutating the inputs\"]\n-                fn $call(self, rhs: &$simd) -> Self::Output {\n+                fn $call(self, rhs: &'rhs $simd) -> Self::Output {\n                     (*self).$call(*rhs)\n                 }\n             }"}, {"sha": "46b450a4e47f7fb701801eaf744f10353a56ef09", "filename": "tests/mir-opt/issue_41888.main.ElaborateDrops.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -22,9 +22,9 @@\n       }\n   \n       bb0: {\n-+         _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n +         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n +         _8 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n++         _9 = const false;                // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n           StorageLive(_1);                 // scope 0 at $DIR/issue_41888.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14\n           _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue_41888.rs:+2:8: +2:14"}, {"sha": "9cdc23bbc7809e877a267ad357156832d71dbafe", "filename": "tests/ui/async-await/in-trait/nested-rpit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fnested-rpit.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -1,7 +1,5 @@\n // edition: 2021\n-// known-bug: #105197\n-// failure-status:101\n-// dont-check-compiler-stderr\n+// check-pass\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0ecbca5c13bdd9062caa1bda2aeccf605024f220", "filename": "tests/ui/async-await/return-type-notation/issue-110963-early.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,48 @@\n+// edition: 2021\n+// known-bug: #110963\n+\n+#![feature(return_type_notation)]\n+#![feature(async_fn_in_trait)]\n+\n+trait HealthCheck {\n+    async fn check<'a: 'a>(&'a mut self) -> bool;\n+}\n+\n+async fn do_health_check_par<HC>(hc: HC)\n+where\n+    HC: HealthCheck<check(): Send> + Send + 'static,\n+{\n+    spawn(async move {\n+        let mut hc = hc;\n+        if !hc.check().await {\n+            log_health_check_failure().await;\n+        }\n+    });\n+}\n+\n+async fn log_health_check_failure() {}\n+\n+fn main() {}\n+\n+// Fake tokio spawn\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+fn spawn<F>(future: F) -> JoinHandle\n+where\n+    F: Future + Send + 'static,\n+    F::Output: Send + 'static,\n+{\n+    loop {}\n+}\n+\n+struct JoinHandle;\n+\n+impl Future for JoinHandle {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        loop {}\n+    }\n+}"}, {"sha": "b4a3924d8dab9ff30a67b776491684bbd0f60967", "filename": "tests/ui/async-await/return-type-notation/issue-110963-early.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,45 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-110963-early.rs:4:12\n+   |\n+LL | #![feature(return_type_notation)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-110963-early.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-110963-early.rs:15:5\n+   |\n+LL | /     spawn(async move {\n+LL | |         let mut hc = hc;\n+LL | |         if !hc.check().await {\n+LL | |             log_health_check_failure().await;\n+LL | |         }\n+LL | |     });\n+   | |______^\n+   |\n+   = note: could not prove `[async block@$DIR/issue-110963-early.rs:15:11: 20:6]: Send`\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-110963-early.rs:15:5\n+   |\n+LL | /     spawn(async move {\n+LL | |         let mut hc = hc;\n+LL | |         if !hc.check().await {\n+LL | |             log_health_check_failure().await;\n+LL | |         }\n+LL | |     });\n+   | |______^\n+   |\n+   = note: could not prove `[async block@$DIR/issue-110963-early.rs:15:11: 20:6]: Send`\n+\n+error: aborting due to 2 previous errors; 2 warnings emitted\n+"}, {"sha": "2a35922eaa1b5c7414aa96b808ed302295b99dd4", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,50 @@\n+// edition: 2021\n+// check-pass\n+\n+#![feature(return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait HealthCheck {\n+    async fn check(&mut self) -> bool;\n+}\n+\n+async fn do_health_check_par<HC>(hc: HC)\n+where\n+    HC: HealthCheck<check(): Send> + Send + 'static,\n+{\n+    spawn(async move {\n+        let mut hc = hc;\n+        if !hc.check().await {\n+            log_health_check_failure().await;\n+        }\n+    });\n+}\n+\n+async fn log_health_check_failure() {}\n+\n+fn main() {}\n+\n+// Fake tokio spawn\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+fn spawn<F>(future: F) -> JoinHandle\n+where\n+    F: Future + Send + 'static,\n+    F::Output: Send + 'static,\n+{\n+    loop {}\n+}\n+\n+struct JoinHandle;\n+\n+impl Future for JoinHandle {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        loop {}\n+    }\n+}"}, {"sha": "36ef3ad0a4c82121d1858034c05108c570fbdaef", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-110963-late.rs:4:12\n+   |\n+LL | #![feature(return_type_notation)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-110963-late.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "b37f09ee185e9a29da8ff54f9df30dc687a95ba8", "filename": "tests/ui/traits/new-solver/exponential-trait-goals.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.rs?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Trait {}\n+\n+struct W<T>(T);\n+\n+impl<T, U> Trait for W<(W<T>, W<U>)>\n+where\n+    W<T>: Trait,\n+    W<U>: Trait,\n+{\n+}\n+\n+fn impls<T: Trait>() {}\n+\n+fn main() {\n+    impls::<W<_>>();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR overflow evaluating the requirement `W<_>: Trait`\n+}"}, {"sha": "28a99cbbca6a18a7eaad521d1d4449d7f86910ee", "filename": "tests/ui/traits/new-solver/exponential-trait-goals.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af2c7e0f9b5730b9598ca70fc67360fa69b469c8/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fexponential-trait-goals.stderr?ref=af2c7e0f9b5730b9598ca70fc67360fa69b469c8", "patch": "@@ -0,0 +1,23 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/exponential-trait-goals.rs:17:5\n+   |\n+LL |     impls::<W<_>>();\n+   |     ^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `impls`\n+\n+error[E0275]: overflow evaluating the requirement `W<_>: Trait`\n+  --> $DIR/exponential-trait-goals.rs:17:5\n+   |\n+LL |     impls::<W<_>>();\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`exponential_trait_goals`)\n+note: required by a bound in `impls`\n+  --> $DIR/exponential-trait-goals.rs:14:13\n+   |\n+LL | fn impls<T: Trait>() {}\n+   |             ^^^^^ required by this bound in `impls`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0275, E0282.\n+For more information about an error, try `rustc --explain E0275`."}]}