{"sha": "8f563226942570490ca77ea5ebfcc19fb3cf4089", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNTYzMjI2OTQyNTcwNDkwY2E3N2VhNWViZmNjMTlmYjNjZjQwODk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-18T10:46:28Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-18T10:46:28Z"}, "message": "Add an additional empty line between the suggested `use` and the next item", "tree": {"sha": "716cc8cb43f5dc5f91caf877d817c49d11236b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/716cc8cb43f5dc5f91caf877d817c49d11236b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f563226942570490ca77ea5ebfcc19fb3cf4089", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmWxZkACgkQpp+NIls6\n19kd3w/9HQvzyou2wh1PIs7x/EuQLPzpsVyk2eXXYKqFBxYUVjPaY+y83sQM1rox\nnNvL1VWoMhRDG7s37hMQ4D3uyrz8Usg05x/8+exRDpViOFQ+tyZcO6iOqDkd3Cbv\nE2Tza+s7I0f6tiaKgrlt6XQMdVTZ/fGtLFQlr+9P/5sucYkGYkZo6sgUgike4CWW\ncE4W02XjbkvgeLXou4SMxn2rpyS/PaijnvMFWm7M5CmVQiWhJHe++fkFsdpKT83H\naCesJyYhX/yWdaCcyNeCgDgBqQErnT+g4lQQ7HHGAorn5CrMeW77qQb0Mv7aF8ZM\n7W6AlqkEDbMnHxSOGGcBD/eGjeNy8OUbST5J1Vxa1Sw0VPRtMBEPJiPOigmtMrCw\nYL868eNrcE1qry/ckKv5wh0BcGwanjk5YoRTmJ34MjIkfiiK9W0sqKxP2VcLehPs\nthRn0nRFidVFd5CrgewMliL8l+Yyp9N/XNGsGwqeBZdyK/LnuuhRgMciam4VW+cK\nUr1ZR8s/4ngjlMki0ERa7m/g4LyTTSVBC35HadWz+LRBBVgTc9prXvS/jjAQg7r3\nX6o8b3V934jdwjLQM3pGebCkQNyDKp/Rq5X5KJRoxIaV4I3rJZb7BMYJUveiD4vG\nUmv2gBfXfEZAa5P8ws3qvnTrCyHGRx27yfvzIrP5BSl7rvjqZ7g=\n=kgBr\n-----END PGP SIGNATURE-----", "payload": "tree 716cc8cb43f5dc5f91caf877d817c49d11236b40\nparent e0ba29c41396da831cd3d431f4484516eb4434ab\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503053188 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503053188 +0200\n\nAdd an additional empty line between the suggested `use` and the next item\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f563226942570490ca77ea5ebfcc19fb3cf4089", "html_url": "https://github.com/rust-lang/rust/commit/8f563226942570490ca77ea5ebfcc19fb3cf4089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f563226942570490ca77ea5ebfcc19fb3cf4089/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ba29c41396da831cd3d431f4484516eb4434ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ba29c41396da831cd3d431f4484516eb4434ab", "html_url": "https://github.com/rust-lang/rust/commit/e0ba29c41396da831cd3d431f4484516eb4434ab"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "26dda2dc42d2bfb47d012631881218f81e8cfa9a", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f563226942570490ca77ea5ebfcc19fb3cf4089/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f563226942570490ca77ea5ebfcc19fb3cf4089/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=8f563226942570490ca77ea5ebfcc19fb3cf4089", "patch": "@@ -217,8 +217,10 @@ impl CodeSuggestion {\n             if !buf.ends_with('\\n') {\n                 push_trailing(buf, prev_line.as_ref(), &prev_hi, None);\n             }\n-            // remove trailing newline\n-            buf.pop();\n+            // remove trailing newlines\n+            while buf.ends_with('\\n') {\n+                buf.pop();\n+            }\n         }\n         bufs\n     }"}, {"sha": "a0d7ee44faf616d68bfbd7b2c9c33f1d49f660db", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f563226942570490ca77ea5ebfcc19fb3cf4089/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f563226942570490ca77ea5ebfcc19fb3cf4089/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8f563226942570490ca77ea5ebfcc19fb3cf4089", "patch": "@@ -584,6 +584,7 @@ impl<T> ::std::ops::IndexMut<Namespace> for PerNS<T> {\n struct UsePlacementFinder {\n     target_module: NodeId,\n     span: Option<Span>,\n+    found_use: bool,\n }\n \n impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n@@ -611,6 +612,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n                         let mut span = item.span;\n                         span.hi = span.lo;\n                         self.span = Some(span);\n+                        self.found_use = true;\n                         return;\n                     }\n                 },\n@@ -3576,11 +3578,12 @@ impl<'a> Resolver<'a> {\n             let mut finder = UsePlacementFinder {\n                 target_module: node_id,\n                 span: None,\n+                found_use: false,\n             };\n             visit::walk_crate(&mut finder, krate);\n             if !candidates.is_empty() {\n                 let span = finder.span.expect(\"did not find module\");\n-                show_candidates(&mut err, span, &candidates, better);\n+                show_candidates(&mut err, span, &candidates, better, finder.found_use);\n             }\n             err.emit();\n         }\n@@ -3776,7 +3779,8 @@ fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (Span, String, St\n fn show_candidates(err: &mut DiagnosticBuilder,\n                    span: Span,\n                    candidates: &[ImportSuggestion],\n-                   better: bool) {\n+                   better: bool,\n+                   found_use: bool) {\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -3792,7 +3796,14 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n     let msg = format!(\"possible {}candidate{} into scope\", better, msg_diff);\n \n     for candidate in &mut path_strings {\n-        *candidate = format!(\"use {};\\n\", candidate);\n+        // produce an additional newline to separate the new use statement\n+        // from the directly following item.\n+        let additional_newline = if found_use {\n+            \"\"\n+        } else {\n+            \"\\n\"\n+        };\n+        *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n     }\n \n     err.span_suggestions(span, &msg, path_strings);"}]}