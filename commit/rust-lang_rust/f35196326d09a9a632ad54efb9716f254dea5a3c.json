{"sha": "f35196326d09a9a632ad54efb9716f254dea5a3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNTE5NjMyNmQwOWE5YTYzMmFkNTRlZmI5NzE2ZjI1NGRlYTVhM2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-12T19:59:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T14:38:49Z"}, "message": "pull out code for encoding enum variants", "tree": {"sha": "e3c9be7c31cbf5f6a06b9879d437d0b709b07ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3c9be7c31cbf5f6a06b9879d437d0b709b07ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f35196326d09a9a632ad54efb9716f254dea5a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f35196326d09a9a632ad54efb9716f254dea5a3c", "html_url": "https://github.com/rust-lang/rust/commit/f35196326d09a9a632ad54efb9716f254dea5a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f35196326d09a9a632ad54efb9716f254dea5a3c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5166682583a95a8e498c27d12154ddc1d9dda406", "url": "https://api.github.com/repos/rust-lang/rust/commits/5166682583a95a8e498c27d12154ddc1d9dda406", "html_url": "https://github.com/rust-lang/rust/commit/5166682583a95a8e498c27d12154ddc1d9dda406"}], "stats": {"total": 101, "additions": 45, "deletions": 56}, "files": [{"sha": "d63e0866a9d6b6949b109a88ea52a0ba82cc39ce", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f35196326d09a9a632ad54efb9716f254dea5a3c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35196326d09a9a632ad54efb9716f254dea5a3c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f35196326d09a9a632ad54efb9716f254dea5a3c", "patch": "@@ -240,11 +240,10 @@ fn reexports<'a>(d: rbml::Doc<'a>) -> reader::TaggedDocsIterator<'a> {\n     reader::tagged_docs(d, tag_items_data_item_reexport)\n }\n \n-fn variant_disr_val(d: rbml::Doc) -> Option<u64> {\n-    reader::maybe_get_doc(d, tag_disr_val).and_then(|val_doc| {\n-        reader::with_doc_data(val_doc, |data| {\n-            str::from_utf8(data).ok().and_then(|s| s.parse().ok())\n-        })\n+fn variant_disr_val(d: rbml::Doc) -> u64 {\n+    let val_doc = reader::get_doc(d, tag_disr_val);\n+    reader::with_doc_data(val_doc, |data| {\n+        str::from_utf8(data).unwrap().parse().unwrap()\n     })\n }\n \n@@ -402,17 +401,10 @@ pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,\n         }\n     }\n     fn get_enum_variants<'tcx>(cdata: Cmd, doc: rbml::Doc) -> Vec<ty::VariantDefData<'tcx, 'tcx>> {\n-        let mut disr_val = 0;\n         reader::tagged_docs(doc, tag_items_data_item_variant).map(|p| {\n             let did = translated_def_id(cdata, p);\n             let item = cdata.lookup_item(did.index);\n-\n-            if let Some(disr) = variant_disr_val(item) {\n-                disr_val = disr;\n-            }\n-            let disr = disr_val;\n-            disr_val = disr_val.wrapping_add(1);\n-\n+            let disr = variant_disr_val(item);\n             ty::VariantDefData {\n                 did: did,\n                 name: item_name(item),"}, {"sha": "8c1e551d030d093c006d18dacd0f2aaa19d363cf", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f35196326d09a9a632ad54efb9716f254dea5a3c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f35196326d09a9a632ad54efb9716f254dea5a3c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f35196326d09a9a632ad54efb9716f254dea5a3c", "patch": "@@ -28,7 +28,6 @@ use middle::dependency_format::Linkage;\n use rustc::dep_graph::DepNode;\n use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::util::IntTypeExt;\n \n use rustc::hir::svh::Svh;\n use rustc::mir::mir_map::MirMap;\n@@ -198,55 +197,53 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n }\n \n impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n-    fn encode_enum_variant_info(&mut self,\n-                                did: DefId,\n-                                vis: &hir::Visibility) {\n-        debug!(\"encode_enum_variant_info(did={:?})\", did);\n+    fn encode_enum_variant_infos(&mut self,\n+                                 enum_did: DefId,\n+                                 vis: &hir::Visibility) {\n+        debug!(\"encode_enum_variant_info(enum_did={:?})\", enum_did);\n         let ecx = self.ecx();\n-        let repr_hints = ecx.tcx.lookup_repr_hints(did);\n-        let repr_type = ecx.tcx.enum_repr_type(repr_hints.get(0));\n-        let mut disr_val = repr_type.initial_discriminant(ecx.tcx);\n-        let def = ecx.tcx.lookup_adt_def(did);\n-        for variant in &def.variants {\n-            let vid = variant.did;\n-            let variant_node_id = ecx.local_id(vid);\n-\n+        let def = ecx.tcx.lookup_adt_def(enum_did);\n+        for (i, variant) in def.variants.iter().enumerate() {\n             for field in &variant.fields {\n                 self.encode_field(field);\n             }\n+            self.record(variant.did, |this| this.encode_enum_variant_info(enum_did, i, vis));\n+        }\n+    }\n+}\n \n-            self.record(vid, |this| {\n-                encode_def_id_and_key(ecx, this.rbml_w, vid);\n-                encode_family(this.rbml_w, match variant.kind {\n-                    ty::VariantKind::Struct => 'V',\n-                    ty::VariantKind::Tuple => 'v',\n-                    ty::VariantKind::Unit => 'w',\n-                });\n-                encode_name(this.rbml_w, variant.name);\n-                this.encode_parent_item(did);\n-                this.encode_visibility(vis);\n-\n-                let attrs = ecx.tcx.get_attrs(vid);\n-                encode_attributes(this.rbml_w, &attrs);\n-                this.encode_repr_attrs(&attrs);\n-\n-                let stab = ecx.tcx.lookup_stability(vid);\n-                let depr = ecx.tcx.lookup_deprecation(vid);\n-                encode_stability(this.rbml_w, stab);\n-                encode_deprecation(this.rbml_w, depr);\n+impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n+    fn encode_enum_variant_info(&mut self,\n+                                enum_did: DefId, // enum def-id\n+                                index: usize, // variant index\n+                                vis: &hir::Visibility) {\n+        let ecx = self.ecx;\n+        let def = ecx.tcx.lookup_adt_def(enum_did);\n+        let variant = &def.variants[index];\n+        let vid = variant.did;\n+        let variant_node_id = ecx.local_id(vid);\n+        encode_def_id_and_key(ecx, self.rbml_w, vid);\n+        encode_family(self.rbml_w, match variant.kind {\n+            ty::VariantKind::Struct => 'V',\n+            ty::VariantKind::Tuple => 'v',\n+            ty::VariantKind::Unit => 'w',\n+        });\n+        encode_name(self.rbml_w, variant.name);\n+        self.encode_parent_item(enum_did);\n+        self.encode_visibility(vis);\n \n-                this.encode_struct_fields(variant);\n+        let attrs = ecx.tcx.get_attrs(vid);\n+        encode_attributes(self.rbml_w, &attrs);\n+        self.encode_repr_attrs(&attrs);\n \n-                let specified_disr_val = variant.disr_val;\n-                if specified_disr_val != disr_val {\n-                    this.encode_disr_val(specified_disr_val);\n-                    disr_val = specified_disr_val;\n-                }\n-                this.encode_bounds_and_type_for_item(variant_node_id);\n-            });\n+        let stab = ecx.tcx.lookup_stability(vid);\n+        let depr = ecx.tcx.lookup_deprecation(vid);\n+        encode_stability(self.rbml_w, stab);\n+        encode_deprecation(self.rbml_w, depr);\n \n-            disr_val = disr_val.wrap_incr();\n-        }\n+        self.encode_struct_fields(variant);\n+        self.encode_disr_val(variant.disr_val);\n+        self.encode_bounds_and_type_for_item(variant_node_id);\n     }\n }\n \n@@ -1045,7 +1042,7 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n                 // no sub-item recording needed in these cases\n             }\n             hir::ItemEnum(..) => {\n-                self.encode_enum_variant_info(def_id, &item.vis);\n+                self.encode_enum_variant_infos(def_id, &item.vis);\n             }\n             hir::ItemStruct(ref struct_def, _) => {\n                 self.encode_addl_struct_info(def_id, struct_def.id(), item);"}]}