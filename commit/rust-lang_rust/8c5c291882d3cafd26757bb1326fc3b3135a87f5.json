{"sha": "8c5c291882d3cafd26757bb1326fc3b3135a87f5", "node_id": "C_kwDOAAsO6NoAKDhjNWMyOTE4ODJkM2NhZmQyNjc1N2JiMTMyNmZjM2IzMTM1YTg3ZjU", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-20T20:03:06Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:56Z"}, "message": "safe transmute: test when `ASSUME` params are passed indirectly\n\nref: https://github.com/rust-lang/rust/pull/92268/files#r925258420", "tree": {"sha": "ed26642396bf1c87691dfffd9c1ff2be37bff7b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed26642396bf1c87691dfffd9c1ff2be37bff7b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c5c291882d3cafd26757bb1326fc3b3135a87f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5c291882d3cafd26757bb1326fc3b3135a87f5", "html_url": "https://github.com/rust-lang/rust/commit/8c5c291882d3cafd26757bb1326fc3b3135a87f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c5c291882d3cafd26757bb1326fc3b3135a87f5/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18751a708a5831dffcd3b95755496efdaf7ae7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/18751a708a5831dffcd3b95755496efdaf7ae7a0", "html_url": "https://github.com/rust-lang/rust/commit/18751a708a5831dffcd3b95755496efdaf7ae7a0"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "2abbbf3c158d6067aa29f0c337a40e687485635b", "filename": "src/test/ui/transmutability/abstraction/abstracted_assume.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8c5c291882d3cafd26757bb1326fc3b3135a87f5/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c5c291882d3cafd26757bb1326fc3b3135a87f5/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fabstraction%2Fabstracted_assume.rs?ref=8c5c291882d3cafd26757bb1326fc3b3135a87f5", "patch": "@@ -0,0 +1,73 @@\n+// check-pass\n+//! The implementation should behave correctly when the `ASSUME` parameters are\n+//! provided indirectly through an abstraction.\n+\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code, incomplete_features, non_camel_case_types)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<\n+        Src,\n+        Dst,\n+        Context,\n+        const ASSUME_ALIGNMENT: bool,\n+        const ASSUME_LIFETIMES: bool,\n+        const ASSUME_VALIDITY: bool,\n+        const ASSUME_VISIBILITY: bool,\n+    >()\n+    where\n+        Dst: BikeshedIntrinsicFrom<\n+            Src,\n+            Context,\n+            ASSUME_ALIGNMENT,\n+            ASSUME_LIFETIMES,\n+            ASSUME_VALIDITY,\n+            ASSUME_VISIBILITY,\n+        >,\n+    {}\n+}\n+\n+fn direct() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    assert::is_transmutable::<Src, Dst, Context, false, false, false, false>();\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    const FALSE: bool = false;\n+\n+    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n+}\n+\n+fn via_associated_const() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    trait Trait {\n+        const FALSE: bool = true;\n+    }\n+\n+    struct Ty;\n+\n+    impl Trait for Ty {}\n+\n+    assert::is_transmutable::<\n+        Src,\n+        Dst,\n+        Context,\n+        {Ty::FALSE},\n+        {Ty::FALSE},\n+        {Ty::FALSE},\n+        {Ty::FALSE}\n+    >();\n+}"}]}