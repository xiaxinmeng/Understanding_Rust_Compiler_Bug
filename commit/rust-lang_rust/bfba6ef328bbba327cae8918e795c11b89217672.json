{"sha": "bfba6ef328bbba327cae8918e795c11b89217672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYmE2ZWYzMjhiYmJhMzI3Y2FlODkxOGU3OTVjMTFiODkyMTc2NzI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-28T18:21:22Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-29T17:05:36Z"}, "message": "Add an option to use LLD to link the compiler on Windows platforms", "tree": {"sha": "916325d2ccc8535da3ffd03ff1899e9611dcb832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/916325d2ccc8535da3ffd03ff1899e9611dcb832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfba6ef328bbba327cae8918e795c11b89217672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfba6ef328bbba327cae8918e795c11b89217672", "html_url": "https://github.com/rust-lang/rust/commit/bfba6ef328bbba327cae8918e795c11b89217672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfba6ef328bbba327cae8918e795c11b89217672/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb", "html_url": "https://github.com/rust-lang/rust/commit/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "c8aff4af8ffe3114b6604db92ae879e31013f4cd", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -395,6 +395,11 @@\n # rustc to execute.\n #lld = false\n \n+# Indicates whether LLD will be used to link Rust crates during bootstrap on\n+# supported platforms. The LLD from the bootstrap distribution will be used\n+# and not the LLD compiled during the bootstrap.\n+#use-lld = false\n+\n # Indicates whether some LLVM tools, like llvm-objdump, will be made available in the\n # sysroot.\n #llvm-tools = false"}, {"sha": "46e3e4ef6d1f371c24de0bc4a9ff9747bd5cca30", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -134,6 +134,11 @@ fn main() {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n         }\n \n+        // Override linker flavor if necessary.\n+        if let Ok(host_linker_flavor) = env::var(\"RUSTC_HOST_LINKER_FLAVOR\") {\n+            cmd.arg(format!(\"-Clinker-flavor={}\", host_linker_flavor));\n+        }\n+\n         if let Ok(s) = env::var(\"RUSTC_HOST_CRT_STATIC\") {\n             if s == \"true\" {\n                 cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");"}, {"sha": "008af975c33fb77eb9cea62226d04d62caaca7fb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -694,7 +694,7 @@ impl<'a> Builder<'a> {\n         cmd.env_remove(\"MAKEFLAGS\");\n         cmd.env_remove(\"MFLAGS\");\n \n-        if let Some(linker) = self.linker(compiler.host) {\n+        if let Some(linker) = self.linker(compiler.host, true) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         cmd\n@@ -949,10 +949,30 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if let Some(host_linker) = self.linker(compiler.host) {\n+        // FIXME: Don't use LLD if we're compiling libstd, since it fails to link it.\n+        let can_use_lld = mode != Mode::Std;\n+\n+        // FIXME: The beta compiler doesn't pick the `lld-link` flavor for `*-pc-windows-msvc`\n+        // Remove `RUSTC_HOST_LINKER_FLAVOR` when this is fixed\n+        let lld_linker_flavor = |linker: &Path, target: Interned<String>| {\n+            compiler.stage == 0\n+                && linker.file_name() == Some(OsStr::new(\"rust-lld\"))\n+                && target.contains(\"pc-windows-msvc\")\n+        };\n+\n+        if let Some(host_linker) = self.linker(compiler.host, can_use_lld) {\n+            if lld_linker_flavor(host_linker, compiler.host) {\n+                cargo.env(\"RUSTC_HOST_LINKER_FLAVOR\", \"lld-link\");\n+            }\n+\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }\n-        if let Some(target_linker) = self.linker(target) {\n+\n+        if let Some(target_linker) = self.linker(target, can_use_lld) {\n+            if lld_linker_flavor(target_linker, target) {\n+                rustflags.arg(\"-Clinker-flavor=lld-link\");\n+            }\n+\n             let target = crate::envify(&target);\n             cargo.env(&format!(\"CARGO_TARGET_{}_LINKER\", target), target_linker);\n         }"}, {"sha": "8a01bee2208357123d33d0f0ee5d1d58fdb5e7ec", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -83,6 +83,7 @@ pub struct Config {\n     pub llvm_use_linker: Option<String>,\n     pub llvm_allow_old_toolchain: Option<bool>,\n \n+    pub use_lld: bool,\n     pub lld_enabled: bool,\n     pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n@@ -322,6 +323,7 @@ struct Rust {\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n     lld: Option<bool>,\n+    use_lld: Option<bool>,\n     llvm_tools: Option<bool>,\n     lldb: Option<bool>,\n     deny_warnings: Option<bool>,\n@@ -566,6 +568,7 @@ impl Config {\n             if let Some(true) = rust.incremental {\n                 config.incremental = true;\n             }\n+            set(&mut config.use_lld, rust.use_lld);\n             set(&mut config.lld_enabled, rust.lld);\n             set(&mut config.lldb_enabled, rust.lldb);\n             set(&mut config.llvm_tools_enabled, rust.llvm_tools);"}, {"sha": "9755222410357cdd8e4b872b1c792b8ebe2e6627", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -239,9 +239,10 @@ pub struct Build {\n     hosts: Vec<Interned<String>>,\n     targets: Vec<Interned<String>>,\n \n-    // Stage 0 (downloaded) compiler and cargo or their local rust equivalents\n+    // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n+    initial_lld: PathBuf,\n \n     // Runtime state filled in later on\n     // C/C++ compilers and archiver for all targets\n@@ -343,9 +344,18 @@ impl Build {\n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n \n+        let initial_sysroot = config.initial_rustc.parent().unwrap().parent().unwrap();\n+        let initial_lld = initial_sysroot\n+            .join(\"lib\")\n+            .join(\"rustlib\")\n+            .join(config.build)\n+            .join(\"bin\")\n+            .join(\"rust-lld\");\n+\n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n+            initial_lld,\n             local_rebuild: config.local_rebuild,\n             fail_fast: config.cmd.fail_fast(),\n             doc_tests: config.cmd.doc_tests(),\n@@ -810,7 +820,7 @@ impl Build {\n     }\n \n     /// Returns the path to the linker for the given target if it needs to be overridden.\n-    fn linker(&self, target: Interned<String>) -> Option<&Path> {\n+    fn linker(&self, target: Interned<String>, can_use_lld: bool) -> Option<&Path> {\n         if let Some(linker) = self.config.target_config.get(&target).and_then(|c| c.linker.as_ref())\n         {\n             Some(linker)\n@@ -819,6 +829,12 @@ impl Build {\n             && !target.contains(\"msvc\")\n         {\n             Some(self.cc(target))\n+        } else if can_use_lld\n+            && self.config.use_lld\n+            && target.contains(\"pc-windows-msvc\")\n+            && self.build == target\n+        {\n+            Some(&self.initial_lld)\n         } else {\n             None\n         }"}, {"sha": "189f9e6ccab427ee68757c22831a6c156dccecae", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfba6ef328bbba327cae8918e795c11b89217672/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=bfba6ef328bbba327cae8918e795c11b89217672", "patch": "@@ -596,7 +596,7 @@ impl Step for RustdocTheme {\n             .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler))\n             .env(\"RUSTDOC_CRATE_VERSION\", builder.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        if let Some(linker) = builder.linker(self.compiler.host) {\n+        if let Some(linker) = builder.linker(self.compiler.host, true) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         try_run(builder, &mut cmd);\n@@ -1035,7 +1035,7 @@ impl Step for Compiletest {\n         flags.push(\"-Zunstable-options\".to_string());\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n \n-        if let Some(linker) = builder.linker(target) {\n+        if let Some(linker) = builder.linker(target, false) {\n             cmd.arg(\"--linker\").arg(linker);\n         }\n "}]}