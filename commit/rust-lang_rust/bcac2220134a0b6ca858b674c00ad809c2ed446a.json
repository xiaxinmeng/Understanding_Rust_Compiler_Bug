{"sha": "bcac2220134a0b6ca858b674c00ad809c2ed446a", "node_id": "C_kwDOAAsO6NoAKGJjYWMyMjIwMTM0YTBiNmNhODU4YjY3NGMwMGFkODA5YzJlZDQ0NmE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-04T15:41:43Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Lazily patch the standard library", "tree": {"sha": "eca8e3dffdb9a69654016d2c17b5b3d97d5f7165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca8e3dffdb9a69654016d2c17b5b3d97d5f7165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcac2220134a0b6ca858b674c00ad809c2ed446a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcac2220134a0b6ca858b674c00ad809c2ed446a", "html_url": "https://github.com/rust-lang/rust/commit/bcac2220134a0b6ca858b674c00ad809c2ed446a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcac2220134a0b6ca858b674c00ad809c2ed446a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ea8bbc5e8dcb2018a248ee9d88a02ce2319b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ea8bbc5e8dcb2018a248ee9d88a02ce2319b3c", "html_url": "https://github.com/rust-lang/rust/commit/d0ea8bbc5e8dcb2018a248ee9d88a02ce2319b3c"}], "stats": {"total": 70, "additions": 26, "deletions": 44}, "files": [{"sha": "74bba9ed5eb886aaed2045989a4d855be4229d95", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=bcac2220134a0b6ca858b674c00ad809c2ed446a", "patch": "@@ -1,9 +1,9 @@\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::process::{self, Command};\n+use std::process::Command;\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version};\n+use super::rustc_info::get_file_name;\n use super::utils::{\n     maybe_incremental, remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler,\n };\n@@ -158,7 +158,6 @@ impl SysrootTarget {\n }\n \n pub(crate) static STDLIB_SRC: RelPath = RelPath::BUILD.join(\"stdlib\");\n-pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = STDLIB_SRC.join(\"rustc_version\");\n pub(crate) static STANDARD_LIBRARY: CargoProject =\n     CargoProject::new(&STDLIB_SRC.join(\"library/sysroot\"), \"stdlib_target\");\n pub(crate) static RTSTARTUP_SYSROOT: RelPath = RelPath::BUILD.join(\"rtstartup\");\n@@ -222,24 +221,6 @@ fn build_clif_sysroot_for_triple(\n     mut compiler: Compiler,\n     cg_clif_dylib_path: &CodegenBackend,\n ) -> SysrootTarget {\n-    match fs::read_to_string(SYSROOT_RUSTC_VERSION.to_path(dirs)) {\n-        Err(e) => {\n-            eprintln!(\"Failed to get rustc version for patched sysroot source: {}\", e);\n-            eprintln!(\"Hint: Try `./y.sh prepare` to patch the sysroot source\");\n-            process::exit(1);\n-        }\n-        Ok(source_version) => {\n-            let rustc_version = get_rustc_version(&compiler.rustc);\n-            if source_version != rustc_version {\n-                eprintln!(\"The patched sysroot source is outdated\");\n-                eprintln!(\"Source version: {}\", source_version.trim());\n-                eprintln!(\"Rustc version:  {}\", rustc_version.trim());\n-                eprintln!(\"Hint: Try `./y.sh prepare` to update the patched sysroot source\");\n-                process::exit(1);\n-            }\n-        }\n-    }\n-\n     let mut target_libs = SysrootTarget { triple: compiler.triple.clone(), libs: vec![] };\n \n     if let Some(rtstartup_target_libs) = build_rtstartup(dirs, &compiler) {\n@@ -302,6 +283,10 @@ fn build_clif_sysroot_for_triple(\n }\n \n fn build_rtstartup(dirs: &Dirs, compiler: &Compiler) -> Option<SysrootTarget> {\n+    if !super::config::get_bool(\"keep_sysroot\") {\n+        super::prepare::prepare_stdlib(dirs, &compiler.rustc);\n+    }\n+\n     if !compiler.triple.ends_with(\"windows-gnu\") {\n         return None;\n     }"}, {"sha": "d51e5027cf34b09c224c3527bc816849e0ace235", "filename": "build_system/main.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmain.rs?ref=bcac2220134a0b6ca858b674c00ad809c2ed446a", "patch": "@@ -126,6 +126,22 @@ fn main() {\n         }\n     }\n \n+    let current_dir = std::env::current_dir().unwrap();\n+    out_dir = current_dir.join(out_dir);\n+\n+    if command == Command::Prepare {\n+        prepare::prepare(&path::Dirs {\n+            source_dir: current_dir.clone(),\n+            download_dir: download_dir\n+                .map(|dir| current_dir.join(dir))\n+                .unwrap_or_else(|| out_dir.join(\"download\")),\n+            build_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            dist_dir: PathBuf::from(\"dummy_do_not_use\"),\n+            frozen,\n+        });\n+        process::exit(0);\n+    }\n+\n     let rustup_toolchain_name = match (env::var(\"CARGO\"), env::var(\"RUSTC\"), env::var(\"RUSTDOC\")) {\n         (Ok(_), Ok(_), Ok(_)) => None,\n         (Err(_), Err(_), Err(_)) => Some(rustc_info::get_toolchain_name()),\n@@ -158,8 +174,6 @@ fn main() {\n         .unwrap_or_else(|| bootstrap_host_compiler.triple.clone());\n \n     // FIXME allow changing the location of these dirs using cli arguments\n-    let current_dir = std::env::current_dir().unwrap();\n-    out_dir = current_dir.join(out_dir);\n     let dirs = path::Dirs {\n         source_dir: current_dir.clone(),\n         download_dir: download_dir\n@@ -181,11 +195,6 @@ fn main() {\n         std::fs::File::create(target).unwrap();\n     }\n \n-    if command == Command::Prepare {\n-        prepare::prepare(&dirs, &bootstrap_host_compiler.rustc);\n-        process::exit(0);\n-    }\n-\n     env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n     env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n "}, {"sha": "77f7175b786f51fbd9bf787ab8bc531a5e00a863", "filename": "build_system/prepare.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=bcac2220134a0b6ca858b674c00ad809c2ed446a", "patch": "@@ -3,24 +3,21 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use super::build_sysroot::{STDLIB_SRC, SYSROOT_RUSTC_VERSION};\n+use super::build_sysroot::STDLIB_SRC;\n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_default_sysroot, get_rustc_version};\n+use super::rustc_info::get_default_sysroot;\n use super::utils::{\n     copy_dir_recursively, git_command, remove_dir_if_exists, retry_spawn_and_wait, spawn_and_wait,\n };\n \n-pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n+pub(crate) fn prepare(dirs: &Dirs) {\n     RelPath::DOWNLOAD.ensure_exists(dirs);\n     super::tests::RAND_REPO.fetch(dirs);\n     super::tests::REGEX_REPO.fetch(dirs);\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-\n-    // FIXME do this on the fly?\n-    prepare_stdlib(dirs, rustc);\n }\n \n-fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n+pub(crate) fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n     let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n@@ -50,9 +47,6 @@ codegen-units = 10000\n \"#,\n     )\n     .unwrap();\n-\n-    let rustc_version = get_rustc_version(rustc);\n-    fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n }\n \n pub(crate) struct GitRepo {"}, {"sha": "5b71504e90a4f122b22f212341930edee500cfd7", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcac2220134a0b6ca858b674c00ad809c2ed446a/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=bcac2220134a0b6ca858b674c00ad809c2ed446a", "patch": "@@ -1,12 +1,6 @@\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-pub(crate) fn get_rustc_version(rustc: &Path) -> String {\n-    let version_info =\n-        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n-    String::from_utf8(version_info).unwrap()\n-}\n-\n pub(crate) fn get_host_triple(rustc: &Path) -> String {\n     let version_info =\n         Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;"}]}