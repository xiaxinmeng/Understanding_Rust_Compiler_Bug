{"sha": "3f69e2004339c7bd1f5ca150e5506595bffc4997", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjllMjAwNDMzOWM3YmQxZjVjYTE1MGU1NTA2NTk1YmZmYzQ5OTc=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-15T16:21:15Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-15T16:21:47Z"}, "message": "trans::glue: don't allocate a pointer variable if it already exists\n\nRemoves one alloca and store from the drop glue of @ boxes. This speeds\nup the rustc build by 1s (might be noise, though).", "tree": {"sha": "212206fc644b1e80a3376af7e9a51441771c7502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212206fc644b1e80a3376af7e9a51441771c7502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f69e2004339c7bd1f5ca150e5506595bffc4997", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f69e2004339c7bd1f5ca150e5506595bffc4997", "html_url": "https://github.com/rust-lang/rust/commit/3f69e2004339c7bd1f5ca150e5506595bffc4997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f69e2004339c7bd1f5ca150e5506595bffc4997/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadd83da8b9abc821b141195503836b2094a9ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadd83da8b9abc821b141195503836b2094a9ea3", "html_url": "https://github.com/rust-lang/rust/commit/eadd83da8b9abc821b141195503836b2094a9ea3"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "4dcd2d9d6407d56fc5a871ff8776ec7d1a35e17c", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f69e2004339c7bd1f5ca150e5506595bffc4997/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f69e2004339c7bd1f5ca150e5506595bffc4997/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3f69e2004339c7bd1f5ca150e5506595bffc4997", "patch": "@@ -552,7 +552,7 @@ pub fn make_opaque_cbox_drop_glue(\n         ast::BorrowedSigil => bcx,\n         ast::ManagedSigil => {\n             glue::decr_refcnt_maybe_free(\n-                bcx, Load(bcx, cboxptr),\n+                bcx, Load(bcx, cboxptr), Some(cboxptr),\n                 ty::mk_opaque_closure_ptr(bcx.tcx(), sigil))\n         }\n         ast::OwnedSigil => {"}, {"sha": "5d0bbd72224d71a83c420317af85108565534b0a", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f69e2004339c7bd1f5ca150e5506595bffc4997/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f69e2004339c7bd1f5ca150e5506595bffc4997/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=3f69e2004339c7bd1f5ca150e5506595bffc4997", "patch": "@@ -103,7 +103,7 @@ pub fn drop_ty_immediate(bcx: block, v: ValueRef, t: ty::t) -> block {\n       ty::ty_box(_) | ty::ty_opaque_box |\n       ty::ty_evec(_, ty::vstore_box) |\n       ty::ty_estr(ty::vstore_box) => {\n-        decr_refcnt_maybe_free(bcx, v, t)\n+        decr_refcnt_maybe_free(bcx, v, None, t)\n       }\n       _ => bcx.tcx().sess.bug(\"drop_ty_immediate: non-box ty\")\n     }\n@@ -520,7 +520,7 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     let bcx = match ty::get(t).sty {\n       ty::ty_box(_) | ty::ty_opaque_box |\n       ty::ty_estr(ty::vstore_box) | ty::ty_evec(_, ty::vstore_box) => {\n-        decr_refcnt_maybe_free(bcx, Load(bcx, v0), t)\n+        decr_refcnt_maybe_free(bcx, Load(bcx, v0), Some(v0), t)\n       }\n       ty::ty_uniq(_) |\n       ty::ty_evec(_, ty::vstore_uniq) | ty::ty_estr(ty::vstore_uniq) => {\n@@ -545,8 +545,10 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n         closure::make_closure_glue(bcx, v0, t, drop_ty)\n       }\n       ty::ty_trait(_, _, ty::BoxTraitStore, _) => {\n-        let llbox = Load(bcx, GEPi(bcx, v0, [0u, abi::trt_field_box]));\n-        decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n+          let llbox_ptr = GEPi(bcx, v0, [0u, abi::trt_field_box]);\n+          let llbox = Load(bcx, llbox_ptr);\n+          decr_refcnt_maybe_free(bcx, llbox, Some(llbox_ptr),\n+                                 ty::mk_opaque_box(ccx.tcx))\n       }\n       ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n           let lluniquevalue = GEPi(bcx, v0, [0, abi::trt_field_box]);\n@@ -580,7 +582,10 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n     build_return(bcx);\n }\n \n-pub fn decr_refcnt_maybe_free(bcx: block, box_ptr: ValueRef, t: ty::t)\n+// box_ptr_ptr is optional, it is constructed if not supplied.\n+pub fn decr_refcnt_maybe_free(bcx: block, box_ptr: ValueRef,\n+                              box_ptr_ptr: Option<ValueRef>,\n+                              t: ty::t)\n                            -> block {\n     let _icx = bcx.insn_ctxt(\"decr_refcnt_maybe_free\");\n     let ccx = bcx.ccx();\n@@ -590,7 +595,12 @@ pub fn decr_refcnt_maybe_free(bcx: block, box_ptr: ValueRef, t: ty::t)\n         let rc = Sub(bcx, Load(bcx, rc_ptr), C_int(ccx, 1));\n         Store(bcx, rc, rc_ptr);\n         let zero_test = ICmp(bcx, lib::llvm::IntEQ, C_int(ccx, 0), rc);\n-        with_cond(bcx, zero_test, |bcx| free_ty_immediate(bcx, box_ptr, t))\n+        do with_cond(bcx, zero_test) |bcx| {\n+            match box_ptr_ptr {\n+                Some(p) => free_ty(bcx, p, t),\n+                None => free_ty_immediate(bcx, box_ptr, t)\n+            }\n+        }\n     }\n }\n "}]}