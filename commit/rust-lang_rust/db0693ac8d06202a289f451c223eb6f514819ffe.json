{"sha": "db0693ac8d06202a289f451c223eb6f514819ffe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMDY5M2FjOGQwNjIwMmEyODlmNDUxYzIyM2ViNmY1MTQ4MTlmZmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-11T01:19:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-12T23:35:19Z"}, "message": "libsyntax: Tighten up expressions in patterns to only allow identifiers or literals (possibly with a minus).\n\nThis had very minimal fallout.", "tree": {"sha": "62a37a5077065acb55755dd0a8a5b35dd258fcef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62a37a5077065acb55755dd0a8a5b35dd258fcef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0693ac8d06202a289f451c223eb6f514819ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0693ac8d06202a289f451c223eb6f514819ffe", "html_url": "https://github.com/rust-lang/rust/commit/db0693ac8d06202a289f451c223eb6f514819ffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0693ac8d06202a289f451c223eb6f514819ffe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d3559e6455757c5508bba5b5add69477ebac53e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3559e6455757c5508bba5b5add69477ebac53e", "html_url": "https://github.com/rust-lang/rust/commit/5d3559e6455757c5508bba5b5add69477ebac53e"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "052246a7744ce4e69745034958f2be1357078d03", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=db0693ac8d06202a289f451c223eb6f514819ffe", "patch": "@@ -486,11 +486,11 @@ pub fn from_str_bytes_common<T:NumCast+Zero+One+Eq+Ord+Copy+Div<T,T>+\n         }\n     }\n \n-    let (start, accum_positive) = match buf[0] {\n-      '-' as u8 if !negative => return None,\n-      '-' as u8 => (1u, false),\n-      '+' as u8 => (1u, true),\n-       _        => (0u, true)\n+    let (start, accum_positive) = match buf[0] as char {\n+      '-' if !negative => return None,\n+      '-' => (1u, false),\n+      '+' => (1u, true),\n+       _  => (0u, true)\n     };\n \n     // Initialize accumulator with signed zero for floating point parsing to"}, {"sha": "11ac8c14fe46dafa5d8c540dcd19a306c60866f7", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=db0693ac8d06202a289f451c223eb6f514819ffe", "patch": "@@ -257,12 +257,12 @@ pub mod ct {\n         let mut flags = ~[];\n \n         while i < lim {\n-            let f = match s[i] {\n-                '-' as u8 => FlagLeftJustify,\n-                '0' as u8 => FlagLeftZeroPad,\n-                ' ' as u8 => FlagSpaceForSign,\n-                '+' as u8 => FlagSignAlways,\n-                '#' as u8 => FlagAlternate,\n+            let f = match s[i] as char {\n+                '-' => FlagLeftJustify,\n+                '0' => FlagLeftZeroPad,\n+                ' ' => FlagSpaceForSign,\n+                '+' => FlagSignAlways,\n+                '#' => FlagAlternate,\n                 _ => break\n             };\n \n@@ -313,18 +313,18 @@ pub mod ct {\n \n         // FIXME (#2249): Do we really want two signed types here?\n         // How important is it to be printf compatible?\n-        let t = match s[i] {\n-            'b' as u8 => TyBool,\n-            's' as u8 => TyStr,\n-            'c' as u8 => TyChar,\n-            'd' as u8 | 'i' as u8 => TyInt(Signed),\n-            'u' as u8 => TyInt(Unsigned),\n-            'x' as u8 => TyHex(CaseLower),\n-            'X' as u8 => TyHex(CaseUpper),\n-            't' as u8 => TyBits,\n-            'o' as u8 => TyOctal,\n-            'f' as u8 => TyFloat,\n-            '?' as u8 => TyPoly,\n+        let t = match s[i] as char {\n+            'b' => TyBool,\n+            's' => TyStr,\n+            'c' => TyChar,\n+            'd' | 'i' => TyInt(Signed),\n+            'u' => TyInt(Unsigned),\n+            'x' => TyHex(CaseLower),\n+            'X' => TyHex(CaseUpper),\n+            't' => TyBits,\n+            'o' => TyOctal,\n+            'f' => TyFloat,\n+            '?' => TyPoly,\n             _ => err(~\"unknown type in conversion: \" + s.substr(i, 1))\n         };\n "}, {"sha": "b35ae169e1a26d08449843fe0601ed51c5e14095", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0693ac8d06202a289f451c223eb6f514819ffe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=db0693ac8d06202a289f451c223eb6f514819ffe", "patch": "@@ -915,6 +915,24 @@ pub impl Parser {\n         codemap::spanned { node: lit, span: mk_sp(lo, self.last_span.hi) }\n     }\n \n+    // matches '-' lit | lit\n+    fn parse_literal_maybe_minus(&self) -> @expr {\n+        let minus_lo = self.span.lo;\n+        let minus_present = self.eat(&token::BINOP(token::MINUS));\n+\n+        let lo = self.span.lo;\n+        let literal = @self.parse_lit();\n+        let hi = self.span.hi;\n+        let expr = self.mk_expr(lo, hi, expr_lit(literal));\n+\n+        if minus_present {\n+            let minus_hi = self.span.hi;\n+            self.mk_expr(minus_lo, minus_hi, expr_unary(neg, expr))\n+        } else {\n+            expr\n+        }\n+    }\n+\n     // parse a path into a vector of idents, whether the path starts\n     // with ::, and a span.\n     fn parse_path(&self) -> (~[ast::ident],bool,span) {\n@@ -2360,10 +2378,19 @@ pub impl Parser {\n                 || self.is_keyword(&~\"true\")\n                 || self.is_keyword(&~\"false\")\n             {\n-                // parse an expression pattern or exp .. exp\n-                let val = self.parse_expr_res(RESTRICT_NO_BAR_OP);\n+                // Parse an expression pattern or exp .. exp.\n+                //\n+                // These expressions are limited to literals (possibly\n+                // preceded by unary-minus) or identifiers.\n+                let val = self.parse_literal_maybe_minus();\n                 if self.eat(&token::DOTDOT) {\n-                    let end = self.parse_expr_res(RESTRICT_NO_BAR_OP);\n+                    let end = if is_ident_or_path(&tok) {\n+                        let path = self.parse_path_with_tps(true);\n+                        let hi = self.span.hi;\n+                        self.mk_expr(lo, hi, expr_path(path))\n+                    } else {\n+                        self.parse_literal_maybe_minus()\n+                    };\n                     pat = pat_range(val, end);\n                 } else {\n                     pat = pat_lit(val);"}]}