{"sha": "124144704fa5d3f08563430d5c24abb23da24423", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDE0NDcwNGZhNWQzZjA4NTYzNDMwZDVjMjRhYmIyM2RhMjQ0MjM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-31T16:16:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-02T11:40:43Z"}, "message": "nix rustc_target::abi::* reexport in ty::layout", "tree": {"sha": "537bfd95b9e841b2de733617fe771ed258c0530a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537bfd95b9e841b2de733617fe771ed258c0530a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/124144704fa5d3f08563430d5c24abb23da24423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/124144704fa5d3f08563430d5c24abb23da24423", "html_url": "https://github.com/rust-lang/rust/commit/124144704fa5d3f08563430d5c24abb23da24423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/124144704fa5d3f08563430d5c24abb23da24423/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "127a11a344eb59b5aea1464e98257c262dcba967", "url": "https://api.github.com/repos/rust-lang/rust/commits/127a11a344eb59b5aea1464e98257c262dcba967", "html_url": "https://github.com/rust-lang/rust/commit/127a11a344eb59b5aea1464e98257c262dcba967"}], "stats": {"total": 702, "additions": 333, "deletions": 369}, "files": [{"sha": "8e9c5f25ccb7115d44791af943b113abcd4f7db0", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -10,17 +10,15 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_middle::bug;\n-use rustc_middle::ty::layout::{self};\n+pub use rustc_middle::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc_middle::ty::Ty;\n use rustc_target::abi::call::ArgAbi;\n-use rustc_target::abi::{HasDataLayout, LayoutOf};\n-\n-use libc::c_uint;\n-\n-pub use rustc_middle::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n pub use rustc_target::abi::call::*;\n+use rustc_target::abi::{self, HasDataLayout, Int, LayoutOf};\n pub use rustc_target::spec::abi::Abi;\n \n+use libc::c_uint;\n+\n macro_rules! for_each_kind {\n     ($flags: ident, $f: ident, $($kind: ident),+) => ({\n         $(if $flags.contains(ArgAttribute::$kind) { $f(llvm::Attribute::$kind) })+\n@@ -450,11 +448,11 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n             PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(bx))),\n             _ => {}\n         }\n-        if let layout::Abi::Scalar(ref scalar) = self.ret.layout.abi {\n+        if let abi::Abi::Scalar(ref scalar) = self.ret.layout.abi {\n             // If the value is a boolean, the range is 0..2 and that ultimately\n             // become 0..0 when the type becomes i1, which would be rejected\n             // by the LLVM verifier.\n-            if let layout::Int(..) = scalar.value {\n+            if let Int(..) = scalar.value {\n                 if !scalar.is_bool() {\n                     let range = scalar.valid_range_exclusive(bx);\n                     if range.start != range.end {"}, {"sha": "da9060f043f811aef7a5c3efea8cecb21ce49e85", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -16,9 +16,10 @@ use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::{self, Align, Size, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config::{self, Sanitizer};\n+use rustc_target::abi::{self, Align, Size};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;\n@@ -60,8 +61,8 @@ impl BackendTypes for Builder<'_, 'll, 'tcx> {\n     type DIVariable = <CodegenCx<'ll, 'tcx> as BackendTypes>::DIVariable;\n }\n \n-impl ty::layout::HasDataLayout for Builder<'_, '_, '_> {\n-    fn data_layout(&self) -> &ty::layout::TargetDataLayout {\n+impl abi::HasDataLayout for Builder<'_, '_, '_> {\n+    fn data_layout(&self) -> &abi::TargetDataLayout {\n         self.cx.data_layout()\n     }\n }\n@@ -84,7 +85,7 @@ impl HasTargetSpec for Builder<'_, '_, 'tcx> {\n     }\n }\n \n-impl ty::layout::LayoutOf for Builder<'_, '_, 'tcx> {\n+impl abi::LayoutOf for Builder<'_, '_, 'tcx> {\n     type Ty = Ty<'tcx>;\n     type TyAndLayout = TyAndLayout<'tcx>;\n \n@@ -435,17 +436,17 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         fn scalar_load_metadata<'a, 'll, 'tcx>(\n             bx: &mut Builder<'a, 'll, 'tcx>,\n             load: &'ll Value,\n-            scalar: &layout::Scalar,\n+            scalar: &abi::Scalar,\n         ) {\n             let vr = scalar.valid_range.clone();\n             match scalar.value {\n-                layout::Int(..) => {\n+                abi::Int(..) => {\n                     let range = scalar.valid_range_exclusive(bx);\n                     if range.start != range.end {\n                         bx.range_metadata(load, range);\n                     }\n                 }\n-                layout::Pointer if vr.start() < vr.end() && !vr.contains(&0) => {\n+                abi::Pointer if vr.start() < vr.end() && !vr.contains(&0) => {\n                     bx.nonnull_metadata(load);\n                 }\n                 _ => {}\n@@ -465,16 +466,16 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             let llval = const_llval.unwrap_or_else(|| {\n                 let load = self.load(place.llval, place.align);\n-                if let layout::Abi::Scalar(ref scalar) = place.layout.abi {\n+                if let abi::Abi::Scalar(ref scalar) = place.layout.abi {\n                     scalar_load_metadata(self, load, scalar);\n                 }\n                 load\n             });\n             OperandValue::Immediate(to_immediate(self, llval, place.layout))\n-        } else if let layout::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n+        } else if let abi::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n             let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n \n-            let mut load = |i, scalar: &layout::Scalar, align| {\n+            let mut load = |i, scalar: &abi::Scalar, align| {\n                 let llptr = self.struct_gep(place.llval, i as u64);\n                 let load = self.load(llptr, align);\n                 scalar_load_metadata(self, load, scalar);"}, {"sha": "1415fedf11a275161d72330c9962634c08b51f48", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -2,26 +2,24 @@\n \n //! Code that is useful in various codegen modules.\n \n-use crate::consts;\n+use crate::consts::{self, const_alloc_to_llvm};\n+pub use crate::context::CodegenCx;\n use crate::llvm::{self, BasicBlock, Bool, ConstantInt, False, OperandBundleDef, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n-use log::debug;\n-use rustc_codegen_ssa::traits::*;\n-use rustc_middle::bug;\n \n-use crate::consts::const_alloc_to_llvm;\n+use rustc_ast::ast::Mutability;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n+use rustc_codegen_ssa::traits::*;\n+use rustc_middle::bug;\n use rustc_middle::mir::interpret::{Allocation, GlobalAlloc, Scalar};\n-use rustc_middle::ty::layout::{self, HasDataLayout, LayoutOf, Size, TyAndLayout};\n-\n-use libc::{c_char, c_uint};\n-\n-use rustc_ast::ast::Mutability;\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::{self, HasDataLayout, LayoutOf, Pointer, Size};\n \n-pub use crate::context::CodegenCx;\n+use libc::{c_char, c_uint};\n+use log::debug;\n \n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n@@ -229,12 +227,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         })\n     }\n \n-    fn scalar_to_backend(\n-        &self,\n-        cv: Scalar,\n-        layout: &layout::Scalar,\n-        llty: &'ll Type,\n-    ) -> &'ll Value {\n+    fn scalar_to_backend(&self, cv: Scalar, layout: &abi::Scalar, llty: &'ll Type) -> &'ll Value {\n         let bitsize = if layout.is_bool() { 1 } else { layout.value.size(self).bits() };\n         match cv {\n             Scalar::Raw { size: 0, .. } => {\n@@ -244,7 +237,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             Scalar::Raw { data, size } => {\n                 assert_eq!(size as u64, layout.value.size(self).bytes());\n                 let llval = self.const_uint_big(self.type_ix(bitsize), data);\n-                if layout.value == layout::Pointer {\n+                if layout.value == Pointer {\n                     unsafe { llvm::LLVMConstIntToPtr(llval, llty) }\n                 } else {\n                     self.const_bitcast(llval, llty)\n@@ -278,7 +271,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         1,\n                     )\n                 };\n-                if layout.value != layout::Pointer {\n+                if layout.value != Pointer {\n                     unsafe { llvm::LLVMConstPtrToInt(llval, llty) }\n                 } else {\n                     self.const_bitcast(llval, llty)"}, {"sha": "2d5564abfb2c8c6eb6d0f63cfb22b764615d7d86", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -16,12 +16,11 @@ use rustc_middle::mir::interpret::{\n     read_target_uint, Allocation, ConstValue, ErrorHandled, Pointer,\n };\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_middle::ty::layout::{self, Align, LayoutOf, Size};\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::HasDataLayout;\n+use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size};\n \n use std::ffi::CStr;\n \n@@ -56,7 +55,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n             as u64;\n         llvals.push(cx.scalar_to_backend(\n             Pointer::new(alloc_id, Size::from_bytes(ptr_offset)).into(),\n-            &layout::Scalar { value: layout::Primitive::Pointer, valid_range: 0..=!0 },\n+            &Scalar { value: Primitive::Pointer, valid_range: 0..=!0 },\n             cx.type_i8p(),\n         ));\n         next_offset = offset + pointer_size;"}, {"sha": "99a825823c3cdf582e753951ee216f6f10919b74", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -14,14 +14,13 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n use rustc_middle::mir::mono::CodegenUnit;\n-use rustc_middle::ty::layout::{\n-    HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyAndLayout, VariantIdx,\n-};\n+use rustc_middle::ty::layout::{HasParamEnv, LayoutError, TyAndLayout};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::config::{self, CFGuard, DebugInfo};\n use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n use std::cell::{Cell, RefCell};\n@@ -817,8 +816,8 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n     }\n }\n \n-impl ty::layout::HasDataLayout for CodegenCx<'ll, 'tcx> {\n-    fn data_layout(&self) -> &ty::layout::TargetDataLayout {\n+impl HasDataLayout for CodegenCx<'ll, 'tcx> {\n+    fn data_layout(&self) -> &TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }"}, {"sha": "a9e21c056a3eba4fbcac2c5a8fdefd043248cee9", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 29, "deletions": 39, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -34,17 +34,17 @@ use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::{self, Field, GeneratorLayout};\n-use rustc_middle::ty::layout::{\n-    self, Align, Integer, IntegerExt, LayoutOf, PrimitiveExt, Size, TyAndLayout, VariantIdx,\n-};\n+use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::{self, FileName, Span};\n-use rustc_target::abi::HasDataLayout;\n+use rustc_target::abi::{Abi, Align, DiscriminantKind, HasDataLayout, Integer, LayoutOf};\n+use rustc_target::abi::{Int, Pointer, F32, F64};\n+use rustc_target::abi::{Primitive, Size, VariantIdx, Variants};\n \n use libc::{c_longlong, c_uint};\n use std::collections::hash_map::Entry;\n@@ -1364,7 +1364,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n         };\n \n         match self.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 if let ty::Adt(adt, _) = &self.enum_type.kind {\n                     if adt.variants.is_empty() {\n                         return vec![];\n@@ -1399,8 +1399,8 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     discriminant: None,\n                 }]\n             }\n-            layout::Variants::Multiple {\n-                discr_kind: layout::DiscriminantKind::Tag,\n+            Variants::Multiple {\n+                discr_kind: DiscriminantKind::Tag,\n                 discr_index,\n                 ref variants,\n                 ..\n@@ -1457,9 +1457,9 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     })\n                     .collect()\n             }\n-            layout::Variants::Multiple {\n+            Variants::Multiple {\n                 discr_kind:\n-                    layout::DiscriminantKind::Niche { ref niche_variants, niche_start, dataful_variant },\n+                    DiscriminantKind::Niche { ref niche_variants, niche_start, dataful_variant },\n                 ref discr,\n                 ref variants,\n                 discr_index,\n@@ -1592,7 +1592,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n // Creates `MemberDescription`s for the fields of a single enum variant.\n struct VariantMemberDescriptionFactory<'ll, 'tcx> {\n     /// Cloned from the `layout::Struct` describing the variant.\n-    offsets: Vec<layout::Size>,\n+    offsets: Vec<Size>,\n     args: Vec<(String, Ty<'tcx>)>,\n     discriminant_type_metadata: Option<&'ll DIType>,\n     span: Span,\n@@ -1777,7 +1777,7 @@ fn prepare_enum_metadata(\n     // <unknown>\n     let file_metadata = unknown_file_metadata(cx);\n \n-    let discriminant_type_metadata = |discr: layout::Primitive| {\n+    let discriminant_type_metadata = |discr: Primitive| {\n         let enumerators_metadata: Vec<_> = match enum_type.kind {\n             ty::Adt(def, _) => def\n                 .discriminants(cx.tcx)\n@@ -1870,27 +1870,20 @@ fn prepare_enum_metadata(\n     let layout = cx.layout_of(enum_type);\n \n     if let (\n-        &layout::Abi::Scalar(_),\n-        &layout::Variants::Multiple {\n-            discr_kind: layout::DiscriminantKind::Tag, ref discr, ..\n-        },\n+        &Abi::Scalar(_),\n+        &Variants::Multiple { discr_kind: DiscriminantKind::Tag, ref discr, .. },\n     ) = (&layout.abi, &layout.variants)\n     {\n         return FinalMetadata(discriminant_type_metadata(discr.value));\n     }\n \n     if use_enum_fallback(cx) {\n         let discriminant_type_metadata = match layout.variants {\n-            layout::Variants::Single { .. }\n-            | layout::Variants::Multiple {\n-                discr_kind: layout::DiscriminantKind::Niche { .. },\n-                ..\n-            } => None,\n-            layout::Variants::Multiple {\n-                discr_kind: layout::DiscriminantKind::Tag,\n-                ref discr,\n-                ..\n-            } => Some(discriminant_type_metadata(discr.value)),\n+            Variants::Single { .. }\n+            | Variants::Multiple { discr_kind: DiscriminantKind::Niche { .. }, .. } => None,\n+            Variants::Multiple { discr_kind: DiscriminantKind::Tag, ref discr, .. } => {\n+                Some(discriminant_type_metadata(discr.value))\n+            }\n         };\n \n         let enum_metadata = {\n@@ -1938,10 +1931,10 @@ fn prepare_enum_metadata(\n     };\n     let discriminator_metadata = match layout.variants {\n         // A single-variant enum has no discriminant.\n-        layout::Variants::Single { .. } => None,\n+        Variants::Single { .. } => None,\n \n-        layout::Variants::Multiple {\n-            discr_kind: layout::DiscriminantKind::Niche { .. },\n+        Variants::Multiple {\n+            discr_kind: DiscriminantKind::Niche { .. },\n             ref discr,\n             discr_index,\n             ..\n@@ -1951,10 +1944,10 @@ fn prepare_enum_metadata(\n             let align = discr.value.align(cx);\n \n             let discr_type = match discr.value {\n-                layout::Int(t, _) => t,\n-                layout::F32 => Integer::I32,\n-                layout::F64 => Integer::I64,\n-                layout::Pointer => cx.data_layout().ptr_sized_integer(),\n+                Int(t, _) => t,\n+                F32 => Integer::I32,\n+                F64 => Integer::I64,\n+                Pointer => cx.data_layout().ptr_sized_integer(),\n             }\n             .to_ty(cx.tcx, false);\n \n@@ -1976,11 +1969,8 @@ fn prepare_enum_metadata(\n             }\n         }\n \n-        layout::Variants::Multiple {\n-            discr_kind: layout::DiscriminantKind::Tag,\n-            ref discr,\n-            discr_index,\n-            ..\n+        Variants::Multiple {\n+            discr_kind: DiscriminantKind::Tag, ref discr, discr_index, ..\n         } => {\n             let discr_type = discr.value.to_ty(cx.tcx);\n             let (size, align) = cx.size_and_align_of(discr_type);\n@@ -2005,8 +1995,8 @@ fn prepare_enum_metadata(\n     };\n \n     let mut outer_fields = match layout.variants {\n-        layout::Variants::Single { .. } => vec![],\n-        layout::Variants::Multiple { .. } => {\n+        Variants::Single { .. } => vec![],\n+        Variants::Multiple { .. } => {\n             let tuple_mdf = TupleMemberDescriptionFactory {\n                 ty: enum_type,\n                 component_types: outer_field_tys,"}, {"sha": "f04ac586504111817ddf6b774e76b35999c24d1b", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -8,35 +8,35 @@ use self::namespace::mangled_name_of_instance;\n use self::type_names::compute_debuginfo_type_name;\n use self::utils::{create_DIArray, is_node_local_to_unit, DIB};\n \n+use crate::abi::FnAbi;\n+use crate::builder::Builder;\n+use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{\n     DIArray, DIBuilder, DIFile, DIFlags, DILexicalBlock, DISPFlags, DIScope, DIType, DIVariable,\n };\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-\n-use crate::abi::FnAbi;\n-use crate::builder::Builder;\n-use crate::common::CodegenCx;\n use crate::value::Value;\n+\n+use rustc_ast::ast;\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n+use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n+use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty};\n use rustc_session::config::{self, DebugInfo};\n+use rustc_span::symbol::Symbol;\n+use rustc_span::{self, BytePos, Span};\n+use rustc_target::abi::{LayoutOf, Primitive, Size};\n \n use libc::c_uint;\n use log::debug;\n-use std::cell::RefCell;\n-\n-use rustc_ast::ast;\n-use rustc_codegen_ssa::traits::*;\n-use rustc_middle::ty::layout::{self, HasTyCtxt, LayoutOf, Size};\n-use rustc_span::symbol::Symbol;\n-use rustc_span::{self, BytePos, Span};\n use smallvec::SmallVec;\n+use std::cell::RefCell;\n \n mod create_scope_map;\n pub mod gdb;\n@@ -60,7 +60,7 @@ pub struct CrateDebugContext<'a, 'tcx> {\n     llmod: &'a llvm::Module,\n     builder: &'a mut DIBuilder<'a>,\n     created_files: RefCell<FxHashMap<(Option<String>, Option<String>), &'a DIFile>>,\n-    created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), &'a DIType>>,\n+    created_enum_disr_types: RefCell<FxHashMap<(DefId, Primitive), &'a DIType>>,\n \n     type_map: RefCell<TypeMap<'a, 'tcx>>,\n     namespace_map: RefCell<DefIdMap<&'a DIScope>>,"}, {"sha": "bc7a9c566b47627142ab3d2a950604c1fda5f325", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -7,23 +7,22 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::va_arg::emit_va_arg;\n use crate::value::Value;\n+\n use rustc_ast::ast;\n use rustc_codegen_ssa::base::{compare_simd_types, to_immediate, wants_msvc_seh};\n+use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n+use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_hir as hir;\n-use rustc_middle::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf, Primitive};\n+use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n-use rustc_target::abi::HasDataLayout;\n-\n-use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n-use rustc_codegen_ssa::traits::*;\n-\n use rustc_span::Span;\n+use rustc_target::abi::{self, HasDataLayout, LayoutOf, Primitive};\n \n use std::cmp::Ordering;\n use std::{i128, iter, u128};\n@@ -145,7 +144,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"va_arg\" => {\n                 match fn_abi.ret.layout.abi {\n-                    layout::Abi::Scalar(ref scalar) => {\n+                    abi::Abi::Scalar(ref scalar) => {\n                         match scalar.value {\n                             Primitive::Int(..) => {\n                                 if self.cx().size_of(ret_ty).bytes() < 4 {"}, {"sha": "29389b44adc27e1d830d82430efc9a55e4ddaf6b", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -7,11 +7,11 @@ use crate::type_of::LayoutLlvmExt;\n use log::debug;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+pub use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{Linkage, Visibility};\n-use rustc_middle::ty::layout::{FnAbiExt, LayoutOf};\n+use rustc_middle::ty::layout::FnAbiExt;\n use rustc_middle::ty::{Instance, TypeFoldable};\n-\n-pub use rustc_middle::mir::mono::MonoItem;\n+use rustc_target::abi::LayoutOf;\n \n impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn predefine_static("}, {"sha": "854eff31733805e349062e7876efd4889b756cc9", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -12,9 +12,10 @@ use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_middle::bug;\n-use rustc_middle::ty::layout::{self, Align, Size, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Ty;\n use rustc_target::abi::call::{CastTarget, FnAbi, Reg};\n+use rustc_target::abi::{Align, Integer, Size};\n \n use std::fmt;\n use std::ptr;\n@@ -114,14 +115,14 @@ impl CodegenCx<'ll, 'tcx> {\n \n     crate fn type_pointee_for_align(&self, align: Align) -> &'ll Type {\n         // FIXME(eddyb) We could find a better approximation if ity.align < align.\n-        let ity = layout::Integer::approximate_align(self, align);\n+        let ity = Integer::approximate_align(self, align);\n         self.type_from_integer(ity)\n     }\n \n     /// Return a LLVM type that has at most the required alignment,\n     /// and exactly the required size, as a best-effort padding array.\n     crate fn type_padding_filler(&self, size: Size, align: Align) -> &'ll Type {\n-        let unit = layout::Integer::approximate_align(self, align);\n+        let unit = Integer::approximate_align(self, align);\n         let size = size.bytes();\n         let unit_size = unit.size().bytes();\n         assert_eq!(size % unit_size, 0);"}, {"sha": "f475ea741c893253eea7561579e4dd3363762b9d", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,10 +4,12 @@ use crate::type_::Type;\n use log::debug;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n-use rustc_middle::ty::layout::{self, Align, FnAbiExt, LayoutOf, PointeeInfo, Size, TyAndLayout};\n+use rustc_middle::ty::layout::{FnAbiExt, TyAndLayout};\n use rustc_middle::ty::print::obsolete::DefPathBasedNames;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n-use rustc_target::abi::TyAndLayoutMethods;\n+use rustc_target::abi::{Abi, Align, FieldsShape};\n+use rustc_target::abi::{Int, Pointer, F32, F64};\n+use rustc_target::abi::{LayoutOf, PointeeInfo, Scalar, Size, TyAndLayoutMethods, Variants};\n \n use std::fmt::Write;\n \n@@ -17,8 +19,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n     defer: &mut Option<(&'a Type, TyAndLayout<'tcx>)>,\n ) -> &'a Type {\n     match layout.abi {\n-        layout::Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n-        layout::Abi::Vector { ref element, count } => {\n+        Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n+        Abi::Vector { ref element, count } => {\n             // LLVM has a separate type for 64-bit SIMD vectors on X86 called\n             // `x86_mmx` which is needed for some SIMD operations. As a bit of a\n             // hack (all SIMD definitions are super unstable anyway) we\n@@ -37,7 +39,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n                 return cx.type_vector(element, count);\n             }\n         }\n-        layout::Abi::ScalarPair(..) => {\n+        Abi::ScalarPair(..) => {\n             return cx.type_struct(\n                 &[\n                     layout.scalar_pair_element_llvm_type(cx, 0, false),\n@@ -46,7 +48,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n                 false,\n             );\n         }\n-        layout::Abi::Uninhabited | layout::Abi::Aggregate { .. } => {}\n+        Abi::Uninhabited | Abi::Aggregate { .. } => {}\n     }\n \n     let name = match layout.ty.kind {\n@@ -61,14 +63,14 @@ fn uncached_llvm_type<'a, 'tcx>(\n             let mut name = String::with_capacity(32);\n             let printer = DefPathBasedNames::new(cx.tcx, true, true);\n             printer.push_type_name(layout.ty, &mut name, false);\n-            if let (&ty::Adt(def, _), &layout::Variants::Single { index })\n+            if let (&ty::Adt(def, _), &Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {\n                 if def.is_enum() && !def.variants.is_empty() {\n                     write!(&mut name, \"::{}\", def.variants[index].ident).unwrap();\n                 }\n             }\n-            if let (&ty::Generator(_, substs, _), &layout::Variants::Single { index })\n+            if let (&ty::Generator(_, substs, _), &Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {\n                 write!(&mut name, \"::{}\", substs.as_generator().variant_name(index)).unwrap();\n@@ -79,7 +81,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n     };\n \n     match layout.fields {\n-        layout::FieldsShape::Union(_) => {\n+        FieldsShape::Union(_) => {\n             let fill = cx.type_padding_filler(layout.size, layout.align.abi);\n             let packed = false;\n             match name {\n@@ -91,10 +93,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n                 }\n             }\n         }\n-        layout::FieldsShape::Array { count, .. } => {\n-            cx.type_array(layout.field(cx, 0).llvm_type(cx), count)\n-        }\n-        layout::FieldsShape::Arbitrary { .. } => match name {\n+        FieldsShape::Array { count, .. } => cx.type_array(layout.field(cx, 0).llvm_type(cx), count),\n+        FieldsShape::Arbitrary { .. } => match name {\n             None => {\n                 let (llfields, packed) = struct_llfields(cx, layout);\n                 cx.type_struct(&llfields, packed)\n@@ -189,7 +189,7 @@ pub trait LayoutLlvmExt<'tcx> {\n     fn scalar_llvm_type_at<'a>(\n         &self,\n         cx: &CodegenCx<'a, 'tcx>,\n-        scalar: &layout::Scalar,\n+        scalar: &Scalar,\n         offset: Size,\n     ) -> &'a Type;\n     fn scalar_pair_element_llvm_type<'a>(\n@@ -205,19 +205,16 @@ pub trait LayoutLlvmExt<'tcx> {\n impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n     fn is_llvm_immediate(&self) -> bool {\n         match self.abi {\n-            layout::Abi::Scalar(_) | layout::Abi::Vector { .. } => true,\n-            layout::Abi::ScalarPair(..) => false,\n-            layout::Abi::Uninhabited | layout::Abi::Aggregate { .. } => self.is_zst(),\n+            Abi::Scalar(_) | Abi::Vector { .. } => true,\n+            Abi::ScalarPair(..) => false,\n+            Abi::Uninhabited | Abi::Aggregate { .. } => self.is_zst(),\n         }\n     }\n \n     fn is_llvm_scalar_pair(&self) -> bool {\n         match self.abi {\n-            layout::Abi::ScalarPair(..) => true,\n-            layout::Abi::Uninhabited\n-            | layout::Abi::Scalar(_)\n-            | layout::Abi::Vector { .. }\n-            | layout::Abi::Aggregate { .. } => false,\n+            Abi::ScalarPair(..) => true,\n+            Abi::Uninhabited | Abi::Scalar(_) | Abi::Vector { .. } | Abi::Aggregate { .. } => false,\n         }\n     }\n \n@@ -233,7 +230,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n     /// of that field's type - this is useful for taking the address of\n     /// that field and ensuring the struct has the right alignment.\n     fn llvm_type<'a>(&self, cx: &CodegenCx<'a, 'tcx>) -> &'a Type {\n-        if let layout::Abi::Scalar(ref scalar) = self.abi {\n+        if let Abi::Scalar(ref scalar) = self.abi {\n             // Use a different cache for scalars because pointers to DSTs\n             // can be either fat or thin (data pointers of fat pointers).\n             if let Some(&llty) = cx.scalar_lltypes.borrow().get(&self.ty) {\n@@ -255,7 +252,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n \n         // Check the cache.\n         let variant_index = match self.variants {\n-            layout::Variants::Single { index } => Some(index),\n+            Variants::Single { index } => Some(index),\n             _ => None,\n         };\n         if let Some(&llty) = cx.lltypes.borrow().get(&(self.ty, variant_index)) {\n@@ -293,7 +290,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n     }\n \n     fn immediate_llvm_type<'a>(&self, cx: &CodegenCx<'a, 'tcx>) -> &'a Type {\n-        if let layout::Abi::Scalar(ref scalar) = self.abi {\n+        if let Abi::Scalar(ref scalar) = self.abi {\n             if scalar.is_bool() {\n                 return cx.type_i1();\n             }\n@@ -304,14 +301,14 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n     fn scalar_llvm_type_at<'a>(\n         &self,\n         cx: &CodegenCx<'a, 'tcx>,\n-        scalar: &layout::Scalar,\n+        scalar: &Scalar,\n         offset: Size,\n     ) -> &'a Type {\n         match scalar.value {\n-            layout::Int(i, _) => cx.type_from_integer(i),\n-            layout::F32 => cx.type_f32(),\n-            layout::F64 => cx.type_f64(),\n-            layout::Pointer => {\n+            Int(i, _) => cx.type_from_integer(i),\n+            F32 => cx.type_f32(),\n+            F64 => cx.type_f64(),\n+            Pointer => {\n                 // If we know the alignment, pick something better than i8.\n                 let pointee = if let Some(pointee) = self.pointee_info_at(cx, offset) {\n                     cx.type_pointee_for_align(pointee.align)\n@@ -343,7 +340,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n         }\n \n         let (a, b) = match self.abi {\n-            layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n+            Abi::ScalarPair(ref a, ref b) => (a, b),\n             _ => bug!(\"TyAndLayout::scalar_pair_element_llty({:?}): not applicable\", self),\n         };\n         let scalar = [a, b][index];\n@@ -365,21 +362,19 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n \n     fn llvm_field_index(&self, index: usize) -> u64 {\n         match self.abi {\n-            layout::Abi::Scalar(_) | layout::Abi::ScalarPair(..) => {\n+            Abi::Scalar(_) | Abi::ScalarPair(..) => {\n                 bug!(\"TyAndLayout::llvm_field_index({:?}): not applicable\", self)\n             }\n             _ => {}\n         }\n         match self.fields {\n-            layout::FieldsShape::Union(_) => {\n+            FieldsShape::Union(_) => {\n                 bug!(\"TyAndLayout::llvm_field_index({:?}): not applicable\", self)\n             }\n \n-            layout::FieldsShape::Array { .. } => index as u64,\n+            FieldsShape::Array { .. } => index as u64,\n \n-            layout::FieldsShape::Arbitrary { .. } => {\n-                1 + (self.fields.memory_index(index) as u64) * 2\n-            }\n+            FieldsShape::Arbitrary { .. } => 1 + (self.fields.memory_index(index) as u64) * 2,\n         }\n     }\n "}, {"sha": "8bc3579800ea81380214b01e823161a28bb8454b", "filename": "src/librustc_codegen_llvm/va_arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_llvm%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fva_arg.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -6,8 +6,9 @@ use rustc_codegen_ssa::mir::operand::OperandRef;\n use rustc_codegen_ssa::traits::{\n     BaseTypeMethods, BuilderMethods, ConstMethods, DerivedTypeMethods,\n };\n-use rustc_middle::ty::layout::{Align, HasDataLayout, HasTyCtxt, LayoutOf, Size};\n+use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n+use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size};\n \n #[allow(dead_code)]\n fn round_pointer_up_to_alignment("}, {"sha": "c68694ad688ccfad82401a523581ebfa87ccde62", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -38,7 +38,7 @@ use rustc_middle::middle::cstore::{self, LinkagePreference};\n use rustc_middle::middle::lang_items;\n use rustc_middle::middle::lang_items::StartFnLangItem;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n-use rustc_middle::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyAndLayout, VariantIdx};\n+use rustc_middle::ty::layout::{self, HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n@@ -47,6 +47,7 @@ use rustc_session::config::{self, EntryFnType, Lto};\n use rustc_session::Session;\n use rustc_span::Span;\n use rustc_symbol_mangling::test as symbol_names_test;\n+use rustc_target::abi::{Abi, Align, LayoutOf, Scalar, VariantIdx};\n \n use std::cmp;\n use std::ops::{Deref, DerefMut};\n@@ -343,7 +344,7 @@ pub fn to_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     val: Bx::Value,\n     layout: layout::TyAndLayout<'_>,\n ) -> Bx::Value {\n-    if let layout::Abi::Scalar(ref scalar) = layout.abi {\n+    if let Abi::Scalar(ref scalar) = layout.abi {\n         return to_immediate_scalar(bx, val, scalar);\n     }\n     val\n@@ -352,7 +353,7 @@ pub fn to_immediate<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn to_immediate_scalar<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     val: Bx::Value,\n-    scalar: &layout::Scalar,\n+    scalar: &Scalar,\n ) -> Bx::Value {\n     if scalar.is_bool() {\n         return bx.trunc(val, bx.cx().type_i1());"}, {"sha": "221f36fed362dab3d03e6a46db9e3861260e8b47", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -12,7 +12,8 @@ use rustc_middle::mir::visit::{\n };\n use rustc_middle::mir::{self, Location, TerminatorKind};\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::HasTyCtxt;\n+use rustc_target::abi::LayoutOf;\n \n pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx: &FunctionCx<'a, 'tcx, Bx>,"}, {"sha": "a09f803d02777bc4f7ec3975f582a44dc0cd4e2d", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -13,10 +13,11 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir;\n use rustc_middle::mir::AssertKind;\n-use rustc_middle::ty::layout::{self, FnAbiExt, HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::{FnAbiExt, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_span::{source_map::Span, symbol::Symbol};\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n+use rustc_target::abi::{self, LayoutOf};\n use rustc_target::spec::abi::Abi;\n \n use std::borrow::Cow;\n@@ -591,7 +592,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // we can do what we like. Here, we declare that transmuting\n                 // into an uninhabited type is impossible, so anything following\n                 // it must be unreachable.\n-                assert_eq!(fn_abi.ret.layout.abi, layout::Abi::Uninhabited);\n+                assert_eq!(fn_abi.ret.layout.abi, abi::Abi::Uninhabited);\n                 bx.unreachable();\n             }\n             return;\n@@ -994,7 +995,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // the load would just produce `OperandValue::Ref` instead\n                 // of the `OperandValue::Immediate` we need for the call.\n                 llval = bx.load(llval, align);\n-                if let layout::Abi::Scalar(ref scalar) = arg.layout.abi {\n+                if let abi::Abi::Scalar(ref scalar) = arg.layout.abi {\n                     if scalar.is_bool() {\n                         bx.range_metadata(llval, 0..2);\n                     }"}, {"sha": "298aa25f0321ff27bce6ca96b138e3cd32dcb87f", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,9 +3,10 @@ use crate::traits::*;\n use rustc_index::vec::Idx;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled};\n-use rustc_middle::ty::layout::{self, HasTyCtxt};\n+use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n+use rustc_target::abi::Abi;\n \n use super::FunctionCx;\n \n@@ -87,7 +88,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         if let Some(prim) = field.try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);\n                             let scalar = match layout.abi {\n-                                layout::Abi::Scalar(ref x) => x,\n+                                Abi::Scalar(ref x) => x,\n                                 _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout),\n                             };\n                             bx.scalar_to_backend(prim, scalar, bx.immediate_backend_type(layout))"}, {"sha": "5501ed5128d4d1237789066db5387f4275d6f79e", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,11 +3,10 @@ use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{LayoutOf, Size};\n use rustc_session::config::DebugInfo;\n-\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n+use rustc_target::abi::{LayoutOf, Size};\n \n use super::operand::OperandValue;\n use super::place::PlaceRef;"}, {"sha": "69f11ed57ac5db81e063c85d0b100f0f503ca558", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -8,8 +8,9 @@ use crate::MemFlags;\n \n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled, Pointer, Scalar};\n-use rustc_middle::ty::layout::{self, Align, LayoutOf, Size, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Ty;\n+use rustc_target::abi::{Abi, Align, LayoutOf, Size};\n \n use std::fmt;\n \n@@ -78,15 +79,15 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n         let val = match val {\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n-                    layout::Abi::Scalar(ref x) => x,\n+                    Abi::Scalar(ref x) => x,\n                     _ => bug!(\"from_const: invalid ByVal layout: {:#?}\", layout),\n                 };\n                 let llval = bx.scalar_to_backend(x, scalar, bx.immediate_backend_type(layout));\n                 OperandValue::Immediate(llval)\n             }\n             ConstValue::Slice { data, start, end } => {\n                 let a_scalar = match layout.abi {\n-                    layout::Abi::ScalarPair(ref a, _) => a,\n+                    Abi::ScalarPair(ref a, _) => a,\n                     _ => bug!(\"from_const: invalid ScalarPair layout: {:#?}\", layout),\n                 };\n                 let a = Scalar::from(Pointer::new(\n@@ -161,7 +162,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n         llval: V,\n         layout: TyAndLayout<'tcx>,\n     ) -> Self {\n-        let val = if let layout::Abi::ScalarPair(ref a, ref b) = layout.abi {\n+        let val = if let Abi::ScalarPair(ref a, ref b) = layout.abi {\n             debug!(\"Operand::from_immediate_or_packed_pair: unpacking {:?} @ {:?}\", llval, layout);\n \n             // Deconstruct the immediate aggregate.\n@@ -199,7 +200,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             }\n \n             // Extract a scalar component from a pair.\n-            (OperandValue::Pair(a_llval, b_llval), &layout::Abi::ScalarPair(ref a, ref b)) => {\n+            (OperandValue::Pair(a_llval, b_llval), &Abi::ScalarPair(ref a, ref b)) => {\n                 if offset.bytes() == 0 {\n                     assert_eq!(field.size, a.value.size(bx.cx()));\n                     OperandValue::Immediate(a_llval)\n@@ -211,7 +212,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             }\n \n             // `#[repr(simd)]` types are also immediate.\n-            (OperandValue::Immediate(llval), &layout::Abi::Vector { .. }) => {\n+            (OperandValue::Immediate(llval), &Abi::Vector { .. }) => {\n                 OperandValue::Immediate(bx.extract_element(llval, bx.cx().const_usize(i as u64)))\n             }\n \n@@ -305,7 +306,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n             }\n             OperandValue::Pair(a, b) => {\n                 let (a_scalar, b_scalar) = match dest.layout.abi {\n-                    layout::Abi::ScalarPair(ref a, ref b) => (a, b),\n+                    Abi::ScalarPair(ref a, ref b) => (a, b),\n                     _ => bug!(\"store_with_flags: invalid ScalarPair layout: {:#?}\", dest.layout),\n                 };\n                 let b_offset = a_scalar.value.size(bx).align_to(b_scalar.value.align(bx).abi);"}, {"sha": "461695129c2f37d573e0259acca8c10d416f9da6", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -8,8 +8,10 @@ use crate::MemFlags;\n \n use rustc_middle::mir;\n use rustc_middle::mir::tcx::PlaceTy;\n-use rustc_middle::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyAndLayout, VariantIdx};\n+use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n+use rustc_target::abi::{Abi, Align, DiscriminantKind, FieldsShape, Int};\n+use rustc_target::abi::{LayoutOf, VariantIdx, Variants};\n \n #[derive(Copy, Clone, Debug)]\n pub struct PlaceRef<'tcx, V> {\n@@ -66,7 +68,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     }\n \n     pub fn len<Cx: ConstMethods<'tcx, Value = V>>(&self, cx: &Cx) -> V {\n-        if let layout::FieldsShape::Array { count, .. } = self.layout.fields {\n+        if let FieldsShape::Array { count, .. } = self.layout.fields {\n             if self.layout.is_unsized() {\n                 assert_eq!(count, 0);\n                 self.llextra.unwrap()\n@@ -94,7 +96,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             // Unions and newtypes only use an offset of 0.\n             let llval = if offset.bytes() == 0 {\n                 self.llval\n-            } else if let layout::Abi::ScalarPair(ref a, ref b) = self.layout.abi {\n+            } else if let Abi::ScalarPair(ref a, ref b) = self.layout.abi {\n                 // Offsets have to match either first or second field.\n                 assert_eq!(offset, a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi));\n                 bx.struct_gep(self.llval, 1)\n@@ -198,15 +200,15 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             return bx.cx().const_undef(cast_to);\n         }\n         let (discr_scalar, discr_kind, discr_index) = match self.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 let discr_val = self\n                     .layout\n                     .ty\n                     .discriminant_for_variant(bx.cx().tcx(), index)\n                     .map_or(index.as_u32() as u128, |discr| discr.val);\n                 return bx.cx().const_uint_big(cast_to, discr_val);\n             }\n-            layout::Variants::Multiple { ref discr, ref discr_kind, discr_index, .. } => {\n+            Variants::Multiple { ref discr, ref discr_kind, discr_index, .. } => {\n                 (discr, discr_kind, discr_index)\n             }\n         };\n@@ -217,22 +219,18 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n \n         // Decode the discriminant (specifically if it's niche-encoded).\n         match *discr_kind {\n-            layout::DiscriminantKind::Tag => {\n+            DiscriminantKind::Tag => {\n                 let signed = match discr_scalar.value {\n                     // We use `i1` for bytes that are always `0` or `1`,\n                     // e.g., `#[repr(i8)] enum E { A, B }`, but we can't\n                     // let LLVM interpret the `i1` as signed, because\n                     // then `i1 1` (i.e., `E::B`) is effectively `i8 -1`.\n-                    layout::Int(_, signed) => !discr_scalar.is_bool() && signed,\n+                    Int(_, signed) => !discr_scalar.is_bool() && signed,\n                     _ => false,\n                 };\n                 bx.intcast(encoded_discr.immediate(), cast_to, signed)\n             }\n-            layout::DiscriminantKind::Niche {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n-            } => {\n+            DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start } => {\n                 // Rebase from niche values to discriminants, and check\n                 // whether the result is in range for the niche variants.\n                 let niche_llty = bx.cx().immediate_backend_type(encoded_discr.layout);\n@@ -311,14 +309,10 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n             return;\n         }\n         match self.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 assert_eq!(index, variant_index);\n             }\n-            layout::Variants::Multiple {\n-                discr_kind: layout::DiscriminantKind::Tag,\n-                discr_index,\n-                ..\n-            } => {\n+            Variants::Multiple { discr_kind: DiscriminantKind::Tag, discr_index, .. } => {\n                 let ptr = self.project_field(bx, discr_index);\n                 let to =\n                     self.layout.ty.discriminant_for_variant(bx.tcx(), variant_index).unwrap().val;\n@@ -328,9 +322,9 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     ptr.align,\n                 );\n             }\n-            layout::Variants::Multiple {\n+            Variants::Multiple {\n                 discr_kind:\n-                    layout::DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start },\n+                    DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start },\n                 discr_index,\n                 ..\n             } => {"}, {"sha": "23420c85c952b127fb4eff55de4af9d4a66743dd", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,10 +11,11 @@ use rustc_apfloat::{ieee, Float, Round, Status};\n use rustc_middle::middle::lang_items::ExchangeMallocFnLangItem;\n use rustc_middle::mir;\n use rustc_middle::ty::cast::{CastTy, IntTy};\n-use rustc_middle::ty::layout::{self, HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, Ty, TyCtxt};\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::sym;\n+use rustc_target::abi::{Abi, Int, LayoutOf, Variants};\n \n use std::{i128, u128};\n \n@@ -292,7 +293,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let r_t_out = CastTy::from_ty(cast.ty).expect(\"bad output type for cast\");\n                         let ll_t_in = bx.cx().immediate_backend_type(operand.layout);\n                         match operand.layout.variants {\n-                            layout::Variants::Single { index } => {\n+                            Variants::Single { index } => {\n                                 if let Some(discr) =\n                                     operand.layout.ty.discriminant_for_variant(bx.tcx(), index)\n                                 {\n@@ -311,13 +312,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     );\n                                 }\n                             }\n-                            layout::Variants::Multiple { .. } => {}\n+                            Variants::Multiple { .. } => {}\n                         }\n                         let llval = operand.immediate();\n \n                         let mut signed = false;\n-                        if let layout::Abi::Scalar(ref scalar) = operand.layout.abi {\n-                            if let layout::Int(_, s) = scalar.value {\n+                        if let Abi::Scalar(ref scalar) = operand.layout.abi {\n+                            if let Int(_, s) = scalar.value {\n                                 // We use `i1` for bytes that are always `0` or `1`,\n                                 // e.g., `#[repr(i8)] enum E { A, B }`, but we can't\n                                 // let LLVM interpret the `i1` as signed, because"}, {"sha": "bfba463907f812a3dce11ee6be9df9d7a1ac674c", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -5,7 +5,7 @@ use crate::ModuleCodegen;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_middle::util::common::ErrorReported;\n@@ -14,6 +14,7 @@ use rustc_session::{\n     Session,\n };\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::LayoutOf;\n \n pub use rustc_data_structures::sync::MetadataRef;\n "}, {"sha": "caba7ebef593b3897dc355125d6b4776eec87af1", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -12,8 +12,9 @@ use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n \n-use rustc_middle::ty::layout::{Align, HasParamEnv, Size};\n+use rustc_middle::ty::layout::HasParamEnv;\n use rustc_middle::ty::Ty;\n+use rustc_target::abi::{Align, Size};\n use rustc_target::spec::HasTargetSpec;\n \n use std::iter::TrustedLen;"}, {"sha": "6b58dea794bcbca7099085b56c6d5ee99af59cb7", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,9 +1,9 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc_middle::mir::interpret::Allocation;\n-use rustc_middle::mir::interpret::Scalar;\n-use rustc_middle::ty::layout;\n+use rustc_middle::mir::interpret::{Allocation, Scalar};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::Symbol;\n+use rustc_target::abi::{self, Size};\n \n pub trait ConstMethods<'tcx>: BackendTypes {\n     // Constant constructors\n@@ -26,17 +26,12 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_to_opt_uint(&self, v: Self::Value) -> Option<u64>;\n     fn const_to_opt_u128(&self, v: Self::Value, sign_ext: bool) -> Option<u128>;\n \n-    fn scalar_to_backend(\n-        &self,\n-        cv: Scalar,\n-        layout: &layout::Scalar,\n-        llty: Self::Type,\n-    ) -> Self::Value;\n+    fn scalar_to_backend(&self, cv: Scalar, layout: &abi::Scalar, llty: Self::Type) -> Self::Value;\n     fn from_const_alloc(\n         &self,\n-        layout: layout::TyAndLayout<'tcx>,\n+        layout: TyAndLayout<'tcx>,\n         alloc: &Allocation,\n-        offset: layout::Size,\n+        offset: Size,\n     ) -> PlaceRef<'tcx, Self::Value>;\n \n     fn const_ptrcast(&self, val: Self::Value, ty: Self::Type) -> Self::Value;"}, {"sha": "34be1cfdd8844c368d062fd466b3e4048bcfa06e", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,10 +3,10 @@ use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc_ast::ast::Name;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::mir;\n-use rustc_middle::ty::layout::Size;\n use rustc_middle::ty::{Instance, Ty};\n use rustc_span::{SourceFile, Span};\n use rustc_target::abi::call::FnAbi;\n+use rustc_target::abi::Size;\n \n pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_vtable_metadata(&self, ty: Ty<'tcx>, vtable: Self::Value);"}, {"sha": "a6462b358347b3111a0c009662ac9a10867452f8", "filename": "src/librustc_codegen_ssa/traits/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fstatics.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,6 +1,6 @@\n use super::BackendTypes;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::Align;\n+use rustc_target::abi::Align;\n \n pub trait StaticMethods: BackendTypes {\n     fn static_addr_of(&self, cv: Self::Value, align: Align, kind: Option<&str>) -> Self::Value;"}, {"sha": "703479b74bef8a9d9514a8e1c3fb4ddf24a46a6f", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,10 +3,11 @@ use super::Backend;\n use super::HasCodegen;\n use crate::common::TypeKind;\n use crate::mir::place::PlaceRef;\n-use rustc_middle::ty::layout::{self, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{ArgAbi, CastTarget, FnAbi, Reg};\n+use rustc_target::abi::Integer;\n \n // This depends on `Backend` and not `BackendTypes`, because consumers will probably want to use\n // `LayoutOf` or `HasTyCtxt`. This way, they don't have to add a constraint on it themselves.\n@@ -53,8 +54,8 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n         }\n     }\n \n-    fn type_from_integer(&self, i: layout::Integer) -> Self::Type {\n-        use rustc_middle::ty::layout::Integer::*;\n+    fn type_from_integer(&self, i: Integer) -> Self::Type {\n+        use Integer::*;\n         match i {\n             I8 => self.type_i8(),\n             I16 => self.type_i16(),"}, {"sha": "cff86e8f2183730296f0dc942fd8074f3d26dc56", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -36,12 +36,13 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericParamKind, PatKind};\n use rustc_hir::{HirIdSet, Node};\n use rustc_middle::lint::LintDiagnosticBuilder;\n-use rustc_middle::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::FutureIncompatibleInfo;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{BytePos, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;\n \n use crate::nonstandard_style::{method_context, MethodLateContext};"}, {"sha": "1747a78d36a4c813b53923a2ddee3f7c33a4809a", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -29,12 +29,13 @@ use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty::layout::{LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutError, TyAndLayout};\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n use rustc_session::lint::{add_elided_lifetime_in_path_suggestion, BuiltinLintDiagnostics};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n+use rustc_target::abi::LayoutOf;\n \n use std::slice;\n "}, {"sha": "a6e1ed84c87081cfbd01bbacdbcd7d5d24601da7", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -10,12 +10,13 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, ExprKind, Node};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::interpret::{sign_extend, truncate};\n-use rustc_middle::ty::layout::{self, IntegerExt, LayoutOf, SizeSkeleton, VariantIdx};\n+use rustc_middle::ty::layout::{IntegerExt, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n+use rustc_target::abi::{DiscriminantKind, Integer, LayoutOf, VariantIdx, Variants};\n use rustc_target::spec::abi::Abi;\n \n use log::debug;\n@@ -150,7 +151,7 @@ fn report_bin_hex_error(\n     val: u128,\n     negative: bool,\n ) {\n-    let size = layout::Integer::from_attr(&cx.tcx, ty).size();\n+    let size = Integer::from_attr(&cx.tcx, ty).size();\n     cx.struct_span_lint(OVERFLOWING_LITERALS, expr.span, |lint| {\n         let (t, actually) = match ty {\n             attr::IntType::SignedInt(t) => {\n@@ -1034,8 +1035,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                 | Err(ty::layout::LayoutError::SizeOverflow(_)) => return,\n             };\n             let (variants, tag) = match layout.variants {\n-                layout::Variants::Multiple {\n-                    discr_kind: layout::DiscriminantKind::Tag,\n+                Variants::Multiple {\n+                    discr_kind: DiscriminantKind::Tag,\n                     ref discr,\n                     ref variants,\n                     .."}, {"sha": "b71f5c9848731edf0276bcea66a4d98e2c3b679e", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -29,13 +29,13 @@ use rustc_middle::middle::lang_items;\n use rustc_middle::mir::{self, interpret};\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::{self as ty_codec, TyEncoder};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n use rustc_session::config::{self, CrateType};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span};\n+use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;"}, {"sha": "d13ad246db7b0ac625a850766437091c28b8e7b7", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,7 +11,7 @@\n macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n-            [] layouts: rustc_middle::ty::layout::Layout,\n+            [] layouts: rustc_target::abi::Layout,\n             [] generics: rustc_middle::ty::Generics,\n             [] trait_def: rustc_middle::ty::TraitDef,\n             [] adt_def: rustc_middle::ty::AdtDef,"}, {"sha": "8b9f09774853afb1d69212db62c492cfd3b9fa9c", "filename": "src/librustc_middle/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -7,14 +7,12 @@ use std::ops::{Deref, DerefMut, Range};\n \n use rustc_ast::ast::Mutability;\n use rustc_data_structures::sorted_map::SortedMap;\n-use rustc_target::abi::HasDataLayout;\n+use rustc_target::abi::{Align, HasDataLayout, Size};\n \n use super::{\n     read_target_uint, write_target_uint, AllocId, InterpResult, Pointer, Scalar, ScalarMaybeUndef,\n };\n \n-use crate::ty::layout::{Align, Size};\n-\n // NOTE: When adding new fields, make sure to adjust the `Snapshot` impl in\n // `src/librustc_mir/interpret/snapshot.rs`.\n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "7844fb108406dface6a85058ae2249a500a9329c", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,7 +1,7 @@\n use super::{AllocId, CheckInAllocMsg, Pointer, RawConst, ScalarMaybeUndef};\n \n use crate::mir::interpret::ConstValue;\n-use crate::ty::layout::{Align, LayoutError, Size};\n+use crate::ty::layout::LayoutError;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::tls;\n use crate::ty::{self, layout, Ty};\n@@ -14,6 +14,7 @@ use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{def_id::DefId, Pos, Span};\n+use rustc_target::abi::{Align, Size};\n use std::{any::Any, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]"}, {"sha": "96bf694d8fa67181013ff99e73996a2a7b43d327", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -109,10 +109,10 @@ use rustc_data_structures::tiny_list::TinyList;\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable, Encoder};\n+use rustc_target::abi::{Endian, Size};\n \n use crate::mir;\n use crate::ty::codec::TyDecoder;\n-use crate::ty::layout::{self, Size};\n use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n \n@@ -521,22 +521,22 @@ impl<'tcx> AllocMap<'tcx> {\n \n #[inline]\n pub fn write_target_uint(\n-    endianness: layout::Endian,\n+    endianness: Endian,\n     mut target: &mut [u8],\n     data: u128,\n ) -> Result<(), io::Error> {\n     let len = target.len();\n     match endianness {\n-        layout::Endian::Little => target.write_uint128::<LittleEndian>(data, len),\n-        layout::Endian::Big => target.write_uint128::<BigEndian>(data, len),\n+        Endian::Little => target.write_uint128::<LittleEndian>(data, len),\n+        Endian::Big => target.write_uint128::<BigEndian>(data, len),\n     }\n }\n \n #[inline]\n-pub fn read_target_uint(endianness: layout::Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n+pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n     match endianness {\n-        layout::Endian::Little => source.read_uint128::<LittleEndian>(source.len()),\n-        layout::Endian::Big => source.read_uint128::<BigEndian>(source.len()),\n+        Endian::Little => source.read_uint128::<LittleEndian>(source.len()),\n+        Endian::Big => source.read_uint128::<BigEndian>(source.len()),\n     }\n }\n "}, {"sha": "7549d902dfbfe8a132adb672c7a91e14f6333a0c", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,8 +1,7 @@\n use super::{AllocId, InterpResult};\n \n-use crate::ty::layout::{self, HasDataLayout, Size};\n-\n use rustc_macros::HashStable;\n+use rustc_target::abi::{HasDataLayout, Size};\n \n use std::convert::TryFrom;\n use std::fmt::{self, Display};\n@@ -37,7 +36,7 @@ impl Display for CheckInAllocMsg {\n // Pointer arithmetic\n ////////////////////////////////////////////////////////////////////////////////\n \n-pub trait PointerArithmetic: layout::HasDataLayout {\n+pub trait PointerArithmetic: HasDataLayout {\n     // These are not supposed to be overridden.\n \n     #[inline(always)]\n@@ -100,7 +99,7 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     }\n }\n \n-impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n+impl<T: HasDataLayout> PointerArithmetic for T {}\n \n /// `Pointer` is generic over the type that represents a reference to `Allocation`s,\n /// thus making it possible for the most convenient representation to be used in"}, {"sha": "f3c1c87dad484b5aead0f759570aa4a332644ac2", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -6,12 +6,9 @@ use rustc_apfloat::{\n     Float,\n };\n use rustc_macros::HashStable;\n-use rustc_target::abi::TargetDataLayout;\n+use rustc_target::abi::{HasDataLayout, Size, TargetDataLayout};\n \n-use crate::ty::{\n-    layout::{HasDataLayout, Size},\n-    ParamEnv, Ty, TyCtxt,\n-};\n+use crate::ty::{ParamEnv, Ty, TyCtxt};\n \n use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n "}, {"sha": "36e10f8759d178dcfd28d36ec52ba468fcd0c358", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -6,7 +6,6 @@ use crate::mir::interpret::{GlobalAlloc, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::layout::VariantIdx;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n@@ -16,6 +15,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self, GeneratorKind};\n+use rustc_target::abi::VariantIdx;\n \n use polonius_engine::Atom;\n pub use rustc_ast::ast::Mutability;"}, {"sha": "06b27c5e8b329e826fc45bc219cbcdecbecc4259", "filename": "src/librustc_middle/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftcx.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,11 +4,11 @@\n  */\n \n use crate::mir::*;\n-use crate::ty::layout::VariantIdx;\n use crate::ty::subst::Subst;\n use crate::ty::util::IntTypeExt;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n+use rustc_target::abi::VariantIdx;\n \n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct PlaceTy<'tcx> {"}, {"sha": "2ffbbfb1762d3a4d642b2b8d35764281cac43c86", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -738,7 +738,7 @@ rustc_queries! {\n \n         query layout_raw(\n             env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n-        ) -> Result<&'tcx ty::layout::Layout, ty::layout::LayoutError<'tcx>> {\n+        ) -> Result<&'tcx rustc_target::abi::Layout, ty::layout::LayoutError<'tcx>> {\n             desc { \"computing layout of `{}`\", env.value }\n         }\n     }"}, {"sha": "ba6a47dc6405af34be0cd3e309797e8504f897c4", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -21,7 +21,6 @@ use crate::mir::{\n };\n use crate::traits;\n use crate::traits::{Clause, Clauses, Goal, GoalKind, Goals};\n-use crate::ty::layout::{Layout, TargetDataLayout, VariantIdx};\n use crate::ty::query;\n use crate::ty::steal::Steal;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n@@ -65,6 +64,7 @@ use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n+use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n \n use smallvec::SmallVec;"}, {"sha": "520793c69fdd2875101fc89455bcdc766b8daf6b", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -15,7 +15,7 @@ use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n-pub use rustc_target::abi::*;\n+use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy};\n \n use std::cmp;"}, {"sha": "539a52529fbba94937bade8b9617848e51cfe317", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -18,7 +18,6 @@ use crate::mir::GeneratorLayout;\n use crate::mir::ReadOnlyBodyAndCache;\n use crate::traits::{self, Reveal};\n use crate::ty;\n-use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n@@ -43,7 +42,7 @@ use rustc_session::DataTypeKind;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::Align;\n+use rustc_target::abi::{Align, VariantIdx};\n \n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n@@ -2078,7 +2077,7 @@ pub struct AdtDef {\n     /// The `DefId` of the struct, enum or union item.\n     pub did: DefId,\n     /// Variants of the ADT. If this is a struct or union, then there will be a single variant.\n-    pub variants: IndexVec<self::layout::VariantIdx, VariantDef>,\n+    pub variants: IndexVec<VariantIdx, VariantDef>,\n     /// Flags of the ADT (e.g., is this a struct? is this non-exhaustive?).\n     flags: AdtFlags,\n     /// Repr options provided by the user."}, {"sha": "a8b7b6a4b97a4b9d26028552f367eeb6f039994c", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,7 +1,7 @@\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::mir::interpret::{sign_extend, truncate, AllocId, ConstValue, Pointer, Scalar};\n-use crate::ty::layout::{Integer, IntegerExt, Size};\n+use crate::ty::layout::IntegerExt;\n use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n@@ -13,6 +13,7 @@ use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_span::symbol::{kw, Symbol};\n+use rustc_target::abi::{Integer, Size};\n use rustc_target::spec::abi::Abi;\n \n use std::cell::Cell;"}, {"sha": "0ac4466d34f5c96d0bb15ad33cfbbb2f55b37796", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -254,7 +254,7 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n-    crate::ty::layout::VariantIdx,\n+    ::rustc_target::abi::VariantIdx,\n     u64,\n     String,\n     crate::middle::region::Scope,"}, {"sha": "99e3b88f5052c22e33fa3a5ced3368a2fc21510a", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -10,7 +10,6 @@ use crate::middle::region;\n use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::{LitToConstInput, Scalar};\n use crate::mir::Promoted;\n-use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n     self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n@@ -24,6 +23,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, Symbol};\n+use rustc_target::abi::{Size, VariantIdx};\n use rustc_target::spec::abi;\n use smallvec::SmallVec;\n use std::borrow::Cow;\n@@ -2501,7 +2501,7 @@ impl<'tcx> ConstKind<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_to_bits(&self, size: ty::layout::Size) -> Option<u128> {\n+    pub fn try_to_bits(&self, size: Size) -> Option<u128> {\n         if let ConstKind::Value(val) = self { val.try_to_bits(size) } else { None }\n     }\n }"}, {"sha": "42a63ba5b9ca957fcfa4942648955a763964817f", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -2,7 +2,7 @@\n \n use crate::ich::NodeIdHashingMode;\n use crate::mir::interpret::{sign_extend, truncate};\n-use crate::ty::layout::{Integer, IntegerExt, Size};\n+use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n@@ -19,7 +19,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n-use rustc_target::abi::TargetDataLayout;\n+use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use smallvec::SmallVec;\n use std::{cmp, fmt};\n "}, {"sha": "619ae0ff8faa1468972e73efb00285224ce2b358", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -9,10 +9,10 @@ use rustc_middle::mir::{\n     AggregateKind, Constant, Field, Local, LocalInfo, LocalKind, Location, Operand, Place,\n     PlaceRef, ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;"}, {"sha": "cedae94ab89fe414d2e7103ce9dd8ec32798b992", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -24,13 +24,13 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPolyTraitRef, Ty,\n     TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::{GenerateMemberConstraints, InferCtxtExt};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;"}, {"sha": "97cdb32e2cdf783ed6836a8a728b408b67f77c73", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -9,8 +9,9 @@ use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc_middle::traits::Reveal;\n-use rustc_middle::ty::{self, layout, layout::LayoutOf, subst::Subst, TyCtxt};\n+use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n+use rustc_target::abi::{Abi, LayoutOf};\n use std::convert::TryInto;\n \n pub fn note_on_undefined_behavior_error() -> &'static str {\n@@ -105,8 +106,8 @@ pub(super) fn op_to_const<'tcx>(\n     // the usual cases of extracting e.g. a `usize`, without there being a real use case for the\n     // `Undef` situation.\n     let try_as_immediate = match op.layout.abi {\n-        layout::Abi::Scalar(..) => true,\n-        layout::Abi::ScalarPair(..) => match op.layout.ty.kind {\n+        Abi::Scalar(..) => true,\n+        Abi::ScalarPair(..) => match op.layout.ty.kind {\n             ty::Ref(_, inner, _) => match inner.kind {\n                 ty::Slice(elem) => elem == ecx.tcx.types.u8,\n                 ty::Str => true,"}, {"sha": "e1146ef30d1313de93d0e85cb21c1d650b9c9493", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,9 +3,9 @@\n use std::convert::TryFrom;\n \n use rustc_middle::mir;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{source_map::DUMMY_SP, symbol::Symbol};\n+use rustc_target::abi::VariantIdx;\n \n use crate::interpret::{intern_const_alloc_recursive, ConstValue, InternKind, InterpCx};\n "}, {"sha": "06da8799dd468d9a6d61867a6dda449bdf388123", "filename": "src/librustc_mir/dataflow/framework/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -36,8 +36,8 @@ use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, BasicBlock, Location};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n mod cursor;\n mod engine;"}, {"sha": "b5f1a2d4eb94b82fa29079b4b1f49617e5f1ae2d", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -5,8 +5,8 @@\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, Body, Location};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n use super::MoveDataParamEnv;\n "}, {"sha": "67696aa2da8b0e57ff47ec6d3ae6c7d814cb9885", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -7,10 +7,10 @@ use rustc_ast::ast::FloatTy;\n use rustc_middle::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::{self, Size, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_span::symbol::sym;\n-use rustc_target::abi::LayoutOf;\n+use rustc_target::abi::{LayoutOf, Size, Variants};\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn cast(\n@@ -132,7 +132,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // Handle cast from a univariant (ZST) enum.\n         match src.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n                     let discr_layout = self.layout_of(discr.ty)?;\n@@ -141,7 +141,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         .into());\n                 }\n             }\n-            layout::Variants::Multiple { .. } => {}\n+            Variants::Multiple { .. } => {}\n         }\n \n         // Handle casting the metadata away from a fat pointer."}, {"sha": "9aa42e107dc84892e85660946b3594296b3881b0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -13,11 +13,12 @@ use rustc_middle::mir;\n use rustc_middle::mir::interpret::{\n     sign_extend, truncate, AllocId, FrameInfo, GlobalId, InterpResult, Pointer, Scalar,\n };\n-use rustc_middle::ty::layout::{self, Align, HasDataLayout, LayoutOf, Size, TyAndLayout};\n+use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n+use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n     Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, OpTy, Operand, Place, PlaceTy,\n@@ -173,7 +174,7 @@ impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for InterpCx<'mir, 'tcx, M> {\n     #[inline]\n-    fn data_layout(&self) -> &layout::TargetDataLayout {\n+    fn data_layout(&self) -> &TargetDataLayout {\n         &self.tcx.data_layout\n     }\n }"}, {"sha": "d976df82577ead214fc13499f280b33d1b658449", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,10 +11,10 @@ use rustc_middle::mir::{\n     BinOp,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{LayoutOf, Primitive, Size};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n use super::{ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n \n@@ -134,7 +134,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = self.read_scalar(args[0])?.not_undef()?;\n                 let bits = self.force_bits(val, layout_of.size)?;\n                 let kind = match layout_of.abi {\n-                    ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n+                    Abi::Scalar(ref scalar) => scalar.value,\n                     _ => bug!(\"{} called on invalid type {:?}\", intrinsic_name, ty),\n                 };\n                 let (nonzero, intrinsic_name) = match intrinsic_name {"}, {"sha": "04a927c69a687cc4855e303a1ead33eb9e0ae215", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,11 +11,10 @@ use std::collections::VecDeque;\n use std::convert::TryFrom;\n use std::ptr;\n \n+use rustc_ast::ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_middle::ty::layout::{Align, HasDataLayout, Size, TargetDataLayout};\n use rustc_middle::ty::{self, query::TyCtxtAt, Instance, ParamEnv};\n-\n-use rustc_ast::ast::Mutability;\n+use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n     AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, ErrorHandled, GlobalAlloc,"}, {"sha": "999d0d26ab34adec322ebe9b283e1b711bddc0bb", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -10,12 +10,12 @@ pub use rustc_middle::mir::interpret::ScalarMaybeUndef;\n use rustc_middle::mir::interpret::{\n     sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpResult, Pointer, Scalar,\n };\n-use rustc_middle::ty::layout::{\n-    self, HasDataLayout, IntegerExt, LayoutOf, PrimitiveExt, Size, TyAndLayout, VariantIdx,\n-};\n+use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n use rustc_middle::ty::Ty;\n use rustc_middle::{mir, ty};\n+use rustc_target::abi::{Abi, DiscriminantKind, HasDataLayout, Integer, LayoutOf, Size};\n+use rustc_target::abi::{VariantIdx, Variants};\n use std::fmt::Write;\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n@@ -266,15 +266,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n \n         match mplace.layout.abi {\n-            layout::Abi::Scalar(..) => {\n+            Abi::Scalar(..) => {\n                 let scalar = self.memory.get_raw(ptr.alloc_id)?.read_scalar(\n                     self,\n                     ptr,\n                     mplace.layout.size,\n                 )?;\n                 Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))\n             }\n-            layout::Abi::ScalarPair(ref a, ref b) => {\n+            Abi::ScalarPair(ref a, ref b) => {\n                 // We checked `ptr_align` above, so all fields will have the alignment they need.\n                 // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,\n                 // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.\n@@ -587,20 +587,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"read_discriminant_value {:#?}\", rval.layout);\n \n         let (discr_layout, discr_kind, discr_index) = match rval.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 let discr_val = rval\n                     .layout\n                     .ty\n                     .discriminant_for_variant(*self.tcx, index)\n                     .map_or(u128::from(index.as_u32()), |discr| discr.val);\n                 return Ok((discr_val, index));\n             }\n-            layout::Variants::Multiple {\n-                discr: ref discr_layout,\n-                ref discr_kind,\n-                discr_index,\n-                ..\n-            } => (discr_layout, discr_kind, discr_index),\n+            Variants::Multiple { discr: ref discr_layout, ref discr_kind, discr_index, .. } => {\n+                (discr_layout, discr_kind, discr_index)\n+            }\n         };\n \n         // read raw discriminant value\n@@ -610,7 +607,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"discr value: {:?}\", raw_discr);\n         // post-process\n         Ok(match *discr_kind {\n-            layout::DiscriminantKind::Tag => {\n+            DiscriminantKind::Tag => {\n                 let bits_discr = raw_discr\n                     .not_undef()\n                     .and_then(|raw_discr| self.force_bits(raw_discr, discr_val.layout.size))\n@@ -627,7 +624,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         .expect(\"tagged layout corresponds to adt\")\n                         .repr\n                         .discr_type();\n-                    let size = layout::Integer::from_attr(self, discr_ty).size();\n+                    let size = Integer::from_attr(self, discr_ty).size();\n                     truncate(sexted, size)\n                 } else {\n                     bits_discr\n@@ -648,11 +645,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 .ok_or_else(|| err_ub!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n                 (real_discr, index.0)\n             }\n-            layout::DiscriminantKind::Niche {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n-            } => {\n+            DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start } => {\n                 let variants_start = niche_variants.start().as_u32();\n                 let variants_end = niche_variants.end().as_u32();\n                 let raw_discr = raw_discr"}, {"sha": "0aa7e98f3edfa8b0b0e3defa2fbbdf72b84b586f", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,11 +4,8 @@ use rustc_apfloat::Float;\n use rustc_ast::ast::FloatTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n-use rustc_middle::ty::{\n-    self,\n-    layout::{LayoutOf, TyAndLayout},\n-    Ty,\n-};\n+use rustc_middle::ty::{self, layout::TyAndLayout, Ty};\n+use rustc_target::abi::LayoutOf;\n \n use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n "}, {"sha": "ece54daf4c61df876484fdc4f051778f1ae0f6ce", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -8,10 +8,10 @@ use std::hash::Hash;\n use rustc_macros::HashStable;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::truncate;\n-use rustc_middle::ty::layout::{\n-    self, Align, HasDataLayout, LayoutOf, PrimitiveExt, Size, TyAndLayout, VariantIdx,\n-};\n+use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::{self, Ty};\n+use rustc_target::abi::{Abi, Align, DiscriminantKind, FieldsShape};\n+use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n     AllocId, AllocMap, Allocation, AllocationExtra, ImmTy, Immediate, InterpCx, InterpResult,\n@@ -219,7 +219,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n             // Go through the layout.  There are lots of types that support a length,\n             // e.g., SIMD types.\n             match self.layout.fields {\n-                layout::FieldsShape::Array { count, .. } => Ok(count),\n+                FieldsShape::Array { count, .. } => Ok(count),\n                 _ => bug!(\"len not supported on sized type {:?}\", self.layout.ty),\n             }\n         }\n@@ -437,7 +437,7 @@ where\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // Not using the layout method because we want to compute on u64\n         match base.layout.fields {\n-            layout::FieldsShape::Array { stride, .. } => {\n+            FieldsShape::Array { stride, .. } => {\n                 let len = base.len(self)?;\n                 if index >= len {\n                     // This can only be reached in ConstProp and non-rustc-MIR.\n@@ -463,7 +463,7 @@ where\n     {\n         let len = base.len(self)?; // also asserts that we have a type where this makes sense\n         let stride = match base.layout.fields {\n-            layout::FieldsShape::Array { stride, .. } => stride,\n+            FieldsShape::Array { stride, .. } => stride,\n             _ => bug!(\"mplace_array_fields: expected an array layout\"),\n         };\n         let layout = base.layout.field(self, 0)?;\n@@ -493,7 +493,7 @@ where\n         // Not using layout method because that works with usize, and does not work with slices\n         // (that have count 0 in their layout).\n         let from_offset = match base.layout.fields {\n-            layout::FieldsShape::Array { stride, .. } => stride * from, // `Size` multiplication is checked\n+            FieldsShape::Array { stride, .. } => stride * from, // `Size` multiplication is checked\n             _ => bug!(\"Unexpected layout of index access: {:#?}\", base.layout),\n         };\n \n@@ -802,7 +802,7 @@ where\n         match value {\n             Immediate::Scalar(scalar) => {\n                 match dest.layout.abi {\n-                    layout::Abi::Scalar(_) => {} // fine\n+                    Abi::Scalar(_) => {} // fine\n                     _ => {\n                         bug!(\"write_immediate_to_mplace: invalid Scalar layout: {:#?}\", dest.layout)\n                     }\n@@ -819,7 +819,7 @@ where\n                 // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,\n                 // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.\n                 let (a, b) = match dest.layout.abi {\n-                    layout::Abi::ScalarPair(ref a, ref b) => (&a.value, &b.value),\n+                    Abi::ScalarPair(ref a, ref b) => (&a.value, &b.value),\n                     _ => bug!(\n                         \"write_immediate_to_mplace: invalid ScalarPair layout: {:#?}\",\n                         dest.layout\n@@ -1067,11 +1067,11 @@ where\n         }\n \n         match dest.layout.variants {\n-            layout::Variants::Single { index } => {\n+            Variants::Single { index } => {\n                 assert_eq!(index, variant_index);\n             }\n-            layout::Variants::Multiple {\n-                discr_kind: layout::DiscriminantKind::Tag,\n+            Variants::Multiple {\n+                discr_kind: DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n@@ -1091,9 +1091,9 @@ where\n                 let discr_dest = self.place_field(dest, discr_index)?;\n                 self.write_scalar(Scalar::from_uint(discr_val, size), discr_dest)?;\n             }\n-            layout::Variants::Multiple {\n+            Variants::Multiple {\n                 discr_kind:\n-                    layout::DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start },\n+                    DiscriminantKind::Niche { dataful_variant, ref niche_variants, niche_start },\n                 discr: ref discr_layout,\n                 discr_index,\n                 .."}, {"sha": "407849c2ce27c3580ddd1e159f782ea66154b0ba", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n-use rustc_middle::ty::layout::LayoutOf;\n+use rustc_target::abi::LayoutOf;\n \n use super::{InterpCx, Machine};\n "}, {"sha": "8ad743d2b8b1d60df1ea1f316a311fad9a3609b2", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,9 +1,10 @@\n use std::borrow::Cow;\n use std::convert::TryFrom;\n \n-use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::Instance;\n use rustc_middle::{mir, ty};\n+use rustc_target::abi::{self, LayoutOf as _};\n use rustc_target::spec::abi::Abi;\n \n use super::{\n@@ -142,12 +143,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Different valid ranges are okay (once we enforce validity,\n             // that will take care to make it UB to leave the range, just\n             // like for transmute).\n-            (layout::Abi::Scalar(ref caller), layout::Abi::Scalar(ref callee)) => {\n+            (abi::Abi::Scalar(ref caller), abi::Abi::Scalar(ref callee)) => {\n                 caller.value == callee.value\n             }\n             (\n-                layout::Abi::ScalarPair(ref caller1, ref caller2),\n-                layout::Abi::ScalarPair(ref callee1, ref callee2),\n+                abi::Abi::ScalarPair(ref caller1, ref caller2),\n+                abi::Abi::ScalarPair(ref callee1, ref callee2),\n             ) => caller1.value == callee1.value && caller2.value == callee2.value,\n             // Be conservative\n             _ => false,"}, {"sha": "fb9401c7d8f28464e3ed96a37e419030d54e70f7", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,8 +1,8 @@\n use std::convert::TryFrom;\n \n use rustc_middle::mir::interpret::{InterpResult, Pointer, PointerArithmetic, Scalar};\n-use rustc_middle::ty::layout::{Align, HasDataLayout, LayoutOf, Size};\n use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n+use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size};\n \n use super::{FnVal, InterpCx, Machine, MemoryKind};\n "}, {"sha": "701e394415bbdde8d27b3063282073587bd091b1", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,8 +11,9 @@ use std::ops::RangeInclusive;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout, VariantIdx};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::{Abi, LayoutOf, Scalar, VariantIdx, Variants};\n \n use std::hash::Hash;\n \n@@ -180,7 +181,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n     fn aggregate_field_path_elem(&mut self, layout: TyAndLayout<'tcx>, field: usize) -> PathElem {\n         // First, check if we are projecting to a variant.\n         match layout.variants {\n-            layout::Variants::Multiple { discr_index, .. } => {\n+            Variants::Multiple { discr_index, .. } => {\n                 if discr_index == field {\n                     return match layout.ty.kind {\n                         ty::Adt(def, ..) if def.is_enum() => PathElem::EnumTag,\n@@ -189,7 +190,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     };\n                 }\n             }\n-            layout::Variants::Single { .. } => {}\n+            Variants::Single { .. } => {}\n         }\n \n         // Now we know we are projecting to a field, so figure out which one.\n@@ -226,11 +227,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             ty::Adt(def, ..) if def.is_enum() => {\n                 // we might be projecting *to* a variant, or to a field *in* a variant.\n                 match layout.variants {\n-                    layout::Variants::Single { index } => {\n+                    Variants::Single { index } => {\n                         // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name)\n                     }\n-                    layout::Variants::Multiple { .. } => bug!(\"we handled variants above\"),\n+                    Variants::Multiple { .. } => bug!(\"we handled variants above\"),\n                 }\n             }\n \n@@ -539,7 +540,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n     fn visit_scalar(\n         &mut self,\n         op: OpTy<'tcx, M::PointerTag>,\n-        scalar_layout: &layout::Scalar,\n+        scalar_layout: &Scalar,\n     ) -> InterpResult<'tcx> {\n         let value = self.ecx.read_scalar(op)?;\n         let valid_range = &scalar_layout.valid_range;\n@@ -685,22 +686,22 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // scalars, we do the same check on every \"level\" (e.g., first we check\n         // MyNewtype and then the scalar in there).\n         match op.layout.abi {\n-            layout::Abi::Uninhabited => {\n+            Abi::Uninhabited => {\n                 throw_validation_failure!(\n                     format_args!(\"a value of uninhabited type {:?}\", op.layout.ty),\n                     self.path\n                 );\n             }\n-            layout::Abi::Scalar(ref scalar_layout) => {\n+            Abi::Scalar(ref scalar_layout) => {\n                 self.visit_scalar(op, scalar_layout)?;\n             }\n-            layout::Abi::ScalarPair { .. } | layout::Abi::Vector { .. } => {\n+            Abi::ScalarPair { .. } | Abi::Vector { .. } => {\n                 // These have fields that we already visited above, so we already checked\n                 // all their scalar-level restrictions.\n                 // There is also no equivalent to `rustc_layout_scalar_valid_range_start`\n                 // that would make skipping them here an issue.\n             }\n-            layout::Abi::Aggregate { .. } => {\n+            Abi::Aggregate { .. } => {\n                 // Nothing to do.\n             }\n         }"}, {"sha": "e03984f4d0be598fde4518d2cc879d56ef44aa99", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,7 +3,8 @@\n \n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{self, TyAndLayout, VariantIdx};\n+use rustc_middle::ty::layout::TyAndLayout;\n+use rustc_target::abi::{FieldsShape, VariantIdx, Variants};\n \n use super::{InterpCx, MPlaceTy, Machine, OpTy};\n \n@@ -207,10 +208,10 @@ macro_rules! make_value_visitor {\n \n                 // Visit the fields of this value.\n                 match v.layout().fields {\n-                    layout::FieldsShape::Union(fields) => {\n+                    FieldsShape::Union(fields) => {\n                         self.visit_union(v, fields)?;\n                     },\n-                    layout::FieldsShape::Arbitrary { ref offsets, .. } => {\n+                    FieldsShape::Arbitrary { ref offsets, .. } => {\n                         // FIXME: We collect in a vec because otherwise there are lifetime\n                         // errors: Projecting to a field needs access to `ecx`.\n                         let fields: Vec<InterpResult<'tcx, Self::V>> =\n@@ -220,7 +221,7 @@ macro_rules! make_value_visitor {\n                             .collect();\n                         self.visit_aggregate(v, fields.into_iter())?;\n                     },\n-                    layout::FieldsShape::Array { .. } => {\n+                    FieldsShape::Array { .. } => {\n                         // Let's get an mplace first.\n                         let mplace = v.to_op(self.ecx())?.assert_mem_place(self.ecx());\n                         // Now we can go over all the fields.\n@@ -237,7 +238,7 @@ macro_rules! make_value_visitor {\n                 match v.layout().variants {\n                     // If this is a multi-variant layout, find the right variant and proceed\n                     // with *its* fields.\n-                    layout::Variants::Multiple { .. } => {\n+                    Variants::Multiple { .. } => {\n                         let op = v.to_op(self.ecx())?;\n                         let idx = self.ecx().read_discriminant(op)?.1;\n                         let inner = v.project_downcast(self.ecx(), idx)?;\n@@ -246,7 +247,7 @@ macro_rules! make_value_visitor {\n                         self.visit_variant(v, idx, inner)\n                     }\n                     // For single-variant layouts, we already did anything there is to do.\n-                    layout::Variants::Single { .. } => Ok(())\n+                    Variants::Single { .. } => Ok(())\n                 }\n             }\n         }"}, {"sha": "67de81ed77baaa5f58269fcecf526e214a2c1716", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,10 +1,10 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_target::abi::VariantIdx;\n \n use rustc_index::vec::{Idx, IndexVec};\n "}, {"sha": "c7f63d24c28abeb3334415c3a9799aff84899e37", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -19,13 +19,12 @@ use rustc_middle::mir::{\n     SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n     UnOp, RETURN_PLACE,\n };\n-use rustc_middle::ty::layout::{\n-    HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyAndLayout,\n-};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutError, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n+use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n use rustc_trait_selection::traits;\n \n use crate::const_eval::error_to_const_error;"}, {"sha": "a7c6b5a98bbc16d58dd068c986bb492fb4232953", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -13,9 +13,9 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n use std::fmt;\n \n pub struct ElaborateDrops;"}, {"sha": "53eec1f6dc3dec62af38fe1d2f0cdecb4c3d5882", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -63,10 +63,10 @@ use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::GeneratorSubsts;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n use std::borrow::Cow;\n use std::iter;\n "}, {"sha": "0a08c13b479aa853e2d7380440ec7aac82f89a1c", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -5,8 +5,9 @@ use rustc_middle::mir::{\n     BasicBlock, BasicBlockData, Body, BodyAndCache, Local, Operand, Rvalue, StatementKind,\n     TerminatorKind,\n };\n-use rustc_middle::ty::layout::{Abi, TyAndLayout, Variants};\n+use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_target::abi::{Abi, Variants};\n \n pub struct UninhabitedEnumBranching;\n "}, {"sha": "e77d264b7ce5cfa0e25eb936183279c96c54b61f", "filename": "src/librustc_mir/util/aggregate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Faggregate.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -1,7 +1,7 @@\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n use std::iter::TrustedLen;\n "}, {"sha": "e6dee043a1b582791b541f5b34084bafa16361a6", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,10 +4,10 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::lang_items;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n use std::fmt;\n \n use std::convert::TryInto;"}, {"sha": "a81fcb54580c2cee8e92005fb5de96f6b92c5740", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -9,7 +9,8 @@ use rustc_middle::mir::interpret::{\n };\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, layout::Size, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_target::abi::Size;\n use std::collections::BTreeSet;\n use std::fmt::Display;\n use std::fmt::Write as _;"}, {"sha": "a4a9271669e4ea45869fb06bb23b795cbe49e8b9", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -16,9 +16,9 @@ use rustc_hir::HirId;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n use smallvec::{smallvec, SmallVec};\n \n // helper functions, broken out by category:"}, {"sha": "d74d8b5c7f318b0b8c19432dc7193c0eefc52dd0", "filename": "src/librustc_mir_build/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fsimplify.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -15,12 +15,13 @@\n use crate::build::matches::{Ascription, Binding, Candidate, MatchPair};\n use crate::build::Builder;\n use crate::hair::{self, *};\n+use rustc_attr::{SignedInt, UnsignedInt};\n+use rustc_hir::RangeEnd;\n use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::Place;\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{Integer, IntegerExt, Size};\n-use rustc_attr::{SignedInt, UnsignedInt};\n-use rustc_hir::RangeEnd;\n+use rustc_middle::ty::layout::IntegerExt;\n+use rustc_target::abi::{Integer, Size};\n \n use std::mem;\n "}, {"sha": "3da4bb26779d30eb4d2842c1a4936c462b220076", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -9,14 +9,14 @@ use crate::build::matches::{Candidate, MatchPair, Test, TestKind};\n use crate::build::Builder;\n use crate::hair::pattern::compare_const_vals;\n use crate::hair::*;\n-use rustc_middle::mir::*;\n-use rustc_middle::ty::layout::VariantIdx;\n-use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, adjustment::PointerCast, Ty};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::RangeEnd;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::util::IntTypeExt;\n+use rustc_middle::ty::{self, adjustment::PointerCast, Ty};\n use rustc_span::symbol::sym;\n+use rustc_target::abi::VariantIdx;\n \n use std::cmp::Ordering;\n "}, {"sha": "e5af0b5bd6bed5b852bcea166d86f8d28187c0fc", "filename": "src/librustc_mir_build/hair/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fconstant.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -2,8 +2,9 @@ use rustc_ast::ast;\n use rustc_middle::mir::interpret::{\n     truncate, Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n };\n-use rustc_middle::ty::{self, layout::Size, ParamEnv, TyCtxt, TyS};\n+use rustc_middle::ty::{self, ParamEnv, TyCtxt, TyS};\n use rustc_span::symbol::Symbol;\n+use rustc_target::abi::Size;\n \n crate fn lit_to_const<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "503bd26d51fcc9287c5923efaec7350dc306d604", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -14,11 +14,11 @@ use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::infer::InferCtxtExt;\n \n #[derive(Clone)]"}, {"sha": "601e4412512ab5d189acb632e22c607fe70225a7", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -11,10 +11,10 @@ use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{AdtDef, Const, Ty, UpvarSubsts, UserType};\n use rustc_span::Span;\n+use rustc_target::abi::VariantIdx;\n \n crate mod constant;\n crate mod cx;"}, {"sha": "cfd5ba544bb0bcf4702576a2a4b4323d5d566dcb", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -240,11 +240,12 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{HirId, RangeEnd};\n use rustc_middle::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n use rustc_middle::mir::Field;\n-use rustc_middle::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n+use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n use rustc_middle::util::common::ErrorReported;\n use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::{Integer, Size, VariantIdx};\n \n use arena::TypedArena;\n "}, {"sha": "2b6d8e920f5ed95846438d45508fd5d4a7be08d6", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -19,13 +19,13 @@ use rustc_middle::mir::interpret::{get_slice_bytes, sign_extend, ConstValue, Err\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::mir::UserTypeProjection;\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n use rustc_middle::ty::{self, AdtDef, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc_middle::ty::{\n     CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n };\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::abi::VariantIdx;\n \n use std::cmp::Ordering;\n use std::fmt;\n@@ -1047,8 +1047,8 @@ crate fn compare_const_vals<'tcx>(\n             }\n             ty::Int(ity) => {\n                 use rustc_attr::SignedInt;\n-                use rustc_middle::ty::layout::{Integer, IntegerExt};\n-                let size = Integer::from_attr(&tcx, SignedInt(ity)).size();\n+                use rustc_middle::ty::layout::IntegerExt;\n+                let size = rustc_target::abi::Integer::from_attr(&tcx, SignedInt(ity)).size();\n                 let a = sign_extend(a, size);\n                 let b = sign_extend(b, size);\n                 Some((a as i128).cmp(&(b as i128)))"}, {"sha": "cc1af630cdd3c9e9d23edc88e38e250812fe483e", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -4,10 +4,11 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::Idx;\n-use rustc_middle::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::{sym, Span};\n+use rustc_target::abi::{Pointer, VariantIdx};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {"}, {"sha": "da8ab727ed3aa3e82d868c51e7588eaf0b0dc21f", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -3,16 +3,10 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::ItemKind;\n-use rustc_middle::ty::layout::HasDataLayout;\n-use rustc_middle::ty::layout::HasParamEnv;\n-use rustc_middle::ty::layout::HasTyCtxt;\n-use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::layout::TargetDataLayout;\n-use rustc_middle::ty::layout::TyAndLayout;\n-use rustc_middle::ty::ParamEnv;\n-use rustc_middle::ty::Ty;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::layout::{HasParamEnv, HasTyCtxt, TyAndLayout};\n+use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n+use rustc_target::abi::{HasDataLayout, LayoutOf, TargetDataLayout};\n \n pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {"}, {"sha": "20b3fa908d2014e620b959de4bddefd17ead2833", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -420,7 +420,7 @@ fn virtual_call_violation_for_method<'tcx>(\n         } else {\n             // Do sanity check to make sure the receiver actually has the layout of a pointer.\n \n-            use rustc_middle::ty::layout::Abi;\n+            use rustc_target::abi::Abi;\n \n             let param_env = tcx.param_env(method.def_id);\n "}, {"sha": "96fc2693ed76f82a18b0e3963724ba18f0c5e759", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -114,7 +114,6 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{\n     GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSelfTy, UserSubsts,\n@@ -132,6 +131,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::{InferCtxtExt as _, OpaqueTypeDecl};"}, {"sha": "e844abfc62c9d6f3884a8924fd49f2b7a50e931f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/124144704fa5d3f08563430d5c24abb23da24423/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=124144704fa5d3f08563430d5c24abb23da24423", "patch": "@@ -19,11 +19,11 @@ use rustc_hir::Mutability;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::lang_items;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty::layout::VariantIdx;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{self, FileName};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::cfg::Cfg;"}]}