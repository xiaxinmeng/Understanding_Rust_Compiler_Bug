{"sha": "3dbee57daee312ee073006101053f5e3934de7c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmVlNTdkYWVlMzEyZWUwNzMwMDYxMDEwNTNmNWUzOTM0ZGU3YzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-07T10:57:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-07T10:57:57Z"}, "message": "parser: Remove `look_ahead_span`", "tree": {"sha": "3628a44f5e0ae8851ef2d023aaa88b09dc33d3f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3628a44f5e0ae8851ef2d023aaa88b09dc33d3f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbee57daee312ee073006101053f5e3934de7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbee57daee312ee073006101053f5e3934de7c6", "html_url": "https://github.com/rust-lang/rust/commit/3dbee57daee312ee073006101053f5e3934de7c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbee57daee312ee073006101053f5e3934de7c6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eae6b0fe9da99f54f2f4ef1bf604d5e9deb367f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eae6b0fe9da99f54f2f4ef1bf604d5e9deb367f", "html_url": "https://github.com/rust-lang/rust/commit/6eae6b0fe9da99f54f2f4ef1bf604d5e9deb367f"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "cf869a1ce0fd978300c6b3e5651d85444b0122dc", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3dbee57daee312ee073006101053f5e3934de7c6/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbee57daee312ee073006101053f5e3934de7c6/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=3dbee57daee312ee073006101053f5e3934de7c6", "patch": "@@ -271,14 +271,13 @@ impl<'a> Parser<'a> {\n         let mut recovered = None;\n         if self.token == token::Dot {\n             // Attempt to recover `.4` as `0.4`.\n-            recovered = self.look_ahead(1, |t| {\n+            recovered = self.look_ahead(1, |next_token| {\n                 if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix })\n-                        = t.kind {\n-                    let next_span = self.look_ahead_span(1);\n-                    if self.token.span.hi() == next_span.lo() {\n+                        = next_token.kind {\n+                    if self.token.span.hi() == next_token.span.lo() {\n                         let s = String::from(\"0.\") + &symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n-                        return Some(Token::new(kind, self.token.span.to(next_span)));\n+                        return Some(Token::new(kind, self.token.span.to(next_token.span)));\n                     }\n                 }\n                 None"}, {"sha": "3acd7088145602860ed38ef00db3860ec829eb57", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3dbee57daee312ee073006101053f5e3934de7c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbee57daee312ee073006101053f5e3934de7c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3dbee57daee312ee073006101053f5e3934de7c6", "patch": "@@ -1064,18 +1064,6 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    crate fn look_ahead_span(&self, dist: usize) -> Span {\n-        if dist == 0 {\n-            return self.token.span\n-        }\n-\n-        match self.token_cursor.frame.tree_cursor.look_ahead(dist - 1) {\n-            Some(TokenTree::Token(token)) => token.span,\n-            Some(TokenTree::Delimited(span, ..)) => span.entire(),\n-            None => self.look_ahead_span(dist - 1),\n-        }\n-    }\n-\n     /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.\n     fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {\n         self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))\n@@ -3067,7 +3055,7 @@ impl<'a> Parser<'a> {\n                         let mut err =\n                             self.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n                         let span_after_type = parser_snapshot_after_type.token.span;\n-                        err.span_label(self.look_ahead_span(1).to(span_after_type),\n+                        err.span_label(self.look_ahead(1, |t| t.span).to(span_after_type),\n                                        \"interpreted as generic arguments\");\n                         err.span_label(self.token.span, format!(\"not interpreted as {}\", op_noun));\n "}]}