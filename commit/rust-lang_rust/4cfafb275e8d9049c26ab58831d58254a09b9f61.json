{"sha": "4cfafb275e8d9049c26ab58831d58254a09b9f61", "node_id": "C_kwDOAAsO6NoAKDRjZmFmYjI3NWU4ZDkwNDljMjZhYjU4ODMxZDU4MjU0YTA5YjlmNjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-23T19:58:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-22T21:18:20Z"}, "message": "Structurally normalize in the new solver", "tree": {"sha": "85c52cb302922b6566f8fa01359a3a11f0ed55eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c52cb302922b6566f8fa01359a3a11f0ed55eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfafb275e8d9049c26ab58831d58254a09b9f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfafb275e8d9049c26ab58831d58254a09b9f61", "html_url": "https://github.com/rust-lang/rust/commit/4cfafb275e8d9049c26ab58831d58254a09b9f61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfafb275e8d9049c26ab58831d58254a09b9f61/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaf10dcb70718b810aaa74eb1b13d87a89612117", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf10dcb70718b810aaa74eb1b13d87a89612117", "html_url": "https://github.com/rust-lang/rust/commit/eaf10dcb70718b810aaa74eb1b13d87a89612117"}], "stats": {"total": 200, "additions": 176, "deletions": 24}, "files": [{"sha": "d6d1498d708eda8e4008041a146cdf724811d178", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -1,6 +1,5 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::NormalizeExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::TypeVisitableExt;\n@@ -9,6 +8,7 @@ use rustc_session::Limit;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n+use rustc_trait_selection::traits::StructurallyNormalizeExt;\n \n #[derive(Copy, Clone, Debug)]\n pub enum AutoderefKind {\n@@ -66,14 +66,27 @@ impl<'a, 'tcx> Iterator for Autoderef<'a, 'tcx> {\n         }\n \n         // Otherwise, deref if type is derefable:\n-        let (kind, new_ty) =\n-            if let Some(mt) = self.state.cur_ty.builtin_deref(self.include_raw_pointers) {\n-                (AutoderefKind::Builtin, mt.ty)\n-            } else if let Some(ty) = self.overloaded_deref_ty(self.state.cur_ty) {\n-                (AutoderefKind::Overloaded, ty)\n+        let (kind, new_ty) = if let Some(ty::TypeAndMut { ty, .. }) =\n+            self.state.cur_ty.builtin_deref(self.include_raw_pointers)\n+        {\n+            debug_assert_eq!(ty, self.infcx.resolve_vars_if_possible(ty));\n+            // NOTE: we may still need to normalize the built-in deref in case\n+            // we have some type like `&<Ty as Trait>::Assoc`, since users of\n+            // autoderef expect this type to have been structurally normalized.\n+            if self.infcx.tcx.trait_solver_next()\n+                && let ty::Alias(ty::Projection, _) = ty.kind()\n+            {\n+                let (normalized_ty, obligations) = self.structurally_normalize(ty)?;\n+                self.state.obligations.extend(obligations);\n+                (AutoderefKind::Builtin, normalized_ty)\n             } else {\n-                return None;\n-            };\n+                (AutoderefKind::Builtin, ty)\n+            }\n+        } else if let Some(ty) = self.overloaded_deref_ty(self.state.cur_ty) {\n+            (AutoderefKind::Overloaded, ty)\n+        } else {\n+            return None;\n+        };\n \n         if new_ty.references_error() {\n             return None;\n@@ -119,14 +132,11 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n     fn overloaded_deref_ty(&mut self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         debug!(\"overloaded_deref_ty({:?})\", ty);\n-\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n         let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n-\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-\n         let obligation = traits::Obligation::new(\n             tcx,\n             cause.clone(),\n@@ -138,26 +148,48 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let normalized_ty = self\n+        let (normalized_ty, obligations) =\n+            self.structurally_normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, [ty]))?;\n+        debug!(\"overloaded_deref_ty({:?}) = ({:?}, {:?})\", ty, normalized_ty, obligations);\n+        self.state.obligations.extend(obligations);\n+\n+        Some(self.infcx.resolve_vars_if_possible(normalized_ty))\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    pub fn structurally_normalize(\n+        &self,\n+        ty: Ty<'tcx>,\n+    ) -> Option<(Ty<'tcx>, Vec<traits::PredicateObligation<'tcx>>)> {\n+        let tcx = self.infcx.tcx;\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n+\n+        let cause = traits::ObligationCause::misc(self.span, self.body_id);\n+        let normalized_ty = match self\n             .infcx\n             .at(&cause, self.param_env)\n-            .normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs));\n-        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n-        let normalized_ty =\n-            normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);\n-        let errors = fulfillcx.select_where_possible(&self.infcx);\n+            .structurally_normalize(ty, &mut *fulfill_cx)\n+        {\n+            Ok(normalized_ty) => normalized_ty,\n+            Err(errors) => {\n+                // This shouldn't happen, except for evaluate/fulfill mismatches,\n+                // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n+                // by design).\n+                debug!(?errors, \"encountered errors while fulfilling\");\n+                return None;\n+            }\n+        };\n+\n+        let errors = fulfill_cx.select_where_possible(&self.infcx);\n         if !errors.is_empty() {\n             // This shouldn't happen, except for evaluate/fulfill mismatches,\n             // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n             // by design).\n-            debug!(\"overloaded_deref_ty: encountered errors {:?} while fulfilling\", errors);\n+            debug!(?errors, \"encountered errors while fulfilling\");\n             return None;\n         }\n-        let obligations = fulfillcx.pending_obligations();\n-        debug!(\"overloaded_deref_ty({:?}) = ({:?}, {:?})\", ty, normalized_ty, obligations);\n-        self.state.obligations.extend(obligations);\n \n-        Some(self.infcx.resolve_vars_if_possible(normalized_ty))\n+        Some((normalized_ty, fulfill_cx.pending_obligations()))\n     }\n \n     /// Returns the final type we ended up with, which may be an inference"}, {"sha": "9721e3b427d2bdf80ab523ffebf0476f65ffeed6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -35,7 +35,9 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, NormalizeExt, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, NormalizeExt, ObligationCauseCode, ObligationCtxt, StructurallyNormalizeExt,\n+};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -1460,10 +1462,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Resolves `typ` by a single level if `typ` is a type variable.\n+    ///\n+    /// When the new solver is enabled, this will also attempt to normalize\n+    /// the type if it's a projection (note that it will not deeply normalize\n+    /// projections within the type, just the outermost layer of the type).\n+    ///\n     /// If no resolution is possible, then an error is reported.\n     /// Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let ty = self.resolve_vars_with_obligations(ty);\n+        let mut ty = self.resolve_vars_with_obligations(ty);\n+\n+        if self.tcx.trait_solver_next()\n+            && let ty::Alias(ty::Projection, _) = ty.kind()\n+        {\n+            match self\n+                .at(&self.misc(sp), self.param_env)\n+                .structurally_normalize(ty, &mut **self.fulfillment_cx.borrow_mut())\n+            {\n+                Ok(normalized_ty) => {\n+                    ty = normalized_ty;\n+                },\n+                Err(errors) => {\n+                    let guar = self.err_ctxt().report_fulfillment_errors(&errors);\n+                    return self.tcx.ty_error(guar);\n+                }\n+            }\n+        }\n+\n         if !ty.is_ty_var() {\n             ty\n         } else {"}, {"sha": "f265230ff772d59004b848010df780dc085471db", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -17,6 +17,7 @@ pub mod query;\n mod select;\n mod specialize;\n mod structural_match;\n+mod structural_normalize;\n mod util;\n mod vtable;\n pub mod wf;\n@@ -62,6 +63,7 @@ pub use self::specialize::{\n pub use self::structural_match::{\n     search_for_adt_const_param_violation, search_for_structural_match_violation,\n };\n+pub use self::structural_normalize::StructurallyNormalizeExt;\n pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{get_vtable_index_of_object_method, impl_item_is_final, upcast_choices};"}, {"sha": "af8dd0da5792a54e9c34931a204140ec9b784fbb", "filename": "compiler/rustc_trait_selection/src/traits/structural_normalize.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -0,0 +1,55 @@\n+use rustc_infer::infer::at::At;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::traits::{FulfillmentError, TraitEngine};\n+use rustc_middle::ty::{self, Ty};\n+\n+use crate::traits::{query::evaluate_obligation::InferCtxtExt, NormalizeExt, Obligation};\n+\n+pub trait StructurallyNormalizeExt<'tcx> {\n+    fn structurally_normalize(\n+        &self,\n+        ty: Ty<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n+    ) -> Result<Ty<'tcx>, Vec<FulfillmentError<'tcx>>>;\n+}\n+\n+impl<'tcx> StructurallyNormalizeExt<'tcx> for At<'_, 'tcx> {\n+    fn structurally_normalize(\n+        &self,\n+        mut ty: Ty<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n+    ) -> Result<Ty<'tcx>, Vec<FulfillmentError<'tcx>>> {\n+        assert!(!ty.is_ty_var(), \"should have resolved vars before calling\");\n+\n+        if self.infcx.tcx.trait_solver_next() {\n+            while let ty::Alias(ty::Projection, projection_ty) = *ty.kind() {\n+                let new_infer_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::NormalizeProjectionType,\n+                    span: self.cause.span,\n+                });\n+                let obligation = Obligation::new(\n+                    self.infcx.tcx,\n+                    self.cause.clone(),\n+                    self.param_env,\n+                    ty::Binder::dummy(ty::ProjectionPredicate {\n+                        projection_ty,\n+                        term: new_infer_ty.into(),\n+                    }),\n+                );\n+                if self.infcx.predicate_may_hold(&obligation) {\n+                    fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n+                    let errors = fulfill_cx.select_where_possible(self.infcx);\n+                    if !errors.is_empty() {\n+                        return Err(errors);\n+                    }\n+                    ty = self.infcx.resolve_vars_if_possible(new_infer_ty);\n+                } else {\n+                    break;\n+                }\n+            }\n+            Ok(ty)\n+        } else {\n+            Ok(self.normalize(ty).into_value_registering_obligations(self.infcx, fulfill_cx))\n+        }\n+    }\n+}"}, {"sha": "d70534feb072f26097336dd4a0eccaf5ff2cb7f9", "filename": "tests/ui/traits/new-solver/normalize-rcvr-for-inherent.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+// Verify that we can assemble inherent impl candidates on a possibly\n+// unnormalized self type.\n+\n+trait Foo {\n+    type Assoc;\n+}\n+impl Foo for i32 {\n+    type Assoc = Bar;\n+}\n+\n+struct Bar;\n+impl Bar {\n+    fn method(&self) {}\n+}\n+\n+fn build<T: Foo>(_: T) -> T::Assoc {\n+    todo!()\n+}\n+\n+fn main() {\n+    build(1i32).method();\n+}"}, {"sha": "01899c9ad645f2994c08090a7fad4f19c40068ab", "filename": "tests/ui/traits/new-solver/structural-resolve-field.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4cfafb275e8d9049c26ab58831d58254a09b9f61/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfafb275e8d9049c26ab58831d58254a09b9f61/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs?ref=4cfafb275e8d9049c26ab58831d58254a09b9f61", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+#[derive(Default)]\n+struct Foo {\n+    x: i32,\n+}\n+\n+fn main() {\n+    let mut xs = <[Foo; 1]>::default();\n+    xs[0].x = 1;\n+    (&mut xs[0]).x = 2;\n+}"}]}