{"sha": "8b11574ca07f95dd33861d145a43708c20cb4eb5", "node_id": "C_kwDOAAsO6NoAKDhiMTE1NzRjYTA3Zjk1ZGQzMzg2MWQxNDVhNDM3MDhjMjBjYjRlYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T22:58:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-18T22:58:30Z"}, "message": "Auto merge of #107041 - Nilstrieb:back-to-being-clueless-whether-it-really-is-a-literal, r=compiler-errors\n\nRevert \"Improve heuristics whether `format_args` string is a source literal\"\n\nThis reverts commit e6c02aad9345925cfed74f86b414c4d0715d381b (from #106195).\n\nKeeps the code improvements from the PR and the test (as a known-bug).\n\nWorks around #106408 while a proper fix is discussed more thoroughly in #106505, as proposed by `@tmandry.`\n\nReopens #106191\n\nr? compiler-errors", "tree": {"sha": "e01a6e2adbef96b60c5d06afcb9992c5e93a72cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e01a6e2adbef96b60c5d06afcb9992c5e93a72cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b11574ca07f95dd33861d145a43708c20cb4eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b11574ca07f95dd33861d145a43708c20cb4eb5", "html_url": "https://github.com/rust-lang/rust/commit/8b11574ca07f95dd33861d145a43708c20cb4eb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b11574ca07f95dd33861d145a43708c20cb4eb5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333ee6c466972185973d5097f8b5fb0f9fb13fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/333ee6c466972185973d5097f8b5fb0f9fb13fa5", "html_url": "https://github.com/rust-lang/rust/commit/333ee6c466972185973d5097f8b5fb0f9fb13fa5"}, {"sha": "a8086cf9dfbe733f1172dfba816c8e65d3f35e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8086cf9dfbe733f1172dfba816c8e65d3f35e76", "html_url": "https://github.com/rust-lang/rust/commit/a8086cf9dfbe733f1172dfba816c8e65d3f35e76"}], "stats": {"total": 88, "additions": 32, "deletions": 56}, "files": [{"sha": "7b016cadac320bcb9079fce5db9696b304377cbe", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b11574ca07f95dd33861d145a43708c20cb4eb5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b11574ca07f95dd33861d145a43708c20cb4eb5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=8b11574ca07f95dd33861d145a43708c20cb4eb5", "patch": "@@ -20,7 +20,6 @@ pub use Flag::*;\n pub use Piece::*;\n pub use Position::*;\n \n-use rustc_lexer::unescape;\n use std::iter;\n use std::str;\n use std::string;\n@@ -314,11 +313,12 @@ impl<'a> Parser<'a> {\n         append_newline: bool,\n         mode: ParseMode,\n     ) -> Parser<'a> {\n-        let input_string_kind = find_width_map_from_snippet(s, snippet, style);\n+        let input_string_kind = find_width_map_from_snippet(snippet, style);\n         let (width_map, is_literal) = match input_string_kind {\n             InputStringKind::Literal { width_mappings } => (width_mappings, true),\n             InputStringKind::NotALiteral => (Vec::new(), false),\n         };\n+\n         Parser {\n             mode,\n             input: s,\n@@ -856,7 +856,6 @@ impl<'a> Parser<'a> {\n /// written code (code snippet) and the `InternedString` that gets processed in the `Parser`\n /// in order to properly synthesise the intra-string `Span`s for error diagnostics.\n fn find_width_map_from_snippet(\n-    input: &str,\n     snippet: Option<string::String>,\n     str_style: Option<usize>,\n ) -> InputStringKind {\n@@ -869,27 +868,8 @@ fn find_width_map_from_snippet(\n         return InputStringKind::Literal { width_mappings: Vec::new() };\n     }\n \n-    // Strip quotes.\n     let snippet = &snippet[1..snippet.len() - 1];\n \n-    // Macros like `println` add a newline at the end. That technically doens't make them \"literals\" anymore, but it's fine\n-    // since we will never need to point our spans there, so we lie about it here by ignoring it.\n-    // Since there might actually be newlines in the source code, we need to normalize away all trailing newlines.\n-    // If we only trimmed it off the input, `format!(\"\\n\")` would cause a mismatch as here we they actually match up.\n-    // Alternatively, we could just count the trailing newlines and only trim one from the input if they don't match up.\n-    let input_no_nl = input.trim_end_matches('\\n');\n-    let Ok(unescaped) = unescape_string(snippet) else {\n-        return InputStringKind::NotALiteral;\n-    };\n-\n-    let unescaped_no_nl = unescaped.trim_end_matches('\\n');\n-\n-    if unescaped_no_nl != input_no_nl {\n-        // The source string that we're pointing at isn't our input, so spans pointing at it will be incorrect.\n-        // This can for example happen with proc macros that respan generated literals.\n-        return InputStringKind::NotALiteral;\n-    }\n-\n     let mut s = snippet.char_indices();\n     let mut width_mappings = vec![];\n     while let Some((pos, c)) = s.next() {\n@@ -972,19 +952,6 @@ fn find_width_map_from_snippet(\n     InputStringKind::Literal { width_mappings }\n }\n \n-fn unescape_string(string: &str) -> Result<string::String, unescape::EscapeError> {\n-    let mut buf = string::String::new();\n-    let mut error = Ok(());\n-    unescape::unescape_literal(string, unescape::Mode::Str, &mut |_, unescaped_char| {\n-        match unescaped_char {\n-            Ok(c) => buf.push(c),\n-            Err(err) => error = Err(err),\n-        }\n-    });\n-\n-    error.map(|_| buf)\n-}\n-\n // Assert a reasonable size for `Piece`\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Piece<'_>, 16);"}, {"sha": "1b7ef93f41d575abb3e3c0c05b1d615207a357b4", "filename": "tests/ui/fmt/auxiliary/format-string-proc-macro.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fauxiliary%2Fformat-string-proc-macro.rs?ref=8b11574ca07f95dd33861d145a43708c20cb4eb5", "patch": "@@ -28,6 +28,7 @@ pub fn err_with_input_span(input: TokenStream) -> TokenStream {\n     TokenStream::from(TokenTree::Literal(lit))\n }\n \n+\n #[proc_macro]\n pub fn respan_to_invalid_format_literal(input: TokenStream) -> TokenStream {\n     let mut s = Literal::string(\"{\");\n@@ -38,3 +39,14 @@ pub fn respan_to_invalid_format_literal(input: TokenStream) -> TokenStream {\n         TokenTree::from(Group::new(Delimiter::Parenthesis, TokenTree::from(s).into())),\n     ])\n }\n+\n+#[proc_macro]\n+pub fn capture_a_with_prepended_space_preserve_span(input: TokenStream) -> TokenStream {\n+    let mut s = Literal::string(\" {a}\");\n+    s.set_span(input.into_iter().next().unwrap().span());\n+    TokenStream::from_iter([\n+        TokenTree::from(Ident::new(\"format\", Span::call_site())),\n+        TokenTree::from(Punct::new('!', Spacing::Alone)),\n+        TokenTree::from(Group::new(Delimiter::Parenthesis, TokenTree::from(s).into())),\n+    ])\n+}"}, {"sha": "e4e3093b59009b3329810beaec35738ffe97ea1a", "filename": "tests/ui/fmt/indoc-issue-106408.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Findoc-issue-106408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Findoc-issue-106408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Findoc-issue-106408.rs?ref=8b11574ca07f95dd33861d145a43708c20cb4eb5", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:format-string-proc-macro.rs\n+// check-pass\n+\n+extern crate format_string_proc_macro;\n+\n+fn main() {\n+    let a = 0;\n+    format_string_proc_macro::capture_a_with_prepended_space_preserve_span!(\"{a}\");\n+}"}, {"sha": "bb741c0ef93fa8bf0d523f610c767200256fdece", "filename": "tests/ui/fmt/respanned-literal-issue-106191.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.rs?ref=8b11574ca07f95dd33861d145a43708c20cb4eb5", "patch": "@@ -1,10 +1,15 @@\n // aux-build:format-string-proc-macro.rs\n+// check-fail\n+// known-bug: #106191\n+// unset-rustc-env:RUST_BACKTRACE\n+// had to be reverted\n+// error-pattern:internal compiler error\n+// failure-status:101\n+// dont-check-compiler-stderr\n \n extern crate format_string_proc_macro;\n \n fn main() {\n     format_string_proc_macro::respan_to_invalid_format_literal!(\"\u00a1\");\n-    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n     format_args!(r#concat!(\"\u00a1        {\"));\n-    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n }"}, {"sha": "16717f42253d6464fd77914e2136d012d5e36a27", "filename": "tests/ui/fmt/respanned-literal-issue-106191.stderr", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b11574ca07f95dd33861d145a43708c20cb4eb5/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Frespanned-literal-issue-106191.stderr?ref=8b11574ca07f95dd33861d145a43708c20cb4eb5", "patch": "@@ -1,19 +1,2 @@\n-error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/respanned-literal-issue-106191.rs:6:65\n-   |\n-LL |     format_string_proc_macro::respan_to_invalid_format_literal!(\"\u00a1\");\n-   |                                                                 ^^^ expected `'}'` in format string\n-   |\n-   = note: if you intended to print `{`, you can escape it using `{{`\n-\n-error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/respanned-literal-issue-106191.rs:8:18\n-   |\n-LL |     format_args!(r#concat!(\"\u00a1        {\"));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected `'}'` in format string\n-   |\n-   = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n-\nquery stack during panic:\n+end of query stack"}]}