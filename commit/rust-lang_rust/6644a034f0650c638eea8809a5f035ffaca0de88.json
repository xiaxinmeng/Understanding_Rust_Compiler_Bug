{"sha": "6644a034f0650c638eea8809a5f035ffaca0de88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDRhMDM0ZjA2NTBjNjM4ZWVhODgwOWE1ZjAzNWZmYWNhMGRlODg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T20:26:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-22T20:26:37Z"}, "message": "core::rt: Move the definition of Listener to rt::io", "tree": {"sha": "36f39a524f46eadb00dc8240df592f04f897d218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f39a524f46eadb00dc8240df592f04f897d218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6644a034f0650c638eea8809a5f035ffaca0de88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6644a034f0650c638eea8809a5f035ffaca0de88", "html_url": "https://github.com/rust-lang/rust/commit/6644a034f0650c638eea8809a5f035ffaca0de88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6644a034f0650c638eea8809a5f035ffaca0de88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d21b9ff1ea4160b728b62aeca110c0a563d9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d21b9ff1ea4160b728b62aeca110c0a563d9ee", "html_url": "https://github.com/rust-lang/rust/commit/e5d21b9ff1ea4160b728b62aeca110c0a563d9ee"}], "stats": {"total": 55, "additions": 21, "deletions": 34}, "files": [{"sha": "f1b248c6e1d71e941f4d3b9c4cacfccf3fcf7a87", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6644a034f0650c638eea8809a5f035ffaca0de88/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6644a034f0650c638eea8809a5f035ffaca0de88/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=6644a034f0650c638eea8809a5f035ffaca0de88", "patch": "@@ -122,7 +122,6 @@ pub use self::stdio::print;\n pub use self::stdio::println;\n \n pub use self::file::FileStream;\n-pub use self::net::Listener;\n pub use self::net::ip::IpAddr;\n pub use self::net::tcp::TcpListener;\n pub use self::net::tcp::TcpStream;\n@@ -137,8 +136,14 @@ pub use self::extensions::WriterByteConversions;\n pub mod file;\n \n /// Synchronous, non-blocking network I/O.\n-#[path = \"net/mod.rs\"]\n-pub mod net;\n+pub mod net {\n+    pub mod tcp;\n+    pub mod udp;\n+    pub mod ip;\n+    #[cfg(unix)]\n+    pub mod unix;\n+    pub mod http;\n+}\n \n /// Readers and Writers for memory buffers and strings.\n #[cfg(not(stage0))] // XXX Using unsnapshotted features\n@@ -280,6 +285,19 @@ pub trait Seek {\n     fn seek(&mut self, pos: i64, style: SeekStyle);\n }\n \n+/// A listener is a value that listens for connections\n+pub trait Listener<S> {\n+    /// Wait for and accept an incoming connection\n+    ///\n+    /// Returns `None` on timeout.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Raises `io_error` condition. If the condition is handled,\n+    /// then `accept` returns `None`.\n+    fn accept(&mut self) -> Option<S>;\n+}\n+\n /// Common trait for decorator types.\n ///\n /// Provides accessors to get the inner, 'decorated' values. The I/O library"}, {"sha": "130ff6b38fa82f3f1a8a8a8e06c4d8294e672d18", "filename": "src/libcore/rt/io/net/mod.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e5d21b9ff1ea4160b728b62aeca110c0a563d9ee/src%2Flibcore%2Frt%2Fio%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d21b9ff1ea4160b728b62aeca110c0a563d9ee/src%2Flibcore%2Frt%2Fio%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Fmod.rs?ref=e5d21b9ff1ea4160b728b62aeca110c0a563d9ee", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use prelude::*;\n-\n-pub mod tcp;\n-pub mod udp;\n-pub mod ip;\n-#[cfg(unix)]\n-pub mod unix;\n-pub mod http;\n-\n-/// A listener is a value that listens for connections\n-pub trait Listener<S> {\n-    /// Wait for and accept an incoming connection\n-    ///\n-    /// Returns `None` on timeout.\n-    ///\n-    /// # Failure\n-    ///\n-    /// Raises `io_error` condition. If the condition is handled,\n-    /// then `accept` returns `None`.\n-    fn accept(&mut self) -> Option<S>;\n-}"}]}