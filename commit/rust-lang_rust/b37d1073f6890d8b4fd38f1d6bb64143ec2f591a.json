{"sha": "b37d1073f6890d8b4fd38f1d6bb64143ec2f591a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzN2QxMDczZjY4OTBkOGI0ZmQzOGYxZDZiYjY0MTQzZWMyZjU5MWE=", "commit": {"author": {"name": "Baoshan", "email": "pangbw@gmail.com", "date": "2019-08-21T15:27:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-21T15:27:56Z"}, "message": "Merge pull request #2 from Wind-River/bpang-runtest\n\nSupport static and dynamic linking mode for vxWorks in running test suite", "tree": {"sha": "1ed92c38a601ad21631311de1dc77beaa52726cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed92c38a601ad21631311de1dc77beaa52726cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdXWL8CRBK7hj4Ov3rIwAAdHIIABlDqHmBQ6EvRa3ZCAty8AOD\nTwffIZIFPubQh5b2KOuyTz44S0sTBson9kp5YpzuPIDITnx8HXwcNpLtMOrnsjhv\nNOGxKF3UmSzvd7XvTPf3TvFgD9nie+RUQkXOmEFc8wcXn56npWwO3RYe4oaBzVXr\n2MbHyax9/x3yTNMmTlBPFDfe6wYkn/JJ/Ar+bXKRcnhWmQtn0nEGV3prRhVRdo5m\nkWcHeWnre483sAucfUXVXsnXYRzSpJH9lg+ip1WfFsXVQefc+GLkbesY+6C3sHGk\nnd6frT0XYdOSZoDTekoRPmEQJ8YaUCk81kOVOrxEz04sT8ruWutX/a6xdJbwmfg=\n=JHCB\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ed92c38a601ad21631311de1dc77beaa52726cd\nparent 0c8a14c7fb34d6edbc2b24495bb0774aeae27b98\nparent 45d5f2256064306fdc3cc912ce5d6f569f6159b9\nauthor Baoshan <pangbw@gmail.com> 1566401276 -0700\ncommitter GitHub <noreply@github.com> 1566401276 -0700\n\nMerge pull request #2 from Wind-River/bpang-runtest\n\nSupport static and dynamic linking mode for vxWorks in running test suite"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a", "html_url": "https://github.com/rust-lang/rust/commit/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a/comments", "author": {"login": "BaoshanPang", "id": 3380860, "node_id": "MDQ6VXNlcjMzODA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3380860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoshanPang", "html_url": "https://github.com/BaoshanPang", "followers_url": "https://api.github.com/users/BaoshanPang/followers", "following_url": "https://api.github.com/users/BaoshanPang/following{/other_user}", "gists_url": "https://api.github.com/users/BaoshanPang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoshanPang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoshanPang/subscriptions", "organizations_url": "https://api.github.com/users/BaoshanPang/orgs", "repos_url": "https://api.github.com/users/BaoshanPang/repos", "events_url": "https://api.github.com/users/BaoshanPang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoshanPang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8a14c7fb34d6edbc2b24495bb0774aeae27b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8a14c7fb34d6edbc2b24495bb0774aeae27b98", "html_url": "https://github.com/rust-lang/rust/commit/0c8a14c7fb34d6edbc2b24495bb0774aeae27b98"}, {"sha": "45d5f2256064306fdc3cc912ce5d6f569f6159b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d5f2256064306fdc3cc912ce5d6f569f6159b9", "html_url": "https://github.com/rust-lang/rust/commit/45d5f2256064306fdc3cc912ce5d6f569f6159b9"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "a712a27015d2546a2166ac28f6315803c98e6ddf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37d1073f6890d8b4fd38f1d6bb64143ec2f591a/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b37d1073f6890d8b4fd38f1d6bb64143ec2f591a", "patch": "@@ -1725,6 +1725,17 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn use_dynamic_linking(&self) -> bool {\n+        if self.config.target.contains(\"vxworks\") {\n+            match env::var(\"RUST_TEST_DYLINK\") {\n+                Ok(s) => s == \"1\",\n+                _ => false\n+            }\n+        } else {\n+            true\n+        }\n+    }\n+\n     fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n \n@@ -1768,6 +1779,7 @@ impl<'test> TestCx<'test> {\n                     && !self.config.host.contains(\"musl\"))\n                 || self.config.target.contains(\"wasm32\")\n                 || self.config.target.contains(\"nvptx\")\n+                || !self.use_dynamic_linking()\n             {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n                 // to avoid code size bloat and large binaries as much as possible\n@@ -1999,10 +2011,14 @@ impl<'test> TestCx<'test> {\n         }\n \n         if !is_rustdoc {\n-            if self.config.target == \"wasm32-unknown-unknown\" {\n+            if self.config.target == \"wasm32-unknown-unknown\"\n+            || !self.use_dynamic_linking() {\n                 // rustc.arg(\"-g\"); // get any backtrace at all on errors\n             } else if !self.props.no_prefer_dynamic {\n                 rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+                if self.config.target.contains(\"vxworks\") {\n+                    rustc.args(&[\"-C\", \"target-feature=-crt-static\"]);\n+                }\n             }\n         }\n "}]}