{"sha": "bc4a3390648dffd88e6d69d06e6d49cf3981e713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGEzMzkwNjQ4ZGZmZDg4ZTZkNjlkMDZlNmQ0OWNmMzk4MWU3MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T03:02:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T03:02:41Z"}, "message": "Auto merge of #68672 - jonas-schievink:dedup-witness, r=Zoxc\n\nDeduplicate types in the generator witness\n\nFor the `await-call-tree` benchmark this often reduces the types inside the witness from 12 to 2.", "tree": {"sha": "be26afd9096500e5085fb8f7c6647ad72e3f0fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be26afd9096500e5085fb8f7c6647ad72e3f0fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4a3390648dffd88e6d69d06e6d49cf3981e713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4a3390648dffd88e6d69d06e6d49cf3981e713", "html_url": "https://github.com/rust-lang/rust/commit/bc4a3390648dffd88e6d69d06e6d49cf3981e713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4a3390648dffd88e6d69d06e6d49cf3981e713/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01", "html_url": "https://github.com/rust-lang/rust/commit/e5b150edafc0e72cd7f5f3f67a4e8b417d515b01"}, {"sha": "791123d2c4c884f97c431edf6aa8daa5dd9f6062", "url": "https://api.github.com/repos/rust-lang/rust/commits/791123d2c4c884f97c431edf6aa8daa5dd9f6062", "html_url": "https://github.com/rust-lang/rust/commit/791123d2c4c884f97c431edf6aa8daa5dd9f6062"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "50692e0f10487516cfe9b3ab186531cd4fb34d42", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=bc4a3390648dffd88e6d69d06e6d49cf3981e713", "patch": "@@ -7,7 +7,7 @@ use super::FnCtxt;\n use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -160,33 +160,39 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     debug!(\"types in generator {:?}, span = {:?}\", types, body.value.span);\n \n-    // Replace all regions inside the generator interior with late bound regions\n-    // Note that each region slot in the types gets a new fresh late bound region,\n-    // which means that none of the regions inside relate to any other, even if\n-    // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n-    let fold_types: Vec<_> = types.iter().map(|(t, _)| t.ty).collect();\n-    let folded_types = fcx.tcx.fold_regions(&fold_types, &mut false, |_, current_depth| {\n-        counter += 1;\n-        fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n-    });\n-\n-    // Store the generator types and spans into the tables for this generator.\n-    let types = types\n+    let mut captured_tys = FxHashSet::default();\n+    let type_causes: Vec<_> = types\n         .into_iter()\n-        .zip(&folded_types)\n-        .map(|((mut interior_cause, _), ty)| {\n-            interior_cause.ty = ty;\n-            interior_cause\n+        .filter_map(|(mut cause, _)| {\n+            // Erase regions and canonicalize late-bound regions to deduplicate as many types as we\n+            // can.\n+            let erased = fcx.tcx.erase_regions(&cause.ty);\n+            if captured_tys.insert(erased) {\n+                // Replace all regions inside the generator interior with late bound regions.\n+                // Note that each region slot in the types gets a new fresh late bound region,\n+                // which means that none of the regions inside relate to any other, even if\n+                // typeck had previously found constraints that would cause them to be related.\n+                let folded = fcx.tcx.fold_regions(&erased, &mut false, |_, current_depth| {\n+                    counter += 1;\n+                    fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n+                });\n+\n+                cause.ty = folded;\n+                Some(cause)\n+            } else {\n+                None\n+            }\n         })\n         .collect();\n-    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = types;\n-\n-    // Extract type components\n-    let type_list = fcx.tcx.mk_type_list(folded_types.iter());\n \n+    // Extract type components to build the witness type.\n+    let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n \n+    // Store the generator types and spans into the tables for this generator.\n+    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = type_causes;\n+\n     debug!(\n         \"types in generator after region replacement {:?}, span = {:?}\",\n         witness, body.value.span"}, {"sha": "0ac1d189b79b06e255f40c4ac024386a25f04ead", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=bc4a3390648dffd88e6d69d06e6d49cf3981e713", "patch": "@@ -20,7 +20,7 @@ LL |     fn assert_sync<T: Sync>(_: T) {}\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ future returned by `main` is not `Sync`\n    |\n-   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, (), ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n+   = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n note: future is not `Sync` as this value is used across an yield\n   --> $DIR/not-send-sync.rs:12:9\n    |"}, {"sha": "b7ba0d6ab177cee0d46ca1ba9f8484b6e9d2822b", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4a3390648dffd88e6d69d06e6d49cf3981e713/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=bc4a3390648dffd88e6d69d06e6d49cf3981e713", "patch": "@@ -76,7 +76,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {(), ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:53:26\n@@ -92,7 +92,7 @@ error[E0720]: opaque type expands to a recursive type\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, (), ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:69:26"}]}