{"sha": "fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzkzMDgyZWM5MmMzNTM0YzRiMjdmZWYzNWQ3OGQ5N2JkNzdmZDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T03:03:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:30:14Z"}, "message": "std: Rename slice::Vector to Slice\n\nThis required some contortions because importing both raw::Slice\nand slice::Slice makes rustc crash.\n\nSince `Slice` is in the prelude, this renaming is unlikely to\ncasue breakage.\n\n[breaking-change]", "tree": {"sha": "d5154fe0a4a461ce65f1dff659ac9117fb310e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5154fe0a4a461ce65f1dff659ac9117fb310e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "html_url": "https://github.com/rust-lang/rust/commit/fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5b6927e8e428239082ecc17b85a0506bcc9a65", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5b6927e8e428239082ecc17b85a0506bcc9a65", "html_url": "https://github.com/rust-lang/rust/commit/4f5b6927e8e428239082ecc17b85a0506bcc9a65"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "9f4bdaf3da3d95d2e6f3fecfbb9315329d93cac4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -98,7 +98,7 @@ use {Collection, MutableSeq};\n use vec::Vec;\n \n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n-pub use core::slice::{Chunks, Vector, ImmutableSlice, ImmutableEqSlice};\n+pub use core::slice::{Chunks, Slice, ImmutableSlice, ImmutableEqSlice};\n pub use core::slice::{ImmutableOrdSlice, MutableSlice, Items, MutItems};\n pub use core::slice::{MutSplits, MutChunks};\n pub use core::slice::{bytes, MutableCloneableSlice};\n@@ -116,7 +116,7 @@ pub trait VectorVector<T> {\n     fn connect_vec(&self, sep: &T) -> Vec<T>;\n }\n \n-impl<'a, T: Clone, V: Vector<T>> VectorVector<T> for &'a [V] {\n+impl<'a, T: Clone, V: Slice<T>> VectorVector<T> for &'a [V] {\n     fn concat_vec(&self) -> Vec<T> {\n         let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "d8cc80fdf41d76e9e3982ddf09b09efe5761af78", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -18,12 +18,15 @@ use core::default::Default;\n use core::fmt;\n use core::mem;\n use core::ptr;\n-use core::raw::Slice;\n+// FIXME: ICE's abound if you import the `Slice` type while importing `Slice` trait\n+use RawSlice = core::raw::Slice;\n+use core::slice::Slice;\n \n use {Collection, Mutable, MutableSeq};\n use hash;\n use str;\n-use str::{CharRange, StrAllocating, MaybeOwned, Owned, Slice};\n+use str::{CharRange, StrAllocating, MaybeOwned, Owned};\n+use MaybeOwnedSlice = str::Slice; // So many `Slice`s...\n use vec::Vec;\n \n /// A growable string stored as a UTF-8 encoded buffer.\n@@ -130,7 +133,7 @@ impl String {\n     /// ```\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> MaybeOwned<'a> {\n         if str::is_utf8(v) {\n-            return Slice(unsafe { mem::transmute(v) })\n+            return MaybeOwnedSlice(unsafe { mem::transmute(v) })\n         }\n \n         static TAG_CONT_U8: u8 = 128u8;\n@@ -496,7 +499,7 @@ impl String {\n         unsafe {\n             // Attempt to not use an intermediate buffer by just pushing bytes\n             // directly onto this string.\n-            let slice = Slice {\n+            let slice = RawSlice {\n                 data: self.vec.as_ptr().offset(cur_len as int),\n                 len: 4,\n             };"}, {"sha": "78809e32fe9cb438d4b807c0104fd0e7b5a760fb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -13,7 +13,8 @@\n use core::prelude::*;\n \n use alloc::heap::{allocate, reallocate, deallocate};\n-use core::raw::Slice;\n+use RawSlice = core::raw::Slice;\n+use core::slice::Slice;\n use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n@@ -506,7 +507,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n \n impl<T: Eq> Eq for Vec<T> {}\n \n-impl<T: PartialEq, V: Vector<T>> Equiv<V> for Vec<T> {\n+impl<T: PartialEq, V: Slice<T>> Equiv<V> for Vec<T> {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }\n@@ -720,7 +721,7 @@ impl<T> Vec<T> {\n     #[inline]\n     pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n         unsafe {\n-            mem::transmute(Slice {\n+            mem::transmute(RawSlice {\n                 data: self.as_mut_ptr() as *const T,\n                 len: self.len,\n             })\n@@ -1502,7 +1503,7 @@ impl<T:PartialEq> Vec<T> {\n     }\n }\n \n-impl<T> Vector<T> for Vec<T> {\n+impl<T> Slice<T> for Vec<T> {\n     /// Work with `self` as a slice.\n     ///\n     /// # Example\n@@ -1515,11 +1516,11 @@ impl<T> Vector<T> for Vec<T> {\n     /// ```\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n-        unsafe { mem::transmute(Slice { data: self.as_ptr(), len: self.len }) }\n+        unsafe { mem::transmute(RawSlice { data: self.as_ptr(), len: self.len }) }\n     }\n }\n \n-impl<T: Clone, V: Vector<T>> Add<V, Vec<T>> for Vec<T> {\n+impl<T: Clone, V: Slice<T>> Add<V, Vec<T>> for Vec<T> {\n     #[inline]\n     fn add(&self, rhs: &V) -> Vec<T> {\n         let mut res = Vec::with_capacity(self.len() + rhs.as_slice().len());"}, {"sha": "942f7f8b71019f2db0ecdf495b620f86a92caf9b", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -24,7 +24,7 @@ use option::{Option, Some, None};\n use ops::Deref;\n use result::{Ok, Err};\n use result;\n-use slice::{Vector, ImmutableSlice};\n+use slice::{Slice, ImmutableSlice};\n use slice;\n use str::StrSlice;\n use str;"}, {"sha": "74d87712a02ef96cc6d36a44a0f6f3558077fa87", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -143,7 +143,7 @@\n \n use cmp::{PartialEq, Eq, Ord};\n use default::Default;\n-use slice::Vector;\n+use slice::Slice;\n use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n use mem;\n use slice;\n@@ -518,7 +518,7 @@ impl<T: Default> Option<T> {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T> Vector<T> for Option<T> {\n+impl<T> Slice<T> for Option<T> {\n     /// Convert from `Option<T>` to `&[T]` (without copying)\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a [T] {"}, {"sha": "2d5c9c0e960833ee394e73bb747ee0bd15ff486d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -63,4 +63,4 @@ pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n pub use slice::{ImmutableEqSlice, ImmutableOrdSlice};\n pub use slice::{MutableSlice};\n-pub use slice::{Vector, ImmutableSlice};\n+pub use slice::{Slice, ImmutableSlice};"}, {"sha": "3a619b45e53a1611169abbca5554ab9f1498bbaa", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -47,7 +47,9 @@ use ptr::RawPtr;\n use mem;\n use mem::size_of;\n use kinds::marker;\n-use raw::{Repr, Slice};\n+use raw::{Repr};\n+// Avoid conflicts with *both* the Slice trait (buggy) and the `slice::raw` module.\n+use RawSlice = raw::Slice;\n \n //\n // Extension traits\n@@ -240,7 +242,7 @@ impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n         unsafe {\n-            transmute(Slice {\n+            transmute(RawSlice {\n                     data: self.as_ptr().offset(start as int),\n                     len: (end - start)\n                 })\n@@ -380,7 +382,7 @@ impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n \n     fn shift_ref(&mut self) -> Option<&'a T> {\n         unsafe {\n-            let s: &mut Slice<T> = transmute(self);\n+            let s: &mut RawSlice<T> = transmute(self);\n             match raw::shift_ptr(s) {\n                 Some(p) => Some(&*p),\n                 None => None\n@@ -390,7 +392,7 @@ impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n \n     fn pop_ref(&mut self) -> Option<&'a T> {\n         unsafe {\n-            let s: &mut Slice<T> = transmute(self);\n+            let s: &mut RawSlice<T> = transmute(self);\n             match raw::pop_ptr(s) {\n                 Some(p) => Some(&*p),\n                 None => None\n@@ -620,7 +622,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n         assert!(start <= end);\n         assert!(end <= self.len());\n         unsafe {\n-            transmute(Slice {\n+            transmute(RawSlice {\n                     data: self.as_mut_ptr().offset(start as int) as *const T,\n                     len: (end - start)\n                 })\n@@ -685,7 +687,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n \n     fn mut_shift_ref(&mut self) -> Option<&'a mut T> {\n         unsafe {\n-            let s: &mut Slice<T> = transmute(self);\n+            let s: &mut RawSlice<T> = transmute(self);\n             match raw::shift_ptr(s) {\n                 // FIXME #13933: this `&` -> `&mut` cast is a little\n                 // dubious\n@@ -697,7 +699,7 @@ impl<'a,T> MutableSlice<'a, T> for &'a mut [T] {\n \n     fn mut_pop_ref(&mut self) -> Option<&'a mut T> {\n         unsafe {\n-            let s: &mut Slice<T> = transmute(self);\n+            let s: &mut RawSlice<T> = transmute(self);\n             match raw::pop_ptr(s) {\n                 // FIXME #13933: this `&` -> `&mut` cast is a little\n                 // dubious\n@@ -859,12 +861,12 @@ impl<'a, T:Clone> MutableCloneableSlice<T> for &'a mut [T] {\n //\n \n /// Any vector that can be represented as a slice.\n-pub trait Vector<T> {\n+pub trait Slice<T> {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T];\n }\n \n-impl<'a,T> Vector<T> for &'a [T] {\n+impl<'a,T> Slice<T> for &'a [T] {\n     #[inline(always)]\n     fn as_slice<'a>(&'a self) -> &'a [T] { *self }\n }\n@@ -1323,7 +1325,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut [T]> for MutChunks<'a, T> {\n  */\n pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n     unsafe {\n-        transmute(Slice { data: s, len: 1 })\n+        transmute(RawSlice { data: s, len: 1 })\n     }\n }\n \n@@ -1333,7 +1335,7 @@ pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n     unsafe {\n         let ptr: *const A = transmute(s);\n-        transmute(Slice { data: ptr, len: 1 })\n+        transmute(RawSlice { data: ptr, len: 1 })\n     }\n }\n \n@@ -1460,7 +1462,7 @@ impl<'a,T:PartialEq> PartialEq for &'a [T] {\n \n impl<'a,T:Eq> Eq for &'a [T] {}\n \n-impl<'a,T:PartialEq, V: Vector<T>> Equiv<V> for &'a [T] {\n+impl<'a,T:PartialEq, V: Slice<T>> Equiv<V> for &'a [T] {\n     #[inline]\n     fn equiv(&self, other: &V) -> bool { self.as_slice() == other.as_slice() }\n }"}, {"sha": "987f214b153e07d3ba107024563594cf6b27ee2c", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -84,7 +84,7 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n     }\n }\n \n-impl<'a, T: PartialEq, V: Vector<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n+impl<'a, T: PartialEq, V: Slice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n     fn equiv(&self, other: &V) -> bool {\n         self.as_slice() == other.as_slice()\n     }\n@@ -99,7 +99,7 @@ impl<'a, T: PartialEq, V: Vector<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n // In any case, with `Vector` in place, the client can just use\n // `as_slice` if they prefer that over `match`.\n \n-impl<'b,T> slice::Vector<T> for MaybeOwnedVector<'b,T> {\n+impl<'b,T> Slice<T> for MaybeOwnedVector<'b,T> {\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         match self {\n             &Growable(ref v) => v.as_slice(),"}, {"sha": "ceb7dcc54560c04931744bf91f3dbaeecdcd0d1d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -379,7 +379,7 @@ fn mk_test_module(cx: &TestCtxt, reexport_test_harness_main: &Option<InternedStr\n     let mainfn = (quote_item!(&cx.ext_cx,\n         pub fn main() {\n             #![main]\n-            use std::slice::Vector;\n+            use std::slice::Slice;\n             test::test_main_static(::std::os::args().as_slice(), TESTS);\n         }\n     )).unwrap();"}, {"sha": "e5f42bd65a30071d21dae7840c6f761cebb8edfe", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -19,7 +19,7 @@ use fmt;\n use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n-use slice::{ImmutableSlice, MutableSlice, Vector};\n+use slice::{ImmutableSlice, MutableSlice, Slice};\n use str::{Str, StrSlice};\n use str;\n use string::String;"}, {"sha": "5f52c0ada5d62d2d4077ab21864a905d839a885d", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -43,7 +43,7 @@ use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n use raw;\n-use slice::Vector;\n+use slice::Slice;\n \n /// The type representing a foreign chunk of memory\n pub struct CVec<T> {\n@@ -145,7 +145,7 @@ impl<T> CVec<T> {\n     }\n }\n \n-impl<T> Vector<T> for CVec<T> {\n+impl<T> Slice<T> for CVec<T> {\n     /// View the stored data as a slice.\n     fn as_slice<'a>(&'a self) -> &'a [T] {\n         unsafe {"}, {"sha": "766f92292b1875d5b163bdfa4ef1b89143f61f1a", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -29,7 +29,7 @@ use option::*;\n use os;\n use path::{Path,GenericPath};\n use result::*;\n-use slice::{Vector,ImmutableSlice};\n+use slice::{Slice,ImmutableSlice};\n use str;\n use string::String;\n use vec::Vec;"}, {"sha": "12caa7158658e28693df873b74ab099b4e6505c0", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -21,7 +21,7 @@ use option::{Option, Some, None};\n use result::{Ok, Err};\n use io;\n use io::{IoError, IoResult, Reader};\n-use slice::{ImmutableSlice, Vector};\n+use slice::{ImmutableSlice, Slice};\n use ptr::RawPtr;\n \n /// An iterator that reads a single byte on each iteration,"}, {"sha": "ea9d08171e6cef2794753ab83d141915cd2d0b93", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -19,7 +19,7 @@ use result::{Err, Ok};\n use io;\n use io::{Reader, Writer, Seek, Buffer, IoError, SeekStyle, IoResult};\n use slice;\n-use slice::{Vector, ImmutableSlice, MutableSlice};\n+use slice::{Slice, ImmutableSlice, MutableSlice};\n use vec::Vec;\n \n static BUF_CAPACITY: uint = 128;"}, {"sha": "c95dd8618ed10a7648e14f8f07939117a3a3d9ad", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -235,7 +235,7 @@ use os;\n use boxed::Box;\n use result::{Ok, Err, Result};\n use rt::rtio;\n-use slice::{Vector, MutableSlice, ImmutableSlice};\n+use slice::{Slice, MutableSlice, ImmutableSlice};\n use str::{Str, StrSlice};\n use str;\n use string::String;"}, {"sha": "6f148eea83c833b9e488b29d4fc5e135ac1d10f1", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -45,7 +45,7 @@ use path::{Path, GenericPath, BytesContainer};\n use ptr::RawPtr;\n use ptr;\n use result::{Err, Ok, Result};\n-use slice::{Vector, ImmutableSlice, MutableSlice, ImmutableEqSlice};\n+use slice::{Slice, ImmutableSlice, MutableSlice, ImmutableEqSlice};\n use str::{Str, StrSlice, StrAllocating};\n use string::String;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};"}, {"sha": "16236c014724da9309fe6d9d9229d8c79502e734", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -74,7 +74,7 @@ use option::{Option, None, Some};\n use str;\n use str::{MaybeOwned, Str, StrSlice};\n use string::String;\n-use slice::Vector;\n+use slice::Slice;\n use slice::{ImmutableEqSlice, ImmutableSlice};\n use vec::Vec;\n "}, {"sha": "321ec438c2024db4ecc7bea6783472cf9c725d08", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -21,7 +21,7 @@ use iter::{DoubleEndedIterator, AdditiveIterator, Extendable, Iterator, Map};\n use option::{Option, None, Some};\n use str::Str;\n use str;\n-use slice::{CloneableVector, Splits, Vector, VectorVector,\n+use slice::{CloneableVector, Splits, Slice, VectorVector,\n             ImmutableEqSlice, ImmutableSlice};\n use vec::Vec;\n \n@@ -367,7 +367,7 @@ impl Path {\n \n     /// Returns a normalized byte vector representation of a path, by removing all empty\n     /// components, and unnecessary . and .. components.\n-    fn normalize<V: Vector<u8>+CloneableVector<u8>>(v: V) -> Vec<u8> {\n+    fn normalize<V: Slice<u8>+CloneableVector<u8>>(v: V) -> Vec<u8> {\n         // borrowck is being very picky\n         let val = {\n             let is_abs = !v.as_slice().is_empty() && v.as_slice()[0] == SEP_BYTE;"}, {"sha": "8402d751bf2c81f54d1e5cfee784325ee1dd4cc8", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -23,7 +23,7 @@ use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Iterator, Map};\n use mem;\n use option::{Option, Some, None};\n-use slice::{Vector, ImmutableSlice};\n+use slice::{Slice, ImmutableSlice};\n use str::{CharSplits, Str, StrAllocating, StrVector, StrSlice};\n use string::String;\n use unicode::char::UnicodeChar;"}, {"sha": "3d4ab66a94f31ff423f2c63884cd6c95cdaa192a", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc93082ec92c3534c4b27fef35d78d97bd77fd2/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=fbc93082ec92c3534c4b27fef35d78d97bd77fd2", "patch": "@@ -86,7 +86,7 @@\n #[doc(no_inline)] pub use slice::{MutableCloneableSlice, MutableOrdSlice};\n #[doc(no_inline)] pub use slice::{ImmutableSlice, MutableSlice};\n #[doc(no_inline)] pub use slice::{ImmutableEqSlice, ImmutableOrdSlice};\n-#[doc(no_inline)] pub use slice::{Vector, VectorVector};\n+#[doc(no_inline)] pub use slice::{Slice, VectorVector};\n #[doc(no_inline)] pub use slice::MutableSliceAllocating;\n #[doc(no_inline)] pub use string::String;\n #[doc(no_inline)] pub use vec::Vec;"}]}