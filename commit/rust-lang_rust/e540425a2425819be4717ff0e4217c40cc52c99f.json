{"sha": "e540425a2425819be4717ff0e4217c40cc52c99f", "node_id": "C_kwDOAAsO6NoAKGU1NDA0MjVhMjQyNTgxOWJlNDcxN2ZmMGU0MjE3YzQwY2M1MmM5OWY", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-07-02T06:30:47Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-07-13T04:30:36Z"}, "message": "Add a `File::create_new` constructor\n\nWe have `File::create` for creating a file or opening an existing file,\nbut the secure way to guarantee creating a new file requires a longhand\ninvocation via `OpenOptions`.\n\nAdd `File::create_new` to handle this case, to make it easier for people\nto do secure file creation.", "tree": {"sha": "82d31d343449b06fbd8b036302173c6e2162295f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d31d343449b06fbd8b036302173c6e2162295f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e540425a2425819be4717ff0e4217c40cc52c99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e540425a2425819be4717ff0e4217c40cc52c99f", "html_url": "https://github.com/rust-lang/rust/commit/e540425a2425819be4717ff0e4217c40cc52c99f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e540425a2425819be4717ff0e4217c40cc52c99f/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6fa4f118d88991458549464d960aa1e495541b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6fa4f118d88991458549464d960aa1e495541b", "html_url": "https://github.com/rust-lang/rust/commit/9a6fa4f118d88991458549464d960aa1e495541b"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "97093ffb46fba97ff7a2784ecd451cb14d880aed", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e540425a2425819be4717ff0e4217c40cc52c99f/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e540425a2425819be4717ff0e4217c40cc52c99f/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=e540425a2425819be4717ff0e4217c40cc52c99f", "patch": "@@ -366,6 +366,35 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n+    /// Creates a new file in read-write mode; error if the file exists.\n+    ///\n+    /// This function will create a file if it does not exist, or return an error if it does. This\n+    /// way, if the call succeeds, the file returned is guaranteed to be new.\n+    ///\n+    /// This option is useful because it is atomic. Otherwise between checking whether a file\n+    /// exists and creating a new one, the file may have been created by another process (a TOCTOU\n+    /// race condition / attack).\n+    ///\n+    /// This can also be written using\n+    /// `File::options().read(true).write(true).create_new(true).open(...)`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(file_create_new)]\n+    ///\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::create_new(\"foo.txt\")?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"file_create_new\", issue = \"none\")]\n+    pub fn create_new<P: AsRef<Path>>(path: P) -> io::Result<File> {\n+        OpenOptions::new().read(true).write(true).create_new(true).open(path.as_ref())\n+    }\n+\n     /// Returns a new OpenOptions object.\n     ///\n     /// This function returns a new OpenOptions object that you can use to"}]}