{"sha": "6710af358051725342d4eec11e0c423aabd98511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTBhZjM1ODA1MTcyNTM0MmQ0ZWVjMTFlMGM0MjNhYWJkOTg1MTE=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-15T17:32:12Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:51Z"}, "message": "Slightly simplify tvec::slice_for_each", "tree": {"sha": "b1038639b4172ef79e2f66b2c8cecd8ff7efb995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1038639b4172ef79e2f66b2c8cecd8ff7efb995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6710af358051725342d4eec11e0c423aabd98511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6710af358051725342d4eec11e0c423aabd98511", "html_url": "https://github.com/rust-lang/rust/commit/6710af358051725342d4eec11e0c423aabd98511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6710af358051725342d4eec11e0c423aabd98511/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6441c977cb387b2d057dc6e3b704b475afd97137", "url": "https://api.github.com/repos/rust-lang/rust/commits/6441c977cb387b2d057dc6e3b704b475afd97137", "html_url": "https://github.com/rust-lang/rust/commit/6441c977cb387b2d057dc6e3b704b475afd97137"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "36762885cc99a68d72a4f3e2138ee98ee9d1d8a2", "filename": "src/librustc_trans/tvec.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6710af358051725342d4eec11e0c423aabd98511/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6710af358051725342d4eec11e0c423aabd98511/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=6710af358051725342d4eec11e0c423aabd98511", "patch": "@@ -15,16 +15,13 @@ use llvm::ValueRef;\n use common::*;\n use rustc::ty::Ty;\n \n-pub fn slice_for_each<'blk, 'tcx, F>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n-                                     data_ptr: ValueRef,\n-                                     unit_ty: Ty<'tcx>,\n-                                     len: ValueRef,\n-                                     f: F)\n-                                     -> BlockAndBuilder<'blk, 'tcx>\n-    where F: FnOnce(&BlockAndBuilder<'blk, 'tcx>, ValueRef)\n-{\n-    let fcx = bcx.fcx();\n-\n+pub fn slice_for_each<'blk, 'tcx, F>(\n+    bcx: &BlockAndBuilder<'blk, 'tcx>,\n+    data_ptr: ValueRef,\n+    unit_ty: Ty<'tcx>,\n+    len: ValueRef,\n+    f: F\n+) -> BlockAndBuilder<'blk, 'tcx> where F: FnOnce(&BlockAndBuilder<'blk, 'tcx>, ValueRef) {\n     // Special-case vectors with elements of size 0  so they don't go out of bounds (#9890)\n     let zst = type_is_zero_size(bcx.ccx(), unit_ty);\n     let add = |bcx: &BlockAndBuilder, a, b| if zst {\n@@ -33,9 +30,9 @@ pub fn slice_for_each<'blk, 'tcx, F>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n         bcx.inbounds_gep(a, &[b])\n     };\n \n-    let body_bcx = fcx.build_new_block(\"slice_loop_body\");\n-    let next_bcx = fcx.build_new_block(\"slice_loop_next\");\n-    let header_bcx = fcx.build_new_block(\"slice_loop_header\");\n+    let body_bcx = bcx.fcx().build_new_block(\"slice_loop_body\");\n+    let next_bcx = bcx.fcx().build_new_block(\"slice_loop_next\");\n+    let header_bcx = bcx.fcx().build_new_block(\"slice_loop_header\");\n \n     let start = if zst {\n         C_uint(bcx.ccx(), 0usize)\n@@ -51,13 +48,7 @@ pub fn slice_for_each<'blk, 'tcx, F>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n     header_bcx.cond_br(keep_going, body_bcx.llbb(), next_bcx.llbb());\n \n     f(&body_bcx, if zst { data_ptr } else { current });\n-    // FIXME(simulacrum): The code below is identical to the closure (add) above, but using the\n-    // closure doesn't compile due to body_bcx still being borrowed when dropped.\n-    let next = if zst {\n-        body_bcx.add(current, C_uint(bcx.ccx(), 1usize))\n-    } else {\n-        body_bcx.inbounds_gep(current, &[C_uint(bcx.ccx(), 1usize)])\n-    };\n+    let next = add(&body_bcx, current, C_uint(bcx.ccx(), 1usize));\n     body_bcx.add_incoming_to_phi(current, next, body_bcx.llbb());\n     body_bcx.br(header_bcx.llbb());\n     next_bcx"}]}