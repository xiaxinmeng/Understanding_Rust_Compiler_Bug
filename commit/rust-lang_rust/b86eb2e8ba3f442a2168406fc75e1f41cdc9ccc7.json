{"sha": "b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NmViMmU4YmEzZjQ0MmEyMTY4NDA2ZmM3NWUxZjQxY2RjOWNjYzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-28T19:34:55Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:07:31Z"}, "message": "Some optimizations\n\n* Only format global _comments when debug_assertions are enabled\n* Only call build_value_labels_ranges in base.rs when debug_assertions are enabled\n\nBenchmark #1: CHANNEL='pre' ../cargo.sh build\n  Time (mean \u00b1 \u03c3):     17.657 s \u00b1  1.050 s    [User: 31.871 s, System: 3.014 s]\n  Range (min \u2026 max):   16.907 s \u2026 20.394 s    10 runs\n\nBenchmark #2: ../cargo.sh build\n  Time (mean \u00b1 \u03c3):     16.640 s \u00b1  0.255 s    [User: 30.238 s, System: 2.965 s]\n  Range (min \u2026 max):   16.413 s \u2026 17.186 s    10 runs\n\n  Warning: Statistical outliers were detected. Consider re-running this benchmark on a quiet PC without any interferences from other programs. It might help to use the '--warmup' or '--prepare' options.\n\nSummary\n  '../cargo.sh build' ran\n    1.06 \u00b1 0.07 times faster than 'CHANNEL='pre' ../cargo.sh build'", "tree": {"sha": "ffbb6060d2267595e35a918e2bfa99adcf006508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffbb6060d2267595e35a918e2bfa99adcf006508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "html_url": "https://github.com/rust-lang/rust/commit/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84ff8504a6a6ba630abc7f67dad2552f1984006", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84ff8504a6a6ba630abc7f67dad2552f1984006", "html_url": "https://github.com/rust-lang/rust/commit/c84ff8504a6a6ba630abc7f67dad2552f1984006"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "243852f1d2bef310817ec29e9fd3aec588ec8e22", "filename": "src/base.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "patch": "@@ -74,20 +74,22 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     context.func = func;\n     cx.module.define_function(func_id, context).unwrap();\n \n-    let value_ranges = context\n-        .build_value_labels_ranges(cx.module.isa())\n-        .expect(\"value location ranges\");\n-\n     // Write optimized function to file for debugging\n     #[cfg(debug_assertions)]\n-    crate::pretty_clif::write_clif_file(\n-        cx.tcx,\n-        \"opt\",\n-        instance,\n-        &context.func,\n-        &clif_comments,\n-        Some(&value_ranges),\n-    );\n+    {\n+        let value_ranges = context\n+            .build_value_labels_ranges(cx.module.isa())\n+            .expect(\"value location ranges\");\n+\n+        crate::pretty_clif::write_clif_file(\n+            cx.tcx,\n+            \"opt\",\n+            instance,\n+            &context.func,\n+            &clif_comments,\n+            Some(&value_ranges),\n+        );\n+    }\n \n     // Define debuginfo for function\n     let isa = cx.module.isa();"}, {"sha": "64359f3899f5385361e12e6f2f4f051feef5baa0", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=b86eb2e8ba3f442a2168406fc75e1f41cdc9ccc7", "patch": "@@ -74,8 +74,8 @@ pub struct CommentWriter {\n \n impl CommentWriter {\n     pub fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n-        CommentWriter {\n-            global_comments: vec![\n+        let mut global_comments = if cfg!(debug_assertions) {\n+            vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name.as_str()),\n                 format!(\"instance {:?}\", instance),\n                 format!(\n@@ -86,7 +86,13 @@ impl CommentWriter {\n                     )\n                 ),\n                 String::new(),\n-            ],\n+            ]\n+        } else {\n+            vec![]\n+        };\n+\n+        CommentWriter {\n+            global_comments,\n             entity_comments: HashMap::new(),\n             inst_comments: HashMap::new(),\n         }"}]}