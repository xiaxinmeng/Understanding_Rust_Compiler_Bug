{"sha": "8b82fd7a94313140d8c745bb8cc647a953e07d9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiODJmZDdhOTQzMTMxNDBkOGM3NDViYjhjYzY0N2E5NTNlMDdkOWU=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-26T04:54:48Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-29T01:09:15Z"}, "message": "Remove allocation in push_type_params", "tree": {"sha": "0a1d6dea9f05473277f7e45cc77332c7971cf590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1d6dea9f05473277f7e45cc77332c7971cf590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b82fd7a94313140d8c745bb8cc647a953e07d9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b82fd7a94313140d8c745bb8cc647a953e07d9e", "html_url": "https://github.com/rust-lang/rust/commit/8b82fd7a94313140d8c745bb8cc647a953e07d9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b82fd7a94313140d8c745bb8cc647a953e07d9e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79c80d0b0f3fa15111ba88fe7260f86ff6df410", "html_url": "https://github.com/rust-lang/rust/commit/a79c80d0b0f3fa15111ba88fe7260f86ff6df410"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "322c5eb6e182a135c7397849b0c645cb9930517f", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b82fd7a94313140d8c745bb8cc647a953e07d9e/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b82fd7a94313140d8c745bb8cc647a953e07d9e/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=8b82fd7a94313140d8c745bb8cc647a953e07d9e", "patch": "@@ -36,6 +36,7 @@ use glue;\n use abi::{Abi, FnType};\n use back::symbol_names;\n use std::fmt::Write;\n+use std::iter;\n \n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum TransItem<'tcx> {\n@@ -410,7 +411,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::TyFloat(ast::FloatTy::F64) => output.push_str(\"f64\"),\n             ty::TyAdt(adt_def, substs) => {\n                 self.push_def_path(adt_def.did, output);\n-                self.push_type_params(substs, &[], output);\n+                self.push_type_params(substs, iter::empty(), output);\n             },\n             ty::TyTuple(component_types) => {\n                 output.push('(');\n@@ -461,7 +462,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 if let Some(principal) = trait_data.principal() {\n                     self.push_def_path(principal.def_id(), output);\n                     self.push_type_params(principal.skip_binder().substs,\n-                        &trait_data.projection_bounds().collect::<Vec<_>>()[..],\n+                        trait_data.projection_bounds(),\n                         output);\n                 }\n             },\n@@ -513,7 +514,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.item_generics(self.tcx.closure_base_def_id(def_id));\n                 let substs = closure_substs.substs.truncate_to(self.tcx, generics);\n-                self.push_type_params(substs, &[], output);\n+                self.push_type_params(substs, iter::empty(), output);\n             }\n             ty::TyError |\n             ty::TyInfer(_) |\n@@ -553,11 +554,14 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n         output.pop();\n     }\n \n-    pub fn push_type_params(&self,\n+    fn push_type_params<I>(&self,\n                             substs: &Substs<'tcx>,\n-                            projections: &[ty::PolyExistentialProjection<'tcx>],\n-                            output: &mut String) {\n-        if substs.types().next().is_none() && projections.is_empty() {\n+                            projections: I,\n+                            output: &mut String)\n+        where I: Iterator<Item=ty::PolyExistentialProjection<'tcx>>\n+    {\n+        let mut projections = projections.peekable();\n+        if substs.types().next().is_none() && projections.peek().is_none() {\n             return;\n         }\n \n@@ -587,6 +591,6 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                                    instance: Instance<'tcx>,\n                                    output: &mut String) {\n         self.push_def_path(instance.def, output);\n-        self.push_type_params(instance.substs, &[], output);\n+        self.push_type_params(instance.substs, iter::empty(), output);\n     }\n }"}]}