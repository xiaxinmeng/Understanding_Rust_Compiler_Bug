{"sha": "239e64242c2f35b223403be611ad6a25ce8e76c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOWU2NDI0MmMyZjM1YjIyMzQwM2JlNjExYWQ2YTI1Y2U4ZTc2YzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-06T01:36:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:32:52Z"}, "message": "libsyntax: Stop parsing structural record types", "tree": {"sha": "47ae76e07c8e2bb28f6ddf2695881a0b90424325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ae76e07c8e2bb28f6ddf2695881a0b90424325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/239e64242c2f35b223403be611ad6a25ce8e76c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/239e64242c2f35b223403be611ad6a25ce8e76c2", "html_url": "https://github.com/rust-lang/rust/commit/239e64242c2f35b223403be611ad6a25ce8e76c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/239e64242c2f35b223403be611ad6a25ce8e76c2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108", "html_url": "https://github.com/rust-lang/rust/commit/6b5d1afeec9ca48c224a8c69d1d3515edf9b1108"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "bbcbd73aabdeaa17b840c3c645be6542c0c60691", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -22,14 +22,14 @@ use str;\n pub type FreeGlue = &self/fn(*TypeDesc, *c_void);\n \n // Corresponds to runtime type_desc type\n-pub enum TypeDesc = {\n+pub struct TypeDesc {\n     size: uint,\n     align: uint,\n     take_glue: uint,\n     drop_glue: uint,\n     free_glue: uint\n     // Remaining fields not listed\n-};\n+}\n \n /// The representation of a Rust closure\n pub struct Closure {"}, {"sha": "e7ffc6c55cbc564058773dde86a6f48d4b2bdc08", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -22,11 +22,11 @@ pub mod intrinsic {\n         }\n     }\n \n-    pub enum TyDesc = {\n+    pub struct TyDesc {\n         size: uint,\n         align: uint\n         // Remaining fields not listed\n-    };\n+    }\n \n     pub trait TyVisitor {\n         fn visit_bot(&self) -> bool;"}, {"sha": "9fc104f9400de2d02265b9bdd70e7822804a19cc", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -36,13 +36,6 @@ use syntax::{ast, visit};\n \n pub type parent = Option<ast::node_id>;\n \n-/* Records the parameter ID of a region name. */\n-pub type binding = {\n-    node_id: ast::node_id,\n-    name: ~str,\n-    br: ty::bound_region\n-};\n-\n /**\n Encodes the bounding lifetime for a given AST node:\n "}, {"sha": "434fcd4cf31ef53948374c4b4a86a06a1f05ac16", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -22,19 +22,6 @@ use util::ppaux::ty_to_str;\n // ______________________________________________________________________\n // compute sizeof / alignof\n \n-pub type metrics = {\n-    bcx: block,\n-    sz: ValueRef,\n-    align: ValueRef\n-};\n-\n-pub type tag_metrics = {\n-    bcx: block,\n-    sz: ValueRef,\n-    align: ValueRef,\n-    payload_align: ValueRef\n-};\n-\n // Returns the number of bytes clobbered by a Store to this type.\n pub fn llsize_of_store(cx: @CrateContext, t: TypeRef) -> uint {\n     unsafe {"}, {"sha": "aaa637fc2d5cc6aa1651004981296570f0fa9900", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -775,7 +775,6 @@ type constness_cache = HashMap<ast::def_id, const_eval::constness>;\n pub type node_type_table = @mut SmallIntMap<t>;\n \n fn mk_rcache() -> creader_cache {\n-    type val = {cnum: int, pos: uint, len: uint};\n     return oldmap::HashMap();\n }\n "}, {"sha": "1535156d96c729cb7ff7e8217ed72cb7dcb6f2ee", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -94,6 +94,12 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n                             (intrinsic_item.ident, (def_id, ty));\n                       }\n \n+                      ast::item_struct(*) => {\n+                        let ty = ty::mk_struct(ccx.tcx, def_id, substs);\n+                        ccx.tcx.intrinsic_defs.insert\n+                            (intrinsic_item.ident, (def_id, ty));\n+                      }\n+\n                       _ => {}\n                     }\n                 }"}, {"sha": "6a3a509ded4440c7f3cff4bda891b7f4f6c7a90e", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -26,9 +26,9 @@ use core::prelude::*;\n /// The base price of a muffin on a non-holiday\n const price_of_a_muffin: float = 70f;\n \n-type WaitPerson = {\n+struct WaitPerson {\n     hair_color: ~str\n-};\n+}\n \n /// The type of things that produce omnomnom\n enum OmNomNomy {"}, {"sha": "1038982d353f21c9713545b7bc24e72eca39bb14", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -217,7 +217,6 @@ pub struct FileLines {\n pub enum FileSubstr {\n     pub FssNone,\n     pub FssInternal(span),\n-    pub FssExternal({filename: ~str, line: uint, col: CharPos})\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n@@ -348,12 +347,6 @@ pub impl CodeMap {\n             FssInternal(sp) =>\n             self.lookup_char_pos_adj(\n                 sp.lo + (pos - loc.file.start_pos)),\n-            FssExternal(ref eloc) =>\n-            LocWithOpt {\n-                filename: /* FIXME (#2543) */ copy (*eloc).filename,\n-                line: (*eloc).line + loc.line - 1u,\n-                col: if loc.line == 1 {eloc.col + loc.col} else {loc.col},\n-                file: None}\n         }\n     }\n \n@@ -368,7 +361,6 @@ pub impl CodeMap {\n                     expn_info: sp.expn_info\n                 })\n             }\n-            FssExternal(_) => sp\n         }\n     }\n "}, {"sha": "dbb44858761c468d171a538084fb1a4cea9b226f", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -49,6 +49,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteMutOwnedPointer,\n     ObsoleteMutVector,\n     ObsoleteTraitImplVisibility,\n+    ObsoleteRecordType,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -145,6 +146,10 @@ pub impl Parser {\n                  because the `impl...for...` form defines overloads for \\\n                  methods that already exist; remove the `pub` or `priv`\"\n             ),\n+            ObsoleteRecordType => (\n+                \"structural record type\",\n+                \"use a structure instead\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "cb4a2ce6920ad14faeff0bdb057202a0062346c8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -75,6 +75,7 @@ use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n use parse::obsolete::{ObsoleteMutVector, ObsoleteTraitImplVisibility};\n+use parse::obsolete::{ObsoleteRecordType};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -657,6 +658,7 @@ pub impl Parser {\n             if elems.len() == 0 {\n                 self.unexpected_last(&token::RBRACE);\n             }\n+            self.obsolete(*self.last_span, ObsoleteRecordType);\n             ty_rec(elems)\n         } else if *self.token == token::LBRACKET {\n             self.expect(&token::LBRACKET);"}, {"sha": "d62c719edf1e21b3f11ae2a642f38d787ab35915", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239e64242c2f35b223403be611ad6a25ce8e76c2/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=239e64242c2f35b223403be611ad6a25ce8e76c2", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type pair<A,B> = {\n+struct pair<A,B> {\n     a: A, b: B\n-};\n+}\n \n fn f<A:Copy + &static>(a: A, b: u16) -> @fn() -> (A, u16) {\n     let result: @fn() -> (A, u16) = || (a, b);"}]}