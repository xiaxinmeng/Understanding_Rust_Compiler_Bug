{"sha": "b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "node_id": "C_kwDOAAsO6NoAKGI0YzRiYzA5ZGRlMmE2ZjZjZTI5NzhlMDBmYjU3YjA4M2VhNGFjY2M", "commit": {"author": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-12-07T15:44:51Z"}, "committer": {"name": "threadexception", "email": "hannes.gaumann@outlook.de", "date": "2021-12-08T21:00:44Z"}, "message": "Do not attempt to suggest help for overly malformed struct/function call", "tree": {"sha": "93b7e8df53978e64bd4fe4d175832630ba073ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b7e8df53978e64bd4fe4d175832630ba073ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "html_url": "https://github.com/rust-lang/rust/commit/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/comments", "author": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "terrarier2111", "id": 58695553, "node_id": "MDQ6VXNlcjU4Njk1NTUz", "avatar_url": "https://avatars.githubusercontent.com/u/58695553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrarier2111", "html_url": "https://github.com/terrarier2111", "followers_url": "https://api.github.com/users/terrarier2111/followers", "following_url": "https://api.github.com/users/terrarier2111/following{/other_user}", "gists_url": "https://api.github.com/users/terrarier2111/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrarier2111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrarier2111/subscriptions", "organizations_url": "https://api.github.com/users/terrarier2111/orgs", "repos_url": "https://api.github.com/users/terrarier2111/repos", "events_url": "https://api.github.com/users/terrarier2111/events{/privacy}", "received_events_url": "https://api.github.com/users/terrarier2111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "0f8c0e1b8cff85c36fabc3678c1c4c90bcf66273", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "patch": "@@ -1100,30 +1100,37 @@ impl<'a> Parser<'a> {\n                 snapshot.bump(); // `(`\n                 match snapshot.parse_struct_fields(path, false, token::Paren) {\n                     Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n-                        // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n+                        // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n                         *self = snapshot;\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(self.prev_token.span);\n-                        err.cancel();\n-                        self.struct_span_err(\n-                            span,\n-                            \"invalid `struct` delimiters or `fn` call arguments\",\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n-                            vec![(open_paren, \" { \".to_string()), (close_paren, \" }\".to_string())],\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a function, use the arguments directly\", name),\n-                            fields\n-                                .into_iter()\n-                                .map(|field| (field.span.until(field.expr.span), String::new()))\n-                                .collect(),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n+                        if !fields.is_empty() {\n+                            err.cancel();\n+                            let mut err = self.struct_span_err(\n+                                span,\n+                                \"invalid `struct` delimiters or `fn` call arguments\",\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n+                                vec![\n+                                    (open_paren, \" { \".to_string()),\n+                                    (close_paren, \" }\".to_string()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a function, use the arguments directly\", name),\n+                                fields\n+                                    .into_iter()\n+                                    .map(|field| (field.span.until(field.expr.span), String::new()))\n+                                    .collect(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.emit();\n+                        } else {\n+                            err.emit();\n+                        }\n                         return Some(self.mk_expr_err(span));\n                     }\n                     Ok(_) => {}"}, {"sha": "3e3c411c478ab27bf8134e9472042de04c5512e5", "filename": "src/test/ui/parser/issues/issue-91461.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs?ref=b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    a(_:b:,)\n+    //~^ ERROR: expected identifier, found reserved identifier `_`\n+    //~| ERROR: expected type, found `,`\n+    //~| ERROR: expected type, found `,`\n+}"}, {"sha": "94fcf1721d8c13222af0318f84adb55b63df076d", "filename": "src/test/ui/parser/issues/issue-91461.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr?ref=b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "patch": "@@ -0,0 +1,31 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-91461.rs:2:7\n+   |\n+LL |     a(_:b:,)\n+   |       ^ expected identifier, found reserved identifier\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |     -    -^ expected type\n+   |     |    |\n+   |     |    tried to parse a type due to this type ascription\n+   |     while parsing this struct\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |          -^ expected type\n+   |          |\n+   |          tried to parse a type due to this type ascription\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: aborting due to 3 previous errors\n+"}]}