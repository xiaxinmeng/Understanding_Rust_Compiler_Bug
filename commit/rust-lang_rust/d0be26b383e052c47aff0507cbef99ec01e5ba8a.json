{"sha": "d0be26b383e052c47aff0507cbef99ec01e5ba8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmUyNmIzODNlMDUyYzQ3YWZmMDUwN2NiZWY5OWVjMDFlNWJhOGE=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T10:25:22Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-02T10:25:22Z"}, "message": "Unify pair formatting code", "tree": {"sha": "a4ddebdd296a557a9dc523f4e51899141d39aefb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ddebdd296a557a9dc523f4e51899141d39aefb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0be26b383e052c47aff0507cbef99ec01e5ba8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0be26b383e052c47aff0507cbef99ec01e5ba8a", "html_url": "https://github.com/rust-lang/rust/commit/d0be26b383e052c47aff0507cbef99ec01e5ba8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0be26b383e052c47aff0507cbef99ec01e5ba8a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0b8606882da76ac0a854c7e6d01ec085dae2e0", "html_url": "https://github.com/rust-lang/rust/commit/ca0b8606882da76ac0a854c7e6d01ec085dae2e0"}], "stats": {"total": 158, "additions": 43, "deletions": 115}, "files": [{"sha": "fcb2ae1ff055cf4b7896080644e5f6406ec8b3bb", "filename": "src/expr.rs", "status": "modified", "additions": 43, "deletions": 115, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/d0be26b383e052c47aff0507cbef99ec01e5ba8a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0be26b383e052c47aff0507cbef99ec01e5ba8a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d0be26b383e052c47aff0507cbef99ec01e5ba8a", "patch": "@@ -111,13 +111,6 @@ impl Rewrite for ast::Expr {\n                                 offset,\n                                 true)\n             }\n-            ast::Expr_::ExprRange(ref left, ref right) => {\n-                rewrite_range(context,\n-                              left.as_ref().map(|e| &**e),\n-                              right.as_ref().map(|e| &**e),\n-                              width,\n-                              offset)\n-            }\n             ast::Expr_::ExprMatch(ref cond, ref arms, _) => {\n                 rewrite_match(context, cond, arms, width, offset, self.span)\n             }\n@@ -178,13 +171,32 @@ impl Rewrite for ast::Expr {\n                 rewrite_expr_addrof(context, mutability, expr, width, offset)\n             }\n             ast::Expr_::ExprCast(ref expr, ref ty) => {\n-                rewrite_cast(expr, ty, context, width, offset)\n+                rewrite_pair(&**expr, &**ty, \"\", \" as \", \"\", context, width, offset)\n             }\n             ast::Expr_::ExprIndex(ref expr, ref index) => {\n-                rewrite_index(expr, index, context, width, offset)\n+                rewrite_pair(&**expr, &**index, \"\", \"[\", \"]\", context, width, offset)\n             }\n             ast::Expr_::ExprRepeat(ref expr, ref repeats) => {\n-                rewrite_repeats(expr, repeats, context, width, offset)\n+                rewrite_pair(&**expr, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n+            }\n+            ast::Expr_::ExprRange(Some(ref lhs), Some(ref rhs)) => {\n+                rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, width, offset)\n+            }\n+            ast::Expr_::ExprRange(None, Some(ref rhs)) => {\n+                rewrite_unary_prefix(context, \"..\", &**rhs, width, offset)\n+            }\n+            ast::Expr_::ExprRange(Some(ref lhs), None) => {\n+                Some(format!(\"{}..\",\n+                             try_opt!(lhs.rewrite(context,\n+                                                  try_opt!(width.checked_sub(2)),\n+                                                  offset))))\n+            }\n+            ast::Expr_::ExprRange(None, None) => {\n+                if width >= 2 {\n+                    Some(\"..\".into())\n+                } else {\n+                    None\n+                }\n             }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions.\n@@ -199,99 +211,42 @@ impl Rewrite for ast::Expr {\n     }\n }\n \n-fn rewrite_repeats(expr: &ast::Expr,\n-                   index: &ast::Expr,\n-                   context: &RewriteContext,\n-                   width: usize,\n-                   offset: Indent)\n-                   -> Option<String> {\n-    let max_width = try_opt!(width.checked_sub(\"[; ]\".len()));\n-\n-    binary_search(1,\n-                  max_width,\n-                  |expr_budget| {\n-                      let expr_str = match expr.rewrite(context, expr_budget, offset + \"[\".len()) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Greater),\n-                      };\n-\n-                      let last_line_width = last_line_width(&expr_str);\n-                      let index_budget = match max_width.checked_sub(last_line_width) {\n-                          Some(b) => b,\n-                          None => return Err(Ordering::Less),\n-                      };\n-                      let index_indent = offset + last_line_width + \"[; \".len();\n-\n-                      let index_str = match index.rewrite(context, index_budget, index_indent) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Less),\n-                      };\n-\n-                      Ok(format!(\"[{}; {}]\", expr_str, index_str))\n-                  })\n-}\n-\n-fn rewrite_index(expr: &ast::Expr,\n-                 index: &ast::Expr,\n-                 context: &RewriteContext,\n-                 width: usize,\n-                 offset: Indent)\n-                 -> Option<String> {\n-    let max_width = try_opt!(width.checked_sub(\"[]\".len()));\n-\n-    binary_search(1,\n-                  max_width,\n-                  |expr_budget| {\n-                      let expr_str = match expr.rewrite(context, expr_budget, offset) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Greater),\n-                      };\n-\n-                      let last_line_width = last_line_width(&expr_str);\n-                      let index_budget = match max_width.checked_sub(last_line_width) {\n-                          Some(b) => b,\n-                          None => return Err(Ordering::Less),\n-                      };\n-                      let index_indent = offset + last_line_width + \"[\".len();\n-\n-                      let index_str = match index.rewrite(context, index_budget, index_indent) {\n-                          Some(result) => result,\n-                          None => return Err(Ordering::Less),\n-                      };\n-\n-                      Ok(format!(\"{}[{}]\", expr_str, index_str))\n-                  })\n-}\n-\n-fn rewrite_cast(expr: &ast::Expr,\n-                ty: &ast::Ty,\n-                context: &RewriteContext,\n-                width: usize,\n-                offset: Indent)\n-                -> Option<String> {\n-    let max_width = try_opt!(width.checked_sub(\" as \".len()));\n+fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n+                          rhs: &RHS,\n+                          prefix: &str,\n+                          infix: &str,\n+                          suffix: &str,\n+                          context: &RewriteContext,\n+                          width: usize,\n+                          offset: Indent)\n+                          -> Option<String>\n+    where LHS: Rewrite,\n+          RHS: Rewrite\n+{\n+    let max_width = try_opt!(width.checked_sub(prefix.len() + infix.len() + suffix.len()));\n \n     binary_search(1,\n                   max_width,\n-                  |expr_budget| {\n-                      let expr_str = match expr.rewrite(context, expr_budget, offset) {\n+                  |lhs_budget| {\n+                      let lhs_offset = offset + prefix.len();\n+                      let lhs_str = match lhs.rewrite(context, lhs_budget, lhs_offset) {\n                           Some(result) => result,\n                           None => return Err(Ordering::Greater),\n                       };\n \n-                      let last_line_width = last_line_width(&expr_str);\n-                      let ty_budget = match max_width.checked_sub(last_line_width) {\n+                      let last_line_width = last_line_width(&lhs_str);\n+                      let rhs_budget = match max_width.checked_sub(last_line_width) {\n                           Some(b) => b,\n                           None => return Err(Ordering::Less),\n                       };\n-                      let ty_indent = offset + last_line_width + \" as \".len();\n+                      let rhs_indent = offset + last_line_width + prefix.len() + infix.len();\n \n-                      let ty_str = match ty.rewrite(context, ty_budget, ty_indent) {\n+                      let rhs_str = match rhs.rewrite(context, rhs_budget, rhs_indent) {\n                           Some(result) => result,\n                           None => return Err(Ordering::Less),\n                       };\n \n-                      Ok(format!(\"{} as {}\", expr_str, ty_str))\n+                      Ok(format!(\"{}{}{}{}{}\", prefix, lhs_str, infix, rhs_str, suffix))\n                   })\n }\n \n@@ -637,33 +592,6 @@ fn rewrite_label(label: Option<ast::Ident>) -> String {\n     }\n }\n \n-// FIXME: this doesn't play well with line breaks\n-fn rewrite_range(context: &RewriteContext,\n-                 left: Option<&ast::Expr>,\n-                 right: Option<&ast::Expr>,\n-                 width: usize,\n-                 offset: Indent)\n-                 -> Option<String> {\n-    let left_string = match left {\n-        Some(expr) => {\n-            // 2 = ..\n-            let max_width = try_opt!(width.checked_sub(2));\n-            try_opt!(expr.rewrite(context, max_width, offset))\n-        }\n-        None => String::new(),\n-    };\n-\n-    let right_string = match right {\n-        Some(expr) => {\n-            let max_width = try_opt!(width.checked_sub(left_string.len() + 2));\n-            try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n-        }\n-        None => String::new(),\n-    };\n-\n-    Some(format!(\"{}..{}\", left_string, right_string))\n-}\n-\n // Rewrites if-else blocks. If let Some(_) = pat, the expression is\n // treated as an if-let-else expression.\n fn rewrite_if_else(context: &RewriteContext,"}]}