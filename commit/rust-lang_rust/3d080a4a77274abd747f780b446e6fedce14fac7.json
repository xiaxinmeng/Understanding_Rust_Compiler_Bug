{"sha": "3d080a4a77274abd747f780b446e6fedce14fac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDgwYTRhNzcyNzRhYmQ3NDdmNzgwYjQ0NmU2ZmVkY2UxNGZhYzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-29T23:23:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-29T23:25:40Z"}, "message": "introduce crate rustc_feature and move active, accepted, and removed to it", "tree": {"sha": "df823c82dfaebcc574099330709277b5830ccd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df823c82dfaebcc574099330709277b5830ccd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d080a4a77274abd747f780b446e6fedce14fac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d080a4a77274abd747f780b446e6fedce14fac7", "html_url": "https://github.com/rust-lang/rust/commit/3d080a4a77274abd747f780b446e6fedce14fac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d080a4a77274abd747f780b446e6fedce14fac7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4375c9dfdd7f31de909f6e9384bac1bf37b44da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4375c9dfdd7f31de909f6e9384bac1bf37b44da", "html_url": "https://github.com/rust-lang/rust/commit/c4375c9dfdd7f31de909f6e9384bac1bf37b44da"}], "stats": {"total": 139, "additions": 87, "deletions": 52}, "files": [{"sha": "9ed2f021344ff20d049d3c69b1701d241903d65d", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -3199,6 +3199,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3607,6 +3608,13 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_fs_util\"\n version = \"0.0.0\"\n@@ -3682,6 +3690,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_target\",\n  \"syntax\",\n@@ -3786,6 +3795,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3802,6 +3812,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_parse\",\n  \"rustc_target\",\n@@ -4442,6 +4453,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n@@ -4458,6 +4470,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_parse\",\n  \"serialize\",\n@@ -4475,6 +4488,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n  \"rustc_parse\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\","}, {"sha": "fb30d6c519c90bca440628b3b856afdc287667bc", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -22,6 +22,7 @@ rustc-rayon = \"0.3.0\"\n rustc-rayon-core = \"0.3.0\"\n polonius-engine  = \"0.10.0\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "c3b810d04eb58bc82ad82eb3814f9b00381fec4f", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -100,7 +100,7 @@ macro_rules! arena_types {\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n-            [few] features: syntax::feature_gate::Features,\n+            [few] features: rustc_feature::Features,\n             [few] all_traits: Vec<rustc::hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc::middle::privacy::AccessLevels,\n             [few] target_features_whitelist: rustc_data_structures::fx::FxHashMap<"}, {"sha": "6499e56325a42aca2aa41bdc2287eaaecbcafe01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -4,7 +4,6 @@\n use crate::ich::StableHashingContext;\n \n use syntax::ast;\n-use syntax::feature_gate;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n@@ -156,7 +155,7 @@ fn stable_normalized_pos(np: ::syntax_pos::NormalizedPos,\n }\n \n \n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for feature_gate::Features {\n+impl<'tcx> HashStable<StableHashingContext<'tcx>> for rustc_feature::Features {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n         // Unfortunately we cannot exhaustively list fields here, since the\n         // struct is macro generated."}, {"sha": "d715ddb1b81de603677afc6b6cab834e8e8372e2", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -1130,7 +1130,7 @@ rustc_queries! {\n             desc { |tcx| \"estimating size for `{}`\", tcx.def_path_str(def.def_id()) }\n         }\n \n-        query features_query(_: CrateNum) -> &'tcx feature_gate::Features {\n+        query features_query(_: CrateNum) -> &'tcx rustc_feature::Features {\n             eval_always\n             desc { \"looking up enabled feature gates\" }\n         }"}, {"sha": "0ee8107cb14598c344daf609b3f7fa992015ad0f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -21,7 +21,6 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::ParseSess;\n@@ -86,7 +85,7 @@ pub struct Session {\n     /// `rustc_codegen_llvm::back::symbol_names` module for more information.\n     pub crate_disambiguator: Once<CrateDisambiguator>,\n \n-    features: Once<feature_gate::Features>,\n+    features: Once<rustc_feature::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n     /// operations such as auto-dereference and monomorphization.\n@@ -473,11 +472,11 @@ impl Session {\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents\n     /// dependency tracking. Use tcx.features() instead.\n     #[inline]\n-    pub fn features_untracked(&self) -> &feature_gate::Features {\n+    pub fn features_untracked(&self) -> &rustc_feature::Features {\n         self.features.get()\n     }\n \n-    pub fn init_features(&self, features: feature_gate::Features) {\n+    pub fn init_features(&self, features: rustc_feature::Features) {\n         self.features.set(features);\n     }\n "}, {"sha": "d2f9312a4824db3fcec2b76ea670f14916409269", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -72,7 +72,6 @@ use rustc_macros::HashStable;\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n-use syntax::feature_gate;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n use syntax::expand::allocator::AllocatorKind;\n@@ -1315,7 +1314,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.cstore.allocator_kind()\n     }\n \n-    pub fn features(self) -> &'tcx feature_gate::Features {\n+    pub fn features(self) -> &'tcx rustc_feature::Features {\n         self.features_query(LOCAL_CRATE)\n     }\n "}, {"sha": "5b4a6ac8a2d3cbac65ea5bc2c35792babac277c1", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -56,7 +56,6 @@ use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::attr;\n use syntax::ast;\n-use syntax::feature_gate;\n use syntax::symbol::Symbol;\n \n #[macro_use]"}, {"sha": "22e8366804b5918e3599dd4b6d4f079e044e2bd8", "filename": "src/librustc_feature/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_feature\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_feature\"\n+path = \"lib.rs\"\n+doctest = false\n+\n+[dependencies]\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "fec5a7f1a4501b9c5a385522229655ff0e5ee498", "filename": "src/librustc_feature/accepted.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -1,7 +1,7 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/accepted.rs"}, {"sha": "fc1f770e226a0431dd2a5614559fbe05b63d4ca0", "filename": "src/librustc_feature/active.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -2,10 +2,9 @@\n \n use super::{State, Feature};\n \n-use crate::edition::Edition;\n-use crate::symbol::{Symbol, sym};\n-\n+use syntax_pos::edition::Edition;\n use syntax_pos::Span;\n+use syntax_pos::symbol::{Symbol, sym};\n \n macro_rules! set {\n     ($field: ident) => {{", "previous_filename": "src/libsyntax/feature_gate/active.rs"}, {"sha": "c6388f47cfe30af18c9fcbef3816adf7cd7e712d", "filename": "src/librustc_feature/lib.rs", "status": "renamed", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Flib.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -15,13 +15,10 @@\n mod accepted;\n mod removed;\n mod active;\n-mod builtin_attrs;\n-mod check;\n \n-use crate::{edition::Edition, symbol::Symbol};\n use std::fmt;\n use std::num::NonZeroU32;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, edition::Edition, symbol::Symbol};\n \n #[derive(Clone, Copy)]\n pub enum State {\n@@ -44,28 +41,21 @@ impl fmt::Debug for State {\n \n #[derive(Debug, Clone)]\n pub struct Feature {\n-    state: State,\n-    name: Symbol,\n-    since: &'static str,\n+    pub state: State,\n+    pub name: Symbol,\n+    pub since: &'static str,\n     issue: Option<u32>,  // FIXME: once #58732 is done make this an Option<NonZeroU32>\n-    edition: Option<Edition>,\n+    pub edition: Option<Edition>,\n     description: &'static str,\n }\n \n impl Feature {\n-    fn issue(&self) -> Option<NonZeroU32> {\n+    // FIXME(Centril): privatize again.\n+    pub fn issue(&self) -> Option<NonZeroU32> {\n         self.issue.and_then(|i| NonZeroU32::new(i))\n     }\n }\n \n-pub use active::{Features, INCOMPLETE_FEATURES};\n-pub use builtin_attrs::{\n-    AttributeGate, AttributeType, GatedCfg,\n-    BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n-    deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n-};\n-pub use check::{\n-    check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n-    Stability, GateIssue, UnstableFeatures,\n-    EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n-};\n+pub use accepted::ACCEPTED_FEATURES;\n+pub use active::{ACTIVE_FEATURES, Features, INCOMPLETE_FEATURES};\n+pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};", "previous_filename": "src/libsyntax/feature_gate/mod.rs"}, {"sha": "340bd32fb8a460b8bac668bfcbd8324ccf1bf64b", "filename": "src/librustc_feature/removed.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_feature%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fremoved.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -1,7 +1,7 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::sym;\n use super::{State, Feature};\n+use syntax_pos::symbol::sym;\n \n macro_rules! declare_features {\n     ($(", "previous_filename": "src/libsyntax/feature_gate/removed.rs"}, {"sha": "ed38243581b1a095e9a4a281a686cded8b8e235e", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -15,5 +15,6 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }"}, {"sha": "3515ef13e79e12102814bf908f31b7fd99a142d7", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -41,7 +41,7 @@ use syntax::ptr::P;\n use syntax::attr::{self, HasAttrs, AttributeTemplate};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{self, AttributeGate, AttributeType};\n+use syntax::feature_gate::{AttributeGate, AttributeType};\n use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span};\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1850,7 +1850,7 @@ impl EarlyLintPass for IncompleteFeatures {\n         features.declared_lang_features\n             .iter().map(|(name, span, _)| (name, span))\n             .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n-            .filter(|(name, _)| feature_gate::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .filter(|(name, _)| rustc_feature::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n             .for_each(|(name, &span)| {\n                 cx.struct_span_lint(\n                     INCOMPLETE_FEATURES,"}, {"sha": "95b3256f53a388d81a875a636fd34a3fef83e5ca", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -16,6 +16,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n syntax = { path = \"../libsyntax\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "9c309f605157d9a61edd2cb81c7c200d10fec5ae", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -9,11 +9,11 @@\n //! [#64197]: https://github.com/rust-lang/rust/issues/64197\n \n use crate::validate_attr;\n+use rustc_feature::Features;\n use syntax::attr::HasAttrs;\n use syntax::feature_gate::{\n     feature_err,\n     EXPLAIN_STMT_ATTR_SYNTAX,\n-    Features,\n     get_features,\n     GateIssue,\n };"}, {"sha": "bb2f7c67418244ec101334ea5fc7dad57a09b86c", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "697a3ae873cc83d951c91e13238ee160bd517380", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -13,8 +13,9 @@ use rustc::hir::map::Map;\n use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n+use rustc_feature::Features;\n use syntax::ast::Mutability;\n-use syntax::feature_gate::{emit_feature_err, Features, GateIssue};\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::span_err;\n use syntax_pos::{sym, Span};\n use rustc_error_codes::*;"}, {"sha": "078948cc63bd2633822deaf6dee0814dd8d0546e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -7,10 +7,10 @@ use std::mem;\n use std::fmt::{self, Write};\n use std::ops;\n \n+use rustc_feature::Features;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast::{MetaItem, MetaItemKind, NestedMetaItem, LitKind};\n use syntax::sess::ParseSess;\n-use syntax::feature_gate::Features;\n \n use syntax_pos::Span;\n "}, {"sha": "be3644ecf96a7ad1436d23a45a9d5fff00ac1925", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -24,6 +24,7 @@ extern crate env_logger;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n+extern crate rustc_feature;\n extern crate rustc_error_codes;\n extern crate rustc_index;\n extern crate rustc_resolve;"}, {"sha": "085c1760c80272c9cf659a20052947338d4777aa", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -18,6 +18,7 @@ lazy_static = \"1.0.0\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }"}, {"sha": "eaa4a64025a1e343030dc830d9543bad22c80296", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -1,14 +1,15 @@\n //! Parsing and validation of builtin attributes\n \n use crate::ast::{self, Attribute, MetaItem, NestedMetaItem};\n-use crate::feature_gate::{Features, GatedCfg};\n use crate::print::pprust;\n+use crate::feature_gate::GatedCfg;\n use crate::sess::ParseSess;\n \n use errors::{Applicability, Handler};\n use std::num::NonZeroU32;\n use syntax_pos::hygiene::Transparency;\n use syntax_pos::{symbol::Symbol, symbol::sym, Span};\n+use rustc_feature::Features;\n use rustc_macros::HashStable_Generic;\n \n use super::{mark_used, MetaItemKind};"}, {"sha": "e6f61e8fcbe0bf5ffb46e319a736ee0d25e64056", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -5,13 +5,13 @@ use AttributeGate::*;\n \n use super::check::{emit_feature_err, GateIssue};\n use super::check::{Stability, EXPLAIN_ALLOW_INTERNAL_UNSAFE, EXPLAIN_ALLOW_INTERNAL_UNSTABLE};\n-use super::active::Features;\n+use rustc_feature::Features;\n \n use crate::ast;\n use crate::attr::AttributeTemplate;\n use crate::sess::ParseSess;\n-use crate::symbol::{Symbol, sym};\n \n+use syntax_pos::symbol::{Symbol, sym};\n use syntax_pos::Span;\n use rustc_data_structures::fx::FxHashMap;\n use lazy_static::lazy_static;"}, {"sha": "7d959756f23d35a24ee901834db7a0a6a0581dba", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -1,6 +1,5 @@\n-use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n-use super::accepted::ACCEPTED_FEATURES;\n-use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n+use rustc_feature::{ACCEPTED_FEATURES, ACTIVE_FEATURES, Features, Feature, State as FeatureState};\n+use rustc_feature::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n use crate::ast::{self, AssocTyConstraint, AssocTyConstraintKind, NodeId};"}, {"sha": "f0d857673e70d2fd6c17929c26ca8516f3b86e58", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -92,7 +92,20 @@ pub mod attr;\n pub mod expand;\n pub use syntax_pos::source_map;\n pub mod entry;\n-pub mod feature_gate;\n+pub mod feature_gate {\n+    mod check;\n+    pub use check::{\n+        check_crate, check_attribute, get_features, feature_err, emit_feature_err,\n+        Stability, GateIssue, UnstableFeatures,\n+        EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n+    };\n+    mod builtin_attrs;\n+    pub use builtin_attrs::{\n+        AttributeGate, AttributeType, GatedCfg,\n+        BuiltinAttribute, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n+        deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n+    };\n+}\n pub mod mut_visit;\n pub mod ptr;\n pub mod show_span;"}, {"sha": "897d5a65ba3de1297818c1299e6fb34aabf71d7e", "filename": "src/libsyntax_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -16,6 +16,7 @@ log = \"0.4\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_parse = { path = \"../librustc_parse\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "d8033759033105402187bc4ece3f6ecd15974742", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -4,16 +4,17 @@ use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n use crate::config::StripUnconfigured;\n-use rustc_parse::configure;\n \n+use rustc_feature::Features;\n+use rustc_parse::configure;\n use rustc_parse::DirectoryOwnership;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n use syntax::attr::{self, HasAttrs};\n use syntax::source_map::respan;\n-use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n+use syntax::feature_gate::{self, GateIssue, is_builtin_attr, emit_feature_err};\n use syntax::mut_visit::*;\n use syntax::print::pprust;\n use syntax::ptr::P;"}, {"sha": "b191527df1991fc832b43862901720e7b67e9215", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -8,12 +8,12 @@ use crate::mbe::macro_parser::{Error, Failure, Success};\n use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::mbe::transcribe::transcribe;\n \n+use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::Directory;\n use syntax::ast;\n use syntax::attr::{self, TransparencyError};\n use syntax::edition::Edition;\n-use syntax::feature_gate::Features;\n use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};"}, {"sha": "d73a9ea6cdbc14ef4eea404e05c6ef6c97854bb8", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -14,6 +14,7 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n rustc_parse = { path = \"../librustc_parse\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "4c1eec38c6e5dd8b8e8685283be86c2419c4d6e3", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d080a4a77274abd747f780b446e6fedce14fac7/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=3d080a4a77274abd747f780b446e6fedce14fac7", "patch": "@@ -2,13 +2,13 @@\n \n use log::debug;\n use smallvec::{smallvec, SmallVec};\n+use rustc_feature::Features;\n use rustc_target::spec::PanicStrategy;\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::entry::{self, EntryPointType};\n use syntax_expand::base::{ExtCtxt, Resolver};\n use syntax_expand::expand::{AstFragment, ExpansionConfig};\n-use syntax::feature_gate::Features;\n use syntax::mut_visit::{*, ExpectOne};\n use syntax::ptr::P;\n use syntax::sess::ParseSess;"}]}