{"sha": "8e82c21bf3479d338fcb8f378095daa8e698de1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODJjMjFiZjM0NzlkMzM4ZmNiOGYzNzgwOTVkYWE4ZTY5OGRlMWU=", "commit": {"author": {"name": "Xuefeng Wu", "email": "xfwu@thoughtworks.com", "date": "2015-05-04T11:27:02Z"}, "committer": {"name": "Xuefeng Wu", "email": "benewu@gmail.com", "date": "2015-05-16T09:21:43Z"}, "message": "more friend error message for  in fn arg", "tree": {"sha": "64d3a31fbf46c5229347543c66b945dc0c1fdedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64d3a31fbf46c5229347543c66b945dc0c1fdedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e82c21bf3479d338fcb8f378095daa8e698de1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e82c21bf3479d338fcb8f378095daa8e698de1e", "html_url": "https://github.com/rust-lang/rust/commit/8e82c21bf3479d338fcb8f378095daa8e698de1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e82c21bf3479d338fcb8f378095daa8e698de1e/comments", "author": {"login": "XuefengWu", "id": 161701, "node_id": "MDQ6VXNlcjE2MTcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/161701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XuefengWu", "html_url": "https://github.com/XuefengWu", "followers_url": "https://api.github.com/users/XuefengWu/followers", "following_url": "https://api.github.com/users/XuefengWu/following{/other_user}", "gists_url": "https://api.github.com/users/XuefengWu/gists{/gist_id}", "starred_url": "https://api.github.com/users/XuefengWu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XuefengWu/subscriptions", "organizations_url": "https://api.github.com/users/XuefengWu/orgs", "repos_url": "https://api.github.com/users/XuefengWu/repos", "events_url": "https://api.github.com/users/XuefengWu/events{/privacy}", "received_events_url": "https://api.github.com/users/XuefengWu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "XuefengWu", "id": 161701, "node_id": "MDQ6VXNlcjE2MTcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/161701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XuefengWu", "html_url": "https://github.com/XuefengWu", "followers_url": "https://api.github.com/users/XuefengWu/followers", "following_url": "https://api.github.com/users/XuefengWu/following{/other_user}", "gists_url": "https://api.github.com/users/XuefengWu/gists{/gist_id}", "starred_url": "https://api.github.com/users/XuefengWu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XuefengWu/subscriptions", "organizations_url": "https://api.github.com/users/XuefengWu/orgs", "repos_url": "https://api.github.com/users/XuefengWu/repos", "events_url": "https://api.github.com/users/XuefengWu/events{/privacy}", "received_events_url": "https://api.github.com/users/XuefengWu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c18e725c5fcdfce1ebeb82344121a3a381237a", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c18e725c5fcdfce1ebeb82344121a3a381237a", "html_url": "https://github.com/rust-lang/rust/commit/15c18e725c5fcdfce1ebeb82344121a3a381237a"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "6f8e70dad2e39ab9373f740e2f63a74c3e9a3fce", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e82c21bf3479d338fcb8f378095daa8e698de1e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e82c21bf3479d338fcb8f378095daa8e698de1e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8e82c21bf3479d338fcb8f378095daa8e698de1e", "patch": "@@ -2361,8 +2361,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             \"type name\"\n                         };\n \n-                        let msg = format!(\"use of undeclared {} `{}`\", kind,\n-                                          path_names_to_string(path, 0));\n+                        let self_type_name = special_idents::type_self.name;\n+                        let is_invalid_self_type_name =\n+                            path.segments.len() > 0 &&\n+                            maybe_qself.is_none() &&\n+                            path.segments[0].identifier.name == self_type_name;\n+                        let msg = if is_invalid_self_type_name {\n+                            \"expected type name, found keyword `Self`\".to_string()\n+                        } else {\n+                            format!(\"use of undeclared {} `{}`\",\n+                                kind, path_names_to_string(path, 0))\n+                        };\n+\n                         self.resolve_error(ty.span, &msg[..]);\n                     }\n                 }"}]}