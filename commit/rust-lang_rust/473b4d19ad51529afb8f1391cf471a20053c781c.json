{"sha": "473b4d19ad51529afb8f1391cf471a20053c781c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3M2I0ZDE5YWQ1MTUyOWFmYjhmMTM5MWNmNDcxYTIwMDUzYzc4MWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-15T22:32:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-15T22:32:43Z"}, "message": "core::rt: Rename Scheduler::local to Scheduler::unsafe_local", "tree": {"sha": "411f1d4dcc1b9fc7c7b79922587119688bbb78b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411f1d4dcc1b9fc7c7b79922587119688bbb78b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473b4d19ad51529afb8f1391cf471a20053c781c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473b4d19ad51529afb8f1391cf471a20053c781c", "html_url": "https://github.com/rust-lang/rust/commit/473b4d19ad51529afb8f1391cf471a20053c781c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473b4d19ad51529afb8f1391cf471a20053c781c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b8a354c21cec6204a268cfd1e2946744c28ed0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8a354c21cec6204a268cfd1e2946744c28ed0e", "html_url": "https://github.com/rust-lang/rust/commit/3b8a354c21cec6204a268cfd1e2946744c28ed0e"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "82f0c3592c49b813c0cf9c199cb592bdc3cf40bc", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/473b4d19ad51529afb8f1391cf471a20053c781c/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b4d19ad51529afb8f1391cf471a20053c781c/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=473b4d19ad51529afb8f1391cf471a20053c781c", "patch": "@@ -95,9 +95,9 @@ pub impl Scheduler {\n         // Give ownership of the scheduler (self) to the thread\n         local::put(self);\n \n-        do Scheduler::local |scheduler| {\n+        do Scheduler::unsafe_local |scheduler| {\n             fn run_scheduler_once() {\n-                do Scheduler::local |scheduler| {\n+                do Scheduler::unsafe_local |scheduler| {\n                     if scheduler.resume_task_from_queue() {\n                         // Ok, a task ran. Nice! We'll do it again later\n                         scheduler.event_loop.callback(run_scheduler_once);\n@@ -112,7 +112,11 @@ pub impl Scheduler {\n         return local::take();\n     }\n \n-    fn local(f: &fn(&mut Scheduler)) {\n+    /// Get a mutable pointer to the thread-local scheduler.\n+    /// # Safety Note\n+    /// This allows other mutable aliases to the scheduler, both in the current\n+    /// execution context and other execution contexts.\n+    fn unsafe_local(f: &fn(&mut Scheduler)) {\n         unsafe { local::borrow(f) }\n     }\n \n@@ -204,7 +208,7 @@ pub impl Scheduler {\n         }\n \n         // We could be executing in a different thread now\n-        do Scheduler::local |sched| {\n+        do Scheduler::unsafe_local |sched| {\n             sched.run_cleanup_job();\n         }\n     }\n@@ -228,7 +232,7 @@ pub impl Scheduler {\n         }\n \n         // We could be executing in a different thread now\n-        do Scheduler::local |sched| {\n+        do Scheduler::unsafe_local |sched| {\n             sched.run_cleanup_job();\n         }\n     }\n@@ -327,13 +331,13 @@ pub impl Task {\n             // This is the first code to execute after the initial\n             // context switch to the task. The previous context may\n             // have asked us to do some cleanup.\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 sched.run_cleanup_job();\n             }\n \n             start();\n \n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 sched.terminate_current_task();\n             }\n         };\n@@ -394,7 +398,7 @@ fn test_swap_tasks() {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task1 = ~do Task::new(&mut sched.stack_pool) {\n             unsafe { *count_ptr = *count_ptr + 1; }\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let task2 = ~do Task::new(&mut sched.stack_pool) {\n                     unsafe { *count_ptr = *count_ptr + 1; }\n                 };\n@@ -427,7 +431,7 @@ fn test_run_a_lot_of_tasks_queued() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let task = ~do Task::new(&mut sched.stack_pool) {\n                     unsafe {\n                         *count_ptr = *count_ptr + 1;\n@@ -460,7 +464,7 @@ fn test_run_a_lot_of_tasks_direct() {\n         assert!(count == MAX);\n \n         fn run_task(count_ptr: *mut int) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let task = ~do Task::new(&mut sched.stack_pool) {\n                     unsafe {\n                         *count_ptr = *count_ptr + 1;\n@@ -481,7 +485,7 @@ fn test_block_task() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 assert!(sched.in_task_context());\n                 do sched.deschedule_running_task_and_then() |sched, task| {\n                     assert!(!sched.in_task_context());"}, {"sha": "7dfc6fff4cdff267ddffc96d0f0984d2abb078b1", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/473b4d19ad51529afb8f1391cf471a20053c781c/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473b4d19ad51529afb8f1391cf471a20053c781c/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=473b4d19ad51529afb8f1391cf471a20053c781c", "patch": "@@ -104,7 +104,7 @@ impl IoFactory for UvIoFactory {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Option<~StreamObject>> = &result_cell;\n \n-        do Scheduler::local |scheduler| {\n+        do Scheduler::unsafe_local |scheduler| {\n             assert!(scheduler.in_task_context());\n \n             // Block this task and take ownership, switch to scheduler context\n@@ -131,7 +131,7 @@ impl IoFactory for UvIoFactory {\n                     unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n \n                     // Context switch\n-                    do Scheduler::local |scheduler| {\n+                    do Scheduler::unsafe_local |scheduler| {\n                         scheduler.resume_task_immediately(task_cell.take());\n                     }\n                 }\n@@ -178,7 +178,7 @@ impl TcpListener for UvTcpListener {\n \n         let server_tcp_watcher = self.watcher();\n \n-        do Scheduler::local |scheduler| {\n+        do Scheduler::unsafe_local |scheduler| {\n             assert!(scheduler.in_task_context());\n \n             do scheduler.deschedule_running_task_and_then |_, task| {\n@@ -201,7 +201,7 @@ impl TcpListener for UvTcpListener {\n \n                     rtdebug!(\"resuming task from listen\");\n                     // Context switch\n-                    do Scheduler::local |scheduler| {\n+                    do Scheduler::unsafe_local |scheduler| {\n                         scheduler.resume_task_immediately(task_cell.take());\n                     }\n                 }\n@@ -243,7 +243,7 @@ impl Stream for UvStream {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<uint, ()>> = &result_cell;\n \n-        do Scheduler::local |scheduler| {\n+        do Scheduler::unsafe_local |scheduler| {\n             assert!(scheduler.in_task_context());\n             let watcher = self.watcher();\n             let buf_ptr: *&mut [u8] = &buf;\n@@ -275,7 +275,7 @@ impl Stream for UvStream {\n \n                     unsafe { (*result_cell_ptr).put_back(result); }\n \n-                    do Scheduler::local |scheduler| {\n+                    do Scheduler::unsafe_local |scheduler| {\n                         scheduler.resume_task_immediately(task_cell.take());\n                     }\n                 }\n@@ -289,7 +289,7 @@ impl Stream for UvStream {\n     fn write(&mut self, buf: &[u8]) -> Result<(), ()> {\n         let result_cell = empty_cell();\n         let result_cell_ptr: *Cell<Result<(), ()>> = &result_cell;\n-        do Scheduler::local |scheduler| {\n+        do Scheduler::unsafe_local |scheduler| {\n             assert!(scheduler.in_task_context());\n             let watcher = self.watcher();\n             let buf_ptr: *&[u8] = &buf;\n@@ -308,7 +308,7 @@ impl Stream for UvStream {\n \n                     unsafe { (*result_cell_ptr).put_back(result); }\n \n-                    do Scheduler::local |scheduler| {\n+                    do Scheduler::unsafe_local |scheduler| {\n                         scheduler.resume_task_immediately(task_cell.take());\n                     }\n                 }\n@@ -326,7 +326,7 @@ fn test_simple_io_no_connect() {\n     do run_in_bare_thread {\n         let mut sched = ~UvEventLoop::new_scheduler();\n         let task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let addr = Ipv4(127, 0, 0, 1, 2926);\n                 let maybe_chan = io.connect(addr);\n@@ -346,7 +346,7 @@ fn test_simple_tcp_server_and_client() {\n         let addr = Ipv4(127, 0, 0, 1, 2929);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let mut stream = io.connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -355,7 +355,7 @@ fn test_simple_tcp_server_and_client() {\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let mut listener = io.bind(addr).unwrap();\n                 let mut stream = listener.listen().unwrap();\n@@ -385,7 +385,7 @@ fn test_read_and_block() {\n         let addr = Ipv4(127, 0, 0, 1, 2930);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let mut stream = io.connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -397,7 +397,7 @@ fn test_read_and_block() {\n         };\n \n         let server_task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let mut listener = io.bind(addr).unwrap();\n                 let mut stream = listener.listen().unwrap();\n@@ -416,7 +416,7 @@ fn test_read_and_block() {\n                     }\n                     reads += 1;\n \n-                    do Scheduler::local |scheduler| {\n+                    do Scheduler::unsafe_local |scheduler| {\n                         // Yield to the other task in hopes that it\n                         // will trigger a read callback while we are\n                         // not ready for it\n@@ -448,7 +448,7 @@ fn test_read_read_read() {\n         let addr = Ipv4(127, 0, 0, 1, 2931);\n \n         let client_task = ~do Task::new(&mut sched.stack_pool) {\n-            do Scheduler::local |sched| {\n+            do Scheduler::unsafe_local |sched| {\n                 let io = sched.event_loop.io().unwrap();\n                 let mut stream = io.connect(addr).unwrap();\n                 let mut buf = [0, .. 2048];"}]}