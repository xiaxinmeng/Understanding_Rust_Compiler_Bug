{"sha": "9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTI2OWYyM2M1ZjBjMWM2YTUzMTE4YjUxY2Y1MjQxNWFjMGJiMWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-06T12:18:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-06T12:24:54Z"}, "message": "Rename to `then_some` and `then`", "tree": {"sha": "a7b18394302ae6733495354966b81188380a5ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b18394302ae6733495354966b81188380a5ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "html_url": "https://github.com/rust-lang/rust/commit/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8579fe6fc3a28e5a7cbd95ada3a3305a73782c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/8579fe6fc3a28e5a7cbd95ada3a3305a73782c82", "html_url": "https://github.com/rust-lang/rust/commit/8579fe6fc3a28e5a7cbd95ada3a3305a73782c82"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "1b3c254a05f98126a3ff6b0a47ed1b407dba3671", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -9,12 +9,12 @@ impl bool {\n     /// ```\n     /// #![feature(bool_to_option)]\n     ///\n-    /// assert_eq!(false.to_option(0), None);\n-    /// assert_eq!(true.to_option(0), Some(0));\n+    /// assert_eq!(false.then_some(0), None);\n+    /// assert_eq!(true.then_some(0), Some(0));\n     /// ```\n     #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n     #[inline]\n-    pub fn to_option<T>(self, t: T) -> Option<T> {\n+    pub fn then_some<T>(self, t: T) -> Option<T> {\n         if self {\n             Some(t)\n         } else {\n@@ -29,12 +29,12 @@ impl bool {\n     /// ```\n     /// #![feature(bool_to_option)]\n     ///\n-    /// assert_eq!(false.to_option_with(|| 0), None);\n-    /// assert_eq!(true.to_option_with(|| 0), Some(0));\n+    /// assert_eq!(false.then(|| 0), None);\n+    /// assert_eq!(true.then(|| 0), Some(0));\n     /// ```\n     #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n     #[inline]\n-    pub fn to_option_with<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n+    pub fn then<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n         if self {\n             Some(f())\n         } else {"}, {"sha": "e89eb2c7f94d5731a04e320de4427c0dc4d2af68", "filename": "src/libcore/tests/bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fbool.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -1,7 +1,7 @@\n #[test]\n fn test_bool_to_option() {\n-    assert_eq!(false.to_option(0), None);\n-    assert_eq!(true.to_option(0), Some(0));\n-    assert_eq!(false.to_option_with(|| 0), None);\n-    assert_eq!(true.to_option_with(|| 0), Some(0));\n+    assert_eq!(false.then_some(0), None);\n+    assert_eq!(true.then_some(0), Some(0));\n+    assert_eq!(false.then(|| 0), None);\n+    assert_eq!(true.then(|| 0), Some(0));\n }"}, {"sha": "2ecbe770729b5b278f21213df8902e31104ef224", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -645,7 +645,7 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n         }\n-        found.to_option(cur)\n+        found.then_some(cur)\n     }\n }\n "}, {"sha": "8f9f3983262372fdcd28e8782d6e6855c4ed933c", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -147,7 +147,7 @@ impl<'a> FnLikeNode<'a> {\n             map::Node::Expr(e) => e.is_fn_like(),\n             _ => false\n         };\n-        fn_like.to_option(FnLikeNode { node })\n+        fn_like.then_some(FnLikeNode { node })\n     }\n \n     pub fn body(self) -> ast::BodyId {"}, {"sha": "3e28145c0fa0a544b7022a2050fa74a93ea322a6", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -211,7 +211,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 (r, p)\n             );\n             let p_ty = p.to_ty(tcx);\n-            compare_ty(p_ty).to_option(ty::OutlivesPredicate(p_ty, r))\n+            compare_ty(p_ty).then_some(ty::OutlivesPredicate(p_ty, r))\n         });\n \n         param_bounds"}, {"sha": "412300f0b10dff7dd74f814ece31f43308ad9d63", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -363,7 +363,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return None\n         };\n \n-        tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented).to_option(impl_def_id)\n+        tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented).then_some(impl_def_id)\n     }\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str> {"}, {"sha": "05a2704cc5dfc67792b24a3ea6cc4ea7e3fee915", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -2784,7 +2784,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         };\n \n-        is_associated_item.to_option_with(|| self.associated_item(def_id))\n+        is_associated_item.then(|| self.associated_item(def_id))\n     }\n \n     fn associated_item_from_trait_item_ref(self,\n@@ -3249,7 +3249,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ParamEnv<'_> {\n     let unnormalized_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n         traits::Reveal::UserFacing,\n-        tcx.sess.opts.debugging_opts.chalk.to_option(def_id),\n+        tcx.sess.opts.debugging_opts.chalk.then_some(def_id),\n     );\n \n     let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {"}, {"sha": "2f30b797fb1516d11c4ecd31bd1398e9802a3655", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -303,7 +303,7 @@ fn connected_to_root<'tcx>(\n         return true;\n     }\n \n-    visit_waiters(query, |_, successor| connected_to_root(successor, visited).to_option(None))\n+    visit_waiters(query, |_, successor| connected_to_root(successor, visited).then_some(None))\n         .is_some()\n }\n "}, {"sha": "419e99d55d72d703d8895fa97422f8df6fb622b9", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -245,7 +245,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             let (mut lo, mut hi) = (0u64, 0u64);\n             let success = llvm::LLVMRustConstInt128Get(v, sign_ext,\n                                                         &mut hi, &mut lo);\n-            success.to_option(hi_lo_to_u128(lo, hi))\n+            success.then_some(hi_lo_to_u128(lo, hi))\n         })\n     }\n "}, {"sha": "cd3d99951e2b1054330c477b528239edcc636755", "filename": "src/librustc_codegen_ssa/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -119,7 +119,7 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n     use std::path::Component;\n \n     if path.is_absolute() != base.is_absolute() {\n-        path.is_absolute().to_option_with(|| PathBuf::from(path))\n+        path.is_absolute().then(|| PathBuf::from(path))\n     } else {\n         let mut ita = path.components();\n         let mut itb = base.components();"}, {"sha": "cea5dc18c136296391e6dd89e2b460150123065a", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -85,7 +85,7 @@ fn reachable_non_generics_provider(\n             match tcx.hir().get(hir_id) {\n                 Node::ForeignItem(..) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n-                    tcx.is_statically_included_foreign_item(def_id).to_option(def_id)\n+                    tcx.is_statically_included_foreign_item(def_id).then_some(def_id)\n                 }\n \n                 // Only consider nodes that actually have exported symbols."}, {"sha": "9919666027a2116c101fac344efc1dbccd44da06", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -70,10 +70,10 @@ impl<M> ModuleCodegen<M> {\n                             emit_bc_compressed: bool,\n                             outputs: &OutputFilenames) -> CompiledModule {\n         let object = emit_obj\n-            .to_option_with(|| outputs.temp_path(OutputType::Object, Some(&self.name)));\n+            .then(|| outputs.temp_path(OutputType::Object, Some(&self.name)));\n         let bytecode = emit_bc\n-            .to_option_with(|| outputs.temp_path(OutputType::Bitcode, Some(&self.name)));\n-        let bytecode_compressed = emit_bc_compressed.to_option_with(|| {\n+            .then(|| outputs.temp_path(OutputType::Bitcode, Some(&self.name)));\n+        let bytecode_compressed = emit_bc_compressed.then(|| {\n             outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n                 .with_extension(RLIB_BYTECODE_EXTENSION)\n         });"}, {"sha": "2a4bc41f85072192bda1c0c202451dcbf9b83514", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -547,7 +547,7 @@ fn output_contains_path(output_paths: &[PathBuf], input_path: &PathBuf) -> bool\n }\n \n fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n-    let check = |output_path: &PathBuf| output_path.is_dir().to_option_with(|| output_path.clone());\n+    let check = |output_path: &PathBuf| output_path.is_dir().then(|| output_path.clone());\n     check_output(output_paths, check)\n }\n "}, {"sha": "061d3854a9a795c85a695aea48f08d60b0ba5885", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn dep_graph_future(&self) -> Result<&Query<Option<DepGraphFuture>>> {\n         self.dep_graph_future.compute(|| {\n-            Ok(self.session().opts.build_dep_graph().to_option_with(|| {\n+            Ok(self.session().opts.build_dep_graph().then(|| {\n                 rustc_incremental::load_dep_graph(self.session())\n             }))\n         })"}, {"sha": "8c225b83f40e8234b0f0f55506150cb6cdca5411", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -107,7 +107,7 @@ const STACK_SIZE: usize = 16 * 1024 * 1024;\n fn get_stack_size() -> Option<usize> {\n     // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly.\n-    env::var_os(\"RUST_MIN_STACK\").is_none().to_option(STACK_SIZE)\n+    env::var_os(\"RUST_MIN_STACK\").is_none().then_some(STACK_SIZE)\n }\n \n struct Sink(Arc<Mutex<Vec<u8>>>);\n@@ -281,7 +281,7 @@ fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {\n             } else {\n                 \"rustc\"\n             });\n-            candidate.exists().to_option(candidate)\n+            candidate.exists().then_some(candidate)\n         })\n         .next()\n }"}, {"sha": "10b00d35d9bcaa9d0e12bf19ef2eee101d311770", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -1491,7 +1491,7 @@ impl ExplicitOutlivesRequirements {\n             match pred {\n                 ty::Predicate::TypeOutlives(outlives) => {\n                     let outlives = outlives.skip_binder();\n-                    outlives.0.is_param(index).to_option(outlives.1)\n+                    outlives.0.is_param(index).then_some(outlives.1)\n                 }\n                 _ => None\n             }\n@@ -1550,7 +1550,7 @@ impl ExplicitOutlivesRequirements {\n                             }),\n                         _ => false,\n                     };\n-                    is_inferred.to_option((i, bound.span()))\n+                    is_inferred.then_some((i, bound.span()))\n                 } else {\n                     None\n                 }"}, {"sha": "25bd2c45da5f5b05bacf24355a8a666448ac5ae4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -803,7 +803,7 @@ impl<'a> CrateLoader<'a> {\n         // and see what's a global allocator, including if we ourselves are a\n         // global allocator.\n         let mut global_allocator = self.cstore.has_global_allocator\n-            .to_option_with(|| Symbol::intern(\"this crate\"));\n+            .then(|| Symbol::intern(\"this crate\"));\n         self.cstore.iter_crate_data(|_, data| {\n             if !data.has_global_allocator() {\n                 return"}, {"sha": "7a5bbb4d892980d3c6850c427c14b54ea17b0f18", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -173,7 +173,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>>>,\n     Option<ClosureRegionRequirements<'tcx>>,\n ) {\n-    let mut all_facts = AllFacts::enabled(infcx.tcx).to_option(AllFacts::default());\n+    let mut all_facts = AllFacts::enabled(infcx.tcx).then_some(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n "}, {"sha": "0b3cb29e39ef4e38d183aceebeae3ef2a9e87bc0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -493,7 +493,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // functions below, which will trigger them to report errors\n         // eagerly.\n         let mut outlives_requirements =\n-            infcx.tcx.is_closure(mir_def_id).to_option_with(|| vec![]);\n+            infcx.tcx.is_closure(mir_def_id).then(|| vec![]);\n \n         self.check_type_tests(\n             infcx,"}, {"sha": "0086c3b0e103ff999f55fe787879902ac0401f41", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -1154,7 +1154,7 @@ pub fn compare_const_vals<'tcx>(\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);\n \n-    let from_bool = |v: bool| v.to_option(Ordering::Equal);\n+    let from_bool = |v: bool| v.then_some(Ordering::Equal);\n \n     let fallback = || from_bool(a == b);\n "}, {"sha": "8f177ad1225806c3e5858822eb0077cc97e508f9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -324,7 +324,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n-        let align = M::CHECK_ALIGN.to_option(align);\n+        let align = M::CHECK_ALIGN.then_some(align);\n         self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n "}, {"sha": "55b9427a75ba303d0c5fe3e9877c893eeb4f3672", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -157,9 +157,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let layout = binop_left_homogeneous(bin_op).to_option(dest.layout);\n+                let layout = binop_left_homogeneous(bin_op).then_some(dest.layout);\n                 let left = self.read_immediate(self.eval_operand(left, layout)?)?;\n-                let layout = binop_right_homogeneous(bin_op).to_option(left.layout);\n+                let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(self.eval_operand(right, layout)?)?;\n                 self.binop_ignore_overflow(\n                     bin_op,\n@@ -172,7 +172,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n                 // Due to the extra boolean in the result, we can never reuse the `dest.layout`.\n                 let left = self.read_immediate(self.eval_operand(left, None)?)?;\n-                let layout = binop_right_homogeneous(bin_op).to_option(left.layout);\n+                let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(self.eval_operand(right, layout)?)?;\n                 self.binop_with_overflow(\n                     bin_op,"}, {"sha": "591f220549deaf1c7f21547b312636c5d56b6285", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -761,7 +761,7 @@ fn compute_codegen_unit_name(\n             .iter()\n             .map(|part| part.data.as_symbol());\n \n-        let volatile_suffix = volatile.to_option(\"volatile\");\n+        let volatile_suffix = volatile.then_some(\"volatile\");\n \n         name_builder.build_cgu_name(def_path.krate, components, volatile_suffix)\n     }).clone()"}, {"sha": "284285c327c34428d26f7eabfb83fb00a4599633", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -658,7 +658,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     let mut unsafe_blocks: Vec<_> = unsafe_blocks.into_iter().collect();\n     unsafe_blocks.sort_by_cached_key(|(hir_id, _)| tcx.hir().hir_to_node_id(*hir_id));\n     let used_unsafe: FxHashSet<_> = unsafe_blocks.iter()\n-        .flat_map(|&&(id, used)| used.to_option(id))\n+        .flat_map(|&&(id, used)| used.then_some(id))\n         .collect();\n     for &(block_id, is_used) in unsafe_blocks {\n         if !is_used {"}, {"sha": "7dbfd98de7535d041ccd08a5777b5bf0869182fc", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -75,7 +75,7 @@ macro_rules! configure {\n impl<'a> StripUnconfigured<'a> {\n     pub fn configure<T: HasAttrs>(&mut self, mut node: T) -> Option<T> {\n         self.process_cfg_attrs(&mut node);\n-        self.in_cfg(node.attrs()).to_option(node)\n+        self.in_cfg(node.attrs()).then_some(node)\n     }\n \n     /// Parse and expand all `cfg_attr` attributes into a list of attributes"}, {"sha": "8dd45f5df4cabc08e106448b4ee7e5d5149f19e7", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -422,7 +422,7 @@ impl<'a> Resolver<'a> {\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(|(name, binding)| {\n                         let res = binding.res();\n-                        filter_fn(res).to_option(TypoSuggestion::from_res(*name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::from_res(*name, res))\n                     }));\n                 }\n                 Scope::BuiltinAttrs => {\n@@ -436,7 +436,7 @@ impl<'a> Resolver<'a> {\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));\n-                        filter_fn(res).to_option(TypoSuggestion::from_res(ident.name, res))\n+                        filter_fn(res).then_some(TypoSuggestion::from_res(ident.name, res))\n                     }));\n                 }\n                 Scope::ToolPrelude => {\n@@ -459,7 +459,7 @@ impl<'a> Resolver<'a> {\n                     suggestions.extend(\n                         primitive_types.iter().flat_map(|(name, prim_ty)| {\n                             let res = Res::PrimTy(*prim_ty);\n-                            filter_fn(res).to_option(TypoSuggestion::from_res(*name, res))\n+                            filter_fn(res).then_some(TypoSuggestion::from_res(*name, res))\n                         })\n                     )\n                 }"}, {"sha": "4f95d6fe70f1712f38d089e4d687b909d623a619", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -496,7 +496,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LateResolutionVisitor<'a, '_> {\n                 GenericParamKind::Lifetime { .. } => None,\n                 GenericParamKind::Type { ref default, .. } => {\n                     found_default |= default.is_some();\n-                    found_default.to_option((Ident::with_dummy_span(param.ident.name), Res::Err))\n+                    found_default.then_some((Ident::with_dummy_span(param.ident.name), Res::Err))\n                 }\n             }));\n "}, {"sha": "06c001e577b870c95bf1f2fb7159e0cbf88eb2cc", "filename": "src/librustc_target/abi/call/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Faarch64.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -20,7 +20,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => size.bits() == 64 || size.bits() == 128\n         };\n \n-        valid_unit.to_option(Uniform { unit, total: size })\n+        valid_unit.then_some(Uniform { unit, total: size })\n     })\n }\n "}, {"sha": "36971c1c5013cc981c91921d802e6ade01970c9a", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -21,7 +21,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => size.bits() == 64 || size.bits() == 128\n         };\n \n-        valid_unit.to_option(Uniform { unit, total: size })\n+        valid_unit.then_some(Uniform { unit, total: size })\n     })\n }\n "}, {"sha": "5119464b1cc5fbc6323f78d0bb8d748b8a6334f5", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -416,7 +416,7 @@ impl<'a, Ty> ArgAbi<'a, Ty> {\n         // i686-pc-windows-msvc, it results in wrong stack offsets.\n         // attrs.pointee_align = Some(self.layout.align.abi);\n \n-        let extra_attrs = self.layout.is_unsized().to_option(ArgAttributes::new());\n+        let extra_attrs = self.layout.is_unsized().then_some(ArgAttributes::new());\n \n         self.mode = PassMode::Indirect(attrs, extra_attrs);\n     }"}, {"sha": "fe4594802f66abe8278d9f98f5ad37efc71101ef", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -32,7 +32,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, abi: AB\n             RegKind::Vector => arg.layout.size.bits() == 128\n         };\n \n-        valid_unit.to_option(Uniform { unit, total: arg.layout.size })\n+        valid_unit.then_some(Uniform { unit, total: arg.layout.size })\n     })\n }\n "}, {"sha": "32be7b89cb064c300b60f4ef830e799555eda740", "filename": "src/librustc_target/abi/call/sparc64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fsparc64.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -20,7 +20,7 @@ fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n             RegKind::Vector => arg.layout.size.bits() == 128\n         };\n \n-        valid_unit.to_option(Uniform { unit, total: arg.layout.size })\n+        valid_unit.then_some(Uniform { unit, total: arg.layout.size })\n     })\n }\n "}, {"sha": "992308183b42f951fd9dde5645722fb13c8af6f2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -1105,7 +1105,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             r.map(|mut pick| {\n                 pick.autoderefs = step.autoderefs;\n                 pick.autoref = Some(mutbl);\n-                pick.unsize = step.unsize.to_option(self_ty);\n+                pick.unsize = step.unsize.then_some(self_ty);\n                 pick\n             })\n         })"}, {"sha": "c5a6c072979182c5ff457536a26f168ef54cb2f5", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs {\n-            self.closure_kind(closure_def_id, closure_substs).is_none().to_option(closure_substs)\n+            self.closure_kind(closure_def_id, closure_substs).is_none().then_some(closure_substs)\n         } else {\n             None\n         };"}, {"sha": "b2e8d8526fd2e9ec26511f074734763d7f6922bb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -317,7 +317,7 @@ pub fn token_to_string(token: &Token) -> String {\n }\n \n fn token_to_string_ext(token: &Token, convert_dollar_crate: bool) -> String {\n-    let convert_dollar_crate = convert_dollar_crate.to_option(token.span);\n+    let convert_dollar_crate = convert_dollar_crate.then_some(token.span);\n     token_kind_to_string_ext(&token.kind, convert_dollar_crate)\n }\n "}, {"sha": "0d1d2926c85d92d3ca02b5d24d77f868bd30dda0", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -95,12 +95,12 @@ pub mod printf {\n             };\n \n             // Has a special form in Rust for numbers.\n-            let fill = c_zero.to_option(\"0\");\n+            let fill = c_zero.then_some(\"0\");\n \n-            let align = c_left.to_option(\"<\");\n+            let align = c_left.then_some(\"<\");\n \n             // Rust doesn't have an equivalent to the `' '` flag.\n-            let sign = c_plus.to_option(\"+\");\n+            let sign = c_plus.then_some(\"+\");\n \n             // Not *quite* the same, depending on the type...\n             let alt = c_alt;"}, {"sha": "2e90750b7a05927e401c070463491a051bf1cfb7", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9f1269f23c5f0c1c6a53118b51cf52415ac0bb1c", "patch": "@@ -563,7 +563,7 @@ fn run_test_in_process(\n         None\n     };\n \n-    let start = report_time.to_option(Instant::now());\n+    let start = report_time.then_some(Instant::now());\n     let result = catch_unwind(AssertUnwindSafe(testfn));\n     let exec_time = start.map(|start| {\n         let duration = start.elapsed();\n@@ -594,7 +594,7 @@ fn spawn_test_subprocess(\n         let args = env::args().collect::<Vec<_>>();\n         let current_exe = &args[0];\n \n-        let start = report_time.to_option(Instant::now());\n+        let start = report_time.then_some(Instant::now());\n         let output = match Command::new(current_exe)\n             .env(SECONDARY_TEST_INVOKER_VAR, desc.name.as_slice())\n             .output() {"}]}