{"sha": "1f2f50c34eb304ce56213dad70ccdeb2f2901512", "node_id": "C_kwDOAAsO6NoAKDFmMmY1MGMzNGViMzA0Y2U1NjIxM2RhZDcwY2NkZWIyZjI5MDE1MTI", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-20T16:03:53Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-20T16:03:53Z"}, "message": "Fix many false negatives caused by autoderef", "tree": {"sha": "9f05e0a5d83c308d5570d51668889d15f418dca0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f05e0a5d83c308d5570d51668889d15f418dca0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2f50c34eb304ce56213dad70ccdeb2f2901512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2f50c34eb304ce56213dad70ccdeb2f2901512", "html_url": "https://github.com/rust-lang/rust/commit/1f2f50c34eb304ce56213dad70ccdeb2f2901512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2f50c34eb304ce56213dad70ccdeb2f2901512/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0411edfbbda82407c956b69db5bf687f8749766e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0411edfbbda82407c956b69db5bf687f8749766e", "html_url": "https://github.com/rust-lang/rust/commit/0411edfbbda82407c956b69db5bf687f8749766e"}], "stats": {"total": 116, "additions": 77, "deletions": 39}, "files": [{"sha": "27acad45ccf729e00e63982d50ead26f92ec6b7b", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f2f50c34eb304ce56213dad70ccdeb2f2901512/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2f50c34eb304ce56213dad70ccdeb2f2901512/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=1f2f50c34eb304ce56213dad70ccdeb2f2901512", "patch": "@@ -6,6 +6,8 @@ use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::Span;\n \n+use std::iter;\n+\n use super::MISNAMED_GETTERS;\n \n pub fn check_fn(\n@@ -75,39 +77,35 @@ pub fn check_fn(\n         }\n     };\n \n-    let ty = cx.typeck_results().expr_ty_adjusted(self_data);\n-\n-    let def = {\n-        let mut kind = ty.kind();\n-        loop {\n-            match kind {\n-                ty::Adt(def, _) => break def,\n-                ty::Ref(_, ty, _) => kind = ty.kind(),\n-                // We don't do tuples because the function name cannot be a number\n-                _ => return,\n-            }\n-        }\n-    };\n-\n     let mut used_field = None;\n     let mut correct_field = None;\n-    for f in def.all_fields() {\n-        if f.name.as_str() == name {\n-            correct_field = Some(f);\n-        }\n-        if f.name == used_ident.name {\n-            used_field = Some(f);\n+    let typeck_results = cx.typeck_results();\n+    for adjusted_type in iter::once(typeck_results.expr_ty(self_data))\n+        .chain(typeck_results.expr_adjustments(self_data).iter().map(|adj| adj.target))\n+    {\n+        let ty::Adt(def,_) = adjusted_type.kind() else {\n+            continue;\n+        };\n+\n+        for f in def.all_fields() {\n+            if f.name.as_str() == name {\n+                correct_field = Some(f);\n+            }\n+            if f.name == used_ident.name {\n+                used_field = Some(f);\n+            }\n         }\n     }\n \n     let Some(used_field) = used_field else {\n-        // FIXME: This can be reached if the field access uses autoderef.\n-        // `dec.all_fields()` should be replaced by something that uses autoderef on the unajusted type of `self_data`\n+        // Can happen if the field access is a tuple. We don't lint those because the getter name could not start with a number.\n         return;\n     };\n \n     let Some(correct_field) = correct_field else {\n-            return;\n+        // There is no field corresponding to the getter name.\n+        // FIXME: This can be a false positive if the correct field is reachable trought deeper autodereferences than used_field is\n+        return;\n     };\n \n     if cx.tcx.type_of(used_field.did) == cx.tcx.type_of(correct_field.did) {"}, {"sha": "03e7dac7df94c4ceaaf7d29e69deb8dc80050ed3", "filename": "tests/ui/misnamed_getters.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f2f50c34eb304ce56213dad70ccdeb2f2901512/tests%2Fui%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2f50c34eb304ce56213dad70ccdeb2f2901512/tests%2Fui%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.rs?ref=1f2f50c34eb304ce56213dad70ccdeb2f2901512", "patch": "@@ -85,15 +85,37 @@ impl B {\n     }\n }\n \n-struct C {\n-    inner: Box<A>,\n+struct D {\n+    d: u8,\n+    inner: A,\n }\n-impl C {\n-    unsafe fn a(&self) -> &u8 {\n-        &self.inner.b\n+\n+impl core::ops::Deref for D {\n+    type Target = A;\n+    fn deref(&self) -> &A {\n+        &self.inner\n     }\n-    unsafe fn a_mut(&mut self) -> &mut u8 {\n-        &mut self.inner.b\n+}\n+\n+impl core::ops::DerefMut for D {\n+    fn deref_mut(&mut self) -> &mut A {\n+        &mut self.inner\n+    }\n+}\n+\n+impl D {\n+    fn a(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn a_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n+    }\n+\n+    fn d(&self) -> &u8 {\n+        &self.b\n+    }\n+    fn d_mut(&mut self) -> &mut u8 {\n+        &mut self.b\n     }\n }\n "}, {"sha": "1e38a83d019a6d33e7aa82c973beedd657e9dc9b", "filename": "tests/ui/misnamed_getters.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f2f50c34eb304ce56213dad70ccdeb2f2901512/tests%2Fui%2Fmisnamed_getters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2f50c34eb304ce56213dad70ccdeb2f2901512/tests%2Fui%2Fmisnamed_getters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmisnamed_getters.stderr?ref=1f2f50c34eb304ce56213dad70ccdeb2f2901512", "patch": "@@ -127,22 +127,40 @@ LL | |     }\n    | |_____^\n \n error: getter function appears to return the wrong field\n-  --> $DIR/misnamed_getters.rs:92:5\n+  --> $DIR/misnamed_getters.rs:107:5\n    |\n-LL | /     unsafe fn a(&self) -> &u8 {\n-LL | |         &self.inner.b\n-   | |         ------------- help: consider using: `&self.inner.a`\n+LL | /     fn a(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.a`\n LL | |     }\n    | |_____^\n \n error: getter function appears to return the wrong field\n-  --> $DIR/misnamed_getters.rs:95:5\n+  --> $DIR/misnamed_getters.rs:110:5\n    |\n-LL | /     unsafe fn a_mut(&mut self) -> &mut u8 {\n-LL | |         &mut self.inner.b\n-   | |         ----------------- help: consider using: `&mut self.inner.a`\n+LL | /     fn a_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.a`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:114:5\n+   |\n+LL | /     fn d(&self) -> &u8 {\n+LL | |         &self.b\n+   | |         ------- help: consider using: `&self.d`\n+LL | |     }\n+   | |_____^\n+\n+error: getter function appears to return the wrong field\n+  --> $DIR/misnamed_getters.rs:117:5\n+   |\n+LL | /     fn d_mut(&mut self) -> &mut u8 {\n+LL | |         &mut self.b\n+   | |         ----------- help: consider using: `&mut self.d`\n LL | |     }\n    | |_____^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 18 previous errors\n "}]}