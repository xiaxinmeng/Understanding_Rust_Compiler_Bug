{"sha": "de8c79a53532c4a6de61b0dcde6ed9b133afa752", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOGM3OWE1MzUzMmM0YTZkZTYxYjBkY2RlNmVkOWIxMzNhZmE3NTI=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-04-22T20:03:56Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-04-22T21:17:24Z"}, "message": "Implement O(1) slice::Iter methods.\n\nInstead of using the O(n) defaults, define O(1) shortcuts.", "tree": {"sha": "6ea30cf8b817605b49734a11deaf4a62524d306a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea30cf8b817605b49734a11deaf4a62524d306a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de8c79a53532c4a6de61b0dcde6ed9b133afa752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de8c79a53532c4a6de61b0dcde6ed9b133afa752", "html_url": "https://github.com/rust-lang/rust/commit/de8c79a53532c4a6de61b0dcde6ed9b133afa752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de8c79a53532c4a6de61b0dcde6ed9b133afa752/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e9279d87d5786fcb8e12482f2920979602267b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e9279d87d5786fcb8e12482f2920979602267b", "html_url": "https://github.com/rust-lang/rust/commit/e9e9279d87d5786fcb8e12482f2920979602267b"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "e2bb881921d807c24a4b78ed881b10b811a76b22", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/de8c79a53532c4a6de61b0dcde6ed9b133afa752/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8c79a53532c4a6de61b0dcde6ed9b133afa752/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=de8c79a53532c4a6de61b0dcde6ed9b133afa752", "patch": "@@ -666,6 +666,60 @@ macro_rules! iterator {\n                 let exact = diff / (if size == 0 {1} else {size});\n                 (exact, Some(exact))\n             }\n+\n+            #[inline]\n+            fn count(self) -> usize {\n+                self.size_hint().0\n+            }\n+\n+            #[inline]\n+            fn nth(&mut self, n: usize) -> Option<$elem> {\n+                // could be implemented with slices, but this avoids bounds checks\n+                unsafe {\n+                    ::intrinsics::assume(!self.ptr.is_null());\n+                    ::intrinsics::assume(!self.end.is_null());\n+                    // There should be some way to use offset and optimize this to LEA but I don't\n+                    // know how to do that AND detect overflow...\n+                    let size = mem::size_of::<T>();\n+                    if size == 0 {\n+                        if let Some(new_ptr) = (self.ptr as usize).checked_add(n) {\n+                            if new_ptr < (self.end as usize) {\n+                                self.ptr = transmute(new_ptr + 1);\n+                                return Some(&mut *(1 as *mut _))\n+                            }\n+                        }\n+                    } else {\n+                        if let Some(new_ptr) = n.checked_mul(size).and_then(|offset| {\n+                            (self.ptr as usize).checked_add(offset)\n+                        }) {\n+                            if new_ptr < (self.end as usize) {\n+                                self.ptr = transmute(new_ptr + size);\n+                                return Some(transmute(new_ptr))\n+                            }\n+                        }\n+                    }\n+                    None\n+                }\n+            }\n+\n+            #[inline]\n+            fn last(self) -> Option<$elem> {\n+                // We could just call next_back but this avoids the memory write.\n+                unsafe {\n+                    ::intrinsics::assume(!self.ptr.is_null());\n+                    ::intrinsics::assume(!self.end.is_null());\n+                    if self.end == self.ptr {\n+                        None\n+                    } else {\n+                        if mem::size_of::<T>() == 0 {\n+                            // Use a non-null pointer value\n+                            Some(&mut *(1 as *mut _))\n+                        } else {\n+                            Some(transmute(self.end.offset(-1)))\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7c884a73ce05bd4a83e86cc29cb3baef47ad6ba1", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/de8c79a53532c4a6de61b0dcde6ed9b133afa752/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de8c79a53532c4a6de61b0dcde6ed9b133afa752/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=de8c79a53532c4a6de61b0dcde6ed9b133afa752", "patch": "@@ -82,3 +82,34 @@ fn iterator_to_slice() {\n     test!([1u8,2,3]);\n     test!([(),(),()]);\n }\n+\n+#[test]\n+fn test_iterator_nth() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().nth(i).unwrap(), &v[i]);\n+    }\n+    assert_eq!(v.iter().nth(v.len()), None);\n+\n+    let mut iter = v.iter();\n+    assert_eq!(iter.nth(2).unwrap(), &v[2]);\n+    assert_eq!(iter.nth(1).unwrap(), &v[4]);\n+}\n+\n+#[test]\n+fn test_iterator_last() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    assert_eq!(v.iter().last().unwrap(), &4);\n+    assert_eq!(v[..1].iter().last().unwrap(), &0);\n+}\n+\n+#[test]\n+fn test_iterator_count() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    assert_eq!(v.iter().count(), 5);\n+\n+    let mut iter2 = v.iter();\n+    iter2.next();\n+    iter2.next();\n+    assert_eq!(iter2.count(), 3);\n+}"}]}