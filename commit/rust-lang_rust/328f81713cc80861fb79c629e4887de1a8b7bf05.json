{"sha": "328f81713cc80861fb79c629e4887de1a8b7bf05", "node_id": "C_kwDOAAsO6NoAKDMyOGY4MTcxM2NjODA4NjFmYjc5YzYyOWU0ODg3ZGUxYThiN2JmMDU", "commit": {"author": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-10-12T10:57:16Z"}, "committer": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-10-12T11:01:30Z"}, "message": "Make `CStr::from_ptr` `const`.", "tree": {"sha": "7d992cdf25a6831c9a5c9ae1f2c3f5724477f78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d992cdf25a6831c9a5c9ae1f2c3f5724477f78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/328f81713cc80861fb79c629e4887de1a8b7bf05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEbU1eLXPTwjnhHZwHJFKTtRcCZVsFAmNGnooRHG1lQHJlaXRl\ncm1hcmsudXMACgkQJFKTtRcCZVusKw/+NEEh09OW6EnIh1TxlkcJgvCVF7pCEzAx\nat9HJ7PfPA2TRjQ8fDx3NifJQeIEdWBpSws/bvCTqXcm/pFJFJH9n+F4jl8b4FQH\nWyi9AXl8k7S6gS27xu/EtZasHuHa17WcdlAgF+qmDlTjopBYz/V01k09hjyih+Pe\nVpngVEu9D066keKYnPts/ZS9DQ4S8bOi1A6BDsyoOSWXDxY7v0pNX7u1lfkCGjSw\nD4zcggDMlJr8qw57DThXzSVGrhnRtk/cZr81d0bwQAWQM6O8dx0btDHqT3YrkFYW\nzisBSBG5bFqXE4SLmV27CkFmST0fsmcbchcUZICxpdEV5HD7kAyrgJtZ2Lainjct\n3hacaIqIe5+gy9x3Ur3piq4V8Q35WNnQGPoEyLUShaLunKCW5ZZmbnaJOybsVYPj\njgeqO9FgeOInrwCr8mAbBycp4Eq7aPtf2GsIAUlWW7P7mL+1JTztmQzjcY7YUWxE\n88ljpgSMCpv+EwhVo8NFTDfJHYxrGAWlB0ezYVouGAOR0I5gOLAC5cTuQUoJAMjm\nEnaixC6dAF/yD8UfbAT8P0Jgr+d5xSqnrxfyEjpZsBxXKnvEWIrM6Y8zgruZhxik\n25JgfEvX9s76c17ehq8gUa5FrUenVpMuqhrUVRvv0efoEM8NZTSNHtkLsfbolI2u\niMCZ/FxV9GA=\n=EzU8\n-----END PGP SIGNATURE-----", "payload": "tree 7d992cdf25a6831c9a5c9ae1f2c3f5724477f78f\nparent e6ce5627a9e8af9ae4673a390954fffaf526e5cc\nauthor Markus Reiter <me@reitermark.us> 1665572236 +0200\ncommitter Markus Reiter <me@reitermark.us> 1665572490 +0200\n\nMake `CStr::from_ptr` `const`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/328f81713cc80861fb79c629e4887de1a8b7bf05", "html_url": "https://github.com/rust-lang/rust/commit/328f81713cc80861fb79c629e4887de1a8b7bf05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/328f81713cc80861fb79c629e4887de1a8b7bf05/comments", "author": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ce5627a9e8af9ae4673a390954fffaf526e5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ce5627a9e8af9ae4673a390954fffaf526e5cc", "html_url": "https://github.com/rust-lang/rust/commit/e6ce5627a9e8af9ae4673a390954fffaf526e5cc"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "ae15be793414e26805c131a6c5bcab533046cb5d", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/328f81713cc80861fb79c629e4887de1a8b7bf05/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/328f81713cc80861fb79c629e4887de1a8b7bf05/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=328f81713cc80861fb79c629e4887de1a8b7bf05", "patch": "@@ -240,7 +240,9 @@ impl CStr {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n+    #[rustc_const_unstable(feature = \"const_cstr_methods\", issue = \"101719\")]\n+    #[rustc_allow_const_fn_unstable(const_eval_select)]\n+    pub const unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         // SAFETY: The caller has provided a pointer that points to a valid C\n         // string with a NUL terminator of size less than `isize::MAX`, whose\n         // content remain valid and doesn't change for the lifetime of the\n@@ -252,13 +254,29 @@ impl CStr {\n         //\n         // The cast from c_char to u8 is ok because a c_char is always one byte.\n         unsafe {\n-            extern \"C\" {\n-                /// Provided by libc or compiler_builtins.\n-                fn strlen(s: *const c_char) -> usize;\n+            const fn strlen_ct(s: *const c_char) -> usize {\n+                let mut len = 0;\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                while unsafe { *s.add(len) } != 0 {\n+                    len += 1;\n+                }\n+\n+                len\n             }\n-            let len = strlen(ptr);\n-            let ptr = ptr as *const u8;\n-            CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n+\n+            fn strlen_rt(s: *const c_char) -> usize {\n+                extern \"C\" {\n+                    /// Provided by libc or compiler_builtins.\n+                    fn strlen(s: *const c_char) -> usize;\n+                }\n+\n+                // SAFETY: Outer caller has provided a pointer to a valid C string.\n+                unsafe { strlen(s) }\n+            }\n+\n+            let len = intrinsics::const_eval_select((ptr,), strlen_ct, strlen_rt);\n+            Self::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr.cast(), len + 1))\n         }\n     }\n "}]}