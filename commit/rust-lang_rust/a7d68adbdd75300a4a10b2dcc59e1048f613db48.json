{"sha": "a7d68adbdd75300a4a10b2dcc59e1048f613db48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDY4YWRiZGQ3NTMwMGE0YTEwYjJkY2M1OWUxMDQ4ZjYxM2RiNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-24T22:45:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-24T22:45:57Z"}, "message": "auto merge of #9336 : alexcrichton/rust/issue-7981, r=catamorphism\n\nProgress on #7981\r\n\r\nThis doesn't completely close the issue because `struct A;` is still allowed, and it's a much larger change to disallow that. I'm also not entirely sure that we want to disallow that. Regardless, punting that discussion to the issue instead.", "tree": {"sha": "848fdb582c80f1e1fa4d62373bb139fa3799b722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/848fdb582c80f1e1fa4d62373bb139fa3799b722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d68adbdd75300a4a10b2dcc59e1048f613db48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d68adbdd75300a4a10b2dcc59e1048f613db48", "html_url": "https://github.com/rust-lang/rust/commit/a7d68adbdd75300a4a10b2dcc59e1048f613db48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d68adbdd75300a4a10b2dcc59e1048f613db48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3624ed968905b789b35c2301eb3c8057c05b3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3624ed968905b789b35c2301eb3c8057c05b3b3", "html_url": "https://github.com/rust-lang/rust/commit/e3624ed968905b789b35c2301eb3c8057c05b3b3"}, {"sha": "4b266f1c0df9732bbdea44b0df3d459d4cf2756d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b266f1c0df9732bbdea44b0df3d459d4cf2756d", "html_url": "https://github.com/rust-lang/rust/commit/4b266f1c0df9732bbdea44b0df3d459d4cf2756d"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "70fcf442f3fd50d939a21fb424557a5371ee37a7", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -472,7 +472,7 @@ pub trait Writer {\n \n pub trait Stream: Reader + Writer { }\n \n-impl<T: Reader + Writer> Stream for T;\n+impl<T: Reader + Writer> Stream for T {}\n \n pub enum SeekStyle {\n     /// Seek from the beginning of the stream"}, {"sha": "54cb40c9873a5a7ef119ed36444266f448305026", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -22,7 +22,7 @@ use libc::{c_int};\n use option::{None, Some, Option};\n \n pub struct FsRequest(*uvll::uv_fs_t);\n-impl Request for FsRequest;\n+impl Request for FsRequest {}\n \n pub struct RequestData {\n     complete_cb: Option<FsCallback>"}, {"sha": "c2c08ce9360b6256419c3c15c90940f61ccc04c2", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -65,6 +65,7 @@ pub enum ObsoleteSyntax {\n     ObsoletePrivVisibility,\n     ObsoleteTraitFuncVisibility,\n     ObsoleteConstPointer,\n+    ObsoleteEmptyImpl,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -256,6 +257,10 @@ impl ParserObsoleteMethods for Parser {\n                 \"instead of `&const Foo` or `@const Foo`, write `&Foo` or \\\n                  `@Foo`\"\n             ),\n+            ObsoleteEmptyImpl => (\n+                \"empty implementation\",\n+                \"instead of `impl A;`, write `impl A {}`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "5a0ccac2cdbf2161016b0bcdda30b53a37a179f0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -3852,7 +3852,9 @@ impl Parser {\n         }\n \n         let mut meths = ~[];\n-        if !self.eat(&token::SEMI) {\n+        if self.eat(&token::SEMI) {\n+            self.obsolete(*self.span, ObsoleteEmptyImpl);\n+        } else {\n             self.expect(&token::LBRACE);\n             while !self.eat(&token::RBRACE) {\n                 meths.push(self.parse_method());"}, {"sha": "dee8d710a73ad7162d5f33daacbbeaef4f7ce7aa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -598,18 +598,12 @@ pub fn print_item(s: @ps, item: &ast::item) {\n \n         print_type(s, ty);\n \n-        if methods.len() == 0 {\n-            word(s.s, \";\");\n-            end(s); // end the head-ibox\n-            end(s); // end the outer cbox\n-        } else {\n-            space(s.s);\n-            bopen(s);\n-            for meth in methods.iter() {\n-               print_method(s, *meth);\n-            }\n-            bclose(s, item.span);\n+        space(s.s);\n+        bopen(s);\n+        for meth in methods.iter() {\n+           print_method(s, *meth);\n         }\n+        bclose(s, item.span);\n       }\n       ast::item_trait(ref generics, ref traits, ref methods) => {\n         head(s, visibility_qualified(item.vis, \"trait\"));"}, {"sha": "8694871417a91ce7138d4bdff203863b16baf236", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -35,6 +35,6 @@ impl Eq for MyInt {\n     fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-impl MyNum for MyInt;\n+impl MyNum for MyInt {}\n \n fn mi(v: int) -> MyInt { MyInt { val: v } }"}, {"sha": "70c16e0baefb873dd2e3905e18aa2ade3d259575", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -20,7 +20,7 @@ impl MyEq for int {\n     fn eq(&self, other: &int) -> bool { *self == *other }\n }\n \n-impl MyEq for A;  //~ ERROR missing method\n+impl MyEq for A {}  //~ ERROR missing method\n \n fn main() {\n }"}, {"sha": "4355b4b98fe2288f40b406056de389971d6fa368", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -40,7 +40,7 @@ trait Trait<T1> {\n     }\n }\n \n-impl<T> Trait<T> for Struct;\n+impl<T> Trait<T> for Struct {}\n \n fn main() {\n "}, {"sha": "fde58f76accb7f1050c265cf5aeb6d1a06b5e39d", "filename": "src/test/debug-info/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-default-method.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -118,7 +118,7 @@ trait Trait {\n     }\n }\n \n-impl Trait for Struct;\n+impl Trait for Struct {}\n \n fn main() {\n     let stack = Struct { x: 100 };"}, {"sha": "3daf7afd4b1a4d4847701ffea609db51c26239e0", "filename": "src/test/debug-info/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -119,7 +119,7 @@ trait Trait {\n     }\n }\n \n-impl Trait for Struct;\n+impl Trait for Struct {}\n \n fn main() {\n     let stack = Struct { x: 987 };"}, {"sha": "05258d53586849ad59c5f041cc13bca7fb3cc2d7", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -40,7 +40,7 @@ trait Trait {\n     }\n }\n \n-impl Trait for Struct;\n+impl Trait for Struct {}\n \n fn main() {\n "}, {"sha": "685cdcdaeade0b06c9761be62892111a9e24e54e", "filename": "src/test/pretty/empty-impl.pp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fempty-impl.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fempty-impl.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-impl.pp?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -1,5 +1,5 @@\n trait X { }\n-impl X for uint;\n+impl X for uint { }\n \n trait Y { }\n-impl Y for uint;\n+impl Y for uint { }"}, {"sha": "685cdcdaeade0b06c9761be62892111a9e24e54e", "filename": "src/test/pretty/empty-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fempty-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fempty-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-impl.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -1,5 +1,5 @@\n trait X { }\n-impl X for uint;\n+impl X for uint { }\n \n trait Y { }\n-impl Y for uint;\n+impl Y for uint { }"}, {"sha": "4a402132254077c6243e513e9aca61ca3feb8e73", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -1,7 +1,7 @@\n // pp-exact\n \n trait Tr { }\n-impl Tr for int;\n+impl Tr for int { }\n \n fn foo(x: ~Tr: Freeze) -> ~Tr: Freeze { x }\n "}, {"sha": "b5790269d90ce70c05940648c5a1b9bf7420b582", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -29,7 +29,7 @@ impl Y for int {\n     fn y(self) -> int { self }\n }\n \n-impl Z for int;\n+impl Z for int {}\n \n fn main() {\n     assert_eq!(12.x(), 12);"}, {"sha": "86cdd6135ecf292f9fa8bf7d558dadd82efd2ba6", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -31,7 +31,7 @@ impl Positioned<int> for Point {\n     }\n }\n \n-impl Movable<int> for Point;\n+impl Movable<int> for Point {}\n \n pub fn main() {\n     let mut p = Point{ x: 1, y: 2};"}, {"sha": "63d2562f5412b45d842b23f866b33baf199ce0bc", "filename": "src/test/run-pass/issue-3979-xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -24,7 +24,7 @@ impl Positioned for Point {\n     }\n }\n \n-impl Movable for Point;\n+impl Movable for Point {}\n \n pub fn main() {\n     let mut p = Point{ x: 1, y: 2};"}, {"sha": "4f69342830b93c22a90fa2be936dbc533eea0d26", "filename": "src/test/run-pass/issue-3979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -32,7 +32,7 @@ impl Positioned for Point {\n     }\n }\n \n-impl Movable for Point;\n+impl Movable for Point {}\n \n pub fn main() {\n     let mut p = Point{ x: 1, y: 2};"}, {"sha": "2cfc22111a73fe2ee87eab374d5ad67a5fa17c85", "filename": "src/test/run-pass/supertrait-default-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -33,7 +33,7 @@ impl<S: Clone> Positioned<S> for Point<S> {\n     }\n }\n \n-impl<S: Clone + Add<S, S>> Movable<S> for Point<S>;\n+impl<S: Clone + Add<S, S>> Movable<S> for Point<S> {}\n \n pub fn main() {\n     let mut p = Point{ x: 1, y: 2};"}, {"sha": "3a0f2dd9464dadf58036c930de045e16af476ef0", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -19,7 +19,7 @@ impl Eq for MyInt {\n     fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-impl MyNum for MyInt;\n+impl MyNum for MyInt {}\n \n fn f<T:MyNum>(x: T, y: T) -> bool {\n     return x == y;"}, {"sha": "fb19bfa674fd8ec9eee83d61242d7cfd43bb8ac4", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -31,7 +31,7 @@ impl Eq for MyInt {\n     fn ne(&self, other: &MyInt) -> bool { !self.eq(other) }\n }\n \n-impl MyNum for MyInt;\n+impl MyNum for MyInt {}\n \n fn f<T:MyNum>(x: T, y: T) -> (T, T, T) {\n     return (x + y, x - y, x * y);"}, {"sha": "cd57e6a7dd05966caf8cf8cfccb07ef290bf2576", "filename": "src/test/run-pass/trait-inheritance-subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -20,7 +20,7 @@ impl Add<MyInt, MyInt> for MyInt {\n     fn add(&self, other: &MyInt) -> MyInt { mi(self.val + other.val) }\n }\n \n-impl MyNum for MyInt;\n+impl MyNum for MyInt {}\n \n fn f<T:MyNum>(x: T, y: T) -> T {\n     return x.add(&y);"}, {"sha": "ebddfafc3b4381ffb262011469684e4e206a0c5d", "filename": "src/test/run-pass/trait-inheritance-subst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-subst2.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -30,7 +30,7 @@ impl Add<MyInt, MyInt> for MyInt {\n     fn add(&self, other: &MyInt) -> MyInt { self.chomp(other) }\n }\n \n-impl MyNum for MyInt;\n+impl MyNum for MyInt {}\n \n fn f<T:MyNum>(x: T, y: T) -> T {\n     return x.add(&y).chomp(&y);"}, {"sha": "7fa895ddf988802b1896224c67f1448b1e119962", "filename": "src/test/run-pass/trait-inheritance2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d68adbdd75300a4a10b2dcc59e1048f613db48/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance2.rs?ref=a7d68adbdd75300a4a10b2dcc59e1048f613db48", "patch": "@@ -19,7 +19,7 @@ struct A { x: int }\n impl Foo for A { fn f(&self) -> int { 10 } }\n impl Bar for A { fn g(&self) -> int { 20 } }\n impl Baz for A { fn h(&self) -> int { 30 } }\n-impl Quux for A;\n+impl Quux for A {}\n \n fn f<T:Quux + Foo + Bar + Baz>(a: &T) {\n     assert_eq!(a.f(), 10);"}]}