{"sha": "397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5N2IyYTgwMGY3YTI1ZTgxYzJhYWFiMmFjMDI5MWFkYmZkY2UzY2U=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T09:50:45Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(12): Hide no_integrated_as logic in write::run_passes.", "tree": {"sha": "19573867686133dc9ea9d326f16f78d203b426a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19573867686133dc9ea9d326f16f78d203b426a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "html_url": "https://github.com/rust-lang/rust/commit/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ce50558f6ba3f42011833a36a43f8026bf4863", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ce50558f6ba3f42011833a36a43f8026bf4863", "html_url": "https://github.com/rust-lang/rust/commit/f3ce50558f6ba3f42011833a36a43f8026bf4863"}], "stats": {"total": 64, "additions": 23, "deletions": 41}, "files": [{"sha": "280951e0dc87cd442f4a057157d9cc1a13927154", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "patch": "@@ -665,7 +665,6 @@ pub fn run_passes(sess: &Session,\n                   modules: Vec<ModuleTranslation>,\n                   metadata_module: ModuleTranslation,\n                   allocator_module: Option<ModuleTranslation>,\n-                  output_types_override: &OutputTypes,\n                   crate_output: &OutputFilenames,\n \n                   crate_name: Symbol,\n@@ -690,6 +689,12 @@ pub fn run_passes(sess: &Session,\n         sess.fatal(\"can't perform LTO when using multiple codegen units\");\n     }\n \n+    let output_types_override = if no_integrated_as {\n+        OutputTypes::new(&[(OutputType::Assembly, None)])\n+    } else {\n+        sess.opts.output_types.clone()\n+    };\n+\n     // Sanity check\n     assert!(modules.len() == sess.opts.cg.codegen_units ||\n             sess.opts.debugging_opts.incremental.is_some() ||"}, {"sha": "53fb330e364d4bea95251ffc9a4d20dbf7dbbb3d", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 17, "deletions": 40, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397b2a800f7a25e81c2aaab2ac0291adbfdce3ce/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=397b2a800f7a25e81c2aaab2ac0291adbfdce3ce", "patch": "@@ -44,7 +44,7 @@ use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, OutputTypes};\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType};\n use rustc::session::Session;\n use rustc_incremental::{self, IncrementalHashesMap};\n use abi;\n@@ -967,7 +967,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  vec![],\n                                  metadata_module,\n                                  None,\n-                                 &output_filenames.outputs,\n                                  output_filenames,\n \n                                  tcx.crate_name(LOCAL_CRATE),\n@@ -1237,44 +1236,22 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                               link_meta.crate_hash));\n     // ---\n \n-    if no_integrated_as {\n-        let output_types = OutputTypes::new(&[(OutputType::Assembly, None)]);\n-        time(sess.time_passes(),\n-             \"LLVM passes\",\n-             || write::run_passes(sess,\n-                                  modules,\n-                                  metadata_module,\n-                                  allocator_module,\n-                                  &output_types,\n-                                  outputs,\n-\n-                                  tcx.crate_name(LOCAL_CRATE),\n-                                  link_meta,\n-                                  metadata,\n-                                  exported_symbols,\n-                                  no_builtins,\n-                                  windows_subsystem,\n-                                  linker_info,\n-                                  no_integrated_as))\n-    } else {\n-        time(sess.time_passes(),\n-             \"LLVM passes\",\n-             || write::run_passes(sess,\n-                                  modules,\n-                                  metadata_module,\n-                                  allocator_module,\n-                                  &sess.opts.output_types,\n-                                  outputs,\n-\n-                                  tcx.crate_name(LOCAL_CRATE),\n-                                  link_meta,\n-                                  metadata,\n-                                  exported_symbols,\n-                                  no_builtins,\n-                                  windows_subsystem,\n-                                  linker_info,\n-                                  no_integrated_as))\n-    }\n+    time(sess.time_passes(),\n+         \"LLVM passes\",\n+         || write::run_passes(sess,\n+                              modules,\n+                              metadata_module,\n+                              allocator_module,\n+                              outputs,\n+\n+                              tcx.crate_name(LOCAL_CRATE),\n+                              link_meta,\n+                              metadata,\n+                              exported_symbols,\n+                              no_builtins,\n+                              windows_subsystem,\n+                              linker_info,\n+                              no_integrated_as))\n }\n \n #[inline(never)] // give this a place in the profiler"}]}