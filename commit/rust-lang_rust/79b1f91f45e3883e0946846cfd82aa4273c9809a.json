{"sha": "79b1f91f45e3883e0946846cfd82aa4273c9809a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YjFmOTFmNDVlMzg4M2UwOTQ2ODQ2Y2ZkODJhYTQyNzNjOTgwOWE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-24T22:28:00Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-25T06:17:18Z"}, "message": "First version of file handling", "tree": {"sha": "a0736c7c996c6735bad6e56d61358344c702ea7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0736c7c996c6735bad6e56d61358344c702ea7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79b1f91f45e3883e0946846cfd82aa4273c9809a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79b1f91f45e3883e0946846cfd82aa4273c9809a", "html_url": "https://github.com/rust-lang/rust/commit/79b1f91f45e3883e0946846cfd82aa4273c9809a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79b1f91f45e3883e0946846cfd82aa4273c9809a/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "402129c01e162a74608bed05c8dd71607ced1441", "url": "https://api.github.com/repos/rust-lang/rust/commits/402129c01e162a74608bed05c8dd71607ced1441", "html_url": "https://github.com/rust-lang/rust/commit/402129c01e162a74608bed05c8dd71607ced1441"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "9f4e605b6c9416f0ee2401278feb32b2a1307ab1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -34,6 +34,7 @@ pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n+pub use crate::shims::io::{FileHandler, EvalContextExt as FileEvalContextExt};\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};"}, {"sha": "19be5b547ba846da42ed48bf0fec31da207b610e", "filename": "src/machine.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -96,6 +96,8 @@ pub struct Evaluator<'tcx> {\n     /// If enabled, the `env_vars` field is populated with the host env vars during initialization\n     /// and random number generation is delegated to the host.\n     pub(crate) communicate: bool,\n+\n+    pub(crate) file_handler: FileHandler,\n }\n \n impl<'tcx> Evaluator<'tcx> {\n@@ -110,6 +112,7 @@ impl<'tcx> Evaluator<'tcx> {\n             last_error: 0,\n             tls: TlsData::default(),\n             communicate,\n+            file_handler: Default::default(),\n         }\n     }\n }"}, {"sha": "f717d7959f04cf505d5b6ea03c432e8d7da583b0", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -446,6 +446,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"open\" | \"open64\" => {\n+                let result = this.open(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"fcntl\" => {\n+                let result = this.fcntl(args[0], args[1], args.get(2).cloned())?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"close\" => {\n+                let result = this.close(args[0])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"read\" => {\n+                let result = this.read(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;"}, {"sha": "02e5133c9a08ca5886b20340b99aa8817cb9bf78", "filename": "src/shims/io.rs", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -0,0 +1,179 @@\n+use std::collections::HashMap;\n+use std::fs::File;\n+use std::io::Read;\n+\n+use crate::stacked_borrows::Tag;\n+use crate::*;\n+\n+#[derive(Default)]\n+pub struct FileHandler {\n+    files: HashMap<i32, File>,\n+    flags: HashMap<i32, i32>,\n+    low: i32,\n+}\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn open(\n+        &mut self,\n+        path_op: OpTy<'tcx, Tag>,\n+        flag_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+        }\n+\n+        let flag = this.read_scalar(flag_op)?.to_i32()?;\n+\n+        if flag\n+            != this\n+                .eval_path_scalar(&[\"libc\", \"O_RDONLY\"])?\n+                .unwrap()\n+                .to_i32()?\n+            && flag\n+                != this\n+                    .eval_path_scalar(&[\"libc\", \"O_CLOEXEC\"])?\n+                    .unwrap()\n+                    .to_i32()?\n+        {\n+            throw_unsup_format!(\"Unsupported flag {:#x}\", flag);\n+        }\n+\n+        let path_bytes = this\n+            .memory()\n+            .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = std::str::from_utf8(path_bytes)\n+            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?;\n+\n+        match File::open(path) {\n+            Ok(file) => {\n+                let mut fh = &mut this.machine.file_handler;\n+                fh.low += 1;\n+                fh.files.insert(fh.low, file);\n+                fh.flags.insert(fh.low, flag);\n+                Ok(fh.low)\n+            }\n+\n+            Err(e) => {\n+                this.machine.last_error = e.raw_os_error().unwrap() as u32;\n+                Ok(-1)\n+            }\n+        }\n+    }\n+\n+    fn fcntl(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        cmd_op: OpTy<'tcx, Tag>,\n+        arg_op: Option<OpTy<'tcx, Tag>>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+        }\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let cmd = this.read_scalar(cmd_op)?.to_i32()?;\n+\n+        if cmd\n+            == this\n+                .eval_path_scalar(&[\"libc\", \"F_SETFD\"])?\n+                .unwrap()\n+                .to_i32()?\n+        {\n+            let flag = this.read_scalar(arg_op.unwrap())?.to_i32()?;\n+            this.machine.file_handler.flags.insert(fd, flag);\n+            Ok(0)\n+        } else if cmd\n+            == this\n+                .eval_path_scalar(&[\"libc\", \"F_GETFD\"])?\n+                .unwrap()\n+                .to_i32()?\n+        {\n+            if let Some(flag) = this.machine.file_handler.flags.get(&fd) {\n+                Ok(*flag)\n+            } else {\n+                this.machine.last_error = this\n+                    .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n+                    .unwrap()\n+                    .to_u32()?;\n+                Ok(-1)\n+            }\n+        } else {\n+            throw_unsup_format!(\"Unsupported command {:#x}\", cmd);\n+        }\n+    }\n+\n+    fn close(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+        }\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n+        if let Some(file) = this.machine.file_handler.files.remove(&fd) {\n+            match file.sync_all() {\n+                Ok(()) => Ok(0),\n+                Err(e) => {\n+                    this.machine.last_error = e.raw_os_error().unwrap() as u32;\n+                    Ok(-1)\n+                }\n+            }\n+        } else {\n+            this.machine.last_error = this\n+                .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n+                .unwrap()\n+                .to_u32()?;\n+            Ok(-1)\n+        }\n+    }\n+\n+    fn read(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+        count_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i64> {\n+        let this = self.eval_context_mut();\n+\n+        if !this.machine.communicate {\n+            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n+        }\n+\n+        let tcx = &{ this.tcx.tcx };\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n+\n+        if let Some(file) = this.machine.file_handler.files.get_mut(&fd) {\n+            let mut bytes = vec![0; count as usize];\n+            match file.read(&mut bytes) {\n+                Ok(read_bytes) => {\n+                    bytes.truncate(read_bytes);\n+\n+                    this.memory_mut()\n+                        .get_mut(buf.alloc_id)?\n+                        .write_bytes(tcx, buf, &bytes)?;\n+\n+                    Ok(read_bytes as i64)\n+                }\n+                Err(e) => {\n+                    this.machine.last_error = e.raw_os_error().unwrap() as u32;\n+                    Ok(-1)\n+                }\n+            }\n+        } else {\n+            this.machine.last_error = this\n+                .eval_path_scalar(&[\"libc\", \"EBADF\"])?\n+                .unwrap()\n+                .to_u32()?;\n+            Ok(-1)\n+        }\n+    }\n+}"}, {"sha": "981185d252e7467f272df9682bb90fadfd332220", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -3,6 +3,7 @@ pub mod intrinsics;\n pub mod tls;\n pub mod dlsym;\n pub mod env;\n+pub mod io;\n \n use rustc::{ty, mir};\n "}, {"sha": "8ab686eafeb1f44702738c8b0f24f2567c36da6d", "filename": "tests/hello.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/tests%2Fhello.txt", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/tests%2Fhello.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fhello.txt?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -0,0 +1 @@\n+Hello, World!"}, {"sha": "93c986393b02efb9c8fd0567b852678bc07c5e82", "filename": "tests/run-pass/file_read.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79b1f91f45e3883e0946846cfd82aa4273c9809a/tests%2Frun-pass%2Ffile_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79b1f91f45e3883e0946846cfd82aa4273c9809a/tests%2Frun-pass%2Ffile_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffile_read.rs?ref=79b1f91f45e3883e0946846cfd82aa4273c9809a", "patch": "@@ -0,0 +1,12 @@\n+// ignore-windows: File handling is not implemented yet\n+// compile-flags: -Zmiri-disable-isolation\n+\n+use std::fs::File;\n+use std::io::Read;\n+\n+fn main() {\n+    let mut file = File::open(\"./tests/hello.txt\").unwrap();\n+    let mut contents = String::new();\n+    file.read_to_string(&mut contents).unwrap();\n+    assert_eq!(\"Hello, World!\\n\", contents);\n+}"}]}