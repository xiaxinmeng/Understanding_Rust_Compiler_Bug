{"sha": "d0b315f262d95a6a95292d638aa7697c21513db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjMxNWYyNjJkOTVhNmE5NTI5MmQ2MzhhYTc2OTdjMjE1MTNkYjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-26T12:05:32Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-01T13:29:35Z"}, "message": "Fix `try_read_value` not working for enums", "tree": {"sha": "071081af1d7fe65a7824d559462d8935f42e7423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071081af1d7fe65a7824d559462d8935f42e7423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b315f262d95a6a95292d638aa7697c21513db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b315f262d95a6a95292d638aa7697c21513db4", "html_url": "https://github.com/rust-lang/rust/commit/d0b315f262d95a6a95292d638aa7697c21513db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b315f262d95a6a95292d638aa7697c21513db4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c06854c0cf800519bbc42cc1b08afbd4bdf90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c06854c0cf800519bbc42cc1b08afbd4bdf90a", "html_url": "https://github.com/rust-lang/rust/commit/c6c06854c0cf800519bbc42cc1b08afbd4bdf90a"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "ada304b6997137d842fd15fb837e0bfe13fd3951", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d0b315f262d95a6a95292d638aa7697c21513db4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b315f262d95a6a95292d638aa7697c21513db4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d0b315f262d95a6a95292d638aa7697c21513db4", "patch": "@@ -1120,7 +1120,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n     /// ensures this Value is not a ByRef\n     pub fn follow_by_ref_value(\n-        &self,\n+        &mut self,\n         value: Value,\n         ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Value> {\n@@ -1133,7 +1133,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     }\n \n     pub fn value_to_scalar(\n-        &self,\n+        &mut self,\n         ValTy { value, ty } : ValTy<'tcx>,\n     ) -> EvalResult<'tcx, Scalar> {\n         match self.follow_by_ref_value(value, ty)? {\n@@ -1540,7 +1540,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub fn try_read_by_ref(&self, mut val: Value, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n+    pub fn try_read_by_ref(&mut self, mut val: Value, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n         // Convert to ByVal or ScalarPair if possible\n         if let Value::ByRef(ptr, align) = val {\n             if let Some(read_val) = self.try_read_value(ptr, align, ty)? {\n@@ -1550,8 +1550,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         Ok(val)\n     }\n \n-    pub fn try_read_value(&self, ptr: Scalar, ptr_align: Align, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n-        let layout = self.layout_of(ty)?;\n+    pub fn try_read_value(&mut self, ptr: Scalar, ptr_align: Align, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n+        let mut layout = self.layout_of(ty)?;\n         self.memory.check_align(ptr, ptr_align)?;\n \n         if layout.size.bytes() == 0 {\n@@ -1560,17 +1560,30 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n         let ptr = ptr.to_ptr()?;\n \n+        match layout.variants {\n+            layout::Variants::NicheFilling { .. } |\n+            layout::Variants::Tagged { .. } => {\n+                let variant_index = self.read_discriminant_as_variant_index(\n+                    Place::from_ptr(ptr, ptr_align),\n+                    layout.ty,\n+                )?;\n+                layout = layout.for_variant(&self, variant_index);\n+                trace!(\"variant layout: {:#?}\", layout);\n+            },\n+            layout::Variants::Single { .. } => {},\n+        }\n+\n         match layout.abi {\n             layout::Abi::Scalar(..) => {\n                 let scalar = self.memory.read_scalar(ptr, ptr_align, layout.size)?;\n                 Ok(Some(Value::Scalar(scalar)))\n             }\n             layout::Abi::ScalarPair(ref a, ref b) => {\n                 let (a, b) = (&a.value, &b.value);\n-                let (a_size, b_size) = (a.size(self), b.size(self));\n+                let (a_size, b_size) = (a.size(&self), b.size(&self));\n                 let a_ptr = ptr;\n-                let b_offset = a_size.abi_align(b.align(self));\n-                let b_ptr = ptr.offset(b_offset, self)?.into();\n+                let b_offset = a_size.abi_align(b.align(&self));\n+                let b_ptr = ptr.offset(b_offset, &self)?.into();\n                 let a_val = self.memory.read_scalar(a_ptr, ptr_align, a_size)?;\n                 let b_val = self.memory.read_scalar(b_ptr, ptr_align, b_size)?;\n                 Ok(Some(Value::ScalarPair(a_val, b_val)))"}, {"sha": "d18059fafd5ff16c2abd03826a2655992bfdb315", "filename": "src/test/ui/const-eval/simple_with_undef.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0b315f262d95a6a95292d638aa7697c21513db4/src%2Ftest%2Fui%2Fconst-eval%2Fsimple_with_undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b315f262d95a6a95292d638aa7697c21513db4/src%2Ftest%2Fui%2Fconst-eval%2Fsimple_with_undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fsimple_with_undef.rs?ref=d0b315f262d95a6a95292d638aa7697c21513db4", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+const PARSE_BOOL: Option<&'static str> = None;\n+static FOO: (Option<&str>, u32) = (PARSE_BOOL, 42);\n+\n+fn main() {}"}]}