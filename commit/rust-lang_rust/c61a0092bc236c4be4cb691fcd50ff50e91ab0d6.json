{"sha": "c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWEwMDkyYmMyMzZjNGJlNGNiNjkxZmNkNTBmZjUwZTkxYWIwZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-26T08:30:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T09:06:09Z"}, "message": "Fix orphan checking (cc #19470). (This is not a complete fix of #19470 because of the backwards compatibility feature gate.)\n\nThis is a [breaking-change]. The new rules require that, for an impl of a trait defined\nin some other crate, two conditions must hold:\n\n1. Some type must be local.\n2. Every type parameter must appear \"under\" some local type.\n\nHere are some examples that are legal:\n\n```rust\nstruct MyStruct<T> { ... }\n\n// Here `T` appears \"under' `MyStruct`.\nimpl<T> Clone for MyStruct<T> { }\n\n// Here `T` appears \"under' `MyStruct` as well. Note that it also appears\n// elsewhere.\nimpl<T> Iterator<T> for MyStruct<T> { }\n```\n\nHere is an illegal example:\n\n```rust\n// Here `U` does not appear \"under\" `MyStruct` or any other local type.\n// We call `U` \"uncovered\".\nimpl<T,U> Iterator<U> for MyStruct<T> { }\n```\n\nThere are a couple of ways to rewrite this last example so that it is\nlegal:\n\n1. In some cases, the uncovered type parameter (here, `U`) should be converted\n   into an associated type. This is however a non-local change that requires access\n   to the original trait. Also, associated types are not fully baked.\n2. Add `U` as a type parameter of `MyStruct`:\n   ```rust\n   struct MyStruct<T,U> { ... }\n   impl<T,U> Iterator<U> for MyStruct<T,U> { }\n   ```\n3. Create a newtype wrapper for `U`\n   ```rust\n   impl<T,U> Iterator<Wrapper<U>> for MyStruct<T,U> { }\n   ```\n\nBecause associated types are not fully baked, which in the case of the\n`Hash` trait makes adhering to this rule impossible, you can\ntemporarily disable this rule in your crate by using\n`#![feature(old_orphan_check)]`. Note that the `old_orphan_check`\nfeature will be removed before 1.0 is released.", "tree": {"sha": "6cd9026ea34772769ad89d5c78fe4d55cf8b98cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd9026ea34772769ad89d5c78fe4d55cf8b98cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "html_url": "https://github.com/rust-lang/rust/commit/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77723d24a831f9a062e210cc964e4849c23df116", "url": "https://api.github.com/repos/rust-lang/rust/commits/77723d24a831f9a062e210cc964e4849c23df116", "html_url": "https://github.com/rust-lang/rust/commit/77723d24a831f9a062e210cc964e4849c23df116"}], "stats": {"total": 266, "additions": 171, "deletions": 95}, "files": [{"sha": "d17a54ce6e56d8bb5f208b512f2a13f4ab42ecd8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -64,7 +64,8 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![no_std]\n-#![feature(lang_items, phase, unsafe_destructor, default_type_params)]\n+#![allow(unknown_features)]\n+#![feature(lang_items, phase, unsafe_destructor, default_type_params, old_orphan_check)]\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "b7307cfb7fb9b74a1f20c8de2cdeeb8663483fc6", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -25,6 +25,7 @@\n #![feature(macro_rules, default_type_params, phase, globs)]\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n #![no_std]\n \n #[phase(plugin, link)] extern crate core;"}, {"sha": "c9943562c888c288d4415c65595333cd8f21a70b", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -96,9 +96,9 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n }\n \n #[allow(deprecated)]\n-impl<'a, T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n-    fn equiv(&self, other: &V) -> bool {\n-        self.as_slice() == other.as_slice()\n+impl<'a, T: PartialEq> Equiv<[T]> for MaybeOwnedVector<'a, T> {\n+    fn equiv(&self, other: &[T]) -> bool {\n+        self.as_slice() == other\n     }\n }\n "}, {"sha": "cdc27244dde6ea6dde1650a75750bf0fd5944939", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -22,10 +22,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "4aff36c2624958764c83996cbe82af71f682efaa", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 82, "deletions": 71, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -14,10 +14,10 @@ use super::SelectionContext;\n use super::{Obligation, ObligationCause};\n use super::util;\n \n-use middle::subst;\n use middle::subst::Subst;\n use middle::ty::{mod, Ty};\n use middle::infer::InferCtxt;\n+use std::collections::HashSet;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::DUMMY_SP;\n@@ -52,9 +52,21 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n     selcx.evaluate_impl(impl2_def_id, &obligation)\n }\n \n-pub fn impl_is_local(tcx: &ty::ctxt,\n-                     impl_def_id: ast::DefId)\n-                     -> bool\n+#[allow(missing_copy_implementations)]\n+pub enum OrphanCheckErr {\n+    NoLocalInputType,\n+    UncoveredTypeParameter(ty::ParamTy),\n+}\n+\n+/// Checks the coherence orphan rules. `impl_def_id` should be the\n+/// def-id of a trait impl. To pass, either the trait must be local, or else\n+/// two conditions must be satisfied:\n+///\n+/// 1. At least one of the input types must involve a local type.\n+/// 2. All type parameters must be covered by a local type.\n+pub fn orphan_check(tcx: &ty::ctxt,\n+                    impl_def_id: ast::DefId)\n+                    -> Result<(), OrphanCheckErr>\n {\n     debug!(\"impl_is_local({})\", impl_def_id.repr(tcx));\n \n@@ -63,99 +75,74 @@ pub fn impl_is_local(tcx: &ty::ctxt,\n     let trait_ref = ty::impl_trait_ref(tcx, impl_def_id).unwrap();\n     debug!(\"trait_ref={}\", trait_ref.repr(tcx));\n \n-    // If the trait is local to the crate, ok.\n+    // If the *trait* is local to the crate, ok.\n     if trait_ref.def_id.krate == ast::LOCAL_CRATE {\n         debug!(\"trait {} is local to current crate\",\n                trait_ref.def_id.repr(tcx));\n-        return true;\n+        return Ok(());\n     }\n \n-    // Otherwise, at least one of the input types must be local to the\n-    // crate.\n-    trait_ref.input_types().iter().any(|&t| ty_is_local(tcx, t))\n+    // Check condition 1: at least one type must be local.\n+    if !trait_ref.input_types().iter().any(|&t| ty_reaches_local(tcx, t)) {\n+        return Err(OrphanCheckErr::NoLocalInputType);\n+    }\n+\n+    // Check condition 2: type parameters must be \"covered\" by a local type.\n+    let covered_params: HashSet<_> =\n+        trait_ref.input_types().iter()\n+                               .flat_map(|&t| type_parameters_covered_by_ty(tcx, t).into_iter())\n+                               .collect();\n+    let all_params: HashSet<_> =\n+        trait_ref.input_types().iter()\n+                               .flat_map(|&t| type_parameters_reachable_from_ty(t).into_iter())\n+                               .collect();\n+    for &param in all_params.difference(&covered_params) {\n+        return Err(OrphanCheckErr::UncoveredTypeParameter(param));\n+    }\n+\n+    return Ok(());\n+}\n+\n+fn ty_reaches_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.walk().any(|t| ty_is_local_constructor(tcx, t))\n }\n \n-pub fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    debug!(\"ty_is_local({})\", ty.repr(tcx));\n+fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    debug!(\"ty_is_local_constructor({})\", ty.repr(tcx));\n \n     match ty.sty {\n         ty::ty_bool |\n         ty::ty_char |\n         ty::ty_int(..) |\n         ty::ty_uint(..) |\n         ty::ty_float(..) |\n-        ty::ty_str(..) => {\n-            false\n-        }\n-\n-        ty::ty_unboxed_closure(..) => {\n-            // This routine is invoked on types specified by users as\n-            // part of an impl and hence an unboxed closure type\n-            // cannot appear.\n-            tcx.sess.bug(\"ty_is_local applied to unboxed closure type\")\n-        }\n-\n+        ty::ty_str(..) |\n         ty::ty_bare_fn(..) |\n-        ty::ty_closure(..) => {\n+        ty::ty_closure(..) |\n+        ty::ty_vec(..) |\n+        ty::ty_ptr(..) |\n+        ty::ty_rptr(..) |\n+        ty::ty_tup(..) |\n+        ty::ty_param(..) |\n+        ty::ty_projection(..) => {\n             false\n         }\n \n-        ty::ty_uniq(t) => {\n-            let krate = tcx.lang_items.owned_box().map(|d| d.krate);\n-            krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n-        }\n-\n-        ty::ty_vec(t, _) |\n-        ty::ty_ptr(ty::mt { ty: t, .. }) |\n-        ty::ty_rptr(_, ty::mt { ty: t, .. }) => {\n-            ty_is_local(tcx, t)\n-        }\n-\n-        ty::ty_tup(ref ts) => {\n-            ts.iter().any(|&t| ty_is_local(tcx, t))\n+        ty::ty_enum(def_id, _) |\n+        ty::ty_struct(def_id, _) => {\n+            def_id.krate == ast::LOCAL_CRATE\n         }\n \n-        ty::ty_enum(def_id, ref substs) |\n-        ty::ty_struct(def_id, ref substs) => {\n-            def_id.krate == ast::LOCAL_CRATE || {\n-                let variances = ty::item_variances(tcx, def_id);\n-                subst::ParamSpace::all().iter().any(|&space| {\n-                    substs.types.get_slice(space).iter().enumerate().any(\n-                        |(i, &t)| {\n-                            match *variances.types.get(space, i) {\n-                                ty::Bivariant => {\n-                                    // If Foo<T> is bivariant with respect to\n-                                    // T, then it doesn't matter whether T is\n-                                    // local or not, because `Foo<U>` for any\n-                                    // U will be a subtype of T.\n-                                    false\n-                                }\n-                                ty::Contravariant |\n-                                ty::Covariant |\n-                                ty::Invariant => {\n-                                    ty_is_local(tcx, t)\n-                                }\n-                            }\n-                        })\n-                })\n-            }\n+        ty::ty_uniq(_) => { // treat ~T like Box<T>\n+            let krate = tcx.lang_items.owned_box().map(|d| d.krate);\n+            krate == Some(ast::LOCAL_CRATE)\n         }\n \n         ty::ty_trait(ref tt) => {\n             tt.principal_def_id().krate == ast::LOCAL_CRATE\n         }\n \n-        // Type parameters may be bound to types that are not local to\n-        // the crate.\n-        ty::ty_param(..) => {\n-            false\n-        }\n-\n-        // Associated types could be anything, I guess.\n-        ty::ty_projection(..) => {\n-            false\n-        }\n-\n+        ty::ty_unboxed_closure(..) |\n         ty::ty_infer(..) |\n         ty::ty_open(..) |\n         ty::ty_err => {\n@@ -165,3 +152,27 @@ pub fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         }\n     }\n }\n+\n+fn type_parameters_covered_by_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                 ty: Ty<'tcx>)\n+                                 -> HashSet<ty::ParamTy>\n+{\n+    if ty_is_local_constructor(tcx, ty) {\n+        type_parameters_reachable_from_ty(ty)\n+    } else {\n+        ty.walk_children().flat_map(|t| type_parameters_covered_by_ty(tcx, t).into_iter()).collect()\n+    }\n+}\n+\n+/// All type parameters reachable from `ty`\n+fn type_parameters_reachable_from_ty<'tcx>(ty: Ty<'tcx>) -> HashSet<ty::ParamTy> {\n+    ty.walk()\n+        .filter_map(|t| {\n+            match t.sty {\n+                ty::ty_param(ref param_ty) => Some(param_ty.clone()),\n+                _ => None,\n+            }\n+        })\n+        .collect()\n+}\n+"}, {"sha": "fc2eb43c8a5ffec84396136837659a89ddc0571e", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -25,6 +25,8 @@ use syntax::codemap::{Span, DUMMY_SP};\n use util::ppaux::Repr;\n \n pub use self::error_reporting::report_fulfillment_errors;\n+pub use self::coherence::orphan_check;\n+pub use self::coherence::OrphanCheckErr;\n pub use self::fulfill::{FulfillmentContext, RegionObligation};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::normalize;\n@@ -245,15 +247,6 @@ pub struct VtableBuiltinData<N> {\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n-/// True if neither the trait nor self type is local. Note that `impl_def_id` must refer to an impl\n-/// of a trait, not an inherent impl.\n-pub fn is_orphan_impl(tcx: &ty::ctxt,\n-                      impl_def_id: ast::DefId)\n-                      -> bool\n-{\n-    !coherence::impl_is_local(tcx, impl_def_id)\n-}\n-\n /// True if there exist types that satisfy both of the two given impls.\n pub fn overlapping_impls(infcx: &InferCtxt,\n                          impl1_def_id: ast::DefId,"}, {"sha": "2bb99a7141f7098c8d74ad9375eb66ad193ce83e", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -32,6 +32,7 @@\n #![allow(unknown_features)]\n #![feature(globs, phase, macro_rules, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n #[phase(plugin, link)]\n extern crate log;"}, {"sha": "b886883c73ad21c989cf14d10f0d6e9e8c401f35", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -16,10 +16,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n #![allow(non_camel_case_types)]\n \n #[phase(plugin, link)] extern crate log;"}, {"sha": "5ffe9b2d6471acc1a2ceaa5d20a1f69f1ec073a9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -22,10 +22,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "44b27ec2e1200aae1c519987e771b81d53988ec0", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -18,7 +18,7 @@ use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;\n use syntax::visit;\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr, UserString};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n@@ -67,10 +67,27 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n             ast::ItemImpl(_, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n-                if traits::is_orphan_impl(self.tcx, def_id) {\n-                    span_err!(self.tcx.sess, item.span, E0117,\n-                              \"cannot provide an extension implementation \\\n-                               where both trait and type are not defined in this crate\");\n+                match traits::orphan_check(self.tcx, def_id) {\n+                    Ok(()) => { }\n+                    Err(traits::OrphanCheckErr::NoLocalInputType) => {\n+                        span_err!(self.tcx.sess, item.span, E0117,\n+                                  \"cannot provide an extension implementation \\\n+                                   where both trait and type are not defined in this crate\");\n+                    }\n+                    Err(traits::OrphanCheckErr::UncoveredTypeParameter(param_ty)) => {\n+                        if !self.tcx.sess.features.borrow().old_orphan_check {\n+                            self.tcx.sess.span_err(\n+                                item.span,\n+                                format!(\"type parameter `{}` must also appear as a type parameter \\\n+                                         of some type defined within this crate\",\n+                                        param_ty.user_string(self.tcx)).as_slice());\n+                            self.tcx.sess.span_note(\n+                                item.span,\n+                                format!(\"for a limited time, you can add \\\n+                                         `#![feature(old_orphan_check)]` to your crate \\\n+                                         to disable this rule\").as_slice());\n+                        }\n+                    }\n                 }\n             }\n             _ => {"}, {"sha": "e1d9ebd7aa270cdfb5b641325a7de6d69c19b9ac", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -20,6 +20,7 @@\n #![allow(unknown_features)]\n #![feature(globs, macro_rules, phase, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "684856ae33b27f3dbebac68f05f397937883cf4c", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -81,7 +81,7 @@\n //! use serialize::json;\n //!\n //! // Automatically generate `Decodable` and `Encodable` trait implementations\n-//! #[deriving(Decodable, Encodable)]\n+//! #[deriving(RustcDecodable, RustcEncodable)]\n //! pub struct TestStruct  {\n //!     data_int: u8,\n //!     data_str: String,"}, {"sha": "9e8fba21df5dcd20faf6252d48e29956ba6cd195", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -107,6 +107,7 @@\n #![feature(macro_rules, globs, linkage, thread_local, asm)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "23c4ee8f64bc128570cbca581c809d366abad909", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -77,8 +77,11 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", Accepted),\n \n-    // A way to temporary opt out of opt in copy. This will *never* be accepted.\n-    (\"opt_out_copy\", Active),\n+    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    (\"opt_out_copy\", Deprecated),\n+\n+    // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n+    (\"old_orphan_check\", Deprecated),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -91,6 +94,10 @@ enum Status {\n     /// currently being considered for addition/removal.\n     Active,\n \n+    /// Represents a feature gate that is temporarily enabling deprecated behavior.\n+    /// This gate will never be accepted.\n+    Deprecated,\n+\n     /// Represents a feature which has since been removed (it was once Active)\n     Removed,\n \n@@ -108,6 +115,7 @@ pub struct Features {\n     pub visible_private_types: bool,\n     pub quote: bool,\n     pub opt_out_copy: bool,\n+    pub old_orphan_check: bool,\n }\n \n impl Features {\n@@ -120,6 +128,7 @@ impl Features {\n             visible_private_types: false,\n             quote: false,\n             opt_out_copy: false,\n+            old_orphan_check: false,\n         }\n     }\n }\n@@ -442,7 +451,16 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n                     };\n                     match KNOWN_FEATURES.iter()\n                                         .find(|& &(n, _)| name == n) {\n-                        Some(&(name, Active)) => { cx.features.push(name); }\n+                        Some(&(name, Active)) => {\n+                            cx.features.push(name);\n+                        }\n+                        Some(&(name, Deprecated)) => {\n+                            cx.features.push(name);\n+                            span_handler.span_warn(\n+                                mi.span,\n+                                \"feature is deprecated and will only be available \\\n+                                 for a limited time, please rewrite code that relies on it\");\n+                        }\n                         Some(&(_, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n                         }\n@@ -469,6 +487,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n         opt_out_copy: cx.has_feature(\"opt_out_copy\"),\n+        old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n     },\n     unknown_features)\n }"}, {"sha": "7a6824ac27c658cbfc256f664376c42faa76c071", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -26,6 +26,7 @@\n #![feature(macro_rules, globs, default_type_params, phase, slicing_syntax)]\n #![feature(quote, unsafe_destructor)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "e61de01e0ac0300eca94b4afd7b3c1ef34ae6358", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -31,8 +31,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(asm, macro_rules, phase, globs, slicing_syntax)]\n #![feature(unboxed_closures, default_type_params)]\n+#![feature(old_orphan_check)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "b5976c46a7df5c143bd81659bf0147b8ac9d5336", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -20,7 +20,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+\n+#![allow(unknown_features)]\n #![feature(phase, globs)]\n+#![feature(old_orphan_check)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n "}, {"sha": "4aae8fa87daffbd7e6abcd8eb6e1ccf4ddbb6b4f", "filename": "src/test/compile-fail/opt-out-copy-bad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![feature(opt_out_copy)]\n+//~^ WARNING feature is deprecated\n+//~| WARNING feature is deprecated\n \n // Test that when using the `opt-out-copy` feature we still consider\n // destructors to be non-movable"}, {"sha": "a24ae22b224a3b223567e30fe2885d2784176091", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n \n use serialize::{Encodable, Decodable};"}, {"sha": "f5df1940fa47ea306301260afe69433e495da084", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -11,6 +11,8 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[deriving(Encodable, Decodable)]`\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n \n use std::cell::{Cell, RefCell};"}, {"sha": "9ece4af278bdac2985db3030bf515619ea19943d", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n extern crate rand;\n "}, {"sha": "10370ba22c83605d4ddcd4eafceb6acbb78f6363", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate rbml;\n extern crate serialize;\n "}, {"sha": "39b4a726d4514557222b1851d3efd903bbdedf2d", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n \n extern crate serialize;\n "}, {"sha": "72123b8e5a5ef7dc9afcb059926356870dfef86b", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// If `Index` used an associated type for its output, this test would\n+// work more smoothly.\n+#![feature(old_orphan_check)]\n+\n struct Mat<T> { data: Vec<T>, cols: uint, }\n \n impl<T> Mat<T> {"}, {"sha": "ac200c81143b11e42e3fc47896ebabd388b4778c", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// If `Mul` used an associated type for its output, this test would\n+// work more smoothly.\n+#![feature(old_orphan_check)]\n+\n struct Vec2 {\n     x: f64,\n     y: f64"}, {"sha": "96420f17deb7d2c16f1b191d808193ad0e12d721", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61a0092bc236c4be4cb691fcd50ff50e91ab0d6/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=c61a0092bc236c4be4cb691fcd50ff50e91ab0d6", "patch": "@@ -14,9 +14,9 @@\n \n use std::ops::Fn;\n \n-struct G;\n+struct G<A>;\n \n-impl<'a, A: Add<int, int>> Fn<(A,), int> for G {\n+impl<'a, A: Add<int, int>> Fn<(A,), int> for G<A> {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> int {\n         arg.add(1)\n     }"}]}