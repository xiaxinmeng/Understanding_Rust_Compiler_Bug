{"sha": "4f25c618ad1873a5616358a2b023888c071deaf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMjVjNjE4YWQxODczYTU2MTYzNThhMmIwMjM4ODhjMDcxZGVhZjY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-20T22:50:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-24T01:06:34Z"}, "message": "Rework raw ident suggestions\n\nUse heuristics to determine whethersuggesting raw identifiers is\nappropriate.\n\nAccount for raw identifiers when printing a path in a `use` suggestion.", "tree": {"sha": "a5be283267f3de043fcbd5514369825a5d4dca62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5be283267f3de043fcbd5514369825a5d4dca62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f25c618ad1873a5616358a2b023888c071deaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f25c618ad1873a5616358a2b023888c071deaf6", "html_url": "https://github.com/rust-lang/rust/commit/4f25c618ad1873a5616358a2b023888c071deaf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f25c618ad1873a5616358a2b023888c071deaf6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f11759d38c70d3df67135f88a682701c1cf9762a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f11759d38c70d3df67135f88a682701c1cf9762a", "html_url": "https://github.com/rust-lang/rust/commit/f11759d38c70d3df67135f88a682701c1cf9762a"}], "stats": {"total": 109, "additions": 73, "deletions": 36}, "files": [{"sha": "e3a17c5c5e3b257e1ab93ef60887c1efaf0a3646", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -225,8 +225,21 @@ impl<'a> Parser<'a> {\n             self.token.span,\n             &format!(\"expected identifier, found {}\", self.this_token_descr()),\n         );\n+        let valid_follow = &[\n+            TokenKind::Eq,\n+            TokenKind::Colon,\n+            TokenKind::Comma,\n+            TokenKind::Semi,\n+            TokenKind::ModSep,\n+            TokenKind::OpenDelim(token::DelimToken::Brace),\n+            TokenKind::OpenDelim(token::DelimToken::Paren),\n+            TokenKind::CloseDelim(token::DelimToken::Brace),\n+            TokenKind::CloseDelim(token::DelimToken::Paren),\n+        ];\n         if let token::Ident(name, false) = self.token.kind {\n-            if Ident::new(name, self.token.span).is_raw_guess() {\n+            if Ident::new(name, self.token.span).is_raw_guess() &&\n+                self.look_ahead(1, |t| valid_follow.contains(&t.kind))\n+            {\n                 err.span_suggestion(\n                     self.token.span,\n                     \"you can escape reserved keywords to use them as identifiers\","}, {"sha": "4e78dfa3e727382063049df322348f1aab735c35", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -2893,15 +2893,16 @@ fn names_to_string(names: &[Name]) -> String {\n         if i > 0 {\n             result.push_str(\"::\");\n         }\n+        if name.is_used_keyword() && name.can_be_raw() {\n+            result.push_str(\"r#\");\n+        }\n         result.push_str(&name.as_str());\n     }\n     result\n }\n \n fn path_names_to_string(path: &Path) -> String {\n-    names_to_string(&path.segments.iter()\n-                        .map(|seg| seg.ident.name)\n-                        .collect::<Vec<_>>())\n+    names_to_string(&path.segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())\n }\n \n /// A somewhat inefficient routine to obtain the name of a module."}, {"sha": "1e4bfe1b4caafbc2aabbd4522849085fc6f51aa7", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -1013,7 +1013,15 @@ pub mod sym {\n }\n \n impl Symbol {\n-    fn is_used_keyword_2018(self) -> bool {\n+    pub fn is_used_keyword(self) -> bool {\n+        self.is_used_keyword_2015() || self.is_used_keyword_2018()\n+    }\n+\n+    pub fn is_used_keyword_2015(self) -> bool {\n+        self >= kw::As && self <= kw::While\n+    }\n+\n+    pub fn is_used_keyword_2018(self) -> bool {\n         self >= kw::Async && self <= kw::Dyn\n     }\n \n@@ -1057,7 +1065,7 @@ impl Ident {\n     /// Returns `true` if the token is a keyword used in the language.\n     pub fn is_used_keyword(self) -> bool {\n         // Note: `span.edition()` is relatively expensive, don't call it unless necessary.\n-        self.name >= kw::As && self.name <= kw::While ||\n+        self.name.is_used_keyword_2015() ||\n         self.name.is_used_keyword_2018() && self.span.rust_2018()\n     }\n "}, {"sha": "7ed822a5cd5a19338b00cb4b48c8f27df08c1da6", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -3,11 +3,6 @@ error: expected identifier, found keyword `async`\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL | pub const r#async fn x() {}\n-   |           ^^^^^^^\n \n error: expected `:`, found keyword `fn`\n   --> $DIR/no-const-async.rs:5:17"}, {"sha": "aa0fa0e3c0a5e2839bd204f7e154d825006c3bb5", "filename": "src/test/ui/parser/associated-types-project-from-hrtb-explicit.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassociated-types-project-from-hrtb-explicit.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -3,11 +3,6 @@ error: expected identifier, found keyword `for`\n    |\n LL | fn foo2<I>(x: <I as for<'x> Foo<&'x isize>>::A)\n    |                     ^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL | fn foo2<I>(x: <I as r#for<'x> Foo<&'x isize>>::A)\n-   |                     ^^^^^\n \n error: expected one of `::` or `>`, found `Foo`\n   --> $DIR/associated-types-project-from-hrtb-explicit.rs:10:29"}, {"sha": "15ce94a6d00fa955d853aa20fa6f577a7c9dab9a", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-struct.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-struct.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -12,11 +12,6 @@ error: expected identifier, found keyword `trait`\n    |\n LL | trait T {\n    | ^^^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL | r#trait T {\n-   | ^^^^^^^\n \n error: expected `:`, found `T`\n   --> $DIR/missing-close-brace-in-struct.rs:4:7"}, {"sha": "7de2c730a70696ee86fd1aca3c3d9803bb0fda22", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -3,11 +3,6 @@ error: expected identifier, found keyword `let`\n    |\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL |     r#let foo: (),\n-   |     ^^^^^\n \n error: expected `:`, found `foo`\n   --> $DIR/removed-syntax-field-let.rs:2:9"}, {"sha": "192ab5eb7f9654142b42c13b78208ca5af187c92", "filename": "src/test/ui/parser/use-as-where-use-ends-with-mod-sep.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fuse-as-where-use-ends-with-mod-sep.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -3,11 +3,6 @@ error: expected identifier, found keyword `as`\n    |\n LL | use std::any:: as foo;\n    |                ^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL | use std::any:: r#as foo;\n-   |                ^^^^\n \n error: expected one of `::`, `;`, or `as`, found `foo`\n   --> $DIR/use-as-where-use-ends-with-mod-sep.rs:1:19"}, {"sha": "6c01383d9610d07fb5d4b3faf39b681be6911b38", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -0,0 +1,9 @@\n+mod foo {\n+    pub fn r#let() {}\n+    pub fn break() {} //~ ERROR expected identifier, found keyword `break`\n+}\n+\n+fn main() {\n+    foo::let(); //~ ERROR expected identifier, found keyword `let`\n+    r#break(); //~ ERROR cannot find function `break` in this scope\n+}"}, {"sha": "58eb87c00a4112d5e8c94eddcadca2cd05abce69", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -0,0 +1,36 @@\n+error: expected identifier, found keyword `break`\n+  --> $DIR/raw-name-use-suggestion.rs:3:12\n+   |\n+LL |     pub fn break() {}\n+   |            ^^^^^ expected identifier, found keyword\n+   |\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     pub fn r#break() {}\n+   |            ^^^^^^^\n+\n+error: expected identifier, found keyword `let`\n+  --> $DIR/raw-name-use-suggestion.rs:7:10\n+   |\n+LL |     foo::let();\n+   |          ^^^ expected identifier, found keyword\n+   |\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL |     foo::r#let();\n+   |          ^^^^^\n+\n+error[E0425]: cannot find function `break` in this scope\n+  --> $DIR/raw-name-use-suggestion.rs:8:5\n+   |\n+LL |     r#break();\n+   |     ^^^^^^^ not found in this scope\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use foo::r#break;\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "9b4fe2c1205dbca6bbd6fb1ea6d8d123b0405208", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f25c618ad1873a5616358a2b023888c071deaf6/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=4f25c618ad1873a5616358a2b023888c071deaf6", "patch": "@@ -6,11 +6,6 @@ LL |     let try_result: Option<_> = try {\n LL |\n LL |         let x = 5;\n    |         ^^^ expected identifier, found keyword\n-   |\n-help: you can escape reserved keywords to use them as identifiers\n-   |\n-LL |         r#let x = 5;\n-   |         ^^^^^\n \n error[E0574]: expected struct, variant or union type, found macro `try`\n   --> $DIR/try-block-in-edition2015.rs:4:33"}]}