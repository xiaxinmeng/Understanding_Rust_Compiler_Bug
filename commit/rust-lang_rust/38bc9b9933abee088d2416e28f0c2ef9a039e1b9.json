{"sha": "38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YmM5Yjk5MzNhYmVlMDg4ZDI0MTZlMjhmMGMyZWY5YTAzOWUxYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T11:24:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T11:24:54Z"}, "message": "Auto merge of #85975 - the8472:revert-take-tra, r=scottmcm\n\nRevert \"implement TrustedRandomAccess for Take iterator adapter\"\n\nThis reverts commit 37a5b515e9c36ee3f57d9e0d7db7efce2fb02195 (#83990).\n\nThe original change unintentionally caused side-effects from certain iterator chains combining `take`, `zip` and `next_back()` to be omitted which is observable by user code and thus likely a breaking change\n\nTechnically one could declare it not a breaking change since `Zip`'s API contract is silent about about its backwards iteration behavior but on the other hand there is nothing in the stable Iterator API that could justify the currently observable behavior. And either way, this impact wasn't noticed or discussed in the original PR.\n\nFixes #85969", "tree": {"sha": "a13adaab6fef563f1bf25c5999c5ee90dfd32c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a13adaab6fef563f1bf25c5999c5ee90dfd32c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "html_url": "https://github.com/rust-lang/rust/commit/38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bc9b9933abee088d2416e28f0c2ef9a039e1b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b540698165f2172dac8562bde84116f65d13bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b540698165f2172dac8562bde84116f65d13bb", "html_url": "https://github.com/rust-lang/rust/commit/c4b540698165f2172dac8562bde84116f65d13bb"}, {"sha": "dbc43ece101c875282d3ac955a1c1d8df3e68322", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc43ece101c875282d3ac955a1c1d8df3e68322", "html_url": "https://github.com/rust-lang/rust/commit/dbc43ece101c875282d3ac955a1c1d8df3e68322"}], "stats": {"total": 23, "additions": 1, "deletions": 22}, "files": [{"sha": "beda8c32c6bdc70473945bd70b6b73ee458c4a39", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/38bc9b9933abee088d2416e28f0c2ef9a039e1b9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bc9b9933abee088d2416e28f0c2ef9a039e1b9/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=38bc9b9933abee088d2416e28f0c2ef9a039e1b9", "patch": "@@ -1,8 +1,5 @@\n use crate::cmp;\n-use crate::iter::{\n-    adapters::zip::try_get_unchecked, adapters::SourceIter, FusedIterator, InPlaceIterable,\n-    TrustedLen, TrustedRandomAccess,\n-};\n+use crate::iter::{adapters::SourceIter, FusedIterator, InPlaceIterable, TrustedLen};\n use crate::ops::{ControlFlow, Try};\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -114,15 +111,6 @@ where\n \n         self.try_fold(init, ok(fold)).unwrap()\n     }\n-\n-    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <I as Iterator>::Item\n-    where\n-        Self: TrustedRandomAccess,\n-    {\n-        // SAFETY: the caller must uphold the contract for\n-        // `Iterator::__iterator_get_unchecked`.\n-        unsafe { try_get_unchecked(&mut self.iter, idx) }\n-    }\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n@@ -219,12 +207,3 @@ impl<I> FusedIterator for Take<I> where I: FusedIterator {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-unsafe impl<I> TrustedRandomAccess for Take<I>\n-where\n-    I: TrustedRandomAccess,\n-{\n-    const MAY_HAVE_SIDE_EFFECT: bool = I::MAY_HAVE_SIDE_EFFECT;\n-}"}]}