{"sha": "c779f4e89c0abe949195a28418be11fddf77b5a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NzlmNGU4OWMwYWJlOTQ5MTk1YTI4NDE4YmUxMWZkZGY3N2I1YTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-30T19:57:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-30T19:57:27Z"}, "message": "Rollup merge of #62228 - varkor:must_use-trait-in-box, r=Centril\n\nExtend the #[must_use] lint to boxed types\n\nFixes https://github.com/rust-lang/rust/issues/55506#issuecomment-506940181 (cc @Nemo157).\n\nThis should have been included as part of https://github.com/rust-lang/rust/pull/55663, but was overlooked.", "tree": {"sha": "048167f90014ffc91740a16d4be6ba687acab210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048167f90014ffc91740a16d4be6ba687acab210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c779f4e89c0abe949195a28418be11fddf77b5a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdGRQnCRBK7hj4Ov3rIwAAdHIIAHOrFckfyqMS0Lc5WAC0rLc+\nybASlRyP09d/iljbVFejWGiFpRFrf9y4NpaCeIZtWGd8l1euEnj58QTAneZuCiw7\nd2G1wdYtC7q2v4ABIuyOvwtsHIanNloAmKP62+2pptPbIj0XSpPIKTJiVhzBYV4d\n0dDCgOo4zkKQ5rJERenIzXK0uGNMSYP/mIs7OF+lxHK8jR2xMwp61WCVOtcv4ywg\n8OqJZjzEsYgQ0mDN3eeXV3Dj4Ktle8qEl6wnk8HAlD6/jXOKkde0IgV7d16nM5ms\nVyE1QbgGtuDAK1mPTCZUAj3ve3Orp0CHcYTs8Moxsk+qW2Q8Ef0bpCrIuznXnsA=\n=r3M8\n-----END PGP SIGNATURE-----\n", "payload": "tree 048167f90014ffc91740a16d4be6ba687acab210\nparent 1683bb7771640ec534c97d99fdc853d3090a30bf\nparent 400fd6055fea43ccd89769a4ddb85586c70bf8ae\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561924647 +0200\ncommitter GitHub <noreply@github.com> 1561924647 +0200\n\nRollup merge of #62228 - varkor:must_use-trait-in-box, r=Centril\n\nExtend the #[must_use] lint to boxed types\n\nFixes https://github.com/rust-lang/rust/issues/55506#issuecomment-506940181 (cc @Nemo157).\n\nThis should have been included as part of https://github.com/rust-lang/rust/pull/55663, but was overlooked.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c779f4e89c0abe949195a28418be11fddf77b5a3", "html_url": "https://github.com/rust-lang/rust/commit/c779f4e89c0abe949195a28418be11fddf77b5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c779f4e89c0abe949195a28418be11fddf77b5a3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1683bb7771640ec534c97d99fdc853d3090a30bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1683bb7771640ec534c97d99fdc853d3090a30bf", "html_url": "https://github.com/rust-lang/rust/commit/1683bb7771640ec534c97d99fdc853d3090a30bf"}, {"sha": "400fd6055fea43ccd89769a4ddb85586c70bf8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/400fd6055fea43ccd89769a4ddb85586c70bf8ae", "html_url": "https://github.com/rust-lang/rust/commit/400fd6055fea43ccd89769a4ddb85586c70bf8ae"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "3fbd7db765b706b74c91061e59f1471afd7403cf", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\");\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\");\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -133,6 +133,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n+            descr_pre_path: &str,\n             descr_post_path: &str,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n@@ -142,14 +143,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             }\n \n             match ty.sty {\n-                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", descr_post_path),\n+                ty::Adt(..) if ty.is_box() => {\n+                    let boxed_ty = ty.boxed_ty();\n+                    let descr_pre_path = &format!(\"{}boxed \", descr_pre_path);\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre_path, descr_post_path)\n+                }\n+                ty::Adt(def, _) => {\n+                    check_must_use_def(cx, def.did, span, descr_pre_path, descr_post_path)\n+                }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"implementer of \", \"\") {\n+                            let descr_pre = &format!(\"{}implementer of \", descr_pre_path);\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post_path) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -162,7 +171,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for predicate in binder.skip_binder().iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"\", \" trait object\") {\n+                            let descr_post = &format!(\" trait object{}\", descr_post_path);\n+                            if check_must_use_def(cx, def_id, span, descr_pre_path, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -181,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                         let descr_post_path = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_post_path) {\n+                        if check_must_use_ty(cx, ty, expr, span, descr_pre_path, descr_post_path) {\n                             has_emitted = true;\n                         }\n                     }"}, {"sha": "797d85e941d96d2ee430039fd6f2f197e435e2aa", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -103,7 +103,9 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n         HOOK_LOCK.write_unlock();\n \n         if let Hook::Custom(ptr) = old_hook {\n-            Box::from_raw(ptr);\n+            #[allow(unused_must_use)] {\n+                Box::from_raw(ptr);\n+            }\n         }\n     }\n }"}, {"sha": "111fb8aa506a4b91116101b55d1a42fce064d135", "filename": "src/test/run-pass/issues/issue-30530.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -12,7 +12,9 @@ pub enum Handler {\n }\n \n fn main() {\n-    take(Handler::Default, Box::new(main));\n+    #[allow(unused_must_use)] {\n+        take(Handler::Default, Box::new(main));\n+    }\n }\n \n #[inline(never)]"}, {"sha": "6badd203842ffec55d36c7e8aa8d7a5efb6277f7", "filename": "src/test/run-pass/panics/panic-handler-flail-wildly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n+\n #![allow(stable_features)]\n+#![allow(unused_must_use)]\n \n // ignore-emscripten no threads support\n "}, {"sha": "0aa751443a0804f482881df0108e432a7915f466", "filename": "src/test/ui/lint/must_use-trait.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -17,6 +17,23 @@ fn get_critical() -> impl NotSoCritical + Critical + DecidedlyUnimportant {\n     Anon {}\n }\n \n+fn get_boxed_critical() -> Box<dyn Critical> {\n+    Box::new(Anon {})\n+}\n+\n+fn get_nested_boxed_critical() -> Box<Box<dyn Critical>> {\n+    Box::new(Box::new(Anon {}))\n+}\n+\n+fn get_critical_tuple() -> (u32, Box<dyn Critical>, impl Critical, ()) {\n+    (0, get_boxed_critical(), get_critical(), ())\n+}\n+\n fn main() {\n     get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n+    get_boxed_critical(); //~ ERROR unused boxed `Critical` trait object that must be used\n+    get_nested_boxed_critical();\n+    //~^ ERROR unused boxed boxed `Critical` trait object that must be used\n+    get_critical_tuple(); //~ ERROR unused boxed `Critical` trait object in tuple element 1\n+    //~^ ERROR unused implementer of `Critical` in tuple element 2\n }"}, {"sha": "be74362e29d62b720dad2da64460f01c15bb1128", "filename": "src/test/ui/lint/must_use-trait.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c779f4e89c0abe949195a28418be11fddf77b5a3/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -1,5 +1,5 @@\n error: unused implementer of `Critical` that must be used\n-  --> $DIR/must_use-trait.rs:21:5\n+  --> $DIR/must_use-trait.rs:33:5\n    |\n LL |     get_critical();\n    |     ^^^^^^^^^^^^^^^\n@@ -10,5 +10,29 @@ note: lint level defined here\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unused boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:34:5\n+   |\n+LL |     get_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused boxed boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:35:5\n+   |\n+LL |     get_nested_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused boxed `Critical` trait object in tuple element 1 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused implementer of `Critical` in tuple element 2 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "72b2e1045d642c517347c421b1db92e34c22a70d", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=c779f4e89c0abe949195a28418be11fddf77b5a3", "patch": "@@ -1 +1 @@\n-Subproject commit 945f007c0d305c3ec069b5e5d911ef783f6d70e7\n+Subproject commit 72b2e1045d642c517347c421b1db92e34c22a70d"}]}