{"sha": "57757a8051101eb64eb7a330d7c673422e06a57b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NzU3YTgwNTExMDFlYjY0ZWI3YTMzMGQ3YzY3MzQyMmUwNmE1N2I=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-26T07:19:26Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-26T07:25:32Z"}, "message": "extra::ringbuf: Implement method `.swap(uint, uint)` just like vector\n\nRingBuf::swap(&mut self, i, j) swaps the element at indices `i` and `j`\nif both elements are in bounds, otherwise it fails.", "tree": {"sha": "e05530055e219f0726c5a06ca9ac19492b0f9919", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05530055e219f0726c5a06ca9ac19492b0f9919"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57757a8051101eb64eb7a330d7c673422e06a57b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57757a8051101eb64eb7a330d7c673422e06a57b", "html_url": "https://github.com/rust-lang/rust/commit/57757a8051101eb64eb7a330d7c673422e06a57b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57757a8051101eb64eb7a330d7c673422e06a57b/comments", "author": null, "committer": null, "parents": [{"sha": "5adfa1038787cb042ca5bbe634082201d71a3b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adfa1038787cb042ca5bbe634082201d71a3b72", "html_url": "https://github.com/rust-lang/rust/commit/5adfa1038787cb042ca5bbe634082201d71a3b72"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "1e3962914057a5e1785c0f71711cab012dc36b2e", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57757a8051101eb64eb7a330d7c673422e06a57b/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57757a8051101eb64eb7a330d7c673422e06a57b/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=57757a8051101eb64eb7a330d7c673422e06a57b", "patch": "@@ -143,6 +143,19 @@ impl<T> RingBuf<T> {\n         }\n     }\n \n+    /// Swap elements at indices `i` and `j`\n+    ///\n+    /// `i` and `j` may be equal.\n+    ///\n+    /// Fails if there is no element with the given index\n+    pub fn swap(&mut self, i: uint, j: uint) {\n+        assert!(i < self.len());\n+        assert!(j < self.len());\n+        let ri = self.raw_index(i);\n+        let rj = self.raw_index(j);\n+        self.elts.swap(ri, rj);\n+    }\n+\n     /// Return index in underlying vec for a given logical element index\n     fn raw_index(&self, idx: uint) -> uint {\n         raw_index(self.lo, self.elts.len(), idx)\n@@ -604,6 +617,14 @@ mod tests {\n         assert_eq!(d.elts.capacity(), 64);\n     }\n \n+    #[test]\n+    fn test_swap() {\n+        let mut d: RingBuf<int> = range(0, 5).collect();\n+        d.pop_front();\n+        d.swap(0, 3);\n+        assert_eq!(d.iter().map(|&x|x).collect::<~[int]>(), ~[4, 2, 3, 1]);\n+    }\n+\n     #[test]\n     fn test_iter() {\n         let mut d = RingBuf::new();"}]}