{"sha": "88b99224c1f59bef4f62aab5120f08dbd3c011c9", "node_id": "C_kwDOAAsO6NoAKDg4Yjk5MjI0YzFmNTliZWY0ZjYyYWFiNTEyMGYwOGRiZDNjMDExYzk", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-03-03T03:33:43Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-03-03T03:33:43Z"}, "message": "add some examples to comments in mbe code", "tree": {"sha": "b11d33707059c115a43fc3be6c9d4f9a2f339e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11d33707059c115a43fc3be6c9d4f9a2f339e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b99224c1f59bef4f62aab5120f08dbd3c011c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b99224c1f59bef4f62aab5120f08dbd3c011c9", "html_url": "https://github.com/rust-lang/rust/commit/88b99224c1f59bef4f62aab5120f08dbd3c011c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b99224c1f59bef4f62aab5120f08dbd3c011c9/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42d846add941a26bd254911e16f02c4a3f9346f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42d846add941a26bd254911e16f02c4a3f9346f", "html_url": "https://github.com/rust-lang/rust/commit/c42d846add941a26bd254911e16f02c4a3f9346f"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "a419612e315df2fea566a58fe2f299a007ef90e5", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/88b99224c1f59bef4f62aab5120f08dbd3c011c9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b99224c1f59bef4f62aab5120f08dbd3c011c9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=88b99224c1f59bef4f62aab5120f08dbd3c011c9", "patch": "@@ -345,6 +345,38 @@ fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 't\n /// token tree. The depth of the `NamedMatch` structure will therefore depend\n /// only on the nesting depth of `ast::TTSeq`s in the originating\n /// token tree it was derived from.\n+///\n+/// In layman's terms: `NamedMatch` will form a tree representing nested matches of a particular\n+/// meta variable. For example, if we are matching the following macro against the following\n+/// invocation...\n+///\n+/// ```rust\n+/// macro_rules! foo {\n+///   ($($($x:ident),+);+) => {}\n+/// }\n+///\n+/// foo!(a, b, c, d; a, b, c, d, e);\n+/// ```\n+///\n+/// Then, the tree will have the following shape:\n+///\n+/// ```rust\n+/// MatchedSeq([\n+///   MatchedSeq([\n+///     MatchedNonterminal(a),\n+///     MatchedNonterminal(b),\n+///     MatchedNonterminal(c),\n+///     MatchedNonterminal(d),\n+///   ]),\n+///   MatchedSeq([\n+///     MatchedNonterminal(a),\n+///     MatchedNonterminal(b),\n+///     MatchedNonterminal(c),\n+///     MatchedNonterminal(d),\n+///     MatchedNonterminal(e),\n+///   ])\n+/// ])\n+/// ```\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n     MatchedSeq(Lrc<NamedMatchVec>),"}, {"sha": "54000527c15b9bf240b240e8ddd87ec92bbb0911", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88b99224c1f59bef4f62aab5120f08dbd3c011c9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b99224c1f59bef4f62aab5120f08dbd3c011c9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=88b99224c1f59bef4f62aab5120f08dbd3c011c9", "patch": "@@ -358,6 +358,12 @@ impl LockstepIterSize {\n /// Note that if `repeats` does not match the exact correct depth of a meta-var,\n /// `lookup_cur_matched` will return `None`, which is why this still works even in the presence of\n /// multiple nested matcher sequences.\n+///\n+/// Example: `$($($x $y)+*);+` -- we need to make sure that `x` and `y` repeat the same amount as\n+/// each other at the given depth when the macro was invoked. If they don't it might mean they were\n+/// declared at unequal depths or there was a compile bug. For example, if we have 3 repetitions of\n+/// the outer sequence and 4 repetitions of the inner sequence for `x`, we should have the same for\n+/// `y`; otherwise, we can't transcribe them both at the given depth.\n fn lockstep_iter_size(\n     tree: &mbe::TokenTree,\n     interpolations: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,"}]}