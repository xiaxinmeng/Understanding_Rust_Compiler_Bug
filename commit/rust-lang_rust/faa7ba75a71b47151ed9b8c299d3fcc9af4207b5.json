{"sha": "faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYTdiYTc1YTcxYjQ3MTUxZWQ5YjhjMjk5ZDNmY2M5YWY0MjA3YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-31T08:06:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-31T08:06:40Z"}, "message": "auto merge of #14553 : reem/rust/nuke-owned-vectors, r=alexcrichton\n\nI removed all remaining deprecated owned vectors from the docs. All example tests pass.", "tree": {"sha": "be5729412c9921961cdd4bc35c59107c6475acf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5729412c9921961cdd4bc35c59107c6475acf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "html_url": "https://github.com/rust-lang/rust/commit/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92c43dba501be7df23a38842de2b12212212f49f", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c43dba501be7df23a38842de2b12212212f49f", "html_url": "https://github.com/rust-lang/rust/commit/92c43dba501be7df23a38842de2b12212212f49f"}, {"sha": "1959925e514d9ecd5149435a3530dbdf0191f117", "url": "https://api.github.com/repos/rust-lang/rust/commits/1959925e514d9ecd5149435a3530dbdf0191f117", "html_url": "https://github.com/rust-lang/rust/commit/1959925e514d9ecd5149435a3530dbdf0191f117"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "1c3352a829c07ab6ec50d31858be0f5cdff4792b", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "patch": "@@ -53,9 +53,8 @@ To return a Borrowed String Slice (&str) use the str helper function\n ~~~\n use std::str;\n \n-let bytes = ~[104u8,105u8];\n-let x: Option<&str> = str::from_utf8(bytes);\n-let y: &str = x.unwrap();\n+let bytes = &[104u8,105u8];\n+let x: &str = str::from_utf8(bytes).unwrap();\n ~~~\n \n To return an Owned String use the str helper function\n@@ -136,7 +135,7 @@ let index: Option<uint> = str.find_str(\"rand\");\n The [`Container`](../std/container/trait.Container.html) trait provides the `len` method.\n \n ~~~\n-let u: ~[u32] = ~[0, 1, 2];\n+let u: Vec<u32> = vec![0, 1, 2];\n let v: &[u32] = &[0, 1, 2, 3];\n let w: [u32, .. 5] = [0, 1, 2, 3, 4];\n \n@@ -148,7 +147,7 @@ println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len()); // 3, 4, 5\n Use the [`iter`](../std/vec/trait.ImmutableVector.html#tymethod.iter) method.\n \n ~~~\n-let values: ~[int] = ~[1, 2, 3, 4, 5];\n+let values: Vec<int> = vec![1, 2, 3, 4, 5];\n for value in values.iter() {  // value: &int\n     println!(\"{}\", *value);\n }"}, {"sha": "b86a6aa1b619c5a239fe281755f6b6a46c55aa3a", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "patch": "@@ -85,7 +85,7 @@ To take as an argument a fragment of Rust code, write `$` followed by a name\n   `foo`.)\n * `expr` (an expression. Examples: `2 + 2`; `if true then { 1 } else { 2 }`;\n   `f(42)`.)\n-* `ty` (a type. Examples: `int`, `~[(char, String)]`, `&T`.)\n+* `ty` (a type. Examples: `int`, `Vec<(char, String)>`, `&T`.)\n * `pat` (a pattern, usually appearing in a `match` or on the left-hand side of\n   a declaration. Examples: `Some(t)`; `(17, 'a')`; `_`.)\n * `block` (a sequence of actions. Example: `{ log(error, \"hi\"); return 12; }`)"}, {"sha": "0e9114d7b76322a4b3df2785e599f889399618ed", "filename": "src/doc/intro.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "patch": "@@ -198,14 +198,14 @@ Typically, tasks do not share memory but instead communicate amongst each other\n \n ```\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     let (tx, rx)  = channel();\n     tx.send(numbers);\n \n     spawn(proc() {\n         let numbers = rx.recv();\n-        println!(\"{}\", numbers[0]);\n+        println!(\"{}\", *numbers.get(0));\n     })\n }\n ```\n@@ -237,26 +237,26 @@ try to modify the previous example to continue using the variable `numbers`:\n \n ```ignore\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     let (tx, rx)  = channel();\n     tx.send(numbers);\n \n     spawn(proc() {\n         let numbers = rx.recv();\n-        println!(\"{}\", numbers[0]);\n+        println!(\"{}\", numbers.get(0));\n     });\n \n     // Try to print a number from the original task\n-    println!(\"{}\", numbers[0]);\n+    println!(\"{}\", *numbers.get(0));\n }\n ```\n \n This will result an error indicating that the value is no longer in scope:\n \n ```notrust\n concurrency.rs:12:20: 12:27 error: use of moved value: 'numbers'\n-concurrency.rs:12     println!(\"{}\", numbers[0]);\n+concurrency.rs:12     println!(\"{}\", numbers.get(0));\n                                      ^~~~~~~\n ```\n \n@@ -267,7 +267,7 @@ Let's see an example that uses the `clone` method to create copies of the data:\n \n ```\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     for num in range(0, 3) {\n         let (tx, rx)  = channel();\n@@ -276,7 +276,7 @@ fn main() {\n \n         spawn(proc() {\n             let numbers = rx.recv();\n-            println!(\"{:d}\", numbers[num as uint]);\n+            println!(\"{:d}\", *numbers.get(num as uint));\n         })\n     }\n }\n@@ -301,7 +301,7 @@ extern crate sync;\n use sync::Arc;\n \n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n     let numbers = Arc::new(numbers);\n \n     for num in range(0, 3) {\n@@ -310,7 +310,7 @@ fn main() {\n \n         spawn(proc() {\n             let numbers = rx.recv();\n-            println!(\"{:d}\", numbers[num as uint]);\n+            println!(\"{:d}\", *numbers.get(num as uint));\n         })\n     }\n }\n@@ -348,7 +348,7 @@ extern crate sync;\n use sync::{Arc, Mutex};\n \n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n     let numbers_lock = Arc::new(Mutex::new(numbers));\n \n     for num in range(0, 3) {\n@@ -360,9 +360,13 @@ fn main() {\n \n             // Take the lock, along with exclusive access to the underlying array\n             let mut numbers = numbers_lock.lock();\n-            numbers[num as uint] += 1;\n \n-            println!(\"{}\", numbers[num as uint]);\n+            // This is ugly for now, but will be replaced by\n+            // `numbers[num as uint] += 1` in the near future.\n+            // See: https://github.com/mozilla/rust/issues/6515\n+            *numbers.get_mut(num as uint) = *numbers.get_mut(num as uint) + 1;\n+\n+            println!(\"{}\", *numbers.get(num as uint));\n \n             // When `numbers` goes out of scope the lock is dropped\n         })"}, {"sha": "cde26bd881335265d661f84b9c25640688795ec0", "filename": "src/doc/rust.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "patch": "@@ -886,8 +886,8 @@ fn main() {\n     // Equivalent to 'std::iter::range_step(0, 10, 2);'\n     range_step(0, 10, 2);\n \n-    // Equivalent to 'foo(~[std::option::Some(1.0), std::option::None]);'\n-    foo(~[Some(1.0), None]);\n+    // Equivalent to 'foo(vec![std::option::Some(1.0), std::option::None]);'\n+    foo(vec![Some(1.0), None]);\n }\n ~~~~\n \n@@ -995,8 +995,8 @@ the function name.\n fn iter<T>(seq: &[T], f: |T|) {\n     for elt in seq.iter() { f(elt); }\n }\n-fn map<T, U>(seq: &[T], f: |T| -> U) -> ~[U] {\n-    let mut acc = ~[];\n+fn map<T, U>(seq: &[T], f: |T| -> U) -> Vec<U> {\n+    let mut acc = vec![];\n     for elt in seq.iter() { acc.push(f(elt)); }\n     acc\n }\n@@ -1159,19 +1159,19 @@ except that they have the `extern` modifier.\n \n ~~~~\n // Declares an extern fn, the ABI defaults to \"C\"\n-extern fn new_vec() -> ~[int] { ~[] }\n+extern fn new_int() -> int { 0 }\n \n // Declares an extern fn with \"stdcall\" ABI\n-extern \"stdcall\" fn new_vec_stdcall() -> ~[int] { ~[] }\n+extern \"stdcall\" fn new_int_stdcall() -> int { 0 }\n ~~~~\n \n Unlike normal functions, extern fns have an `extern \"ABI\" fn()`.\n This is the same type as the functions declared in an extern\n block.\n \n ~~~~\n-# extern fn new_vec() -> ~[int] { ~[] }\n-let fptr: extern \"C\" fn() -> ~[int] = new_vec;\n+# extern fn new_int() -> int { 0 }\n+let fptr: extern \"C\" fn() -> int = new_int;\n ~~~~\n \n Extern functions may be called directly from Rust code as Rust uses large,\n@@ -1509,7 +1509,7 @@ Implementation parameters are written after the `impl` keyword.\n \n ~~~~\n # trait Seq<T> { }\n-impl<T> Seq<T> for ~[T] {\n+impl<T> Seq<T> for Vec<T> {\n    /* ... */\n }\n impl Seq<bool> for u32 {\n@@ -3347,7 +3347,7 @@ Such a definite-sized vector type is a first-class type, since its size is known\n A vector without such a size is said to be of _indefinite_ size,\n and is therefore not a _first-class_ type.\n An indefinite-size vector can only be instantiated through a pointer type,\n-such as `&[T]` or `~[T]`.\n+such as `&[T]` or `Vec<T>`.\n The kind of a vector type depends on the kind of its element type,\n as with other simple structural types.\n "}, {"sha": "98cb3cd86fbbbdf9ef0c61bd0c92befff3aee93e", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/faa7ba75a71b47151ed9b8c299d3fcc9af4207b5/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=faa7ba75a71b47151ed9b8c299d3fcc9af4207b5", "patch": "@@ -2062,7 +2062,7 @@ extern crate collections;\n type Set<T> = collections::HashMap<T, ()>;\n \n struct Stack<T> {\n-    elements: ~[T]\n+    elements: Vec<T>\n }\n \n enum Option<T> {\n@@ -2320,7 +2320,7 @@ trait Seq<T> {\n     fn length(&self) -> uint;\n }\n \n-impl<T> Seq<T> for ~[T] {\n+impl<T> Seq<T> for Vec<T> {\n     fn length(&self) -> uint { self.len() }\n }\n ~~~~\n@@ -2392,7 +2392,7 @@ generic types.\n \n ~~~~\n # trait Printable { fn print(&self); }\n-fn print_all<T: Printable>(printable_things: ~[T]) {\n+fn print_all<T: Printable>(printable_things: Vec<T>) {\n     for thing in printable_things.iter() {\n         thing.print();\n     }\n@@ -2410,10 +2410,10 @@ as in this version of `print_all` that copies elements.\n \n ~~~\n # trait Printable { fn print(&self); }\n-fn print_all<T: Printable + Clone>(printable_things: ~[T]) {\n+fn print_all<T: Printable + Clone>(printable_things: Vec<T>) {\n     let mut i = 0;\n     while i < printable_things.len() {\n-        let copy_of_thing = printable_things[i].clone();\n+        let copy_of_thing = printable_things.get(i).clone();\n         copy_of_thing.print();\n         i += 1;\n     }\n@@ -2438,11 +2438,11 @@ However, consider this function:\n # fn new_circle() -> int { 1 }\n trait Drawable { fn draw(&self); }\n \n-fn draw_all<T: Drawable>(shapes: ~[T]) {\n+fn draw_all<T: Drawable>(shapes: Vec<T>) {\n     for shape in shapes.iter() { shape.draw(); }\n }\n # let c: Circle = new_circle();\n-# draw_all(~[c]);\n+# draw_all(vec![c]);\n ~~~~\n \n You can call that on a vector of circles, or a vector of rectangles\n@@ -2742,9 +2742,9 @@ mod farm {\n # pub type Chicken = int;\n # struct Human(int);\n # impl Human { pub fn rest(&self) { } }\n-# pub fn make_me_a_farm() -> Farm { Farm { chickens: ~[], farmer: Human(0) } }\n+# pub fn make_me_a_farm() -> Farm { Farm { chickens: vec![], farmer: Human(0) } }\n     pub struct Farm {\n-        chickens: ~[Chicken],\n+        chickens: Vec<Chicken>,\n         pub farmer: Human\n     }\n "}]}