{"sha": "3fcc79f04a27850c243e33dd32c42b19ba64ee11", "node_id": "C_kwDOAAsO6NoAKDNmY2M3OWYwNGEyNzg1MGMyNDNlMzNkZDMyYzQyYjE5YmE2NGVlMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-27T05:11:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-27T05:11:52Z"}, "message": "Rollup merge of #108364 - Nilstrieb:validity-checks-refactor, r=compiler-errors\n\nUnify validity checks into a single query\n\nPreviously, there were two queries to check whether a type allows the 0x01 or zeroed bitpattern.\n\nI am planning on adding a further initness to check in #100423, truly uninit for MaybeUninit, which would make this three queries. This seems overkill for such a small feature, so this PR unifies them into one.\n\nI am not entirely happy with the naming and key type and open for improvements.\n\nr? oli-obk", "tree": {"sha": "336e7599b3d9475cfb0b26fc7517d23e853f5707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336e7599b3d9475cfb0b26fc7517d23e853f5707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fcc79f04a27850c243e33dd32c42b19ba64ee11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/DuYCRBK7hj4Ov3rIwAAhiIIAExXMtyzJzsgeoagVNc3FDE0\nfz03VwUq3kQUKwuIiq0JpZJgGUWCvrzvR4JAn5fFr5jU5EVEJmkiZHS1+vq5bVtJ\nse3uuiiY9TDo7rPA+6Cuxwfx/RZxHAnIH1+tKx2PkqAfBo2RUx3yIOkz14cflcIm\nIRXvLXIZ2SetLektnlU7aqG4aALtExo0h8WxHsKwd6gYXmoSyeZfJyCY+dJmIXZO\nW/XH9Ff+vq9d1YOybzw/4ExCzwcfOO1DZaL9ZYqeRLFmHfIjvtB1xneQpNO6f49x\nr8/5bbQn2in7tEXW941tjd7V8NLQfslPobGUGNPOXx8P7Z6I101Z6sMgx1czUwc=\n=Z8rb\n-----END PGP SIGNATURE-----\n", "payload": "tree 336e7599b3d9475cfb0b26fc7517d23e853f5707\nparent 3a6c5429c29074961080cd9f368a2e46fdb371ff\nparent 025d2a147ff3dcde8f00ad5bc43b446837bd0240\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677474712 +0100\ncommitter GitHub <noreply@github.com> 1677474712 +0100\n\nRollup merge of #108364 - Nilstrieb:validity-checks-refactor, r=compiler-errors\n\nUnify validity checks into a single query\n\nPreviously, there were two queries to check whether a type allows the 0x01 or zeroed bitpattern.\n\nI am planning on adding a further initness to check in #100423, truly uninit for MaybeUninit, which would make this three queries. This seems overkill for such a small feature, so this PR unifies them into one.\n\nI am not entirely happy with the naming and key type and open for improvements.\n\nr? oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcc79f04a27850c243e33dd32c42b19ba64ee11", "html_url": "https://github.com/rust-lang/rust/commit/3fcc79f04a27850c243e33dd32c42b19ba64ee11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fcc79f04a27850c243e33dd32c42b19ba64ee11/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6c5429c29074961080cd9f368a2e46fdb371ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6c5429c29074961080cd9f368a2e46fdb371ff", "html_url": "https://github.com/rust-lang/rust/commit/3a6c5429c29074961080cd9f368a2e46fdb371ff"}, {"sha": "025d2a147ff3dcde8f00ad5bc43b446837bd0240", "url": "https://api.github.com/repos/rust-lang/rust/commits/025d2a147ff3dcde8f00ad5bc43b446837bd0240", "html_url": "https://github.com/rust-lang/rust/commit/025d2a147ff3dcde8f00ad5bc43b446837bd0240"}], "stats": {"total": 156, "additions": 89, "deletions": 67}, "files": [{"sha": "39574ca558f8b3616dbe9cbeefc4366b88593b8d", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -1505,14 +1505,6 @@ pub struct PointeeInfo {\n     pub safe: Option<PointerKind>,\n }\n \n-/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n-/// that is checked to be valid\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub enum InitKind {\n-    Zero,\n-    UninitMitigated0x01Fill,\n-}\n-\n impl LayoutS {\n     /// Returns `true` if the layout corresponds to an unsized type.\n     pub fn is_unsized(&self) -> bool {"}, {"sha": "f00e9321070582d0581160d68aa45837e3f6bcac", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -21,7 +21,8 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n-use rustc_middle::ty::layout::HasParamEnv;\n+use rustc_middle::ty;\n+use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -642,7 +643,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_zero_valid\n                 && !fx\n                     .tcx\n-                    .permits_zero_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n@@ -661,7 +662,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_mem_uninitialized_valid\n                 && !fx\n                     .tcx\n-                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((\n+                        InitKind::UninitMitigated0x01Fill,\n+                        fx.param_env().and(ty),\n+                    ))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({"}, {"sha": "b1abbd673a53a238fb61328a52d3e25f3ae4fdb6", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n-use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n+use rustc_middle::ty::layout::{HasTyCtxt, InitKind, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n use rustc_session::config::OptLevel;\n@@ -676,11 +676,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 Inhabited => layout.abi.is_uninhabited(),\n                 ZeroValid => !bx\n                     .tcx()\n-                    .permits_zero_init(bx.param_env().and(ty))\n+                    .check_validity_of_init((InitKind::Zero, bx.param_env().and(ty)))\n                     .expect(\"expected to have layout during codegen\"),\n                 MemUninitializedValid => !bx\n                     .tcx()\n-                    .permits_uninit_init(bx.param_env().and(ty))\n+                    .check_validity_of_init((\n+                        InitKind::UninitMitigated0x01Fill,\n+                        bx.param_env().and(ty),\n+                    ))\n                     .expect(\"expected to have layout during codegen\"),\n             };\n             Some(if do_panic {"}, {"sha": "26c84b4ce612774a57685516a09daa6dc386c5eb", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::LayoutOf as _;\n+use rustc_middle::ty::layout::{InitKind, LayoutOf as _};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -437,7 +437,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if intrinsic_name == sym::assert_zero_valid {\n                     let should_panic = !self\n                         .tcx\n-                        .permits_zero_init(self.param_env.and(ty))\n+                        .check_validity_of_init((InitKind::Zero, self.param_env.and(ty)))\n                         .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {\n@@ -454,7 +454,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if intrinsic_name == sym::assert_mem_uninitialized_valid {\n                     let should_panic = !self\n                         .tcx\n-                        .permits_uninit_init(self.param_env.and(ty))\n+                        .check_validity_of_init((\n+                            InitKind::UninitMitigated0x01Fill,\n+                            self.param_env.and(ty),\n+                        ))\n                         .map_err(|_| err_inval!(TooGeneric))?;\n \n                     if should_panic {"}, {"sha": "092a7dc3d3b51c4482a6a8a95227079b6abd0f3f", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -38,7 +38,6 @@ use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_macros::fluent_messages;\n use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n-use rustc_target::abi::InitKind;\n \n fluent_messages! { \"../locales/en-US.ftl\" }\n \n@@ -62,9 +61,7 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n-    providers.permits_uninit_init = |tcx, param_env_and_ty| {\n-        util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::UninitMitigated0x01Fill)\n+    providers.check_validity_of_init = |tcx, (init_kind, param_env_and_ty)| {\n+        util::might_permit_raw_init(tcx, init_kind, param_env_and_ty)\n     };\n-    providers.permits_zero_init =\n-        |tcx, param_env_and_ty| util::might_permit_raw_init(tcx, param_env_and_ty, InitKind::Zero);\n }"}, {"sha": "a78bf927ca1dc9c20d8a177bca326f58f90bd585", "filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmight_permit_raw_init.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -1,7 +1,7 @@\n-use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{InitKind, LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::Limit;\n-use rustc_target::abi::{Abi, FieldsShape, InitKind, Scalar, Variants};\n+use rustc_target::abi::{Abi, FieldsShape, Scalar, Variants};\n \n use crate::const_eval::{CheckAlignment, CompileTimeInterpreter};\n use crate::interpret::{InterpCx, MemoryKind, OpTy};\n@@ -20,8 +20,8 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// to the full uninit check).\n pub fn might_permit_raw_init<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n     kind: InitKind,\n+    param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<bool, LayoutError<'tcx>> {\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n         might_permit_raw_init_strict(tcx.layout_of(param_env_and_ty)?, tcx, kind)"}, {"sha": "111ea6b8cddc01505fe9b65ad9c0d8303adab320", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -4,8 +4,9 @@ use crate::infer::canonical::Canonical;\n use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::{InitKind, TyAndLayout};\n use crate::ty::subst::{GenericArg, SubstsRef};\n-use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n@@ -696,3 +697,24 @@ impl Key for HirId {\n         None\n     }\n }\n+\n+impl<'tcx> Key for (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n+    // Just forward to `Ty<'tcx>`\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+\n+    fn ty_adt_id(&self) -> Option<DefId> {\n+        match self.1.value.kind() {\n+            ty::Adt(adt, _) => Some(adt.did()),\n+            _ => None,\n+        }\n+    }\n+}"}, {"sha": "d4435a54b4ab6d2d60cbaadb8ffa660948463f72", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -2173,12 +2173,8 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query permits_uninit_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left uninit\", key.value }\n-    }\n-\n-    query permits_zero_init(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left zeroed\", key.value }\n+    query check_validity_of_init(key: (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking to see if `{}` permits being left {}\", key.1.value, key.0 }\n     }\n \n     query compare_impl_const("}, {"sha": "f0b52455889aa50de0ad687b797f5dfe9755a399", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -169,6 +169,23 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n+/// Used in `might_permit_raw_init` to indicate the kind of initialisation\n+/// that is checked to be valid\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+pub enum InitKind {\n+    Zero,\n+    UninitMitigated0x01Fill,\n+}\n+\n+impl fmt::Display for InitKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::Zero => f.write_str(\"zeroed\"),\n+            Self::UninitMitigated0x01Fill => f.write_str(\"filled with 0x01\"),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),"}, {"sha": "d743c30684958fd6c8809664fdbec7bae3375f14", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -32,6 +32,7 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n+use crate::ty::layout::InitKind;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;"}, {"sha": "05286b71d47e4b28e0fb9032110e65b83aecdab1", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcc79f04a27850c243e33dd32c42b19ba64ee11/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=3fcc79f04a27850c243e33dd32c42b19ba64ee11", "patch": "@@ -6,8 +6,8 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::{self, ParamEnv, ParamEnvAnd, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::layout::InitKind;\n+use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n pub struct InstCombine;\n@@ -234,16 +234,15 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         }\n         let ty = substs.type_at(0);\n \n-        // Check this is a foldable intrinsic before we query the layout of our generic parameter\n-        let Some(assert_panics) = intrinsic_assert_panics(intrinsic_name) else { return; };\n-        match assert_panics(self.tcx, self.param_env.and(ty)) {\n-            // We don't know the layout, don't touch the assertion\n-            Err(_) => {}\n-            Ok(true) => {\n+        let known_is_valid = intrinsic_assert_panics(self.tcx, self.param_env, ty, intrinsic_name);\n+        match known_is_valid {\n+            // We don't know the layout or it's not validity assertion at all, don't touch it\n+            None => {}\n+            Some(true) => {\n                 // If we know the assert panics, indicate to later opts that the call diverges\n                 *target = None;\n             }\n-            Ok(false) => {\n+            Some(false) => {\n                 // If we know the assert does not panic, turn the call into a Goto\n                 terminator.kind = TerminatorKind::Goto { target: *target_block };\n             }\n@@ -252,33 +251,21 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n }\n \n fn intrinsic_assert_panics<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n     intrinsic_name: Symbol,\n-) -> Option<fn(TyCtxt<'tcx>, ParamEnvAnd<'tcx, Ty<'tcx>>) -> Result<bool, LayoutError<'tcx>>> {\n-    fn inhabited_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(tcx.layout_of(param_env_and_ty)?.abi.is_uninhabited())\n-    }\n-    fn zero_valid_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(!tcx.permits_zero_init(param_env_and_ty)?)\n-    }\n-    fn mem_uninitialized_valid_predicate<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Result<bool, LayoutError<'tcx>> {\n-        Ok(!tcx.permits_uninit_init(param_env_and_ty)?)\n-    }\n-\n-    match intrinsic_name {\n-        sym::assert_inhabited => Some(inhabited_predicate),\n-        sym::assert_zero_valid => Some(zero_valid_predicate),\n-        sym::assert_mem_uninitialized_valid => Some(mem_uninitialized_valid_predicate),\n-        _ => None,\n-    }\n+) -> Option<bool> {\n+    Some(match intrinsic_name {\n+        sym::assert_inhabited => tcx.layout_of(param_env.and(ty)).ok()?.abi.is_uninhabited(),\n+        sym::assert_zero_valid => {\n+            !tcx.check_validity_of_init((InitKind::Zero, param_env.and(ty))).ok()?\n+        }\n+        sym::assert_mem_uninitialized_valid => !tcx\n+            .check_validity_of_init((InitKind::UninitMitigated0x01Fill, param_env.and(ty)))\n+            .ok()?,\n+        _ => return None,\n+    })\n }\n \n fn resolve_rust_intrinsic<'tcx>("}]}