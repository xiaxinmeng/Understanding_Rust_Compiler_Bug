{"sha": "5aa2da013356e814204a0bd5751dbabb71307213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYTJkYTAxMzM1NmU4MTQyMDRhMGJkNTc1MWRiYWJiNzEzMDcyMTM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-09-05T05:07:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-09-06T17:50:58Z"}, "message": "fix sized deallocation for proc", "tree": {"sha": "34450b6e62412311048d3551c1d24d1cf1fcd8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34450b6e62412311048d3551c1d24d1cf1fcd8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa2da013356e814204a0bd5751dbabb71307213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa2da013356e814204a0bd5751dbabb71307213", "html_url": "https://github.com/rust-lang/rust/commit/5aa2da013356e814204a0bd5751dbabb71307213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa2da013356e814204a0bd5751dbabb71307213/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395e453c06cce045d2e0613a1c6edab2dcfdeceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/395e453c06cce045d2e0613a1c6edab2dcfdeceb", "html_url": "https://github.com/rust-lang/rust/commit/395e453c06cce045d2e0613a1c6edab2dcfdeceb"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "c72a77702afff4ea2bfa636528374b3b40907b70", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5aa2da013356e814204a0bd5751dbabb71307213/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa2da013356e814204a0bd5751dbabb71307213/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=5aa2da013356e814204a0bd5751dbabb71307213", "patch": "@@ -14,7 +14,7 @@\n \n use core::ptr::RawPtr;\n #[cfg(not(test))] use core::raw;\n-#[cfg(not(test))] use util;\n+#[cfg(stage0, not(test))] use util;\n \n /// Returns a pointer to `size` bytes of memory.\n ///\n@@ -119,7 +119,7 @@ unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) {\n }\n \n // FIXME: #7496\n-#[cfg(not(test))]\n+#[cfg(stage0, not(test))]\n #[lang=\"closure_exchange_malloc\"]\n #[inline]\n #[allow(deprecated)]\n@@ -134,6 +134,21 @@ unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint,\n     alloc as *mut u8\n }\n \n+// FIXME: #7496\n+#[cfg(not(stage0), not(test))]\n+#[lang=\"closure_exchange_malloc\"]\n+#[inline]\n+#[allow(deprecated)]\n+unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint,\n+                                  align: uint) -> *mut u8 {\n+    let p = allocate(size, align);\n+\n+    let alloc = p as *mut raw::Box<()>;\n+    (*alloc).drop_glue = drop_glue;\n+\n+    alloc as *mut u8\n+}\n+\n #[cfg(jemalloc)]\n mod imp {\n     use core::option::{None, Option};"}, {"sha": "04700f74943e50a11ce42b645ce727c42da9a3c1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5aa2da013356e814204a0bd5751dbabb71307213", "patch": "@@ -66,7 +66,7 @@ use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::intrinsic;\n use middle::trans::machine;\n-use middle::trans::machine::{llsize_of, llsize_of_real};\n+use middle::trans::machine::{llsize_of, llsize_of_real, llalign_of_min};\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::tvec;\n@@ -382,13 +382,44 @@ pub fn malloc_raw_dyn<'a>(bcx: &'a Block<'a>,\n     Result::new(r.bcx, PointerCast(r.bcx, r.val, llty_ptr))\n }\n \n+pub fn malloc_raw_dyn_proc<'a>(\n+                      bcx: &'a Block<'a>,\n+                      t: ty::t, alloc_fn: LangItem) -> Result<'a> {\n+    let _icx = push_ctxt(\"malloc_raw_dyn_proc\");\n+    let ccx = bcx.ccx();\n+\n+    let langcall = require_alloc_fn(bcx, t, alloc_fn);\n+\n+    // Grab the TypeRef type of ptr_ty.\n+    let ptr_ty = ty::mk_uniq(bcx.tcx(), t);\n+    let ptr_llty = type_of(ccx, ptr_ty);\n+\n+    let llty = type_of(bcx.ccx(), t);\n+    let size = llsize_of(bcx.ccx(), llty);\n+    let llalign = C_uint(ccx, llalign_of_min(bcx.ccx(), llty) as uint);\n+\n+    // Allocate space:\n+    let drop_glue = glue::get_drop_glue(ccx, ty::mk_uniq(bcx.tcx(), t));\n+    let r = callee::trans_lang_call(\n+        bcx,\n+        langcall,\n+        [\n+            PointerCast(bcx, drop_glue, Type::glue_fn(ccx, Type::i8p(ccx)).ptr_to()),\n+            size,\n+            llalign\n+        ],\n+        None);\n+    Result::new(r.bcx, PointerCast(r.bcx, r.val, ptr_llty))\n+}\n+\n+\n pub fn malloc_raw_dyn_managed<'a>(\n                       bcx: &'a Block<'a>,\n                       t: ty::t,\n                       alloc_fn: LangItem,\n                       size: ValueRef)\n                       -> Result<'a> {\n-    let _icx = push_ctxt(\"malloc_raw_managed\");\n+    let _icx = push_ctxt(\"malloc_raw_dyn_managed\");\n     let ccx = bcx.ccx();\n \n     let langcall = require_alloc_fn(bcx, t, alloc_fn);"}, {"sha": "b90ac39cf1d28caca9c39915c11c9afbf7a454ce", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5aa2da013356e814204a0bd5751dbabb71307213", "patch": "@@ -24,7 +24,6 @@ use middle::trans::common::*;\n use middle::trans::datum::{Datum, DatumBlock, Expr, Lvalue, rvalue_scratch_datum};\n use middle::trans::debuginfo;\n use middle::trans::expr;\n-use middle::trans::machine::llsize_of;\n use middle::trans::type_of::*;\n use middle::trans::type_::Type;\n use middle::ty;\n@@ -144,15 +143,12 @@ fn allocate_cbox<'a>(bcx: &'a Block<'a>,\n     let tcx = bcx.tcx();\n \n     // Allocate and initialize the box:\n+    let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n     match store {\n         ty::UniqTraitStore => {\n-            let ty = type_of(bcx.ccx(), cdata_ty);\n-            let size = llsize_of(bcx.ccx(), ty);\n-            // we treat proc as @ here, which isn't ideal\n-            malloc_raw_dyn_managed(bcx, cdata_ty, ClosureExchangeMallocFnLangItem, size)\n+            malloc_raw_dyn_proc(bcx, cbox_ty, ClosureExchangeMallocFnLangItem)\n         }\n         ty::RegionTraitStore(..) => {\n-            let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n             let llbox = alloc_ty(bcx, cbox_ty, \"__closure\");\n             Result::new(bcx, llbox)\n         }"}, {"sha": "ce6bdc85454637577639a67b5aadf32e22693a54", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa2da013356e814204a0bd5751dbabb71307213/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=5aa2da013356e814204a0bd5751dbabb71307213", "patch": "@@ -520,12 +520,8 @@ fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'\n             with_cond(bcx, IsNotNull(bcx, env), |bcx| {\n                 let dtor_ptr = GEPi(bcx, env, [0u, abi::box_field_tydesc]);\n                 let dtor = Load(bcx, dtor_ptr);\n-                let cdata = GEPi(bcx, env, [0u, abi::box_field_body]);\n-                Call(bcx, dtor, [PointerCast(bcx, cdata, Type::i8p(bcx.ccx()))], None);\n-\n-                // Free the environment itself\n-                // FIXME: #13994: pass align and size here\n-                trans_exchange_free(bcx, env, 0, 8)\n+                Call(bcx, dtor, [PointerCast(bcx, box_cell_v, Type::i8p(bcx.ccx()))], None);\n+                bcx\n             })\n         }\n         ty::ty_trait(..) => {"}]}