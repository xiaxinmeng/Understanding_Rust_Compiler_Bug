{"sha": "154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NGYzYjAwZTA2MTdlMzc5ZDAwNWIzYWE3ZjQxZThmMWJlYTdiZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T12:06:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T12:06:39Z"}, "message": "auto merge of #6271 : pnkfelix/rust/issue6009-condition-pub-priv-variants, r=graydon\n\n@brson: r?  [please ignore the other one that was accidentally based off master due to back-button-bugs in github.com]\r\n\r\nMy goal is to resolve the question of whether we want to encourage (by example) consistent use of pub to make identifiers publicly-accessible, even in syntax extensions. (If people don't want that, then we can just let this pull request die.)\r\n\r\nThis is part one of two. Part two, whose contents should be clear from the FIXME's in this commit, would land after this gets incorporated into a snapshot.\r\n\r\n(The eventual goal is to address issue #6009 , which was implied by my choice of branch name, but not mentioned in the pull request, so github did not notice it.)", "tree": {"sha": "7541808f792200353f47dc1a91e1e3ac7fcdb1b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7541808f792200353f47dc1a91e1e3ac7fcdb1b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "html_url": "https://github.com/rust-lang/rust/commit/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4023f54deb814529fe5be572b33e9df561ed494a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4023f54deb814529fe5be572b33e9df561ed494a", "html_url": "https://github.com/rust-lang/rust/commit/4023f54deb814529fe5be572b33e9df561ed494a"}, {"sha": "1cbf0a84dc9d12d4c15379537a51ad75fcb1bdcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cbf0a84dc9d12d4c15379537a51ad75fcb1bdcf", "html_url": "https://github.com/rust-lang/rust/commit/1cbf0a84dc9d12d4c15379537a51ad75fcb1bdcf"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "fea32bc5b750925c2d79b996bc4dcf97d5749ff7", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "patch": "@@ -337,7 +337,8 @@ pub enum IoErrorKind {\n // XXX: Can't put doc comments on macros\n // Raised by `I/O` operations on error.\n condition! {\n-    io_error: super::IoError -> ();\n+    // FIXME (#6009): uncomment `pub` after expansion support lands.\n+    /*pub*/ io_error: super::IoError -> ();\n }\n \n pub trait Reader {"}, {"sha": "68c74c2d12b5520d448959917065d915cece69a3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "patch": "@@ -524,8 +524,23 @@ pub fn core_macros() -> ~str {\n \n     macro_rules! condition (\n \n+        { pub $c:ident: $in:ty -> $out:ty; } => {\n+\n+            pub mod $c {\n+                fn key(_x: @::core::condition::Handler<$in,$out>) { }\n+\n+                pub static cond :\n+                    ::core::condition::Condition<'static,$in,$out> =\n+                    ::core::condition::Condition {\n+                        name: stringify!($c),\n+                        key: key\n+                    };\n+            }\n+        };\n+\n         { $c:ident: $in:ty -> $out:ty; } => {\n \n+            // FIXME (#6009): remove mod's `pub` below once variant above lands.\n             pub mod $c {\n                 fn key(_x: @::core::condition::Handler<$in,$out>) { }\n "}]}