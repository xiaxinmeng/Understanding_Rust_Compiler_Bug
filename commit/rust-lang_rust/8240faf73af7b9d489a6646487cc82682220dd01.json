{"sha": "8240faf73af7b9d489a6646487cc82682220dd01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNDBmYWY3M2FmN2I5ZDQ4OWE2NjQ2NDg3Y2M4MjY4MjIyMGRkMDE=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2013-12-06T08:15:02Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2013-12-10T22:05:57Z"}, "message": "Allow ref and mut modifiers for short form field patterns\n\nPreviously, if you wanted to bind a field mutably or by ref, you had to\ndo something like Foo { x: ref mut x }. You can now just do\nFoo { ref mut x }.\n\nCloses #6137", "tree": {"sha": "9500ba4c783542e937043fb9ce5e4702c661a621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9500ba4c783542e937043fb9ce5e4702c661a621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8240faf73af7b9d489a6646487cc82682220dd01", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8240faf73af7b9d489a6646487cc82682220dd01", "html_url": "https://github.com/rust-lang/rust/commit/8240faf73af7b9d489a6646487cc82682220dd01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8240faf73af7b9d489a6646487cc82682220dd01/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc48061d7ffa6a0839daf6577091b2455f785ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc48061d7ffa6a0839daf6577091b2455f785ec", "html_url": "https://github.com/rust-lang/rust/commit/9fc48061d7ffa6a0839daf6577091b2455f785ec"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "0d5e3dc38b21b002a55a9c54c4cbde43249320e0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8240faf73af7b9d489a6646487cc82682220dd01/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240faf73af7b9d489a6646487cc82682220dd01/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8240faf73af7b9d489a6646487cc82682220dd01", "patch": "@@ -2814,18 +2814,33 @@ impl Parser {\n             }\n \n             let lo1 = self.last_span.lo;\n+            let bind_type = if self.eat_keyword(keywords::Mut) {\n+                BindByValue(MutMutable)\n+            } else if self.eat_keyword(keywords::Ref) {\n+                BindByRef(self.parse_mutability())\n+            } else {\n+                BindByValue(MutImmutable)\n+            };\n+\n             let fieldname = self.parse_ident();\n             let hi1 = self.last_span.lo;\n             let fieldpath = ast_util::ident_to_path(mk_sp(lo1, hi1),\n                                                     fieldname);\n             let subpat;\n             if *self.token == token::COLON {\n+                match bind_type {\n+                    BindByRef(..) | BindByValue(MutMutable) =>\n+                        self.fatal(format!(\"unexpected `{}`\",\n+                                   self.this_token_to_str())),\n+                    _ => {}\n+                }\n+\n                 self.bump();\n                 subpat = self.parse_pat();\n             } else {\n                 subpat = @ast::Pat {\n                     id: ast::DUMMY_NODE_ID,\n-                    node: PatIdent(BindByValue(MutImmutable), fieldpath, None),\n+                    node: PatIdent(bind_type, fieldpath, None),\n                     span: *self.last_span\n                 };\n             }"}, {"sha": "b9ae0d341d9a261e42ea736e24ec90bdd415db57", "filename": "src/test/compile-fail/bind-struct-early-modifiers.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8240faf73af7b9d489a6646487cc82682220dd01/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240faf73af7b9d489a6646487cc82682220dd01/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs?ref=8240faf73af7b9d489a6646487cc82682220dd01", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    struct Foo { x: int }\n+    match Foo { x: 10 } {\n+        Foo { ref x: ref x } => {}, //~ ERROR unexpected `:`\n+        _ => {}\n+    }\n+}"}, {"sha": "470577d729730de9deac00676840a97c8c772275", "filename": "src/test/run-pass/bind-field-short-with-modifiers.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8240faf73af7b9d489a6646487cc82682220dd01/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8240faf73af7b9d489a6646487cc82682220dd01/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs?ref=8240faf73af7b9d489a6646487cc82682220dd01", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    struct Foo { x: int, y: int }\n+    let mut f = Foo { x: 10, y: 0 };\n+    match f {\n+        Foo { ref mut x, .. } => *x = 11,\n+    }\n+    match f {\n+        Foo { ref x, ref y } => {\n+            assert_eq!(f.x, 11);\n+            assert_eq!(f.y, 0);\n+        }\n+    }\n+    match f {\n+        Foo { mut x, y: ref mut y } => {\n+            x = 12;\n+            *y = 1;\n+        }\n+    }\n+    assert_eq!(f.x, 11);\n+    assert_eq!(f.y, 1);\n+}"}]}