{"sha": "dae1d9746876fe395cea4b734c7ef27dda55e21f", "node_id": "C_kwDOAAsO6NoAKGRhZTFkOTc0Njg3NmZlMzk1Y2VhNGI3MzRjN2VmMjdkZGE1NWUyMWY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-18T17:48:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-18T22:00:36Z"}, "message": "Make some lints incremental.", "tree": {"sha": "2b3906bf0bd4e55775d84fac6077689d0c98f6d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3906bf0bd4e55775d84fac6077689d0c98f6d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae1d9746876fe395cea4b734c7ef27dda55e21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae1d9746876fe395cea4b734c7ef27dda55e21f", "html_url": "https://github.com/rust-lang/rust/commit/dae1d9746876fe395cea4b734c7ef27dda55e21f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae1d9746876fe395cea4b734c7ef27dda55e21f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e9336fe81a1fce364349bb7a35a0347c369f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e9336fe81a1fce364349bb7a35a0347c369f34", "html_url": "https://github.com/rust-lang/rust/commit/21e9336fe81a1fce364349bb7a35a0347c369f34"}], "stats": {"total": 104, "additions": 68, "deletions": 36}, "files": [{"sha": "c1255ae5056ac54932d395b4f099ab9222b8e941", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -159,28 +159,16 @@ macro_rules! late_lint_passes {\n         $macro!(\n             $args,\n             [\n-                // FIXME: Look into regression when this is used as a module lint\n-                // May Depend on constants elsewhere\n-                UnusedBrokenConst: UnusedBrokenConst,\n-                // Needs to run after UnusedAttributes as it marks all `feature` attributes as used.\n-                UnstableFeatures: UnstableFeatures,\n                 // Tracks state across modules\n                 UnnameableTestItems: UnnameableTestItems::new(),\n                 // Tracks attributes of parents\n                 MissingDoc: MissingDoc::new(),\n-                // Depends on access levels\n+                // Builds a global list of all impls of `Debug`.\n                 // FIXME: Turn the computation of types which implement Debug into a query\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n-                ArrayIntoIter: ArrayIntoIter::default(),\n+                // Keeps a global list of foreign declarations.\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n-                DropTraitConstraints: DropTraitConstraints,\n-                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n-                NonPanicFmt: NonPanicFmt,\n-                NoopMethodCall: NoopMethodCall,\n-                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n-                InvalidAtomicOrdering: InvalidAtomicOrdering,\n-                NamedAsmLabels: NamedAsmLabels,\n             ]\n         );\n     };\n@@ -216,6 +204,17 @@ macro_rules! late_lint_mod_passes {\n                 ExplicitOutlivesRequirements: ExplicitOutlivesRequirements,\n                 InvalidValue: InvalidValue,\n                 DerefNullPtr: DerefNullPtr,\n+                // May Depend on constants elsewhere\n+                UnusedBrokenConst: UnusedBrokenConst,\n+                UnstableFeatures: UnstableFeatures,\n+                ArrayIntoIter: ArrayIntoIter::default(),\n+                DropTraitConstraints: DropTraitConstraints,\n+                TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n+                NonPanicFmt: NonPanicFmt,\n+                NoopMethodCall: NoopMethodCall,\n+                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n+                InvalidAtomicOrdering: InvalidAtomicOrdering,\n+                NamedAsmLabels: NamedAsmLabels,\n             ]\n         );\n     };"}, {"sha": "acb9bda31d104bc23762666717eee84cd6436532", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -1,3 +1,15 @@\n+warning: the type `!` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:4:14\n+   |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              this code causes undefined behavior when executed\n+   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: `#[warn(invalid_value)]` on by default\n+   = note: the `!` type has no valid value\n+\n error[E0080]: evaluation of constant value failed\n   --> $DIR/validate_uninhabited_zsts.rs:4:14\n    |\n@@ -19,18 +31,6 @@ LL | const BAR: [empty::Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n-warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:4:14\n-   |\n-LL |     unsafe { std::mem::transmute(()) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              this code causes undefined behavior when executed\n-   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n-   |\n-   = note: `#[warn(invalid_value)]` on by default\n-   = note: the `!` type has no valid value\n-\n warning: the type `empty::Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:23:42\n    |"}, {"sha": "104899f490012ba433ae6d65b6997781347f3b1b", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -10,7 +10,15 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | static FOO: () = FOO;\n    |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | / static FOO: () = FOO;\n+LL | |\n+LL | | fn main() {\n+LL | |     FOO\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "104899f490012ba433ae6d65b6997781347f3b1b", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -10,7 +10,15 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | static FOO: () = FOO;\n    |                  ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-zst-static.rs:10:1\n+   |\n+LL | / static FOO: () = FOO;\n+LL | |\n+LL | | fn main() {\n+LL | |     FOO\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "8d5113cbfd9f5175551f20c96d9874cc97f808f2", "filename": "src/test/ui/consts/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fwrite-to-static-mut-in-static.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -16,7 +16,17 @@ note: ...which requires const-evaluating + checking `C`...\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n    |                                  ^^^^^\n    = note: ...which again requires const-evaluating + checking `C`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/write-to-static-mut-in-static.rs:1:1\n+   |\n+LL | / pub static mut A: u32 = 0;\n+LL | | pub static mut B: () = unsafe { A = 1; };\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4d2c8c3d9ccd63bc5ddac52f9e7f9201b4874e5", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -10,7 +10,14 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | pub static FOO: u32 = FOO;\n    |                       ^^^\n    = note: ...which again requires const-evaluating + checking `FOO`, completing the cycle\n-   = note: cycle used when running analysis passes on this crate\n+note: cycle used when linting top-level module\n+  --> $DIR/recursive-static-definition.rs:1:1\n+   |\n+LL | / pub static FOO: u32 = FOO;\n+LL | |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n \n error: aborting due to previous error\n "}, {"sha": "855e5dca92a7c1102a0c5e5ee9a0e2cf06870f53", "filename": "src/test/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae1d9746876fe395cea4b734c7ef27dda55e21f/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=dae1d9746876fe395cea4b734c7ef27dda55e21f", "patch": "@@ -49,12 +49,6 @@ error[E0080]: could not evaluate static initializer\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/uninhabited-static.rs:16:32\n-   |\n-LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n-\n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31\n    |\n@@ -67,6 +61,12 @@ LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n    = note: `#[warn(invalid_value)]` on by default\n    = note: enums with no variants have no valid value\n \n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/uninhabited-static.rs:16:32\n+   |\n+LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n+\n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:16:32\n    |"}]}