{"sha": "06306770f83404fe5f73658d3e041768ec5736af", "node_id": "C_kwDOAAsO6NoAKDA2MzA2NzcwZjgzNDA0ZmU1ZjczNjU4ZDNlMDQxNzY4ZWM1NzM2YWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-28T21:22:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-28T21:22:20Z"}, "message": "Rollup merge of #105702 - albertlarsan68:x-fmt-opt, r=jyn514\n\nFormat only modified files\n\nAs discussed on #105688, this makes x fmt only format modified files.\n\nFixes #105688", "tree": {"sha": "88e5fbe0f51bbb8b3498c81cbc2f0740c6537d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e5fbe0f51bbb8b3498c81cbc2f0740c6537d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06306770f83404fe5f73658d3e041768ec5736af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrLOMCRBK7hj4Ov3rIwAALkkIAFfssClFCR4D7oScSAb+OzjH\nqZBdRsozLuXq+/qR7yUd3xzTm9dp06ah5Bp9dKQfzPwz+Ic9jbd216FvbM3fysml\nsYT+NuwmCVWKtvUSyhnMzo4xiSxTjdj88+Hhe9pYhPcCU72HNMkAcKwL5FvB6gJ3\ncrY43nLurkhCYx6yYJb0lkwD3vF7yKTi/VL82H0bBMFGUNI97HLWG92OxxJJDKIa\nPgYk/gKzgZD8L1mAp6jth5knQqzBgzezyMweCYz8NxLMrHFMlLxQ94sPJz7jnZCQ\nfNEaeGkI6VIebALiPav5uYXgxw0IpyEuHJqLCcMG66XWEhhShG3ufMvTrsvFrFg=\n=DLHa\n-----END PGP SIGNATURE-----\n", "payload": "tree 88e5fbe0f51bbb8b3498c81cbc2f0740c6537d2d\nparent c52d58f346aea2e2e7ed650ee95785d33500a6d0\nparent 0b942a879d438216e90304436e74fa1ebb3ac16c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672262540 +0100\ncommitter GitHub <noreply@github.com> 1672262540 +0100\n\nRollup merge of #105702 - albertlarsan68:x-fmt-opt, r=jyn514\n\nFormat only modified files\n\nAs discussed on #105688, this makes x fmt only format modified files.\n\nFixes #105688\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06306770f83404fe5f73658d3e041768ec5736af", "html_url": "https://github.com/rust-lang/rust/commit/06306770f83404fe5f73658d3e041768ec5736af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06306770f83404fe5f73658d3e041768ec5736af/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c52d58f346aea2e2e7ed650ee95785d33500a6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52d58f346aea2e2e7ed650ee95785d33500a6d0", "html_url": "https://github.com/rust-lang/rust/commit/c52d58f346aea2e2e7ed650ee95785d33500a6d0"}, {"sha": "0b942a879d438216e90304436e74fa1ebb3ac16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b942a879d438216e90304436e74fa1ebb3ac16c", "html_url": "https://github.com/rust-lang/rust/commit/0b942a879d438216e90304436e74fa1ebb3ac16c"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "4105fa5ec96006ac611439266af31ba70809084d", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=06306770f83404fe5f73658d3e041768ec5736af", "patch": "@@ -15,6 +15,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - Several unsupported `./configure` options have been removed: `optimize`, `parallel-compiler`. These can still be enabled with `--set`, although it isn't recommended.\n - `remote-test-server`'s `verbose` argument has been removed in favor of the `--verbose` flag\n - `remote-test-server`'s `remote` argument has been removed in favor of the `--bind` flag. Use `--bind 0.0.0.0:12345` to replicate the behavior of the `remote` argument.\n+- `x.py fmt` now formats only files modified between the merge-base of HEAD and the last commit in the master branch of the rust-lang repository and the current working directory. To restore old behaviour, use `x.py fmt .`. The check mode is not affected by this change. [#105702](https://github.com/rust-lang/rust/pull/105702)\n \n ### Non-breaking changes\n "}, {"sha": "8e363ee1290eea83be0b87b9e3c79365c370a218", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=06306770f83404fe5f73658d3e041768ec5736af", "patch": "@@ -94,6 +94,7 @@ fn clean_default(build: &Build, all: bool) {\n         rm_rf(&build.out.join(\"tmp\"));\n         rm_rf(&build.out.join(\"dist\"));\n         rm_rf(&build.out.join(\"bootstrap\"));\n+        rm_rf(&build.out.join(\"rustfmt.stamp\"));\n \n         for host in &build.hosts {\n             let entries = match build.out.join(host.triple).read_dir() {"}, {"sha": "b49322e3c028fc07d5eb1a54702a08d97d7e59be", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06306770f83404fe5f73658d3e041768ec5736af/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=06306770f83404fe5f73658d3e041768ec5736af", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, t};\n+use crate::util::{output, program_out_of_date, t};\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -44,6 +44,90 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     }\n }\n \n+fn get_rustfmt_version(build: &Builder<'_>) -> Option<(String, PathBuf)> {\n+    let stamp_file = build.out.join(\"rustfmt.stamp\");\n+\n+    let mut cmd = Command::new(match build.initial_rustfmt() {\n+        Some(p) => p,\n+        None => return None,\n+    });\n+    cmd.arg(\"--version\");\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(_) => return None,\n+    };\n+    if !output.status.success() {\n+        return None;\n+    }\n+    Some((String::from_utf8(output.stdout).unwrap(), stamp_file))\n+}\n+\n+/// Return whether the format cache can be reused.\n+fn verify_rustfmt_version(build: &Builder<'_>) -> bool {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return false;};\n+    !program_out_of_date(&stamp_file, &version)\n+}\n+\n+/// Updates the last rustfmt version used\n+fn update_rustfmt_version(build: &Builder<'_>) {\n+    let Some((version, stamp_file)) = get_rustfmt_version(build) else {return;};\n+    t!(std::fs::write(stamp_file, version))\n+}\n+\n+/// Returns the files modified between the `merge-base` of HEAD and\n+/// rust-lang/master and what is now on the disk.\n+///\n+/// Returns `None` if all files should be formatted.\n+fn get_modified_files(build: &Builder<'_>) -> Option<Vec<String>> {\n+    let Ok(remote) = get_rust_lang_rust_remote() else {return None;};\n+    if !verify_rustfmt_version(build) {\n+        return None;\n+    }\n+    Some(\n+        output(\n+            build\n+                .config\n+                .git()\n+                .arg(\"diff-index\")\n+                .arg(\"--name-only\")\n+                .arg(\"--merge-base\")\n+                .arg(&format!(\"{remote}/master\")),\n+        )\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .collect(),\n+    )\n+}\n+\n+/// Finds the remote for rust-lang/rust.\n+/// For example for these remotes it will return `upstream`.\n+/// ```text\n+/// origin  https://github.com/Nilstrieb/rust.git (fetch)\n+/// origin  https://github.com/Nilstrieb/rust.git (push)\n+/// upstream        https://github.com/rust-lang/rust (fetch)\n+/// upstream        https://github.com/rust-lang/rust (push)\n+/// ```\n+fn get_rust_lang_rust_remote() -> Result<String, String> {\n+    let mut git = Command::new(\"git\");\n+    git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n+\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+    if !output.status.success() {\n+        return Err(\"failed to execute git config command\".to_owned());\n+    }\n+\n+    let stdout = String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?;\n+\n+    let rust_lang_remote = stdout\n+        .lines()\n+        .find(|remote| remote.contains(\"rust-lang\"))\n+        .ok_or_else(|| \"rust-lang/rust remote not found\".to_owned())?;\n+\n+    let remote_name =\n+        rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n+    Ok(remote_name.into())\n+}\n+\n #[derive(serde::Deserialize)]\n struct RustfmtConfig {\n     ignore: Vec<String>,\n@@ -110,6 +194,14 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 // preventing the latter from being formatted.\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n+            if !check && paths.is_empty() {\n+                if let Some(files) = get_modified_files(build) {\n+                    for file in files {\n+                        println!(\"formatting modified file {file}\");\n+                        ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                    }\n+                }\n+            }\n         } else {\n             println!(\"Not in git tree. Skipping git-aware format checks\");\n         }\n@@ -187,4 +279,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     drop(tx);\n \n     thread.join().unwrap();\n+    if !check {\n+        update_rustfmt_version(build);\n+    }\n }"}]}