{"sha": "090b16717a3bfbc2a35b51032f3849f372c67fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MGIxNjcxN2EzYmZiYzJhMzViNTEwMzJmMzg0OWYzNzJjNjdmYWQ=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-30T22:38:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-30T22:38:53Z"}, "message": "Factor out StmtKind::MacCall fields into `MacCallStmt` struct\n\nIn PR #76130, I add a fourth field, which makes using a tuple variant\nsomewhat unwieldy.", "tree": {"sha": "567f059f7576a0e7add93d55643568b3da224a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567f059f7576a0e7add93d55643568b3da224a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/090b16717a3bfbc2a35b51032f3849f372c67fad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9MKrEACgkQtAh+UQ6Y\nsWRWCA/8CS5KSgfmins+5SgnmthoBKaDtvaHAH9nqeZMBWX3jGlmhgpt6qz7xaml\nfSMOdcQDirkuZbrHs376UxEf3LTHnzuq+l8/qY9iCRHXWjhdPV5rUP6RSXxDyv+V\n+meIiRV1E4o9vUMXAoJtzQsAqvur8xM4v6JV0chEaaHIjs2bkSkeqS3ykRa9igQc\n+4uD01L7IB1tEDoJYbaXL8a20n7FeVaBuL8uYLBpXau5pG5iW+P5fNTF258wleHp\nwuQ+hs6IvD56I1EltuHsxp9sPLkUMx2cAc6nFI2h2zzNoAtOUFAyAH8vBuOdvB/p\nJXPyBfCmvSckb3q4s188dLXJj5Qh+R9UMVRE6aVyC8eX7RiFGCgi/CGeHiST3uRk\n8+H5PmXs/tdjk7PvUNX1Fi5BMcp7XQswHjNSMa1izxM1srGtShxrU/1S5dod2f2M\n2XbYE4jrtqimeI7vSLGIM/1XPBwh5fxO1iTv1ycCN3fGMFs6990jNtGnaGz1GWQz\n5KeWQQXdaXwY+TQ4R37eccuS652RFgLZ6fQHZ+pQanrJJo9oG5zmGGrvl1Fi7WdO\nffQhfKr4ORU6k2qG/TRMRl84TiwBpefb2xfAs81Nynf8g+gd7Al7LDw4/Qr2wmTP\n3qI62y7oUtfJQMW/b+AkwMBBu0ph5SoO0+cxr9URaoMLVYWUvKk=\n=j55f\n-----END PGP SIGNATURE-----", "payload": "tree 567f059f7576a0e7add93d55643568b3da224a73\nparent 85fbf49ce0e2274d0acf798f6e703747674feec3\nauthor Aaron Hill <aa1ronham@gmail.com> 1598827112 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1598827133 -0400\n\nFactor out StmtKind::MacCall fields into `MacCallStmt` struct\n\nIn PR #76130, I add a fourth field, which makes using a tuple variant\nsomewhat unwieldy.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/090b16717a3bfbc2a35b51032f3849f372c67fad", "html_url": "https://github.com/rust-lang/rust/commit/090b16717a3bfbc2a35b51032f3849f372c67fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/090b16717a3bfbc2a35b51032f3849f372c67fad/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "49aa1fc17357efac004445a15dfc35b3abf58cf4", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -922,9 +922,13 @@ impl Stmt {\n     pub fn add_trailing_semicolon(mut self) -> Self {\n         self.kind = match self.kind {\n             StmtKind::Expr(expr) => StmtKind::Semi(expr),\n-            StmtKind::MacCall(mac) => StmtKind::MacCall(\n-                mac.map(|(mac, _style, attrs)| (mac, MacStmtStyle::Semicolon, attrs)),\n-            ),\n+            StmtKind::MacCall(mac) => {\n+                StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs }| MacCallStmt {\n+                    mac,\n+                    style: MacStmtStyle::Semicolon,\n+                    attrs,\n+                }))\n+            }\n             kind => kind,\n         };\n         self\n@@ -958,7 +962,14 @@ pub enum StmtKind {\n     /// Just a trailing semi-colon.\n     Empty,\n     /// Macro.\n-    MacCall(P<(MacCall, MacStmtStyle, AttrVec)>),\n+    MacCall(P<MacCallStmt>),\n+}\n+\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct MacCallStmt {\n+    pub mac: MacCall,\n+    pub style: MacStmtStyle,\n+    pub attrs: AttrVec,\n }\n \n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug)]"}, {"sha": "12d6f7cc33ddc2977143a820d0a93b3297337f90", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -16,7 +16,6 @@ use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n \n use std::iter;\n-use std::ops::DerefMut;\n \n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n@@ -634,10 +633,7 @@ impl HasAttrs for StmtKind {\n             StmtKind::Local(ref local) => local.attrs(),\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n             StmtKind::Empty | StmtKind::Item(..) => &[],\n-            StmtKind::MacCall(ref mac) => {\n-                let (_, _, ref attrs) = **mac;\n-                attrs.attrs()\n-            }\n+            StmtKind::MacCall(ref mac) => mac.attrs.attrs(),\n         }\n     }\n \n@@ -647,8 +643,7 @@ impl HasAttrs for StmtKind {\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr.visit_attrs(f),\n             StmtKind::Empty | StmtKind::Item(..) => {}\n             StmtKind::MacCall(mac) => {\n-                let (_mac, _style, attrs) = mac.deref_mut();\n-                attrs.visit_attrs(f);\n+                mac.attrs.visit_attrs(f);\n             }\n         }\n     }"}, {"sha": "3ef83ef3fc9737d9434540f8e72dec87f5067e98", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -1305,7 +1305,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n         StmtKind::Semi(expr) => vis.filter_map_expr(expr).into_iter().map(StmtKind::Semi).collect(),\n         StmtKind::Empty => smallvec![StmtKind::Empty],\n         StmtKind::MacCall(mut mac) => {\n-            let (mac_, _semi, attrs) = mac.deref_mut();\n+            let MacCallStmt { mac: mac_, style: _, attrs } = mac.deref_mut();\n             vis.visit_mac(mac_);\n             visit_thin_attrs(attrs, vis);\n             smallvec![StmtKind::MacCall(mac)]"}, {"sha": "234ce280f97c4e5ee3ac7f01b8cbdbed598474ef", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -692,7 +692,7 @@ pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n         StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => visitor.visit_expr(expr),\n         StmtKind::Empty => {}\n         StmtKind::MacCall(ref mac) => {\n-            let (ref mac, _, ref attrs) = **mac;\n+            let MacCallStmt { ref mac, style: _, ref attrs } = **mac;\n             visitor.visit_mac(mac);\n             for attr in attrs.iter() {\n                 visitor.visit_attribute(attr);"}, {"sha": "53b6d536a4a4ee1540f0052b251ef6274c82de7d", "filename": "compiler/rustc_ast_pretty/src/pprust.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -1507,11 +1507,10 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n             }\n             ast::StmtKind::MacCall(ref mac) => {\n-                let (ref mac, style, ref attrs) = **mac;\n                 self.space_if_not_bol();\n-                self.print_outer_attributes(attrs);\n-                self.print_mac(mac);\n-                if style == ast::MacStmtStyle::Semicolon {\n+                self.print_outer_attributes(&mac.attrs);\n+                self.print_mac(&mac.mac);\n+                if mac.style == ast::MacStmtStyle::Semicolon {\n                     self.s.word(\";\");\n                 }\n             }"}, {"sha": "8db16c169b090272368282251db973de2f3a3952", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AttrItem, Block, LitKind, NodeId, PatKind, Path};\n-use rustc_ast::{ItemKind, MacArgs, MacStmtStyle, StmtKind};\n+use rustc_ast::{ItemKind, MacArgs, MacCallStmt, MacStmtStyle, StmtKind};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_data_structures::map_in_place::MapInPlace;\n@@ -1363,7 +1363,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         if let StmtKind::MacCall(mac) = stmt.kind {\n-            let (mac, style, attrs) = mac.into_inner();\n+            let MacCallStmt { mac, style, attrs } = mac.into_inner();\n             self.check_attributes(&attrs);\n             let mut placeholder =\n                 self.collect_bang(mac, stmt.span, AstFragmentKind::Stmts).make_stmts();"}, {"sha": "dbd2e70af6a7af128915e820cebab950ffb483dc", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -92,7 +92,11 @@ pub fn placeholder(\n             AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::MacCall(mac_placeholder()) }))\n         }\n         AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n-            let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ast::AttrVec::new()));\n+            let mac = P(ast::MacCallStmt {\n+                mac: mac_placeholder(),\n+                style: ast::MacStmtStyle::Braces,\n+                attrs: ast::AttrVec::new(),\n+            });\n             ast::Stmt { id, span, kind: ast::StmtKind::MacCall(mac) }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![ast::Arm {\n@@ -293,7 +297,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n \n     fn flat_map_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n         let (style, mut stmts) = match stmt.kind {\n-            ast::StmtKind::MacCall(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n+            ast::StmtKind::MacCall(mac) => (mac.style, self.remove(stmt.id).make_stmts()),\n             _ => return noop_flat_map_stmt(stmt, self),\n         };\n "}, {"sha": "341590c622cf1524f3dbf2230ea5e5c6e24db348", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/090b16717a3bfbc2a35b51032f3849f372c67fad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=090b16717a3bfbc2a35b51032f3849f372c67fad", "patch": "@@ -10,7 +10,7 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_ast::{AttrStyle, AttrVec, Attribute, MacCall, MacStmtStyle};\n+use rustc_ast::{AttrStyle, AttrVec, Attribute, MacCall, MacCallStmt, MacStmtStyle};\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n@@ -106,7 +106,7 @@ impl<'a> Parser<'a> {\n \n         let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n         {\n-            StmtKind::MacCall(P((mac, style, attrs)))\n+            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs }))\n         } else {\n             // Since none of the above applied, this is an expression statement macro.\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());"}]}