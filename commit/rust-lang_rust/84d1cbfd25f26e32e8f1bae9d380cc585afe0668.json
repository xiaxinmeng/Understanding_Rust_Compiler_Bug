{"sha": "84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZDFjYmZkMjVmMjZlMzJlOGYxYmFlOWQzODBjYzU4NWFmZTA2Njg=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-10-13T03:38:04Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-10-13T16:25:08Z"}, "message": "Don't ICE on bad extern paths\n\nCloses #17990", "tree": {"sha": "7a01300e9654c7bcb68248ba4975f049f568a777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a01300e9654c7bcb68248ba4975f049f568a777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "html_url": "https://github.com/rust-lang/rust/commit/84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84d1cbfd25f26e32e8f1bae9d380cc585afe0668/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff61b74a7d98bae2586047227579733080b71cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff61b74a7d98bae2586047227579733080b71cf6", "html_url": "https://github.com/rust-lang/rust/commit/ff61b74a7d98bae2586047227579733080b71cf6"}], "stats": {"total": 85, "additions": 54, "deletions": 31}, "files": [{"sha": "d6b02a1d0639efb51e713831234b4f40ce6363b8", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 40, "deletions": 31, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/84d1cbfd25f26e32e8f1bae9d380cc585afe0668/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d1cbfd25f26e32e8f1bae9d380cc585afe0668/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -641,41 +641,50 @@ impl<'a> Context<'a> {\n         // rlibs/dylibs.\n         let sess = self.sess;\n         let dylibname = self.dylibname();\n-        let mut locs = locs.iter().map(|l| Path::new(l.as_slice())).filter(|loc| {\n-            if !loc.exists() {\n-                sess.err(format!(\"extern location does not exist: {}\",\n-                                 loc.display()).as_slice());\n-                return false;\n-            }\n-            let file = loc.filename_str().unwrap();\n-            if file.starts_with(\"lib\") && file.ends_with(\".rlib\") {\n-                return true\n-            } else {\n-                match dylibname {\n-                    Some((prefix, suffix)) => {\n-                        if file.starts_with(prefix) && file.ends_with(suffix) {\n-                            return true\n+        let mut rlibs = HashSet::new();\n+        let mut dylibs = HashSet::new();\n+        {\n+            let mut locs = locs.iter().map(|l| Path::new(l.as_slice())).filter(|loc| {\n+                if !loc.exists() {\n+                    sess.err(format!(\"extern location for {} does not exist: {}\",\n+                                     self.crate_name, loc.display()).as_slice());\n+                    return false;\n+                }\n+                let file = match loc.filename_str() {\n+                    Some(file) => file,\n+                    None => {\n+                        sess.err(format!(\"extern location for {} is not a file: {}\",\n+                                         self.crate_name, loc.display()).as_slice());\n+                        return false;\n+                    }\n+                };\n+                if file.starts_with(\"lib\") && file.ends_with(\".rlib\") {\n+                    return true\n+                } else {\n+                    match dylibname {\n+                        Some((prefix, suffix)) => {\n+                            if file.starts_with(prefix) && file.ends_with(suffix) {\n+                                return true\n+                            }\n                         }\n+                        None => {}\n                     }\n-                    None => {}\n                 }\n-            }\n-            sess.err(format!(\"extern location is of an unknown type: {}\",\n-                             loc.display()).as_slice());\n-            false\n-        });\n+                sess.err(format!(\"extern location for {} is of an unknown type: {}\",\n+                                 self.crate_name, loc.display()).as_slice());\n+                false\n+            });\n \n-        // Now that we have an iterator of good candidates, make sure there's at\n-        // most one rlib and at most one dylib.\n-        let mut rlibs = HashSet::new();\n-        let mut dylibs = HashSet::new();\n-        for loc in locs {\n-            if loc.filename_str().unwrap().ends_with(\".rlib\") {\n-                rlibs.insert(fs::realpath(&loc).unwrap());\n-            } else {\n-                dylibs.insert(fs::realpath(&loc).unwrap());\n+            // Now that we have an iterator of good candidates, make sure there's at\n+            // most one rlib and at most one dylib.\n+            for loc in locs {\n+                if loc.filename_str().unwrap().ends_with(\".rlib\") {\n+                    rlibs.insert(fs::realpath(&loc).unwrap());\n+                } else {\n+                    dylibs.insert(fs::realpath(&loc).unwrap());\n+                }\n             }\n-        }\n+        };\n \n         // Extract the rlib/dylib pair.\n         let mut metadata = None;"}, {"sha": "9b7df81a5dcbd666e0e489327f6dc9d97516f519", "filename": "src/test/compile-fail/empty-extern-arg.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84d1cbfd25f26e32e8f1bae9d380cc585afe0668/src%2Ftest%2Fcompile-fail%2Fempty-extern-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84d1cbfd25f26e32e8f1bae9d380cc585afe0668/src%2Ftest%2Fcompile-fail%2Fempty-extern-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-extern-arg.rs?ref=84d1cbfd25f26e32e8f1bae9d380cc585afe0668", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --extern std=\n+// error-pattern: is not a file\n+\n+fn main() {}"}]}