{"sha": "a707f401074bc769bab4efb2bfdde7f6c5a4068d", "node_id": "C_kwDOAAsO6NoAKGE3MDdmNDAxMDc0YmM3NjliYWI0ZWZiMmJmZGRlN2Y2YzVhNDA2OGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-29T20:00:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-29T20:00:47Z"}, "message": "Auto merge of #95819 - oli-obk:mir_can't_hold_all_these_lifetimes, r=estebank\n\nEnforce Copy bounds for repeat elements while considering lifetimes\n\nfixes https://github.com/rust-lang/rust/issues/95477\n\nthis is a breaking change in order to fix a soundness bug.\n\nBefore this PR we only checked whether the repeat element type had an `impl Copy`, but not whether that impl also had the appropriate lifetimes. E.g. if the impl was for `YourType<'static>` and not a general `'a`, then copying any type other than a `'static` one should have been rejected, but wasn't.\n\nr? `@lcnr`", "tree": {"sha": "8146935aee88552868c76b369281cf69fc71b74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8146935aee88552868c76b369281cf69fc71b74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a707f401074bc769bab4efb2bfdde7f6c5a4068d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a707f401074bc769bab4efb2bfdde7f6c5a4068d", "html_url": "https://github.com/rust-lang/rust/commit/a707f401074bc769bab4efb2bfdde7f6c5a4068d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a707f401074bc769bab4efb2bfdde7f6c5a4068d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8966e5e9dc099b55206f34af81242d03bdb413", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8966e5e9dc099b55206f34af81242d03bdb413", "html_url": "https://github.com/rust-lang/rust/commit/1c8966e5e9dc099b55206f34af81242d03bdb413"}, {"sha": "67ce547f474fbe34e8aafe4bfc284c3856673744", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ce547f474fbe34e8aafe4bfc284c3856673744", "html_url": "https://github.com/rust-lang/rust/commit/67ce547f474fbe34e8aafe4bfc284c3856673744"}], "stats": {"total": 281, "additions": 184, "deletions": 97}, "files": [{"sha": "c4a190b44cbd4816c10bb732e84ab62f4b5a5680", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 41, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -37,18 +37,13 @@ use rustc_middle::ty::{\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::infer::InferCtxtExt as _;\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::type_op;\n use rustc_trait_selection::traits::query::type_op::custom::scrape_region_constraints;\n use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::Fallible;\n-use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligation};\n+use rustc_trait_selection::traits::PredicateObligation;\n \n-use rustc_const_eval::transform::{\n-    check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n-};\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::MoveData;\n use rustc_mir_dataflow::ResultsCursor;\n@@ -1868,41 +1863,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n                             let span = body.source_info(location).span;\n-                            let ty = operand.ty(body, tcx);\n-                            if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n-                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n-                                let is_const_fn =\n-                                    is_const_fn_in_array_repeat_expression(&ccx, &place, &body);\n-\n-                                debug!(\"check_rvalue: is_const_fn={:?}\", is_const_fn);\n-\n-                                let def_id = body.source.def_id().expect_local();\n-                                let obligation = traits::Obligation::new(\n-                                    ObligationCause::new(\n-                                        span,\n-                                        self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                        traits::ObligationCauseCode::RepeatElementCopy {\n-                                            is_const_fn,\n-                                        },\n-                                    ),\n-                                    self.param_env,\n-                                    ty::Binder::dummy(ty::TraitRef::new(\n-                                        self.tcx().require_lang_item(\n-                                            LangItem::Copy,\n-                                            Some(self.last_span),\n-                                        ),\n-                                        tcx.mk_substs_trait(ty, &[]),\n-                                    ))\n-                                    .without_const()\n-                                    .to_predicate(self.tcx()),\n-                                );\n-                                self.infcx.report_selection_error(\n-                                    obligation.clone(),\n-                                    &obligation,\n-                                    &traits::SelectionError::Unimplemented,\n-                                    false,\n-                                );\n-                            }\n+                            let ty = place.ty(body, tcx).ty;\n+                            let trait_ref = ty::TraitRef::new(\n+                                tcx.require_lang_item(LangItem::Copy, Some(span)),\n+                                tcx.mk_substs_trait(ty, &[]),\n+                            );\n+\n+                            self.prove_trait_ref(\n+                                trait_ref,\n+                                Locations::Single(location),\n+                                ConstraintCategory::CopyBound,\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "187df6f7de0ff314197e309f7e6c8642383b289c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -2227,7 +2227,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n-                    \"the `Copy` trait is required because the repeated element will be copied\",\n+                    \"the `Copy` trait is required because this value will be copied for each element of the array\",\n                 );\n \n                 if is_const_fn {"}, {"sha": "a1e8d2040dd80d82429fa9b4984a656fb3145ef6", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1292,9 +1292,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return tcx.ty_error();\n         }\n \n+        self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n+\n         tcx.mk_ty(ty::Array(t, count))\n     }\n \n+    fn check_repeat_element_needs_copy_bound(\n+        &self,\n+        element: &hir::Expr<'_>,\n+        count: ty::Const<'tcx>,\n+        element_ty: Ty<'tcx>,\n+    ) {\n+        let tcx = self.tcx;\n+        // Actual constants as the repeat element get inserted repeatedly instead of getting copied via Copy.\n+        match &element.kind {\n+            hir::ExprKind::ConstBlock(..) => return,\n+            hir::ExprKind::Path(qpath) => {\n+                let res = self.typeck_results.borrow().qpath_res(qpath, element.hir_id);\n+                if let Res::Def(DefKind::Const | DefKind::AssocConst | DefKind::AnonConst, _) = res\n+                {\n+                    return;\n+                }\n+            }\n+            _ => {}\n+        }\n+        // If someone calls a const fn, they can extract that call out into a separate constant (or a const\n+        // block in the future), so we check that to tell them that in the diagnostic. Does not affect typeck.\n+        let is_const_fn = match element.kind {\n+            hir::ExprKind::Call(func, _args) => match *self.node_ty(func.hir_id).kind() {\n+                ty::FnDef(def_id, _) => tcx.is_const_fn(def_id),\n+                _ => false,\n+            },\n+            _ => false,\n+        };\n+\n+        // If the length is 0, we don't create any elements, so we don't copy any. If the length is 1, we\n+        // don't copy that one element, we move it. Only check for Copy if the length is larger.\n+        if count.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+            let lang_item = self.tcx.require_lang_item(LangItem::Copy, None);\n+            let code = traits::ObligationCauseCode::RepeatElementCopy { is_const_fn };\n+            self.require_type_meets(element_ty, element.span, code, lang_item);\n+        }\n+    }\n+\n     fn check_expr_tuple(\n         &self,\n         elts: &'tcx [hir::Expr<'tcx>],"}, {"sha": "724bdcd920ab46c12f71adfdbfa347b53fd76939", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/repeat_empty_ok.rs:8:19\n+  --> $DIR/repeat_empty_ok.rs:8:20\n    |\n LL |     let headers = [Header{value: &[]}; 128];\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]\n    |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/repeat_empty_ok.rs:13:19\n+  --> $DIR/repeat_empty_ok.rs:13:20\n    |\n LL |     let headers = [Header{value: &[0]}; 128];\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n+   |                    ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]"}, {"sha": "5bb35669623671649c292794a1fbe8dccc3a7fd2", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:6:5\n+  --> $DIR/issue-61336-2.rs:6:6\n    |\n LL |     [x; { N }]\n-   |     ^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |      ^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {"}, {"sha": "8d9e545b4568975d28182a4f48050adf4c79e1fc", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:6:5\n+  --> $DIR/issue-61336.rs:6:6\n    |\n LL |     [x; N]\n-   |     ^^^^^^ the trait `Copy` is not implemented for `T`\n+   |      ^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {"}, {"sha": "18b4dc714ded0b036f1c73211eceeee0c7f1abc2", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -12,5 +12,5 @@ const fn copy() -> u32 {\n fn main() {\n     let _: [u32; 2] = [copy(); 2];\n     let _: [Option<Bar>; 2] = [no_copy(); 2];\n-    //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied\n+    //~^ ERROR the trait bound `Bar: Copy` is not satisfied\n }"}, {"sha": "5306fed225118c0434cc9347cb6d1025d48080cd", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,13 +1,17 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/fn-call-in-non-const.rs:14:31\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/fn-call-in-non-const.rs:14:32\n    |\n LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n-   |                               ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                ^^^^^^^^^ the trait `Copy` is not implemented for `Bar`\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d5a17249cc9dd378bff63436fa2d92e59f41e4e5", "filename": "src/test/ui/consts/const-blocks/migrate-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -11,13 +11,13 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "2e7ff5cb8b32c6da2b879432e3285499e25ed394", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,20 +1,28 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:13:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/migrate-fail.rs:13:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n+   |\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n \n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:19:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/migrate-fail.rs:19:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n+   |\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d4aef39e54016d7a99627a0f280ad03cf925094", "filename": "src/test/ui/consts/const-blocks/nll-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -10,13 +10,13 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR the trait bound `Option<Bar>: Copy` is not satisfied [E0277]\n+        //~^ ERROR the trait bound `Bar: Copy` is not satisfied [E0277]\n     }\n }\n "}, {"sha": "c0d273b5a9a2a14ce9c94c23dce6d12951c2a34e", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,20 +1,28 @@\n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:12:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/nll-fail.rs:12:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n+   |\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n \n-error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:18:37\n+error[E0277]: the trait bound `Bar: Copy` is not satisfied\n+  --> $DIR/nll-fail.rs:18:38\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n-   |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n+   |                                      ^ the trait `Copy` is not implemented for `Bar`\n+   |\n+   = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n+help: consider annotating `Bar` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n    |\n-   = help: the trait `Copy` is implemented for `Option<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors\n "}, {"sha": "49d1e9b9434202e9d8871345f64d27889abf1395", "filename": "src/test/ui/consts/const-blocks/trait-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -3,5 +3,5 @@ struct Foo<T>(T);\n \n fn main() {\n     [Foo(String::new()); 4];\n-    //~^ ERROR the trait bound `Foo<String>: Copy` is not satisfied [E0277]\n+    //~^ ERROR the trait bound `String: Copy` is not satisfied [E0277]\n }"}, {"sha": "ece200ad10b5b4bcbde24dd0e2220b463dc66719", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,11 +1,18 @@\n-error[E0277]: the trait bound `Foo<String>: Copy` is not satisfied\n-  --> $DIR/trait-error.rs:5:5\n+error[E0277]: the trait bound `String: Copy` is not satisfied\n+  --> $DIR/trait-error.rs:5:6\n    |\n LL |     [Foo(String::new()); 4];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Foo<String>`\n+   |      ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = help: the trait `Copy` is implemented for `Foo<T>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+note: required because of the requirements on the impl of `Copy` for `Foo<String>`\n+  --> $DIR/trait-error.rs:1:10\n+   |\n+LL | #[derive(Copy, Clone)]\n+   |          ^^^^\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n+   = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n+   = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9eb7524b5044b3acb1779e3977c7e2e768877f88", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/const-fn-in-vec.rs:4:32\n+  --> $DIR/const-fn-in-vec.rs:4:33\n    |\n LL |     let strings: [String; 5] = [String::new(); 5];\n-   |                                ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |                                 ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n "}, {"sha": "1d5d90ffcb43d4f55a2214940941a3c33cede939", "filename": "src/test/ui/lifetimes/copy_modulo_regions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -0,0 +1,19 @@\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+struct Foo<'a>(fn(&'a ()) -> &'a ());\n+\n+impl Copy for Foo<'static> {}\n+\n+fn mk_foo<'a>() -> Foo<'a> {\n+    println!(\"mk_foo\");\n+    Foo(|x| x)\n+}\n+\n+fn foo<'a>() -> [Foo<'a>; 100] {\n+    [mk_foo::<'a>(); 100] //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "e027bc45426edf8e64bafc246dc3826e5eb53286", "filename": "src/test/ui/lifetimes/copy_modulo_regions.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fcopy_modulo_regions.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/copy_modulo_regions.rs:14:5\n+   |\n+LL | fn foo<'a>() -> [Foo<'a>; 100] {\n+   |        -- lifetime `'a` defined here\n+LL |     [mk_foo::<'a>(); 100]\n+   |     ^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = note: requirement occurs because of the type `Foo<'_>`, which makes the generic argument `'_` invariant\n+   = note: the struct `Foo<'a>` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+error: aborting due to previous error\n+"}, {"sha": "8197713b97ed0a12af6af82699afd8b963fb7361", "filename": "src/test/ui/repeat-expr/infer.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Finfer.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#[derive(Clone, Default)]\n+struct MaybeCopy<T>(T);\n+\n+impl Copy for MaybeCopy<u8> {}\n+\n+fn is_copy<T: Copy>(x: T) {\n+    println!(\"{}\", std::any::type_name::<T>());\n+}\n+\n+fn main() {\n+    is_copy(MaybeCopy::default());\n+    [MaybeCopy::default(); 13];\n+    // didn't work, because `Copy` was only checked in the mir\n+}"}, {"sha": "0b8953793307a8a82c83f664faab1112d2cdc7d1", "filename": "src/test/ui/repeat-expr/repeat-expr-in-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-expr-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-expr-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-expr-in-static.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "previous_filename": "src/test/ui/repeat-expr-in-static.rs"}, {"sha": "0cd8eceefc5231dea5191580171902a0fe3c1901", "filename": "src/test/ui/repeat-expr/repeat-to-run-dtor-twice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "previous_filename": "src/test/ui/repeat-to-run-dtor-twice.rs"}, {"sha": "36b93616375e03f1deb4c4eabc19f51e91498866", "filename": "src/test/ui/repeat-expr/repeat-to-run-dtor-twice.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/repeat-to-run-dtor-twice.rs:17:13\n+  --> $DIR/repeat-to-run-dtor-twice.rs:17:15\n    |\n LL |     let _ = [ a; 5 ];\n-   |             ^^^^^^^^ the trait `Copy` is not implemented for `Foo`\n+   |               ^ the trait `Copy` is not implemented for `Foo`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]", "previous_filename": "src/test/ui/repeat-to-run-dtor-twice.stderr"}, {"sha": "96abff4ab413f10c10d619de7fcddde0bafd9257", "filename": "src/test/ui/repeat-expr/repeat_count.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "previous_filename": "src/test/ui/repeat_count.rs"}, {"sha": "59bcd954a1fde235c20e3c4d83b06e7dd7feca44", "filename": "src/test/ui/repeat-expr/repeat_count.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "previous_filename": "src/test/ui/repeat_count.stderr"}, {"sha": "6b715f727b2234a2c4295dbf71b1b362a5dd8740", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a707f401074bc769bab4efb2bfdde7f6c5a4068d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=a707f401074bc769bab4efb2bfdde7f6c5a4068d", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 980;\n+const ROOT_ENTRY_LIMIT: usize = 977;\n const ISSUES_ENTRY_LIMIT: usize = 2278;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}