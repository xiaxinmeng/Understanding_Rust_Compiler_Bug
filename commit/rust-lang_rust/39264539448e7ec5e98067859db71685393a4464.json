{"sha": "39264539448e7ec5e98067859db71685393a4464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MjY0NTM5NDQ4ZTdlYzVlOTgwNjc4NTlkYjcxNjg1MzkzYTQ0NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-15T16:00:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-15T16:00:40Z"}, "message": "Auto merge of #47813 - kennytm:stable-incl-range, r=nrc\n\nStabilize inclusive range (`..=`)\n\nStabilize the followings:\n\n* `inclusive_range` \u2014 The `std::ops::RangeInclusive` and `std::ops::RangeInclusiveTo` types, except its fields (tracked by #49022 separately).\n* `inclusive_range_syntax` \u2014 The `a..=b` and `..=b` expression syntax\n* `dotdoteq_in_patterns` \u2014 Using `a..=b` in a pattern\n\ncc #28237\nr? @rust-lang/lang", "tree": {"sha": "6a492ca09f4ca864ab619a0dc97565680bcd1030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a492ca09f4ca864ab619a0dc97565680bcd1030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39264539448e7ec5e98067859db71685393a4464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39264539448e7ec5e98067859db71685393a4464", "html_url": "https://github.com/rust-lang/rust/commit/39264539448e7ec5e98067859db71685393a4464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39264539448e7ec5e98067859db71685393a4464/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "html_url": "https://github.com/rust-lang/rust/commit/ff2d506c2c748bd218f74c6014abc4cecc8c74c4"}, {"sha": "939cfa251aeb34b4b1a11396af1a3396792c708d", "url": "https://api.github.com/repos/rust-lang/rust/commits/939cfa251aeb34b4b1a11396af1a3396792c708d", "html_url": "https://github.com/rust-lang/rust/commit/939cfa251aeb34b4b1a11396af1a3396792c708d"}], "stats": {"total": 443, "additions": 187, "deletions": 256}, "files": [{"sha": "56f58803150ca6ca274b5b9046f771f92e1c0627", "filename": "src/doc/unstable-book/src/language-features/inclusive-range-syntax.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finclusive-range-syntax.md?ref=ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "patch": "@@ -1,20 +0,0 @@\n-# `inclusive_range_syntax`\n-\n-The tracking issue for this feature is: [#28237]\n-\n-[#28237]: https://github.com/rust-lang/rust/issues/28237\n-\n-------------------------\n-\n-To get a range that goes from 0 to 10 and includes the value 10, you\n-can write `0..=10`:\n-\n-```rust\n-#![feature(inclusive_range_syntax)]\n-\n-fn main() {\n-    for i in 0..=10 {\n-        println!(\"{}\", i);\n-    }\n-}\n-```"}, {"sha": "2727bcaa28a9311c9f8d8d5bbdf5ced4ddde410c", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -98,7 +98,6 @@\n #![feature(fundamental)]\n #![feature(generic_param_attrs)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n@@ -125,6 +124,7 @@\n #![feature(on_unimplemented)]\n #![feature(exact_chunks)]\n #![feature(pointer_methods)]\n+#![feature(inclusive_range_fields)]\n \n #![cfg_attr(not(test), feature(fn_traits, placement_new_protocol, swap_with_slice, i128))]\n #![cfg_attr(test, feature(test, box_heap))]"}, {"sha": "b03abc8518087addd1b7d8976c3a0a1f45e06ca8", "filename": "src/liballoc/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frange.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -103,7 +103,7 @@ impl<T> RangeArgument<T> for Range<T> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> RangeArgument<T> for RangeInclusive<T> {\n     fn start(&self) -> Bound<&T> {\n         Included(&self.start)\n@@ -113,7 +113,7 @@ impl<T> RangeArgument<T> for RangeInclusive<T> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> RangeArgument<T> for RangeToInclusive<T> {\n     fn start(&self) -> Bound<&T> {\n         Unbounded"}, {"sha": "9fec90914985d83b567bd80bd87170b26cf38696", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -1950,7 +1950,7 @@ impl ops::Index<ops::RangeFull> for String {\n         unsafe { str::from_utf8_unchecked(&self.vec) }\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::Index<ops::RangeInclusive<usize>> for String {\n     type Output = str;\n \n@@ -1959,7 +1959,7 @@ impl ops::Index<ops::RangeInclusive<usize>> for String {\n         Index::index(&**self, index)\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::Index<ops::RangeToInclusive<usize>> for String {\n     type Output = str;\n \n@@ -1997,14 +1997,14 @@ impl ops::IndexMut<ops::RangeFull> for String {\n         unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::IndexMut<ops::RangeInclusive<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl ops::IndexMut<ops::RangeToInclusive<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {"}, {"sha": "bcd2ef27605830ec678ee59b4884715bf9918389", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -14,7 +14,7 @@\n #![feature(alloc_system)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(collection_placement)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n@@ -30,6 +30,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(exact_chunks)]\n+#![feature(inclusive_range_fields)]\n \n extern crate alloc_system;\n extern crate std_unicode;"}, {"sha": "8d1080bb876efdfb164c8c09def52961a3d0b756", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -186,9 +186,7 @@ macro_rules! range_exact_iter_impl {\n \n macro_rules! range_incl_exact_iter_impl {\n     ($($t:ty)*) => ($(\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n+        #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n         impl ExactSizeIterator for ops::RangeInclusive<$t> { }\n     )*)\n }\n@@ -202,9 +200,7 @@ macro_rules! range_trusted_len_impl {\n \n macro_rules! range_incl_trusted_len_impl {\n     ($($t:ty)*) => ($(\n-        #[unstable(feature = \"inclusive_range\",\n-                   reason = \"recently added, follows RFC\",\n-                   issue = \"28237\")]\n+        #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n         unsafe impl TrustedLen for ops::RangeInclusive<$t> { }\n     )*)\n }\n@@ -328,7 +324,7 @@ impl<A: Step> FusedIterator for ops::RangeFrom<A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<A: Step> TrustedLen for ops::RangeFrom<A> {}\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     type Item = A;\n \n@@ -422,7 +418,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {"}, {"sha": "9aebe2e4ee4b4eb90043592e704ead8ac43c618c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -79,7 +79,7 @@\n #![feature(fn_must_use)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]\n #![feature(iterator_repeat_with)]"}, {"sha": "234970a81faf72c36d3dc3511a6b74c3ec3f7eab", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -191,7 +191,7 @@ pub use self::index::{Index, IndexMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub use self::range::{RangeInclusive, RangeToInclusive};\n \n #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "be51f5239b0c64c2aef58bdce6611b8be78e19f6", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -128,7 +128,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// use std::f32::NAN;\n     /// assert!(!(3.0..5.0).is_empty());\n@@ -283,7 +283,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(inclusive_range,inclusive_range_syntax)]\n+/// #![feature(inclusive_range_fields)]\n ///\n /// assert_eq!((3..=5), std::ops::RangeInclusive { start: 3, end: 5 });\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n@@ -293,21 +293,17 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n /// ```\n #[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     /// The lower bound of the range (inclusive).\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[unstable(feature = \"inclusive_range_fields\", issue = \"49022\")]\n     pub start: Idx,\n     /// The upper bound of the range (inclusive).\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[unstable(feature = \"inclusive_range_fields\", issue = \"49022\")]\n     pub end: Idx,\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}..={:?}\", self.start, self.end)\n@@ -320,7 +316,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains,inclusive_range_syntax)]\n+    /// #![feature(range_contains)]\n     ///\n     /// assert!(!(3..=5).contains(2));\n     /// assert!( (3..=5).contains(3));\n@@ -341,7 +337,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// assert!(!(3..=5).is_empty());\n     /// assert!(!(3..=3).is_empty());\n@@ -351,7 +347,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// The range is empty if either side is incomparable:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// use std::f32::NAN;\n     /// assert!(!(3.0..=5.0).is_empty());\n@@ -362,7 +358,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// This method returns `true` after iteration has finished:\n     ///\n     /// ```\n-    /// #![feature(range_is_empty,inclusive_range_syntax)]\n+    /// #![feature(range_is_empty)]\n     ///\n     /// let mut r = 3..=5;\n     /// for _ in r.by_ref() {}\n@@ -385,16 +381,13 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// The `..=end` syntax is a `RangeToInclusive`:\n ///\n /// ```\n-/// #![feature(inclusive_range,inclusive_range_syntax)]\n /// assert_eq!((..=5), std::ops::RangeToInclusive{ end: 5 });\n /// ```\n ///\n /// It does not have an [`IntoIterator`] implementation, so you can't use it in a\n /// `for` loop directly. This won't compile:\n ///\n /// ```compile_fail,E0277\n-/// #![feature(inclusive_range_syntax)]\n-///\n /// // error[E0277]: the trait bound `std::ops::RangeToInclusive<{integer}>:\n /// // std::iter::Iterator` is not satisfied\n /// for i in ..=5 {\n@@ -406,8 +399,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// array elements up to and including the index indicated by `end`.\n ///\n /// ```\n-/// #![feature(inclusive_range_syntax)]\n-///\n /// let arr = [0, 1, 2, 3];\n /// assert_eq!(arr[ ..=2], [0,1,2  ]);  // RangeToInclusive\n /// assert_eq!(arr[1..=2], [  1,2  ]);\n@@ -417,16 +408,14 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n /// [slicing index]: ../slice/trait.SliceIndex.html\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeToInclusive<Idx> {\n     /// The upper bound of the range (inclusive)\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     pub end: Idx,\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"..={:?}\", self.end)\n@@ -440,7 +429,7 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains,inclusive_range_syntax)]\n+    /// #![feature(range_contains)]\n     ///\n     /// assert!( (..=5).contains(-1_000_000_000));\n     /// assert!( (..=5).contains(5));"}, {"sha": "0f1b7cb8fcc00ea34af430396864d97bb741ab9d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -1039,7 +1039,7 @@ impl<T> SliceIndex<[T]> for ops::RangeFull {\n }\n \n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     type Output = [T];\n \n@@ -1080,7 +1080,7 @@ impl<T> SliceIndex<[T]> for ops::RangeInclusive<usize> {\n     }\n }\n \n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n+#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n     type Output = [T];\n "}, {"sha": "9cf862bd93625f9e2604eef7abcc3eb685a40758", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -1779,9 +1779,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::Index<ops::RangeInclusive<usize>> for str {\n         type Output = str;\n \n@@ -1791,9 +1789,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::Index<ops::RangeToInclusive<usize>> for str {\n         type Output = str;\n \n@@ -1803,18 +1799,14 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::IndexMut<ops::RangeInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n             index.index_mut(self)\n         }\n     }\n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n@@ -1997,9 +1989,7 @@ mod traits {\n         }\n     }\n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl SliceIndex<str> for ops::RangeInclusive<usize> {\n         type Output = str;\n         #[inline]\n@@ -2042,9 +2032,7 @@ mod traits {\n \n \n \n-    #[unstable(feature = \"inclusive_range\",\n-               reason = \"recently added, follows RFC\",\n-               issue = \"28237\")]\n+    #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n     impl SliceIndex<str> for ops::RangeToInclusive<usize> {\n         type Output = str;\n         #[inline]"}, {"sha": "e53964b5769bd4edce5a188651b1a1ed61ea0e78", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -23,8 +23,7 @@\n #![feature(fmt_internals)]\n #![feature(iterator_step_by)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]\n #![feature(conservative_impl_trait)]\n@@ -48,6 +47,7 @@\n #![feature(exact_chunks)]\n #![feature(atomic_nand)]\n #![feature(reverse_bits)]\n+#![feature(inclusive_range_fields)]\n \n extern crate core;\n extern crate test;"}, {"sha": "9e755f366a7de39bb8b1cc0d794f1266477e81a3", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -1810,15 +1810,35 @@ impl<'a> State<'a> {\n                 self.pclose()?;\n             }\n             PatKind::Box(ref inner) => {\n+                let is_range_inner = match inner.node {\n+                    PatKind::Range(..) => true,\n+                    _ => false,\n+                };\n                 self.s.word(\"box \")?;\n+                if is_range_inner {\n+                    self.popen()?;\n+                }\n                 self.print_pat(&inner)?;\n+                if is_range_inner {\n+                    self.pclose()?;\n+                }\n             }\n             PatKind::Ref(ref inner, mutbl) => {\n+                let is_range_inner = match inner.node {\n+                    PatKind::Range(..) => true,\n+                    _ => false,\n+                };\n                 self.s.word(\"&\")?;\n                 if mutbl == hir::MutMutable {\n                     self.s.word(\"mut \")?;\n                 }\n+                if is_range_inner {\n+                    self.popen()?;\n+                }\n                 self.print_pat(&inner)?;\n+                if is_range_inner {\n+                    self.pclose()?;\n+                }\n             }\n             PatKind::Lit(ref e) => self.print_expr(&e)?,\n             PatKind::Range(ref begin, ref end, ref end_kind) => {"}, {"sha": "77259f156e5e24ff37dd636365849030c56162c8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -54,8 +54,7 @@\n #![feature(fs_read_write)]\n #![feature(i128)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![cfg_attr(windows, feature(libc))]\n #![feature(match_default_bindings)]\n #![feature(macro_lifetime_matcher)]\n@@ -76,6 +75,7 @@\n #![feature(trusted_len)]\n #![feature(catch_expr)]\n #![feature(test)]\n+#![feature(inclusive_range_fields)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "d7ccf9d5562e6027469024284799e5f4c4ae8e63", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -18,7 +18,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(specialization)]\n \n extern crate graphviz;"}, {"sha": "ff35412ea5bab6148dc8e06bb66fd7fd82cb29d8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -28,8 +28,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(dyn_trait)]\n #![feature(fs_read_write)]\n #![feature(i128_type)]\n-#![feature(inclusive_range_syntax)]\n-#![feature(inclusive_range)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(exhaustive_patterns)]\n@@ -40,6 +39,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nonzero)]\n #![feature(underscore_lifetimes)]\n #![cfg_attr(stage0, feature(never_type))]\n+#![feature(inclusive_range_fields)]\n \n extern crate arena;\n #[macro_use]"}, {"sha": "9b09dbf52761a6e3b72c184d36687c6d12b4ef09", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -26,14 +26,14 @@\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n #![feature(i128)]\n-#![feature(inclusive_range)]\n-#![feature(inclusive_range_syntax)]\n+#![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(optin_builtin_traits)]\n+#![feature(inclusive_range_fields)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}, {"sha": "cd9484de85a89d217386c8389d3beed7ab5adfd1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -271,7 +271,6 @@\n #![feature(heap_api)]\n #![feature(i128)]\n #![feature(i128_type)]\n-#![feature(inclusive_range)]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n #![feature(into_cow)]"}, {"sha": "1f87c1b94c50dd0e20eadb79ade0bcbbc3485c46", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -218,8 +218,6 @@ An inclusive range was used with no end.\n Erroneous code example:\n \n ```compile_fail,E0586\n-#![feature(inclusive_range_syntax)]\n-\n fn main() {\n     let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n     let x = &tmp[1..=]; // error: inclusive range was used with no end\n@@ -239,8 +237,6 @@ fn main() {\n Or put an end to your inclusive range:\n \n ```\n-#![feature(inclusive_range_syntax)]\n-\n fn main() {\n     let tmp = vec![0, 1, 2, 3, 4, 4, 3, 3, 2, 1];\n     let x = &tmp[1..=3]; // ok!"}, {"sha": "51fa14895993d3a8b6b93bb1e6b83abea70fa257", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -26,7 +26,7 @@ use self::AttributeType::*;\n use self::AttributeGate::*;\n \n use abi::Abi;\n-use ast::{self, NodeId, PatKind, RangeEnd, RangeSyntax};\n+use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n use epoch::Epoch;\n use codemap::Spanned;\n@@ -268,9 +268,6 @@ declare_features! (\n     // rustc internal\n     (active, abi_vectorcall, \"1.7.0\", None, None),\n \n-    // a..=b and ..=b\n-    (active, inclusive_range_syntax, \"1.7.0\", Some(28237), None),\n-\n     // X..Y patterns\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n@@ -402,9 +399,6 @@ declare_features! (\n     // allow `'_` placeholder lifetimes\n     (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n-    // allow `..=` in patterns (RFC 1192)\n-    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237), None),\n-\n     // Default match binding modes (RFC 2005)\n     (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n@@ -554,6 +548,10 @@ declare_features! (\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n     // Nested groups in `use` (RFC 2128)\n     (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n+    // a..=b and ..=b\n+    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n+    // allow `..=` in patterns (RFC 1192)\n+    (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1592,11 +1590,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, type_ascription, e.span,\n                                   \"type ascription is experimental\");\n             }\n-            ast::ExprKind::Range(_, _, ast::RangeLimits::Closed) => {\n-                gate_feature_post!(&self, inclusive_range_syntax,\n-                                  e.span,\n-                                  \"inclusive range syntax is experimental\");\n-            }\n             ast::ExprKind::InPlace(..) => {\n                 gate_feature_post!(&self, placement_in_syntax, e.span, EXPLAIN_PLACEMENT_IN);\n             }\n@@ -1658,10 +1651,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n                                    \"exclusive range pattern syntax is experimental\");\n             }\n-            PatKind::Range(_, _, RangeEnd::Included(RangeSyntax::DotDotEq)) => {\n-                gate_feature_post!(&self, dotdoteq_in_patterns, pattern.span,\n-                                   \"`..=` syntax in patterns is experimental\");\n-            }\n             PatKind::Paren(..) => {\n                 gate_feature_post!(&self, pattern_parentheses, pattern.span,\n                                    \"parentheses in patterns are unstable\");"}, {"sha": "e3812ce159a9adca64f5db639a57255807508ddc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -3804,6 +3804,12 @@ impl<'a> Parser<'a> {\n \n     /// Parse a pattern.\n     pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true)\n+    }\n+\n+    /// Parse a pattern, with a setting whether modern range patterns e.g. `a..=b`, `a..b` are\n+    /// allowed.\n+    fn parse_pat_with_range_pat(&mut self, allow_range_pat: bool) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n \n         let lo = self.span;\n@@ -3824,7 +3830,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(self.span, \"unexpected lifetime\");\n                     return Err(err);\n                 }\n-                let subpat = self.parse_pat()?;\n+                let subpat = self.parse_pat_with_range_pat(false)?;\n                 pat = PatKind::Ref(subpat, mutbl);\n             }\n             token::OpenDelim(token::Paren) => {\n@@ -3863,7 +3869,7 @@ impl<'a> Parser<'a> {\n                 pat = self.parse_pat_ident(BindingMode::ByRef(mutbl))?;\n             } else if self.eat_keyword(keywords::Box) {\n                 // Parse box pat\n-                let subpat = self.parse_pat()?;\n+                let subpat = self.parse_pat_with_range_pat(false)?;\n                 pat = PatKind::Box(subpat);\n             } else if self.token.is_ident() && !self.token.is_reserved_ident() &&\n                       self.parse_as_ident() {\n@@ -3968,6 +3974,25 @@ impl<'a> Parser<'a> {\n         let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n         let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n+        if !allow_range_pat {\n+            match pat.node {\n+                PatKind::Range(_, _, RangeEnd::Included(RangeSyntax::DotDotDot)) => {}\n+                PatKind::Range(..) => {\n+                    let mut err = self.struct_span_err(\n+                        pat.span,\n+                        \"the range pattern here has ambiguous interpretation\",\n+                    );\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"add parentheses to clarify the precedence\",\n+                        format!(\"({})\", pprust::pat_to_string(&pat)),\n+                    );\n+                    return Err(err);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         Ok(P(pat))\n     }\n "}, {"sha": "5b063dc1137c0b3be5faaae240277448609ea14c", "filename": "src/test/compile-fail/range_inclusive_gate.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_inclusive_gate.rs?ref=ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Make sure that #![feature(inclusive_range)] is required.\n-\n-#![feature(inclusive_range_syntax)]\n-// #![feature(inclusive_range)]\n-\n-pub fn main() {\n-    let _: std::ops::RangeInclusive<_> = { use std::intrinsics; 1 } ..= { use std::intrinsics; 2 };\n-    //~^ ERROR use of unstable library feature 'inclusive_range'\n-    //~| ERROR core_intrinsics\n-    //~| ERROR core_intrinsics\n-}"}, {"sha": "7645dbb1a6dee5f38dee0c05c51cb5393edef17c", "filename": "src/test/compile-fail/range_traits-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-1.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(inclusive_range)]\n-\n use std::ops::*;\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]"}, {"sha": "f9510b5061caecf706fe57cd644eae3c7c741edc", "filename": "src/test/compile-fail/range_traits-6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-6.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(inclusive_range)]\n-\n use std::ops::*;\n \n #[derive(Copy, Clone)] //~ ERROR Copy"}, {"sha": "871b55b85cf88a0194f8d208141c3459f94b4ec6", "filename": "src/test/compile-fail/range_traits-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange_traits-7.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, inclusive_range)]\n+#![feature(rustc_attrs)]\n \n use std::ops::*;\n "}, {"sha": "fb63aa857aa326b5d62617fd3dca13d18ec70222", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -23,7 +23,6 @@\n #![allow(warnings)]\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n-#![feature(inclusive_range_syntax)]\n \n // Change simple index ---------------------------------------------------------\n #[cfg(cfail1)]"}, {"sha": "2aa7d6d6cd7937d2d4a7c2f8ff921135ccceb6de", "filename": "src/test/parse-fail/range_inclusive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -10,8 +10,6 @@\n \n // Make sure that inclusive ranges with no end point don't parse.\n \n-#![feature(inclusive_range_syntax, inclusive_range)]\n-\n pub fn main() {\n     for _ in 1..= {} //~ERROR inclusive range with no end\n                      //~^HELP bounded at the end"}, {"sha": "fa6474717d3f0320afbcb2663fdc1d2b2580b9b6", "filename": "src/test/parse-fail/range_inclusive_dotdotdot.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_dotdotdot.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -12,8 +12,6 @@\n \n // Make sure that inclusive ranges with `...` syntax don't parse.\n \n-#![feature(inclusive_range_syntax, inclusive_range)]\n-\n use std::ops::RangeToInclusive;\n \n fn return_range_to() -> RangeToInclusive<i32> {"}, {"sha": "6b6afc504e1504c63f865971d058c218c6c73bb0", "filename": "src/test/parse-fail/range_inclusive_gate.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Frange_inclusive_gate.rs?ref=ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "patch": "@@ -1,74 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-inclusive_range_syntax\n-\n-// Make sure that #![feature(inclusive_range_syntax)] is required.\n-\n-// #![feature(inclusive_range_syntax, inclusive_range)]\n-\n-macro_rules! m {\n-    () => { for _ in 1..=10 {} } //~ ERROR inclusive range syntax is experimental\n-}\n-\n-#[cfg(nope)]\n-fn f() {}\n-#[cfg(not(nope))]\n-fn f() {\n-    for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-}\n-\n-#[cfg(nope)]\n-macro_rules! n { () => {} }\n-#[cfg(not(nope))]\n-macro_rules! n {\n-    () => { for _ in 1..=10 {} } //~ ERROR inclusive range syntax is experimental\n-}\n-\n-macro_rules! o {\n-    () => {{\n-        #[cfg(nope)]\n-        fn g() {}\n-        #[cfg(not(nope))]\n-        fn g() {\n-            for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-        }\n-\n-        g();\n-    }}\n-}\n-\n-#[cfg(nope)]\n-macro_rules! p { () => {} }\n-#[cfg(not(nope))]\n-macro_rules! p {\n-    () => {{\n-        #[cfg(nope)]\n-        fn h() {}\n-        #[cfg(not(nope))]\n-        fn h() {\n-            for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-        }\n-\n-        h();\n-    }}\n-}\n-\n-pub fn main() {\n-    for _ in 1..=10 {} //~ ERROR inclusive range syntax is experimental\n-    for _ in ..=10 {} //~ ERROR inclusive range syntax is experimental\n-\n-    f(); // not allowed in cfg'ed functions\n-\n-    m!(); // not allowed in macros\n-    n!(); // not allowed in cfg'ed macros\n-    o!(); // not allowed in macros that output cfgs\n-    p!(); // not allowed in cfg'ed macros that output cfgs\n-}"}, {"sha": "237b41b6128cf8a8405bd750bdcee71ee75b0b5b", "filename": "src/test/run-pass/inc-range-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Finc-range-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Finc-range-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finc-range-pat.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n // Test old and new syntax for inclusive range patterns.\n-#![feature(dotdoteq_in_patterns)]\n-\n \n fn main() {\n     assert!(match 42 { 0 ... 100 => true, _ => false });"}, {"sha": "5e491d48bcf4694fcfa7be9f61e199a84ab1c241", "filename": "src/test/run-pass/range-inclusive-pattern-precedence.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_patterns, pattern_parentheses)]\n+\n+const VALUE: usize = 21;\n+\n+pub fn main() {\n+    match &18 {\n+        &(18..=18) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match &21 {\n+        &(VALUE..=VALUE) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match Box::new(18) {\n+        box (18..=18) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match Box::new(21) {\n+        box (VALUE..=VALUE) => {}\n+        _ => { unreachable!(); }\n+    }\n+}"}, {"sha": "5d46bfab8878e31db2b86d561fe506609a421406", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -10,7 +10,7 @@\n \n // Test inclusive range syntax.\n \n-#![feature(inclusive_range_syntax, inclusive_range, iterator_step_by)]\n+#![feature(iterator_step_by)]\n \n use std::ops::{RangeInclusive, RangeToInclusive};\n "}, {"sha": "6c2731fa5a9bb85fc5bca85b7358cea2cacc5ce4", "filename": "src/test/run-pass/range_inclusive_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive_gate.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n // Test that you only need the syntax gate if you don't mention the structs.\n-\n-#![feature(inclusive_range_syntax)]\n+// (Obsoleted since both features are stabilized)\n \n fn main() {\n     let mut count = 0;"}, {"sha": "1fb139bf07f411fced6eb630d1594edce3b3e6ce", "filename": "src/test/ui/feature-gate-dotdoteq_in_patterns.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.rs?ref=ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    match 22 {\n-        0 ..= 3 => {} //~ ERROR `..=` syntax in patterns is experimental\n-        _ => {}\n-    }\n-}"}, {"sha": "67f15be9d08467562e0bfb826f48b2b2f1d0a133", "filename": "src/test/ui/feature-gate-dotdoteq_in_patterns.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff2d506c2c748bd218f74c6014abc4cecc8c74c4/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr?ref=ff2d506c2c748bd218f74c6014abc4cecc8c74c4", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `..=` syntax in patterns is experimental (see issue #28237)\n-  --> $DIR/feature-gate-dotdoteq_in_patterns.rs:13:9\n-   |\n-LL |         0 ..= 3 => {} //~ ERROR `..=` syntax in patterns is experimental\n-   |         ^^^^^^^\n-   |\n-   = help: add #![feature(dotdoteq_in_patterns)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "073ed867bdb84529472fa8f82bd2ff58b2655073", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -10,8 +10,6 @@\n \n // Make sure that invalid ranges generate an error during HIR lowering, not an ICE\n \n-#![feature(inclusive_range_syntax)]\n-\n pub fn main() {\n     ..;\n     0..;"}, {"sha": "cfeaa53a6bb188c5426d2ac803138c5f137337da", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -1,13 +1,13 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:20:8\n+  --> $DIR/impossible_range.rs:18:8\n    |\n LL |     ..=; //~ERROR inclusive range with no end\n    |        ^\n    |\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:27:9\n+  --> $DIR/impossible_range.rs:25:9\n    |\n LL |     0..=; //~ERROR inclusive range with no end\n    |         ^"}, {"sha": "67a0f79ca6b82eb851d5cb399245c406571ed615", "filename": "src/test/ui/range-inclusive-pattern-precedence.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n+// `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n+// lead to confusion.\n+//\n+// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n+// older ... syntax is still allowed as a stability guarantee.\n+\n+#![feature(box_patterns)]\n+\n+pub fn main() {\n+    match &12 {\n+        &0...9 => {}\n+        &10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        &(16..=20) => {}\n+        _ => {}\n+    }\n+\n+    match Box::new(12) {\n+        box 0...9 => {}\n+        box 10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        box (16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "99e0d739036b09fea50146b29bd2222ee4de1c00", "filename": "src/test/ui/range-inclusive-pattern-precedence.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39264539448e7ec5e98067859db71685393a4464/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr?ref=39264539448e7ec5e98067859db71685393a4464", "patch": "@@ -0,0 +1,14 @@\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence.rs:23:10\n+   |\n+LL |         &10..=15 => {}\n+   |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence.rs:32:13\n+   |\n+LL |         box 10..=15 => {}\n+   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+error: aborting due to 2 previous errors\n+"}]}