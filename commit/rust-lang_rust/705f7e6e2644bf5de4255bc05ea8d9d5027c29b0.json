{"sha": "705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNWY3ZTZlMjY0NGJmNWRlNDI1NWJjMDVlYThkOWQ1MDI3YzI5YjA=", "commit": {"author": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:57:19Z"}, "committer": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T03:57:19Z"}, "message": "clippy::clone_on_copy", "tree": {"sha": "1bf26189989bb871a86ec4ee612c978be5e5f883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf26189989bb871a86ec4ee612c978be5e5f883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVt0Hfgx04mDvJfYh6a8CS6Y8cO0FAmDFgigACgkQ6a8CS6Y8\ncO2GLw//T6s4WU0N5Xe0eTppweaFZ1OFob5OL+oW0QjqtlPwzdXNwKJOvkv1B4C3\ncdfbRDlRb0dz07WeVPdYjUoUP5Ulbx6+pX+5yXPcQrTCMg0dnzXrYdPLF0Ibj9XT\nugGNUv/7+DGu/YQm8uCGu5gQ1GP8tVAy96rMtN5Yh5tH32rGiyx8FE6I1sUAhjar\nO8AeqAe6prSH1Ph7UnaSBZMMEAdp/oTWG/cxyapjKo4H2UUskFCxaMflpb4buvQa\n4W1eHb/zcmvplbPoSiyg0rB1TD4sVPBVpvJjFZsl4cVcqr6BBPX22Xtp9FukIZBh\nsI90L8llPEJ824SNXbazej6bEOX+GESs9eM2BWKulEyKiDN6uGDb4cOZJGB7zxBL\n0ru6wfkWIm0WxlwZK6Y8CvH0vydKDbqgdyCjor2aoa+piWqtaoojKI4J1EEveyE4\nZQj2XOjsaaC2NTh1mlK9N9HfW5AjtePrRwqqc4168srptre0XSeYjCmMrxnlXI0P\nFEksmzuM28kUk53Kch0QFtre++5X5GZNPAh8jNl6VWKxjPLzc/rZgWxmMArpjJw+\nGTWPkGQ3pR4DDDpDOrNrFd00uVmucOTADUx9zeRlHT9g231IA+jfT963PQpDGG9N\nAXinvURPl+7ERaZQDa7BHgJi4ocwOLQ/akxIn+bvUzFKpdrL7DI=\n=PbLS\n-----END PGP SIGNATURE-----", "payload": "tree 1bf26189989bb871a86ec4ee612c978be5e5f883\nparent 6cc6dee9e96d55dbbd8593523551a9981a691147\nauthor Maan2003 <manmeetmann2003@gmail.com> 1623556639 +0530\ncommitter Maan2003 <manmeetmann2003@gmail.com> 1623556639 +0530\n\nclippy::clone_on_copy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "html_url": "https://github.com/rust-lang/rust/commit/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/comments", "author": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc6dee9e96d55dbbd8593523551a9981a691147", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc6dee9e96d55dbbd8593523551a9981a691147", "html_url": "https://github.com/rust-lang/rust/commit/6cc6dee9e96d55dbbd8593523551a9981a691147"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "bd923cba8444f7c4775e732cde3976554d8355d9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -452,7 +452,7 @@ impl Module {\n     }\n \n     pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n-        self.id.def_map(db.upcast())[self.id.local_id].scope.visibility_of(def.clone().into())\n+        self.id.def_map(db.upcast())[self.id.local_id].scope.visibility_of((*def).into())\n     }\n \n     pub fn diagnostics("}, {"sha": "2b21cf92791ea98655dc74738e44b1460d680121", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -606,7 +606,7 @@ pub struct DocsRangeMap {\n impl DocsRangeMap {\n     pub fn map(&self, range: TextRange) -> Option<InFile<TextRange>> {\n         let found = self.mapping.binary_search_by(|(probe, ..)| probe.ordering(range)).ok()?;\n-        let (line_docs_range, idx, original_line_src_range) = self.mapping[found].clone();\n+        let (line_docs_range, idx, original_line_src_range) = self.mapping[found];\n         if !line_docs_range.contains_range(range) {\n             return None;\n         }"}, {"sha": "08407ebfa641da325b71af17ad63d4e1ecec246a", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -59,7 +59,7 @@ pub struct ItemScope {\n pub(crate) static BUILTIN_SCOPE: Lazy<FxHashMap<Name, PerNs>> = Lazy::new(|| {\n     BuiltinType::ALL\n         .iter()\n-        .map(|(name, ty)| (name.clone(), PerNs::types(ty.clone().into(), Visibility::Public)))\n+        .map(|(name, ty)| (name.clone(), PerNs::types((*ty).into(), Visibility::Public)))\n         .collect()\n });\n "}, {"sha": "025e10239bd8952343fc725b7e9303c11ece8a33", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -45,7 +45,6 @@ impl ProcMacroExpander {\n                 let proc_macro = krate_graph[self.krate]\n                     .proc_macro\n                     .get(id.0 as usize)\n-                    .clone()\n                     .ok_or_else(|| err!(\"No derive macro found.\"))?;\n \n                 // Proc macros have access to the environment variables of the invoking crate."}, {"sha": "d29ee64a52091aeaa73b660ceaa09b34f4f56536", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn goto_definition(\n         let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n         let (_, link, ns) =\n             extract_definitions_from_markdown(docs.as_str()).into_iter().find(|(range, ..)| {\n-                doc_mapping.map(range.clone()).map_or(false, |InFile { file_id, value: range }| {\n+                doc_mapping.map(*range).map_or(false, |InFile { file_id, value: range }| {\n                     file_id == position.file_id.into() && range.contains(position.offset)\n                 })\n             })?;"}, {"sha": "0013820b47c285b0ea614fd83e33fde0f4d81734", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -87,7 +87,7 @@ fn impls_for_trait_item(\n         .filter_map(|imp| {\n             let item = imp.items(sema.db).iter().find_map(|itm| {\n                 let itm_name = itm.name(sema.db)?;\n-                (itm_name == fun_name).then(|| itm.clone())\n+                (itm_name == fun_name).then(|| *itm)\n             })?;\n             item.try_to_nav(sema.db)\n         })"}, {"sha": "4ba4f61d855ba52ea111dcb701a0cb97a37c5e37", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705f7e6e2644bf5de4255bc05ea8d9d5027c29b0/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=705f7e6e2644bf5de4255bc05ea8d9d5027c29b0", "patch": "@@ -131,7 +131,7 @@ pub(crate) fn hover(\n                     let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n                     let (idl_range, link, ns) =\n                         extract_definitions_from_markdown(docs.as_str()).into_iter().find_map(|(range, link, ns)| {\n-                            let InFile { file_id, value: range } = doc_mapping.map(range.clone())?;\n+                            let InFile { file_id, value: range } = doc_mapping.map(range)?;\n                             if file_id == position.file_id.into() && range.contains(position.offset) {\n                                 Some((range, link, ns))\n                             } else {"}]}