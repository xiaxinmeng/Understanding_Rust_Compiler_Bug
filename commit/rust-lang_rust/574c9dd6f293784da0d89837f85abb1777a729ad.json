{"sha": "574c9dd6f293784da0d89837f85abb1777a729ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NGM5ZGQ2ZjI5Mzc4NGRhMGQ4OTgzN2Y4NWFiYjE3NzdhNzI5YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T23:58:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T23:58:03Z"}, "message": "Auto merge of #86559 - Dylan-DPC:rollup-aixg3q5, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86223 (Specify the kind of the item for E0121)\n - #86521 (Add comments around code where ordering is important due for panic-safety)\n - #86523 (Improvements to intra-doc link macro disambiguators)\n - #86542 (Line numbers aligned with content)\n - #86549 (Add destructuring example of E0508)\n - #86557 (Update books)\n\nFailed merges:\n\n - #86548 (Fix crate filter search reset)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ebad3f21153b5ddd37b398d0c17934cb158a4c7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebad3f21153b5ddd37b398d0c17934cb158a4c7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574c9dd6f293784da0d89837f85abb1777a729ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574c9dd6f293784da0d89837f85abb1777a729ad", "html_url": "https://github.com/rust-lang/rust/commit/574c9dd6f293784da0d89837f85abb1777a729ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574c9dd6f293784da0d89837f85abb1777a729ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a758ea7e48416b968955535094479dc2e7cc9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a758ea7e48416b968955535094479dc2e7cc9e1", "html_url": "https://github.com/rust-lang/rust/commit/6a758ea7e48416b968955535094479dc2e7cc9e1"}, {"sha": "bd04f4caffcc4a702e62a9a913a93541455eba0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd04f4caffcc4a702e62a9a913a93541455eba0d", "html_url": "https://github.com/rust-lang/rust/commit/bd04f4caffcc4a702e62a9a913a93541455eba0d"}], "stats": {"total": 1029, "additions": 569, "deletions": 460}, "files": [{"sha": "91865907bf271fdc296b706ad03783ffffc23cda", "filename": "compiler/rustc_error_codes/src/error_codes/E0508.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0508.md", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0508.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0508.md?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -39,3 +39,16 @@ fn main() {\n     let _value = array[0].clone();\n }\n ```\n+\n+If you really want to move the value out, you can use a destructuring array\n+pattern to move it:\n+\n+```\n+struct NonCopy;\n+\n+fn main() {\n+    let array = [NonCopy; 1];\n+    // Destructuring the array\n+    let [_value] = array;\n+}\n+```"}, {"sha": "a7ce92ea57917079852b5bf7660d1e10c85bcda4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2815,6 +2815,27 @@ impl ItemKind<'_> {\n             _ => return None,\n         })\n     }\n+\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            ItemKind::ExternCrate(..) => \"extern crate\",\n+            ItemKind::Use(..) => \"`use` import\",\n+            ItemKind::Static(..) => \"static item\",\n+            ItemKind::Const(..) => \"constant item\",\n+            ItemKind::Fn(..) => \"function\",\n+            ItemKind::Mod(..) => \"module\",\n+            ItemKind::ForeignMod { .. } => \"extern block\",\n+            ItemKind::GlobalAsm(..) => \"global asm item\",\n+            ItemKind::TyAlias(..) => \"type alias\",\n+            ItemKind::OpaqueTy(..) => \"opaque type\",\n+            ItemKind::Enum(..) => \"enum\",\n+            ItemKind::Struct(..) => \"struct\",\n+            ItemKind::Union(..) => \"union\",\n+            ItemKind::Trait(..) => \"trait\",\n+            ItemKind::TraitAlias(..) => \"trait alias\",\n+            ItemKind::Impl(..) => \"implementation\",\n+        }\n+    }\n }\n \n /// A reference from an trait to one of its associated items. This"}, {"sha": "10a7d69d5d3b7bd2133716761ec48c3a90509669", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2418,6 +2418,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 visitor.0,\n                 true,\n                 hir_ty,\n+                \"function\",\n             );\n         }\n "}, {"sha": "91e65cffc58c57a7dd70b309c170c5cf5dda8737", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -145,6 +145,7 @@ crate fn placeholder_type_error(\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n     hir_ty: Option<&hir::Ty<'_>>,\n+    kind: &'static str,\n ) {\n     if placeholder_types.is_empty() {\n         return;\n@@ -174,7 +175,7 @@ crate fn placeholder_type_error(\n         ));\n     }\n \n-    let mut err = bad_placeholder_type(tcx, placeholder_types);\n+    let mut err = bad_placeholder_type(tcx, placeholder_types, kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -236,7 +237,15 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, Some(generics.span), generics.params, visitor.0, suggest, None);\n+    placeholder_type_error(\n+        tcx,\n+        Some(generics.span),\n+        generics.params,\n+        visitor.0,\n+        suggest,\n+        None,\n+        item.kind.descr(),\n+    );\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -302,13 +311,17 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n fn bad_placeholder_type(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n+    kind: &'static str,\n ) -> rustc_errors::DiagnosticBuilder<'tcx> {\n+    let kind = if kind.ends_with('s') { format!(\"{}es\", kind) } else { format!(\"{}s\", kind) };\n+\n     spans.sort();\n     let mut err = struct_span_err!(\n         tcx.sess,\n         spans.clone(),\n         E0121,\n-        \"the type placeholder `_` is not allowed within types on item signatures\",\n+        \"the type placeholder `_` is not allowed within types on item signatures for {}\",\n+        kind\n     );\n     for span in spans {\n         err.span_label(span, \"not allowed in type signatures\");\n@@ -382,7 +395,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder_type(self.tcx(), vec![span]).emit();\n+        bad_placeholder_type(self.tcx(), vec![span], \"generic\").emit();\n         // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n@@ -746,7 +759,15 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                     hir::ForeignItemKind::Static(..) => {\n                         let mut visitor = PlaceholderHirTyCollector::default();\n                         visitor.visit_foreign_item(item);\n-                        placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+                        placeholder_type_error(\n+                            tcx,\n+                            None,\n+                            &[],\n+                            visitor.0,\n+                            false,\n+                            None,\n+                            \"static variable\",\n+                        );\n                     }\n                     _ => (),\n                 }\n@@ -818,7 +839,15 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                     if let hir::TyKind::TraitObject(..) = ty.kind {\n                         let mut visitor = PlaceholderHirTyCollector::default();\n                         visitor.visit_item(it);\n-                        placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+                        placeholder_type_error(\n+                            tcx,\n+                            None,\n+                            &[],\n+                            visitor.0,\n+                            false,\n+                            None,\n+                            it.kind.descr(),\n+                        );\n                     }\n                 }\n                 _ => (),\n@@ -846,7 +875,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             // Account for `const C: _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"constant\");\n         }\n \n         hir::TraitItemKind::Type(_, Some(_)) => {\n@@ -855,7 +884,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             // Account for `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n \n         hir::TraitItemKind::Type(_, None) => {\n@@ -865,7 +894,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n \n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n     };\n \n@@ -887,7 +916,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_impl_item(impl_item);\n \n-            placeholder_type_error(tcx, None, &[], visitor.0, false, None);\n+            placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n         hir::ImplItemKind::Const(..) => {}\n     }\n@@ -1711,7 +1740,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n                     let mut visitor = PlaceholderHirTyCollector::default();\n                     visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder_type(tcx, visitor.0);\n+                    let mut diag = bad_placeholder_type(tcx, visitor.0, \"return type\");\n                     let ret_ty = fn_sig.output();\n                     if ret_ty != tcx.ty_error() {\n                         if !ret_ty.is_closure() {"}, {"sha": "78fa8074a64cf1d0605507c24990a8b2f335cc3f", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -285,7 +285,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n                     if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n+                        Some(infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        ))\n                     } else {\n                         None\n                     }\n@@ -304,7 +306,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if is_suggestable_infer_ty(ty) {\n-                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident, \"constant\")\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -320,9 +322,25 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n+                ItemKind::Static(ref ty, .., body_id) => {\n                     if is_suggestable_infer_ty(ty) {\n-                        infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n+                        infer_placeholder_type(\n+                            tcx,\n+                            def_id,\n+                            body_id,\n+                            ty.span,\n+                            item.ident,\n+                            \"static variable\",\n+                        )\n+                    } else {\n+                        icx.to_ty(ty)\n+                    }\n+                }\n+                ItemKind::Const(ref ty, body_id) => {\n+                    if is_suggestable_infer_ty(ty) {\n+                        infer_placeholder_type(\n+                            tcx, def_id, body_id, ty.span, item.ident, \"constant\",\n+                        )\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -742,13 +760,14 @@ fn let_position_impl_trait_type(tcx: TyCtxt<'_>, opaque_ty_id: LocalDefId) -> Ty\n     concrete_ty\n }\n \n-fn infer_placeholder_type(\n-    tcx: TyCtxt<'_>,\n+fn infer_placeholder_type<'a>(\n+    tcx: TyCtxt<'a>,\n     def_id: LocalDefId,\n     body_id: hir::BodyId,\n     span: Span,\n     item_ident: Ident,\n-) -> Ty<'_> {\n+    kind: &'static str,\n+) -> Ty<'a> {\n     // Attempts to make the type nameable by turning FnDefs into FnPtrs.\n     struct MakeNameable<'tcx> {\n         success: bool,\n@@ -802,7 +821,7 @@ fn infer_placeholder_type(\n             if let Some(sugg_ty) = sugg_ty {\n                 err.span_suggestion(\n                     span,\n-                    \"provide a type for the item\",\n+                    &format!(\"provide a type for the {item}\", item = kind),\n                     format!(\"{}: {}\", item_ident, sugg_ty),\n                     Applicability::MachineApplicable,\n                 );\n@@ -816,7 +835,7 @@ fn infer_placeholder_type(\n             err.emit_unless(ty.references_error());\n         }\n         None => {\n-            let mut diag = bad_placeholder_type(tcx, vec![span]);\n+            let mut diag = bad_placeholder_type(tcx, vec![span], kind);\n \n             if !ty.references_error() {\n                 let mut mk_nameable = MakeNameable::new(tcx);"}, {"sha": "f3a47cba759e6bb9d4d0a1e53e61c97d643108d8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2568,6 +2568,8 @@ impl<T, A: Allocator> Vec<T, A> {\n             }\n             unsafe {\n                 ptr::write(self.as_mut_ptr().add(len), element);\n+                // Since next() executes user code which can panic we have to bump the length\n+                // after each step.\n                 // NB can't overflow since we would have had to alloc the address space\n                 self.set_len(len + 1);\n             }"}, {"sha": "d814d4ae355b0496eb08f08400aeb8a3bf35df83", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -89,6 +89,8 @@ fn write_in_place_with_drop<T>(\n             // all we can do is check if it's still in range\n             debug_assert!(sink.dst as *const _ <= src_end, \"InPlaceIterable contract violation\");\n             ptr::write(sink.dst, item);\n+            // Since this executes user code which can panic we have to bump the pointer\n+            // after each step.\n             sink.dst = sink.dst.add(1);\n         }\n         Ok(sink)\n@@ -136,6 +138,8 @@ where\n                 let dst = dst_buf.offset(i as isize);\n                 debug_assert!(dst as *const _ <= end, \"InPlaceIterable contract violation\");\n                 ptr::write(dst, self.__iterator_get_unchecked(i));\n+                // Since this executes user code which can panic we have to bump the pointer\n+                // after each step.\n                 drop_guard.dst = dst.add(1);\n             }\n         }"}, {"sha": "c3b4534096de5f1c5a7171db69fd46f5f4bd7922", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -40,6 +40,8 @@ where\n                 iterator.for_each(move |element| {\n                     ptr::write(ptr, element);\n                     ptr = ptr.offset(1);\n+                    // Since the loop executes user code which can panic we have to bump the pointer\n+                    // after each step.\n                     // NB can't overflow since we would have had to alloc the address space\n                     local_len.increment_len(1);\n                 });"}, {"sha": "3d0401cbebcf72a0fa0ec3a45f3f891897cb0215", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -227,13 +227,16 @@ where\n     fn next(&mut self) -> Option<(A::Item, B::Item)> {\n         if self.index < self.len {\n             let i = self.index;\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.index += 1;\n             // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`\n             unsafe {\n                 Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n             }\n         } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {\n             let i = self.index;\n+            // as above, increment before executing code that may panic\n             self.index += 1;\n             self.len += 1;\n             // match the base implementation's potential side effects\n@@ -259,6 +262,8 @@ where\n         let end = self.index + delta;\n         while self.index < end {\n             let i = self.index;\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.index += 1;\n             if A::MAY_HAVE_SIDE_EFFECT {\n                 // SAFETY: the usage of `cmp::min` to calculate `delta`\n@@ -295,6 +300,8 @@ where\n                 let sz_a = self.a.size();\n                 if A::MAY_HAVE_SIDE_EFFECT && sz_a > self.len {\n                     for _ in 0..sz_a - self.len {\n+                        // since next_back() may panic we increment the counters beforehand\n+                        // to keep Zip's state in sync with the underlying iterator source\n                         self.a_len -= 1;\n                         self.a.next_back();\n                     }\n@@ -309,6 +316,8 @@ where\n             }\n         }\n         if self.index < self.len {\n+            // since get_unchecked executes code which can panic we increment the counters beforehand\n+            // so that the same index won't be accessed twice, as required by TrustedRandomAccess\n             self.len -= 1;\n             self.a_len -= 1;\n             let i = self.len;"}, {"sha": "35d274da673b8245a6abdc6b2f6eb07692cb8065", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -71,7 +71,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.3.0 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.4.0 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "c74b2a0d6bf55774cf15d69f05dfe05408b8f81a", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1 +1 @@\n-Subproject commit 302a115e8f71876dfc884aebb0ca5ccb02b8a962\n+Subproject commit c74b2a0d6bf55774cf15d69f05dfe05408b8f81a"}, {"sha": "cbec77fbd8eea0c13e390dd9eded1ae200e811d1", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1 +1 @@\n-Subproject commit 7349d173fa28a0bb834cf0264a05286620ef0923\n+Subproject commit cbec77fbd8eea0c13e390dd9eded1ae200e811d1"}, {"sha": "b9ca313e687c991223e23e5520529815dc281205", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1 +1 @@\n-Subproject commit 55de6fa3c1f331774da19472c9ee57d2ae9eb039\n+Subproject commit b9ca313e687c991223e23e5520529815dc281205"}, {"sha": "d9699fa8f3186440fdaadd703d63d8d42322c176", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1 +1 @@\n-Subproject commit 8f598e2af6c25b4a7ee88ef6a8196d9b8ea50ca8\n+Subproject commit d9699fa8f3186440fdaadd703d63d8d42322c176"}, {"sha": "fe34beddb41dea5cb891032512a8d5b842b99696", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1 +1 @@\n-Subproject commit c8da5bfd1c7c71d90ef1646f5e0a9f6609d5c78a\n+Subproject commit fe34beddb41dea5cb891032512a8d5b842b99696"}, {"sha": "c7e2ce7401913085b9a3ab273503bd8558142f0b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -992,9 +992,9 @@ fn preprocess_link<'a>(\n     }\n \n     // Parse and strip the disambiguator from the link, if present.\n-    let (path_str, disambiguator) = match Disambiguator::from_str(&link) {\n-        Ok(Some((d, path))) => (path.trim(), Some(d)),\n-        Ok(None) => (link.trim(), None),\n+    let (disambiguator, path_str, link_text) = match Disambiguator::from_str(&link) {\n+        Ok(Some((d, path, link_text))) => (Some(d), path.trim(), link_text.trim()),\n+        Ok(None) => (None, link.trim(), link.trim()),\n         Err((err_msg, relative_range)) => {\n             // Only report error if we would not have ignored this link. See issue #83859.\n             if !should_ignore_link_with_disambiguators(link) {\n@@ -1012,11 +1012,6 @@ fn preprocess_link<'a>(\n         return None;\n     }\n \n-    // We stripped `()` and `!` when parsing the disambiguator.\n-    // Add them back to be displayed, but not prefix disambiguators.\n-    let link_text =\n-        disambiguator.map(|d| d.display_for(path_str)).unwrap_or_else(|| path_str.to_owned());\n-\n     // Strip generics from the path.\n     let path_str = if path_str.contains(['<', '>'].as_slice()) {\n         match strip_generics_from_path(&path_str) {\n@@ -1046,7 +1041,7 @@ fn preprocess_link<'a>(\n         path_str,\n         disambiguator,\n         extra_fragment: extra_fragment.map(String::from),\n-        link_text,\n+        link_text: link_text.to_owned(),\n     }))\n }\n \n@@ -1554,24 +1549,12 @@ enum Disambiguator {\n }\n \n impl Disambiguator {\n-    /// The text that should be displayed when the path is rendered as HTML.\n-    ///\n-    /// NOTE: `path` is not the original link given by the user, but a name suitable for passing to `resolve`.\n-    fn display_for(&self, path: &str) -> String {\n-        match self {\n-            // FIXME: this will have different output if the user had `m!()` originally.\n-            Self::Kind(DefKind::Macro(MacroKind::Bang)) => format!(\"{}!\", path),\n-            Self::Kind(DefKind::Fn) => format!(\"{}()\", path),\n-            _ => path.to_owned(),\n-        }\n-    }\n-\n-    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    /// Given a link, parse and return `(disambiguator, path_str, link_text)`.\n     ///\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n+    fn from_str(link: &str) -> Result<Option<(Self, &str, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         if let Some(idx) = link.find('@') {\n@@ -1592,18 +1575,20 @@ impl Disambiguator {\n                 \"prim\" | \"primitive\" => Primitive,\n                 _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n-            Ok(Some((d, &rest[1..])))\n+            Ok(Some((d, &rest[1..], &rest[1..])))\n         } else {\n             let suffixes = [\n                 (\"!()\", DefKind::Macro(MacroKind::Bang)),\n+                (\"!{}\", DefKind::Macro(MacroKind::Bang)),\n+                (\"![]\", DefKind::Macro(MacroKind::Bang)),\n                 (\"()\", DefKind::Fn),\n                 (\"!\", DefKind::Macro(MacroKind::Bang)),\n             ];\n             for (suffix, kind) in suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n+                if let Some(path_str) = link.strip_suffix(suffix) {\n                     // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Ok(Some((Kind(kind), link)));\n+                    if !path_str.is_empty() {\n+                        return Ok(Some((Kind(kind), path_str, link)));\n                     }\n                 }\n             }"}, {"sha": "5cf8a5e136ef79cfd47dc094264838b4c6c2c075", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,25 +2,25 @@ goto: file://|DOC_PATH|/test_docs/index.html\n // First, we check that the search results are hidden when the Escape key is pressed.\n write: (\".search-input\", \"test\")\n wait-for: \"#search > h1\" // The search element is empty before the first search \n-assert-attr: (\"#search\", {\"class\": \"content\"})\n-assert-attr: (\"#main\", {\"class\": \"content hidden\"})\n+assert-attribute: (\"#search\", {\"class\": \"content\"})\n+assert-attribute: (\"#main\", {\"class\": \"content hidden\"})\n press-key: \"Escape\"\n-assert-attr: (\"#search\", {\"class\": \"content hidden\"})\n-assert-attr: (\"#main\", {\"class\": \"content\"})\n+assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+assert-attribute: (\"#main\", {\"class\": \"content\"})\n \n // Check that focusing the search input brings back the search results\n focus: \".search-input\"\n-assert-attr: (\"#search\", {\"class\": \"content\"})\n-assert-attr: (\"#main\", {\"class\": \"content hidden\"})\n+assert-attribute: (\"#search\", {\"class\": \"content\"})\n+assert-attribute: (\"#main\", {\"class\": \"content hidden\"})\n \n // Now let's check that when the help popup is displayed and we press Escape, it doesn't\n // hide the search results too.\n click: \"#help-button\"\n-assert-attr: (\"#help\", {\"class\": \"\"})\n+assert-attribute: (\"#help\", {\"class\": \"\"})\n press-key: \"Escape\"\n-assert-attr: (\"#help\", {\"class\": \"hidden\"})\n-assert-attr: (\"#search\", {\"class\": \"content\"})\n-assert-attr: (\"#main\", {\"class\": \"content hidden\"})\n+assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n+assert-attribute: (\"#search\", {\"class\": \"content\"})\n+assert-attribute: (\"#main\", {\"class\": \"content hidden\"})\n \n // Check that Escape hides the search results when a search result is focused.\n focus: \".search-input\"\n@@ -29,6 +29,6 @@ press-key: \"ArrowDown\"\n assert-false: \".search-input:focus\"\n assert: \"#results a:focus\"\n press-key: \"Escape\"\n-assert-attr: (\"#help\", {\"class\": \"hidden\"})\n-assert-attr: (\"#search\", {\"class\": \"content hidden\"})\n-assert-attr: (\"#main\", {\"class\": \"content\"})\n+assert-attribute: (\"#help\", {\"class\": \"hidden\"})\n+assert-attribute: (\"#search\", {\"class\": \"content hidden\"})\n+assert-attribute: (\"#main\", {\"class\": \"content\"})"}, {"sha": "42bc1c100200528470d64421501565a08012e49d", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,15 +1,15 @@\n // This test ensures that the element corresponding to the hash is displayed.\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n // In the blanket implementations list, \"Borrow\" is the second one, hence the \":nth(2)\".\n-assert-attr: (\"#blanket-implementations-list > details:nth-child(2)\", {\"open\": \"\"})\n+assert-attribute: (\"#blanket-implementations-list > details:nth-child(2)\", {\"open\": \"\"})\n // We first check that the impl block is open by default.\n-assert-attr: (\"#implementations + details\", {\"open\": \"\"})\n+assert-attribute: (\"#implementations + details\", {\"open\": \"\"})\n // We collapse it.\n click: \"#implementations + details > summary\"\n // We check that it was collapsed as expected.\n-assert-attr-false: (\"#implementations + details\", {\"open\": \"\"})\n+assert-attribute-false: (\"#implementations + details\", {\"open\": \"\"})\n // To ensure that we will click on the currently hidden method.\n assert-text: (\".sidebar-links > a\", \"must_use\")\n click: \".sidebar-links > a\"\n // We check that the impl block was opened as expected so that we can see the method.\n-assert-attr: (\"#implementations + details\", {\"open\": \"\"})\n+assert-attribute: (\"#implementations + details\", {\"open\": \"\"})"}, {"sha": "b268ec68d42e3b42e612a6e11d55784a690d0599", "filename": "src/test/rustdoc-gui/impl-default-expansion.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fimpl-default-expansion.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,3 +1,3 @@\n // This test ensures that the impl blocks are open by default.\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n-assert-attr: (\"#main > details.implementors-toggle\", {\"open\": \"\"})\n+assert-attribute: (\"#main > details.implementors-toggle\", {\"open\": \"\"})"}, {"sha": "a61ec672ae6e6ed68fd43c3a1aa0bf61d2dd43fa", "filename": "src/test/rustdoc-gui/search-tab-selection-if-current-is-empty.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,20 +2,20 @@ goto: file://|DOC_PATH|/test_docs/index.html\n write: (\".search-input\", \"Foo\")\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-attr: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n \n // To go back to the original \"state\"\n goto: file://|DOC_PATH|/test_docs/index.html\n write: (\".search-input\", \"-> String\")\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n // With this search, only the last tab shouldn't be empty so it should be selected.\n-assert-attr: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n+assert-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n \n // To go back to the original \"state\"\n goto: file://|DOC_PATH|/test_docs/index.html\n write: (\".search-input\", \"-> Something\")\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n // With this search, all the tabs are empty so the first one should remain selected.\n-assert-attr: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})"}, {"sha": "d7bae93c211a19b058833c653109aae5c7cdc2e6", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -3,11 +3,13 @@ goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n click: (40, 224) // This is the position of the span for line 4.\n // Unfortunately, \"#4\" isn't a valid query selector, so we have to go around that limitation\n // by instead getting the nth span.\n-assert-attr: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n // We now check that the good spans are highlighted\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html#4-6\n-assert-attr-false: (\".line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n-assert-attr: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n-assert-attr: (\".line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n-assert-attr: (\".line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n-assert-attr-false: (\".line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".line-numbers > span:nth-child(5)\", {\"class\": \"line-highlighted\"})\n+assert-attribute: (\".line-numbers > span:nth-child(6)\", {\"class\": \"line-highlighted\"})\n+assert-attribute-false: (\".line-numbers > span:nth-child(7)\", {\"class\": \"line-highlighted\"})\n+// This is to ensure that the content is correctly align with the line numbers.\n+compare-elements-position: (\"//*[@id='1']\", \".rust > span\", (\"y\"))"}, {"sha": "471d88701d4f58d1f49fa879377c11692ae2d4f1", "filename": "src/test/rustdoc-gui/toggle-docs-mobile.goml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,21 +1,21 @@\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n size: (433, 600)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})\n click: (4, 280) // This is the position of the top doc comment toggle\n-assert-attr-false: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute-false: (\".top-doc\", {\"open\": \"\"})\n click: (4, 280)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})\n // To ensure that the toggle isn't over the text, we check that the toggle isn't clicked.\n click: (3, 280)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})\n \n // Now we do the same but with a little bigger width\n size: (600, 600)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})\n click: (4, 240) // New Y position since all search elements are back on one line.\n-assert-attr-false: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute-false: (\".top-doc\", {\"open\": \"\"})\n click: (4, 240)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})\n // To ensure that the toggle isn't over the text, we check that the toggle isn't clicked.\n click: (3, 240)\n-assert-attr: (\".top-doc\", {\"open\": \"\"})\n+assert-attribute: (\".top-doc\", {\"open\": \"\"})"}, {"sha": "136868f3175c9722e8083a92caec6a13ce888332", "filename": "src/test/rustdoc-gui/toggle-docs.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,10 +1,10 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-attr: (\"#main > details.top-doc\", {\"open\": \"\"})\n+assert-attribute: (\"#main > details.top-doc\", {\"open\": \"\"})\n click: \"#toggle-all-docs\"\n wait-for: 1000\n // This is now collapsed so there shouldn't be the \"open\" attribute on details.\n-assert-attr-false: (\"#main > details.top-doc\", {\"open\": \"\"})\n+assert-attribute-false: (\"#main > details.top-doc\", {\"open\": \"\"})\n click: \"#toggle-all-docs\"\n wait-for: 1000\n // Not collapsed anymore so the \"open\" attribute should be back.\n-assert-attr: (\"#main > details.top-doc\", {\"open\": \"\"})\n+assert-attribute: (\"#main > details.top-doc\", {\"open\": \"\"})"}, {"sha": "bc97b38c8670c9b2eb7ac82f6823cfa79e207ab9", "filename": "src/test/rustdoc-gui/toggled-open-implementations.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggled-open-implementations.goml?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,4 +2,4 @@\n // has all the implementations toggled open by default, so users can\n // find method names in those implementations with Ctrl-F.\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n-assert-attr: (\".rustdoc-toggle.implementors-toggle\", {\"open\": \"\"})\n+assert-attribute: (\".rustdoc-toggle.implementors-toggle\", {\"open\": \"\"})"}, {"sha": "cd4caa6a89416a7b1521eaef0528b21c9816fb2b", "filename": "src/test/rustdoc/intra-doc/macros-disambiguators.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -0,0 +1,25 @@\n+#![crate_name = \"foo\"]\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+//! [foo!()]\n+// @has foo/index.html '//a[@href=\"macro.foo.html\"]' 'foo!()'\n+\n+//! [foo!{}]\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo!{}'\n+\n+//! [foo![]](foo![])\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo![]'\n+\n+//! [foo1](foo!())\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo1'\n+\n+//! [foo2](foo!{})\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo2'\n+\n+//! [foo3](foo![])\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo3'\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {};\n+}"}, {"sha": "1b6bcfbb9fcdedf5ad0a39935a092193cffcd9cc", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -16,7 +16,7 @@ type D = (u8, u8)::AssocTy;\n \n type E = _::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures for type aliases\n \n type F = &'static (u8)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n@@ -47,37 +47,37 @@ type I = ty!()::AssocTy;\n \n trait K<A, B> {}\n fn foo<X: K<_, _>>(x: X) {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn bar<F>(_: F) where F: Fn() -> _ {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn baz<F: Fn() -> _>(_: F) {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n struct L<F>(F) where F: Fn() -> _;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n struct M<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n     a: F,\n }\n enum N<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for enums\n     Foo(F),\n }\n \n union O<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for unions\n     foo: F,\n }\n \n trait P<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for traits\n }\n \n trait Q {\n     fn foo<F>(_: F) where F: Fn() -> _ {}\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn main() {}"}, {"sha": "8db9652b1eadeb6a686c956e64c95006b5908289", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -81,7 +81,7 @@ error[E0223]: ambiguous associated type\n LL | type D = (u8, u8)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(u8, u8) as Trait>::AssocTy`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n   --> $DIR/bad-assoc-ty.rs:17:10\n    |\n LL | type E = _::AssocTy;\n@@ -122,7 +122,7 @@ error[E0223]: ambiguous associated type\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:49:13\n    |\n LL | fn foo<X: K<_, _>>(x: X) {}\n@@ -135,7 +135,7 @@ help: use type parameters instead\n LL | fn foo<X: K<T, T>, T>(x: X) {}\n    |             ^  ^ ^^^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:52:34\n    |\n LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n@@ -146,7 +146,7 @@ help: use type parameters instead\n LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n    |         ^^^                         ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:55:19\n    |\n LL | fn baz<F: Fn() -> _>(_: F) {}\n@@ -157,7 +157,7 @@ help: use type parameters instead\n LL | fn baz<F: Fn() -> T, T>(_: F) {}\n    |                   ^^^^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:58:33\n    |\n LL | struct L<F>(F) where F: Fn() -> _;\n@@ -168,7 +168,7 @@ help: use type parameters instead\n LL | struct L<F, T>(F) where F: Fn() -> T;\n    |           ^^^                      ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:60:30\n    |\n LL | struct M<F> where F: Fn() -> _ {\n@@ -179,7 +179,7 @@ help: use type parameters instead\n LL | struct M<F, T> where F: Fn() -> T {\n    |           ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for enums\n   --> $DIR/bad-assoc-ty.rs:64:28\n    |\n LL | enum N<F> where F: Fn() -> _ {\n@@ -190,7 +190,7 @@ help: use type parameters instead\n LL | enum N<F, T> where F: Fn() -> T {\n    |         ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for unions\n   --> $DIR/bad-assoc-ty.rs:69:29\n    |\n LL | union O<F> where F: Fn() -> _ {\n@@ -201,7 +201,7 @@ help: use type parameters instead\n LL | union O<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for traits\n   --> $DIR/bad-assoc-ty.rs:74:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n@@ -212,7 +212,7 @@ help: use type parameters instead\n LL | trait P<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:79:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}"}, {"sha": "cc0c2df72ea7ccbf3c90fb041c9c033950861951", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/E0121.rs:1:13\n    |\n LL | fn foo() -> _ { 5 }\n@@ -7,7 +7,7 @@ LL | fn foo() -> _ { 5 }\n    |             not allowed in type signatures\n    |             help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/E0121.rs:3:13\n    |\n LL | static BAR: _ = \"test\";"}, {"sha": "550974bf7788157aa72a0a3d3197e43c4ef100bd", "filename": "src/test/ui/fn/issue-80179.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -8,15 +8,15 @@ fn returns_i32() -> i32 {\n }\n \n fn returns_fn_ptr() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n //~| HELP replace with the correct return type\n //~| SUGGESTION fn() -> i32\n     returns_i32\n }\n \n fn returns_closure() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n //~| HELP consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n //~| NOTE for more information on `Fn` traits and closure types, see"}, {"sha": "96d0f02b01af4478c4c88ac656f0b7aefb2cee65", "filename": "src/test/ui/fn/issue-80179.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80179.rs:10:24\n    |\n LL | fn returns_fn_ptr() -> _ {\n@@ -7,7 +7,7 @@ LL | fn returns_fn_ptr() -> _ {\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `fn() -> i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80179.rs:18:25\n    |\n LL | fn returns_closure() -> _ {"}, {"sha": "6880e1a46293f99a204fcccada17fa1ff91ffd10", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -4,7 +4,7 @@ macro_rules! suite {\n             const A = \"A\".$fn();\n             //~^ ERROR the name `A` is defined multiple times\n             //~| ERROR missing type for `const` item\n-            //~| ERROR the type placeholder `_` is not allowed within types\n+            //~| ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n         )*\n     }\n }"}, {"sha": "34c2073db0485f05a44b956f35609ad5c345816f", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -20,7 +20,7 @@ error: missing type for `const` item\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n    |\n LL |               const A = \"A\".$fn();\n-   |                     ^ help: provide a type for the item: `A: usize`\n+   |                     ^ help: provide a type for the constant: `A: usize`\n ...\n LL | / suite! {\n LL | |     len;\n@@ -30,7 +30,7 @@ LL | | }\n    |\n    = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n    |\n LL |               const A = \"A\".$fn();"}, {"sha": "cc17d8f8e3962e59f2d3782367c7eb6f63603132", "filename": "src/test/ui/self/self-infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,8 +1,8 @@\n struct S;\n \n impl S {\n-    fn f(self: _) {} //~ERROR the type placeholder `_` is not allowed within types on item sig\n-    fn g(self: &_) {} //~ERROR the type placeholder `_` is not allowed within types on item sig\n+    fn f(self: _) {} //~ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    fn g(self: &_) {} //~ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn main() {}"}, {"sha": "8d70c6287e55ac65cac1d3a2454ee913020d640c", "filename": "src/test/ui/self/self-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/self-infer.rs:4:16\n    |\n LL |     fn f(self: _) {}\n@@ -9,7 +9,7 @@ help: use type parameters instead\n LL |     fn f<T>(self: T) {}\n    |         ^^^       ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/self-infer.rs:5:17\n    |\n LL |     fn g(self: &_) {}"}, {"sha": "6f46cfdf02467ffa934dc6d46aaedea1f2534ed2", "filename": "src/test/ui/suggestions/const-no-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -32,20 +32,20 @@ static mut SM2 = \"abc\";\n \n const C = 42;\n //~^ ERROR missing type for `const` item\n-//~| HELP provide a type for the item\n+//~| HELP provide a type for the constant\n //~| SUGGESTION C: i32\n \n const D = &&42;\n //~^ ERROR missing type for `const` item\n-//~| HELP provide a type for the item\n+//~| HELP provide a type for the constant\n //~| SUGGESTION D: &&i32\n \n static S = Vec::<String>::new();\n //~^ ERROR missing type for `static` item\n-//~| HELP provide a type for the item\n+//~| HELP provide a type for the static variable\n //~| SUGGESTION S: Vec<String>\n \n static mut SM = \"abc\";\n //~^ ERROR missing type for `static mut` item\n-//~| HELP provide a type for the item\n+//~| HELP provide a type for the static variable\n //~| SUGGESTION &str"}, {"sha": "3b0fd6337f1f15df902909f9493cc36f5b4306f9", "filename": "src/test/ui/suggestions/const-no-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-no-type.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,25 +2,25 @@ error: missing type for `const` item\n   --> $DIR/const-no-type.rs:33:7\n    |\n LL | const C = 42;\n-   |       ^ help: provide a type for the item: `C: i32`\n+   |       ^ help: provide a type for the constant: `C: i32`\n \n error: missing type for `const` item\n   --> $DIR/const-no-type.rs:38:7\n    |\n LL | const D = &&42;\n-   |       ^ help: provide a type for the item: `D: &&i32`\n+   |       ^ help: provide a type for the constant: `D: &&i32`\n \n error: missing type for `static` item\n   --> $DIR/const-no-type.rs:43:8\n    |\n LL | static S = Vec::<String>::new();\n-   |        ^ help: provide a type for the item: `S: Vec<String>`\n+   |        ^ help: provide a type for the static variable: `S: Vec<String>`\n \n error: missing type for `static mut` item\n   --> $DIR/const-no-type.rs:48:12\n    |\n LL | static mut SM = \"abc\";\n-   |            ^^ help: provide a type for the item: `SM: &str`\n+   |            ^^ help: provide a type for the static variable: `SM: &str`\n \n error: missing type for `const` item\n   --> $DIR/const-no-type.rs:14:7"}, {"sha": "483f9bbb48cc6d69656b7ef7923d2ac30bee03d6", "filename": "src/test/ui/suggestions/unnamable-types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -5,17 +5,17 @@\n \n const A = 5;\n //~^ ERROR: missing type for `const` item\n-//~| HELP: provide a type for the item\n+//~| HELP: provide a type for the constant\n \n static B: _ = \"abc\";\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for static variables\n //~| NOTE: not allowed in type signatures\n //~| HELP: replace with the correct type\n \n \n // FIXME: this should also suggest a function pointer, as the closure is non-capturing\n const C: _ = || 42;\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for constants\n //~| NOTE: not allowed in type signatures\n //~| NOTE: however, the inferred type\n \n@@ -28,10 +28,10 @@ const D = S { t: { let i = 0; move || -> i32 { i } } };\n fn foo() -> i32 { 42 }\n const E = foo;\n //~^ ERROR: missing type for `const` item\n-//~| HELP: provide a type for the item\n+//~| HELP: provide a type for the constant\n const F = S { t: foo };\n //~^ ERROR: missing type for `const` item\n-//~| HELP: provide a type for the item\n+//~| HELP: provide a type for the constant\n \n \n const G = || -> i32 { yield 0; return 1; };"}, {"sha": "3a489a6e9431323d94f045c3199b0ccb0f85f822", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,9 +2,9 @@ error: missing type for `const` item\n   --> $DIR/unnamable-types.rs:6:7\n    |\n LL | const A = 5;\n-   |       ^ help: provide a type for the item: `A: i32`\n+   |       ^ help: provide a type for the constant: `A: i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/unnamable-types.rs:10:11\n    |\n LL | static B: _ = \"abc\";\n@@ -13,7 +13,7 @@ LL | static B: _ = \"abc\";\n    |           not allowed in type signatures\n    |           help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/unnamable-types.rs:17:10\n    |\n LL | const C: _ = || 42;\n@@ -41,13 +41,13 @@ error: missing type for `const` item\n   --> $DIR/unnamable-types.rs:29:7\n    |\n LL | const E = foo;\n-   |       ^ help: provide a type for the item: `E: fn() -> i32`\n+   |       ^ help: provide a type for the constant: `E: fn() -> i32`\n \n error: missing type for `const` item\n   --> $DIR/unnamable-types.rs:32:7\n    |\n LL | const F = S { t: foo };\n-   |       ^ help: provide a type for the item: `F: S<fn() -> i32>`\n+   |       ^ help: provide a type for the constant: `F: S<fn() -> i32>`\n \n error: missing type for `const` item\n   --> $DIR/unnamable-types.rs:37:7"}, {"sha": "1de9cd8007cff290d12e1cc2877d0f797a5231aa", "filename": "src/test/ui/typeck/issue-74086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     static BUG: fn(_) -> u8 = |_| 8;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n }"}, {"sha": "ac1752e17dfb96211c12dfdcbe7064e8e3ff9ffd", "filename": "src/test/ui/typeck/issue-74086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/issue-74086.rs:2:20\n    |\n LL |     static BUG: fn(_) -> u8 = |_| 8;"}, {"sha": "0d1534df091fa42ce494c035a02877e7bae7618e", "filename": "src/test/ui/typeck/issue-75883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -5,7 +5,7 @@ pub struct UI {}\n impl UI {\n     pub fn run() -> Result<_> {\n         //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n-        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n         let mut ui = UI {};\n         ui.interact();\n \n@@ -14,7 +14,7 @@ impl UI {\n \n     pub fn interact(&mut self) -> Result<_> {\n         //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n-        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures\n+        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n         unimplemented!();\n     }\n }"}, {"sha": "a722c4b5e3ea6b79dfa9df772558898fb68c8581", "filename": "src/test/ui/typeck/issue-75883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -34,13 +34,13 @@ help: add missing generic argument\n LL |     pub fn interact(&mut self) -> Result<_, E> {\n    |                                           ^^^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-75883.rs:15:42\n    |\n LL |     pub fn interact(&mut self) -> Result<_> {\n    |                                          ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-75883.rs:6:28\n    |\n LL |     pub fn run() -> Result<_> {"}, {"sha": "de4bdf4e6d9de9ff46bc933fdf4fdcf126339a89", "filename": "src/test/ui/typeck/issue-75889.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,10 +1,10 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constant items\n   --> $DIR/issue-75889.rs:3:24\n    |\n LL | const FOO: dyn Fn() -> _ = \"\";\n    |                        ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static items\n   --> $DIR/issue-75889.rs:4:25\n    |\n LL | static BOO: dyn Fn() -> _ = \"\";"}, {"sha": "99a93b1863d6ed804d2194f26b56f8560b66abe4", "filename": "src/test/ui/typeck/issue-80779.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -3,11 +3,11 @@\n pub struct T<'a>(&'a str);\n \n pub fn f<'a>(val: T<'a>) -> _ {\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n     g(val)\n }\n \n pub fn g(_: T<'static>) -> _ {}\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n \n fn main() {}"}, {"sha": "5a695fecc29dc7f4e4fbcb136988070be8c69b67", "filename": "src/test/ui/typeck/issue-80779.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80779.rs:10:28\n    |\n LL | pub fn g(_: T<'static>) -> _ {}\n@@ -7,7 +7,7 @@ LL | pub fn g(_: T<'static>) -> _ {}\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80779.rs:5:29\n    |\n LL | pub fn f<'a>(val: T<'a>) -> _ {"}, {"sha": "5117f250fe5ea0b8ed05f344d2c39e3cf4fb321a", "filename": "src/test/ui/typeck/issue-81885.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,10 +1,8 @@\n const TEST4: fn() -> _ = 42;\n-                  //~^ ERROR the type placeholder `_` is not allowed within types on item\n-                  //signatures\n+                  //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn main() {\n     const TEST5: fn() -> _ = 42;\n-                      //~^ ERROR the type placeholder `_` is not allowed within types on item\n-                      //signatures\n+                      //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n }"}, {"sha": "8206156a6180a08097aa905b7db3e70498bc62a2", "filename": "src/test/ui/typeck/issue-81885.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,11 +1,11 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/issue-81885.rs:1:22\n    |\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/issue-81885.rs:6:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/issue-81885.rs:5:26\n    |\n LL |     const TEST5: fn() -> _ = 42;\n    |                          ^ not allowed in type signatures"}, {"sha": "7c5cf1082be0925cadb8517a02825d3a4e0801dd", "filename": "src/test/ui/typeck/issue-83621-placeholder-static-in-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/issue-83621-placeholder-static-in-extern.rs:4:15\n    |\n LL |     static x: _;"}, {"sha": "f657bea164872d9a96777e427d37d6cb8c6054d7", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,13 +2,13 @@ struct MyStruct;\n \n trait Test {\n     const TEST: fn() -> _;\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n-    //~| ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for constants [E0121]\n }\n \n impl Test for MyStruct {\n     const TEST: fn() -> _ = 42;\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures [E0121]\n+    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n }\n \n fn main() {}"}, {"sha": "62f4db8638f3c14004f2d895580f86a09fc58a9e", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,16 +1,16 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/type-placeholder-fn-in-const.rs:4:25\n    |\n LL |     const TEST: fn() -> _;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/type-placeholder-fn-in-const.rs:4:25\n    |\n LL |     const TEST: fn() -> _;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/type-placeholder-fn-in-const.rs:10:25\n    |\n LL |     const TEST: fn() -> _ = 42;"}, {"sha": "b6aea9586b8794027fc1e2ada3fa8a149b0724df", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.full_tait.stderr", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.full_tait.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,43 +1,43 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:158:18\n+  --> $DIR/typeck_type_placeholder_item.rs:157:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:161:16\n+  --> $DIR/typeck_type_placeholder_item.rs:160:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:19\n+  --> $DIR/typeck_type_placeholder_item.rs:170:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:22\n+  --> $DIR/typeck_type_placeholder_item.rs:170:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:176:19\n+  --> $DIR/typeck_type_placeholder_item.rs:175:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:209:5\n+  --> $DIR/typeck_type_placeholder_item.rs:208:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:171:22\n+  --> $DIR/typeck_type_placeholder_item.rs:170:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -53,7 +53,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:10:14\n    |\n LL | fn test() -> _ { 5 }\n@@ -62,7 +62,7 @@ LL | fn test() -> _ { 5 }\n    |              not allowed in type signatures\n    |              help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:13:16\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n@@ -72,7 +72,7 @@ LL | fn test2() -> (_, _) { (5, 5) }\n    |               |not allowed in type signatures\n    |               help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:16:15\n    |\n LL | static TEST3: _ = \"test\";\n@@ -81,7 +81,7 @@ LL | static TEST3: _ = \"test\";\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:19:15\n    |\n LL | static TEST4: _ = 145;\n@@ -90,13 +90,13 @@ LL | static TEST4: _ = 145;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:22:15\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |               ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:25:13\n    |\n LL | fn test6(_: _) { }\n@@ -107,7 +107,7 @@ help: use type parameters instead\n LL | fn test6<T>(_: T) { }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:28:18\n    |\n LL | fn test6_b<T>(_: _, _: T) { }\n@@ -118,7 +118,7 @@ help: use type parameters instead\n LL | fn test6_b<T, U>(_: U, _: T) { }\n    |             ^^^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:31:30\n    |\n LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n@@ -129,7 +129,7 @@ help: use type parameters instead\n LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n    |                         ^^^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:34:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n@@ -140,7 +140,7 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:37:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -149,7 +149,7 @@ LL | fn test8(_f: fn() -> _) { }\n    |                      not allowed in type signatures\n    |                      help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:37:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -160,7 +160,7 @@ help: use type parameters instead\n LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:51:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n@@ -169,7 +169,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         |not allowed in type signatures\n    |                         help: replace with the correct return type: `&'static &'static usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:56:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n@@ -178,7 +178,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      |             not allowed in type signatures\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:70:8\n    |\n LL |     a: _,\n@@ -201,9 +201,9 @@ error: missing type for `static` item\n   --> $DIR/typeck_type_placeholder_item.rs:76:12\n    |\n LL |     static A = 42;\n-   |            ^ help: provide a type for the item: `A: i32`\n+   |            ^ help: provide a type for the static variable: `A: i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:78:15\n    |\n LL |     static B: _ = 42;\n@@ -212,23 +212,23 @@ LL |     static B: _ = 42;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:80:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:83:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:82:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n    |                     |\n    |                     not allowed in type signatures\n    |                     help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:86:23\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:85:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -237,32 +237,32 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      |not allowed in type signatures\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:89:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:88:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:92:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:91:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:95:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:94:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:98:20\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:97:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -272,8 +272,8 @@ help: use type parameters instead\n LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:101:20\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:100:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -283,17 +283,17 @@ help: use type parameters instead\n LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:29\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:103:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^\n    |                             |\n    |                             not allowed in type signatures\n    |                             help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:29\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:103:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -303,8 +303,8 @@ help: use type parameters instead\n LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:12\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:126:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -323,21 +323,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:132:18\n+  --> $DIR/typeck_type_placeholder_item.rs:131:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:132:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:131:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:136:30\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:135:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -346,17 +346,17 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             |not allowed in type signatures\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:139:33\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:138:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n    |                           |     |\n    |                           |     not allowed in type signatures\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:158:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:157:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -366,8 +366,8 @@ help: use type parameters instead\n LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:163:15\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n+  --> $DIR/typeck_type_placeholder_item.rs:162:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -379,14 +379,14 @@ help: use type parameters instead\n LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:166:34\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:165:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:171:25\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:170:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -396,8 +396,8 @@ help: use type parameters instead\n LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:176:25\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:175:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -407,38 +407,38 @@ help: use type parameters instead\n LL | struct BadStruct2<U, T>(U, T);\n    |                   ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:180:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n+  --> $DIR/typeck_type_placeholder_item.rs:179:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:186:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:185:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:220:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:219:31\n    |\n LL | fn value() -> Option<&'static _> {\n    |               ----------------^-\n    |               |               |\n    |               |               not allowed in type signatures\n    |               help: replace with the correct return type: `Option<&'static u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:225:10\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:224:10\n    |\n LL | const _: Option<_> = map(value);\n    |          ^^^^^^^^^\n    |          |\n    |          not allowed in type signatures\n    |          help: replace with the correct type: `Option<u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:143:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -448,8 +448,8 @@ help: use type parameters instead\n LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:146:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:145:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -461,8 +461,8 @@ help: use type parameters instead\n LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:148:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:147:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -472,8 +472,8 @@ help: use type parameters instead\n LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:150:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:149:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -483,8 +483,8 @@ help: use type parameters instead\n LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:152:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:151:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -496,8 +496,8 @@ help: use type parameters instead\n LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:154:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:153:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -507,34 +507,34 @@ help: use type parameters instead\n LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:193:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:196:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:195:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:198:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:197:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:201:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:200:26\n    |\n LL |     type F: std::ops::Fn(_);\n    |                          ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:44:24\n    |\n LL |     fn test9(&self) -> _ { () }\n@@ -543,7 +543,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:47:27\n    |\n LL |     fn test10(&self, _x : _) { }\n@@ -554,7 +554,7 @@ help: use type parameters instead\n LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:62:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n@@ -563,7 +563,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `Test9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:65:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n@@ -574,17 +574,17 @@ help: use type parameters instead\n LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:111:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:110:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n    |                               |\n    |                               not allowed in type signatures\n    |                               help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:34\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:113:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -594,17 +594,17 @@ help: use type parameters instead\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:119:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:118:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `FnTest9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:122:41\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:121:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -614,26 +614,26 @@ help: use type parameters instead\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:205:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:204:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:207:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:206:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:209:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:208:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:212:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:211:14\n    |\n LL |     const D: _ = 42;\n    |              ^"}, {"sha": "88cc3bfc7f8c3a29d016fdd4c8f4eb07f63de4e1", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.min_tait.stderr", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.min_tait.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,50 +1,50 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:158:18\n+  --> $DIR/typeck_type_placeholder_item.rs:157:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:161:16\n+  --> $DIR/typeck_type_placeholder_item.rs:160:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:19\n+  --> $DIR/typeck_type_placeholder_item.rs:170:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:171:22\n+  --> $DIR/typeck_type_placeholder_item.rs:170:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:176:19\n+  --> $DIR/typeck_type_placeholder_item.rs:175:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:209:5\n+  --> $DIR/typeck_type_placeholder_item.rs:208:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:171:22\n+  --> $DIR/typeck_type_placeholder_item.rs:170:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n    |                   |\n    |                   first use of `_`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:10:14\n    |\n LL | fn test() -> _ { 5 }\n@@ -53,7 +53,7 @@ LL | fn test() -> _ { 5 }\n    |              not allowed in type signatures\n    |              help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:13:16\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n@@ -63,7 +63,7 @@ LL | fn test2() -> (_, _) { (5, 5) }\n    |               |not allowed in type signatures\n    |               help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:16:15\n    |\n LL | static TEST3: _ = \"test\";\n@@ -72,7 +72,7 @@ LL | static TEST3: _ = \"test\";\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:19:15\n    |\n LL | static TEST4: _ = 145;\n@@ -81,13 +81,13 @@ LL | static TEST4: _ = 145;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:22:15\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |               ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:25:13\n    |\n LL | fn test6(_: _) { }\n@@ -98,7 +98,7 @@ help: use type parameters instead\n LL | fn test6<T>(_: T) { }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:28:18\n    |\n LL | fn test6_b<T>(_: _, _: T) { }\n@@ -109,7 +109,7 @@ help: use type parameters instead\n LL | fn test6_b<T, U>(_: U, _: T) { }\n    |             ^^^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:31:30\n    |\n LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n@@ -120,7 +120,7 @@ help: use type parameters instead\n LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n    |                         ^^^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:34:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n@@ -131,7 +131,7 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:37:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -140,7 +140,7 @@ LL | fn test8(_f: fn() -> _) { }\n    |                      not allowed in type signatures\n    |                      help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:37:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -151,7 +151,7 @@ help: use type parameters instead\n LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:51:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n@@ -160,7 +160,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         |not allowed in type signatures\n    |                         help: replace with the correct return type: `&'static &'static usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:56:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n@@ -169,7 +169,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      |             not allowed in type signatures\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:70:8\n    |\n LL |     a: _,\n@@ -192,9 +192,9 @@ error: missing type for `static` item\n   --> $DIR/typeck_type_placeholder_item.rs:76:12\n    |\n LL |     static A = 42;\n-   |            ^ help: provide a type for the item: `A: i32`\n+   |            ^ help: provide a type for the static variable: `A: i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:78:15\n    |\n LL |     static B: _ = 42;\n@@ -203,23 +203,23 @@ LL |     static B: _ = 42;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:80:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:83:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:82:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n    |                     |\n    |                     not allowed in type signatures\n    |                     help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:86:23\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:85:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -228,32 +228,32 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      |not allowed in type signatures\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:89:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:88:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:92:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:91:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n    |                      |\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:95:22\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/typeck_type_placeholder_item.rs:94:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:98:20\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:97:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -263,8 +263,8 @@ help: use type parameters instead\n LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:101:20\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:100:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -274,17 +274,17 @@ help: use type parameters instead\n LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:29\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:103:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^\n    |                             |\n    |                             not allowed in type signatures\n    |                             help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:104:29\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:103:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -294,8 +294,8 @@ help: use type parameters instead\n LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:127:12\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:126:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -314,21 +314,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:132:18\n+  --> $DIR/typeck_type_placeholder_item.rs:131:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:132:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:131:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:136:30\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:135:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -337,17 +337,17 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             |not allowed in type signatures\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:139:33\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:138:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n    |                           |     |\n    |                           |     not allowed in type signatures\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:158:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:157:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -357,8 +357,8 @@ help: use type parameters instead\n LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:163:15\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n+  --> $DIR/typeck_type_placeholder_item.rs:162:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -370,14 +370,14 @@ help: use type parameters instead\n LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:166:34\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:165:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:171:25\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:170:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -387,8 +387,8 @@ help: use type parameters instead\n LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:176:25\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+  --> $DIR/typeck_type_placeholder_item.rs:175:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -398,38 +398,38 @@ help: use type parameters instead\n LL | struct BadStruct2<U, T>(U, T);\n    |                   ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:180:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n+  --> $DIR/typeck_type_placeholder_item.rs:179:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:186:21\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+  --> $DIR/typeck_type_placeholder_item.rs:185:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:220:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:219:31\n    |\n LL | fn value() -> Option<&'static _> {\n    |               ----------------^-\n    |               |               |\n    |               |               not allowed in type signatures\n    |               help: replace with the correct return type: `Option<&'static u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:225:10\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:224:10\n    |\n LL | const _: Option<_> = map(value);\n    |          ^^^^^^^^^\n    |          |\n    |          not allowed in type signatures\n    |          help: replace with the correct type: `Option<u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:143:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -439,8 +439,8 @@ help: use type parameters instead\n LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:146:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:145:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -452,8 +452,8 @@ help: use type parameters instead\n LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:148:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:147:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -463,8 +463,8 @@ help: use type parameters instead\n LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:150:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:149:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -474,8 +474,8 @@ help: use type parameters instead\n LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:152:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:151:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -487,8 +487,8 @@ help: use type parameters instead\n LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:154:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:153:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -498,34 +498,34 @@ help: use type parameters instead\n LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:193:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:196:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:195:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:198:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:197:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:201:26\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:200:26\n    |\n LL |     type F: std::ops::Fn(_);\n    |                          ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:44:24\n    |\n LL |     fn test9(&self) -> _ { () }\n@@ -534,7 +534,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:47:27\n    |\n LL |     fn test10(&self, _x : _) { }\n@@ -545,7 +545,7 @@ help: use type parameters instead\n LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:62:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n@@ -554,7 +554,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `Test9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:65:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n@@ -565,17 +565,17 @@ help: use type parameters instead\n LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:111:31\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:110:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n    |                               |\n    |                               not allowed in type signatures\n    |                               help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:34\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:113:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -585,17 +585,17 @@ help: use type parameters instead\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:119:28\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:118:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n    |                            |\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `FnTest9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:122:41\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+  --> $DIR/typeck_type_placeholder_item.rs:121:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -605,26 +605,26 @@ help: use type parameters instead\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:205:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:204:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:207:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/typeck_type_placeholder_item.rs:206:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:209:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:208:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:212:14\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:211:14\n    |\n LL |     const D: _ = 42;\n    |              ^"}, {"sha": "55f5d44d46b37c27dadfc6ef0014c352087d5e0f", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -8,219 +8,218 @@\n // inference by using the `_` type placeholder.\n \n fn test() -> _ { 5 }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n fn test2() -> (_, _) { (5, 5) }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n static TEST3: _ = \"test\";\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n static TEST4: _ = 145;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n static TEST5: (_, _) = (1, 2);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n fn test6(_: _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn test6_b<T>(_: _, _: T) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn test7(x: _) { let _x: usize = x; }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n fn test8(_f: fn() -> _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n struct Test9;\n \n impl Test9 {\n     fn test9(&self) -> _ { () }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n     fn test10(&self, _x : _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn test11(x: &usize) -> &_ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n     &x\n }\n \n unsafe fn test12(x: *const usize) -> *const *const _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n     &x\n }\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n }\n \n struct Test10 {\n     a: _,\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n     b: (_, _),\n }\n \n pub fn main() {\n     static A = 42;\n     //~^ ERROR missing type for `static` item\n     static B: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n     static C: Option<_> = Some(42);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n     fn fn_test() -> _ { 5 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n     fn fn_test2() -> (_, _) { (5, 5) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n     static FN_TEST3: _ = \"test\";\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n     static FN_TEST4: _ = 145;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n     static FN_TEST5: (_, _) = (1, 2);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n \n     fn fn_test6(_: _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n     fn fn_test7(x: _) { let _x: usize = x; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n     fn fn_test8(_f: fn() -> _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n     struct FnTest9;\n \n     impl FnTest9 {\n         fn fn_test9(&self) -> _ { () }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n         fn fn_test10(&self, _x : _) { }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     }\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     }\n \n     struct FnTest10 {\n         a: _,\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n         b: (_, _),\n     }\n \n     fn fn_test11(_: _) -> (_, _) { panic!() }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n     //~| ERROR type annotations needed\n \n     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n }\n \n trait T {\n     fn method_test1(&self, x: _);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     fn method_test2(&self, x: _) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     fn method_test3(&self) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test1(x: _);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test2(x: _) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test3() -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n }\n \n struct BadStruct<_>(_);\n //~^ ERROR expected identifier, found reserved identifier `_`\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n trait BadTrait<_> {}\n //~^ ERROR expected identifier, found reserved identifier `_`\n impl BadTrait<_> for BadStruct<_> {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for implementations\n \n fn impl_trait() -> impl BadTrait<_> {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for opaque types\n     unimplemented!()\n }\n \n struct BadStruct1<_, _>(_);\n //~^ ERROR expected identifier, found reserved identifier `_`\n //~| ERROR expected identifier, found reserved identifier `_`\n //~| ERROR the name `_` is already used\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n struct BadStruct2<_, T>(_, T);\n //~^ ERROR expected identifier, found reserved identifier `_`\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n \n type X = Box<_>;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for type aliases\n \n struct Struct;\n trait Trait<T> {}\n impl Trait<usize> for Struct {}\n type Y = impl Trait<_>;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for opaque types\n fn foo() -> Y {\n     Struct\n }\n \n trait Qux {\n     type A;\n     type B = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n     const D: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n     // type E: _; // FIXME: make the parser propagate the existence of `B`\n     type F: std::ops::Fn(_);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n }\n impl Qux for Struct {\n     type A = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n     type B = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n     //~| ERROR associated constant in `impl` without body\n     const D: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n }\n \n fn map<T>(_: fn() -> Option<&'static T>) -> Option<T> {\n     None\n }\n \n fn value() -> Option<&'static _> {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n     Option::<&'static u8>::None\n }\n \n const _: Option<_> = map(value);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants"}, {"sha": "3af5cf926abf0a4eb2c076d56eb7c854b0fd6f83", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -2,27 +2,27 @@\n // using the `_` type placeholder.\n \n fn test1() -> _ { Some(42) }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n \n const TEST2: _ = 42u32;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n \n const TEST3: _ = Some(42);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n \n const TEST4: fn() -> _ = 42;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n \n trait Test5 {\n     const TEST5: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n }\n \n struct Test6;\n \n impl Test6 {\n     const TEST6: _ = 13;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n }\n \n pub fn main() {"}, {"sha": "1b56b1033a8c1f23d5a81460848452d290f83b5a", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/574c9dd6f293784da0d89837f85abb1777a729ad/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=574c9dd6f293784da0d89837f85abb1777a729ad", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item_help.rs:4:15\n    |\n LL | fn test1() -> _ { Some(42) }\n@@ -7,7 +7,7 @@ LL | fn test1() -> _ { Some(42) }\n    |               not allowed in type signatures\n    |               help: replace with the correct return type: `Option<i32>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:7:14\n    |\n LL | const TEST2: _ = 42u32;\n@@ -16,7 +16,7 @@ LL | const TEST2: _ = 42u32;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `u32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:10:14\n    |\n LL | const TEST3: _ = Some(42);\n@@ -25,13 +25,13 @@ LL | const TEST3: _ = Some(42);\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `Option<i32>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n    |\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:17:18\n    |\n LL |     const TEST5: _ = 42;\n@@ -40,7 +40,7 @@ LL |     const TEST5: _ = 42;\n    |                  not allowed in type signatures\n    |                  help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:24:18\n    |\n LL |     const TEST6: _ = 13;"}]}