{"sha": "57c623570a16fd6d550627ee8fed1eb7882521f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzYyMzU3MGExNmZkNmQ1NTA2MjdlZThmZWQxZWI3ODgyNTIxZjM=", "commit": {"author": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-09T18:06:46Z"}, "committer": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-09T18:06:46Z"}, "message": "Cosmetic fixes.", "tree": {"sha": "97c2cc01ef0c18cf6050a3aa65b8897a56e8812e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c2cc01ef0c18cf6050a3aa65b8897a56e8812e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c623570a16fd6d550627ee8fed1eb7882521f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c623570a16fd6d550627ee8fed1eb7882521f3", "html_url": "https://github.com/rust-lang/rust/commit/57c623570a16fd6d550627ee8fed1eb7882521f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c623570a16fd6d550627ee8fed1eb7882521f3/comments", "author": null, "committer": null, "parents": [{"sha": "d53c483502216bd9b3b2ff0fa1ce463690492d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53c483502216bd9b3b2ff0fa1ce463690492d7c", "html_url": "https://github.com/rust-lang/rust/commit/d53c483502216bd9b3b2ff0fa1ce463690492d7c"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "6a219bcdd55aa3f6cee93da89a30f3ad6f915754", "filename": "library/core/benches/num/int_log/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c623570a16fd6d550627ee8fed1eb7882521f3/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c623570a16fd6d550627ee8fed1eb7882521f3/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=57c623570a16fd6d550627ee8fed1eb7882521f3", "patch": "@@ -1,5 +1,3 @@\n-#![feature(int_log)]\n-\n use rand::Rng;\n use test::{black_box, Bencher};\n "}, {"sha": "398bb07a07e4c103e3ec81d3566daa5259b6dee0", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/57c623570a16fd6d550627ee8fed1eb7882521f3/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c623570a16fd6d550627ee8fed1eb7882521f3/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=57c623570a16fd6d550627ee8fed1eb7882521f3", "patch": "@@ -7,27 +7,27 @@ mod unchecked {\n         // in the bits above the low 8 bits.\n \n         // Adding c1 to val gives 10 in the top bits for val < 10, 11 for val >= 10\n-        let c1 = 0b11_00000000 - 10; // 758\n+        const C1: u32 = 0b11_00000000 - 10; // 758\n         // Adding c2 to val gives 01 in the top bits for val < 100, 10 for val >= 100\n-        let c2 = 0b10_00000000 - 100; // 412\n+        const C2: u32 = 0b10_00000000 - 100; // 412\n \n         // Value of top bits:\n         //            +c1  +c2  1&2\n         //     0..=9   10   01   00 = 0\n         //   10..=99   11   01   01 = 1\n         // 100..=255   11   10   10 = 2\n-        ((val + c1) & (val + c2)) >> 8\n+        ((val + C1) & (val + C2)) >> 8\n     }\n \n     // 0 < val < 100_000\n     const fn less_than_5(val: u32) -> u32 {\n         // Similar to u8, when adding one of these constants to val,\n         // we get two possible bit patterns above the low 17 bits,\n         // depending on whether val is below or above the threshold.\n-        let c1 = 0b011_00000000000000000 - 10; // 393206\n-        let c2 = 0b100_00000000000000000 - 100; // 524188\n-        let c3 = 0b111_00000000000000000 - 1000; // 916504\n-        let c4 = 0b100_00000000000000000 - 10000; // 514288\n+        const C1: u32 = 0b011_00000000000000000 - 10; // 393206\n+        const C2: u32 = 0b100_00000000000000000 - 100; // 524188\n+        const C3: u32 = 0b111_00000000000000000 - 1000; // 916504\n+        const C4: u32 = 0b100_00000000000000000 - 10000; // 514288\n \n         // Value of top bits:\n         //                +c1  +c2  1&2  +c3  +c4  3&4   ^\n@@ -36,7 +36,7 @@ mod unchecked {\n         //     100..=999  011  100  000  110  011  010  010 = 2\n         //   1000..=9999  011  100  000  111  011  011  011 = 3\n         // 10000..=99999  011  100  000  111  100  100  100 = 4\n-        (((val + c1) & (val + c2)) ^ ((val + c3) & (val + c4))) >> 17\n+        (((val + C1) & (val + C2)) ^ ((val + C3) & (val + C4))) >> 17\n     }\n \n     // 0 < val <= u16::MAX"}]}