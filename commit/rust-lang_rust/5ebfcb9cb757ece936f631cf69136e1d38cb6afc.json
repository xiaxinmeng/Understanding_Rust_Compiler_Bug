{"sha": "5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmZjYjljYjc1N2VjZTkzNmY2MzFjZjY5MTM2ZTFkMzhjYjZhZmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T15:36:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T15:38:36Z"}, "message": "Fix highlighting of const patterns", "tree": {"sha": "2fe6a843fb15a62e3177b473e99118778619ca39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe6a843fb15a62e3177b473e99118778619ca39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "html_url": "https://github.com/rust-lang/rust/commit/5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209eb32796c6fd56d1b378690c807cf73ce54235", "url": "https://api.github.com/repos/rust-lang/rust/commits/209eb32796c6fd56d1b378690c807cf73ce54235", "html_url": "https://github.com/rust-lang/rust/commit/209eb32796c6fd56d1b378690c807cf73ce54235"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "154adedb32d446bf1612d79b0b0f87640fc415aa", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "patch": "@@ -18,8 +18,8 @@ use crate::{\n     db::HirDatabase,\n     source_analyzer::{resolve_hir_path, ReferenceDescriptor, SourceAnalyzer},\n     source_binder::{ChildContainer, SourceBinder},\n-    Function, HirFileId, InFile, Local, MacroDef, Module, Name, Origin, Path, PathResolution,\n-    ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n+    Function, HirFileId, InFile, Local, MacroDef, Module, ModuleDef, Name, Origin, Path,\n+    PathResolution, ScopeDef, StructField, Trait, Type, TypeParam, VariantDef,\n };\n use ra_prof::profile;\n \n@@ -129,6 +129,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n+    pub fn resolve_bind_pat_to_const(&self, pat: &ast::BindPat) -> Option<ModuleDef> {\n+        self.analyze(pat.syntax()).resolve_bind_pat_to_const(self.db, pat)\n+    }\n+\n     // FIXME: use this instead?\n     // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n "}, {"sha": "c650a9e08fb96bce2785d3009937c4994bf8ea04", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "patch": "@@ -11,9 +11,9 @@ use either::Either;\n use hir_def::{\n     body::{\n         scope::{ExprScopes, ScopeId},\n-        BodySourceMap,\n+        Body, BodySourceMap,\n     },\n-    expr::{ExprId, PatId},\n+    expr::{ExprId, Pat, PatId},\n     resolver::{resolver_for_scope, Resolver, TypeNs, ValueNs},\n     AsMacroCall, DefWithBodyId,\n };\n@@ -25,8 +25,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, Path, Static, Struct,\n-    Trait, Type, TypeAlias, TypeParam,\n+    db::HirDatabase, Adt, Const, EnumVariant, Function, Local, MacroDef, ModuleDef, Path, Static,\n+    Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -35,6 +35,7 @@ use crate::{\n pub(crate) struct SourceAnalyzer {\n     file_id: HirFileId,\n     pub(crate) resolver: Resolver,\n+    body: Option<Arc<Body>>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n     infer: Option<Arc<InferenceResult>>,\n     scopes: Option<Arc<ExprScopes>>,\n@@ -66,7 +67,7 @@ impl SourceAnalyzer {\n         node: InFile<&SyntaxNode>,\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n-        let (_body, source_map) = db.body_with_source_map(def);\n+        let (body, source_map) = db.body_with_source_map(def);\n         let scopes = db.expr_scopes(def);\n         let scope = match offset {\n             None => scope_for(&scopes, &source_map, node),\n@@ -75,6 +76,7 @@ impl SourceAnalyzer {\n         let resolver = resolver_for_scope(db, def, scope);\n         SourceAnalyzer {\n             resolver,\n+            body: Some(body),\n             body_source_map: Some(source_map),\n             infer: Some(db.infer(def)),\n             scopes: Some(scopes),\n@@ -88,6 +90,7 @@ impl SourceAnalyzer {\n     ) -> SourceAnalyzer {\n         SourceAnalyzer {\n             resolver,\n+            body: None,\n             body_source_map: None,\n             infer: None,\n             scopes: None,\n@@ -197,6 +200,24 @@ impl SourceAnalyzer {\n         self.resolver.resolve_path_as_macro(db, path.mod_path()).map(|it| it.into())\n     }\n \n+    pub(crate) fn resolve_bind_pat_to_const(\n+        &self,\n+        db: &impl HirDatabase,\n+        pat: &ast::BindPat,\n+    ) -> Option<ModuleDef> {\n+        let pat_id = self.pat_id(&pat.clone().into())?;\n+        let body = self.body.as_ref()?;\n+        let path = match &body[pat_id] {\n+            Pat::Path(path) => path,\n+            _ => return None,\n+        };\n+        let res = resolve_hir_path(db, &self.resolver, &path)?;\n+        match res {\n+            PathResolution::Def(def) => Some(def),\n+            _ => None,\n+        }\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "cb4097e05f77f0b6222bc34f1dea762c619f424f", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "patch": "@@ -65,10 +65,17 @@\n     <span class=\"variable mutable\">y</span>;\n }\n \n-<span class=\"keyword\">enum</span> <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n-    <span class=\"enum_variant\">V</span>(<span class=\"type_param\">X</span>)\n+<span class=\"keyword\">enum</span> <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n+    <span class=\"enum_variant\">Some</span>(<span class=\"type_param\">T</span>),\n+    <span class=\"enum_variant\">None</span>,\n }\n+<span class=\"keyword\">use</span> <span class=\"enum\">Option</span>::*;\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type_param\">X</span>&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">X</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">new</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"enum\">E</span>&lt;<span class=\"type_param\">T</span>&gt; {}\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type_param\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function\">and</span>&lt;<span class=\"type_param\">U</span>&gt;(<span class=\"keyword\">self</span>, <span class=\"variable\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> {\n+            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">todo</span><span class=\"macro\">!</span>(),\n+            <span class=\"variable\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n+        }\n+    }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "21c4dd81816e6453549363bfea4a7b065b47cf97", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "patch": "@@ -50,12 +50,19 @@ fn main() {\n     y;\n }\n \n-enum E<X> {\n-    V(X)\n+enum Option<T> {\n+    Some(T),\n+    None,\n }\n-\n-impl<X> E<X> {\n-    fn new<T>() -> E<T> {}\n+use Option::*;\n+\n+impl<T> Option<T> {\n+    fn and<U>(self, other: Option<U>) -> Option<(T, U)> {\n+        match other {\n+            None => todo!(),\n+            Nope => Nope,\n+        }\n+    }\n }\n \"#\n         .trim(),"}, {"sha": "93f32ba855d8df0ae930f475985d44744a169f2e", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebfcb9cb757ece936f631cf69136e1d38cb6afc/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "patch": "@@ -90,6 +90,12 @@ impl NameClass {\n }\n \n pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option<NameClass> {\n+    if let Some(bind_pat) = name.syntax().parent().and_then(ast::BindPat::cast) {\n+        if let Some(def) = sema.resolve_bind_pat_to_const(&bind_pat) {\n+            return Some(NameClass::ConstReference(NameDefinition::ModuleDef(def)));\n+        }\n+    }\n+\n     classify_name_inner(sema, name).map(NameClass::NameDefinition)\n }\n "}]}