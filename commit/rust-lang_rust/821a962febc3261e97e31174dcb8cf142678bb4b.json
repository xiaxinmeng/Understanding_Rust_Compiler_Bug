{"sha": "821a962febc3261e97e31174dcb8cf142678bb4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMWE5NjJmZWJjMzI2MWU5N2UzMTE3NGRjYjhjZjE0MjY3OGJiNGI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-14T01:42:49Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T19:37:53Z"}, "message": "Various terminfo parameterization changes", "tree": {"sha": "9395416240ec0666077e1712c92cefd2ed3d60ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9395416240ec0666077e1712c92cefd2ed3d60ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/821a962febc3261e97e31174dcb8cf142678bb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/821a962febc3261e97e31174dcb8cf142678bb4b", "html_url": "https://github.com/rust-lang/rust/commit/821a962febc3261e97e31174dcb8cf142678bb4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/821a962febc3261e97e31174dcb8cf142678bb4b/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eadd83da8b9abc821b141195503836b2094a9ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eadd83da8b9abc821b141195503836b2094a9ea3", "html_url": "https://github.com/rust-lang/rust/commit/eadd83da8b9abc821b141195503836b2094a9ea3"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "a92ab5ef508567b8c8506d78624204162b2b241f", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/821a962febc3261e97e31174dcb8cf142678bb4b/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821a962febc3261e97e31174dcb8cf142678bb4b/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=821a962febc3261e97e31174dcb8cf142678bb4b", "patch": "@@ -68,6 +68,7 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n \n     while i < cap.len() {\n         cur = cap[i] as char;\n+        debug!(\"current char: %c\", cur);\n         let mut old_state = state;\n         match state {\n             Nothing => {\n@@ -132,9 +133,36 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                         (Number(x), Number(y)) => stack.push(Number(x | y)),\n                         (_, _) => return Err(~\"non-numbers on stack with |\")\n                     },\n-                    'A' => return Err(~\"logical operations unimplemented\"),\n-                    'O' => return Err(~\"logical operations unimplemented\"),\n-                    '!' => return Err(~\"logical operations unimplemented\"),\n+                    'A' => match (stack.pop(), stack.pop()) {\n+                        (Number(x), Number(y)) => {\n+                            if x == 1 && y == 1 {\n+                                stack.push(Number(1));\n+                            } else {\n+                                stack.push(Number(0));\n+                            }\n+                        },\n+                        (_, _) => return Err(~\"non-numbers on stack with logical and\")\n+                    },\n+                    'O' => match (stack.pop(), stack.pop()) {\n+                        (Number(x), Number(y)) => {\n+                            if x == 1 && y == 1 {\n+                                stack.push(Number(1));\n+                            } else {\n+                                stack.push(Number(0));\n+                            }\n+                        },\n+                        (_, _) => return Err(~\"non-numbers on stack with logical or\")\n+                    },\n+                    '!' => match stack.pop() {\n+                        Number(x) => {\n+                            if x == 1 {\n+                                stack.push(Number(0))\n+                            } else {\n+                                stack.push(Number(1))\n+                            }\n+                        },\n+                        _ => return Err(~\"non-number on stack with logical not\")\n+                    },\n                     '~' => match stack.pop() {\n                         Number(x) => stack.push(Number(!x)),\n                         _         => return Err(~\"non-number on stack with %~\")\n@@ -181,7 +209,9 @@ pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Pa\n                 state = CharClose;\n             },\n             CharClose => {\n-                assert!(cur == '\\'', \"malformed character constant\");\n+                if cur != '\\'' {\n+                    return Err(~\"malformed character constant\");\n+                }\n             },\n             IntConstant => {\n                 if cur == '}' {"}]}