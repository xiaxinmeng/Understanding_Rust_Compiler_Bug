{"sha": "bbcaed03bf5505f3fed351887769ed1531599502", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiY2FlZDAzYmY1NTA1ZjNmZWQzNTE4ODc3NjllZDE1MzE1OTk1MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T12:43:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-30T12:43:02Z"}, "message": "Auto merge of #79684 - usbalbin:const_copy, r=oli-obk\n\nMake copy[_nonoverlapping] const\n\nConstifies\n* `intrinsics::copy` and `intrinsics::copy_nonoverlapping`\n* `ptr::read` and `ptr::read_unaligned`\n  * `*const T::read` and `*const T::read_unaligned`\n  * `*mut T::read` and `*mut T::read_unaligned`\n* `MaybeUninit::assume_init_read`", "tree": {"sha": "1934000322455e6fb61afe0c5956c05ad0090eb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1934000322455e6fb61afe0c5956c05ad0090eb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcaed03bf5505f3fed351887769ed1531599502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502", "html_url": "https://github.com/rust-lang/rust/commit/bbcaed03bf5505f3fed351887769ed1531599502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcaed03bf5505f3fed351887769ed1531599502/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb", "html_url": "https://github.com/rust-lang/rust/commit/d107a87d34c1fc3521aaab7a2576ffbaf59cb2cb"}, {"sha": "0cea1c9206388edccf9132543df1ab2da00daaaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cea1c9206388edccf9132543df1ab2da00daaaa", "html_url": "https://github.com/rust-lang/rust/commit/0cea1c9206388edccf9132543df1ab2da00daaaa"}], "stats": {"total": 198, "additions": 185, "deletions": 13}, "files": [{"sha": "c182fa35ee24affbcc8ddf7a472e577c96b00521", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -322,6 +322,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n+            sym::copy | sym::copy_nonoverlapping => {\n+                let elem_ty = instance.substs.type_at(0);\n+                let elem_layout = self.layout_of(elem_ty)?;\n+                let count = self.read_scalar(args[2])?.to_machine_usize(self)?;\n+                let elem_align = elem_layout.align.abi;\n+\n+                let size = elem_layout.size.checked_mul(count, self).ok_or_else(|| {\n+                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n+                })?;\n+                let src = self.read_scalar(args[0])?.check_init()?;\n+                let src = self.memory.check_ptr_access(src, size, elem_align)?;\n+                let dest = self.read_scalar(args[1])?.check_init()?;\n+                let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n+\n+                if let (Some(src), Some(dest)) = (src, dest) {\n+                    self.memory.copy(\n+                        src,\n+                        dest,\n+                        size,\n+                        intrinsic_name == sym::copy_nonoverlapping,\n+                    )?;\n+                }\n+            }\n             sym::offset => {\n                 let ptr = self.read_scalar(args[0])?.check_init()?;\n                 let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;"}, {"sha": "87863ab5c68f43f3658309d7d9f9b55b697f2f35", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -1846,20 +1846,22 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n #[doc(alias = \"memcpy\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n #[inline]\n-pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n+pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    if cfg!(debug_assertions)\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions)\n         && !(is_aligned_and_not_null(src)\n             && is_aligned_and_not_null(dst)\n             && is_nonoverlapping(src, dst, count))\n     {\n         // Not panicking to keep codegen impact smaller.\n         abort();\n-    }\n+    }*/\n \n     // SAFETY: the safety contract for `copy_nonoverlapping` must be\n     // upheld by the caller.\n@@ -1928,16 +1930,19 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// ```\n #[doc(alias = \"memmove\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n #[inline]\n-pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n         // Not panicking to keep codegen impact smaller.\n         abort();\n-    }\n+    }*/\n \n     // SAFETY: the safety contract for `copy` must be upheld by the caller.\n     unsafe { copy(src, dst, count) }"}, {"sha": "4a3020d6b99e1de0a3761d324f0b95ebf13377a7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -73,6 +73,7 @@\n #![feature(const_assert_type)]\n #![feature(const_discriminant)]\n #![feature(const_cell_into_inner)]\n+#![feature(const_intrinsic_copy)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_float_classify)]\n@@ -93,6 +94,7 @@\n #![feature(const_precise_live_drops)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n+#![feature(const_ptr_read)]\n #![feature(const_raw_ptr_comparison)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_slice_from_raw_parts)]"}, {"sha": "b2a4d897eededb224022d19864bf9e3459f425ac", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -575,8 +575,9 @@ impl<T> MaybeUninit<T> {\n     /// // they both get dropped!\n     /// ```\n     #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n-    pub unsafe fn assume_init_read(&self) -> T {\n+    pub const unsafe fn assume_init_read(&self) -> T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n         // Reading from `self.as_ptr()` is safe since `self` should be initialized.\n         unsafe {"}, {"sha": "663001167865aaf90f0e550a96ea2ec7a271974e", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -745,8 +745,9 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n-    pub unsafe fn read(self) -> T\n+    pub const unsafe fn read(self) -> T\n     where\n         T: Sized,\n     {\n@@ -783,8 +784,9 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n-    pub unsafe fn read_unaligned(self) -> T\n+    pub const unsafe fn read_unaligned(self) -> T\n     where\n         T: Sized,\n     {"}, {"sha": "807f114ea466c123ae1d073f20334f491476096c", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -685,7 +685,8 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn read<T>(src: *const T) -> T {\n+#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+pub const unsafe fn read<T>(src: *const T) -> T {\n     // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n@@ -784,7 +785,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n-pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n+#[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n     // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads."}, {"sha": "785bf70c2992c4395fd2242933ee4c18d81beac4", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -852,8 +852,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read`]: crate::ptr::read()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n-    pub unsafe fn read(self) -> T\n+    pub const unsafe fn read(self) -> T\n     where\n         T: Sized,\n     {\n@@ -890,8 +891,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::read_unaligned`]: crate::ptr::read_unaligned()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n-    pub unsafe fn read_unaligned(self) -> T\n+    pub const unsafe fn read_unaligned(self) -> T\n     where\n         T: Sized,\n     {"}, {"sha": "4acd059ab03dfeaab4b80dd7338e3c5330e9eced", "filename": "library/core/tests/const_ptr.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -0,0 +1,51 @@\n+// Aligned to two bytes\n+const DATA: [u16; 2] = [u16::from_ne_bytes([0x01, 0x23]), u16::from_ne_bytes([0x45, 0x67])];\n+\n+const fn unaligned_ptr() -> *const u16 {\n+    // Since DATA.as_ptr() is aligned to two bytes, adding 1 byte to that produces an unaligned *const u16\n+    unsafe { (DATA.as_ptr() as *const u8).add(1) as *const u16 }\n+}\n+\n+#[test]\n+fn read() {\n+    use core::ptr;\n+\n+    const FOO: i32 = unsafe { ptr::read(&42 as *const i32) };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { ptr::read_unaligned(&42 as *const i32) };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *const u16 = unaligned_ptr();\n+\n+    const UNALIGNED: u16 = unsafe { ptr::read_unaligned(UNALIGNED_PTR) };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}\n+\n+#[test]\n+fn const_ptr_read() {\n+    const FOO: i32 = unsafe { (&42 as *const i32).read() };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { (&42 as *const i32).read_unaligned() };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *const u16 = unaligned_ptr();\n+\n+    const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}\n+\n+#[test]\n+fn mut_ptr_read() {\n+    const FOO: i32 = unsafe { (&42 as *const i32 as *mut i32).read() };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { (&42 as *const i32 as *mut i32).read_unaligned() };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *mut u16 = unaligned_ptr() as *mut u16;\n+\n+    const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}"}, {"sha": "9e8ec7060216bdcd447631643ec1d0ad138ae085", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -13,6 +13,8 @@\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -34,6 +36,7 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n+#![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_write_slice)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n@@ -82,6 +85,10 @@ mod cell;\n mod char;\n mod clone;\n mod cmp;\n+\n+#[cfg(not(bootstrap))]\n+mod const_ptr;\n+\n mod fmt;\n mod hash;\n mod intrinsics;"}, {"sha": "a09a2e91804b1b469eba1aaea3566000d0db6331", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -267,3 +267,10 @@ fn uninit_write_slice_cloned_no_drop() {\n \n     forget(src);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn uninit_const_assume_init_read() {\n+    const FOO: u32 = unsafe { MaybeUninit::new(42).assume_init_read() };\n+    assert_eq!(FOO, 42);\n+}"}, {"sha": "183aa9e51228c985651854a1134a7a6f098b8874", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: any use of this value will cause an error\n+\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n+\n+fn main() {\n+    use std::ptr;\n+\n+    const DATA: [u32; 1] = [42];\n+\n+    const PAST_END_PTR: *const u32 = unsafe { DATA.as_ptr().add(1) };\n+\n+    const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+    const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+    const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+}"}, {"sha": "ca65a079947e0f1c8552bed928493b0452c32688", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bbcaed03bf5505f3fed351887769ed1531599502/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=bbcaed03bf5505f3fed351887769ed1531599502", "patch": "@@ -0,0 +1,54 @@\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:13:5\n+   |\n+LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+   |     ------------------------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |              inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:14:5\n+   |\n+LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+   |     --------------------------------------------------------\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |              inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:15:5\n+   |\n+LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+   |     --------------------------------------------------------------------\n+\n+error: aborting due to 3 previous errors\n+"}]}