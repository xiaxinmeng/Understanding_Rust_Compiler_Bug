{"sha": "72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjk0ZDU4MjkzMTM0OGY2YWMxODYyMGM4YjRjZTVjOWM5YzdhM2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-09T00:50:19Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-31T21:05:53Z"}, "message": "give `apply_param_substs` a `SharedCrateContext`\n\nI plan to put a cache on the shared context, for now at least.", "tree": {"sha": "81e3ab77eed52eaa3872d6ca834d48bb00841402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e3ab77eed52eaa3872d6ca834d48bb00841402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "html_url": "https://github.com/rust-lang/rust/commit/72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb7362c2c8e614b25aa7daa286805ce1382c6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb7362c2c8e614b25aa7daa286805ce1382c6af", "html_url": "https://github.com/rust-lang/rust/commit/4eb7362c2c8e614b25aa7daa286805ce1382c6af"}], "stats": {"total": 97, "additions": 53, "deletions": 44}, "files": [{"sha": "99126095ede3e699d85612b00ef81031b44d67ec", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -1128,7 +1128,7 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n \n     let fn_ty = ccx.tcx().lookup_item_type(instance.def).ty;\n     let fn_ty = ccx.tcx().erase_regions(&fn_ty);\n-    let fn_ty = monomorphize::apply_param_substs(ccx.tcx(), instance.substs, &fn_ty);\n+    let fn_ty = monomorphize::apply_param_substs(ccx.shared(), instance.substs, &fn_ty);\n \n     let sig = ccx.tcx().erase_late_bound_regions(fn_ty.fn_sig());\n     let sig = ccx.tcx().normalize_associated_type(&sig);\n@@ -1151,7 +1151,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     attributes::set_frame_pointer_elimination(ccx, llfndecl);\n \n     let ctor_ty = ccx.tcx().lookup_item_type(def_id).ty;\n-    let ctor_ty = monomorphize::apply_param_substs(ccx.tcx(), substs, &ctor_ty);\n+    let ctor_ty = monomorphize::apply_param_substs(ccx.shared(), substs, &ctor_ty);\n \n     let sig = ccx.tcx().erase_late_bound_regions(&ctor_ty.fn_sig());\n     let sig = ccx.tcx().normalize_associated_type(&sig);\n@@ -1894,7 +1894,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n     };\n \n     let codegen_units = time(time_passes, \"codegen unit partitioning\", || {\n-        partitioning::partition(scx.tcx(),\n+        partitioning::partition(scx,\n                                 items.iter().cloned(),\n                                 strategy,\n                                 &inlining_map,"}, {"sha": "33cacbe194bb0ee1c66bcdcf59d4252076546aa3", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -28,7 +28,7 @@ use base;\n use base::*;\n use build::*;\n use closure;\n-use common::{self, Block, Result, CrateContext, FunctionContext};\n+use common::{self, Block, Result, CrateContext, FunctionContext, SharedCrateContext};\n use consts;\n use debuginfo::DebugLoc;\n use declare;\n@@ -37,7 +37,7 @@ use monomorphize::{self, Instance};\n use trans_item::TransItem;\n use type_of;\n use Disr;\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::hir;\n \n use syntax_pos::DUMMY_SP;\n@@ -97,7 +97,7 @@ impl<'tcx> Callee<'tcx> {\n             return Callee::trait_method(ccx, trait_id, def_id, substs);\n         }\n \n-        let fn_ty = def_ty(tcx, def_id, substs);\n+        let fn_ty = def_ty(ccx.shared(), def_id, substs);\n         if let ty::TyFnDef(_, _, f) = fn_ty.sty {\n             if f.abi == Abi::RustIntrinsic || f.abi == Abi::PlatformIntrinsic {\n                 return Callee {\n@@ -155,20 +155,20 @@ impl<'tcx> Callee<'tcx> {\n                                                          vtable_closure.substs,\n                                                          trait_closure_kind);\n \n-                let method_ty = def_ty(tcx, def_id, substs);\n+                let method_ty = def_ty(ccx.shared(), def_id, substs);\n                 Callee::ptr(llfn, method_ty)\n             }\n             traits::VtableFnPointer(vtable_fn_pointer) => {\n                 let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n                 let llfn = trans_fn_pointer_shim(ccx, trait_closure_kind, vtable_fn_pointer.fn_ty);\n \n-                let method_ty = def_ty(tcx, def_id, substs);\n+                let method_ty = def_ty(ccx.shared(), def_id, substs);\n                 Callee::ptr(llfn, method_ty)\n             }\n             traits::VtableObject(ref data) => {\n                 Callee {\n                     data: Virtual(tcx.get_vtable_index_of_object_method(data, def_id)),\n-                    ty: def_ty(tcx, def_id, substs)\n+                    ty: def_ty(ccx.shared(), def_id, substs)\n                 }\n             }\n             vtable => {\n@@ -244,12 +244,12 @@ impl<'tcx> Callee<'tcx> {\n }\n \n /// Given a DefId and some Substs, produces the monomorphic item type.\n-fn def_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn def_ty<'a, 'tcx>(shared: &SharedCrateContext<'a, 'tcx>,\n                     def_id: DefId,\n                     substs: &'tcx Substs<'tcx>)\n                     -> Ty<'tcx> {\n-    let ty = tcx.lookup_item_type(def_id).ty;\n-    monomorphize::apply_param_substs(tcx, substs, &ty)\n+    let ty = shared.tcx().lookup_item_type(def_id).ty;\n+    monomorphize::apply_param_substs(shared, substs, &ty)\n }\n \n /// Translates an adapter that implements the `Fn` trait for a fn\n@@ -407,7 +407,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let substs = tcx.normalize_associated_type(&substs);\n     let instance = Instance::new(def_id, substs);\n     let item_ty = ccx.tcx().lookup_item_type(def_id).ty;\n-    let fn_ty = monomorphize::apply_param_substs(ccx.tcx(), substs, &item_ty);\n+    let fn_ty = monomorphize::apply_param_substs(ccx.shared(), substs, &item_ty);\n \n     if let Some(&llfn) = ccx.instances().borrow().get(&instance) {\n         return (llfn, fn_ty);"}, {"sha": "c82bfa5c91ba1cbdd74ccd9703336cadc826c194", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     format!(\"Could not find MIR for closure: {:?}\", def_id)\n                 });\n \n-                let concrete_substs = monomorphize::apply_param_substs(self.scx.tcx(),\n+                let concrete_substs = monomorphize::apply_param_substs(self.scx,\n                                                                        self.param_substs,\n                                                                        &substs.func_substs);\n                 let concrete_substs = self.scx.tcx().erase_regions(&concrete_substs);\n@@ -477,11 +477,11 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             // have to instantiate all methods of the trait being cast to, so we\n             // can build the appropriate vtable.\n             mir::Rvalue::Cast(mir::CastKind::Unsize, ref operand, target_ty) => {\n-                let target_ty = monomorphize::apply_param_substs(self.scx.tcx(),\n+                let target_ty = monomorphize::apply_param_substs(self.scx,\n                                                                  self.param_substs,\n                                                                  &target_ty);\n                 let source_ty = operand.ty(self.mir, self.scx.tcx());\n-                let source_ty = monomorphize::apply_param_substs(self.scx.tcx(),\n+                let source_ty = monomorphize::apply_param_substs(self.scx,\n                                                                  self.param_substs,\n                                                                  &source_ty);\n                 let (source_ty, target_ty) = find_vtable_types_for_unsizing(self.scx,\n@@ -508,7 +508,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 assert!(can_have_local_instance(self.scx.tcx(), exchange_malloc_fn_def_id));\n                 let empty_substs = self.scx.empty_substs_for_def_id(exchange_malloc_fn_def_id);\n                 let exchange_malloc_fn_trans_item =\n-                    create_fn_trans_item(self.scx.tcx(),\n+                    create_fn_trans_item(self.scx,\n                                          exchange_malloc_fn_def_id,\n                                          empty_substs,\n                                          self.param_substs);\n@@ -531,7 +531,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             let ty = lvalue.ty(self.mir, self.scx.tcx())\n                            .to_ty(self.scx.tcx());\n \n-            let ty = monomorphize::apply_param_substs(self.scx.tcx(),\n+            let ty = monomorphize::apply_param_substs(self.scx,\n                                                       self.param_substs,\n                                                       &ty);\n             assert!(ty.is_normalized_for_trans());\n@@ -555,7 +555,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     // references to `const` items\n                     if let mir::Literal::Item { def_id, substs } = constant.literal {\n                         let tcx = self.scx.tcx();\n-                        let substs = monomorphize::apply_param_substs(tcx,\n+                        let substs = monomorphize::apply_param_substs(self.scx,\n                                                                       self.param_substs,\n                                                                       &substs);\n \n@@ -613,7 +613,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 // result in a translation item ...\n                 if can_result_in_trans_item(self.scx.tcx(), callee_def_id) {\n                     // ... and create one if it does.\n-                    let trans_item = create_fn_trans_item(self.scx.tcx(),\n+                    let trans_item = create_fn_trans_item(self.scx,\n                                                           callee_def_id,\n                                                           callee_substs,\n                                                           self.param_substs);\n@@ -670,7 +670,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         if is_drop_in_place_intrinsic(tcx, def_id, bare_fn_ty) => {\n                         let operand_ty = args[0].ty(self.mir, tcx);\n                         if let ty::TyRawPtr(mt) = operand_ty.sty {\n-                            let operand_ty = monomorphize::apply_param_substs(tcx,\n+                            let operand_ty = monomorphize::apply_param_substs(self.scx,\n                                                                               self.param_substs,\n                                                                               &mt.ty);\n                             let ty = glue::get_drop_glue_type(tcx, operand_ty);\n@@ -732,7 +732,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         assert!(can_have_local_instance(scx.tcx(), exchange_free_fn_def_id));\n         let fn_substs = scx.empty_substs_for_def_id(exchange_free_fn_def_id);\n         let exchange_free_fn_trans_item =\n-            create_fn_trans_item(scx.tcx(),\n+            create_fn_trans_item(scx,\n                                  exchange_free_fn_def_id,\n                                  fn_substs,\n                                  Substs::empty(scx.tcx()));\n@@ -769,7 +769,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         };\n \n         if can_have_local_instance(scx.tcx(), destructor_did) {\n-            let trans_item = create_fn_trans_item(scx.tcx(),\n+            let trans_item = create_fn_trans_item(scx,\n                                                   destructor_did,\n                                                   substs,\n                                                   Substs::empty(scx.tcx()));\n@@ -800,7 +800,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         ty::TyStruct(ref adt_def, substs) |\n         ty::TyEnum(ref adt_def, substs) => {\n             for field in adt_def.all_fields() {\n-                let field_type = monomorphize::apply_param_substs(scx.tcx(),\n+                let field_type = monomorphize::apply_param_substs(scx,\n                                                                   substs,\n                                                                   &field.unsubst_ty());\n                 let field_type = glue::get_drop_glue_type(scx.tcx(), field_type);\n@@ -894,8 +894,7 @@ fn do_static_trait_method_dispatch<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n            callee_substs,\n            param_substs);\n \n-\n-    let rcvr_substs = monomorphize::apply_param_substs(tcx,\n+    let rcvr_substs = monomorphize::apply_param_substs(scx,\n                                                        param_substs,\n                                                        &callee_substs);\n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n@@ -1016,11 +1015,13 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n     }\n }\n \n-fn create_fn_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn create_fn_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                   def_id: DefId,\n                                   fn_substs: &'tcx Substs<'tcx>,\n                                   param_substs: &'tcx Substs<'tcx>)\n                                   -> TransItem<'tcx> {\n+    let tcx = scx.tcx();\n+\n     debug!(\"create_fn_trans_item(def_id={}, fn_substs={:?}, param_substs={:?})\",\n             def_id_to_string(tcx, def_id),\n             fn_substs,\n@@ -1029,7 +1030,7 @@ fn create_fn_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // We only get here, if fn_def_id either designates a local item or\n     // an inlineable external item. Non-inlineable external items are\n     // ignored because we don't want to generate any code for them.\n-    let concrete_substs = monomorphize::apply_param_substs(tcx,\n+    let concrete_substs = monomorphize::apply_param_substs(scx,\n                                                            param_substs,\n                                                            &fn_substs);\n     assert!(concrete_substs.is_normalized_for_trans());\n@@ -1063,7 +1064,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n                         // create translation items\n                         .filter_map(|impl_method| {\n                             if can_have_local_instance(scx.tcx(), impl_method.method.def_id) {\n-                                Some(create_fn_trans_item(scx.tcx(),\n+                                Some(create_fn_trans_item(scx,\n                                     impl_method.method.def_id,\n                                     impl_method.substs,\n                                     Substs::empty(scx.tcx())))\n@@ -1114,7 +1115,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n \n             hir::ItemImpl(..) => {\n                 if self.mode == TransItemCollectionMode::Eager {\n-                    create_trans_items_for_default_impls(self.scx.tcx(),\n+                    create_trans_items_for_default_impls(self.scx,\n                                                          item,\n                                                          self.output);\n                 }\n@@ -1202,9 +1203,10 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n     }\n }\n \n-fn create_trans_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                                   item: &'tcx hir::Item,\n                                                   output: &mut Vec<TransItem<'tcx>>) {\n+    let tcx = scx.tcx();\n     match item.node {\n         hir::ItemImpl(_,\n                       _,\n@@ -1255,7 +1257,7 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     if can_have_local_instance(tcx, method.def_id) {\n                         let empty_substs = tcx.erase_regions(&mth.substs);\n-                        let item = create_fn_trans_item(tcx,\n+                        let item = create_fn_trans_item(scx,\n                                                         method.def_id,\n                                                         callee_substs,\n                                                         empty_substs);"}, {"sha": "c51b32331112e3156a497df3dafe1ac479621ead", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -350,7 +350,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        monomorphize::apply_param_substs(self.ccx.tcx(),\n+        monomorphize::apply_param_substs(self.ccx.shared(),\n                                          self.param_substs,\n                                          value)\n     }\n@@ -519,7 +519,7 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        monomorphize::apply_param_substs(self.tcx(),\n+        monomorphize::apply_param_substs(self.fcx.ccx.shared(),\n                                          self.fcx.param_substs,\n                                          value)\n     }"}, {"sha": "a3a7a79fb58be4d5ce42f4f0c601b8cc539ec203", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -414,7 +414,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             if cx.tcx().trait_id_of_impl(impl_def_id).is_none() {\n                 let impl_self_ty = cx.tcx().lookup_item_type(impl_def_id).ty;\n                 let impl_self_ty = cx.tcx().erase_regions(&impl_self_ty);\n-                let impl_self_ty = monomorphize::apply_param_substs(cx.tcx(),\n+                let impl_self_ty = monomorphize::apply_param_substs(cx.shared(),\n                                                                     instance.substs,\n                                                                     &impl_self_ty);\n "}, {"sha": "ade266a580e7873ddb02b1b6d9110a26b39c49da", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n     fn monomorphize<T>(&self, value: &T) -> T\n         where T: TransNormalize<'tcx>\n     {\n-        monomorphize::apply_param_substs(self.ccx.tcx(),\n+        monomorphize::apply_param_substs(self.ccx.shared(),\n                                          self.substs,\n                                          value)\n     }"}, {"sha": "66b227fe5c54d344802e994c931f441218a3b773", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -42,12 +42,13 @@ impl<'tcx> Instance<'tcx> {\n \n /// Monomorphizes a type from the AST by first applying the in-scope\n /// substitutions and then normalizing any associated types.\n-pub fn apply_param_substs<'a, 'tcx, T>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn apply_param_substs<'a, 'tcx, T>(scx: &SharedCrateContext<'a, 'tcx>,\n                                        param_substs: &Substs<'tcx>,\n                                        value: &T)\n                                        -> T\n     where T: TransNormalize<'tcx>\n {\n+    let tcx = scx.tcx();\n     debug!(\"apply_param_substs(param_substs={:?}, value={:?})\", param_substs, value);\n     let substituted = value.subst(tcx, param_substs);\n     debug!(\"apply_param_substs: substituted={:?}{}\",\n@@ -65,3 +66,4 @@ pub fn field_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     tcx.normalize_associated_type(&f.ty(tcx, param_substs))\n }\n+"}, {"sha": "a161bd199b1f6768ecf982d86b13b345bd499696", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -117,6 +117,7 @@\n //! inlining, even when they are not marked #[inline].\n \n use collector::InliningMap;\n+use context::SharedCrateContext;\n use llvm;\n use monomorphize;\n use rustc::dep_graph::{DepNode, WorkProductId};\n@@ -250,14 +251,16 @@ impl<'tcx> CodegenUnit<'tcx> {\n // Anything we can't find a proper codegen unit for goes into this.\n const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n \n-pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                               trans_items: I,\n                               strategy: PartitioningStrategy,\n                               inlining_map: &InliningMap<'tcx>,\n                               reachable: &NodeSet)\n                               -> Vec<CodegenUnit<'tcx>>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n+    let tcx = scx.tcx();\n+\n     if let PartitioningStrategy::FixedUnitCount(1) = strategy {\n         // If there is only a single codegen-unit, we can use a very simple\n         // scheme and don't have to bother with doing much analysis.\n@@ -267,7 +270,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // In the first step, we place all regular translation items into their\n     // respective 'home' codegen unit. Regular translation items are all\n     // functions and statics defined in the local crate.\n-    let mut initial_partitioning = place_root_translation_items(tcx,\n+    let mut initial_partitioning = place_root_translation_items(scx,\n                                                                 trans_items,\n                                                                 reachable);\n \n@@ -306,20 +309,21 @@ struct PreInliningPartitioning<'tcx> {\n \n struct PostInliningPartitioning<'tcx>(Vec<CodegenUnit<'tcx>>);\n \n-fn place_root_translation_items<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn place_root_translation_items<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                              trans_items: I,\n                                              _reachable: &NodeSet)\n                                              -> PreInliningPartitioning<'tcx>\n     where I: Iterator<Item = TransItem<'tcx>>\n {\n+    let tcx = scx.tcx();\n     let mut roots = FnvHashSet();\n     let mut codegen_units = FnvHashMap();\n \n     for trans_item in trans_items {\n         let is_root = !trans_item.is_instantiated_only_on_demand();\n \n         if is_root {\n-            let characteristic_def_id = characteristic_def_id_of_trans_item(tcx, trans_item);\n+            let characteristic_def_id = characteristic_def_id_of_trans_item(scx, trans_item);\n             let is_volatile = trans_item.is_generic_fn();\n \n             let codegen_unit_name = match characteristic_def_id {\n@@ -477,9 +481,10 @@ fn place_inlined_translation_items<'tcx>(initial_partitioning: PreInliningPartit\n     }\n }\n \n-fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn characteristic_def_id_of_trans_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                                  trans_item: TransItem<'tcx>)\n                                                  -> Option<DefId> {\n+    let tcx = scx.tcx();\n     match trans_item {\n         TransItem::Fn(instance) => {\n             // If this is a method, we want to put it into the same module as\n@@ -497,7 +502,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // self-type is:\n                 let impl_self_ty = tcx.lookup_item_type(impl_def_id).ty;\n                 let impl_self_ty = tcx.erase_regions(&impl_self_ty);\n-                let impl_self_ty = monomorphize::apply_param_substs(tcx,\n+                let impl_self_ty = monomorphize::apply_param_substs(scx,\n                                                                     instance.substs,\n                                                                     &impl_self_ty);\n "}, {"sha": "8a0f37230c8dfa21730fda3bd4e725c7cf7a7169", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72694d582931348f6ac18620c8b4ce5c9c9c7a3e/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n \n         let item_ty = ccx.tcx().lookup_item_type(instance.def).ty;\n         let item_ty = ccx.tcx().erase_regions(&item_ty);\n-        let mono_ty = monomorphize::apply_param_substs(ccx.tcx(), instance.substs, &item_ty);\n+        let mono_ty = monomorphize::apply_param_substs(ccx.shared(), instance.substs, &item_ty);\n \n         let attrs = ccx.tcx().get_attrs(instance.def);\n         let lldecl = declare::declare_fn(ccx, symbol_name, mono_ty);"}]}