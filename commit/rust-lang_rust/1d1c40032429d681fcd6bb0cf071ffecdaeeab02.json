{"sha": "1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMWM0MDAzMjQyOWQ2ODFmY2Q2YmIwY2YwNzFmZmVjZGFlZWFiMDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-24T12:28:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T12:28:39Z"}, "message": "Rollup merge of #73639 - ayazhafiz:i/73553, r=davidtwco\n\nChange heuristic for determining range literal\n\nCurrently, rustc uses a heuristic to determine if a range expression is\nnot a literal based on whether the expression looks like a function call\nor struct initialization. This fails for range literals whose\nlower/upper bounds are the results of function calls. A possibly-better\nheuristic is to check if the expression contains `..`, required in range\nliterals.\n\nOf course, this is also not perfect; for example, if the range\nexpression is a struct which includes some text with `..` this will\nfail, but in general I believe it is a better heuristic.\n\nA better alternative altogether is to add the `QPath::LangItem` enum\nvariant suggested in #60607. I would be happy to do this as a precursor\nto this patch if someone is able to provide general suggestions on how\nusages of `QPath` need to be changed later in the compiler with the\n`LangItem` variant.\n\nCloses #73553", "tree": {"sha": "40a67c3c4549cc7505a46f325606374ac2606174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40a67c3c4549cc7505a46f325606374ac2606174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe80b3CRBK7hj4Ov3rIwAAdHIIAJePn6e8ALdco729iVGmiVlz\ngNrvf6Qvmb3xve1Vb0hcdz9JzjoJiRlqSTQ2KVC58V5nfOMcW3PFZxMzB4L4oD2d\nlt4fh47DspzC9xmUs8dcBRAkongVbRSsauJEl5BIVdNIyuRJus0NUaEGQKDQLrr3\n6wYCoz3wtBDusGRPILSflowAIZ4V1FQTmX+JUD1Su0DpiMQSk9t15yN4ND+X2Ok3\ncsdIc9fR6AkkOmPxQ53aGvs+xxX+k3ToQFXygcyQdkfJz2LrhtNqehY50OdoaP8I\naMYAo/FJrPOgW9QRFpGadTUy5pVNfspEUVv88rykd7ZwWCTAHESS4+kNYZoxXHg=\n=x5Mv\n-----END PGP SIGNATURE-----\n", "payload": "tree 40a67c3c4549cc7505a46f325606374ac2606174\nparent 38c85b739314e2b5dedf8ff11feec53463261de4\nparent 7930f9a368c055db249a0378c1533aaedc7b037b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1593001719 +0200\ncommitter GitHub <noreply@github.com> 1593001719 +0200\n\nRollup merge of #73639 - ayazhafiz:i/73553, r=davidtwco\n\nChange heuristic for determining range literal\n\nCurrently, rustc uses a heuristic to determine if a range expression is\nnot a literal based on whether the expression looks like a function call\nor struct initialization. This fails for range literals whose\nlower/upper bounds are the results of function calls. A possibly-better\nheuristic is to check if the expression contains `..`, required in range\nliterals.\n\nOf course, this is also not perfect; for example, if the range\nexpression is a struct which includes some text with `..` this will\nfail, but in general I believe it is a better heuristic.\n\nA better alternative altogether is to add the `QPath::LangItem` enum\nvariant suggested in #60607. I would be happy to do this as a precursor\nto this patch if someone is able to provide general suggestions on how\nusages of `QPath` need to be changed later in the compiler with the\n`LangItem` variant.\n\nCloses #73553\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "html_url": "https://github.com/rust-lang/rust/commit/1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38c85b739314e2b5dedf8ff11feec53463261de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c85b739314e2b5dedf8ff11feec53463261de4", "html_url": "https://github.com/rust-lang/rust/commit/38c85b739314e2b5dedf8ff11feec53463261de4"}, {"sha": "7930f9a368c055db249a0378c1533aaedc7b037b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7930f9a368c055db249a0378c1533aaedc7b037b", "html_url": "https://github.com/rust-lang/rust/commit/7930f9a368c055db249a0378c1533aaedc7b037b"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "f3dfec7ca72150386063bb74dacc5dd9df1508a1", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "patch": "@@ -1511,13 +1511,7 @@ pub fn is_range_literal(sm: &SourceMap, expr: &Expr<'_>) -> bool {\n     // Check whether a span corresponding to a range expression is a\n     // range literal, rather than an explicit struct or `new()` call.\n     fn is_lit(sm: &SourceMap, span: &Span) -> bool {\n-        let end_point = sm.end_point(*span);\n-\n-        if let Ok(end_string) = sm.span_to_snippet(end_point) {\n-            !(end_string.ends_with('}') || end_string.ends_with(')'))\n-        } else {\n-            false\n-        }\n+        sm.span_to_snippet(*span).map(|range_src| range_src.contains(\"..\")).unwrap_or(false)\n     };\n \n     match expr.kind {"}, {"sha": "e65dba0a0382175520a4667b5c5db7ca74b6f289", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.rs?ref=1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "patch": "@@ -0,0 +1,16 @@\n+type Range = std::ops::Range<usize>;\n+\n+fn demo(r: &Range) {\n+    println!(\"{:?}\", r);\n+}\n+\n+fn tell(x: usize) -> usize {\n+    x\n+}\n+\n+fn main() {\n+    demo(tell(1)..tell(10));\n+    //~^ ERROR mismatched types\n+    demo(1..10);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "5167b87fd27b82e7a6fc35e1c2ea74fa51065ad9", "filename": "src/test/ui/range/issue-73553-misinterp-range-literal.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d1c40032429d681fcd6bb0cf071ffecdaeeab02/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-73553-misinterp-range-literal.stderr?ref=1d1c40032429d681fcd6bb0cf071ffecdaeeab02", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:12:10\n+   |\n+LL |     demo(tell(1)..tell(10));\n+   |          ^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected reference, found struct `std::ops::Range`\n+   |          help: consider borrowing here: `&(tell(1)..tell(10))`\n+   |\n+   = note: expected reference `&std::ops::Range<usize>`\n+                 found struct `std::ops::Range<usize>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73553-misinterp-range-literal.rs:14:10\n+   |\n+LL |     demo(1..10);\n+   |          ^^^^^\n+   |          |\n+   |          expected reference, found struct `std::ops::Range`\n+   |          help: consider borrowing here: `&(1..10)`\n+   |\n+   = note: expected reference `&std::ops::Range<usize>`\n+                 found struct `std::ops::Range<{integer}>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}