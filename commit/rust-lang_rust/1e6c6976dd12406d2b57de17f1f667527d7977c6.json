{"sha": "1e6c6976dd12406d2b57de17f1f667527d7977c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNmM2OTc2ZGQxMjQwNmQyYjU3ZGUxN2YxZjY2NzUyN2Q3OTc3YzY=", "commit": {"author": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-22T20:34:07Z"}, "committer": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-23T22:02:13Z"}, "message": "PR comments", "tree": {"sha": "591e24812d91a70a6d01d2460453e10f0da76cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/591e24812d91a70a6d01d2460453e10f0da76cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6c6976dd12406d2b57de17f1f667527d7977c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6c6976dd12406d2b57de17f1f667527d7977c6", "html_url": "https://github.com/rust-lang/rust/commit/1e6c6976dd12406d2b57de17f1f667527d7977c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6c6976dd12406d2b57de17f1f667527d7977c6/comments", "author": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "html_url": "https://github.com/rust-lang/rust/commit/60a80849ce20bbfc3bbef741a2be8cdc7225b96d"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "eec13545956d023977d7295c9a89036567cf252f", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1e6c6976dd12406d2b57de17f1f667527d7977c6/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6c6976dd12406d2b57de17f1f667527d7977c6/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=1e6c6976dd12406d2b57de17f1f667527d7977c6", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -17,17 +17,17 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    ///\n-    /// ```rust,ignore\n-    /// // Bad\n+    /// ```rust\n     /// fn foo(fail: bool) -> Result<i32, String> {\n     ///     if fail {\n     ///       Err(\"failed\")?;\n     ///     }\n     ///     Ok(0)\n     /// }\n+    /// ```\n+    /// Could be written:\n     ///\n-    /// // Good\n+    /// ```rust\n     /// fn foo(fail: bool) -> Result<i32, String> {\n     ///     if fail {\n     ///       return Err(\"failed\".into());\n@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n             if let ExprKind::Match(ref match_arg, _, MatchSource::TryDesugar) = expr.node;\n             if let ExprKind::Call(ref match_fun, ref try_args) = match_arg.node;\n             if let ExprKind::Path(ref match_fun_path) = match_fun.node;\n-            if match_qpath(match_fun_path, &[\"std\", \"ops\", \"Try\", \"into_result\"]);\n+            if match_qpath(match_fun_path, &paths::TRY_INTO_RESULT);\n             if let Some(ref try_arg) = try_args.get(0);\n             if let ExprKind::Call(ref err_fun, ref err_args) = try_arg.node;\n             if let Some(ref err_arg) = err_args.get(0);\n@@ -73,19 +73,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n                     format!(\"return Err({}.into())\", snippet(cx, err_arg.span, \"_\"))\n                 };\n \n-                span_lint_and_then(\n+                span_lint_and_sugg(\n                     cx,\n                     TRY_ERR,\n                     expr.span,\n-                    &format!(\"confusing error return, consider using `{}`\", suggestion),\n-                    |db| {\n-                        db.span_suggestion(\n-                            expr.span,\n-                            \"try this\",\n-                            suggestion,\n-                            Applicability::MaybeIncorrect\n-                        );\n-                    },\n+                    \"returning an `Err(_)` with the `?` operator\",\n+                    \"try this\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect\n                 );\n             }\n         }\n@@ -97,7 +92,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n // its output type.\n fn find_err_return_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx ExprKind) -> Option<Ty<'tcx>> {\n     if let ExprKind::Match(_, ref arms, MatchSource::TryDesugar) = expr {\n-        arms.iter().filter_map(|ty| find_err_return_type_arm(cx, ty)).nth(0)\n+        arms.iter().find_map(|ty| find_err_return_type_arm(cx, ty))\n     } else {\n         None\n     }\n@@ -109,7 +104,7 @@ fn find_err_return_type_arm<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arm: &'tcx Arm\n         if let ExprKind::Ret(Some(ref err_ret)) = arm.body.node;\n         if let ExprKind::Call(ref from_error_path, ref from_error_args) = err_ret.node;\n         if let ExprKind::Path(ref from_error_fn) = from_error_path.node;\n-        if match_qpath(from_error_fn, &[\"std\", \"ops\", \"Try\", \"from_error\"]);\n+        if match_qpath(from_error_fn, &paths::TRY_FROM_ERROR);\n         if let Some(from_error_arg) = from_error_args.get(0);\n         then {\n             Some(cx.tables.expr_ty(from_error_arg))"}, {"sha": "e08ff3e9705bb408ec7812ec79022e30776ba9b2", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e6c6976dd12406d2b57de17f1f667527d7977c6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6c6976dd12406d2b57de17f1f667527d7977c6/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=1e6c6976dd12406d2b57de17f1f667527d7977c6", "patch": "@@ -107,6 +107,7 @@ pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"\n pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const UNINIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];"}, {"sha": "8c49a3b183806e736e74cc3d9afb41bab0f50dbd", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e6c6976dd12406d2b57de17f1f667527d7977c6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6c6976dd12406d2b57de17f1f667527d7977c6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1e6c6976dd12406d2b57de17f1f667527d7977c6", "patch": "@@ -1823,7 +1823,7 @@ pub const ALL_LINTS: [Lint; 306] = [\n     Lint {\n         name: \"try_err\",\n         group: \"style\",\n-        desc: \"TODO\",\n+        desc: \"return errors explicitly rather than hiding them behind a `?`\",\n         deprecation: None,\n         module: \"try_err\",\n     },"}, {"sha": "b2fb35ffb515d8f2e86f7a4f1a7f90157a05fb9d", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e6c6976dd12406d2b57de17f1f667527d7977c6/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e6c6976dd12406d2b57de17f1f667527d7977c6/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=1e6c6976dd12406d2b57de17f1f667527d7977c6", "patch": "@@ -1,4 +1,4 @@\n-error: confusing error return, consider using `return Err(err)`\n+error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:7:5\n    |\n LL |     Err(err)?;\n@@ -10,19 +10,19 @@ note: lint level defined here\n LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n-error: confusing error return, consider using `return Err(err.into())`\n+error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:14:5\n    |\n LL |     Err(err)?;\n    |     ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n-error: confusing error return, consider using `return Err(err)`\n+error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:31:13\n    |\n LL |             Err(err)?;\n    |             ^^^^^^^^^ help: try this: `return Err(err)`\n \n-error: confusing error return, consider using `return Err(err.into())`\n+error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:46:13\n    |\n LL |             Err(err)?;"}]}