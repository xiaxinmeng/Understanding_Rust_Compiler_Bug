{"sha": "ce9818f2b7beaed0039f42605e2f547e9e461430", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTgxOGYyYjdiZWFlZDAwMzlmNDI2MDVlMmY1NDdlOWU0NjE0MzA=", "commit": {"author": {"name": "Hugues de Valon", "email": "hugues.devalon@arm.com", "date": "2021-01-24T17:15:05Z"}, "committer": {"name": "Hugues de Valon", "email": "hugues.devalon@arm.com", "date": "2021-02-02T13:04:31Z"}, "message": "Add a new ABI to support cmse_nonsecure_call\n\nThis commit adds a new ABI to be selected via `extern\n\"C-cmse-nonsecure-call\"` on function pointers in order for the compiler to\napply the corresponding cmse_nonsecure_call callsite attribute.\nFor Armv8-M targets supporting TrustZone-M, this will perform a\nnon-secure function call by saving, clearing and calling a non-secure\nfunction pointer using the BLXNS instruction.\n\nSee the page on the unstable book for details.\n\nSigned-off-by: Hugues de Valon <hugues.devalon@arm.com>", "tree": {"sha": "b6b6b3e156b4d3d38e12124ce5129b00d19fb9c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b6b3e156b4d3d38e12124ce5129b00d19fb9c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce9818f2b7beaed0039f42605e2f547e9e461430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9818f2b7beaed0039f42605e2f547e9e461430", "html_url": "https://github.com/rust-lang/rust/commit/ce9818f2b7beaed0039f42605e2f547e9e461430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce9818f2b7beaed0039f42605e2f547e9e461430/comments", "author": {"login": "hug-dev", "id": 29229160, "node_id": "MDQ6VXNlcjI5MjI5MTYw", "avatar_url": "https://avatars.githubusercontent.com/u/29229160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hug-dev", "html_url": "https://github.com/hug-dev", "followers_url": "https://api.github.com/users/hug-dev/followers", "following_url": "https://api.github.com/users/hug-dev/following{/other_user}", "gists_url": "https://api.github.com/users/hug-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/hug-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hug-dev/subscriptions", "organizations_url": "https://api.github.com/users/hug-dev/orgs", "repos_url": "https://api.github.com/users/hug-dev/repos", "events_url": "https://api.github.com/users/hug-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/hug-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hug-dev", "id": 29229160, "node_id": "MDQ6VXNlcjI5MjI5MTYw", "avatar_url": "https://avatars.githubusercontent.com/u/29229160?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hug-dev", "html_url": "https://github.com/hug-dev", "followers_url": "https://api.github.com/users/hug-dev/followers", "following_url": "https://api.github.com/users/hug-dev/following{/other_user}", "gists_url": "https://api.github.com/users/hug-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/hug-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hug-dev/subscriptions", "organizations_url": "https://api.github.com/users/hug-dev/orgs", "repos_url": "https://api.github.com/users/hug-dev/repos", "events_url": "https://api.github.com/users/hug-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/hug-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60b29d1ae8147538b8d542f7ffcc03b48e2cbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60b29d1ae8147538b8d542f7ffcc03b48e2cbda", "html_url": "https://github.com/rust-lang/rust/commit/d60b29d1ae8147538b8d542f7ffcc03b48e2cbda"}], "stats": {"total": 254, "additions": 251, "deletions": 3}, "files": [{"sha": "62d0721c35fb1edd9f94ab33cbda8ac1d57c8185", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -156,6 +156,14 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"efiapi ABI is experimental and subject to change\"\n                 );\n             }\n+            \"C-cmse-nonsecure-call\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    abi_c_cmse_nonsecure_call,\n+                    span,\n+                    \"C-cmse-nonsecure-call ABI is experimental and subject to change\"\n+                );\n+            }\n             abi => self\n                 .sess\n                 .parse_sess"}, {"sha": "b2647e6c8d3849409ca0e74b9ee4974b218d098c", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -28,6 +28,7 @@ fn clif_sig_from_fn_abi<'tcx>(\n         Conv::X86_64SysV => CallConv::SystemV,\n         Conv::X86_64Win64 => CallConv::WindowsFastcall,\n         Conv::ArmAapcs\n+        | Conv::CCmseNonSecureCall\n         | Conv::Msp430Intr\n         | Conv::PtxKernel\n         | Conv::X86Fastcall"}, {"sha": "a69241e456f165acefaee6a1832ce5986bfc873c", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -389,7 +389,7 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n     fn llvm_cconv(&self) -> llvm::CallConv {\n         match self.conv {\n-            Conv::C | Conv::Rust => llvm::CCallConv,\n+            Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n             Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n             Conv::AvrInterrupt => llvm::AvrInterrupt,\n             Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,\n@@ -546,6 +546,18 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         if cconv != llvm::CCallConv {\n             llvm::SetInstructionCallConv(callsite, cconv);\n         }\n+\n+        if self.conv == Conv::CCmseNonSecureCall {\n+            // This will probably get ignored on all targets but those supporting the TrustZone-M\n+            // extension (thumbv8m targets).\n+            unsafe {\n+                llvm::AddCallSiteAttrString(\n+                    callsite,\n+                    llvm::AttributePlace::Function,\n+                    rustc_data_structures::const_cstr!(\"cmse_nonsecure_call\"),\n+                );\n+            }\n+        }\n     }\n }\n "}, {"sha": "e82198f8f0c06adeade76fcdc8890ac1d563fc2a", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -1100,6 +1100,7 @@ extern \"C\" {\n     // Operations on call sites\n     pub fn LLVMSetInstructionCallConv(Instr: &Value, CC: c_uint);\n     pub fn LLVMRustAddCallSiteAttribute(Instr: &Value, index: c_uint, attr: Attribute);\n+    pub fn LLVMRustAddCallSiteAttrString(Instr: &Value, index: c_uint, Name: *const c_char);\n     pub fn LLVMRustAddAlignmentCallSiteAttr(Instr: &Value, index: c_uint, bytes: u32);\n     pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value, index: c_uint, bytes: u64);"}, {"sha": "bb9c6d47373babf23fc20ca22477da4f3f0390b7", "filename": "compiler/rustc_codegen_llvm/src/llvm/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fmod.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -43,6 +43,10 @@ pub fn AddFunctionAttrString(llfn: &'a Value, idx: AttributePlace, attr: &CStr)\n     }\n }\n \n+pub fn AddCallSiteAttrString(callsite: &Value, idx: AttributePlace, attr: &CStr) {\n+    unsafe { LLVMRustAddCallSiteAttrString(callsite, idx.as_uint(), attr.as_ptr()) }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum AttributePlace {\n     ReturnValue,"}, {"sha": "4cf674afcfadad6b5c504d7c9f3f6e9b5a399f68", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -465,6 +465,7 @@ E0777: include_str!(\"./error_codes/E0777.md\"),\n E0778: include_str!(\"./error_codes/E0778.md\"),\n E0779: include_str!(\"./error_codes/E0779.md\"),\n E0780: include_str!(\"./error_codes/E0780.md\"),\n+E0781: include_str!(\"./error_codes/E0781.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "7641acfb5249e6d0ae1ed223a9476ab4eb764624", "filename": "compiler/rustc_error_codes/src/error_codes/E0781.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0781.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0781.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0781.md?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,12 @@\n+The `C-cmse-nonsecure-call` ABI can only be used with function pointers.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0781\n+#![feature(abi_c_cmse_nonsecure_call)]\n+\n+pub extern \"C-cmse-nonsecure-call\" fn test() {}\n+```\n+\n+The `C-cmse-nonsecure-call` ABI should be used by casting function pointers to\n+specific addresses."}, {"sha": "818f6c70de01eef911166e9d9cea437711cc36b3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -628,6 +628,9 @@ declare_features! (\n \n     /// Allows using `pointer` and `reference` in intra-doc links\n     (active, intra_doc_pointers, \"1.51.0\", Some(80896), None),\n+\n+    /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n+    (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "4118e9307456391dd4939002f4f93d55c32bd9a6", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -216,6 +216,14 @@ extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n   Call->addAttribute(Index, Attr);\n }\n \n+extern \"C\" void LLVMRustAddCallSiteAttrString(LLVMValueRef Instr, unsigned Index,\n+                                              const char *Name) {\n+  CallBase *Call = unwrap<CallBase>(Instr);\n+  Attribute Attr = Attribute::get(Call->getContext(), Name);\n+  Call->addAttribute(Index, Attr);\n+}\n+\n+\n extern \"C\" void LLVMRustAddAlignmentCallSiteAttr(LLVMValueRef Instr,\n                                                  unsigned Index,\n                                                  uint32_t Bytes) {"}, {"sha": "596e4f67174455db5c0501087ae3aec248a51ca1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -2650,6 +2650,7 @@ where\n             Win64 => Conv::X86_64Win64,\n             SysV64 => Conv::X86_64SysV,\n             Aapcs => Conv::ArmAapcs,\n+            CCmseNonSecureCall => Conv::CCmseNonSecureCall,\n             PtxKernel => Conv::PtxKernel,\n             Msp430Interrupt => Conv::Msp430Intr,\n             X86Interrupt => Conv::X86Intr,"}, {"sha": "9b6a41b206734637f3517ea00886f1d24f7ef105", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -218,6 +218,7 @@ symbols! {\n         abi,\n         abi_amdgpu_kernel,\n         abi_avr_interrupt,\n+        abi_c_cmse_nonsecure_call,\n         abi_efiapi,\n         abi_msp430_interrupt,\n         abi_ptx,"}, {"sha": "825c13f733c78d903532a8b942a74f62a88abd5f", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -551,6 +551,7 @@ pub enum Conv {\n \n     // Target-specific calling conventions.\n     ArmAapcs,\n+    CCmseNonSecureCall,\n \n     Msp430Intr,\n "}, {"sha": "65e8a4e8db2ad2514472b8ca0d3e5d2471b2b943", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -36,6 +36,7 @@ pub enum Abi {\n     EfiApi,\n     AvrInterrupt,\n     AvrNonBlockingInterrupt,\n+    CCmseNonSecureCall,\n \n     // Multiplatform / generic ABIs\n     System,\n@@ -81,6 +82,7 @@ const AbiDatas: &[AbiData] = &[\n         name: \"avr-non-blocking-interrupt\",\n         generic: false,\n     },\n+    AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\", generic: false },\n     // Cross-platform ABIs\n     AbiData { abi: Abi::System, name: \"system\", generic: true },\n     AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },"}, {"sha": "0935dd86240b6e6d7d528552c0e2b3c7655f66f7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -42,6 +42,17 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, span: Span, abi: Abi) {\n         )\n         .emit()\n     }\n+\n+    // This ABI is only allowed on function pointers\n+    if abi == Abi::CCmseNonSecureCall {\n+        struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0781,\n+            \"the `\\\"C-cmse-nonsecure-call\\\"` ABI is only allowed on function pointers.\"\n+        )\n+        .emit()\n+    }\n }\n \n /// Helper used for fns and closures. Does the grungy work of checking a function"}, {"sha": "79a177cb28b158cfb5c5ccd3995622fff4d29636", "filename": "src/doc/unstable-book/src/language-features/abi-c-cmse-nonsecure-call.md", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-c-cmse-nonsecure-call.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-c-cmse-nonsecure-call.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-c-cmse-nonsecure-call.md?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,88 @@\n+# `abi_c_cmse_nonsecure_call`\n+\n+The tracking issue for this feature is: [#81391]\n+\n+[#81391]: https://github.com/rust-lang/rust/issues/81391\n+\n+------------------------\n+\n+The [TrustZone-M\n+feature](https://developer.arm.com/documentation/100690/latest/) is available\n+for targets with the Armv8-M architecture profile (`thumbv8m` in their target\n+name).\n+LLVM, the Rust compiler and the linker are providing\n+[support](https://developer.arm.com/documentation/ecm0359818/latest/) for the\n+TrustZone-M feature.\n+\n+One of the things provided, with this unstable feature, is the\n+`C-cmse-nonsecure-call` function ABI. This ABI is used on function pointers to\n+non-secure code to mark a non-secure function call (see [section\n+5.5](https://developer.arm.com/documentation/ecm0359818/latest/) for details).\n+\n+With this ABI, the compiler will do the following to perform the call:\n+* save registers needed after the call to Secure memory\n+* clear all registers that might contain confidential information\n+* clear the Least Significant Bit of the function address\n+* branches using the BLXNS instruction\n+\n+To avoid using the non-secure stack, the compiler will constrain the number and\n+type of parameters/return value.\n+\n+The `extern \"C-cmse-nonsecure-call\"` ABI is otherwise equivalent to the\n+`extern \"C\"` ABI.\n+\n+<!-- NOTE(ignore) this example is specific to thumbv8m targets -->\n+\n+``` rust,ignore\n+#![no_std]\n+#![feature(abi_c_cmse_nonsecure_call)]\n+\n+#[no_mangle]\n+pub fn call_nonsecure_function(addr: usize) -> u32 {\n+    let non_secure_function =\n+        unsafe { core::mem::transmute::<usize, extern \"C-cmse-nonsecure-call\" fn() -> u32>(addr) };\n+    non_secure_function()\n+}\n+```\n+\n+``` text\n+$ rustc --emit asm --crate-type lib --target thumbv8m.main-none-eabi function.rs\n+\n+call_nonsecure_function:\n+        .fnstart\n+        .save   {r7, lr}\n+        push    {r7, lr}\n+        .setfp  r7, sp\n+        mov     r7, sp\n+        .pad    #16\n+        sub     sp, #16\n+        str     r0, [sp, #12]\n+        ldr     r0, [sp, #12]\n+        str     r0, [sp, #8]\n+        b       .LBB0_1\n+.LBB0_1:\n+        ldr     r0, [sp, #8]\n+        push.w  {r4, r5, r6, r7, r8, r9, r10, r11}\n+        bic     r0, r0, #1\n+        mov     r1, r0\n+        mov     r2, r0\n+        mov     r3, r0\n+        mov     r4, r0\n+        mov     r5, r0\n+        mov     r6, r0\n+        mov     r7, r0\n+        mov     r8, r0\n+        mov     r9, r0\n+        mov     r10, r0\n+        mov     r11, r0\n+        mov     r12, r0\n+        msr     apsr_nzcvq, r0\n+        blxns   r0\n+        pop.w   {r4, r5, r6, r7, r8, r9, r10, r11}\n+        str     r0, [sp, #4]\n+        b       .LBB0_2\n+.LBB0_2:\n+        ldr     r0, [sp, #4]\n+        add     sp, #16\n+        pop     {r7, pc}\n+```"}, {"sha": "e05dbf3bbc4bc287b71fdc780d680c4af08a5c33", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/gate_test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,11 @@\n+// gate-test-abi_c_cmse_nonsecure_call\n+fn main() {\n+    let non_secure_function = unsafe {\n+        core::mem::transmute::<usize, extern \"C-cmse-nonsecure-call\" fn(i32, i32, i32, i32) -> i32>(\n+        //~^ ERROR [E0658]\n+            0x10000004,\n+        )\n+    };\n+    let mut toto = 5;\n+    toto += non_secure_function(toto, 2, 3, 5);\n+}"}, {"sha": "ed8e16899a16156ef79b639423bc7a06113b0826", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/gate_test.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fgate_test.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: C-cmse-nonsecure-call ABI is experimental and subject to change\n+  --> $DIR/gate_test.rs:4:46\n+   |\n+LL |         core::mem::transmute::<usize, extern \"C-cmse-nonsecure-call\" fn(i32, i32, i32, i32) -> i32>(\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #81391 <https://github.com/rust-lang/rust/issues/81391> for more information\n+   = help: add `#![feature(abi_c_cmse_nonsecure_call)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b09ea06c8f3d20f01af19ac2045d57c80f401039", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-registers.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-registers.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,15 @@\n+// build-pass\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(abi_c_cmse_nonsecure_call)]\n+#![no_std]\n+\n+#[no_mangle]\n+pub fn test(a: u32, b: u32, c: u32, d: u32) -> u32 {\n+    let non_secure_function = unsafe {\n+        core::mem::transmute::<usize, extern \"C-cmse-nonsecure-call\" fn(u32, u32, u32, u32) -> u32>(\n+            0x10000004,\n+        )\n+    };\n+    non_secure_function(a, b, c, d)\n+}"}, {"sha": "cfdce4f4e92fa69b2a06b09aa8046294f4cef984", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,17 @@\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(abi_c_cmse_nonsecure_call)]\n+#![no_std]\n+\n+#[no_mangle]\n+pub fn test(a: u32, b: u32, c: u32, d: u32, e: u32) -> u32 {\n+    let non_secure_function = unsafe {\n+        core::mem::transmute::<\n+            usize,\n+            extern \"C-cmse-nonsecure-call\" fn(u32, u32, u32, u32, u32) -> u32>\n+        (\n+            0x10000004,\n+        )\n+    };\n+    non_secure_function(a, b, c, d, e)\n+}"}, {"sha": "c90641840755dc9f628a688aad03dc340c967e27", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/params-on-stack.stderr", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fparams-on-stack.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,5 @@\n+error: <unknown>:0:0: in function test i32 (i32, i32, i32, i32, i32): call to non-secure function would require passing arguments on stack\n+\n+\n+error: aborting due to previous error\n+"}, {"sha": "17117301fefcb0d23be86822ff32bb28a3637807", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(abi_c_cmse_nonsecure_call)]\n+#![no_std]\n+\n+pub extern \"C-cmse-nonsecure-call\" fn test() {} //~ ERROR [E0781]"}, {"sha": "78490bf8f68a203af73e3fcd5f085995363d25c1", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-1.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-1.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,9 @@\n+error[E0781]: the `\"cmse-nonsecure-call\"` ABI is only allowed on function pointers.\n+  --> $DIR/wrong-abi-location-1.rs:6:1\n+   |\n+LL | pub extern \"C-cmse-nonsecure-call\" fn test() {} //~ ERROR [E0781]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0781`."}, {"sha": "78f553d747c20923c187899cf84bd4c1a2b70661", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --target thumbv8m.main-none-eabi --crate-type lib\n+// only-thumbv8m.main-none-eabi\n+#![feature(abi_c_cmse_nonsecure_call)]\n+#![no_std]\n+\n+extern \"C-cmse-nonsecure-call\" { //~ ERROR [E0781]\n+    fn test();\n+}"}, {"sha": "5c148e2cd6fe0b83f071be129ef6f1eaab3cf06d", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-call/wrong-abi-location-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-call%2Fwrong-abi-location-2.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -0,0 +1,11 @@\n+error[E0781]: the `\"C-cmse-nonsecure-call\"` ABI is only allowed on function pointers.\n+  --> $DIR/wrong-abi-location-2.rs:6:1\n+   |\n+LL | / extern \"C-cmse-nonsecure-call\" {\n+LL | |     fn test(); //~ ERROR [E0781]\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0781`."}, {"sha": "02d5f20febc4acf8f49f7ef88579048bb8d39ed6", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/gate_test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/gate_test.rs"}, {"sha": "75a29b317df87bcd9e40bd809c694e91929fcc76", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/gate_test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fgate_test.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/gate_test.stderr"}, {"sha": "a723eb734731d2d53ee8e06ec6b8e51c9d53a355", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-registers.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-registers.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/params-on-registers.rs"}, {"sha": "553d3a8cb0be7966dc2ee857a0c0b5f26e4d6631", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.rs"}, {"sha": "d9956acbe75771f03d1935fef27476e8482159d6", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/params-on-stack.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fparams-on-stack.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/params-on-stack.stderr"}, {"sha": "3783e2794021f5e53a76b7160c6884835f578326", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/trustzone-only.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.rs"}, {"sha": "7e8862f9ab7f2fd9ad75f2200c0fc45303d0e899", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/trustzone-only.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Ftrustzone-only.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/trustzone-only.stderr"}, {"sha": "611c8643dcb0227e7e3c5da226eec8685a588144", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/wrong-abi.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.rs?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/wrong-abi.rs"}, {"sha": "d6967a11e6bf7d7ff1c8c6e0df505b113459b9e6", "filename": "src/test/ui/cmse-nonsecure/cmse-nonsecure-entry/wrong-abi.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcmse-nonsecure%2Fcmse-nonsecure-entry%2Fwrong-abi.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "previous_filename": "src/test/ui/cmse-nonsecure-entry/wrong-abi.stderr"}, {"sha": "61c3f4f1c9847d15ae5339757a50469f51a854af", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "3f63c080210981307ed0c1cce3a93223156028c4", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce9818f2b7beaed0039f42605e2f547e9e461430/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=ce9818f2b7beaed0039f42605e2f547e9e461430", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}]}