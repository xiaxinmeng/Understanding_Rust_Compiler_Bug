{"sha": "8ba1a97e375451f51d0657e2135d4e6e657fd72e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYTFhOTdlMzc1NDUxZjUxZDA2NTdlMjEzNWQ0ZTZlNjU3ZmQ3MmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-13T02:27:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T02:50:18Z"}, "message": "Expand suggestions for type ascription parse errors", "tree": {"sha": "30437bf238625c71e970e9a8944220148fc58b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30437bf238625c71e970e9a8944220148fc58b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ba1a97e375451f51d0657e2135d4e6e657fd72e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba1a97e375451f51d0657e2135d4e6e657fd72e", "html_url": "https://github.com/rust-lang/rust/commit/8ba1a97e375451f51d0657e2135d4e6e657fd72e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ba1a97e375451f51d0657e2135d4e6e657fd72e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f91bee03f3eea93285330354dda54706028671c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f91bee03f3eea93285330354dda54706028671c", "html_url": "https://github.com/rust-lang/rust/commit/9f91bee03f3eea93285330354dda54706028671c"}], "stats": {"total": 376, "additions": 358, "deletions": 18}, "files": [{"sha": "1a03292290288c55f19e64ee19079009c7ebd2c2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3264,22 +3264,30 @@ impl<'a> Resolver<'a> {\n         resolution\n     }\n \n-    fn type_ascription_suggestion(&self,\n-                                  err: &mut DiagnosticBuilder<'_>,\n-                                  base_span: Span) {\n+    /// Only used in a specific case of type ascription suggestions\n+    #[doc(hidden)]\n+    fn get_colon_suggestion_span(&self, start: Span) -> Span {\n+        let cm = self.session.source_map();\n+        start.to(cm.next_point(start))\n+    }\n+\n+    fn type_ascription_suggestion(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        base_span: Span,\n+    ) {\n         debug!(\"type_ascription_suggetion {:?}\", base_span);\n         let cm = self.session.source_map();\n+        let base_snippet = cm.span_to_snippet(base_span);\n         debug!(\"self.current_type_ascription {:?}\", self.current_type_ascription);\n         if let Some(sp) = self.current_type_ascription.last() {\n             let mut sp = *sp;\n             loop {\n                 // Try to find the `:`; bail on first non-':' / non-whitespace.\n                 sp = cm.next_point(sp);\n                 if let Ok(snippet) = cm.span_to_snippet(sp.to(cm.next_point(sp))) {\n-                    debug!(\"snippet {:?}\", snippet);\n                     let line_sp = cm.lookup_char_pos(sp.hi()).line;\n                     let line_base_sp = cm.lookup_char_pos(base_span.lo()).line;\n-                    debug!(\"{:?} {:?}\", line_sp, line_base_sp);\n                     if snippet == \":\" {\n                         err.span_label(base_span,\n                                        \"expecting a type here because of type ascription\");\n@@ -3290,6 +3298,29 @@ impl<'a> Resolver<'a> {\n                                 \";\".to_string(),\n                                 Applicability::MaybeIncorrect,\n                             );\n+                        } else {\n+                            let colon_sp = self.get_colon_suggestion_span(sp);\n+                            let after_colon_sp = self.get_colon_suggestion_span(\n+                                colon_sp.shrink_to_hi(),\n+                            );\n+                            if !cm.span_to_snippet(after_colon_sp).map(|s| s == \" \")\n+                                .unwrap_or(false)\n+                            {\n+                                err.span_suggestion(\n+                                    colon_sp,\n+                                    \"maybe you meant to write a path separator here\",\n+                                    \"::\".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                            if let Ok(base_snippet) = base_snippet {\n+                                err.span_suggestion(\n+                                    base_span,\n+                                    \"maybe you meant to write an assignment here\",\n+                                    format!(\"let {}\", base_snippet),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n                         }\n                         break;\n                     } else if !snippet.trim().is_empty() {"}, {"sha": "d052abf96d7995056d75606b82ae9401b180866a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3546,22 +3546,19 @@ impl<'a> Parser<'a> {\n                 lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;\n                 continue\n             } else if op == AssocOp::Colon {\n+                let maybe_path = self.could_ascription_be_path(&lhs.node);\n+                let next_sp = self.span;\n+\n                 lhs = match self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type) {\n                     Ok(lhs) => lhs,\n                     Err(mut err) => {\n-                        err.span_label(self.span,\n-                                       \"expecting a type here because of type ascription\");\n-                        let cm = self.sess.source_map();\n-                        let cur_pos = cm.lookup_char_pos(self.span.lo());\n-                        let op_pos = cm.lookup_char_pos(cur_op_span.hi());\n-                        if cur_pos.line != op_pos.line {\n-                            err.span_suggestion(\n-                                cur_op_span,\n-                                \"try using a semicolon\",\n-                                \";\".to_string(),\n-                                Applicability::MaybeIncorrect // speculative\n-                            );\n-                        }\n+                        self.bad_type_ascription(\n+                            &mut err,\n+                            lhs_span,\n+                            cur_op_span,\n+                            next_sp,\n+                            maybe_path,\n+                        );\n                         return Err(err);\n                     }\n                 };\n@@ -3666,6 +3663,62 @@ impl<'a> Parser<'a> {\n         Ok(lhs)\n     }\n \n+    fn could_ascription_be_path(&self, node: &ast::ExprKind) -> bool {\n+        self.token.is_ident() &&\n+            if let ast::ExprKind::Path(..) = node { true } else { false } &&\n+            !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n+            self.look_ahead(1, |t| t == &token::OpenDelim(token::Paren)) ||\n+            self.look_ahead(1, |t| t == &token::Lt) &&     // `foo:bar<baz`\n+            self.look_ahead(2, |t| t.is_ident()) ||\n+            self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n+            self.look_ahead(2, |t| t.is_ident()) ||\n+            self.look_ahead(1, |t| t == &token::ModSep) &&  // `foo:bar::baz`\n+            self.look_ahead(2, |t| t.is_ident())\n+    }\n+\n+    fn bad_type_ascription(\n+        &self,\n+        err: &mut DiagnosticBuilder<'a>,\n+        lhs_span: Span,\n+        cur_op_span: Span,\n+        next_sp: Span,\n+        maybe_path: bool,\n+    ) {\n+        err.span_label(self.span, \"expecting a type here because of type ascription\");\n+        let cm = self.sess.source_map();\n+        let next_pos = cm.lookup_char_pos(next_sp.lo());\n+        let op_pos = cm.lookup_char_pos(cur_op_span.hi());\n+        if op_pos.line != next_pos.line {\n+            err.span_suggestion(\n+                cur_op_span,\n+                \"try using a semicolon\",\n+                \";\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else {\n+            if maybe_path {\n+                err.span_suggestion(\n+                    cur_op_span,\n+                    \"maybe you meant to write a path separator here\",\n+                    \"::\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else {\n+                err.note(\"type ascription is a nightly only feature that lets \\\n+                            you annotate expressions with a type: `<expr>: <type>`\");\n+                err.span_note(\n+                    lhs_span,\n+                    \"this expression is annotated with type ascription...\",\n+                );\n+                err.span_note(\n+                    cur_op_span,\n+                    \"...due to this, which is why a type is expected after\",\n+                );\n+                err.help(\"this might be indicative of a syntax error elsewhere\");\n+            }\n+        }\n+    }\n+\n     fn parse_assoc_op_cast(&mut self, lhs: P<Expr>, lhs_span: Span,\n                            expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind)\n                            -> PResult<'a, P<Expr>> {"}, {"sha": "af5f88f4ce5f31d307ed9516e5fd3107ab140ded", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3,6 +3,19 @@ error: expected type, found `1`\n    |\n LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n    |                                       ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/E0423.rs:12:36\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                    ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/E0423.rs:12:37\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                     ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: expected expression, found `==`\n   --> $DIR/E0423.rs:15:13\n@@ -15,6 +28,19 @@ error: expected type, found `0`\n    |\n LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n    |                                       ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/E0423.rs:21:32\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |                                ^^^^^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/E0423.rs:21:37\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |                                     ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error[E0423]: expected function, found struct `Foo`\n   --> $DIR/E0423.rs:4:13"}, {"sha": "08758ce9c94587c79c24d3d48f27664e1fafd57d", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -88,6 +88,19 @@ error: expected type, found `4`\n    |\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/issue-22644.rs:34:20\n+   |\n+LL |     println!(\"{}\", a: &mut 4);\n+   |                    ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/issue-22644.rs:34:21\n+   |\n+LL |     println!(\"{}\", a: &mut 4);\n+   |                     ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 9 previous errors\n "}, {"sha": "b1071934bb2f3cea0aeb98e1833e4412da85f23e", "filename": "src/test/ui/issues/issue-34255-1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,10 @@\n+enum Test {\n+    Drill {\n+        field: i32,\n+    }\n+}\n+\n+fn main() {\n+    Test::Drill(field: 42);\n+    //~^ ERROR expected type, found\n+}"}, {"sha": "ea324302d40433130d6592e6a63fc6c6406a084b", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,21 @@\n+error: expected type, found `42`\n+  --> $DIR/issue-34255-1.rs:8:24\n+   |\n+LL |     Test::Drill(field: 42);\n+   |                        ^^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/issue-34255-1.rs:8:17\n+   |\n+LL |     Test::Drill(field: 42);\n+   |                 ^^^^^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/issue-34255-1.rs:8:22\n+   |\n+LL |     Test::Drill(field: 42);\n+   |                      ^\n+   = help: this might be indicative of a syntax error elsewhere\n+\n+error: aborting due to previous error\n+"}, {"sha": "3de3298e3b52bd2ede0b9204e242a52d31433629", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -13,6 +13,19 @@ error: expected type, found keyword `loop`\n    |\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/lifetime_starts_expressions.rs:6:12\n+   |\n+LL |     loop { break 'label: loop { break 'label 42; }; }\n+   |            ^^^^^^^^^^^^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/lifetime_starts_expressions.rs:6:24\n+   |\n+LL |     loop { break 'label: loop { break 'label 42; }; }\n+   |                        ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2940f465826b602cb55f404a0cfe20d79a48c83d", "filename": "src/test/ui/parser/struct-literal-in-for.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-for.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3,6 +3,19 @@ error: expected type, found `3`\n    |\n LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/struct-literal-in-for.rs:13:9\n+   |\n+LL |         x: 3\n+   |         ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/struct-literal-in-for.rs:13:10\n+   |\n+LL |         x: 3\n+   |          ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n   --> $DIR/struct-literal-in-for.rs:14:12"}, {"sha": "e7d22ae0292e6424d8fb8a4a8cdc205f8df7215e", "filename": "src/test/ui/parser/struct-literal-in-if.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-if.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3,6 +3,19 @@ error: expected type, found `3`\n    |\n LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/struct-literal-in-if.rs:13:9\n+   |\n+LL |         x: 3\n+   |         ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/struct-literal-in-if.rs:13:10\n+   |\n+LL |         x: 3\n+   |          ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n   --> $DIR/struct-literal-in-if.rs:14:12"}, {"sha": "038e30956ff5389e17a10ceb0849660aef1b5107", "filename": "src/test/ui/parser/struct-literal-in-while.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-in-while.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3,6 +3,19 @@ error: expected type, found `3`\n    |\n LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/struct-literal-in-while.rs:13:9\n+   |\n+LL |         x: 3\n+   |         ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/struct-literal-in-while.rs:13:10\n+   |\n+LL |         x: 3\n+   |          ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n   --> $DIR/struct-literal-in-while.rs:14:12"}, {"sha": "b3a6f6ac734839e4d66229d076dacc314649378d", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -3,6 +3,19 @@ error: expected type, found `3`\n    |\n LL |         x: 3\n    |            ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/struct-literal-restrictions-in-lamda.rs:13:9\n+   |\n+LL |         x: 3\n+   |         ^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/struct-literal-restrictions-in-lamda.rs:13:10\n+   |\n+LL |         x: 3\n+   |          ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `{`\n   --> $DIR/struct-literal-restrictions-in-lamda.rs:14:12"}, {"sha": "51d3d32565f8ae990643c9eee5c1a8d204ef008a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-let.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,11 @@\n+fn fun(x: i32) -> i32 { x }\n+\n+fn main() {\n+    let closure_annotated = |value: i32| -> i32 {\n+        temp: i32 = fun(5i32);\n+        //~^ ERROR cannot find value `temp` in this scope\n+        //~| ERROR type ascription is experimental\n+        temp + value + 1\n+        //~^ ERROR cannot find value `temp` in this scope\n+    };\n+}"}, {"sha": "1efa94a553212203c8f3f174478a7c129f8bcc9b", "filename": "src/test/ui/suggestions/type-ascription-instead-of-let.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,28 @@\n+error[E0425]: cannot find value `temp` in this scope\n+  --> $DIR/type-ascription-instead-of-let.rs:5:9\n+   |\n+LL |         temp: i32 = fun(5i32);\n+   |         ^^^^\n+   |         |\n+   |         not found in this scope\n+   |         expecting a type here because of type ascription\n+   |         help: maybe you meant to write an assignment here: `let temp`\n+\n+error[E0425]: cannot find value `temp` in this scope\n+  --> $DIR/type-ascription-instead-of-let.rs:8:9\n+   |\n+LL |         temp + value + 1\n+   |         ^^^^ not found in this scope\n+\n+error[E0658]: type ascription is experimental (see issue #23416)\n+  --> $DIR/type-ascription-instead-of-let.rs:5:9\n+   |\n+LL |         temp: i32 = fun(5i32);\n+   |         ^^^^^^^^^\n+   |\n+   = help: add #![feature(type_ascription)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0425, E0658.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "361729d50c2f393fd386bdc8d4d966bba5c95379", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    Box:new(\"foo\".to_string())\n+    //~^ ERROR expected type, found\n+}"}, {"sha": "15ec087b1cc01d790083c55d356776c1fe2e037f", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,10 @@\n+error: expected type, found `\"foo\"`\n+  --> $DIR/type-ascription-instead-of-method.rs:2:13\n+   |\n+LL |     Box:new(\"foo\".to_string())\n+   |        -    ^^^^^ expecting a type here because of type ascription\n+   |        |\n+   |        help: maybe you meant to write a path separator here: `::`\n+\n+error: aborting due to previous error\n+"}, {"sha": "a81996ed7bb6b4a6541a0a3b81ac935120f21b15", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    std:io::stdin();\n+    //~^ ERROR failed to resolve: use of undeclared type or module `io`\n+    //~| ERROR expected value, found module\n+    //~| ERROR type ascription is experimental\n+}"}, {"sha": "e371611ccff63403ec00382a884f6624494697d2", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,35 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `io`\n+  --> $DIR/type-ascription-instead-of-path.rs:2:9\n+   |\n+LL |     std:io::stdin();\n+   |         ^^ use of undeclared type or module `io`\n+\n+error[E0423]: expected value, found module `std`\n+  --> $DIR/type-ascription-instead-of-path.rs:2:5\n+   |\n+LL |     std:io::stdin();\n+   |     ^^^\n+   |     |\n+   |     not a value\n+   |     expecting a type here because of type ascription\n+help: maybe you meant to write a path separator here\n+   |\n+LL |     std::io::stdin();\n+   |        ^^\n+help: maybe you meant to write an assignment here\n+   |\n+LL |     let std:io::stdin();\n+   |     ^^^^^^^\n+\n+error[E0658]: type ascription is experimental (see issue #23416)\n+  --> $DIR/type-ascription-instead-of-path.rs:2:5\n+   |\n+LL |     std:io::stdin();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(type_ascription)] to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0423, E0433, E0658.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "b90867fef6b51d4fa365e31870956d4c402a6b33", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.rs?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let _ = Option:Some(\"\");\n+    //~^ ERROR expected type, found\n+}"}, {"sha": "5719a667a841509b4f16a3425f5d45930b019649", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -0,0 +1,10 @@\n+error: expected type, found `\"\"`\n+  --> $DIR/type-ascription-instead-of-variant.rs:2:25\n+   |\n+LL |     let _ = Option:Some(\"\");\n+   |                   -     ^^ expecting a type here because of type ascription\n+   |                   |\n+   |                   help: maybe you meant to write a path separator here: `::`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4077be9d08280e09cfb5a51e4bddec8c34161855", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ba1a97e375451f51d0657e2135d4e6e657fd72e/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=8ba1a97e375451f51d0657e2135d4e6e657fd72e", "patch": "@@ -11,6 +11,19 @@ error: expected type, found `0`\n    |\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n+   |\n+   = note: type ascription is a nightly only feature that lets you annotate expressions with a type: `<expr>: <type>`\n+note: this expression is annotated with type ascription...\n+  --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n+   |\n+LL |     println!(\"test\"): 0;\n+   |     ^^^^^^^^^^^^^^^^\n+note: ...due to this, which is why a type is expected after\n+  --> $DIR/type-ascription-instead-of-statement-end.rs:9:21\n+   |\n+LL |     println!(\"test\"): 0;\n+   |                     ^\n+   = help: this might be indicative of a syntax error elsewhere\n \n error: aborting due to 2 previous errors\n "}]}