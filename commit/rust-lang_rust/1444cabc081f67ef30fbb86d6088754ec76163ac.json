{"sha": "1444cabc081f67ef30fbb86d6088754ec76163ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDRjYWJjMDgxZjY3ZWYzMGZiYjg2ZDYwODg3NTRlYzc2MTYzYWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:04:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-05T11:04:46Z"}, "message": "make the memory limit configurable", "tree": {"sha": "57efa14404f6bf7747a7b96ca9a1b95a79c49cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57efa14404f6bf7747a7b96ca9a1b95a79c49cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1444cabc081f67ef30fbb86d6088754ec76163ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXe5ROAAoJEFbW7qD8Z6xG38MP/jZ2X1kXpegpZopymU2e/mcQ\n99ArcNlAlt7ymBrIAtINbuSAwBGhpnhWIHN6SOaDAzu5DJr7b00WqPLwLzOa/aO9\nUqSMUl0OAuQfljmmnA5s/0JqE7ofjUcmK1a1dsB4ewU/oLp+nOY2QZAiabauO9x0\nVA5daFqoiSaHwdZK0kD+xCCm3FvmdbT77VRJT6kcxCa9NQ9vKBOwO4ND3KD4+Dk3\nNjcaKOWkU7G36HPyczqSA7zzxz1aUIGjCUKO88tYUmp029f/j7Hv5Krl8lXGS2DL\nwbX3dI0C60o8P8fZ7ARz4Y5VgsvUmaoZhnRttu+B9aNUwwNlakyqlDJRKNQiCwZo\n/mUm2OQPFflpsSurCUAoaoT5M9NE0IhgZ6qLOMH1CVIExtHgGNPUnmY3dBF5bmcu\nl/nUGxv2QcbYb4jxbPxU1eeAuOSpgaJlbztb3/u0xBDWji71h7b3KF0VZnCGeHYI\nG56ASO+lMMIRrh0Fv6VIN+soU2CE52jzyfT4Cq3MU7V1lbcPYStVvZqU8q24kak1\nMARu65DjVOVU8hmM66G8K5hPDgFfgJAC9d2FmY2D4YLG2qRM2Udah8KMjVwA4Nnv\nVflTqEMfbwPwzt7keaYGxPIIvIkBqWnpg1bd4o9SyDi53UCPuX54fKWX/PZRDPuE\nGDCT8JN1Qm3rMrViXHUD\n=i/XN\n-----END PGP SIGNATURE-----", "payload": "tree 57efa14404f6bf7747a7b96ca9a1b95a79c49cfd\nparent 756fbcce480c3ab93a735436f7f27bf38a0dfb10\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467716686 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467716686 +0200\n\nmake the memory limit configurable"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1444cabc081f67ef30fbb86d6088754ec76163ac", "html_url": "https://github.com/rust-lang/rust/commit/1444cabc081f67ef30fbb86d6088754ec76163ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1444cabc081f67ef30fbb86d6088754ec76163ac/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756fbcce480c3ab93a735436f7f27bf38a0dfb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/756fbcce480c3ab93a735436f7f27bf38a0dfb10", "html_url": "https://github.com/rust-lang/rust/commit/756fbcce480c3ab93a735436f7f27bf38a0dfb10"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "087da20ac8be1e7e6f9aa877902e0bf510a42dae", "filename": "src/bin/miri.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1444cabc081f67ef30fbb86d6088754ec76163ac/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1444cabc081f67ef30fbb86d6088754ec76163ac/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1444cabc081f67ef30fbb86d6088754ec76163ac", "patch": "@@ -4,6 +4,7 @@ extern crate getopts;\n extern crate miri;\n extern crate rustc;\n extern crate rustc_driver;\n+extern crate rustc_plugin;\n extern crate env_logger;\n extern crate log_settings;\n extern crate syntax;\n@@ -13,6 +14,7 @@ use miri::{eval_main, run_mir_passes};\n use rustc::session::Session;\n use rustc::mir::mir_map::MirMap;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n+use syntax::ast::MetaItemKind;\n \n struct MiriCompilerCalls;\n \n@@ -23,7 +25,9 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n         _: &getopts::Matches\n     ) -> driver::CompileController<'a> {\n         let mut control = driver::CompileController::basic();\n-\n+        control.after_hir_lowering.callback = Box::new(|state| {\n+            state.session.plugin_attributes.borrow_mut().push((\"miri\".to_owned(), syntax::feature_gate::AttributeType::Whitelisted));\n+        });\n         control.after_analysis.stop = Compilation::Stop;\n         control.after_analysis.callback = Box::new(|state| {\n             state.session.abort_if_errors();\n@@ -33,9 +37,35 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n             let (node_id, _) = state.session.entry_fn.borrow()\n                 .expect(\"no main or start function found\");\n \n+            let krate = state.hir_crate.as_ref().unwrap();\n+            let mut memory_size = 100*1024*1024; // 100MB\n+            fn extract_str(lit: &syntax::ast::Lit) -> syntax::parse::token::InternedString {\n+                match lit.node {\n+                    syntax::ast::LitKind::Str(ref s, _) => s.clone(),\n+                    _ => panic!(\"attribute values need to be strings\"),\n+                }\n+            }\n+            for attr in krate.attrs.iter() {\n+                match attr.node.value.node {\n+                    MetaItemKind::List(ref name, _) if name != \"miri\" => {}\n+                    MetaItemKind::List(_, ref items) => for item in items {\n+                        match item.node {\n+                            MetaItemKind::NameValue(ref name, ref value) => {\n+                                match &**name {\n+                                    \"memory_size\" => memory_size = extract_str(value).parse::<u64>().expect(\"not a number\"),\n+                                    _ => state.session.span_err(item.span, \"unknown miri attribute\"),\n+                                }\n+                            }\n+                            _ => state.session.span_err(item.span, \"miri attributes need to be of key = value kind\"),\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+            }\n+\n             let mut mir_map = MirMap { map: mir_map.map.clone() };\n             run_mir_passes(tcx, &mut mir_map);\n-            eval_main(tcx, &mir_map, node_id);\n+            eval_main(tcx, &mir_map, node_id, memory_size);\n \n             state.session.abort_if_errors();\n         });"}, {"sha": "ea1f82f5f62a7f95c40364628ee1cceffb4ed4c3", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1444cabc081f67ef30fbb86d6088754ec76163ac/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1444cabc081f67ef30fbb86d6088754ec76163ac/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1444cabc081f67ef30fbb86d6088754ec76163ac", "patch": "@@ -133,12 +133,12 @@ enum ConstantKind {\n }\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>, memory_size: u64) -> Self {\n         EvalContext {\n             tcx: tcx,\n             mir_map: mir_map,\n             mir_cache: RefCell::new(DefIdMap()),\n-            memory: Memory::new(&tcx.data_layout, 100*1024*1024 /* 100MB */),\n+            memory: Memory::new(&tcx.data_layout, memory_size),\n             statics: HashMap::new(),\n             stack: Vec::new(),\n         }\n@@ -928,10 +928,11 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir_map: &'a MirMap<'tcx>,\n     node_id: ast::NodeId,\n+    memory_size: u64,\n ) {\n     let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n     let def_id = tcx.map.local_def_id(node_id);\n-    let mut ecx = EvalContext::new(tcx, mir_map);\n+    let mut ecx = EvalContext::new(tcx, mir_map, memory_size);\n     let substs = tcx.mk_substs(subst::Substs::empty());\n     let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs)\n                         .expect(\"should at least be able to allocate space for the main function's return value\")"}]}