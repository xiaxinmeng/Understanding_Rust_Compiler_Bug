{"sha": "618138b923a4139d0a752d9a9a049169a569cd39", "node_id": "C_kwDOAAsO6NoAKDYxODEzOGI5MjNhNDEzOWQwYTc1MmQ5YTlhMDQ5MTY5YTU2OWNkMzk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-09T23:37:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T16:14:49Z"}, "message": "Store fn constness in impl_constness.", "tree": {"sha": "b75d7768b1da2777ad835ab3dc798c944a64f6ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75d7768b1da2777ad835ab3dc798c944a64f6ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618138b923a4139d0a752d9a9a049169a569cd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618138b923a4139d0a752d9a9a049169a569cd39", "html_url": "https://github.com/rust-lang/rust/commit/618138b923a4139d0a752d9a9a049169a569cd39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618138b923a4139d0a752d9a9a049169a569cd39/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2bf484e3ac684ce835023a3efde67ad7392c660", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bf484e3ac684ce835023a3efde67ad7392c660", "html_url": "https://github.com/rust-lang/rust/commit/f2bf484e3ac684ce835023a3efde67ad7392c660"}], "stats": {"total": 81, "additions": 32, "deletions": 49}, "files": [{"sha": "b98d5817a9c4f3852f4b16bb020d2bc83d0842f5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=618138b923a4139d0a752d9a9a049169a569cd39", "patch": "@@ -1454,9 +1454,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     // don't serialize constness for tuple variant and tuple struct constructors.\n     fn is_const_fn_raw(self, id: DefIndex) -> bool {\n         let constness = match self.kind(id) {\n-            EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,\n-            EntryKind::Fn(data) => data.decode(self).constness,\n-            EntryKind::ForeignFn(data) => data.decode(self).constness,\n+            EntryKind::AssocFn(_) | EntryKind::Fn | EntryKind::ForeignFn => {\n+                self.root.tables.impl_constness.get(self, id).unwrap().decode(self)\n+            }\n             EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,\n             _ => hir::Constness::NotConst,\n         };\n@@ -1465,7 +1465,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n     fn is_foreign_item(self, id: DefIndex) -> bool {\n         match self.kind(id) {\n-            EntryKind::ForeignStatic | EntryKind::ForeignFn(_) => true,\n+            EntryKind::ForeignStatic | EntryKind::ForeignFn => true,\n             _ => false,\n         }\n     }"}, {"sha": "b4e020ac845e0be659b6abdc04980959d80e51c4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 26, "deletions": 37, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=618138b923a4139d0a752d9a9a049169a569cd39", "patch": "@@ -1195,22 +1195,18 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.rendered_const[def_id] <- rendered);\n             }\n             ty::AssocKind::Fn => {\n-                let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n-                    match *m {\n-                        hir::TraitFn::Required(ref names) => {\n-                            record!(self.tables.fn_arg_names[def_id] <- *names)\n-                        }\n-                        hir::TraitFn::Provided(body) => {\n-                            record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n-                        }\n-                    };\n-                    record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n-                    FnData { constness: hir::Constness::NotConst }\n-                } else {\n-                    bug!()\n+                let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind else { bug!() };\n+                match *m {\n+                    hir::TraitFn::Required(ref names) => {\n+                        record!(self.tables.fn_arg_names[def_id] <- *names)\n+                    }\n+                    hir::TraitFn::Provided(body) => {\n+                        record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n+                    }\n                 };\n+                record!(self.tables.asyncness[def_id] <- m_sig.header.asyncness);\n+                record!(self.tables.impl_constness[def_id] <- hir::Constness::NotConst);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    fn_data,\n                     container,\n                     has_self: trait_item.fn_has_self_parameter,\n                 })));\n@@ -1265,22 +1261,17 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n             }\n             ty::AssocKind::Fn => {\n-                let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n-                    record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n-                    record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                    FnData {\n-                        // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n-                        constness: if self.tcx.is_const_fn_raw(def_id) {\n-                            hir::Constness::Const\n-                        } else {\n-                            hir::Constness::NotConst\n-                        },\n-                    }\n+                let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n+                record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n+                record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n+                let constness = if self.tcx.is_const_fn_raw(def_id) {\n+                    hir::Constness::Const\n                 } else {\n-                    bug!()\n+                    hir::Constness::NotConst\n                 };\n+                record!(self.tables.impl_constness[def_id] <- constness);\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocFn(self.lazy(AssocFnData {\n-                    fn_data,\n                     container,\n                     has_self: impl_item.fn_has_self_parameter,\n                 })));\n@@ -1402,9 +1393,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 record!(self.tables.asyncness[def_id] <- sig.header.asyncness);\n                 record!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                let data = FnData { constness: sig.header.constness };\n-\n-                EntryKind::Fn(self.lazy(data))\n+                record!(self.tables.impl_constness[def_id] <- sig.header.constness);\n+                EntryKind::Fn\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 EntryKind::MacroDef(self.lazy(&*macro_def.body), macro_def.macro_rules)\n@@ -1897,14 +1887,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 record!(self.tables.asyncness[def_id] <- hir::IsAsync::NotAsync);\n                 record!(self.tables.fn_arg_names[def_id] <- *names);\n-                let data = FnData {\n-                    constness: if self.tcx.is_const_fn_raw(def_id) {\n-                        hir::Constness::Const\n-                    } else {\n-                        hir::Constness::NotConst\n-                    },\n+                let constness = if self.tcx.is_const_fn_raw(def_id) {\n+                    hir::Constness::Const\n+                } else {\n+                    hir::Constness::NotConst\n                 };\n-                record!(self.tables.kind[def_id] <- EntryKind::ForeignFn(self.lazy(data)));\n+                record!(self.tables.impl_constness[def_id] <- constness);\n+                record!(self.tables.kind[def_id] <- EntryKind::ForeignFn);\n             }\n             hir::ForeignItemKind::Static(..) => {\n                 record!(self.tables.kind[def_id] <- EntryKind::ForeignStatic);"}, {"sha": "c2d85efb15d92814fc1dd36ac8abde99b6c870fa", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618138b923a4139d0a752d9a9a049169a569cd39/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=618138b923a4139d0a752d9a9a049169a569cd39", "patch": "@@ -353,8 +353,8 @@ enum EntryKind {\n     Variant(Lazy<VariantData>),\n     Struct(Lazy<VariantData>),\n     Union(Lazy<VariantData>),\n-    Fn(Lazy<FnData>),\n-    ForeignFn(Lazy<FnData>),\n+    Fn,\n+    ForeignFn,\n     Mod(Lazy<[ModChild]>),\n     MacroDef(Lazy<ast::MacArgs>, /*macro_rules*/ bool),\n     ProcMacro(MacroKind),\n@@ -368,11 +368,6 @@ enum EntryKind {\n     TraitAlias,\n }\n \n-#[derive(MetadataEncodable, MetadataDecodable)]\n-struct FnData {\n-    constness: hir::Constness,\n-}\n-\n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n     ctor_kind: CtorKind,\n@@ -430,7 +425,6 @@ impl AssocContainer {\n \n #[derive(MetadataEncodable, MetadataDecodable)]\n struct AssocFnData {\n-    fn_data: FnData,\n     container: AssocContainer,\n     has_self: bool,\n }"}]}