{"sha": "3f7f5e8a2e3c9bb134d160241a6695bb379db647", "node_id": "C_kwDOAAsO6NoAKDNmN2Y1ZThhMmUzYzliYjEzNGQxNjAyNDFhNjY5NWJiMzc5ZGI2NDc", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2022-03-23T02:21:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-23T02:21:56Z"}, "message": "Optimize RcInnerPtr::inc_strong instruction count\n\nInspired by this internals thread: https://internals.rust-lang.org/t/rc-optimization-on-64-bit-targets/16362\r\n\r\n[The generated assembly is a bit smaller](https://rust.godbolt.org/z/TeTnf6144) and is a more efficient usage of the CPU's instruction cache. `unlikely` doesn't impact any of the small artificial tests I've done, but I've included it in case it might help more complex scenarios when this is inlined.", "tree": {"sha": "452a85c7afcc464161ce53d8ddf2b22033eab779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/452a85c7afcc464161ce53d8ddf2b22033eab779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7f5e8a2e3c9bb134d160241a6695bb379db647", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOoRECRBK7hj4Ov3rIwAAHwoIAEEFKd5seLFxM8siLAAb0w9r\nnnCZMKfFociyjJhYA9Br/aWE5uA4QKwBbSNlx/eajia5Iu6MUObi0dv0wnGq4YV+\nVdVTx6hFRj+Mrh3y0yxYPp9DHv1uYwEFt4U9nREgfqej+DQ/NgHtNQ7VK6sJnKjR\nW7iss3+G59+H5Nj7p2PjaYnMD8bIMYiFexXdNcQq6Ld4ctWtjTkKB3hnVmkw7dc9\nRVkIlc7NQD1EE0hv36rZoNXmEBRMYEGwH8M3Fb6+f/z5Q8JjR0aL1FyxOcagT+bo\nSFVD+SZLdQgCU92oUHmAdgak8i8FLGUM9oFTajpVVxWxMz1DUfI6N+oLRQUnYw0=\n=Gvjj\n-----END PGP SIGNATURE-----\n", "payload": "tree 452a85c7afcc464161ce53d8ddf2b22033eab779\nparent a4a5e79814fb4d1568fb0ea5ca50f810b071ae12\nauthor Michael Bradshaw <mjbshaw@google.com> 1648002116 -0600\ncommitter GitHub <noreply@github.com> 1648002116 -0600\n\nOptimize RcInnerPtr::inc_strong instruction count\n\nInspired by this internals thread: https://internals.rust-lang.org/t/rc-optimization-on-64-bit-targets/16362\r\n\r\n[The generated assembly is a bit smaller](https://rust.godbolt.org/z/TeTnf6144) and is a more efficient usage of the CPU's instruction cache. `unlikely` doesn't impact any of the small artificial tests I've done, but I've included it in case it might help more complex scenarios when this is inlined."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7f5e8a2e3c9bb134d160241a6695bb379db647", "html_url": "https://github.com/rust-lang/rust/commit/3f7f5e8a2e3c9bb134d160241a6695bb379db647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7f5e8a2e3c9bb134d160241a6695bb379db647/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a5e79814fb4d1568fb0ea5ca50f810b071ae12", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a5e79814fb4d1568fb0ea5ca50f810b071ae12", "html_url": "https://github.com/rust-lang/rust/commit/a4a5e79814fb4d1568fb0ea5ca50f810b071ae12"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "8e7946dfd971ee1cacb2beff6b3d0349c241a9fc", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f7f5e8a2e3c9bb134d160241a6695bb379db647/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7f5e8a2e3c9bb134d160241a6695bb379db647/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=3f7f5e8a2e3c9bb134d160241a6695bb379db647", "patch": "@@ -2512,14 +2512,21 @@ trait RcInnerPtr {\n     fn inc_strong(&self) {\n         let strong = self.strong();\n \n+        // We insert an `assume` here to hint LLVM at an otherwise\n+        // missed optimization.\n+        // SAFETY: The reference count will never be zero when this is\n+        // called.\n+        unsafe { core::intrinsics::assume(strong != 0); }\n+\n+        let strong = strong.wrapping_add(1);\n+        self.strong_ref().set(strong);\n+\n         // We want to abort on overflow instead of dropping the value.\n-        // The reference count will never be zero when this is called;\n-        // nevertheless, we insert an abort here to hint LLVM at\n-        // an otherwise missed optimization.\n-        if strong == 0 || strong == usize::MAX {\n+        // Checking after the store instead of before allows for\n+        // slightly better code generation.\n+        if core::intrinsics::unlikely(strong == 0) {\n             abort();\n         }\n-        self.strong_ref().set(strong + 1);\n     }\n \n     #[inline]\n@@ -2536,14 +2543,21 @@ trait RcInnerPtr {\n     fn inc_weak(&self) {\n         let weak = self.weak();\n \n+        // We insert an `assume` here to hint LLVM at an otherwise\n+        // missed optimization.\n+        // SAFETY: The reference count will never be zero when this is\n+        // called.\n+        unsafe { core::intrinsics::assume(weak != 0); }\n+\n+        let weak = weak.wrapping_add(1);\n+        self.weak_ref().set(weak);\n+\n         // We want to abort on overflow instead of dropping the value.\n-        // The reference count will never be zero when this is called;\n-        // nevertheless, we insert an abort here to hint LLVM at\n-        // an otherwise missed optimization.\n-        if weak == 0 || weak == usize::MAX {\n+        // Checking after the store instead of before allows for\n+        // slightly better code generation.\n+        if core::intrinsics::unlikely(weak == 0) {\n             abort();\n         }\n-        self.weak_ref().set(weak + 1);\n     }\n \n     #[inline]"}]}