{"sha": "bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "node_id": "C_kwDOAAsO6NoAKGJkZmJjMzU5N2JkOTcxMDU4NGUxNDJhMmIxYTY1YmE0OWY5NjAzZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-09T05:02:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-09T05:02:32Z"}, "message": "Rollup merge of #101556 - compiler-errors:tweak-generator-print, r=jackh726\n\nTweak future opaque ty pretty printing\n\n1. The `Return` type of a generator doesn't need to be a lang item just for diagnostic printing of types\n2. We shouldn't suppress the `Output = Ty` of a opaque future if the type is a int or float var.", "tree": {"sha": "f3802d475f975e475d893369b3b245dfca1ea834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3802d475f975e475d893369b3b245dfca1ea834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGsjoCRBK7hj4Ov3rIwAAfXUIAFXpjvogqQ3jHUCv9RDS+XCn\nM2idM16h0ZY45YPm+AAXxE7eLVWwwnVzWALGOPbUnYwc8LIrorveeF+Df40sa2Zz\ntTuCD9vY1OA6v8YCmkZvlUyPjSP9niD7zL3FcEBg3f7opKtlVRgn/wPrZKhIIVVy\nzlP4fhOFpNssRAisYGLuEZowLbSpjcso13VecTioC5UKrr21fUtG/LzWmvaYVzrO\n4Wph+Xq69nTgoLJ0fbhHb9n1wa9c3z66pX4oLpVi+GpO/Y4eb7sM0190QQMEYqBA\nquNVsRtTvdQwDOTgXJNA6j9gXVbumxZDgCZb264hxxcXb6u4+VgLKYXpgdATta0=\n=o57v\n-----END PGP SIGNATURE-----\n", "payload": "tree f3802d475f975e475d893369b3b245dfca1ea834\nparent 434591cd136f31d220c0a6b777d0c54dac0915b8\nparent 97668a558955ded299db6ef145933be7677e7fbc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662699752 +0200\ncommitter GitHub <noreply@github.com> 1662699752 +0200\n\nRollup merge of #101556 - compiler-errors:tweak-generator-print, r=jackh726\n\nTweak future opaque ty pretty printing\n\n1. The `Return` type of a generator doesn't need to be a lang item just for diagnostic printing of types\n2. We shouldn't suppress the `Output = Ty` of a opaque future if the type is a int or float var.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "html_url": "https://github.com/rust-lang/rust/commit/bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434591cd136f31d220c0a6b777d0c54dac0915b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/434591cd136f31d220c0a6b777d0c54dac0915b8", "html_url": "https://github.com/rust-lang/rust/commit/434591cd136f31d220c0a6b777d0c54dac0915b8"}, {"sha": "97668a558955ded299db6ef145933be7677e7fbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/97668a558955ded299db6ef145933be7677e7fbc", "html_url": "https://github.com/rust-lang/rust/commit/97668a558955ded299db6ef145933be7677e7fbc"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "ea17c1de9b70037c48ce828ea917c16e0434f591", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "patch": "@@ -238,7 +238,6 @@ language_item_table! {\n     Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n     GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n     Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n-    GeneratorReturn,         sym::generator_return,    generator_return,           Target::AssocTy,        GenericRequirement::None;\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n "}, {"sha": "979a72d400fe85a5eba178edccf3bde67d1cfd28", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "patch": "@@ -916,12 +916,14 @@ pub trait PrettyPrinter<'tcx>:\n                         // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks,\n                         // unless we can find out what generator return type it comes from.\n                         let term = if let Some(ty) = term.skip_binder().ty()\n-                            && let ty::Projection(ty::ProjectionTy { item_def_id, substs }) = ty.kind()\n-                            && Some(*item_def_id) == tcx.lang_items().generator_return()\n+                            && let ty::Projection(proj) = ty.kind()\n+                            && let assoc = tcx.associated_item(proj.item_def_id)\n+                            && assoc.trait_container(tcx) == tcx.lang_items().gen_trait()\n+                            && assoc.name == rustc_span::sym::Return\n                         {\n                             if let ty::Generator(_, substs, _) = substs.type_at(0).kind() {\n                                 let return_ty = substs.as_generator().return_ty();\n-                                if !return_ty.is_ty_infer() {\n+                                if !return_ty.is_ty_var() {\n                                     return_ty.into()\n                                 } else {\n                                     continue;"}, {"sha": "363a2f53e10689b204dcde927148ea4760c87179", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "patch": "@@ -763,7 +763,6 @@ symbols! {\n         gen_future,\n         gen_kill,\n         generator,\n-        generator_return,\n         generator_state,\n         generators,\n         generic_arg_infer,"}, {"sha": "3ebd6f8cdbdc03e598b2d2c0a1d55c2b05a1533f", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "patch": "@@ -83,7 +83,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[lang = \"generator_return\"]\n+    #[cfg_attr(bootstrap, lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "77cef485f30e9a477108aa3e29914a0544e46f80", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdfbc3597bd9710584e142a2b1a65ba49f9603f2/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=bdfbc3597bd9710584e142a2b1a65ba49f9603f2", "patch": "@@ -91,7 +91,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = {integer}>`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}]}