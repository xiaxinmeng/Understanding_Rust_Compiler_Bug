{"sha": "ae7e808f42d479eb70b3573664106d5d8c09acbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlN2U4MDhmNDJkNDc5ZWI3MGIzNTczNjY0MTA2ZDVkOGMwOWFjYmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-09T16:57:02Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-12-09T16:57:02Z"}, "message": "Make utils module public", "tree": {"sha": "4172cf66f4ab27cc43402e4d0eeab55a4343caef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4172cf66f4ab27cc43402e4d0eeab55a4343caef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae7e808f42d479eb70b3573664106d5d8c09acbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7e808f42d479eb70b3573664106d5d8c09acbf", "html_url": "https://github.com/rust-lang/rust/commit/ae7e808f42d479eb70b3573664106d5d8c09acbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae7e808f42d479eb70b3573664106d5d8c09acbf/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596705b42fb6409a2e95051fdbb7090b3792db5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/596705b42fb6409a2e95051fdbb7090b3792db5a", "html_url": "https://github.com/rust-lang/rust/commit/596705b42fb6409a2e95051fdbb7090b3792db5a"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "e0f8677904ebda09adcfc52c6e27c56a3a659ba6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ae7e808f42d479eb70b3573664106d5d8c09acbf/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae7e808f42d479eb70b3573664106d5d8c09acbf/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ae7e808f42d479eb70b3573664106d5d8c09acbf", "patch": "@@ -105,15 +105,15 @@ pub fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n }\n \n // extract the stability index for a node from tcx, if possible\n-fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n+pub fn get_stability(cx: &DocContext<'_>, def_id: DefId) -> Option<Stability> {\n     cx.tcx.lookup_stability(def_id).clean(cx)\n }\n \n-fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {\n+pub fn get_deprecation(cx: &DocContext<'_>, def_id: DefId) -> Option<Deprecation> {\n     cx.tcx.lookup_deprecation(def_id).clean(cx)\n }\n \n-fn external_generic_args(\n+pub fn external_generic_args(\n     cx: &DocContext<'_>,\n     trait_did: Option<DefId>,\n     has_self: bool,\n@@ -161,8 +161,8 @@ fn external_generic_args(\n \n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n-fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, has_self: bool,\n-                 bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> Path {\n+pub fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, has_self: bool,\n+                     bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> Path {\n     Path {\n         global: false,\n         res: Res::Err,\n@@ -178,7 +178,7 @@ fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, ha\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return\n /// `[Display, Option]` (we just returns the list of the types, we don't care about the\n /// wrapped types in here).\n-fn get_real_types(\n+pub fn get_real_types(\n     generics: &Generics,\n     arg: &Type,\n     cx: &DocContext<'_>,\n@@ -285,7 +285,7 @@ pub fn get_all_types(\n     (all_types.into_iter().collect(), ret_types)\n }\n \n-fn strip_type(ty: Type) -> Type {\n+pub fn strip_type(ty: Type) -> Type {\n     match ty {\n         Type::ResolvedPath { path, param_names, did, is_generic } => {\n             Type::ResolvedPath { path: strip_path(&path), param_names, did, is_generic }\n@@ -309,7 +309,7 @@ fn strip_type(ty: Type) -> Type {\n     }\n }\n \n-fn strip_path(path: &Path) -> Path {\n+pub fn strip_path(path: &Path) -> Path {\n     let segments = path.segments.iter().map(|s| {\n         PathSegment {\n             name: s.name.clone(),\n@@ -327,7 +327,7 @@ fn strip_path(path: &Path) -> Path {\n     }\n }\n \n-fn qpath_to_string(p: &hir::QPath) -> String {\n+pub fn qpath_to_string(p: &hir::QPath) -> String {\n     let segments = match *p {\n         hir::QPath::Resolved(_, ref path) => &path.segments,\n         hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n@@ -345,9 +345,9 @@ fn qpath_to_string(p: &hir::QPath) -> String {\n     s\n }\n \n-fn build_deref_target_impls(cx: &DocContext<'_>,\n-                            items: &[Item],\n-                            ret: &mut Vec<Item>) {\n+pub fn build_deref_target_impls(cx: &DocContext<'_>,\n+                                items: &[Item],\n+                                ret: &mut Vec<Item>) {\n     use self::PrimitiveType::*;\n     let tcx = cx.tcx;\n \n@@ -420,7 +420,7 @@ impl ToSource for syntax_pos::Span {\n     }\n }\n \n-fn name_from_pat(p: &hir::Pat) -> String {\n+pub fn name_from_pat(p: &hir::Pat) -> String {\n     use rustc::hir::*;\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n \n@@ -458,7 +458,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     }\n }\n \n-fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n+pub fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def_id, _) => {\n             if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n@@ -483,14 +483,14 @@ fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     }\n }\n \n-fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n+pub fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n     cx.tcx.hir().hir_to_pretty_string(body.hir_id)\n }\n \n /// Given a type Path, resolve it to a Type using the TyCtxt\n-fn resolve_type(cx: &DocContext<'_>,\n-                path: Path,\n-                id: hir::HirId) -> Type {\n+pub fn resolve_type(cx: &DocContext<'_>,\n+                    path: Path,\n+                    id: hir::HirId) -> Type {\n     if id == hir::DUMMY_HIR_ID {\n         debug!(\"resolve_type({:?})\", path);\n     } else {\n@@ -564,7 +564,7 @@ pub fn register_res(cx: &DocContext<'_>, res: Res) -> DefId {\n     did\n }\n \n-fn resolve_use_source(cx: &DocContext<'_>, path: Path) -> ImportSource {\n+pub fn resolve_use_source(cx: &DocContext<'_>, path: Path) -> ImportSource {\n     ImportSource {\n         did: if path.res.opt_def_id().is_none() {\n             None"}]}