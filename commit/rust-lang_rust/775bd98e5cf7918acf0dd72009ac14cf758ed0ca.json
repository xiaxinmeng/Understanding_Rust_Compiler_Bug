{"sha": "775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NWJkOThlNWNmNzkxOGFjZjBkZDcyMDA5YWMxNGNmNzU4ZWQwY2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T14:36:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T14:36:31Z"}, "message": "Merge #2385\n\n2385: Some docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bb4e9795f9dc23d710f147faff02e9d8df596d87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4e9795f9dc23d710f147faff02e9d8df596d87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2pVvCRBK7hj4Ov3rIwAAdHIIAEjwOCFMJFF0aKU+8Rk9R47M\ndeisESLD+NaobkMO3KV9wkLvqif8YIHtjqfSWi2CNm/vmTsnazpo+9kbcbib6Wf7\nK5tx8h9edBvkv2nKmY881NDlbdCou28wu6/gVrjg1G8/A89OrjDgRMagmt/GdyC9\nqkR0sa5e0GKbO9qfn7K5DRjxRkgIYcZlGEdyB21Mx8rfOrAsHcyqVXGLjLYRG2zT\n96wZt+Ulh+BpfknFHfKJKi20ZQANgA28hnrf5nTc+QrwKvY0o0bTEkVfmJjOWcMT\np42qXxvTxRDH+CWJ+oka9d7sQBkZB254DneiQbz3sv70KYf7AS2Lc1a4xHOgtSM=\n=GsiR\n-----END PGP SIGNATURE-----\n", "payload": "tree bb4e9795f9dc23d710f147faff02e9d8df596d87\nparent 5cc634fa6018b60c7bac5ada2038ca341a91f410\nparent 21cfa6d529babf868f897b943d67561ea752b9e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574606191 +0000\ncommitter GitHub <noreply@github.com> 1574606191 +0000\n\nMerge #2385\n\n2385: Some docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "html_url": "https://github.com/rust-lang/rust/commit/775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc634fa6018b60c7bac5ada2038ca341a91f410", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc634fa6018b60c7bac5ada2038ca341a91f410", "html_url": "https://github.com/rust-lang/rust/commit/5cc634fa6018b60c7bac5ada2038ca341a91f410"}, {"sha": "21cfa6d529babf868f897b943d67561ea752b9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21cfa6d529babf868f897b943d67561ea752b9e5", "html_url": "https://github.com/rust-lang/rust/commit/21cfa6d529babf868f897b943d67561ea752b9e5"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "b3e2ff1c283f1440243ac803b3df4795797243f3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -1037,7 +1037,7 @@ impl From<PerNs> for ScopeDef {\n             .or_else(|| def.take_values())\n             .map(|module_def_id| ScopeDef::ModuleDef(module_def_id.into()))\n             .or_else(|| {\n-                def.get_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n+                def.take_macros().map(|macro_def_id| ScopeDef::MacroDef(macro_def_id.into()))\n             })\n             .unwrap_or(ScopeDef::Unknown)\n     }"}, {"sha": "c06997cf102a7adb46b926c23977a820c6b8a0d1", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -82,7 +82,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n-        self.crate_def_map.resolve_path(db, self.module.module_id, path).0.get_macros()\n+        self.crate_def_map.resolve_path(db, self.module.module_id, path).0.take_macros()\n     }\n }\n "}, {"sha": "68bea34df7c8e83b9dd4e1f691878581f4b6a2ea", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -200,18 +200,17 @@ pub struct ConstData {\n impl ConstData {\n     pub(crate) fn const_data_query(db: &impl DefDatabase, konst: ConstId) -> Arc<ConstData> {\n         let node = konst.lookup(db).source(db).value;\n-        const_data_for(&node)\n+        Arc::new(ConstData::new(&node))\n     }\n \n     pub(crate) fn static_data_query(db: &impl DefDatabase, konst: StaticId) -> Arc<ConstData> {\n         let node = konst.lookup(db).source(db).value;\n-        const_data_for(&node)\n+        Arc::new(ConstData::new(&node))\n     }\n-}\n \n-fn const_data_for<N: NameOwner + TypeAscriptionOwner>(node: &N) -> Arc<ConstData> {\n-    let name = node.name().map(|n| n.as_name());\n-    let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n-    let sig = ConstData { name, type_ref };\n-    Arc::new(sig)\n+    fn new<N: NameOwner + TypeAscriptionOwner>(node: &N) -> ConstData {\n+        let name = node.name().map(|n| n.as_name());\n+        let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n+        ConstData { name, type_ref }\n+    }\n }"}, {"sha": "90a8627bc6911990d1211d0c2fc5e685fa0cf02d", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -1,4 +1,7 @@\n-//! FIXME: write short doc here\n+//! Defines hir documentation.\n+//!\n+//! This really shouldn't exist, instead, we should deshugar doc comments into attributes, see\n+//! https://github.com/rust-analyzer/rust-analyzer/issues/2148#issuecomment-550519102\n \n use std::sync::Arc;\n "}, {"sha": "f63c3dd64bac259bea90b5d257596ee727ba11c5", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -8,20 +8,23 @@\n //! actually true.\n \n pub mod db;\n+\n pub mod attr;\n pub mod path;\n pub mod type_ref;\n pub mod builtin_type;\n-pub mod adt;\n pub mod diagnostics;\n-pub mod expr;\n-pub mod body;\n-pub mod generics;\n-pub mod resolver;\n+pub mod per_ns;\n+\n+pub mod adt;\n pub mod data;\n+pub mod generics;\n pub mod lang_item;\n pub mod docs;\n-pub mod per_ns;\n+\n+pub mod expr;\n+pub mod body;\n+pub mod resolver;\n \n mod trace;\n mod nameres;"}, {"sha": "5919771b09a763bed4d801ccb99a04211f797f17", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -169,7 +169,7 @@ impl ModuleScope {\n     pub fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.items\n             .iter()\n-            .filter_map(|(name, res)| res.def.get_macros().map(|macro_| (name, macro_)))\n+            .filter_map(|(name, res)| res.def.take_macros().map(|macro_| (name, macro_)))\n     }\n \n     /// Iterate over all legacy textual scoped macros visable at the end of the module"}, {"sha": "df01a20e1afddb60837c96583f12a7d0e0db0a7e", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -476,7 +476,7 @@ where\n                 path,\n             );\n \n-            if let Some(def) = resolved_res.resolved_def.get_macros() {\n+            if let Some(def) = resolved_res.resolved_def.take_macros() {\n                 let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id: *ast_id });\n                 resolved.push((*module_id, call_id, def));\n                 res = ReachedFixedPoint::No;"}, {"sha": "2ec84f2cc9ff0c7d32c793217699ef406aa54b1a", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -1,4 +1,9 @@\n-//! FIXME: write short doc here\n+//! Lowers syntax tree of a rust file into a raw representation of containing\n+//! items, *without* attaching them to a module structure.\n+//!\n+//! That is, raw items don't have semantics, just as syntax, but, unlike syntax,\n+//! they don't change with trivial source code edits, making them a great tool\n+//! for building salsa recomputation firewalls.\n \n use std::{ops::Index, sync::Arc};\n "}, {"sha": "7b2723d5716035b31d881b30fa05c78ce6f0051b", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! A desugared representation of paths like `crate::foo` or `<Type as Trait>::bar`.\n \n use std::{iter, sync::Arc};\n \n@@ -66,7 +66,7 @@ pub enum PathKind {\n \n impl Path {\n     /// Calls `cb` with all paths, represented by this use item.\n-    pub fn expand_use_item(\n+    pub(crate) fn expand_use_item(\n         item_src: Source<ast::UseItem>,\n         hygiene: &Hygiene,\n         mut cb: impl FnMut(Path, &ast::UseTree, bool, Option<Name>),\n@@ -76,7 +76,10 @@ impl Path {\n         }\n     }\n \n-    pub fn from_simple_segments(kind: PathKind, segments: impl IntoIterator<Item = Name>) -> Path {\n+    pub(crate) fn from_simple_segments(\n+        kind: PathKind,\n+        segments: impl IntoIterator<Item = Name>,\n+    ) -> Path {\n         Path {\n             kind,\n             segments: segments\n@@ -94,7 +97,7 @@ impl Path {\n \n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// It correctly handles `$crate` based path from macro call.\n-    pub fn from_src(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n+    pub(crate) fn from_src(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path> {\n         let mut kind = PathKind::Plain;\n         let mut segments = Vec::new();\n         loop {\n@@ -227,7 +230,7 @@ impl Path {\n }\n \n impl GenericArgs {\n-    pub fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n+    pub(crate) fn from_ast(node: ast::TypeArgList) -> Option<GenericArgs> {\n         let mut args = Vec::new();\n         for type_arg in node.type_args() {\n             let type_ref = TypeRef::from_ast_opt(type_arg.type_ref());"}, {"sha": "06ef6c9fc977fe34c7e1e7e11af2e1d69ec16a36", "filename": "crates/ra_hir_def/src/per_ns.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -44,10 +44,6 @@ impl PerNs {\n         self.types.is_none() && self.values.is_none() && self.macros.is_none()\n     }\n \n-    pub fn is_all(&self) -> bool {\n-        self.types.is_some() && self.values.is_some() && self.macros.is_some()\n-    }\n-\n     pub fn take_types(self) -> Option<ModuleDefId> {\n         self.types\n     }\n@@ -56,14 +52,10 @@ impl PerNs {\n         self.values\n     }\n \n-    pub fn get_macros(&self) -> Option<MacroDefId> {\n+    pub fn take_macros(self) -> Option<MacroDefId> {\n         self.macros\n     }\n \n-    pub fn only_macros(&self) -> PerNs {\n-        PerNs { types: None, values: None, macros: self.macros }\n-    }\n-\n     pub fn or(self, other: PerNs) -> PerNs {\n         PerNs {\n             types: self.types.or(other.types),"}, {"sha": "7182b8a4d680ccca14ab656d425523a5bcf76f1b", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -308,7 +308,7 @@ impl Resolver {\n \n     pub fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n         let (item_map, module) = self.module()?;\n-        item_map.resolve_path(db, module, path).0.get_macros()\n+        item_map.resolve_path(db, module, path).0.take_macros()\n     }\n \n     pub fn process_all_names(&self, db: &impl DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {"}, {"sha": "5f10e9a88bae39316db1001a624c6971c9eb9844", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/775bd98e5cf7918acf0dd72009ac14cf758ed0ca/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=775bd98e5cf7918acf0dd72009ac14cf758ed0ca", "patch": "@@ -64,7 +64,7 @@ pub enum TypeBound {\n \n impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n-    pub fn from_ast(node: ast::TypeRef) -> Self {\n+    pub(crate) fn from_ast(node: ast::TypeRef) -> Self {\n         match node {\n             ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(inner.type_ref()),\n             ast::TypeRef::TupleType(inner) => {\n@@ -113,15 +113,15 @@ impl TypeRef {\n         }\n     }\n \n-    pub fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+    pub(crate) fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n         if let Some(node) = node {\n             TypeRef::from_ast(node)\n         } else {\n             TypeRef::Error\n         }\n     }\n \n-    pub fn unit() -> TypeRef {\n+    pub(crate) fn unit() -> TypeRef {\n         TypeRef::Tuple(Vec::new())\n     }\n }\n@@ -135,7 +135,7 @@ pub(crate) fn type_bounds_from_ast(type_bounds_opt: Option<ast::TypeBoundList>)\n }\n \n impl TypeBound {\n-    pub fn from_ast(node: ast::TypeBound) -> Self {\n+    pub(crate) fn from_ast(node: ast::TypeBound) -> Self {\n         match node.kind() {\n             ast::TypeBoundKind::PathType(path_type) => {\n                 let path = match path_type.path() {"}]}