{"sha": "9c5b6b2201a3af818a6efb0650b1622a342f40f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWI2YjIyMDFhM2FmODE4YTZlZmIwNjUwYjE2MjJhMzQyZjQwZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-29T03:08:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T03:08:21Z"}, "message": "Rollup merge of #65562 - Patryk27:master, r=estebank\n\nImprove the \"try using a variant of the expected type\" hint.\n\nFix https://github.com/rust-lang/rust/issues/65494.\n\n- Change type-printing output.\n- Use `span_to_snippet` when possible.\n- Change the message to `try using a variant of the expected enum`", "tree": {"sha": "8380765a6f83c8190332c0e360ebbc0d1d79c6c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8380765a6f83c8190332c0e360ebbc0d1d79c6c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5b6b2201a3af818a6efb0650b1622a342f40f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdt60mCRBK7hj4Ov3rIwAAdHIIABvTi8x8HfHkqmBvGDRPMW3m\nZsSpqbtCzIUClrYkMZNO/ofAb569Vy6VJ28sXehgvLansfmEWVT5QZV22EnF218v\ngsfYdlcbxCTe3Uq/aF6kmgRNNsaYyLqtfL5WWrS5Trqo73t3MvUY5dmxxcUTv9Gb\ni6nDAARckUhMMg8jFzq3PZvyA9jsDIDU2tPOYERCuK0aROUGkVlGyUFsFYgy3CxO\nPJ/TtEkR8UU0L01efITYQMiVXk7SwbpGrqsyD3Z4gkUiydgqZXOpgqNYdn61IfC5\nu9pX25AtJ1WhHMmTqhW4GUGS9wzRBw+Hiyod3bqVP8ghYgT2j+QLbiRHbTXuqDo=\n=27do\n-----END PGP SIGNATURE-----\n", "payload": "tree 8380765a6f83c8190332c0e360ebbc0d1d79c6c5\nparent ffc6225cd2db1d9634259aef38fd0197b12aacf9\nparent 5c023d68d8b54d651e1775a69e999503ae5b2b30\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572318501 +0100\ncommitter GitHub <noreply@github.com> 1572318501 +0100\n\nRollup merge of #65562 - Patryk27:master, r=estebank\n\nImprove the \"try using a variant of the expected type\" hint.\n\nFix https://github.com/rust-lang/rust/issues/65494.\n\n- Change type-printing output.\n- Use `span_to_snippet` when possible.\n- Change the message to `try using a variant of the expected enum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b6b2201a3af818a6efb0650b1622a342f40f5", "html_url": "https://github.com/rust-lang/rust/commit/9c5b6b2201a3af818a6efb0650b1622a342f40f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5b6b2201a3af818a6efb0650b1622a342f40f5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffc6225cd2db1d9634259aef38fd0197b12aacf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc6225cd2db1d9634259aef38fd0197b12aacf9", "html_url": "https://github.com/rust-lang/rust/commit/ffc6225cd2db1d9634259aef38fd0197b12aacf9"}, {"sha": "5c023d68d8b54d651e1775a69e999503ae5b2b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c023d68d8b54d651e1775a69e999503ae5b2b30", "html_url": "https://github.com/rust-lang/rust/commit/5c023d68d8b54d651e1775a69e999503ae5b2b30"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "64b355f6ec9d1b6693526181b691324037daa932", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1523,9 +1523,17 @@ impl<'a> State<'a> {\n                                         colons_before_params)\n             }\n             hir::QPath::TypeRelative(ref qself, ref item_segment) => {\n-                self.s.word(\"<\");\n-                self.print_type(qself);\n-                self.s.word(\">\");\n+                // If we've got a compound-qualified-path, let's push an additional pair of angle\n+                // brackets, so that we pretty-print `<<A::B>::C>` as `<A::B>::C`, instead of just\n+                // `A::B::C` (since the latter could be ambiguous to the user)\n+                if let hir::TyKind::Path(hir::QPath::Resolved(None, _)) = &qself.kind {\n+                    self.print_type(qself);\n+                } else {\n+                    self.s.word(\"<\");\n+                    self.print_type(qself);\n+                    self.s.word(\">\");\n+                }\n+\n                 self.s.word(\"::\");\n                 self.print_ident(item_segment.ident);\n                 self.print_generic_args(item_segment.generic_args(),"}, {"sha": "b4e07e4a0dfb4481085e26ce4c5b1be9f7bb2c1e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -172,10 +172,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }).peekable();\n \n             if compatible_variants.peek().is_some() {\n-                let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n+                let expr_text = self.tcx.sess\n+                    .source_map()\n+                    .span_to_snippet(expr.span)\n+                    .unwrap_or_else(|_| {\n+                        print::to_string(print::NO_ANN, |s| s.print_expr(expr))\n+                    });\n                 let suggestions = compatible_variants\n                     .map(|v| format!(\"{}({})\", v, expr_text));\n-                let msg = \"try using a variant of the expected type\";\n+                let msg = \"try using a variant of the expected enum\";\n                 err.span_suggestions(expr.span, msg, suggestions, Applicability::MaybeIncorrect);\n             }\n         }"}, {"sha": "b545146c9646ee42a4ad7d190260ef6050e2398e", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -30,7 +30,7 @@\n \n \n                   ((::alloc::fmt::format as\n-                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((<::core::fmt::Arguments>::new_v1\n+                       for<'r> fn(std::fmt::Arguments<'r>) -> std::string::String {std::fmt::format})(((::core::fmt::Arguments::new_v1\n                                                                                                            as\n                                                                                                            fn(&[&str], &[std::fmt::ArgumentV1<'_>]) -> std::fmt::Arguments<'_> {std::fmt::Arguments::<'_>::new_v1})((&([(\"test\"\n                                                                                                                                                                                                                             as"}, {"sha": "700f8128a939a8b17a2a7153c58d80f3add6779d", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n     //~^ ERROR mismatched types\n-    //~| HELP try using a variant of the expected type\n+    //~| HELP try using a variant of the expected enum\n }\n \n "}, {"sha": "0b3e44446aec2035635194a189dddf25c601a62c", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -6,7 +6,7 @@ LL |     this_function_expects_a_double_option(n);\n    |\n    = note: expected type `DoubleOption<_>`\n               found type `usize`\n-help: try using a variant of the expected type\n+help: try using a variant of the expected enum\n    |\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "0db89dfec84081d4b8f2e63abd966a35b6ed7c3a", "filename": "src/test/ui/error-codes/E0164.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0164.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found associated constant `<Foo>::B`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `Foo::B`\n   --> $DIR/E0164.rs:9:9\n    |\n LL |         Foo::B(i) => i,"}, {"sha": "5d6632f2fc2ec96d78aa7f3f7abeef316e96250a", "filename": "src/test/ui/fn-in-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<A>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `A::new`\n   --> $DIR/fn-in-pat.rs:11:9\n    |\n LL |         A::new() => (),"}, {"sha": "e488b1f6b0cb617991f58b359eb3ee574d5dfb4a", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -5,7 +5,7 @@ LL |     x = 5;\n    |         ^\n    |         |\n    |         expected enum `std::option::Option`, found integer\n-   |         help: try using a variant of the expected type: `Some(5)`\n+   |         help: try using a variant of the expected enum: `Some(5)`\n    |\n    = note: expected type `std::option::Option<usize>`\n               found type `{integer}`"}, {"sha": "74cfeb6db8e3b2945ed8cde770c36014585fce35", "filename": "src/test/ui/issues/issue-28992-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -12,5 +12,5 @@ impl S {\n fn main() {\n     if let C1(..) = 0 {} //~ ERROR expected tuple struct or tuple variant, found constant `C1`\n     if let S::C2(..) = 0 {}\n-    //~^ ERROR expected tuple struct or tuple variant, found associated constant `<S>::C2`\n+    //~^ ERROR expected tuple struct or tuple variant, found associated constant `S::C2`\n }"}, {"sha": "71f337278f29a14fd4ab8ca4fcef346facb62dcb", "filename": "src/test/ui/issues/issue-28992-empty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28992-empty.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -4,7 +4,7 @@ error[E0532]: expected tuple struct or tuple variant, found constant `C1`\n LL |     if let C1(..) = 0 {}\n    |            ^^ not a tuple struct or tuple variant\n \n-error[E0164]: expected tuple struct or tuple variant, found associated constant `<S>::C2`\n+error[E0164]: expected tuple struct or tuple variant, found associated constant `S::C2`\n   --> $DIR/issue-28992-empty.rs:14:12\n    |\n LL |     if let S::C2(..) = 0 {}"}, {"sha": "07e90c567480f1de4e27c946260177b80a9f029e", "filename": "src/test/ui/issues/issue-46112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46112.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -5,7 +5,7 @@ LL | fn main() { test(Ok(())); }\n    |                     ^^\n    |                     |\n    |                     expected enum `std::option::Option`, found ()\n-   |                     help: try using a variant of the expected type: `Some(())`\n+   |                     help: try using a variant of the expected enum: `Some(())`\n    |\n    = note: expected type `std::option::Option<()>`\n               found type `()`"}, {"sha": "bb0d15a23d60536f4451b53c54b60eaa13fc86be", "filename": "src/test/ui/issues/issue-55587.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55587.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,4 +1,4 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/issue-55587.rs:4:9\n    |\n LL |     let Path::new();"}, {"sha": "2d7a0f1614197527c5c7cd5f7f65777349474cd4", "filename": "src/test/ui/match/match-fn-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-fn-call.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,12 +1,12 @@\n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/match-fn-call.rs:6:9\n    |\n LL |         Path::new(\"foo\") => println!(\"foo\"),\n    |         ^^^^^^^^^^^^^^^^ `fn` calls are not allowed in patterns\n    |\n    = help: for more information, visit https://doc.rust-lang.org/book/ch18-00-patterns.html\n \n-error[E0164]: expected tuple struct or tuple variant, found method `<Path>::new`\n+error[E0164]: expected tuple struct or tuple variant, found method `Path::new`\n   --> $DIR/match-fn-call.rs:8:9\n    |\n LL |         Path::new(\"bar\") => println!(\"bar\"),"}, {"sha": "f94be1734b7b148c69d7e19455041113f4a17c4e", "filename": "src/test/ui/methods/method-path-in-pattern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -13,20 +13,20 @@ impl MyTrait for Foo {}\n fn main() {\n     match 0u32 {\n         Foo::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     }\n     match 0u32 {\n         <Foo>::bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     }\n     match 0u32 {\n         <Foo>::trait_bar => {}\n-        //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+        //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n     }\n     if let Foo::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     if let <Foo>::bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::bar`\n     if let Foo::trait_bar = 0u32 {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+    //~^ ERROR expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n }"}, {"sha": "6b0c5946ff8d86c271c14878165fe73ac075b833", "filename": "src/test/ui/methods/method-path-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-path-in-pattern.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,34 +1,34 @@\n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:15:9\n    |\n LL |         Foo::bar => {}\n    |         ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:19:9\n    |\n LL |         <Foo>::bar => {}\n    |         ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:23:9\n    |\n LL |         <Foo>::trait_bar => {}\n    |         ^^^^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:26:12\n    |\n LL |     if let Foo::bar = 0u32 {}\n    |            ^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::bar`\n   --> $DIR/method-path-in-pattern.rs:28:12\n    |\n LL |     if let <Foo>::bar = 0u32 {}\n    |            ^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found method `<Foo>::trait_bar`\n+error[E0533]: expected unit struct, unit variant or constant, found method `Foo::trait_bar`\n   --> $DIR/method-path-in-pattern.rs:30:12\n    |\n LL |     if let Foo::trait_bar = 0u32 {}"}, {"sha": "15d15f2f40d98395e8f7e348c33a29651e8cf36f", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-Self-issue-58006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-Self-issue-58006.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,4 +1,4 @@\n-error[E0533]: expected unit struct, unit variant or constant, found tuple variant `<Self>::A`\n+error[E0533]: expected unit struct, unit variant or constant, found tuple variant `Self::A`\n   --> $DIR/incorrect-variant-form-through-Self-issue-58006.rs:8:13\n    |\n LL |             Self::A => (),"}, {"sha": "5772450477c1b098a8f98e5f9e78f2e9dc141bce", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.rs?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -8,14 +8,14 @@ type Alias = Enum;\n \n fn main() {\n     Alias::Braced;\n-    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced = panic!();\n-    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced` [E0533]\n+    //~^ ERROR expected unit struct, unit variant or constant, found struct variant `Alias::Braced` [E0533]\n     let Alias::Braced(..) = panic!();\n-    //~^ ERROR expected tuple struct or tuple variant, found struct variant `<Alias>::Braced` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found struct variant `Alias::Braced` [E0164]\n \n     Alias::Unit();\n-    //~^ ERROR expected function, found enum variant `<Alias>::Unit`\n+    //~^ ERROR expected function, found enum variant `Alias::Unit`\n     let Alias::Unit() = panic!();\n-    //~^ ERROR expected tuple struct or tuple variant, found unit variant `<Alias>::Unit` [E0164]\n+    //~^ ERROR expected tuple struct or tuple variant, found unit variant `Alias::Unit` [E0164]\n }"}, {"sha": "b0de3ee42e339e923083dbe84c02e4949cbfe363", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c5b6b2201a3af818a6efb0650b1622a342f40f5/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=9c5b6b2201a3af818a6efb0650b1622a342f40f5", "patch": "@@ -1,38 +1,38 @@\n-error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:10:5\n    |\n LL |     Alias::Braced;\n    |     ^^^^^^^^^^^^^\n \n-error[E0533]: expected unit struct, unit variant or constant, found struct variant `<Alias>::Braced`\n+error[E0533]: expected unit struct, unit variant or constant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:12:9\n    |\n LL |     let Alias::Braced = panic!();\n    |         ^^^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct or tuple variant, found struct variant `<Alias>::Braced`\n+error[E0164]: expected tuple struct or tuple variant, found struct variant `Alias::Braced`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:14:9\n    |\n LL |     let Alias::Braced(..) = panic!();\n    |         ^^^^^^^^^^^^^^^^^ not a tuple variant or struct\n \n-error[E0618]: expected function, found enum variant `<Alias>::Unit`\n+error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:5\n    |\n LL | enum Enum { Braced {}, Unit, Tuple() }\n-   |                        ---- `<Alias>::Unit` defined here\n+   |                        ---- `Alias::Unit` defined here\n ...\n LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `<Alias>::Unit` is a unit variant, you need to write it without the parenthesis\n+help: `Alias::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n-LL |     <Alias>::Unit;\n-   |     ^^^^^^^^^^^^^\n+LL |     Alias::Unit;\n+   |     ^^^^^^^^^^^\n \n-error[E0164]: expected tuple struct or tuple variant, found unit variant `<Alias>::Unit`\n+error[E0164]: expected tuple struct or tuple variant, found unit variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:19:9\n    |\n LL |     let Alias::Unit() = panic!();"}]}