{"sha": "c886d47b822d0269360d9945b556764bd94ac7ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODZkNDdiODIyZDAyNjkzNjBkOTk0NWI1NTY3NjRiZDk0YWM3ZWM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T14:54:14Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:46Z"}, "message": "doc: partially HirIdify visit_ast", "tree": {"sha": "e08c21adfb5295fdcb9230277bf4f553c00d1db7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08c21adfb5295fdcb9230277bf4f553c00d1db7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c886d47b822d0269360d9945b556764bd94ac7ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c886d47b822d0269360d9945b556764bd94ac7ec", "html_url": "https://github.com/rust-lang/rust/commit/c886d47b822d0269360d9945b556764bd94ac7ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c886d47b822d0269360d9945b556764bd94ac7ec/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40", "html_url": "https://github.com/rust-lang/rust/commit/46e4f4ae617dbaa32a08dee3a474cdbbcb583f40"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "b791bfc11e01ad3f0e35e2f66c6e7ea99f93f67a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c886d47b822d0269360d9945b556764bd94ac7ec/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c886d47b822d0269360d9945b556764bd94ac7ec/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c886d47b822d0269360d9945b556764bd94ac7ec", "patch": "@@ -66,13 +66,13 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         }\n     }\n \n-    fn stability(&self, id: ast::NodeId) -> Option<attr::Stability> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n+    fn stability(&self, id: hir::HirId) -> Option<attr::Stability> {\n+        self.cx.tcx.hir().opt_local_def_id_from_hir_id(id)\n             .and_then(|def_id| self.cx.tcx.lookup_stability(def_id)).cloned()\n     }\n \n-    fn deprecation(&self, id: ast::NodeId) -> Option<attr::Deprecation> {\n-        self.cx.tcx.hir().opt_local_def_id(id)\n+    fn deprecation(&self, id: hir::HirId) -> Option<attr::Deprecation> {\n+        self.cx.tcx.hir().opt_local_def_id_from_hir_id(id)\n             .and_then(|def_id| self.cx.tcx.lookup_deprecation(def_id))\n     }\n \n@@ -83,7 +83,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                                               krate.attrs.clone(),\n                                               Spanned { span: syntax_pos::DUMMY_SP,\n                                                         node: hir::VisibilityKind::Public },\n-                                              ast::CRATE_NODE_ID,\n+                                              hir::CRATE_HIR_ID,\n                                               &krate.module,\n                                               None);\n         // Attach the crate's exported macros to the top-level module:\n@@ -105,8 +105,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             struct_type,\n             name,\n             vis: item.vis.clone(),\n-            stab: self.stability(item.id),\n-            depr: self.deprecation(item.id),\n+            stab: self.stability(item.hir_id),\n+            depr: self.deprecation(item.hir_id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n             fields: sd.fields().iter().cloned().collect(),\n@@ -124,8 +124,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             struct_type,\n             name,\n             vis: item.vis.clone(),\n-            stab: self.stability(item.id),\n-            depr: self.deprecation(item.id),\n+            stab: self.stability(item.hir_id),\n+            depr: self.deprecation(item.hir_id),\n             attrs: item.attrs.clone(),\n             generics: generics.clone(),\n             fields: sd.fields().iter().cloned().collect(),\n@@ -142,14 +142,14 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.ident.name,\n                 attrs: v.node.attrs.clone(),\n-                stab: self.stability(v.node.data.id()),\n-                depr: self.deprecation(v.node.data.id()),\n+                stab: self.stability(v.node.data.hir_id()),\n+                depr: self.deprecation(v.node.data.hir_id()),\n                 def: v.node.data.clone(),\n                 whence: v.span,\n             }).collect(),\n             vis: it.vis.clone(),\n-            stab: self.stability(it.id),\n-            depr: self.deprecation(it.id),\n+            stab: self.stability(it.hir_id),\n+            depr: self.deprecation(it.hir_id),\n             generics: params.clone(),\n             attrs: it.attrs.clone(),\n             id: it.id,\n@@ -207,16 +207,16 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     helpers,\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 });\n             }\n             None => {\n                 om.fns.push(Function {\n                     id: item.id,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                     attrs: item.attrs.clone(),\n                     decl: fd.clone(),\n                     name,\n@@ -230,7 +230,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     }\n \n     pub fn visit_mod_contents(&mut self, span: Span, attrs: hir::HirVec<ast::Attribute>,\n-                              vis: hir::Visibility, id: ast::NodeId,\n+                              vis: hir::Visibility, id: hir::HirId,\n                               m: &hir::Mod,\n                               name: Option<ast::Name>) -> Module {\n         let mut om = Module::new(name);\n@@ -240,7 +240,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         om.vis = vis.clone();\n         om.stab = self.stability(id);\n         om.depr = self.deprecation(id);\n-        om.id = id;\n+        om.id = self.cx.tcx.hir().hir_to_node_id(id);\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n@@ -460,7 +460,7 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 om.mods.push(self.visit_mod_contents(item.span,\n                                                      item.attrs.clone(),\n                                                      item.vis.clone(),\n-                                                     item.id,\n+                                                     item.hir_id,\n                                                      m,\n                                                      Some(ident.name)));\n             },\n@@ -481,8 +481,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.typedefs.push(t);\n             },\n@@ -494,8 +494,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.existentials.push(t);\n             },\n@@ -509,8 +509,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.statics.push(s);\n             },\n@@ -523,8 +523,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.constants.push(s);\n             },\n@@ -543,8 +543,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.traits.push(t);\n             },\n@@ -557,8 +557,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     attrs: item.attrs.clone(),\n                     whence: item.span,\n                     vis: item.vis.clone(),\n-                    stab: self.stability(item.id),\n-                    depr: self.deprecation(item.id),\n+                    stab: self.stability(item.hir_id),\n+                    depr: self.deprecation(item.hir_id),\n                 };\n                 om.trait_aliases.push(t);\n             },\n@@ -588,8 +588,8 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                         id: item.id,\n                         whence: item.span,\n                         vis: item.vis.clone(),\n-                        stab: self.stability(item.id),\n-                        depr: self.deprecation(item.id),\n+                        stab: self.stability(item.hir_id),\n+                        depr: self.deprecation(item.hir_id),\n                     };\n                     om.impls.push(i);\n                 }\n@@ -609,13 +609,14 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect();\n \n         Macro {\n-            def_id: self.cx.tcx.hir().local_def_id(def.id),\n+\n+            def_id: self.cx.tcx.hir().local_def_id_from_hir_id(def.hir_id),\n             attrs: def.attrs.clone(),\n             name: renamed.unwrap_or(def.name),\n             whence: def.span,\n             matchers,\n-            stab: self.stability(def.id),\n-            depr: self.deprecation(def.id),\n+            stab: self.stability(def.hir_id),\n+            depr: self.deprecation(def.hir_id),\n             imported_from: None,\n         }\n     }"}]}