{"sha": "2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "node_id": "C_kwDOAAsO6NoAKDJlNDBkYzgxYjc5NmFjMDYzYmUxMTA2YjNlNGE3ZTUxZGQ1NGU4NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-02T19:31:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-02T19:31:22Z"}, "message": "Auto merge of #8456 - ebobrow:use_self_pat, r=llogiq\n\ncheck `use_self` in `pat`\n\nfixes #6955\n\nchangelog: check `use_self` in `pat`", "tree": {"sha": "67e8f5fbc2e8aadeca44636701a4e79968eee8a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e8f5fbc2e8aadeca44636701a4e79968eee8a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "html_url": "https://github.com/rust-lang/rust/commit/2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27869d6d46644e4910e539e491c822a296a8902c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27869d6d46644e4910e539e491c822a296a8902c", "html_url": "https://github.com/rust-lang/rust/commit/27869d6d46644e4910e539e491c822a296a8902c"}, {"sha": "914ae1e8490c4d6e34dc090cad30303b95d44bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/914ae1e8490c4d6e34dc090cad30303b95d44bb7", "html_url": "https://github.com/rust-lang/rust/commit/914ae1e8490c4d6e34dc090cad30303b95d44bb7"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "09d671e11184d6e2e456909b3326af74b6ce3c04", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "patch": "@@ -9,7 +9,8 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Pat, PatKind, Path, QPath,\n+    TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n@@ -252,6 +253,22 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n         }\n     }\n \n+    fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n+        if_chain! {\n+            if !pat.span.from_expansion();\n+            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n+            if let PatKind::Path(QPath::Resolved(_, path)) = pat.kind;\n+            if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));\n+            if cx.typeck_results().pat_ty(pat) == cx.tcx.type_of(impl_id);\n+            if let [first, ..] = path.segments;\n+            if let Some(hir_id) = first.hir_id;\n+            then {\n+                span_lint(cx, cx.tcx.hir().span(hir_id));\n+            }\n+        }\n+    }\n+\n     extract_msrv_attr!(LateContext);\n }\n "}, {"sha": "9d216f56ae60c66b3a22df7158c40a893f424e08", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "patch": "@@ -2,7 +2,7 @@\n // aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unreachable_code)]\n #![allow(\n     clippy::should_implement_trait,\n     clippy::upper_case_acronyms,\n@@ -519,3 +519,26 @@ mod self_is_ty_param {\n         }\n     }\n }\n+\n+mod use_self_in_pat {\n+    enum Foo {\n+        Bar,\n+        Baz,\n+    }\n+\n+    impl Foo {\n+        fn do_stuff(self) {\n+            match self {\n+                Self::Bar => unimplemented!(),\n+                Self::Baz => unimplemented!(),\n+            }\n+            match Some(1) {\n+                Some(_) => unimplemented!(),\n+                None => unimplemented!(),\n+            }\n+            if let Self::Bar = self {\n+                unimplemented!()\n+            }\n+        }\n+    }\n+}"}, {"sha": "5f604fe25e416d93e2fafbf4883b92be539ca0ec", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "patch": "@@ -2,7 +2,7 @@\n // aux-build:proc_macro_derive.rs\n \n #![warn(clippy::use_self)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unreachable_code)]\n #![allow(\n     clippy::should_implement_trait,\n     clippy::upper_case_acronyms,\n@@ -519,3 +519,26 @@ mod self_is_ty_param {\n         }\n     }\n }\n+\n+mod use_self_in_pat {\n+    enum Foo {\n+        Bar,\n+        Baz,\n+    }\n+\n+    impl Foo {\n+        fn do_stuff(self) {\n+            match self {\n+                Foo::Bar => unimplemented!(),\n+                Foo::Baz => unimplemented!(),\n+            }\n+            match Some(1) {\n+                Some(_) => unimplemented!(),\n+                None => unimplemented!(),\n+            }\n+            if let Foo::Bar = self {\n+                unimplemented!()\n+            }\n+        }\n+    }\n+}"}, {"sha": "34d98618253a6ddcff0ab9e603896326f3a07d92", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e40dc81b796ac063be1106b3e4a7e51dd54e85e/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=2e40dc81b796ac063be1106b3e4a7e51dd54e85e", "patch": "@@ -168,5 +168,23 @@ error: unnecessary structure name repetition\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 28 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:532:17\n+   |\n+LL |                 Foo::Bar => unimplemented!(),\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:533:17\n+   |\n+LL |                 Foo::Baz => unimplemented!(),\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:539:20\n+   |\n+LL |             if let Foo::Bar = self {\n+   |                    ^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 31 previous errors\n "}]}