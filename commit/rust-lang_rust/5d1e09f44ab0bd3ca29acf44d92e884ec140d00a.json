{"sha": "5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "node_id": "C_kwDOAAsO6NoAKDVkMWUwOWY0NGFiMGJkM2NhMjlhY2Y0NGQ5MmU4ODRlYzE0MGQwMGE", "commit": {"author": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-11-02T21:41:34Z"}, "committer": {"name": "Tor Hovland", "email": "tor.hovland@bekk.no", "date": "2021-11-02T21:41:34Z"}, "message": "Added the --temps-dir option.", "tree": {"sha": "57ecc54c99e43c3668a72ad77b3d7cb8937cd15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57ecc54c99e43c3668a72ad77b3d7cb8937cd15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "html_url": "https://github.com/rust-lang/rust/commit/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/comments", "author": null, "committer": null, "parents": [{"sha": "18bc4bee9710b181b440a472635150f0d6257713", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bc4bee9710b181b440a472635150f0d6257713", "html_url": "https://github.com/rust-lang/rust/commit/18bc4bee9710b181b440a472635150f0d6257713"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "6b3c65dd52722ebfd1b126ca4957affc7755a08b", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -215,13 +215,15 @@ fn run_compiler(\n \n     let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let (odir, ofile) = make_output(&matches);\n+    let temps_dir = make_temps_dir(&matches);\n     let mut config = interface::Config {\n         opts: sopts,\n         crate_cfg: cfg,\n         input: Input::File(PathBuf::new()),\n         input_path: None,\n         output_file: ofile,\n         output_dir: odir,\n+        temps_dir,\n         file_loader,\n         diagnostic_output,\n         stderr: None,\n@@ -267,6 +269,7 @@ fn run_compiler(\n                         None,\n                         compiler.output_dir(),\n                         compiler.output_file(),\n+                        compiler.temps_dir(),\n                     );\n \n                     if should_stop == Compilation::Stop {\n@@ -295,6 +298,7 @@ fn run_compiler(\n             Some(compiler.input()),\n             compiler.output_dir(),\n             compiler.output_file(),\n+            compiler.temps_dir(),\n         )\n         .and_then(|| {\n             RustcDefaultCalls::list_metadata(\n@@ -454,6 +458,11 @@ fn make_output(matches: &getopts::Matches) -> (Option<PathBuf>, Option<PathBuf>)\n     (odir, ofile)\n }\n \n+// Extract temporary directory from matches.\n+fn make_temps_dir(matches: &getopts::Matches) -> Option<PathBuf> {\n+    matches.opt_str(\"temps-dir\").map(|o| PathBuf::from(&o))\n+}\n+\n // Extract input (string or file and optional path) from matches.\n fn make_input(\n     error_format: ErrorOutputType,\n@@ -647,6 +656,7 @@ impl RustcDefaultCalls {\n         input: Option<&Input>,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n+        temps_dir: &Option<PathBuf>,\n     ) -> Compilation {\n         use rustc_session::config::PrintRequest::*;\n         // PrintRequest::NativeStaticLibs is special - printed during linking\n@@ -685,7 +695,7 @@ impl RustcDefaultCalls {\n                     });\n                     let attrs = attrs.as_ref().unwrap();\n                     let t_outputs = rustc_interface::util::build_output_filenames(\n-                        input, odir, ofile, attrs, sess,\n+                        input, odir, ofile, temps_dir, attrs, sess,\n                     );\n                     let id = rustc_session::output::find_crate_name(sess, attrs, input);\n                     if *req == PrintRequest::CrateName {"}, {"sha": "7b235be48b34ff7c102c0cbc9fba4c25e2516f7a", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -36,6 +36,7 @@ pub struct Compiler {\n     pub(crate) input_path: Option<PathBuf>,\n     pub(crate) output_dir: Option<PathBuf>,\n     pub(crate) output_file: Option<PathBuf>,\n+    pub(crate) temps_dir: Option<PathBuf>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n@@ -57,6 +58,9 @@ impl Compiler {\n     pub fn output_file(&self) -> &Option<PathBuf> {\n         &self.output_file\n     }\n+    pub fn temps_dir(&self) -> &Option<PathBuf> {\n+        &self.temps_dir\n+    }\n     pub fn register_lints(&self) -> &Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>> {\n         &self.register_lints\n     }\n@@ -65,7 +69,14 @@ impl Compiler {\n         sess: &Session,\n         attrs: &[ast::Attribute],\n     ) -> OutputFilenames {\n-        util::build_output_filenames(&self.input, &self.output_dir, &self.output_file, attrs, sess)\n+        util::build_output_filenames(\n+            &self.input,\n+            &self.output_dir,\n+            &self.output_file,\n+            &self.temps_dir,\n+            attrs,\n+            sess,\n+        )\n     }\n }\n \n@@ -132,6 +143,7 @@ pub struct Config {\n     pub input_path: Option<PathBuf>,\n     pub output_dir: Option<PathBuf>,\n     pub output_file: Option<PathBuf>,\n+    pub temps_dir: Option<PathBuf>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     pub diagnostic_output: DiagnosticOutput,\n \n@@ -193,6 +205,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         input_path: config.input_path,\n         output_dir: config.output_dir,\n         output_file: config.output_file,\n+        temps_dir: config.temps_dir,\n         register_lints: config.register_lints,\n         override_queries: config.override_queries,\n     };"}, {"sha": "b14b1c4f1e6598f249a86fa73dfd5cf16fe9b6be", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -692,6 +692,7 @@ pub fn prepare_outputs(\n         &compiler.input,\n         &compiler.output_dir,\n         &compiler.output_file,\n+        &compiler.temps_dir,\n         &krate.attrs,\n         sess,\n     );\n@@ -734,6 +735,12 @@ pub fn prepare_outputs(\n                 return Err(ErrorReported);\n             }\n         }\n+        if let Some(ref dir) = compiler.temps_dir {\n+            if fs::create_dir_all(dir).is_err() {\n+                sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+                return Err(ErrorReported);\n+            }\n+        }\n     }\n \n     Ok(outputs)"}, {"sha": "b446422f62f31d7f34eec38c021fc7dc3de098a7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -604,6 +604,7 @@ pub fn build_output_filenames(\n     input: &Input,\n     odir: &Option<PathBuf>,\n     ofile: &Option<PathBuf>,\n+    temps_dir: &Option<PathBuf>,\n     attrs: &[ast::Attribute],\n     sess: &Session,\n ) -> OutputFilenames {\n@@ -626,6 +627,7 @@ pub fn build_output_filenames(\n                 dirpath,\n                 stem,\n                 None,\n+                temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )\n@@ -654,6 +656,7 @@ pub fn build_output_filenames(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n                 out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n+                temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )"}, {"sha": "52cd8638b0083b9435f4028e4442204086c2978d", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -578,6 +578,7 @@ pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     filestem: String,\n     pub single_output_file: Option<PathBuf>,\n+    pub temps_directory: Option<PathBuf>,\n     pub outputs: OutputTypes,\n }\n \n@@ -592,12 +593,14 @@ impl OutputFilenames {\n         out_directory: PathBuf,\n         out_filestem: String,\n         single_output_file: Option<PathBuf>,\n+        temps_directory: Option<PathBuf>,\n         extra: String,\n         outputs: OutputTypes,\n     ) -> Self {\n         OutputFilenames {\n             out_directory,\n             single_output_file,\n+            temps_directory,\n             outputs,\n             filestem: format!(\"{}{}\", out_filestem, extra),\n         }\n@@ -643,11 +646,17 @@ impl OutputFilenames {\n             extension.push_str(ext);\n         }\n \n-        self.with_extension(&extension)\n+        let temps_directory = self.temps_directory.as_ref().unwrap_or(&self.out_directory);\n+\n+        self.with_directory_and_extension(&temps_directory, &extension)\n     }\n \n     pub fn with_extension(&self, extension: &str) -> PathBuf {\n-        let mut path = self.out_directory.join(&self.filestem);\n+        self.with_directory_and_extension(&self.out_directory, extension)\n+    }\n+\n+    fn with_directory_and_extension(&self, directory: &PathBuf, extension: &str) -> PathBuf {\n+        let mut path = directory.join(&self.filestem);\n         path.set_extension(extension);\n         path\n     }\n@@ -1094,6 +1103,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n              in <dir>\",\n             \"DIR\",\n         ),\n+        opt::opt_s(\"\", \"temps-dir\", \"Write temporary output files to <dir>\", \"DIR\"),\n         opt::opt_s(\n             \"\",\n             \"explain\","}, {"sha": "063c0bc20c6842f1fb980de8d95c32e97aa15069", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -259,6 +259,7 @@ crate fn create_config(\n         input_path: cpath,\n         output_file: None,\n         output_dir: None,\n+        temps_dir: None,\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,"}, {"sha": "63eaded03207aeba35dc89a5251aebadd224baa0", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1e09f44ab0bd3ca29acf44d92e884ec140d00a/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=5d1e09f44ab0bd3ca29acf44d92e884ec140d00a", "patch": "@@ -94,6 +94,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         input_path: None,\n         output_file: None,\n         output_dir: None,\n+        temps_dir: None,\n         file_loader: None,\n         diagnostic_output: DiagnosticOutput::Default,\n         stderr: None,"}]}