{"sha": "6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDFmYjU1YmFjYmUxNTgzZTRhYjQ3ZWU1ZGJiMGJlZTQ1OWUxZjE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:50Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:23Z"}, "message": "Rollup merge of #59152 - smmalis37:range_contains, r=SimonSapin\n\nStabilize Range*::contains.\n\nCloses https://github.com/rust-lang/rust/issues/32311. There's also a bit of rustfmt on range.rs thrown in for good measure (I forgot to turn off format-on-save in VSCode).", "tree": {"sha": "95a2a78abed7928bff60f133d29c2cc54fbd976d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a2a78abed7928bff60f133d29c2cc54fbd976d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCtgACgkQ/vbIBR0O\nATyIJw/7BkFkMck7nyRmz1iIndygrCwLzDPzY+dY3iFVPP/MpHjrSxR1uI3gs9IP\ntY2Tb1h8h+fep/Hp3KxXTwoaThUI0SBfX+E1PHr42L2473Ojhe7kZtpD9OPQNguw\nb/eMJK/epwW4I9eeaOknUvKp58ppGd+XHT+6Z0nW2weUrF9UI5mOKP7829vJTi5V\naCgAOTdJ1Y6AkevdeRMjGQ/QJh/VkdGubnLp1nAoMTVw5+M4amfDMOhZhBgmBrzI\ne3Q1WC6qXt3vg6KU8FMtUbUiT4Q3i5CyOSWeR/mlhXecCHkNxJZTWnxg8URQB7+J\n9ZJQimdxhhwLMsYvoNIo8oU1o+YR1lISXK63i02YDNfuJm061ShsxKvZwFRjCqg0\na504wu1dEzVHRzyn09thX5dMxLsrIIquNcWCbjxMiOOGJw5JBlemmtep9gTaRrRA\n32PP0MwLjvs/Xq83BqYbZaUB03t+Woh4K/p66yc/Jqy5q5d1VoJr1XUbbOvVNRCg\nYLWjmvgPc48ExStRgcB6ZssZ9wfvqeLkKtvueMKu6aQDVqrROQ+QQiqQq+53n0Db\nPE/ztzVMsma2kude+XEHsvXdnt8QXFNXUwvNuRqyhM1H+pckbF7B8SPDcKI2wpGr\n57TDQb+sZwVgoffc+k/Ik1LySwiX+5ZFcjTMYa0IO/TIF++cGNs=\n=0gOg\n-----END PGP SIGNATURE-----", "payload": "tree 95a2a78abed7928bff60f133d29c2cc54fbd976d\nparent d84e063506537637388a0e4f84d74df4599534e8\nparent 266ca31f74ae343fc773b88f3bb77b601034babf\nauthor kennytm <kennytm@gmail.com> 1552719410 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747223 +0800\n\nRollup merge of #59152 - smmalis37:range_contains, r=SimonSapin\n\nStabilize Range*::contains.\n\nCloses https://github.com/rust-lang/rust/issues/32311. There's also a bit of rustfmt on range.rs thrown in for good measure (I forgot to turn off format-on-save in VSCode).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "html_url": "https://github.com/rust-lang/rust/commit/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84e063506537637388a0e4f84d74df4599534e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84e063506537637388a0e4f84d74df4599534e8", "html_url": "https://github.com/rust-lang/rust/commit/d84e063506537637388a0e4f84d74df4599534e8"}, {"sha": "266ca31f74ae343fc773b88f3bb77b601034babf", "url": "https://api.github.com/repos/rust-lang/rust/commits/266ca31f74ae343fc773b88f3bb77b601034babf", "html_url": "https://github.com/rust-lang/rust/commit/266ca31f74ae343fc773b88f3bb77b601034babf"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "4f71c8e794954157c8a9d3354b581661aa2d8b9a", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "patch": "@@ -71,7 +71,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);\n /// ```\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n+#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -95,8 +95,6 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..5).contains(&2));\n@@ -112,7 +110,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(0.0..f32::NAN).contains(&0.5));\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -175,7 +173,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n+#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -196,8 +194,6 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..).contains(&2));\n@@ -208,7 +204,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// assert!(!(0.0..).contains(&f32::NAN));\n     /// assert!(!(f32::NAN..).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -280,8 +276,6 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (..5).contains(&-1_000_000_000));\n@@ -292,7 +286,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// assert!(!(..1.0).contains(&f32::NAN));\n     /// assert!(!(..f32::NAN).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -329,7 +323,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=3], [  1,2,3  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n-#[derive(Clone)]  // not Copy -- see #27186\n+#[derive(Clone)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     pub(crate) start: Idx,\n@@ -365,7 +359,8 @@ impl<T: PartialOrd> RangeInclusiveEquality for T {\n impl<Idx: PartialEq> PartialEq for RangeInclusive<Idx> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        self.start == other.start && self.end == other.end\n+        self.start == other.start\n+            && self.end == other.end\n             && RangeInclusiveEquality::canonicalized_is_empty(self)\n                 == RangeInclusiveEquality::canonicalized_is_empty(other)\n     }\n@@ -397,7 +392,11 @@ impl<Idx> RangeInclusive<Idx> {\n     #[inline]\n     #[rustc_promotable]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n-        Self { start, end, is_empty: None }\n+        Self {\n+            start,\n+            end,\n+            is_empty: None,\n+        }\n     }\n \n     /// Returns the lower bound of the range (inclusive).\n@@ -478,8 +477,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..=5).contains(&2));\n@@ -496,7 +493,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(!(0.0..=f32::NAN).contains(&0.0));\n     /// assert!(!(f32::NAN..=1.0).contains(&1.0));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -609,15 +606,12 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (..=5).contains(&-1_000_000_000));\n@@ -628,7 +622,7 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// assert!(!(..=1.0).contains(&f32::NAN));\n     /// assert!(!(..=f32::NAN).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -730,14 +724,11 @@ pub trait RangeBounds<T: ?Sized> {\n     #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n     fn end_bound(&self) -> Bound<&T>;\n \n-\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (3..5).contains(&4));\n@@ -747,7 +738,7 @@ pub trait RangeBounds<T: ?Sized> {\n     /// assert!(!(0.0..1.0).contains(&f32::NAN));\n     /// assert!(!(0.0..f32::NAN).contains(&0.5));\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     fn contains<U>(&self, item: &U) -> bool\n     where\n         T: PartialOrd<U>,\n@@ -757,9 +748,7 @@ pub trait RangeBounds<T: ?Sized> {\n             Included(ref start) => *start <= item,\n             Excluded(ref start) => *start < item,\n             Unbounded => true,\n-        })\n-        &&\n-        (match self.end_bound() {\n+        }) && (match self.end_bound() {\n             Included(ref end) => item <= *end,\n             Excluded(ref end) => item < *end,\n             Unbounded => true,\n@@ -835,15 +824,15 @@ impl<T> RangeBounds<T> for (Bound<T>, Bound<T>) {\n         match *self {\n             (Included(ref start), _) => Included(start),\n             (Excluded(ref start), _) => Excluded(start),\n-            (Unbounded, _)           => Unbounded,\n+            (Unbounded, _) => Unbounded,\n         }\n     }\n \n     fn end_bound(&self) -> Bound<&T> {\n         match *self {\n             (_, Included(ref end)) => Included(end),\n             (_, Excluded(ref end)) => Excluded(end),\n-            (_, Unbounded)         => Unbounded,\n+            (_, Unbounded) => Unbounded,\n         }\n     }\n }"}, {"sha": "c75788ecb4fbd3da5de704208f12ef88e160347f", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "patch": "@@ -15,7 +15,6 @@\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![feature(nll)]\n-#![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(optin_builtin_traits)]\n #![feature(concat_idents)]"}, {"sha": "6b4b437930d2609b642b4bc20036a0b059c71d29", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "c45e694ebf832a65371b9981329dd85b0207a730", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "patch": "@@ -14,7 +14,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(const_fn)]\n #![feature(decl_macro)]\n #![feature(exhaustive_patterns)]\n-#![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n #![feature(never_type)]"}, {"sha": "fc8ac9a0b3e00b57978501097236dbd9dda88f28", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6241fb55bacbe1583e4ab47ee5dbb0bee459e1f1", "patch": "@@ -221,7 +221,7 @@\n \n #![cfg_attr(test, feature(print_internals, set_stdio, test, update_panic_count))]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n-            feature(global_asm, range_contains, slice_index_methods,\n+            feature(global_asm, slice_index_methods,\n                     decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n \n // std is implemented with unstable features, many of which are internal"}]}