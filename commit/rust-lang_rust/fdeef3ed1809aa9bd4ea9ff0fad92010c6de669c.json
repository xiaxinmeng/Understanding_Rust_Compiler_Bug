{"sha": "fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "node_id": "C_kwDOAAsO6NoAKGZkZWVmM2VkMTgwOWFhOWJkNGVhOWZmMGZhZDkyMDEwYzZkZTY2OWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T23:47:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-24T23:47:32Z"}, "message": "Auto merge of #106152 - SUPERCILEX:lazycell, r=Amanieu\n\nAdd LazyCell::into_inner\n\nThis enables uses cases that need to extract the evaluated value and do something owned with it.", "tree": {"sha": "33f1f5418a86f5c85e7f7486abd0f32703305df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f1f5418a86f5c85e7f7486abd0f32703305df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "html_url": "https://github.com/rust-lang/rust/commit/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5559e338256f17ada6d82b429acc2dbd8facc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5559e338256f17ada6d82b429acc2dbd8facc9c", "html_url": "https://github.com/rust-lang/rust/commit/f5559e338256f17ada6d82b429acc2dbd8facc9c"}, {"sha": "d9256f94a987a008484caab5acf5a6e06c24ecd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9256f94a987a008484caab5acf5a6e06c24ecd3", "html_url": "https://github.com/rust-lang/rust/commit/d9256f94a987a008484caab5acf5a6e06c24ecd3"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "1b213f6a2941b9a96681d4faa2c7a5f02d87902f", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "patch": "@@ -63,6 +63,34 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n         LazyCell { state: UnsafeCell::new(State::Uninit(f)) }\n     }\n \n+    /// Consumes this `LazyCell` returning the stored value.\n+    ///\n+    /// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(lazy_cell)]\n+    /// #![feature(lazy_cell_consume)]\n+    ///\n+    /// use std::cell::LazyCell;\n+    ///\n+    /// let hello = \"Hello, World!\".to_string();\n+    ///\n+    /// let lazy = LazyCell::new(|| hello.to_uppercase());\n+    ///\n+    /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n+    /// assert_eq!(LazyCell::into_inner(lazy).ok(), Some(\"HELLO, WORLD!\".to_string()));\n+    /// ```\n+    #[unstable(feature = \"lazy_cell_consume\", issue = \"109736\")]\n+    pub fn into_inner(this: Self) -> Result<T, F> {\n+        match this.state.into_inner() {\n+            State::Init(data) => Ok(data),\n+            State::Uninit(f) => Err(f),\n+            State::Poisoned => panic!(\"LazyCell instance has previously been poisoned\"),\n+        }\n+    }\n+\n     /// Forces the evaluation of this lazy value and returns a reference to\n     /// the result.\n     ///"}, {"sha": "a6bc468b092817a7fb4302790ecf6d47bc77c46e", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=fdeef3ed1809aa9bd4ea9ff0fad92010c6de669c", "patch": "@@ -1,9 +1,9 @@\n use crate::cell::UnsafeCell;\n-use crate::fmt;\n use crate::mem::ManuallyDrop;\n use crate::ops::Deref;\n use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::sync::Once;\n+use crate::{fmt, ptr};\n \n use super::once::ExclusiveState;\n \n@@ -69,6 +69,42 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n         LazyLock { once: Once::new(), data: UnsafeCell::new(Data { f: ManuallyDrop::new(f) }) }\n     }\n \n+    /// Consumes this `LazyLock` returning the stored value.\n+    ///\n+    /// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(lazy_cell)]\n+    /// #![feature(lazy_cell_consume)]\n+    ///\n+    /// use std::sync::LazyLock;\n+    ///\n+    /// let hello = \"Hello, World!\".to_string();\n+    ///\n+    /// let lazy = LazyLock::new(|| hello.to_uppercase());\n+    ///\n+    /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n+    /// assert_eq!(LazyLock::into_inner(lazy).ok(), Some(\"HELLO, WORLD!\".to_string()));\n+    /// ```\n+    #[unstable(feature = \"lazy_cell_consume\", issue = \"109736\")]\n+    pub fn into_inner(mut this: Self) -> Result<T, F> {\n+        let state = this.once.state();\n+        match state {\n+            ExclusiveState::Poisoned => panic!(\"LazyLock instance has previously been poisoned\"),\n+            state => {\n+                let this = ManuallyDrop::new(this);\n+                let data = unsafe { ptr::read(&this.data) }.into_inner();\n+                match state {\n+                    ExclusiveState::Incomplete => Err(ManuallyDrop::into_inner(unsafe { data.f })),\n+                    ExclusiveState::Complete => Ok(ManuallyDrop::into_inner(unsafe { data.value })),\n+                    ExclusiveState::Poisoned => unreachable!(),\n+                }\n+            }\n+        }\n+    }\n+\n     /// Forces the evaluation of this lazy value and\n     /// returns a reference to result. This is equivalent\n     /// to the `Deref` impl, but is explicit."}]}