{"sha": "79993e63a080c5472c1dabe222d827c2ac254708", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTkzZTYzYTA4MGM1NDcyYzFkYWJlMjIyZDgyN2MyYWMyNTQ3MDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-13T10:58:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-13T10:58:25Z"}, "message": "rustup (part 1/2)", "tree": {"sha": "dd081d1a62ad768d13b36e254c2adbb1dd5572c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd081d1a62ad768d13b36e254c2adbb1dd5572c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79993e63a080c5472c1dabe222d827c2ac254708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79993e63a080c5472c1dabe222d827c2ac254708", "html_url": "https://github.com/rust-lang/rust/commit/79993e63a080c5472c1dabe222d827c2ac254708", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79993e63a080c5472c1dabe222d827c2ac254708/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d3e3b34880232c606ae8fcce4c410e60fb544d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d3e3b34880232c606ae8fcce4c410e60fb544d", "html_url": "https://github.com/rust-lang/rust/commit/d5d3e3b34880232c606ae8fcce4c410e60fb544d"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "f9a771c7af7c2176507b785fa5c47314240bd0a4", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=79993e63a080c5472c1dabe222d827c2ac254708", "patch": "@@ -60,14 +60,12 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             TyUint(UintTy::U128) => Ok(PrimVal::Bytes(v)),\n \n             TyInt(IntTy::Is) => {\n-                let int_ty = self.tcx.sess.target.int_type;\n-                let ty = self.tcx.mk_mach_int(int_ty);\n+                let ty = self.tcx.types.isize;\n                 self.cast_from_int(v, ty, negative)\n             }\n \n             TyUint(UintTy::Us) => {\n-                let uint_ty = self.tcx.sess.target.uint_type;\n-                let ty = self.tcx.mk_mach_uint(uint_ty);\n+                let ty = self.tcx.types.usize;\n                 self.cast_from_int(v, ty, negative)\n             }\n "}, {"sha": "c6483ff178333f7ad60f02e1fd52dff1ad9e5627", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=79993e63a080c5472c1dabe222d827c2ac254708", "patch": "@@ -92,7 +92,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyInt(IntTy::I64) => ConstInt::I64(prim as i128 as i64),\n         TyInt(IntTy::I128) => ConstInt::I128(prim as i128),\n         TyInt(IntTy::Is) => ConstInt::Isize(\n-            ConstIsize::new(prim as i128 as i64, tcx.sess.target.int_type)\n+            ConstIsize::new(prim as i128 as i64, tcx.sess.target.isize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n         TyUint(UintTy::U8) => ConstInt::U8(prim as u8),\n@@ -101,7 +101,7 @@ pub fn eval_body_as_integer<'a, 'tcx>(\n         TyUint(UintTy::U64) => ConstInt::U64(prim as u64),\n         TyUint(UintTy::U128) => ConstInt::U128(prim),\n         TyUint(UintTy::Us) => ConstInt::Usize(\n-            ConstUsize::new(prim as u64, tcx.sess.target.uint_type)\n+            ConstUsize::new(prim as u64, tcx.sess.target.usize_ty)\n                 .expect(\"miri should already have errored\"),\n         ),\n         _ => {"}, {"sha": "231bfa92ccd7cd0f4f1d9262bc9d1e834e19be45", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=79993e63a080c5472c1dabe222d827c2ac254708", "patch": "@@ -245,12 +245,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n \n             Variant(_) => unimplemented!(),\n-            Struct(_) => unimplemented!(),\n-            Tuple(_) => unimplemented!(),\n             // function items are zero sized and thus have no readable value\n             Function(..) => PrimVal::Undef,\n-            Array(_) => unimplemented!(),\n-            Repeat(_, _) => unimplemented!(),\n         };\n \n         Ok(Value::ByVal(primval))\n@@ -817,7 +813,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n             Repeat(ref operand, _) => {\n                 let (elem_ty, length) = match dest_ty.sty {\n-                    ty::TyArray(elem_ty, n) => (elem_ty, n as u64),\n+                    ty::TyArray(elem_ty, n) => (elem_ty, n.val.to_const_int().unwrap().to_u64().unwrap()),\n                     _ => {\n                         bug!(\n                             \"tried to assign array-repeat to non-array type {:?}\",\n@@ -1920,7 +1916,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let ptr = src.into_ptr(&self.memory)?;\n                 // u64 cast is from usize to u64, which is always good\n                 let valty = ValTy {\n-                    value: ptr.to_value_with_len(length as u64),\n+                    value: ptr.to_value_with_len(length.val.to_const_int().unwrap().to_u64().unwrap() ),\n                     ty: dest_ty,\n                 };\n                 self.write_value(valty, dest)"}, {"sha": "ba0f5fafa747f81d909fd72f4cdf9c83282a40ee", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=79993e63a080c5472c1dabe222d827c2ac254708", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> Lvalue {\n \n     pub(super) fn elem_ty_and_len(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n         match ty.sty {\n-            ty::TyArray(elem, n) => (elem, n as u64),\n+            ty::TyArray(elem, n) => (elem, n.val.to_const_int().unwrap().to_u64().unwrap() as u64),\n \n             ty::TySlice(elem) => {\n                 match self {\n@@ -266,7 +266,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 let field = field_index as u64;\n                 let elem_size = match base_ty.sty {\n                     ty::TyArray(elem_ty, n) => {\n-                        assert!(field < n as u64);\n+                        assert!(field < n.val.to_const_int().unwrap().to_u64().unwrap() as u64);\n                         self.type_size(elem_ty)?.expect(\"array elements are sized\") as u64\n                     }\n                     _ => {"}, {"sha": "1f9de6785fd2546c1602d22f8f0d5d1afe384ee2", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79993e63a080c5472c1dabe222d827c2ac254708/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=79993e63a080c5472c1dabe222d827c2ac254708", "patch": "@@ -525,6 +525,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 Ok(())\n             }\n             TyArray(elem_ty, len) => {\n+                let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n                 for i in 0..len {\n                     let inner_lvalue = self.lvalue_index(query.lval, query.ty, i as u64)?;\n                     self.validate("}]}