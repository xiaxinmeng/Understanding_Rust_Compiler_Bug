{"sha": "9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTYxMmY3ZWViNDc1N2ZjNWJlOGNiMzc3YTljMWU4NDBhMjMxYjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:06:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:52Z"}, "message": "move resolve to dvec, remove unnecessary mut annotations", "tree": {"sha": "5b9fce41156a5fa871b1805edc766b6533f9e194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b9fce41156a5fa871b1805edc766b6533f9e194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "html_url": "https://github.com/rust-lang/rust/commit/9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be612f7eeb4757fc5be8cb377a9c1e840a231b3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594e01d007bf83ab90380614653cf8e2a3a4cb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/594e01d007bf83ab90380614653cf8e2a3a4cb99", "html_url": "https://github.com/rust-lang/rust/commit/594e01d007bf83ab90380614653cf8e2a3a4cb99"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "6c75e470c0a839ccac0a12ca4a997c94d1699909", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9be612f7eeb4757fc5be8cb377a9c1e840a231b3/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be612f7eeb4757fc5be8cb377a9c1e840a231b3/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=9be612f7eeb4757fc5be8cb377a9c1e840a231b3", "patch": "@@ -100,7 +100,7 @@ type glob_imp_def = {def: def, path: @ast::view_path};\n type indexed_mod = {\n     m: option<ast::_mod>,\n     index: mod_index,\n-    mut glob_imports: [glob_imp_def],\n+    glob_imports: dvec<glob_imp_def>,\n     mut globbed_exports: [ident],\n     glob_imported_names: hashmap<str, glob_import_state>,\n     path: str\n@@ -123,7 +123,7 @@ type env =\n      def_map: def_map,\n      ast_map: ast_map::map,\n      imports: hashmap<node_id, import_state>,\n-     mut exp_map: exp_map,\n+     exp_map: exp_map,\n      mod_map: hashmap<node_id, @indexed_mod>,\n      block_map: hashmap<node_id, [glob_imp_def]>,\n      ext_map: ext_map,\n@@ -132,7 +132,7 @@ type env =\n      ext_cache: ext_hash,\n      used_imports: {mut track: bool,\n                     mut data: [node_id]},\n-     mut reported: [{ident: str, sc: scope}],\n+     reported: dvec<{ident: str, sc: scope}>,\n      mut ignored_imports: [node_id],\n      mut current_tp: option<uint>,\n      mut resolve_unexported: bool,\n@@ -174,15 +174,15 @@ fn create_env(sess: session, amap: ast_map::map) -> @env {\n       def_map: int_hash(),\n       ast_map: amap,\n       imports: int_hash(),\n-      mut exp_map: int_hash(),\n+      exp_map: int_hash(),\n       mod_map: int_hash(),\n       block_map: int_hash(),\n       ext_map: new_def_hash(),\n       impl_map: int_hash(),\n       impl_cache: new_def_hash(),\n       ext_cache: new_ext_hash(),\n       used_imports: {mut track: false, mut data:  []},\n-      mut reported: [],\n+      reported: dvec(),\n       mut ignored_imports: [],\n       mut current_tp: none,\n       mut resolve_unexported: false,\n@@ -270,7 +270,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n             e.mod_map.insert(i.id,\n                              @{m: some(md),\n                                index: index_mod(md),\n-                               mut glob_imports: [],\n+                               glob_imports: dvec(),\n                                mut globbed_exports: [],\n                                glob_imported_names: str_hash(),\n                                path: path_from_scope(sc, i.ident)});\n@@ -279,7 +279,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n             e.mod_map.insert(i.id,\n                              @{m: none::<ast::_mod>,\n                                index: index_nmod(nmd),\n-                               mut glob_imports: [],\n+                               glob_imports: dvec(),\n                                mut globbed_exports: [],\n                                glob_imported_names: str_hash(),\n                                path: path_from_scope(sc, i.ident)});\n@@ -301,7 +301,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                     let glob = {def: imp, path: vp};\n                     alt list::head(sc) {\n                       scope_item(i) {\n-                        e.mod_map.get(i.id).glob_imports += [glob];\n+                        e.mod_map.get(i.id).glob_imports.push(glob);\n                       }\n                       scope_block(b, _, _) {\n                         let globs = alt e.block_map.find(b.node.id) {\n@@ -311,8 +311,8 @@ fn map_crate(e: @env, c: @ast::crate) {\n                         e.block_map.insert(b.node.id, globs);\n                       }\n                       scope_crate {\n-                        e.mod_map.get(ast::crate_node_id).glob_imports\n-                            += [glob];\n+                        e.mod_map.get(ast::crate_node_id).\n+                            glob_imports.push(glob);\n                       }\n                       _ { e.sess.span_bug(vi.span, \"unexpected scope in a \\\n                                                     glob import\"); }\n@@ -338,7 +338,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n     e.mod_map.insert(ast::crate_node_id,\n                      @{m: some(c.node.module),\n                        index: index_mod(c.node.module),\n-                       mut glob_imports: [],\n+                       glob_imports: dvec(),\n                        mut globbed_exports: [],\n                        glob_imported_names: str_hash(),\n                        path: \"\"});\n@@ -899,7 +899,7 @@ fn unresolved_err(e: env, cx: ctxt, sp: span, name: ident, kind: str) {\n             for e.reported.each {|rs|\n                 if str::eq(rs.ident, name) && err_scope == rs.sc { ret; }\n             }\n-            e.reported += [{ident: name, sc: err_scope}];\n+            e.reported.push({ident: name, sc: err_scope});\n           }\n           _ {}\n         }\n@@ -1536,7 +1536,7 @@ fn lookup_glob_in_mod(e: env, info: @indexed_mod, sp: span, id: ident,\n     // absence takes the place of todo()\n     if !info.glob_imported_names.contains_key(id) {\n         info.glob_imported_names.insert(id, glob_resolving(sp));\n-        let globs = info.glob_imports;\n+        let globs = info.glob_imports.get();\n         let val = lookup_in_globs(e, globs, sp, id, ns_val, dr);\n         let typ = lookup_in_globs(e, globs, sp, id, ns_type, dr);\n         let md = lookup_in_globs(e, globs, sp, id, ns_module, dr);"}]}