{"sha": "4193f2da2d3553162af383dbeaf5f8ef5908dafd", "node_id": "C_kwDOAAsO6NoAKDQxOTNmMmRhMmQzNTUzMTYyYWYzODNkYmVhZjVmOGVmNTkwOGRhZmQ", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2021-12-09T01:09:17Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2022-01-11T21:44:03Z"}, "message": "rustdoc: do not emit tuple variant fields if none are documented", "tree": {"sha": "b6f06f32ba46c2ee4cc67d8bc84ee5bd1a754b95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6f06f32ba46c2ee4cc67d8bc84ee5bd1a754b95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4193f2da2d3553162af383dbeaf5f8ef5908dafd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAmHd+iQWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdK3IB/45f7wWrPA6XnuFYLuDdjDQ1n6p\nHdmpTgFs7QCsRWFWqPQbSxrLj7DFp5Nr9JjMYmSCaHDSSdpsALk9YSdSn2P+ZuZ+\nlySg+F0XFFWUnTZur98HbrO8il30YPcex/i6ixt05X4msmOzkwreN/EtThTpYWbZ\nuIk1eD2TldCw2HA82ydGtFKalqQUIOaHcBPS1H8z1nUZmnaqxmNOEkYdlT3TgnYy\nHj7UyoghEQVwnXZaqHhBUau1PR/n2A/gmERd++hP0ezi69tPlBcp3G3vaGGELEnP\ng9mRS/ISsMmNyXWVEYJhhBgyti+DJkJtsppDNUOFUnzORPHRrYN9yuslnibG\n=+Feb\n-----END PGP SIGNATURE-----", "payload": "tree b6f06f32ba46c2ee4cc67d8bc84ee5bd1a754b95\nparent 89b9f7b284aacc5f8613438b80e4dd7bdd10549e\nauthor Andy Russell <arussell123@gmail.com> 1639012157 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1641937443 -0500\n\nrustdoc: do not emit tuple variant fields if none are documented\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4193f2da2d3553162af383dbeaf5f8ef5908dafd", "html_url": "https://github.com/rust-lang/rust/commit/4193f2da2d3553162af383dbeaf5f8ef5908dafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4193f2da2d3553162af383dbeaf5f8ef5908dafd/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "html_url": "https://github.com/rust-lang/rust/commit/89b9f7b284aacc5f8613438b80e4dd7bdd10549e"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "f954123067700de250bec98ed515297b43d1fff6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4193f2da2d3553162af383dbeaf5f8ef5908dafd", "patch": "@@ -1133,18 +1133,27 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\"</h3>\");\n \n             use crate::clean::Variant;\n-            if let Some((extra, fields)) = match *variant.kind {\n-                clean::VariantItem(Variant::Struct(ref s)) => Some((\"\", &s.fields)),\n-                clean::VariantItem(Variant::Tuple(ref fields)) => Some((\"Tuple \", fields)),\n+\n+            let heading_and_fields = match &*variant.kind {\n+                clean::VariantItem(Variant::Struct(s)) => Some((\"Fields\", &s.fields)),\n+                // Documentation on tuple variant fields is rare, so to reduce noise we only emit\n+                // the section if at least one field is documented.\n+                clean::VariantItem(Variant::Tuple(fields))\n+                    if fields.iter().any(|f| f.doc_value().is_some()) =>\n+                {\n+                    Some((\"Tuple Fields\", fields))\n+                }\n                 _ => None,\n-            } {\n+            };\n+\n+            if let Some((heading, fields)) = heading_and_fields {\n                 let variant_id = cx.derive_id(format!(\n                     \"{}.{}.fields\",\n                     ItemType::Variant,\n                     variant.name.as_ref().unwrap()\n                 ));\n                 write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n-                write!(w, \"<h4>{extra}Fields</h4>\", extra = extra,);\n+                write!(w, \"<h4>{heading}</h4>\", heading = heading);\n                 document_non_exhaustive(w, variant);\n                 for field in fields {\n                     match *field.kind {"}, {"sha": "fc63ed343bda27cefb52a6258acb6b23c557af8e", "filename": "src/test/rustdoc/issue-88600.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Ftest%2Frustdoc%2Fissue-88600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-88600.rs?ref=4193f2da2d3553162af383dbeaf5f8ef5908dafd", "patch": "@@ -18,17 +18,18 @@ pub enum FooEnum {\n     // @has - '//*[@id=\"variant.MixedHiddenFirst\"]//code' 'MixedHiddenFirst(_, S)'\n     // @count - '//*[@id=\"variant.MixedHiddenFirst.field.0\"]' 0\n     // @has - '//*[@id=\"variant.MixedHiddenFirst.field.1\"]' '1: S'\n-    MixedHiddenFirst(#[doc(hidden)] H, S),\n+    MixedHiddenFirst(#[doc(hidden)] H, /** dox */ S),\n     // @has - '//*[@id=\"variant.MixedHiddenLast\"]//code' 'MixedHiddenLast(S, _)'\n     // @has - '//*[@id=\"variant.MixedHiddenLast.field.0\"]' '0: S'\n     // @count - '//*[@id=\"variant.MixedHiddenLast.field.1\"]' 0\n-    MixedHiddenLast(S, #[doc(hidden)] H),\n+    MixedHiddenLast(/** dox */ S, #[doc(hidden)] H),\n     // @has - '//*[@id=\"variant.HiddenStruct\"]//code' 'HiddenStruct'\n     // @count - '//*[@id=\"variant.HiddenStruct.field.h\"]' 0\n     // @has - '//*[@id=\"variant.HiddenStruct.field.s\"]' 's: S'\n     HiddenStruct {\n         #[doc(hidden)]\n         h: H,\n+        /// dox\n         s: S,\n     },\n }"}, {"sha": "31426131bc2c1897312145ebd8d418413138468a", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4193f2da2d3553162af383dbeaf5f8ef5908dafd/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=4193f2da2d3553162af383dbeaf5f8ef5908dafd", "patch": "@@ -24,6 +24,9 @@ pub struct Foo(\n // @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n // @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'\n // @matches - '//*[@id=\"variant.FooVariant.fields\"]/h4' '^Fields$'\n+// @has - '//*[@id=\"variant.BazVariant.fields\"]//*[@class=\"docblock\"]' 'dox'\n+// @has - '//*[@id=\"variant.OtherVariant.fields\"]//*[@class=\"docblock\"]' 'dox'\n+// @!matches - '//*[@id=\"variant.QuuxVariant.fields\"]/h4' '^Tuple Fields$'\n pub enum Bar {\n     BarVariant(\n         /// Hello docs\n@@ -33,4 +36,15 @@ pub enum Bar {\n        /// hello\n        x: u32,\n     },\n+    BazVariant(\n+        String,\n+        /// dox\n+        u32,\n+    ),\n+    OtherVariant(\n+        /// dox\n+        String,\n+        u32,\n+    ),\n+    QuuxVariant(String),\n }"}]}