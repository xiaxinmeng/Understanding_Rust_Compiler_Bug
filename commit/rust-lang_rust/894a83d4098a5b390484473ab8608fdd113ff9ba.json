{"sha": "894a83d4098a5b390484473ab8608fdd113ff9ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NGE4M2Q0MDk4YTViMzkwNDg0NDczYWI4NjA4ZmRkMTEzZmY5YmE=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-30T04:38:02Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>\nCo-Authored-By: Oliver Scherer <github35764891676564198441@oli-obk.de>", "tree": {"sha": "0623f8cc3139446c5e67ecec9680b23ed2d246c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0623f8cc3139446c5e67ecec9680b23ed2d246c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/894a83d4098a5b390484473ab8608fdd113ff9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/894a83d4098a5b390484473ab8608fdd113ff9ba", "html_url": "https://github.com/rust-lang/rust/commit/894a83d4098a5b390484473ab8608fdd113ff9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/894a83d4098a5b390484473ab8608fdd113ff9ba/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b1d6000a0095c81aeabee22f09f38110960415b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1d6000a0095c81aeabee22f09f38110960415b", "html_url": "https://github.com/rust-lang/rust/commit/5b1d6000a0095c81aeabee22f09f38110960415b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ac05b3b1ff498648296b5ddbd261f1f6a821ebfc", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/894a83d4098a5b390484473ab8608fdd113ff9ba/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894a83d4098a5b390484473ab8608fdd113ff9ba/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=894a83d4098a5b390484473ab8608fdd113ff9ba", "patch": "@@ -48,7 +48,7 @@ macro_rules! try_validation {\n /// as a kind of validation blacklist:\n ///\n /// ```rust\n-/// let v = try_validation_pat(some_fn(), Foo | Bar | Baz, \"some failure\", \"some place\");\n+/// let v = try_validation_pat(some_fn(), Foo | Bar | Baz, \"some failure\", path);\n /// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n /// // unchanged.\n /// ```\n@@ -59,7 +59,7 @@ macro_rules! try_validation_pat {\n             // We catch the error and turn it into a validation failure. We are okay with\n             // allocation here as this can only slow down builds that fail anyway.\n             $( Err($p) )|* if true => throw_validation_failure!($what, $where $(, $details)?),\n-            Err(e) =>  Err::<!, _>(e)?,\n+            Err(e) => Err::<!, _>(e)?,\n         }\n     }};\n }\n@@ -843,10 +843,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n-            // Allow validation failures to be returned.\n+            // Pass through validation failures.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n-            // Also allow InvalidProgram to be returned, because it's likely that different callers\n-            // will want to do different things in this situation.\n+            // Also pass through InvalidProgram, those just indicate that we could not\n+            // validate and each caller will know best what to do with them.\n             Err(err) if matches!(err.kind, InterpError::InvalidProgram(_)) => Err(err),\n             // Avoid other errors as those do not show *where* in the value the issue lies.\n             Err(err) => bug!(\"Unexpected error during validation: {}\", err),"}]}