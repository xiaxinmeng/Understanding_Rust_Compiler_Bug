{"sha": "f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmVmM2IwOGJmYWZjYjllZTM1YTBkZjY0Yjc2MTJkN2MyODE2ZmQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-16T18:52:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-16T18:52:55Z"}, "message": "Merge pull request #691 from RalfJung/pragmatic-ptr-eq\n\nbe pragmatic about ptr-int comparisons, for now", "tree": {"sha": "219d4083867816e7bc8400ed2c34c0536c54fad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219d4083867816e7bc8400ed2c34c0536c54fad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctiSHCRBK7hj4Ov3rIwAAdHIIACxojV/cV9PvcfQC4yGgY51R\nyFvXaZl6Fjvg1Y77hXiMfHuQwaoz7haoc+ZL9OryaPvuvEcnlbsf5+RxSxLt/+nh\nPugjkmhaF+I8PrwRae46JOK/ly8zg9Ys0JyDyI7WPhT6xrcQrJgcfPtv+9bexrSo\n3EMQamcB7pnyosNGWvLnD8SbohnEWLrK1bpfI7HNMW606lYX/UC6nbYgApnFfCDg\nusQrifrLkFUoE1QHpHx+S6ocCbOSnPg0fzH05BYhDO/wbDKsfYPiSGLSXzIOrBDc\nh/6SdhYkmiPcXnOnyd74AwdzIJ4RAtxrKrWwaNZfSFuFQMV2tqIzBrIWbsqTuvE=\n=ivsG\n-----END PGP SIGNATURE-----\n", "payload": "tree 219d4083867816e7bc8400ed2c34c0536c54fad3\nparent 7c06679f93df53f83bbf61b197f2e5c39f5d7633\nparent af2b42de0a43c0bf656e290e73a431acd033e79d\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1555440775 +0200\ncommitter GitHub <noreply@github.com> 1555440775 +0200\n\nMerge pull request #691 from RalfJung/pragmatic-ptr-eq\n\nbe pragmatic about ptr-int comparisons, for now"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "html_url": "https://github.com/rust-lang/rust/commit/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c06679f93df53f83bbf61b197f2e5c39f5d7633", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c06679f93df53f83bbf61b197f2e5c39f5d7633", "html_url": "https://github.com/rust-lang/rust/commit/7c06679f93df53f83bbf61b197f2e5c39f5d7633"}, {"sha": "af2b42de0a43c0bf656e290e73a431acd033e79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2b42de0a43c0bf656e290e73a431acd033e79d", "html_url": "https://github.com/rust-lang/rust/commit/af2b42de0a43c0bf656e290e73a431acd033e79d"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "45c0e63542dc2fda8b7c7d39fc49b614bf2e186c", "filename": "src/operator.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "patch": "@@ -152,8 +152,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // This accepts one-past-the end. Thus, there is still technically\n                     // some non-determinism that we do not fully rule out when two\n                     // allocations sit right next to each other. The C/C++ standards are\n-                    // somewhat fuzzy about this case, so I think for now this check is\n-                    // \"good enough\".\n+                    // somewhat fuzzy about this case, so pragmatically speaking I think\n+                    // for now this check is \"good enough\".\n+                    // FIXME: Once we support intptrcast, we could try to fix these holes.\n                     // Dead allocations in miri cannot overlap with live allocations, but\n                     // on read hardware this can easily happen. Thus for comparisons we require\n                     // both pointers to be live.\n@@ -169,8 +170,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n                 let bits = bits as u64;\n \n-                // Case I: Comparing with NULL.\n-                if bits == 0 {\n+                // Case I: Comparing real pointers with \"small\" integers.\n+                // Really we should only do this for NULL, but pragmatically speaking on non-bare-metal systems,\n+                // an allocation will never be at the very bottom of the address space.\n+                // Such comparisons can arise when comparing empty slices, which sometimes are \"fake\"\n+                // integer pointers (okay because the slice is empty) and sometimes point into a\n+                // real allocation.\n+                // The most common source of such integer pointers is `NonNull::dangling()`, which\n+                // equals the type's alignment. i128 might have an alignment of 16 bytes, but few types have\n+                // alignment 32 or higher, hence the limit of 32.\n+                // FIXME: Once we support intptrcast, we could try to fix these holes.\n+                if bits < 32 {\n                     // Test if the ptr is in-bounds. Then it cannot be NULL.\n                     // Even dangling pointers cannot be NULL.\n                     if self.memory().check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok() {"}, {"sha": "396abaf4493b13c961e5c82c38c0db5758c98548", "filename": "tests/compile-fail/ptr_eq_integer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/tests%2Fcompile-fail%2Fptr_eq_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_eq_integer.rs?ref=f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "patch": "@@ -1,8 +1,6 @@\n-use std::mem;\n-\n fn main() {\n     let b = Box::new(0);\n     let x = &*b as *const i32;\n     // We cannot compare this with a non-NULL integer. After all, these *could* be equal (with the right base address).\n-    assert!(x != mem::align_of::<i32>() as *const i32); //~ ERROR invalid arithmetic on pointers\n+    assert!(x != 64 as *const i32); //~ ERROR invalid arithmetic on pointers\n }"}, {"sha": "739def804975d7ae95533de43291c983ba8bf489", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=f6fef3b08bfafcb9ee35a0df64b7612d7c2816fd", "patch": "@@ -85,4 +85,8 @@ fn main() {\n     assert_eq!(make_vec_macro(), [1, 2]);\n     assert_eq!(make_vec_macro_repeat(), [42; 5]);\n     assert_eq!(make_vec_macro_repeat_zeroed(), [0; 7]);\n+\n+    // Test interesting empty slice comparison\n+    // (one is a real pointer, one an integer pointer).\n+    assert_eq!((200..-5).step_by(1).collect::<Vec<isize>>(), []);\n }"}]}