{"sha": "d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1M2U0MTNlMDRlNDM4ZmQwZGMxYThiMWE4ZGNiMDdhMDc3NDA5MmE=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-04-02T04:21:12Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-04-15T19:06:19Z"}, "message": "update :vis implementation to current rust", "tree": {"sha": "da424b0fa885a5220711cdd0884aace6dbc68272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da424b0fa885a5220711cdd0884aace6dbc68272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "html_url": "https://github.com/rust-lang/rust/commit/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2489495d909c43cfbefaeb79db6a77b13908257", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2489495d909c43cfbefaeb79db6a77b13908257", "html_url": "https://github.com/rust-lang/rust/commit/a2489495d909c43cfbefaeb79db6a77b13908257"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "f888e29bdabb491deaf2b1ad966cc3db9d9748ec", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "patch": "@@ -793,13 +793,13 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n             \"vis\" => {\n                 // Explicitly disallow `priv`, on the off chance it comes back.\n                 match *tok {\n-                    Comma => Ok(true),\n-                    ModSep => Ok(true),\n-                    MatchNt(_, ref frag, _, _) => {\n-                        let name = frag.name.as_str();\n-                        Ok(name == \"ident\" || name == \"ty\")\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        Comma => Ok(true),\n+                        ModSep => Ok(true),\n+                        Ident(i) if i.name != \"priv\" => Ok(true),\n+                        _ => Ok(false)\n                     },\n-                    Ident(i, _) if i.name.as_str() != \"priv\" => Ok(true),\n+                    TokenTree::MetaVarDecl(_, _, frag) if frag.name ==\"ident\" || frag.name == \"ty\" => Ok(true),\n                     _ => Ok(false)\n                 }\n             },"}, {"sha": "11becd58293baabff7e39da1c93eea2b44af800b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "patch": "@@ -5056,7 +5056,7 @@ impl<'a> Parser<'a> {\n     /// and `pub(super)` for `pub(in super)`.  If the following element can't be a tuple (i.e. it's\n     /// a function definition, it's not a tuple struct field) and the contents within the parens\n     /// isn't valid, emit a proper diagnostic.\n-    fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n+    pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         if !self.eat_keyword(keywords::Pub) {\n             return Ok(Visibility::Inherited)\n         }"}, {"sha": "7de9cc6bf21d7a96030d05e2ccbca5e865543ff3", "filename": "src/test/run-pass/macro-pub-matcher.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d53e413e04e438fd0dc1a8b1a8dcb07a0774092a/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs?ref=d53e413e04e438fd0dc1a8b1a8dcb07a0774092a", "patch": "@@ -1,5 +1,4 @@\n #![allow(dead_code, unused_imports)]\n-#![feature(pub_restricted)]\n \n /**\n Ensure that `:vis` matches can be captured in existing positions, and passed\n@@ -56,15 +55,15 @@ mod with_pub_restricted {\n \n mod garden {\n     mod with_pub_restricted_path {\n-        vis_passthru! { pub(::garden) const A: i32 = 0; }\n-        vis_passthru! { pub(::garden) enum B {} }\n-        vis_passthru! { pub(::garden) extern \"C\" fn c() {} }\n-        vis_passthru! { pub(::garden) mod d {} }\n-        vis_passthru! { pub(::garden) static E: i32 = 0; }\n-        vis_passthru! { pub(::garden) struct F; }\n-        vis_passthru! { pub(::garden) trait G {} }\n-        vis_passthru! { pub(::garden) type H = i32; }\n-        vis_passthru! { pub(::garden) use A as I; }\n+        vis_passthru! { pub(in garden) const A: i32 = 0; }\n+        vis_passthru! { pub(in garden) enum B {} }\n+        vis_passthru! { pub(in garden) extern \"C\" fn c() {} }\n+        vis_passthru! { pub(in garden) mod d {} }\n+        vis_passthru! { pub(in garden) static E: i32 = 0; }\n+        vis_passthru! { pub(in garden) struct F; }\n+        vis_passthru! { pub(in garden) trait G {} }\n+        vis_passthru! { pub(in garden) type H = i32; }\n+        vis_passthru! { pub(in garden) use A as I; }\n     }\n }\n "}]}