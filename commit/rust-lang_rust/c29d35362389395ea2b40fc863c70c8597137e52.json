{"sha": "c29d35362389395ea2b40fc863c70c8597137e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWQzNTM2MjM4OTM5NWVhMmI0MGZjODYzYzcwYzg1OTcxMzdlNTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-07T17:57:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-07T17:57:48Z"}, "message": "Merge #7191\n\n7191: Adjust vfs crate documentation r=matklad a=arnaudgolfouse\n\nThis removes an outdated comment, and uses intra-doc links\n\nCo-authored-by: Arnaud <arnaud.golfouse@free.fr>", "tree": {"sha": "072e4deaca31197df0aabc5f9ee09569bba7e379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072e4deaca31197df0aabc5f9ee09569bba7e379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29d35362389395ea2b40fc863c70c8597137e52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf90ucCRBK7hj4Ov3rIwAAdHIIAH5JJNZ+CpNqkwVqgYzycYka\nVwlrNhyyA1wmWPVBV3R5sfZeaIRIJnGxbxRpaFVfSnJ7U4GMoo07JJNxEDOPxPAR\nDi2FrSu10OWJSHKlngU7WrVuEtIpHbaGImRTJsmPGufSxLC1B65uvyUSnAIpHydD\nWGITh9l8c7BZvP9u+2XSdOtPiMA8IaWlBZSRELq0Awm+9jVmqLz75jIY2Jgp+U4P\nSdGwm3mvMM6KwgXax9semHTqRLnCwaIhgb3mhyrJCMGNO48ZF+l8vBImUNxWQg/t\nT6Sj7rnQLQ//nTWLrv21hNSYOsHywWqE9m2bmJL0/uNal3ExCMUpUMwOJ3jnG3g=\n=NHA8\n-----END PGP SIGNATURE-----\n", "payload": "tree 072e4deaca31197df0aabc5f9ee09569bba7e379\nparent 2d2613b481aa099a0e9d55aa0afc783141b36c4d\nparent d216d718bf545052d77968688861f83861a0225b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610042268 +0000\ncommitter GitHub <noreply@github.com> 1610042268 +0000\n\nMerge #7191\n\n7191: Adjust vfs crate documentation r=matklad a=arnaudgolfouse\n\nThis removes an outdated comment, and uses intra-doc links\n\nCo-authored-by: Arnaud <arnaud.golfouse@free.fr>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29d35362389395ea2b40fc863c70c8597137e52", "html_url": "https://github.com/rust-lang/rust/commit/c29d35362389395ea2b40fc863c70c8597137e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29d35362389395ea2b40fc863c70c8597137e52/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2613b481aa099a0e9d55aa0afc783141b36c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2613b481aa099a0e9d55aa0afc783141b36c4d", "html_url": "https://github.com/rust-lang/rust/commit/2d2613b481aa099a0e9d55aa0afc783141b36c4d"}, {"sha": "d216d718bf545052d77968688861f83861a0225b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d216d718bf545052d77968688861f83861a0225b", "html_url": "https://github.com/rust-lang/rust/commit/d216d718bf545052d77968688861f83861a0225b"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "2b7b14524fd0355eb8a5e37007427975928eeb6a", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c29d35362389395ea2b40fc863c70c8597137e52/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29d35362389395ea2b40fc863c70c8597137e52/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=c29d35362389395ea2b40fc863c70c8597137e52", "patch": "@@ -2,43 +2,46 @@\n //!\n //! VFS stores all files read by rust-analyzer. Reading file contents from VFS\n //! always returns the same contents, unless VFS was explicitly modified with\n-//! `set_file_contents`. All changes to VFS are logged, and can be retrieved via\n-//! `take_changes` method. The pack of changes is then pushed to `salsa` and\n+//! [`set_file_contents`]. All changes to VFS are logged, and can be retrieved via\n+//! [`take_changes`] method. The pack of changes is then pushed to `salsa` and\n //! triggers incremental recomputation.\n //!\n-//! Files in VFS are identified with `FileId`s -- interned paths. The notion of\n-//! the path, `VfsPath` is somewhat abstract: at the moment, it is represented\n-//! as an `std::path::PathBuf` internally, but this is an implementation detail.\n+//! Files in VFS are identified with [`FileId`]s -- interned paths. The notion of\n+//! the path, [`VfsPath`] is somewhat abstract: at the moment, it is represented\n+//! as an [`std::path::PathBuf`] internally, but this is an implementation detail.\n //!\n-//! VFS doesn't do IO or file watching itself. For that, see the `loader`\n-//! module. `loader::Handle` is an object-safe trait which abstracts both file\n-//! loading and file watching. `Handle` is dynamically configured with a set of\n-//! directory entries which should be scanned and watched. `Handle` then\n+//! VFS doesn't do IO or file watching itself. For that, see the [`loader`]\n+//! module. [`loader::Handle`] is an object-safe trait which abstracts both file\n+//! loading and file watching. [`Handle`] is dynamically configured with a set of\n+//! directory entries which should be scanned and watched. [`Handle`] then\n //! asynchronously pushes file changes. Directory entries are configured in\n-//! free-form via list of globs, it's up to the `Handle` to interpret the globs\n+//! free-form via list of globs, it's up to the [`Handle`] to interpret the globs\n //! in any specific way.\n //!\n-//! A simple `WalkdirLoaderHandle` is provided, which doesn't implement watching\n-//! and just scans the directory using walkdir.\n-//!\n-//! VFS stores a flat list of files. `FileSet` can partition this list of files\n-//! into disjoint sets of files. Traversal-like operations (including getting\n-//! the neighbor file by the relative path) are handled by the `FileSet`.\n-//! `FileSet`s are also pushed to salsa and cause it to re-check `mod foo;`\n+//! VFS stores a flat list of files. [`file_set::FileSet`] can partition this list\n+//! of files into disjoint sets of files. Traversal-like operations (including\n+//! getting the neighbor file by the relative path) are handled by the [`FileSet`].\n+//! [`FileSet`]s are also pushed to salsa and cause it to re-check `mod foo;`\n //! declarations when files are created or deleted.\n //!\n-//! `file_set::FileSet` and `loader::Entry` play similar, but different roles.\n+//! [`FileSet`] and [`loader::Entry`] play similar, but different roles.\n //! Both specify the \"set of paths/files\", one is geared towards file watching,\n-//! the other towards salsa changes. In particular, single `file_set::FileSet`\n-//! may correspond to several `loader::Entry`. For example, a crate from\n-//! crates.io which uses code generation would have two `Entries` -- for sources\n+//! the other towards salsa changes. In particular, single [`FileSet`]\n+//! may correspond to several [`loader::Entry`]. For example, a crate from\n+//! crates.io which uses code generation would have two [`Entries`] -- for sources\n //! in `~/.cargo`, and for generated code in `./target/debug/build`. It will\n-//! have a single `FileSet` which unions the two sources.\n-mod vfs_path;\n-mod path_interner;\n+//! have a single [`FileSet`] which unions the two sources.\n+//!\n+//! [`set_file_contents`]: Vfs::set_file_contents\n+//! [`take_changes`]: Vfs::take_changes\n+//! [`FileSet`]: file_set::FileSet\n+//! [`Handle`]: loader::Handle\n+//! [`Entries`]: loader::Entry\n mod anchored_path;\n pub mod file_set;\n pub mod loader;\n+mod path_interner;\n+mod vfs_path;\n \n use std::{fmt, mem};\n "}]}