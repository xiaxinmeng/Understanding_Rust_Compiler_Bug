{"sha": "db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "node_id": "C_kwDOAAsO6NoAKGRiN2Q4Mzc0YzFiNmYxZTJlODI5N2Y0M2U2YTJjYmZmZWZmMjE4ODI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-06-15T20:04:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T20:04:55Z"}, "message": "Rollup merge of #112517 - fee1-dead-contrib:sus-op-no-borrow, r=compiler-errors\n\n`suspicious_double_ref_op`: don't lint on `.borrow()`\n\ncloses #112489", "tree": {"sha": "e770a1b8eebbea854cf6511a900ac7fadbf811cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e770a1b8eebbea854cf6511a900ac7fadbf811cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJki27nCRBK7hj4Ov3rIwAAjv8IAFdlmDb2we2uxH87gvIfZVZ0\n3CBgrcI4gGQQu0jf5oSTia57PJM0fcY4bpwX0DywDdsE4qrAbpDmw++GtunBvuo1\n5v4jfwkaI5JIFz2z2Qk52uScDedYgpgxhd4zO0nkRFCvnSIYZWp+jSoYp3Lu6GLY\nMw6HXoMvFHXHeymYzEX5lJ/WRwu0mJk4y3+J/dnNMK5Fa5lSX07mBcEC7UfAzjj+\nindhZ5ilivIYkAhpgt7OC5H9vF6+GbJebK5Qona6qzCmAwO2NJRCF26VDQ2HVdoa\nALTJYV42/4S0GuyZA7ls4c9oRou2maMIoTHB4Xyegyxx3vftro93bANAhn9UjNE=\n=TEFk\n-----END PGP SIGNATURE-----\n", "payload": "tree e770a1b8eebbea854cf6511a900ac7fadbf811cc\nparent ab314a57fa6141d1c5436fb6dbb500adbde3e64b\nparent 1caed5167369cf026f4159b4011cbd55f5c39ccd\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1686859495 +0200\ncommitter GitHub <noreply@github.com> 1686859495 +0200\n\nRollup merge of #112517 - fee1-dead-contrib:sus-op-no-borrow, r=compiler-errors\n\n`suspicious_double_ref_op`: don't lint on `.borrow()`\n\ncloses #112489\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "html_url": "https://github.com/rust-lang/rust/commit/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab314a57fa6141d1c5436fb6dbb500adbde3e64b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab314a57fa6141d1c5436fb6dbb500adbde3e64b", "html_url": "https://github.com/rust-lang/rust/commit/ab314a57fa6141d1c5436fb6dbb500adbde3e64b"}, {"sha": "1caed5167369cf026f4159b4011cbd55f5c39ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1caed5167369cf026f4159b4011cbd55f5c39ccd", "html_url": "https://github.com/rust-lang/rust/commit/1caed5167369cf026f4159b4011cbd55f5c39ccd"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "34b7e09576af5f79014e60645ffcfffbc756f5f9", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "patch": "@@ -479,13 +479,11 @@ lint_requested_level = requested on the command line with `{$level} {$lint_name}\n lint_supertrait_as_deref_target = `{$t}` implements `Deref` with supertrait `{$target_principal}` as target\n     .label = target type is set here\n \n-lint_suspicious_double_ref_op =\n-    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n-        *[should_not_happen] [{$op}]\n-        [deref] dereferencing\n-        [borrow] borrowing\n-        [clone] cloning\n-    } the inner type\n+lint_suspicious_double_ref_clone =\n+    using `.clone()` on a double reference, which returns `{$ty}` instead of cloning the inner type\n+\n+lint_suspicious_double_ref_deref =\n+    using `.deref()` on a double reference, which returns `{$ty}` instead of dereferencing the inner type\n \n lint_trivial_untranslatable_diag = diagnostic with static strings only\n "}, {"sha": "2a17389f247b730ab6d297bed948a431bad0058a", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "patch": "@@ -1231,11 +1231,15 @@ pub struct NoopMethodCallDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_suspicious_double_ref_op)]\n-pub struct SuspiciousDoubleRefDiag<'a> {\n-    pub call: Symbol,\n+#[diag(lint_suspicious_double_ref_deref)]\n+pub struct SuspiciousDoubleRefDerefDiag<'a> {\n+    pub ty: Ty<'a>,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_clone)]\n+pub struct SuspiciousDoubleRefCloneDiag<'a> {\n     pub ty: Ty<'a>,\n-    pub op: &'static str,\n }\n \n // pass_by_value.rs"}, {"sha": "d56c35bb677a5ab88d4388d18139b48658fade2a", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "patch": "@@ -1,5 +1,7 @@\n use crate::context::LintContext;\n-use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n+use crate::lints::{\n+    NoopMethodCallDiag, SuspiciousDoubleRefCloneDiag, SuspiciousDoubleRefDerefDiag,\n+};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n@@ -76,22 +78,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n \n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n-        let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n-            // Verify we are dealing with a method/associated function.\n-            Some((DefKind::AssocFn, did)) => match cx.tcx.trait_of_item(did) {\n-                // Check that we're dealing with a trait method for one of the traits we care about.\n-                Some(trait_id)\n-                    if matches!(\n-                        cx.tcx.get_diagnostic_name(trait_id),\n-                        Some(sym::Borrow | sym::Clone | sym::Deref)\n-                    ) =>\n-                {\n-                    did\n-                }\n-                _ => return,\n-            },\n-            _ => return,\n+\n+        let Some((DefKind::AssocFn, did)) =\n+            cx.typeck_results().type_dependent_def(expr.hir_id)\n+        else {\n+            return;\n+        };\n+\n+        let Some(trait_id) = cx.tcx.trait_of_item(did) else { return };\n+\n+        if !matches!(\n+            cx.tcx.get_diagnostic_name(trait_id),\n+            Some(sym::Borrow | sym::Clone | sym::Deref)\n+        ) {\n+            return;\n         };\n+\n         let substs = cx\n             .tcx\n             .normalize_erasing_regions(cx.param_env, cx.typeck_results().node_substs(expr.hir_id));\n@@ -102,13 +104,6 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n \n-        let op = match name {\n-            sym::noop_method_borrow => \"borrow\",\n-            sym::noop_method_clone => \"clone\",\n-            sym::noop_method_deref => \"deref\",\n-            _ => return,\n-        };\n-\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n         let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n@@ -129,11 +124,22 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n                 NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n             );\n         } else {\n-            cx.emit_spanned_lint(\n-                SUSPICIOUS_DOUBLE_REF_OP,\n-                span,\n-                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n-            )\n+            match name {\n+                // If `type_of(x) == T` and `x.borrow()` is used to get `&T`,\n+                // then that should be allowed\n+                sym::noop_method_borrow => return,\n+                sym::noop_method_clone => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefCloneDiag { ty: expr_ty },\n+                ),\n+                sym::noop_method_deref => cx.emit_spanned_lint(\n+                    SUSPICIOUS_DOUBLE_REF_OP,\n+                    span,\n+                    SuspiciousDoubleRefDerefDiag { ty: expr_ty },\n+                ),\n+                _ => return,\n+            }\n         }\n     }\n }"}, {"sha": "559edf0e4f23caffd685063a3a932661bbad6020", "filename": "tests/ui/lint/issue-112489.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/tests%2Fui%2Flint%2Fissue-112489.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db7d8374c1b6f1e2e8297f43e6a2cbffeff21882/tests%2Fui%2Flint%2Fissue-112489.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-112489.rs?ref=db7d8374c1b6f1e2e8297f43e6a2cbffeff21882", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+use std::borrow::Borrow;\n+\n+struct S;\n+\n+trait T: Sized {\n+    fn foo(self) {}\n+}\n+\n+impl T for S {}\n+impl T for &S {}\n+\n+fn main() {\n+    let s = S;\n+    s.borrow().foo();\n+    s.foo();\n+}"}]}