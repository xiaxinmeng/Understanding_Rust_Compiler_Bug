{"sha": "60bf2f192678337a7e8dcb5cebf6c17762707466", "node_id": "C_kwDOAAsO6NoAKDYwYmYyZjE5MjY3ODMzN2E3ZThkY2I1Y2ViZjZjMTc3NjI3MDc0NjY", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-10-29T15:15:45Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-10-29T15:15:45Z"}, "message": "Add a few query descriptions", "tree": {"sha": "51918a03bd7e03aea463f9e7fb3afd3d80dcbe91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51918a03bd7e03aea463f9e7fb3afd3d80dcbe91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60bf2f192678337a7e8dcb5cebf6c17762707466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60bf2f192678337a7e8dcb5cebf6c17762707466", "html_url": "https://github.com/rust-lang/rust/commit/60bf2f192678337a7e8dcb5cebf6c17762707466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60bf2f192678337a7e8dcb5cebf6c17762707466/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f70a0e1e04086aee7ae57fbefd6d4071953506", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f70a0e1e04086aee7ae57fbefd6d4071953506", "html_url": "https://github.com/rust-lang/rust/commit/37f70a0e1e04086aee7ae57fbefd6d4071953506"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "06041bbb02d355537240c012aefb6835520036d4", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60bf2f192678337a7e8dcb5cebf6c17762707466/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60bf2f192678337a7e8dcb5cebf6c17762707466/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=60bf2f192678337a7e8dcb5cebf6c17762707466", "patch": "@@ -687,12 +687,13 @@ rustc_queries! {\n         desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    /// The signature of functions.\n+    /// Computes the signature of the function.\n     query fn_sig(key: DefId) -> ty::PolyFnSig<'tcx> {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n         separate_provide_extern\n     }\n \n+    /// Performs lint checking for the module.\n     query lint_mod(key: LocalDefId) -> () {\n         desc { |tcx| \"linting {}\", describe_as_module(key, tcx) }\n     }\n@@ -702,6 +703,7 @@ rustc_queries! {\n         desc { |tcx| \"checking attributes in {}\", describe_as_module(key, tcx) }\n     }\n \n+    /// Checks for uses of unstable APIs in the module.\n     query check_mod_unstable_api_usage(key: LocalDefId) -> () {\n         desc { |tcx| \"checking for unstable API usage in {}\", describe_as_module(key, tcx) }\n     }\n@@ -928,6 +930,7 @@ rustc_queries! {\n         desc { |tcx| \"computing drop scopes for `{}`\", tcx.def_path_str(def_id) }\n     }\n \n+    /// Generates a MIR body for the shim.\n     query mir_shims(key: ty::InstanceDef<'tcx>) -> mir::Body<'tcx> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n@@ -946,11 +949,13 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Gets the span for the definition.\n     query def_span(def_id: DefId) -> Span {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n \n+    /// Gets the span for the identifier of the definition.\n     query def_ident_span(def_id: DefId) -> Option<Span> {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n@@ -1466,6 +1471,8 @@ rustc_queries! {\n         desc { \"fetching what a dependency looks like\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the name of the crate.\n     query crate_name(_: CrateNum) -> Symbol {\n         eval_always\n         desc { \"fetching what a crate is named\" }"}]}