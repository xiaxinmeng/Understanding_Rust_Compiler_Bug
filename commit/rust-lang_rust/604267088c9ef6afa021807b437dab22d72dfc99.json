{"sha": "604267088c9ef6afa021807b437dab22d72dfc99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDI2NzA4OGM5ZWY2YWZhMDIxODA3YjQzN2RhYjIyZDcyZGZjOTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-16T19:48:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-16T19:48:48Z"}, "message": "internal: add iterator to minicore", "tree": {"sha": "a98a495f7d24f943541f50c8d21f22ff3460729d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a98a495f7d24f943541f50c8d21f22ff3460729d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604267088c9ef6afa021807b437dab22d72dfc99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604267088c9ef6afa021807b437dab22d72dfc99", "html_url": "https://github.com/rust-lang/rust/commit/604267088c9ef6afa021807b437dab22d72dfc99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604267088c9ef6afa021807b437dab22d72dfc99/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba5482a04e2534890b85cf832616a08c1b1bf21", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5482a04e2534890b85cf832616a08c1b1bf21", "html_url": "https://github.com/rust-lang/rust/commit/7ba5482a04e2534890b85cf832616a08c1b1bf21"}], "stats": {"total": 77, "additions": 38, "deletions": 39}, "files": [{"sha": "e0ad41fb96e726045c26c8dac2bddb1c0d961c64", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/604267088c9ef6afa021807b437dab22d72dfc99/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604267088c9ef6afa021807b437dab22d72dfc99/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=604267088c9ef6afa021807b437dab22d72dfc99", "patch": "@@ -418,48 +418,17 @@ fn issue_2705() {\n fn issue_2683_chars_impl() {\n     check_types(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- minicore: iterator\n+pub struct Chars<'a> {}\n+impl<'a> Iterator for Chars<'a> {\n+    type Item = char;\n+    fn next(&mut self) -> Option<char> {}\n+}\n+\n fn test() {\n-    let chars: std::str::Chars<'_>;\n+    let chars: Chars<'_>;\n     (chars.next(), chars.nth(1));\n } //^ (Option<char>, Option<char>)\n-\n-//- /std.rs crate:std\n-#[prelude_import]\n-use self::prelude::rust_2018::*;\n-pub mod prelude {\n-    pub mod rust_2018 {\n-        pub use crate::iter::Iterator;\n-        pub use crate::option::Option;\n-    }\n-}\n-\n-pub mod iter {\n-    pub use self::traits::Iterator;\n-    pub mod traits {\n-        pub use self::iterator::Iterator;\n-\n-        pub mod iterator {\n-            pub trait Iterator {\n-                type Item;\n-                fn next(&mut self) -> Option<Self::Item>;\n-                fn nth(&mut self, n: usize) -> Option<Self::Item> {}\n-            }\n-        }\n-    }\n-}\n-\n-pub mod option {\n-    pub enum Option<T> {}\n-}\n-\n-pub mod str {\n-    pub struct Chars<'a> {}\n-    impl<'a> Iterator for Chars<'a> {\n-        type Item = char;\n-        fn next(&mut self) -> Option<char> {}\n-    }\n-}\n \"#,\n     );\n }"}, {"sha": "011d460beb5823dd1f945f6ca927ec922ace2899", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/604267088c9ef6afa021807b437dab22d72dfc99/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604267088c9ef6afa021807b437dab22d72dfc99/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=604267088c9ef6afa021807b437dab22d72dfc99", "patch": "@@ -20,6 +20,7 @@\n //!     future: pin\n //!     option:\n //!     result:\n+//!     iterator: option\n \n pub mod marker {\n     // region:sized\n@@ -206,9 +207,38 @@ pub mod task {\n }\n // endregion:future\n \n+// region:iterator\n+pub mod iter {\n+    mod traits {\n+        mod iterator {\n+            pub trait Iterator {\n+                type Item;\n+                #[lang = \"next\"]\n+                fn next(&mut self) -> Option<Self::Item>;\n+                fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+                    loop {}\n+                }\n+            }\n+        }\n+        mod collect {\n+            pub trait IntoIterator {\n+                type Item;\n+                type IntoIter: Iterator<Item = Self::Item>;\n+                #[lang = \"into_iter\"]\n+                fn into_iter(self) -> Self::IntoIter;\n+            }\n+        }\n+        pub use self::collect::IntoIterator;\n+        pub use self::iterator::Iterator;\n+    }\n+    pub use self::traits::{IntoIterator, Iterator};\n+}\n+// endregion:iterator\n+\n pub mod prelude {\n     pub mod v1 {\n         pub use crate::{\n+            iter::{IntoIterator, Iterator},     // :iterator\n             marker::Sized,                      // :sized\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option"}]}