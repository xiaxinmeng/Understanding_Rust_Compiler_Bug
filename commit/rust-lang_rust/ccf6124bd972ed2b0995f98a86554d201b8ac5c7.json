{"sha": "ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "node_id": "C_kwDOAAsO6NoAKGNjZjYxMjRiZDk3MmVkMmIwOTk1Zjk4YTg2NTU0ZDIwMWI4YWM1Yzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-12T09:35:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-12T09:40:54Z"}, "message": "Fix erroneous span for borrowck error", "tree": {"sha": "5c3dcebf2f117811c74da42d3d6f62e04a3208b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3dcebf2f117811c74da42d3d6f62e04a3208b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "html_url": "https://github.com/rust-lang/rust/commit/ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37a42258ffe02cfb7107380759e492c64500ab55", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a42258ffe02cfb7107380759e492c64500ab55", "html_url": "https://github.com/rust-lang/rust/commit/37a42258ffe02cfb7107380759e492c64500ab55"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "8075032c9066e0a11843422d8312a346321401e4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "patch": "@@ -357,12 +357,20 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 .add_element(live_region_vid, location);\n         });\n \n+        // HACK(compiler-errors): Constants that are gathered into Body.required_consts\n+        // have their locations erased...\n+        let locations = if location != Location::START {\n+            location.to_locations()\n+        } else {\n+            Locations::All(constant.span)\n+        };\n+\n         if let Some(annotation_index) = constant.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 constant.literal.ty(),\n                 ty::Variance::Invariant,\n                 &UserTypeProjection { base: annotation_index, projs: vec![] },\n-                location.to_locations(),\n+                locations,\n                 ConstraintCategory::Boring,\n             ) {\n                 let annotation = &self.cx.user_type_annotations[annotation_index];\n@@ -390,12 +398,9 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                                      promoted: &Body<'tcx>,\n                                      ty,\n                                      san_ty| {\n-                        if let Err(terr) = verifier.cx.eq_types(\n-                            ty,\n-                            san_ty,\n-                            location.to_locations(),\n-                            ConstraintCategory::Boring,\n-                        ) {\n+                        if let Err(terr) =\n+                            verifier.cx.eq_types(ty, san_ty, locations, ConstraintCategory::Boring)\n+                        {\n                             span_mirbug!(\n                                 verifier,\n                                 promoted,\n@@ -416,7 +421,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                     }\n                 } else {\n                     if let Err(terr) = self.cx.fully_perform_op(\n-                        location.to_locations(),\n+                        locations,\n                         ConstraintCategory::Boring,\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n                             constant.literal.ty(),\n@@ -435,7 +440,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 }\n             } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {\n                 let unnormalized_ty = tcx.type_of(static_def_id);\n-                let locations = location.to_locations();\n                 let normalized_ty = self.cx.normalize(unnormalized_ty, locations);\n                 let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;\n \n@@ -454,7 +458,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     def_id,\n                     instantiated_predicates,\n-                    location.to_locations(),\n+                    locations,\n                 );\n             }\n         }"}, {"sha": "b4312091edb279f9a987b73efe3e97634be548aa", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "patch": "@@ -2,7 +2,7 @@ error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n LL |     want_hrtb::<StaticInt>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n    |\n    = note: `StaticInt` must implement `Foo<&'0 isize>`, for any lifetime `'0`...\n    = note: ...but it actually implements `Foo<&'static isize>`"}, {"sha": "c64e720b12f7f49bab8872566b4bcba5de396656", "filename": "src/test/ui/nll/issue-97997.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fnll%2Fissue-97997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fnll%2Fissue-97997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-97997.rs?ref=ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "patch": "@@ -0,0 +1,16 @@\n+trait Foo {\n+    const ASSOC: bool = true;\n+}\n+impl<T> Foo for fn(T) {}\n+\n+fn foo(_x: i32) {}\n+\n+fn impls_foo<T: Foo>(_x: T) {}\n+\n+fn main() {\n+    impls_foo(foo as fn(i32));\n+\n+    <fn(&u8) as Foo>::ASSOC;\n+    //~^ ERROR implementation of `Foo` is not general enough\n+    //~| ERROR implementation of `Foo` is not general enough\n+}"}, {"sha": "78401bbf6540aad7849d0f675487218c131ab152", "filename": "src/test/ui/nll/issue-97997.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccf6124bd972ed2b0995f98a86554d201b8ac5c7/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-97997.stderr?ref=ccf6124bd972ed2b0995f98a86554d201b8ac5c7", "patch": "@@ -0,0 +1,20 @@\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/issue-97997.rs:13:5\n+   |\n+LL |     <fn(&u8) as Foo>::ASSOC;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r u8)`\n+   = note: ...but `Foo` is actually implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n+\n+error: implementation of `Foo` is not general enough\n+  --> $DIR/issue-97997.rs:13:5\n+   |\n+LL |     <fn(&u8) as Foo>::ASSOC;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n+   |\n+   = note: `Foo` would have to be implemented for the type `for<'r> fn(&'r u8)`\n+   = note: ...but `Foo` is actually implemented for the type `fn(&'0 u8)`, for some specific lifetime `'0`\n+\n+error: aborting due to 2 previous errors\n+"}]}