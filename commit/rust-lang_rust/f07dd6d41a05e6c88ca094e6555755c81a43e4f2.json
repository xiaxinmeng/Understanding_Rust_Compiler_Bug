{"sha": "f07dd6d41a05e6c88ca094e6555755c81a43e4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwN2RkNmQ0MWEwNWU2Yzg4Y2EwOTRlNjU1NTc1NWM4MWE0M2U0ZjI=", "commit": {"author": {"name": "Ryan Levick", "email": "ryan.levick@gmail.com", "date": "2020-12-18T11:27:36Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-17T11:45:48Z"}, "message": "Remove dead code", "tree": {"sha": "755a99fbd0b5bb589c7fc643588b5390db70cf3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755a99fbd0b5bb589c7fc643588b5390db70cf3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07dd6d41a05e6c88ca094e6555755c81a43e4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07dd6d41a05e6c88ca094e6555755c81a43e4f2", "html_url": "https://github.com/rust-lang/rust/commit/f07dd6d41a05e6c88ca094e6555755c81a43e4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07dd6d41a05e6c88ca094e6555755c81a43e4f2/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95cbcad920d602cb7319e819e7ebc3cf56c20cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/95cbcad920d602cb7319e819e7ebc3cf56c20cd7", "html_url": "https://github.com/rust-lang/rust/commit/95cbcad920d602cb7319e819e7ebc3cf56c20cd7"}], "stats": {"total": 30, "additions": 1, "deletions": 29}, "files": [{"sha": "e8c711cae64ef30498a941651ee4ef2003623c55", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f07dd6d41a05e6c88ca094e6555755c81a43e4f2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07dd6d41a05e6c88ca094e6555755c81a43e4f2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=f07dd6d41a05e6c88ca094e6555755c81a43e4f2", "patch": "@@ -56,36 +56,11 @@ crate fn annotate_err_with_kind(\n     };\n }\n \n-/// Instead of e.g. `vec![a, b, c]` in a pattern context, suggest `[a, b, c]`.\n-fn suggest_slice_pat(e: &mut DiagnosticBuilder<'_>, site_span: Span, parser: &Parser<'_>) {\n-    let mut suggestion = None;\n-    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n-        if let Some(bang) = code.find('!') {\n-            suggestion = Some(code[bang + 1..].to_string());\n-        }\n-    }\n-    if let Some(suggestion) = suggestion {\n-        e.span_suggestion(\n-            site_span,\n-            \"use a slice pattern here instead\",\n-            suggestion,\n-            Applicability::MachineApplicable,\n-        );\n-    } else {\n-        e.span_label(site_span, \"use a slice pattern here instead\");\n-    }\n-    e.help(\n-        \"for more information, see https://doc.rust-lang.org/edition-guide/\\\n-        rust-2018/slice-patterns.html\",\n-    );\n-}\n-\n fn emit_frag_parse_err(\n     mut e: DiagnosticBuilder<'_>,\n     parser: &Parser<'_>,\n     orig_parser: &mut Parser<'_>,\n     site_span: Span,\n-    macro_ident: Ident,\n     arm_span: Span,\n     kind: AstFragmentKind,\n ) {\n@@ -113,9 +88,6 @@ fn emit_frag_parse_err(\n         e.span_label(site_span, \"in this macro invocation\");\n     }\n     match kind {\n-        AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n-            suggest_slice_pat(&mut e, site_span, parser);\n-        }\n         // Try a statement if an expression is wanted but failed and suggest adding `;` to call.\n         AstFragmentKind::Expr => match parse_ast_fragment(orig_parser, AstFragmentKind::Stmts) {\n             Err(mut err) => err.cancel(),\n@@ -143,7 +115,7 @@ impl<'a> ParserAnyMacro<'a> {\n         let fragment = match parse_ast_fragment(parser, kind) {\n             Ok(f) => f,\n             Err(err) => {\n-                emit_frag_parse_err(err, parser, snapshot, site_span, macro_ident, arm_span, kind);\n+                emit_frag_parse_err(err, parser, snapshot, site_span, arm_span, kind);\n                 return kind.dummy(site_span);\n             }\n         };"}]}