{"sha": "73ad8df70d94d318fea0df3079504bd23e5b4901", "node_id": "C_kwDOAAsO6NoAKDczYWQ4ZGY3MGQ5NGQzMThmZWEwZGYzMDc5NTA0YmQyM2U1YjQ5MDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T01:55:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T02:13:53Z"}, "message": "Deduplicate lines in long const-eval stack trace", "tree": {"sha": "be092ba6e237133fdfe7a304b2d51f935cccd164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be092ba6e237133fdfe7a304b2d51f935cccd164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ad8df70d94d318fea0df3079504bd23e5b4901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ad8df70d94d318fea0df3079504bd23e5b4901", "html_url": "https://github.com/rust-lang/rust/commit/73ad8df70d94d318fea0df3079504bd23e5b4901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ad8df70d94d318fea0df3079504bd23e5b4901/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa4ac66c194046f631ce076c75516ecfdeb77ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa4ac66c194046f631ce076c75516ecfdeb77ee", "html_url": "https://github.com/rust-lang/rust/commit/cfa4ac66c194046f631ce076c75516ecfdeb77ee"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "89a0f8245e5fb7e36b23433e5320f6d11b39ee25", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/73ad8df70d94d318fea0df3079504bd23e5b4901/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ad8df70d94d318fea0df3079504bd23e5b4901/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=73ad8df70d94d318fea0df3079504bd23e5b4901", "patch": "@@ -156,9 +156,37 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             }\n             // Add spans for the stacktrace. Don't print a single-line backtrace though.\n             if self.stacktrace.len() > 1 {\n+                // Helper closure to print duplicated lines.\n+                let mut flush_last_line = |last_frame, times| {\n+                    if let Some((line, span)) = last_frame {\n+                        err.span_label(span, &line);\n+                        // Don't print [... additional calls ...] if the number of lines is small\n+                        if times < 3 {\n+                            for _ in 0..times {\n+                                err.span_label(span, &line);\n+                            }\n+                        } else {\n+                            err.span_label(\n+                                span,\n+                                format!(\"[... {} additional calls {} ...]\", times, &line),\n+                            );\n+                        }\n+                    }\n+                };\n+\n+                let mut last_frame = None;\n+                let mut times = 0;\n                 for frame_info in &self.stacktrace {\n-                    err.span_label(frame_info.span, frame_info.to_string());\n+                    let frame = (frame_info.to_string(), frame_info.span);\n+                    if last_frame.as_ref() == Some(&frame) {\n+                        times += 1;\n+                    } else {\n+                        flush_last_line(last_frame, times);\n+                        last_frame = Some(frame);\n+                        times = 0;\n+                    }\n                 }\n+                flush_last_line(last_frame, times);\n             }\n             // Let the caller finish the job.\n             emit(err)"}, {"sha": "664940c52cfc5bf33bbda2c28886fae66e6033ba", "filename": "src/test/ui/consts/recursive.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73ad8df70d94d318fea0df3079504bd23e5b4901/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ad8df70d94d318fea0df3079504bd23e5b4901/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.rs?ref=73ad8df70d94d318fea0df3079504bd23e5b4901", "patch": "@@ -0,0 +1,11 @@\n+#![allow(unused)]\n+\n+const fn f<T>(x: T) { //~ WARN function cannot return without recursing\n+    f(x);\n+    //~^ ERROR any use of this value will cause an error\n+    //~| WARN this was previously accepted by the compiler\n+}\n+\n+const X: () = f(1);\n+\n+fn main() {}"}, {"sha": "31ac1fff4e84e1506bfc618353fddee29025a6b8", "filename": "src/test/ui/consts/recursive.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/73ad8df70d94d318fea0df3079504bd23e5b4901/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73ad8df70d94d318fea0df3079504bd23e5b4901/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=73ad8df70d94d318fea0df3079504bd23e5b4901", "patch": "@@ -0,0 +1,31 @@\n+warning: function cannot return without recursing\n+  --> $DIR/recursive.rs:3:1\n+   |\n+LL | const fn f<T>(x: T) {\n+   | ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n+LL |     f(x);\n+   |     ---- recursive call site\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error: any use of this value will cause an error\n+  --> $DIR/recursive.rs:4:5\n+   |\n+LL |     f(x);\n+   |     ^^^^\n+   |     |\n+   |     reached the configured maximum number of stack frames\n+   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n+   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `X` at $DIR/recursive.rs:9:15\n+...\n+LL | const X: () = f(1);\n+   | -------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}