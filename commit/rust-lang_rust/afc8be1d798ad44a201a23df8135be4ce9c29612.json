{"sha": "afc8be1d798ad44a201a23df8135be4ce9c29612", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYzhiZTFkNzk4YWQ0NGEyMDFhMjNkZjgxMzViZTRjZTljMjk2MTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-09T06:40:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-11T21:23:37Z"}, "message": "Change the logic around breaking multiple patterns in match arms\n\nRefactor to use the list code, don't preserve original stacking-ness, base vertical vs mixed formatting on complexity of the patterns.\n\nCloses #386", "tree": {"sha": "258aaa56358ec75572cef439035f3a4d967b0331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/258aaa56358ec75572cef439035f3a4d967b0331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afc8be1d798ad44a201a23df8135be4ce9c29612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afc8be1d798ad44a201a23df8135be4ce9c29612", "html_url": "https://github.com/rust-lang/rust/commit/afc8be1d798ad44a201a23df8135be4ce9c29612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afc8be1d798ad44a201a23df8135be4ce9c29612/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492b26cf04b62ff372d5af4ba99e5d5f49079fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/492b26cf04b62ff372d5af4ba99e5d5f49079fba", "html_url": "https://github.com/rust-lang/rust/commit/492b26cf04b62ff372d5af4ba99e5d5f49079fba"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "bd01492d74e9f04ab9027b71d12c2d581f6c3720", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -87,7 +87,8 @@ impl Density {\n     pub fn to_list_tactic(self) -> ListTactic {\n         match self {\n             Density::Compressed => ListTactic::Mixed,\n-            Density::Tall | Density::CompressedIfEmpty => ListTactic::HorizontalVertical,\n+            Density::Tall |\n+            Density::CompressedIfEmpty => ListTactic::HorizontalVertical,\n             Density::Vertical => ListTactic::Vertical,\n         }\n     }"}, {"sha": "8befc1adbe159b201ca3ee0c45efe298276814e3", "filename": "src/expr.rs", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -497,7 +497,8 @@ impl Rewrite for ast::Stmt {\n                     None\n                 }\n             }\n-            ast::StmtKind::Expr(ref ex, _) | ast::StmtKind::Semi(ref ex, _) => {\n+            ast::StmtKind::Expr(ref ex, _) |\n+            ast::StmtKind::Semi(ref ex, _) => {\n                 let suffix = if semicolon_for_stmt(self) {\n                     \";\"\n                 } else {\n@@ -953,7 +954,6 @@ fn arm_comma(config: &Config, arm: &ast::Arm, body: &ast::Expr) -> &'static str\n impl Rewrite for ast::Arm {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         let &ast::Arm { ref attrs, ref pats, ref guard, ref body } = self;\n-        let indent_str = offset.to_string(context.config);\n \n         // FIXME this is all a bit grotty, would be nice to abstract out the\n         // treatment of attributes.\n@@ -980,38 +980,34 @@ impl Rewrite for ast::Arm {\n                                     .map(|p| p.rewrite(context, pat_budget, offset))\n                                     .collect::<Option<Vec<_>>>());\n \n-        let mut total_width = pat_strs.iter().fold(0, |a, p| a + p.len());\n-        // Add ` | `.len().\n-        total_width += (pat_strs.len() - 1) * 3;\n-\n-        let mut vertical = total_width > pat_budget || pat_strs.iter().any(|p| p.contains('\\n'));\n-        if !vertical && context.config.take_source_hints {\n-            // If the patterns were previously stacked, keep them stacked.\n-            let pat_span = mk_sp(pats[0].span.lo, pats[pats.len() - 1].span.hi);\n-            let pat_str = context.snippet(pat_span);\n-            vertical = pat_str.contains('\\n');\n-        }\n+        let all_simple = pat_strs.iter().all(|p| pat_is_simple(&p));\n+        let items: Vec<_> = pat_strs.into_iter().map(|s| ListItem::from_str(s)).collect();\n+        let fmt = ListFormatting {\n+            tactic: if all_simple {\n+                DefinitiveListTactic::Mixed\n+            } else {\n+                DefinitiveListTactic::Vertical\n+            },\n+            separator: \" |\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: offset,\n+            width: pat_budget,\n+            ends_with_newline: false,\n+            config: context.config,\n+        };\n+        let pats_str = try_opt!(write_list(items, &fmt));\n \n-        let pats_width = if vertical {\n-            pat_strs.last().unwrap().len()\n+        let budget = if pats_str.contains('\\n') {\n+            context.config.max_width\n         } else {\n-            total_width\n+            width\n         };\n \n-        let mut pats_str = String::new();\n-        for p in pat_strs {\n-            if !pats_str.is_empty() {\n-                if vertical {\n-                    pats_str.push_str(\" |\\n\");\n-                    pats_str.push_str(&indent_str);\n-                } else {\n-                    pats_str.push_str(\" | \");\n-                }\n-            }\n-            pats_str.push_str(&p);\n-        }\n-\n-        let guard_str = try_opt!(rewrite_guard(context, guard, width, offset, pats_width));\n+        let guard_str = try_opt!(rewrite_guard(context,\n+                                               guard,\n+                                               budget,\n+                                               offset,\n+                                               last_line_width(&pats_str)));\n \n         let pats_str = format!(\"{}{}\", pats_str, guard_str);\n         // Where the next text can start.\n@@ -1085,6 +1081,11 @@ impl Rewrite for ast::Arm {\n     }\n }\n \n+fn pat_is_simple(pat_str: &str) -> bool {\n+    pat_str.len() <= 16 ||\n+    (pat_str.len() <= 24 && pat_str.chars().all(|c| c.is_alphabetic() || c == ':'))\n+}\n+\n // The `if ...` guard on a match arm.\n fn rewrite_guard(context: &RewriteContext,\n                  guard: &Option<ptr::P<ast::Expr>>,"}, {"sha": "2be271e140b8ca836a0effe3f784d26dd77f6be0", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -58,7 +58,8 @@ pub fn rewrite_macro(mac: &ast::Mac,\n                      -> Option<String> {\n     let original_style = macro_style(mac, context);\n     let macro_name = match extra_ident {\n-        None | Some(ast::Ident { name: ast::Name(0), .. }) => format!(\"{}!\", mac.node.path),\n+        None |\n+        Some(ast::Ident { name: ast::Name(0), .. }) => format!(\"{}!\", mac.node.path),\n         Some(ident) => format!(\"{}! {}\", mac.node.path, ident),\n     };\n     let style = if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {"}, {"sha": "51bebc409e09ed3c8f85ec15c7ed5bcc4a532973", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -552,7 +552,8 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::BareFn(ref bare_fn) => {\n                 rewrite_bare_fn(bare_fn, self.span, context, width, offset)\n             }\n-            ast::TyKind::Mac(..) | ast::TyKind::Typeof(..) => unreachable!(),\n+            ast::TyKind::Mac(..) |\n+            ast::TyKind::Typeof(..) => unreachable!(),\n         }\n     }\n }"}, {"sha": "cc97c2289f015c98bb123c73e8b3e7f2787bc482", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -46,7 +46,8 @@ impl<'a> FmtVisitor<'a> {\n                     self.push_rewrite(stmt.span, rewrite);\n                 }\n             }\n-            ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n+            ast::StmtKind::Expr(..) |\n+            ast::StmtKind::Semi(..) => {\n                 let rewrite = stmt.rewrite(&self.get_context(),\n                                            self.config.max_width - self.block_indent.width(),\n                                            self.block_indent);"}, {"sha": "6e8418f66d2d5acb3c128fabc9b8f7938e5587a5", "filename": "tests/source/match.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -274,3 +274,13 @@ fn issue494() {\n         }\n     }\n }\n+\n+fn issue386() {\n+    match foo {\n+        BiEq | BiLt | BiLe | BiNe | BiGt | BiGe =>\n+                    true,\n+        BiAnd | BiOr | BiAdd | BiSub | BiMul | BiDiv | BiRem |\n+        BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr =>\n+            false,\n+    }\n+}"}, {"sha": "3bc675aa3d9277cfc177cf62365997ce260358cc", "filename": "tests/target/match.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afc8be1d798ad44a201a23df8135be4ce9c29612/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afc8be1d798ad44a201a23df8135be4ce9c29612/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=afc8be1d798ad44a201a23df8135be4ce9c29612", "patch": "@@ -221,9 +221,8 @@ fn issue355() {\n fn issue280() {\n     {\n         match x {\n-            CompressionMode::DiscardNewline | CompressionMode::CompressWhitespaceNewline => {\n-                ch == '\\n'\n-            }\n+            CompressionMode::DiscardNewline |\n+            CompressionMode::CompressWhitespaceNewline => ch == '\\n',\n             ast::ItemConst(ref typ, ref expr) => {\n                 self.process_static_or_const_item(item, &typ, &expr)\n             }\n@@ -260,7 +259,8 @@ fn issue496() {\n         {\n             {\n                 match def {\n-                    def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n+                    def::DefConst(def_id) |\n+                    def::DefAssociatedConst(def_id) => {\n                         match const_eval::lookup_const_by_id(cx.tcx, def_id, Some(self.pat.id)) {\n                             Some(const_expr) => x,\n                         }\n@@ -274,7 +274,8 @@ fn issue496() {\n fn issue494() {\n     {\n         match stmt.node {\n-            hir::StmtExpr(ref expr, id) | hir::StmtSemi(ref expr, id) => {\n+            hir::StmtExpr(ref expr, id) |\n+            hir::StmtSemi(ref expr, id) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     span: stmt.span,\n                     kind: StmtKind::Expr {\n@@ -286,3 +287,11 @@ fn issue494() {\n         }\n     }\n }\n+\n+fn issue386() {\n+    match foo {\n+        BiEq | BiLt | BiLe | BiNe | BiGt | BiGe => true,\n+        BiAnd | BiOr | BiAdd | BiSub | BiMul | BiDiv | BiRem | BiBitXor | BiBitAnd | BiBitOr |\n+        BiShl | BiShr => false,\n+    }\n+}"}]}