{"sha": "a1082b9b1a9881e80210e769727867dc5c4b80f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMDgyYjliMWE5ODgxZTgwMjEwZTc2OTcyNzg2N2RjNWM0YjgwZjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T10:33:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T10:33:09Z"}, "message": "Merge remote-tracking branch 'origin/master' into oflo", "tree": {"sha": "4ac4ab33b81d995533060d0ab3c6f84a111e1166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac4ab33b81d995533060d0ab3c6f84a111e1166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1082b9b1a9881e80210e769727867dc5c4b80f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXZ8ZqAAoJEFbW7qD8Z6xGoPAP/j+DOAccTs4cOzhGTsZHkyEC\nhU0R40B9veLbbwddsvIrWg6digs0+awCSzQ1j0s07IesutIiYnitHdAddQREhu9p\n1hlmChip8jAlcrDm1V8EQY1/PXsmR5LklshGVfzZJlqEL5ie/UpAp4sWXi8IqYPm\nl7LPFPKahea1Rn+j7Z1+Yt/ckzEnoFr/b0QT7kwlJsN19b1SkrDgqdx0YB5I4+Xo\nbc+RRy6RFbe6X5kUKTdaQ2KyKU20LVHL0lzQCdaSp09qHVAtVFCqWgi/3PGASdO8\n3RNy2BA/1T3pnCV4ZU/oEzoIgcziwF0DcmbXZfVV6a4zXzlqHgcJxTYl7g2fqgNs\ntwtpyesC4Q+iy6QSn4OZ74L4RTl+MggvK3HLY8GfNo1yIg03Q4qURUlLVnmIjt5R\nSCP1YHIGaW+KULO1zZs+wAZ18qFYb0gojg0MKkxP3Gv9j52gZ3uZMUHQ51XdoFUC\n/4hZzZjnKj+Ii5gTnbSBavLcvsWWWidKc43ogDDIY5wRhOUNfQ3IKWllTGm3oUd5\nCHS2163OwlmoCc0+FaapnvzcJ3Fuzt/fX+NByGTL2V7OulgVlJ0qcNoO3AzodBUf\n2e5CJGSdz8X8/mMOTtIiiAjFLvywF+oR4n5Af8BBWu6Ui3uKTsC7P/mbwL882HhT\nuwN4a5mDOeR7hEa5YqDt\n=02QA\n-----END PGP SIGNATURE-----", "payload": "tree 4ac4ab33b81d995533060d0ab3c6f84a111e1166\nparent e90ee1674ae2fd32bc5e07a3a52562c45b273c56\nparent c9d808e85f9c7ca1957ef54ddeb04d3888bd9552\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466418789 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466418789 +0200\n\nMerge remote-tracking branch 'origin/master' into oflo\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1082b9b1a9881e80210e769727867dc5c4b80f6", "html_url": "https://github.com/rust-lang/rust/commit/a1082b9b1a9881e80210e769727867dc5c4b80f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1082b9b1a9881e80210e769727867dc5c4b80f6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "html_url": "https://github.com/rust-lang/rust/commit/e90ee1674ae2fd32bc5e07a3a52562c45b273c56"}, {"sha": "c9d808e85f9c7ca1957ef54ddeb04d3888bd9552", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d808e85f9c7ca1957ef54ddeb04d3888bd9552", "html_url": "https://github.com/rust-lang/rust/commit/c9d808e85f9c7ca1957ef54ddeb04d3888bd9552"}], "stats": {"total": 453, "additions": 227, "deletions": 226}, "files": [{"sha": "5ef63b01bdfda41d78c5a5b8547d4cda796a3f8e", "filename": "README.md", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,52 +1,58 @@\n-# Miri\n+# Miri [[slides](https://solson.me/miri-slides.pdf)] [[report](https://solson.me/miri-report.pdf)] [![Build Status](https://travis-ci.org/solson/miri.svg?branch=master)](https://travis-ci.org/solson/miri)\n \n-[[slides](https://solson.me/miri-slides.pdf)]\n-[[report](https://solson.me/miri-report.pdf)]\n \n An experimental interpreter for [Rust][rust]'s [mid-level intermediate\n representation][mir] (MIR). This project began as part of my work for the\n undergraduate research course at the [University of Saskatchewan][usask].\n \n-[![Build Status](https://travis-ci.org/solson/miri.svg?branch=master)](https://travis-ci.org/solson/miri)\n+## Installing Rust\n \n-## Download Rust nightly\n+I recommend that you install [rustup][rustup] and then use it to install the\n+current Rust nightly version:\n \n-I currently recommend that you install [multirust][multirust] and then use it to\n-install the current rustc nightly version:\n+```sh\n+rustup update nightly\n+```\n+\n+You should also make `nightly` the default version for your Miri directory by\n+running the following command while you're in it. If you don't do this, you can\n+run the later `cargo` commands by prefixing them with `rustup run nightly`.\n \n ```sh\n-multirust update nightly\n+rustup override add nightly\n ```\n \n-## Build\n+## Building Miri\n \n ```sh\n-multirust run nightly cargo build\n+cargo build\n ```\n \n If Miri fails to build, it's likely because a change in the latest nightly\n-compiler broke it. You could try an older nightly with `multirust update\n+compiler broke it. You could try an older nightly with `rustup update\n nightly-<date>` where `<date>` is a few days or weeks ago, e.g. `2016-05-20` for\n May 20th. Otherwise, you could notify me in an issue or on IRC. Or, if you know\n how to fix it, you could send a PR. :smile:\n \n-## Run a test\n+## Running tests\n \n ```sh\n-multirust run nightly cargo run -- \\\n-  --sysroot $HOME/.multirust/toolchains/nightly \\\n-  test/filename.rs\n+cargo run tests/run-pass/vecs.rs # Or whatever test you like.\n ```\n \n-If you are using [rustup][rustup] (the name of the multirust rewrite in Rust),\n-the `sysroot` path will also include your build target (e.g.\n-`$HOME/.multirust/toolchains/nightly-x86_64-apple-darwin`). You can see the\n-current toolchain's directory by running `rustup which cargo` (ignoring the\n-trailing `/bin/cargo`).\n+## Debugging\n+\n+You can get detailed, statement-by-statement traces by setting the `MIRI_RUN`\n+environment variable to `trace`. These traces are indented based on call stack\n+depth. You can get a much less verbose set of information with other logging\n+levels such as `warn`.\n+\n+## Contributing and getting help\n \n-If you installed without using multirust or rustup, you'll need to adjust the\n-command to run your cargo and set the `sysroot` to the directory where your\n-Rust compiler is installed (`$sysroot/bin/rustc` should be a valid path).\n+Check out the issues on this GitHub repository for some ideas. There's lots that\n+needs to be done that I haven't documented in the issues yet, however. For more\n+ideas or help with running or hacking on Miri, you can contact me (`scott`) on\n+Mozilla IRC in any of the Rust IRC channels (`#rust`, `#rust-offtopic`, etc).\n \n ## License\n \n@@ -65,5 +71,4 @@ additional terms or conditions.\n [rust]: https://www.rust-lang.org/\n [mir]: https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\n [usask]: https://www.usask.ca/\n-[multirust]: https://github.com/brson/multirust\n [rustup]: https://www.rustup.rs"}, {"sha": "39974ad6c18ea16606c15737199f308941212a92", "filename": "benches/fibonacci.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Ffibonacci.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Ffibonacci.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,11 +1,9 @@\n-#![feature(custom_attribute, test)]\n-#![feature(rustc_private)]\n-#![allow(unused_attributes)]\n+#![feature(test, rustc_private)]\n \n extern crate test;\n use test::Bencher;\n-\n-mod fibonacci_helper;\n+mod helpers;\n+use helpers::*;\n \n #[bench]\n fn fib(bencher: &mut Bencher) {\n@@ -14,15 +12,11 @@ fn fib(bencher: &mut Bencher) {\n     })\n }\n \n-mod miri_helper;\n-\n #[bench]\n fn fib_miri(bencher: &mut Bencher) {\n     miri_helper::run(\"fibonacci_helper\", bencher);\n }\n \n-mod fibonacci_helper_iterative;\n-\n #[bench]\n fn fib_iter(bencher: &mut Bencher) {\n     bencher.iter(|| {"}, {"sha": "004000e70ea73d84a8c2c84a24bc6cf59fbf1bd9", "filename": "benches/helpers/fibonacci_helper.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Ffibonacci_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Ffibonacci_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Ffibonacci_helper.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "previous_filename": "benches/fibonacci_helper.rs"}, {"sha": "59283be4820f718e0007d71b216a6ea1a3a1f4e5", "filename": "benches/helpers/fibonacci_helper_iterative.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Ffibonacci_helper_iterative.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "previous_filename": "benches/fibonacci_helper_iterative.rs"}, {"sha": "c8ae22e1ace5731f0cc3b5ce9681676837549ee6", "filename": "benches/helpers/miri_helper.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -0,0 +1,65 @@\n+extern crate getopts;\n+extern crate miri;\n+extern crate rustc;\n+extern crate rustc_driver;\n+extern crate test;\n+\n+use self::miri::eval_main;\n+use self::rustc::session::Session;\n+use self::rustc_driver::{driver, CompilerCalls, Compilation};\n+use std::cell::RefCell;\n+use std::rc::Rc;\n+use test::Bencher;\n+\n+pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n+\n+fn find_sysroot() -> String {\n+    // Taken from https://github.com/Manishearth/rust-clippy/pull/911.\n+    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+    match (home, toolchain) {\n+        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n+            .to_owned(),\n+    }\n+}\n+\n+pub fn run(filename: &str, bencher: &mut Bencher) {\n+    let args = &[\n+        \"miri\".to_string(),\n+        format!(\"benches/helpers/{}.rs\", filename),\n+        \"--sysroot\".to_string(),\n+        find_sysroot()\n+    ];\n+    let compiler_calls = &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher)));\n+    rustc_driver::run_compiler(args, compiler_calls);\n+}\n+\n+impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n+    fn build_controller(\n+        &mut self,\n+        _: &Session,\n+        _: &getopts::Matches\n+    ) -> driver::CompileController<'a> {\n+        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n+\n+        let bencher = self.0.clone();\n+\n+        control.after_analysis.stop = Compilation::Stop;\n+        control.after_analysis.callback = Box::new(move |state| {\n+            state.session.abort_if_errors();\n+\n+            let tcx = state.tcx.unwrap();\n+            let mir_map = state.mir_map.unwrap();\n+            let (node_id, _) = state.session.entry_fn.borrow()\n+                .expect(\"no main or start function found\");\n+\n+            bencher.borrow_mut().iter(|| { eval_main(tcx, mir_map, node_id); });\n+\n+            state.session.abort_if_errors();\n+        });\n+\n+        control\n+    }\n+}"}, {"sha": "27504a2cc034d7a308241e368a876be2de77b330", "filename": "benches/helpers/mod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmod.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -0,0 +1,7 @@\n+// This module gets included in multiple crates, and they each only use part of it.\n+#![allow(dead_code)]\n+\n+pub mod fibonacci_helper;\n+pub mod fibonacci_helper_iterative;\n+pub mod miri_helper;\n+pub mod smoke_helper;"}, {"sha": "ef05b044cddded92cdb5182e2265fe513d1c175e", "filename": "benches/helpers/smoke_helper.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fsmoke_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fhelpers%2Fsmoke_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fsmoke_helper.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "previous_filename": "benches/smoke_helper.rs"}, {"sha": "e085373a36dc04c77f23aa71bd8b6b9cf98a74f7", "filename": "benches/miri_helper.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/benches%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e90ee1674ae2fd32bc5e07a3a52562c45b273c56/benches%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fmiri_helper.rs?ref=e90ee1674ae2fd32bc5e07a3a52562c45b273c56", "patch": "@@ -1,48 +0,0 @@\n-#![feature(custom_attribute, test)]\n-#![feature(rustc_private)]\n-#![allow(unused_attributes)]\n-\n-extern crate getopts;\n-extern crate miri;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate test;\n-\n-use self::miri::interpreter;\n-use self::rustc::session::Session;\n-use self::rustc_driver::{driver, CompilerCalls, Compilation};\n-use std::cell::RefCell;\n-use std::rc::Rc;\n-use std::env::var;\n-use test::Bencher;\n-\n-pub struct MiriCompilerCalls<'a>(Rc<RefCell<&'a mut Bencher>>);\n-\n-pub fn run(filename: &str, bencher: &mut Bencher) {\n-    let path = var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n-    rustc_driver::run_compiler(&[\n-        \"miri\".to_string(), format!(\"benches/{}.rs\", filename), \"--sysroot\".to_string(), path.to_string(),\n-    ], &mut MiriCompilerCalls(Rc::new(RefCell::new(bencher))));\n-}\n-\n-impl<'a> CompilerCalls<'a> for MiriCompilerCalls<'a> {\n-    fn build_controller(\n-        &mut self,\n-        _: &Session,\n-        _: &getopts::Matches\n-    ) -> driver::CompileController<'a> {\n-        let mut control: driver::CompileController<'a> = driver::CompileController::basic();\n-\n-        let bencher = self.0.clone();\n-\n-        control.after_analysis.stop = Compilation::Stop;\n-        control.after_analysis.callback = Box::new(move |state| {\n-            state.session.abort_if_errors();\n-            bencher.borrow_mut().iter(|| {\n-                interpreter::interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n-            })\n-        });\n-\n-        control\n-    }\n-}"}, {"sha": "eabd58a86889fea433df8b4c1b2bcbd4f4bae6af", "filename": "benches/smoke.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/benches%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,11 +1,9 @@\n-#![feature(custom_attribute, test)]\n-#![feature(rustc_private)]\n-#![allow(unused_attributes)]\n+#![feature(test, rustc_private)]\n \n extern crate test;\n use test::Bencher;\n-\n-mod smoke_helper;\n+mod helpers;\n+use helpers::*;\n \n #[bench]\n fn noop(bencher: &mut Bencher) {\n@@ -33,8 +31,6 @@ fn noop_miri_full(bencher: &mut Bencher) {\n }\n */\n \n-mod miri_helper;\n-\n #[bench]\n fn noop_miri_interpreter(bencher: &mut Bencher) {\n     miri_helper::run(\"smoke_helper\", bencher);"}, {"sha": "6a9ad5ce8387feb77cfc99c713a66a9855e3c209", "filename": "src/bin/miri.rs", "status": "modified", "additions": 22, "deletions": 77, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -9,17 +9,9 @@ extern crate log_settings;\n extern crate syntax;\n #[macro_use] extern crate log;\n \n-use miri::{\n-    EvalContext,\n-    CachedMir,\n-    step,\n-    EvalError,\n-    Frame,\n-};\n+use miri::eval_main;\n use rustc::session::Session;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n-use rustc::ty::{TyCtxt, subst};\n-use rustc::hir::def_id::DefId;\n \n struct MiriCompilerCalls;\n \n@@ -37,84 +29,37 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n             let tcx = state.tcx.unwrap();\n             let mir_map = state.mir_map.unwrap();\n+            let (node_id, _) = state.session.entry_fn.borrow()\n+                .expect(\"no main or start function found\");\n+            eval_main(tcx, mir_map, node_id);\n \n-            let (node_id, span) = state.session.entry_fn.borrow().expect(\"no main or start function found\");\n-            debug!(\"found `main` function at: {:?}\", span);\n-\n-            let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n-            let def_id = tcx.map.local_def_id(node_id);\n-            let mut ecx = EvalContext::new(tcx, mir_map);\n-            let substs = tcx.mk_substs(subst::Substs::empty());\n-            let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs).expect(\"main function should not be diverging\");\n-\n-            ecx.push_stack_frame(def_id, mir.span, CachedMir::Ref(mir), substs, Some(return_ptr));\n-\n-            if mir.arg_decls.len() == 2 {\n-                // start function\n-                let ptr_size = ecx.memory().pointer_size;\n-                let nargs = ecx.memory_mut().allocate(ptr_size);\n-                ecx.memory_mut().write_usize(nargs, 0).unwrap();\n-                let args = ecx.memory_mut().allocate(ptr_size);\n-                ecx.memory_mut().write_usize(args, 0).unwrap();\n-                ecx.frame_mut().locals[0] = nargs;\n-                ecx.frame_mut().locals[1] = args;\n-            }\n-\n-            loop {\n-                match step(&mut ecx) {\n-                    Ok(true) => {}\n-                    Ok(false) => break,\n-                    // FIXME: diverging functions can end up here in some future miri\n-                    Err(e) => {\n-                        report(tcx, &ecx, e);\n-                        break;\n-                    }\n-                }\n-            }\n             state.session.abort_if_errors();\n         });\n \n         control\n     }\n }\n \n-fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n-    let frame = ecx.stack().last().expect(\"stackframe was empty\");\n-    let block = &frame.mir.basic_blocks()[frame.block];\n-    let span = if frame.stmt < block.statements.len() {\n-        block.statements[frame.stmt].source_info.span\n-    } else {\n-        block.terminator().source_info.span\n-    };\n-    let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n-    for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n-        // FIXME(solson): Find a way to do this without this Display impl hack.\n-        use rustc::util::ppaux;\n-        use std::fmt;\n-        struct Instance<'tcx>(DefId, &'tcx subst::Substs<'tcx>);\n-        impl<'tcx> fmt::Display for Instance<'tcx> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[],\n-                    |tcx| Some(tcx.lookup_item_type(self.0).generics))\n-            }\n-        }\n-        err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));\n-    }\n-    err.emit();\n-}\n-\n fn init_logger() {\n-    const NSPACES: usize = 40;\n+    const MAX_INDENT: usize = 40;\n+\n     let format = |record: &log::LogRecord| {\n-        // prepend spaces to indent the final string\n-        let indentation = log_settings::settings().indentation;\n-        format!(\"{lvl}:{module}{depth:2}{indent:<indentation$} {text}\",\n-            lvl = record.level(),\n-            module = record.location().module_path(),\n-            depth = indentation / NSPACES,\n-            indentation = indentation % NSPACES,\n-            indent = \"\",\n-            text = record.args())\n+        if record.level() == log::LogLevel::Trace {\n+            // prepend spaces to indent the final string\n+            let indentation = log_settings::settings().indentation;\n+            format!(\"{lvl}:{module}{depth:2}{indent:<indentation$} {text}\",\n+                lvl = record.level(),\n+                module = record.location().module_path(),\n+                depth = indentation / MAX_INDENT,\n+                indentation = indentation % MAX_INDENT,\n+                indent = \"\",\n+                text = record.args())\n+        } else {\n+            format!(\"{lvl}:{module}: {text}\",\n+                lvl = record.level(),\n+                module = record.location().module_path(),\n+                text = record.args())\n+        }\n     };\n \n     let mut builder = env_logger::LogBuilder::new();"}, {"sha": "eaadfbd1df13ba310d708c33a433f93a3c2b40f2", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1546,3 +1546,65 @@ impl StructExt for layout::Struct {\n         }\n     }\n }\n+\n+pub fn eval_main<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir_map: &'a MirMap<'tcx>,\n+    node_id: ast::NodeId,\n+) {\n+    let mir = mir_map.map.get(&node_id).expect(\"no mir for main function\");\n+    let def_id = tcx.map.local_def_id(node_id);\n+    let mut ecx = EvalContext::new(tcx, mir_map);\n+    let substs = tcx.mk_substs(subst::Substs::empty());\n+    let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs).expect(\"main function should not be diverging\");\n+\n+    ecx.push_stack_frame(def_id, mir.span, CachedMir::Ref(mir), substs, Some(return_ptr));\n+\n+    if mir.arg_decls.len() == 2 {\n+        // start function\n+        let ptr_size = ecx.memory().pointer_size;\n+        let nargs = ecx.memory_mut().allocate(ptr_size);\n+        ecx.memory_mut().write_usize(nargs, 0).unwrap();\n+        let args = ecx.memory_mut().allocate(ptr_size);\n+        ecx.memory_mut().write_usize(args, 0).unwrap();\n+        ecx.frame_mut().locals[0] = nargs;\n+        ecx.frame_mut().locals[1] = args;\n+    }\n+\n+    loop {\n+        match step(&mut ecx) {\n+            Ok(true) => {}\n+            Ok(false) => break,\n+            // FIXME: diverging functions can end up here in some future miri\n+            Err(e) => {\n+                report(tcx, &ecx, e);\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n+fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n+    let frame = ecx.stack().last().expect(\"stackframe was empty\");\n+    let block = &frame.mir.basic_blocks()[frame.block];\n+    let span = if frame.stmt < block.statements.len() {\n+        block.statements[frame.stmt].source_info.span\n+    } else {\n+        block.terminator().source_info.span\n+    };\n+    let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n+    for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n+        // FIXME(solson): Find a way to do this without this Display impl hack.\n+        use rustc::util::ppaux;\n+        use std::fmt;\n+        struct Instance<'tcx>(DefId, &'tcx subst::Substs<'tcx>);\n+        impl<'tcx> fmt::Display for Instance<'tcx> {\n+            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[],\n+                    |tcx| Some(tcx.lookup_item_type(self.0).generics))\n+            }\n+        }\n+        err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));\n+    }\n+    err.emit();\n+}"}, {"sha": "8addef87b2fb2aa9bca18b2c5e65e71b88c13cf0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -32,10 +32,11 @@ pub use error::{\n };\n \n pub use interpreter::{\n+    CachedMir,\n     EvalContext,\n-    step,\n     Frame,\n-    CachedMir,\n+    eval_main,\n+    step,\n };\n \n pub use memory::Memory;"}, {"sha": "5430501f05225d27d7b611cb69db1279a2ea374e", "filename": "tests/compiletest.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -57,20 +57,23 @@ fn compile_test() {\n     for_all_targets(&sysroot, |target| {\n         for file in std::fs::read_dir(\"tests/run-pass\").unwrap() {\n             let file = file.unwrap();\n-            if !file.metadata().unwrap().is_file() {\n+            let path = file.path();\n+\n+            if !file.metadata().unwrap().is_file() || !path.to_str().unwrap().ends_with(\".rs\") {\n                 continue;\n             }\n-            let file = file.path();\n+\n             let stderr = std::io::stderr();\n-            write!(stderr.lock(), \"test [miri-pass] {} \", file.to_str().unwrap()).unwrap();\n+            write!(stderr.lock(), \"test [miri-pass] {} ... \", path.display()).unwrap();\n             let mut cmd = std::process::Command::new(\"target/debug/miri\");\n-            cmd.arg(file);\n+            cmd.arg(path);\n             cmd.arg(\"-Dwarnings\");\n             cmd.arg(format!(\"--target={}\", target));\n             let libs = Path::new(&sysroot).join(\"lib\");\n             let sysroot = libs.join(\"rustlib\").join(&target).join(\"lib\");\n             let paths = std::env::join_paths(&[libs, sysroot]).unwrap();\n             cmd.env(compiletest::procsrv::dylib_env_var(), paths);\n+\n             match cmd.output() {\n                 Ok(ref output) if output.status.success() => writeln!(stderr.lock(), \"ok\").unwrap(),\n                 Ok(output) => {"}, {"sha": "e0b2c24c835742bca76e51176ed74840d9a5cf7a", "filename": "tests/run-pass/closures.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosures.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,14 +1,9 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn simple() -> i32 {\n     let y = 10;\n     let f = |x| x + y;\n     f(2)\n }\n \n-#[miri_run]\n fn crazy_closure() -> (i32, i32, i32) {\n     fn inner<T: Copy>(t: T) -> (i32, T, T) {\n         struct NonCopy;\n@@ -26,7 +21,7 @@ fn crazy_closure() -> (i32, i32, i32) {\n     inner(10)\n }\n \n-// #[miri_run]\n+// TODO(solson): Implement closure argument adjustment and uncomment this test.\n // fn closure_arg_adjustment_problem() -> i64 {\n //     fn once<F: FnOnce(i64)>(f: F) { f(2); }\n //     let mut y = 1;\n@@ -37,7 +32,7 @@ fn crazy_closure() -> (i32, i32, i32) {\n //     y\n // }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(simple(), 12);\n+    assert_eq!(crazy_closure(), (84, 10, 10));\n }"}, {"sha": "718c8526014200135084e1eb367f52695ba59667", "filename": "tests/run-pass/constants.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconstants.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,11 +1,9 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n const A: usize = *&5;\n \n-#[miri_run]\n fn foo() -> usize {\n     A\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(foo(), A);\n+}"}, {"sha": "c81db8e8b2354eeac35383ae3255109e37722dbd", "filename": "tests/run-pass/option_box_transmute_ptr.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Foption_box_transmute_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Foption_box_transmute_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Foption_box_transmute_ptr.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,9 +1,4 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n // This tests that the size of Option<Box<i32>> is the same as *const i32.\n-\n-#[miri_run]\n fn option_box_deref() -> i32 {\n     let val = Some(Box::new(42));\n     unsafe {\n@@ -12,4 +7,6 @@ fn option_box_deref() -> i32 {\n     }\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(option_box_deref(), 42);\n+}"}, {"sha": "86bb71a0be5606a8f419ddbdbe7177eaaa13004a", "filename": "tests/run-pass/products.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fproducts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fproducts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fproducts.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,37 +1,28 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn tuple() -> (i16,) {\n     (1,)\n }\n \n-#[miri_run]\n fn tuple_2() -> (i16, i16) {\n     (1, 2)\n }\n \n-#[miri_run]\n fn tuple_5() -> (i16, i16, i16, i16, i16) {\n     (1, 2, 3, 4, 5)\n }\n \n #[derive(Debug, PartialEq)]\n struct Pair { x: i8, y: i8 }\n \n-#[miri_run]\n fn pair() -> Pair {\n     Pair { x: 10, y: 20 }\n }\n \n-#[miri_run]\n fn field_access() -> (i8, i8) {\n     let mut p = Pair { x: 10, y: 20 };\n     p.x += 5;\n     (p.x, p.y)\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(tuple(), (1,));\n     assert_eq!(tuple_2(), (1, 2));"}, {"sha": "9570b5b58e82f472ed580c4017110b8ead4412b7", "filename": "tests/run-pass/specialization.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fspecialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fspecialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fspecialization.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,6 +1,3 @@\n-#![feature(custom_attribute, specialization)]\n-#![allow(dead_code, unused_attributes)]\n-\n trait IsUnit {\n     fn is_unit() -> bool;\n }\n@@ -13,12 +10,10 @@ impl IsUnit for () {\n     fn is_unit() -> bool { true }\n }\n \n-#[miri_run]\n fn specialization() -> (bool, bool) {\n     (i32::is_unit(), <()>::is_unit())\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(specialization(), (false, true));\n }"}, {"sha": "d5fc80b41f012230d3f36f3fb6fa06865ba12cfa", "filename": "tests/run-pass/strings.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstrings.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,29 +1,27 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn empty() -> &'static str {\n     \"\"\n }\n \n-#[miri_run]\n fn hello() -> &'static str {\n     \"Hello, world!\"\n }\n \n-#[miri_run]\n fn hello_bytes() -> &'static [u8; 13] {\n     b\"Hello, world!\"\n }\n \n-#[miri_run]\n fn hello_bytes_fat() -> &'static [u8] {\n     b\"Hello, world!\"\n }\n \n-#[miri_run]\n fn fat_pointer_on_32_bit() {\n     Some(5).expect(\"foo\");\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(empty(), \"\");\n+    assert_eq!(hello(), \"Hello, world!\");\n+    assert_eq!(hello_bytes(), b\"Hello, world!\");\n+    assert_eq!(hello_bytes_fat(), b\"Hello, world!\");\n+    fat_pointer_on_32_bit(); // Should run without crashing.\n+}"}, {"sha": "f067b29220ce87f2590a9222c22f36e42e615dce", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,5 +1,5 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n+// FIXME(solson): 32-bit mode doesn't test anything currently.\n+#![cfg_attr(target_pointer_width = \"32\", allow(dead_code))]\n \n #[derive(Debug, PartialEq)]\n enum Unit { Unit(()) } // Force non-C-enum representation."}, {"sha": "891d11520656160d13584d5a4eb14a056e47b71b", "filename": "tests/run-pass/trivial.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Ftrivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Ftrivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftrivial.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,13 +1,11 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn empty() {}\n \n-#[miri_run]\n fn unit_var() {\n     let x = ();\n     x\n }\n \n-fn main() {}\n+fn main() {\n+    empty();\n+    unit_var();\n+}"}, {"sha": "db98e969306ba62e5528ccf3cbdf8f57d36717a2", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1082b9b1a9881e80210e769727867dc5c4b80f6/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=a1082b9b1a9881e80210e769727867dc5c4b80f6", "patch": "@@ -1,17 +1,16 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n+#[derive(PartialEq, Debug)]\n struct A;\n \n-#[miri_run]\n fn zst_ret() -> A {\n     A\n }\n \n-#[miri_run]\n fn use_zst() -> A {\n     let a = A;\n     a\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(zst_ret(), A);\n+    assert_eq!(use_zst(), A);\n+}"}]}