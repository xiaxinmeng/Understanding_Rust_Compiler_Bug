{"sha": "1c852ac9c0d14b38bc956e3938256273980577b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjODUyYWM5YzBkMTRiMzhiYzk1NmUzOTM4MjU2MjczOTgwNTc3Yjc=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-24T22:37:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-28T23:12:33Z"}, "message": "Removing runtime tests. The runtime is tested well enough by the standard library tests, so we might as well have less code to fix during refactoring.", "tree": {"sha": "5408bedddd156fa9d4c4a49deb2217a899ad43a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5408bedddd156fa9d4c4a49deb2217a899ad43a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c852ac9c0d14b38bc956e3938256273980577b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c852ac9c0d14b38bc956e3938256273980577b7", "html_url": "https://github.com/rust-lang/rust/commit/1c852ac9c0d14b38bc956e3938256273980577b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c852ac9c0d14b38bc956e3938256273980577b7/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64596e6583068bd2ee7ac5bad13dbf0668eb345f", "url": "https://api.github.com/repos/rust-lang/rust/commits/64596e6583068bd2ee7ac5bad13dbf0668eb345f", "html_url": "https://github.com/rust-lang/rust/commit/64596e6583068bd2ee7ac5bad13dbf0668eb345f"}], "stats": {"total": 315, "additions": 0, "deletions": 315}, "files": [{"sha": "b4cdefd996ce5a7af8cffb3ecbaf715009f60299", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c852ac9c0d14b38bc956e3938256273980577b7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c852ac9c0d14b38bc956e3938256273980577b7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=1c852ac9c0d14b38bc956e3938256273980577b7", "patch": "@@ -25,9 +25,6 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_srv.cpp \\\n               rt/rust_kernel.cpp \\\n               rt/memory_region.cpp \\\n-              rt/test/rust_test_harness.cpp \\\n-              rt/test/rust_test_runtime.cpp \\\n-              rt/test/rust_test_util.cpp \\\n               rt/arch/i386/context.cpp \\\n \n RUNTIME_LL :=\n@@ -59,9 +56,6 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/rust_kernel.h \\\n                rt/memory_region.h \\\n                rt/memory.h \\\n-               rt/test/rust_test_harness.h \\\n-               rt/test/rust_test_runtime.h \\\n-               rt/test/rust_test_util.h \\\n                rt/arch/i386/context.h \\\n \n RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)"}, {"sha": "cc494a261486a6085bfb239390149aaaf8d270d2", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c852ac9c0d14b38bc956e3938256273980577b7/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/1c852ac9c0d14b38bc956e3938256273980577b7/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=1c852ac9c0d14b38bc956e3938256273980577b7", "patch": "@@ -280,10 +280,6 @@ struct gc_alloc {\n #include \"rust_chan.h\"\n #include \"rust_port.h\"\n \n-#include \"test/rust_test_harness.h\"\n-#include \"test/rust_test_util.h\"\n-#include \"test/rust_test_runtime.h\"\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "cca199dcdb98bc3389579bd357c74131406dfeb4", "filename": "src/rt/test/rust_test_harness.cpp", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,40 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-bool\n-rust_test::run() {\n-    return false;\n-}\n-\n-const char *\n-rust_test::name() {\n-    return \"untitled\";\n-}\n-\n-rust_test_suite::rust_test_suite() {\n-    tests.append(new rust_domain_test());\n-    tests.append(new rust_task_test(this));\n-    tests.append(new rust_array_list_test());\n-    tests.append(new rust_synchronized_indexed_list_test());\n-}\n-\n-rust_test_suite::~rust_test_suite() {\n-\n-}\n-\n-bool\n-rust_test_suite::run() {\n-    bool pass = true;\n-    for (size_t i = 0; i < tests.size(); i++) {\n-        rust_test *test = tests[i];\n-        printf(\"test: %s running ... \\n\", test->name());\n-        timer timer;\n-        bool result = tests[i]->run();\n-        printf(\"test: %s %s %.2f ms\\n\", test->name(),\n-               result ? \"PASSED\" : \"FAILE\", timer.get_elapsed_time_in_ms());\n-        if (result == false) {\n-            pass = false;\n-        }\n-    }\n-    return pass;\n-}\n-"}, {"sha": "401015e4508900fe23010baf657cb646667718b2", "filename": "src/rt/test/rust_test_harness.h", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_harness.h", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_harness.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.h?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,22 +0,0 @@\n-#ifndef RUST_TEST_HARNESS_H\n-#define RUST_TEST_HARNESS_H\n-\n-#define CHECK(x) if ((x) == false)                               \\\n-    { printf(\"condition: %s failed at file: %s, line: %d\\n\", #x, \\\n-             __FILE__, __LINE__ ); return false; }\n-\n-class rust_test {\n-public:\n-    virtual bool run();\n-    virtual const char *name();\n-};\n-\n-class rust_test_suite : public rust_test {\n-public:\n-    array_list<rust_test*> tests;\n-    rust_test_suite();\n-    virtual ~rust_test_suite();\n-    bool run();\n-};\n-\n-#endif /* RUST_TEST_HARNESS_H */"}, {"sha": "cf82818c4ff0a9741db0b9f88b034093214cdbb1", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,73 +0,0 @@\n-#include \"rust_test_runtime.h\"\n-\n-rust_test_runtime::rust_test_runtime() {\n-}\n-\n-rust_test_runtime::~rust_test_runtime() {\n-}\n-\n-#define DOMAINS 32\n-#define TASKS 32\n-\n-void\n-rust_domain_test::worker::run() {\n-    rust_handle<rust_dom> *handle = kernel->create_domain(\"test\");\n-    for (int i = 0; i < TASKS; i++) {\n-        handle->referent()->create_task(NULL, \"child\");\n-    }\n-    sync::random_sleep(1000);\n-    kernel->destroy_domain(handle->_referent);\n-}\n-\n-bool\n-rust_domain_test::run() {\n-    rust_srv srv;\n-    rust_kernel kernel(&srv);\n-\n-    array_list<worker *> workers;\n-    for (int i = 0; i < DOMAINS; i++) {\n-        worker *worker = new rust_domain_test::worker (&kernel);\n-        workers.append(worker);\n-        worker->start();\n-    }\n-\n-    // We don't join the worker threads here in order to simulate ad-hoc\n-    // termination of domains. If we join_all_domains before all domains\n-    // are actually spawned, this could crash, thus the reason for the\n-    // sleep below.\n-\n-    sync::sleep(100);\n-    kernel.join_all_domains();\n-    return true;\n-}\n-\n-void task_entry() {\n-    printf(\"task entry\\n\");\n-}\n-\n-void\n-rust_task_test::worker::run() {\n-    rust_handle<rust_dom> *handle =\n-        kernel->create_domain(\"test\");\n-    rust_dom *domain = handle->referent();\n-    domain->root_task->start((uintptr_t)&task_entry, (uintptr_t)NULL);\n-    domain->start_main_loop(0);\n-    kernel->destroy_domain(domain);\n-}\n-\n-bool\n-rust_task_test::run() {\n-    rust_srv srv;\n-    rust_kernel kernel(&srv);\n-\n-    array_list<worker *> workers;\n-    for (int i = 0; i < DOMAINS; i++) {\n-        worker *worker = new rust_task_test::worker (&kernel, this);\n-        workers.append(worker);\n-        worker->start();\n-    }\n-\n-    sync::random_sleep(1000);\n-    kernel.join_all_domains();\n-    return true;\n-}"}, {"sha": "8d4f38ecb79f5d22a01f12ddbd51128547b7e1a8", "filename": "src/rt/test/rust_test_runtime.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_runtime.h", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_runtime.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.h?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,51 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-#ifndef RUST_TEST_RUNTIME_H\n-#define RUST_TEST_RUNTIME_H\n-\n-class rust_test_runtime {\n-public:\n-    rust_test_runtime();\n-    virtual ~rust_test_runtime();\n-};\n-\n-\n-class rust_domain_test : public rust_test {\n-public:\n-    class worker : public rust_thread {\n-        public:\n-        rust_kernel *kernel;\n-        worker(rust_kernel *kernel) : kernel(kernel) {\n-            // Nop.\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_domain_test\";\n-    }\n-};\n-\n-class rust_task_test : public rust_test {\n-public:\n-    rust_test_suite *suite;\n-    rust_task_test(rust_test_suite *suite) : suite(suite) {\n-        // Nop.\n-    }\n-    class worker : public rust_thread {\n-        public:\n-        rust_kernel *kernel;\n-        rust_task_test *parent;\n-        worker(rust_kernel *kernel, rust_task_test *parent) :\n-            kernel(kernel), parent(parent) {\n-            // Nop.\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_task_test\";\n-    }\n-};\n-\n-#endif /* RUST_TEST_RUNTIME_H */"}, {"sha": "2e9d764f69b664b54b3b90b224f7d8c8b5ac47b5", "filename": "src/rt/test/rust_test_util.cpp", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.cpp?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,78 +0,0 @@\n-#include \"../rust_internal.h\"\n-\n-#define COUNT 1000\n-#define LARGE_COUNT 10000\n-#define THREADS 10\n-\n-bool\n-rust_array_list_test::run() {\n-    array_list<int> list;\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        list.append(i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list[i] == i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list.index_of(i) == i);\n-    }\n-\n-    for (int i = 0; i < COUNT; i++) {\n-        CHECK (list.replace(i, -i));\n-        CHECK (list.replace(-i, i));\n-        CHECK (list.index_of(i) == i);\n-    }\n-\n-    for (int i = COUNT - 1; i >= 0; i--) {\n-        CHECK (list.pop(NULL));\n-    }\n-\n-    return true;\n-}\n-\n-bool\n-rust_synchronized_indexed_list_test::run() {\n-    array_list<worker*> workers;\n-\n-    for (int i = 0; i < THREADS; i++) {\n-        worker *worker =\n-            new rust_synchronized_indexed_list_test::worker(this);\n-        workers.append(worker);\n-    }\n-\n-    for (uint32_t i = 0; i < workers.size(); i++) {\n-        workers[i]->start();\n-    }\n-\n-    while(workers.is_empty() == false) {\n-        worker *worker;\n-        workers.pop(&worker);\n-        worker->join();\n-        delete worker;\n-    }\n-\n-    long long expected_items = LARGE_COUNT * THREADS;\n-\n-    CHECK(list.length() == expected_items);\n-\n-    long long sum = 0;\n-    for (size_t i = 0; i < list.length(); i++) {\n-        sum += list[i]->value;\n-    }\n-\n-    long long expected_sum = LARGE_COUNT;\n-    expected_sum = expected_sum * (expected_sum - 1) / 2 * THREADS;\n-    CHECK (sum == expected_sum);\n-    return true;\n-}\n-\n-void\n-rust_synchronized_indexed_list_test::worker::run() {\n-    for (int i = 0; i < LARGE_COUNT; i++) {\n-        parent->list.append(new indexed_list_element<int>(i));\n-    }\n-    return;\n-}"}, {"sha": "41c3579043a15d372f73885eeaaabffc28da35a2", "filename": "src/rt/test/rust_test_util.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/64596e6583068bd2ee7ac5bad13dbf0668eb345f/src%2Frt%2Ftest%2Frust_test_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.h?ref=64596e6583068bd2ee7ac5bad13dbf0668eb345f", "patch": "@@ -1,41 +0,0 @@\n-#ifndef RUST_TEST_UTIL_H\n-#define RUST_TEST_UTIL_H\n-\n-class rust_test_util : public rust_test {\n-public:\n-\n-};\n-\n-class rust_array_list_test : public rust_test {\n-public:\n-    bool run();\n-    const char *name() {\n-        return \"rust_array_list_test\";\n-    }\n-};\n-\n-\n-class rust_synchronized_indexed_list_test : public rust_test {\n-public:\n-    rust_srv srv;\n-    synchronized_indexed_list<indexed_list_element<int> > list;\n-\n-    rust_synchronized_indexed_list_test() {\n-        // Nop.\n-    }\n-\n-    class worker : public rust_thread {\n-    public:\n-        rust_synchronized_indexed_list_test *parent;\n-        worker(rust_synchronized_indexed_list_test *parent) : parent(parent) {\n-            // Nop.\n-        }\n-        void run();\n-    };\n-    bool run();\n-    const char *name() {\n-        return \"rust_synchronized_indexed_list_test\";\n-    }\n-};\n-\n-#endif /* RUST_TEST_UTIL_H */"}]}