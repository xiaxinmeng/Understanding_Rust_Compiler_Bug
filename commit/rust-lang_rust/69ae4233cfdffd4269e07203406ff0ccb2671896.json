{"sha": "69ae4233cfdffd4269e07203406ff0ccb2671896", "node_id": "C_kwDOAAsO6NoAKDY5YWU0MjMzY2ZkZmZkNDI2OWUwNzIwMzQwNmZmMGNjYjI2NzE4OTY", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-02-16T04:45:09Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-03-01T01:04:36Z"}, "message": "Add !align metadata on loads of &/&mut/Box\n\nNote that this refers to the alignment of what the loaded value points\nto, _not_ the alignment of the loaded value itself.", "tree": {"sha": "41134543a83541232b631f249632dffa0c3b3cec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41134543a83541232b631f249632dffa0c3b3cec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ae4233cfdffd4269e07203406ff0ccb2671896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ae4233cfdffd4269e07203406ff0ccb2671896", "html_url": "https://github.com/rust-lang/rust/commit/69ae4233cfdffd4269e07203406ff0ccb2671896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ae4233cfdffd4269e07203406ff0ccb2671896/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce3749235fc31d15ebd444b038a9877e8c700d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce3749235fc31d15ebd444b038a9877e8c700d7", "html_url": "https://github.com/rust-lang/rust/commit/4ce3749235fc31d15ebd444b038a9877e8c700d7"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "9a417c71779d3d8ee5e6dac972630a4622bff805", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/69ae4233cfdffd4269e07203406ff0ccb2671896/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ae4233cfdffd4269e07203406ff0ccb2671896/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=69ae4233cfdffd4269e07203406ff0ccb2671896", "patch": "@@ -478,6 +478,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             bx: &mut Builder<'a, 'll, 'tcx>,\n             load: &'ll Value,\n             scalar: abi::Scalar,\n+            layout: TyAndLayout<'tcx>,\n+            offset: Size,\n         ) {\n             if !scalar.is_always_valid(bx) {\n                 bx.noundef_metadata(load);\n@@ -489,10 +491,18 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                         bx.range_metadata(load, scalar.valid_range);\n                     }\n                 }\n-                abi::Pointer if !scalar.valid_range.contains(0) => {\n-                    bx.nonnull_metadata(load);\n+                abi::Pointer => {\n+                    if !scalar.valid_range.contains(0) {\n+                        bx.nonnull_metadata(load);\n+                    }\n+\n+                    if let Some(pointee) = layout.pointee_info_at(bx, offset) {\n+                        if let Some(_) = pointee.safe {\n+                            bx.align_metadata(load, pointee.align);\n+                        }\n+                    }\n                 }\n-                _ => {}\n+                abi::F32 | abi::F64 => {}\n             }\n         }\n \n@@ -510,7 +520,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             let llval = const_llval.unwrap_or_else(|| {\n                 let load = self.load(place.layout.llvm_type(self), place.llval, place.align);\n                 if let abi::Abi::Scalar(scalar) = place.layout.abi {\n-                    scalar_load_metadata(self, load, scalar);\n+                    scalar_load_metadata(self, load, scalar, place.layout, Size::ZERO);\n                 }\n                 load\n             });\n@@ -519,17 +529,17 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n             let pair_ty = place.layout.llvm_type(self);\n \n-            let mut load = |i, scalar: abi::Scalar, align| {\n+            let mut load = |i, scalar: abi::Scalar, layout, align, offset| {\n                 let llptr = self.struct_gep(pair_ty, place.llval, i as u64);\n                 let llty = place.layout.scalar_pair_element_llvm_type(self, i, false);\n                 let load = self.load(llty, llptr, align);\n-                scalar_load_metadata(self, load, scalar);\n+                scalar_load_metadata(self, load, scalar, layout, offset);\n                 self.to_immediate_scalar(load, scalar)\n             };\n \n             OperandValue::Pair(\n-                load(0, a, place.align),\n-                load(1, b, place.align.restrict_for_offset(b_offset)),\n+                load(0, a, place.layout, place.align, Size::ZERO),\n+                load(1, b, place.layout, place.align.restrict_for_offset(b_offset), b_offset),\n             )\n         } else {\n             OperandValue::Ref(place.llval, None, place.align)\n@@ -1219,6 +1229,18 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n+    fn align_metadata(&mut self, load: &'ll Value, align: Align) {\n+        unsafe {\n+            let v = [self.cx.const_u64(align.bytes())];\n+\n+            llvm::LLVMSetMetadata(\n+                load,\n+                llvm::MD_align as c_uint,\n+                llvm::LLVMMDNodeInContext(self.cx.llcx, v.as_ptr(), v.len() as c_uint),\n+            );\n+        }\n+    }\n+\n     fn noundef_metadata(&mut self, load: &'ll Value) {\n         unsafe {\n             llvm::LLVMSetMetadata("}, {"sha": "ed0825e124c456b804b3c0294b0ad5b5d8390697", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69ae4233cfdffd4269e07203406ff0ccb2671896/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ae4233cfdffd4269e07203406ff0ccb2671896/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=69ae4233cfdffd4269e07203406ff0ccb2671896", "patch": "@@ -441,6 +441,7 @@ pub enum MetadataType {\n     MD_nontemporal = 9,\n     MD_mem_parallel_loop_access = 10,\n     MD_nonnull = 11,\n+    MD_align = 17,\n     MD_type = 19,\n     MD_noundef = 29,\n }"}, {"sha": "268c55561f2b846b9681f37eaea69524f87bd9fc", "filename": "src/test/codegen/loads.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/69ae4233cfdffd4269e07203406ff0ccb2671896/src%2Ftest%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ae4233cfdffd4269e07203406ff0ccb2671896/src%2Ftest%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floads.rs?ref=69ae4233cfdffd4269e07203406ff0ccb2671896", "patch": "@@ -18,21 +18,47 @@ pub enum MyBool {\n     False,\n }\n \n+#[repr(align(16))]\n+pub struct Align16(u128);\n+\n+// CHECK: @ptr_alignment_helper({}** {{.*}} align [[PTR_ALIGNMENT:[0-9]+]]\n+#[no_mangle]\n+pub fn ptr_alignment_helper(x: &&()) {}\n+\n // CHECK-LABEL: @load_ref\n #[no_mangle]\n pub fn load_ref<'a>(x: &&'a i32) -> &'a i32 {\n-// Alignment of a reference itself is target dependent, so just match any alignment:\n-// the main thing we care about here is !nonnull and !noundef.\n-// CHECK: load i32*, i32** %x, align {{[0-9]+}}, !nonnull !{{[0-9]+}}, !noundef !{{[0-9]+}}\n+// CHECK: load i32*, i32** %x, align [[PTR_ALIGNMENT]], !nonnull !{{[0-9]+}}, !align ![[ALIGN_4_META:[0-9]+]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_ref_higher_alignment\n+#[no_mangle]\n+pub fn load_ref_higher_alignment<'a>(x: &&'a Align16) -> &'a Align16 {\n+// CHECK: load %Align16*, %Align16** %x, align [[PTR_ALIGNMENT]], !nonnull !{{[0-9]+}}, !align ![[ALIGN_16_META:[0-9]+]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_scalar_pair\n+#[no_mangle]\n+pub fn load_scalar_pair<'a>(x: &(&'a i32, &'a Align16)) -> (&'a i32, &'a Align16) {\n+// CHECK: load i32*, i32** %{{.+}}, align [[PTR_ALIGNMENT]], !nonnull !{{[0-9]+}}, !align ![[ALIGN_4_META]], !noundef !{{[0-9]+}}\n+// CHECK: load i64*, i64** %{{.+}}, align [[PTR_ALIGNMENT]], !nonnull !{{[0-9]+}}, !align ![[ALIGN_16_META]], !noundef !{{[0-9]+}}\n+    *x\n+}\n+\n+// CHECK-LABEL: @load_raw_pointer\n+#[no_mangle]\n+pub fn load_raw_pointer<'a>(x: &*const i32) -> *const i32 {\n+// loaded raw pointer should not have !nonnull, !align, or !noundef metadata\n+// CHECK: load i32*, i32** %x, align [[PTR_ALIGNMENT]]{{$}}\n     *x\n }\n \n // CHECK-LABEL: @load_box\n #[no_mangle]\n pub fn load_box<'a>(x: Box<Box<i32>>) -> Box<i32> {\n-// Alignment of a box itself is target dependent, so just match any alignment:\n-// the main thing we care about here is !nonnull and !noundef.\n-// CHECK: load i32*, i32** %x, align {{[0-9]+}}, !nonnull !{{[0-9]+}}, !noundef !{{[0-9]+}}\n+// CHECK: load i32*, i32** %x, align [[PTR_ALIGNMENT]], !nonnull !{{[0-9]+}}, !align ![[ALIGN_4_META]], !noundef !{{[0-9]+}}\n     *x\n }\n \n@@ -120,5 +146,7 @@ pub fn small_struct_alignment(x: Bytes) -> Bytes {\n     x\n }\n \n-// CHECK: ![[BOOL_RANGE]] = !{i8 0, i8 2}\n-// CHECK: ![[NONZEROU16_RANGE]] = !{i16 1, i16 0}\n+// CHECK-DAG: ![[BOOL_RANGE]] = !{i8 0, i8 2}\n+// CHECK-DAG: ![[NONZEROU16_RANGE]] = !{i16 1, i16 0}\n+// CHECK-DAG: ![[ALIGN_4_META]] = !{i64 4}\n+// CHECK-DAG: ![[ALIGN_16_META]] = !{i64 16}"}]}