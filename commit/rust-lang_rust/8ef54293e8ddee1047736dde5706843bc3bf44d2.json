{"sha": "8ef54293e8ddee1047736dde5706843bc3bf44d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjU0MjkzZThkZGVlMTA0NzczNmRkZTU3MDY4NDNiYzNiZjQ0ZDI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T07:02:01Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-16T07:02:01Z"}, "message": "Force vertical layout for all variants if one of then use multiple lines", "tree": {"sha": "c0c97bac764f256668d8f6ed4434859eb2ffeadd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c97bac764f256668d8f6ed4434859eb2ffeadd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef54293e8ddee1047736dde5706843bc3bf44d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef54293e8ddee1047736dde5706843bc3bf44d2", "html_url": "https://github.com/rust-lang/rust/commit/8ef54293e8ddee1047736dde5706843bc3bf44d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef54293e8ddee1047736dde5706843bc3bf44d2/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a3d5b164eb38aa360f073e6f194aae2719f2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a3d5b164eb38aa360f073e6f194aae2719f2c5", "html_url": "https://github.com/rust-lang/rust/commit/b3a3d5b164eb38aa360f073e6f194aae2719f2c5"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "0c1895c23914fbb8d4cdfcd30bf1b29cefddb4a5", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ef54293e8ddee1047736dde5706843bc3bf44d2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef54293e8ddee1047736dde5706843bc3bf44d2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8ef54293e8ddee1047736dde5706843bc3bf44d2", "patch": "@@ -484,21 +484,30 @@ impl<'a> FmtVisitor<'a> {\n         let indentation = self.block_indent.to_string(self.config);\n         result.push_str(&indentation);\n \n-        let items = itemize_list(\n-            self.codemap,\n-            enum_def.variants.iter(),\n-            \"}\",\n-            |f| if !f.node.attrs.is_empty() {\n-                f.node.attrs[0].span.lo()\n-            } else {\n-                f.span.lo()\n-            },\n-            |f| f.span.hi(),\n-            |f| self.format_variant(f),\n-            body_lo,\n-            body_hi,\n-            false,\n-        );\n+        let itemize_list_with = |one_line_width: usize| {\n+            itemize_list(\n+                self.codemap,\n+                enum_def.variants.iter(),\n+                \"}\",\n+                |f| if !f.node.attrs.is_empty() {\n+                    f.node.attrs[0].span.lo()\n+                } else {\n+                    f.span.lo()\n+                },\n+                |f| f.span.hi(),\n+                |f| self.format_variant(f, one_line_width),\n+                body_lo,\n+                body_hi,\n+                false,\n+            ).collect()\n+        };\n+        let mut items: Vec<_> = itemize_list_with(self.config.struct_variant_width());\n+        // If one of the variants use multiple lines, use multi-lined formatting for all variants.\n+        let has_multiline_variant = items.iter().any(|item| item.inner_as_ref().contains(\"\\n\"));\n+        let has_single_line_variant = items.iter().any(|item| !item.inner_as_ref().contains(\"\\n\"));\n+        if has_multiline_variant && has_single_line_variant {\n+            items = itemize_list_with(0);\n+        }\n \n         let shape = self.shape().sub_width(2).unwrap();\n         let fmt = ListFormatting {\n@@ -512,14 +521,14 @@ impl<'a> FmtVisitor<'a> {\n             config: self.config,\n         };\n \n-        let list = write_list(&items.collect::<Vec<_>>(), &fmt)?;\n+        let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n         result.push('\\n');\n         Some(result)\n     }\n \n     // Variant of an enum.\n-    fn format_variant(&self, field: &ast::Variant) -> Option<String> {\n+    fn format_variant(&self, field: &ast::Variant, one_line_width: usize) -> Option<String> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n@@ -544,7 +553,7 @@ impl<'a> FmtVisitor<'a> {\n                     &context,\n                     &StructParts::from_variant(field),\n                     indent,\n-                    Some(self.config.struct_variant_width()),\n+                    Some(one_line_width),\n                 )?\n             }\n             ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {"}]}