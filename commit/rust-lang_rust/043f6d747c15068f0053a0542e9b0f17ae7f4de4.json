{"sha": "043f6d747c15068f0053a0542e9b0f17ae7f4de4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0M2Y2ZDc0N2MxNTA2OGYwMDUzYTA1NDJlOWIwZjE3YWU3ZjRkZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T21:44:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T21:44:26Z"}, "message": "Auto merge of #77201 - matthewjasper:rename-get-unchecked, r=spastorino\n\nRename Iterator::get_unchecked\n\nCloses #76479\n\nr? `@pnkfelix`", "tree": {"sha": "ab199af58050afe1cfe5ffe44b77818faaa3ef5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab199af58050afe1cfe5ffe44b77818faaa3ef5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/043f6d747c15068f0053a0542e9b0f17ae7f4de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/043f6d747c15068f0053a0542e9b0f17ae7f4de4", "html_url": "https://github.com/rust-lang/rust/commit/043f6d747c15068f0053a0542e9b0f17ae7f4de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/043f6d747c15068f0053a0542e9b0f17ae7f4de4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e4db620a7d2f569f11dcab627430921ea8aacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e4db620a7d2f569f11dcab627430921ea8aacf", "html_url": "https://github.com/rust-lang/rust/commit/c6e4db620a7d2f569f11dcab627430921ea8aacf"}, {"sha": "04a0b1d0879f7872b09cd8058a15479589ccd352", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a0b1d0879f7872b09cd8058a15479589ccd352", "html_url": "https://github.com/rust-lang/rust/commit/04a0b1d0879f7872b09cd8058a15479589ccd352"}], "stats": {"total": 134, "additions": 74, "deletions": 60}, "files": [{"sha": "fec4c1e0e501f5297f2c4d873d982efa3d970887", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -2980,12 +2980,18 @@ impl<T> Iterator for IntoIter<T> {\n         self.len()\n     }\n \n-    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item\n+    unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,\n     {\n-        // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n+        // SAFETY: the caller must guarantee that `i` is in bounds of the\n+        // `Vec<T>`, so `i` cannot overflow an `isize`, and the `self.ptr.add(i)`\n+        // is guaranteed to pointer to an element of the `Vec<T>` and\n+        // thus guaranteed to be valid to dereference.\n+        //\n+        // Also note the implementation of `Self: TrustedRandomAccess` requires\n+        // that `T: Copy` so reading elements from the buffer doesn't invalidate\n+        // them for `Drop`.\n         unsafe {\n             if mem::size_of::<T>() == 0 { mem::zeroed() } else { ptr::read(self.ptr.add(i)) }\n         }"}, {"sha": "a78da369c241bc71f54c92125c4deecd295e81c6", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -115,12 +115,13 @@ where\n     }\n \n     #[inline]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,\n     {\n         match self.iter {\n-            // SAFETY: the caller must uphold the contract for `Iterator::get_unchecked`.\n+            // SAFETY: the caller must uphold the contract for\n+            // `Iterator::__iterator_get_unchecked`.\n             Some(ref mut iter) => unsafe { try_get_unchecked(iter, idx) },\n             // SAFETY: the caller asserts there is an item at `i`, so we're not exhausted.\n             None => unsafe { intrinsics::unreachable() },"}, {"sha": "422e449b176b7c19c8672db3b8125a1a8f0899a3", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -285,12 +285,12 @@ where\n         self.it.count()\n     }\n \n-    unsafe fn get_unchecked(&mut self, idx: usize) -> T\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n+        // `Iterator::__iterator_get_unchecked`.\n         *unsafe { try_get_unchecked(&mut self.it, idx) }\n     }\n }\n@@ -420,12 +420,12 @@ where\n         self.it.map(T::clone).fold(init, f)\n     }\n \n-    unsafe fn get_unchecked(&mut self, idx: usize) -> T\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> T\n     where\n         Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n+        // `Iterator::__iterator_get_unchecked`.\n         unsafe { try_get_unchecked(&mut self.it, idx).clone() }\n     }\n }\n@@ -935,12 +935,12 @@ where\n         self.iter.fold(init, map_fold(self.f, g))\n     }\n \n-    unsafe fn get_unchecked(&mut self, idx: usize) -> B\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> B\n     where\n         Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n+        // `Iterator::__iterator_get_unchecked`.\n         unsafe { (self.f)(try_get_unchecked(&mut self.iter, idx)) }\n     }\n }\n@@ -1431,12 +1431,12 @@ where\n         self.iter.fold(init, enumerate(self.count, fold))\n     }\n \n-    unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n+        // `Iterator::__iterator_get_unchecked`.\n         let value = unsafe { try_get_unchecked(&mut self.iter, idx) };\n         (Add::add(self.count, idx), value)\n     }"}, {"sha": "78712988eaea70e1ad27703c4ce5d5508cc91733", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -59,12 +59,12 @@ where\n     }\n \n     #[inline]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,\n     {\n-        // SAFETY: `ZipImpl::get_unchecked` has same safety requirements as\n-        // `Iterator::get_unchecked`.\n+        // SAFETY: `ZipImpl::__iterator_get_unchecked` has same safety\n+        // requirements as `Iterator::__iterator_get_unchecked`.\n         unsafe { ZipImpl::get_unchecked(self, idx) }\n     }\n }\n@@ -93,7 +93,7 @@ trait ZipImpl<A, B> {\n     where\n         A: DoubleEndedIterator + ExactSizeIterator,\n         B: DoubleEndedIterator + ExactSizeIterator;\n-    // This has the same safety requirements as `Iterator::get_unchecked`\n+    // This has the same safety requirements as `Iterator::__iterator_get_unchecked`\n     unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: Iterator + TrustedRandomAccess;\n@@ -197,12 +197,14 @@ where\n             let i = self.index;\n             self.index += 1;\n             // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`\n-            unsafe { Some((self.a.get_unchecked(i), self.b.get_unchecked(i))) }\n+            unsafe {\n+                Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n+            }\n         } else if A::may_have_side_effect() && self.index < self.a.size() {\n             // match the base implementation's potential side effects\n             // SAFETY: we just checked that `self.index` < `self.a.len()`\n             unsafe {\n-                self.a.get_unchecked(self.index);\n+                self.a.__iterator_get_unchecked(self.index);\n             }\n             self.index += 1;\n             None\n@@ -229,13 +231,13 @@ where\n                 // ensures that `end` is smaller than or equal to `self.len`,\n                 // so `i` is also smaller than `self.len`.\n                 unsafe {\n-                    self.a.get_unchecked(i);\n+                    self.a.__iterator_get_unchecked(i);\n                 }\n             }\n             if B::may_have_side_effect() {\n                 // SAFETY: same as above.\n                 unsafe {\n-                    self.b.get_unchecked(i);\n+                    self.b.__iterator_get_unchecked(i);\n                 }\n             }\n         }\n@@ -277,7 +279,9 @@ where\n             let i = self.len;\n             // SAFETY: `i` is smaller than the previous value of `self.len`,\n             // which is also smaller than or equal to `self.a.len()` and `self.b.len()`\n-            unsafe { Some((self.a.get_unchecked(i), self.b.get_unchecked(i))) }\n+            unsafe {\n+                Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))\n+            }\n         } else {\n             None\n         }\n@@ -286,8 +290,8 @@ where\n     #[inline]\n     unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n-        unsafe { (self.a.get_unchecked(idx), self.b.get_unchecked(idx)) }\n+        // `Iterator::__iterator_get_unchecked`.\n+        unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }\n     }\n }\n \n@@ -386,8 +390,8 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///\n /// `size` may not be overridden.\n ///\n-/// `<Self as Iterator>::get_unchecked` must be safe to call provided the\n-/// following conditions are met.\n+/// `<Self as Iterator>::__iterator_get_unchecked` must be safe to call\n+/// provided the following conditions are met.\n ///\n /// 1. `0 <= idx` and `idx < self.size()`.\n /// 2. If `self: !Clone`, then `get_unchecked` is never called with the same\n@@ -399,7 +403,7 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n ///     * `std::clone::Clone::clone`\n ///     * `std::iter::Iterator::size_hint()`\n ///     * `std::iter::Iterator::next_back()`\n-///     * `std::iter::Iterator::get_unchecked()`\n+///     * `std::iter::Iterator::__iterator_get_unchecked()`\n ///     * `std::iter::TrustedRandomAccess::size()`\n ///\n /// Further, given that these conditions are met, it must guarantee that:\n@@ -424,7 +428,7 @@ pub unsafe trait TrustedRandomAccess: Sized {\n     fn may_have_side_effect() -> bool;\n }\n \n-/// Like `Iterator::get_unchecked`, but doesn't require the compiler to\n+/// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to\n /// know that `U: TrustedRandomAccess`.\n ///\n /// ## Safety\n@@ -436,13 +440,13 @@ where\n     I: Iterator,\n {\n     // SAFETY: the caller must uphold the contract for\n-    // `Iterator::get_unchecked`.\n+    // `Iterator::__iterator_get_unchecked`.\n     unsafe { it.try_get_unchecked(idx) }\n }\n \n unsafe trait SpecTrustedRandomAccess: Iterator {\n     /// If `Self: TrustedRandomAccess`, it must be safe to call a\n-    /// `Iterator::get_unchecked(self, index)`.\n+    /// `Iterator::__iterator_get_unchecked(self, index)`.\n     unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;\n }\n \n@@ -455,7 +459,7 @@ unsafe impl<I: Iterator> SpecTrustedRandomAccess for I {\n unsafe impl<I: Iterator + TrustedRandomAccess> SpecTrustedRandomAccess for I {\n     unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item {\n         // SAFETY: the caller must uphold the contract for\n-        // `Iterator::get_unchecked`.\n-        unsafe { self.get_unchecked(index) }\n+        // `Iterator::__iterator_get_unchecked`.\n+        unsafe { self.__iterator_get_unchecked(index) }\n     }\n }"}, {"sha": "a75f1d56fb7e63fa1f6b1922d4c9ffc7ba921601", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -3241,10 +3241,12 @@ pub trait Iterator {\n     }\n \n     /// See [TrustedRandomAccess]\n+    // The unusual name is to avoid name collisions in method resolution\n+    // see #76479.\n     #[inline]\n     #[doc(hidden)]\n     #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n-    unsafe fn get_unchecked(&mut self, _idx: usize) -> Self::Item\n+    unsafe fn __iterator_get_unchecked(&mut self, _idx: usize) -> Self::Item\n     where\n         Self: TrustedRandomAccess,\n     {"}, {"sha": "76b8aa7d82162dbad0613254a0c068820016e86a", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -1178,7 +1178,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         // SAFETY: since the caller guarantees that `i` is in bounds,\n         // which means that `i` cannot overflow an `isize`, and the\n         // slice created by `from_raw_parts` is a subslice of `self.v`\n@@ -1324,7 +1324,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         let end = match start.checked_add(self.chunk_size) {\n             None => self.v.len(),\n@@ -1480,13 +1480,13 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n         let end = match start.checked_add(self.chunk_size) {\n             None => self.v.len(),\n             Some(end) => cmp::min(end, self.v.len()),\n         };\n-        // SAFETY: see comments for `Chunks::get_unchecked`.\n+        // SAFETY: see comments for `Chunks::__iterator_get_unchecked`.\n         //\n         // Also note that the caller also guarantees that we're never called\n         // with the same index again, and that no other methods that will\n@@ -1642,9 +1642,9 @@ impl<'a, T> Iterator for ChunksExact<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        // SAFETY: mostly identical to `Chunks::get_unchecked`.\n+        // SAFETY: mostly identical to `Chunks::__iterator_get_unchecked`.\n         unsafe { from_raw_parts(self.v.as_ptr().add(start), self.chunk_size) }\n     }\n }\n@@ -1785,9 +1785,9 @@ impl<'a, T> Iterator for ChunksExactMut<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let start = idx * self.chunk_size;\n-        // SAFETY: see comments for `ChunksMut::get_unchecked`.\n+        // SAFETY: see comments for `ChunksMut::__iterator_get_unchecked`.\n         unsafe { from_raw_parts_mut(self.v.as_mut_ptr().add(start), self.chunk_size) }\n     }\n }\n@@ -2030,10 +2030,10 @@ impl<'a, T, const N: usize> Iterator for ArrayChunks<'a, T, N> {\n         self.iter.last()\n     }\n \n-    unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n-        // SAFETY: The safety guarantees of `get_unchecked` are transferred to\n-        // the caller.\n-        unsafe { self.iter.get_unchecked(i) }\n+    unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n+        // SAFETY: The safety guarantees of `__iterator_get_unchecked` are\n+        // transferred to the caller.\n+        unsafe { self.iter.__iterator_get_unchecked(i) }\n     }\n }\n \n@@ -2141,10 +2141,10 @@ impl<'a, T, const N: usize> Iterator for ArrayChunksMut<'a, T, N> {\n         self.iter.last()\n     }\n \n-    unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n-        // SAFETY: The safety guarantees of `get_unchecked` are transferred to\n+    unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> &'a mut [T; N] {\n+        // SAFETY: The safety guarantees of `__iterator_get_unchecked` are transferred to\n         // the caller.\n-        unsafe { self.iter.get_unchecked(i) }\n+        unsafe { self.iter.__iterator_get_unchecked(i) }\n     }\n }\n \n@@ -2278,13 +2278,13 @@ impl<'a, T> Iterator for RChunks<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = match end.checked_sub(self.chunk_size) {\n             None => 0,\n             Some(start) => start,\n         };\n-        // SAFETY: mostly identical to `Chunks::get_unchecked`.\n+        // SAFETY: mostly identical to `Chunks::__iterator_get_unchecked`.\n         unsafe { from_raw_parts(self.v.as_ptr().add(start), end - start) }\n     }\n }\n@@ -2431,13 +2431,14 @@ impl<'a, T> Iterator for RChunksMut<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = match end.checked_sub(self.chunk_size) {\n             None => 0,\n             Some(start) => start,\n         };\n-        // SAFETY: see comments for `RChunks::get_unchecked` and `ChunksMut::get_unchecked`\n+        // SAFETY: see comments for `RChunks::__iterator_get_unchecked` and\n+        // `ChunksMut::__iterator_get_unchecked`\n         unsafe { from_raw_parts_mut(self.v.as_mut_ptr().add(start), end - start) }\n     }\n }\n@@ -2585,11 +2586,11 @@ impl<'a, T> Iterator for RChunksExact<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = end - self.chunk_size;\n         // SAFETY:\n-        // SAFETY: mostmy identical to `Chunks::get_unchecked`.\n+        // SAFETY: mostmy identical to `Chunks::__iterator_get_unchecked`.\n         unsafe { from_raw_parts(self.v.as_ptr().add(start), self.chunk_size) }\n     }\n }\n@@ -2734,10 +2735,10 @@ impl<'a, T> Iterator for RChunksExactMut<'a, T> {\n     }\n \n     #[doc(hidden)]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n         let end = self.v.len() - idx * self.chunk_size;\n         let start = end - self.chunk_size;\n-        // SAFETY: see comments for `RChunksMut::get_unchecked`.\n+        // SAFETY: see comments for `RChunksMut::__iterator_get_unchecked`.\n         unsafe { from_raw_parts_mut(self.v.as_mut_ptr().add(start), self.chunk_size) }\n     }\n }"}, {"sha": "457b2a3605e8b87e33e497c47a3c67fbe5158025", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -318,7 +318,7 @@ macro_rules! iterator {\n             }\n \n             #[doc(hidden)]\n-            unsafe fn get_unchecked(&mut self, idx: usize) -> Self::Item {\n+            unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {\n                 // SAFETY: the caller must guarantee that `i` is in bounds of\n                 // the underlying slice, so `i` cannot overflow an `isize`, and\n                 // the returned references is guaranteed to refer to an element"}, {"sha": "e4a6b7e142a5179cd9eecc32d26367ba49f2f5b1", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043f6d747c15068f0053a0542e9b0f17ae7f4de4/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=043f6d747c15068f0053a0542e9b0f17ae7f4de4", "patch": "@@ -813,10 +813,10 @@ impl Iterator for Bytes<'_> {\n     }\n \n     #[inline]\n-    unsafe fn get_unchecked(&mut self, idx: usize) -> u8 {\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> u8 {\n         // SAFETY: the caller must uphold the safety contract\n-        // for `Iterator::get_unchecked`.\n-        unsafe { self.0.get_unchecked(idx) }\n+        // for `Iterator::__iterator_get_unchecked`.\n+        unsafe { self.0.__iterator_get_unchecked(idx) }\n     }\n }\n "}]}