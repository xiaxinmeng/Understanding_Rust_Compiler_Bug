{"sha": "f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "node_id": "C_kwDOAAsO6NoAKGYzZDNmMzUwY2NlYjZjZThkMjBlYzRiYWNlMDMyZjRhNjJhNDNjNGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-25T02:37:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-25T02:37:10Z"}, "message": "Rollup merge of #109355 - chenyukang:yukang/fix-108470, r=compiler-errors\n\nFix bad suggestion for clone/is_some in field init shorthand\n\nFixes #108470", "tree": {"sha": "b594e48b586c5ce0da813c1bf63b223684294190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b594e48b586c5ce0da813c1bf63b223684294190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHl5WCRBK7hj4Ov3rIwAA7fwIAJytqH4PbbpqbT5avpqD/YKR\nvpb2fyf4LQUV3akfVCW9JmigZvnuHWTO8zfKZX4Yay99fB7ScGL6HWCv6oH8KFV/\nj53AoKqS0jG9M9A2nqsjNyHrUd03OxIwMB/ildm3UAWMpLhn0qNZnM/zc6JJ6zdY\nM4CHFFvL6h+Njitld+2YYFs7CJwP2UFpCHRcmMxWBtzv9vZnaiUvLRL3Pek8ahpW\nrVG7TDccJvU9ginIa82f0PihNjyM6qENQzFF2DP7b7zidZMCsmFBlJRVV8zXJ7uL\ncwx4+gnJws2ccD0t97ZyFYRFJpqFlq5li8EwNZ0UQWhL3WWiNN5cpqG+6im+QCg=\n=sc8z\n-----END PGP SIGNATURE-----\n", "payload": "tree b594e48b586c5ce0da813c1bf63b223684294190\nparent d012d2f96e2959267b14812929b85e17a155f653\nparent 64f6e4f21ccd8e0ed1f4bb32abe525b4f6ab87c1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679711830 +0100\ncommitter GitHub <noreply@github.com> 1679711830 +0100\n\nRollup merge of #109355 - chenyukang:yukang/fix-108470, r=compiler-errors\n\nFix bad suggestion for clone/is_some in field init shorthand\n\nFixes #108470\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "html_url": "https://github.com/rust-lang/rust/commit/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d012d2f96e2959267b14812929b85e17a155f653", "url": "https://api.github.com/repos/rust-lang/rust/commits/d012d2f96e2959267b14812929b85e17a155f653", "html_url": "https://github.com/rust-lang/rust/commit/d012d2f96e2959267b14812929b85e17a155f653"}, {"sha": "64f6e4f21ccd8e0ed1f4bb32abe525b4f6ab87c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f6e4f21ccd8e0ed1f4bb32abe525b4f6ab87c1", "html_url": "https://github.com/rust-lang/rust/commit/64f6e4f21ccd8e0ed1f4bb32abe525b4f6ab87c1"}], "stats": {"total": 114, "additions": 104, "deletions": 10}, "files": [{"sha": "5fda4e191c2a003f447f0016f6659295de62a002", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "patch": "@@ -983,13 +983,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 )\n                 .must_apply_modulo_regions()\n           {\n-              diag.span_suggestion_verbose(\n-                  expr.span.shrink_to_hi(),\n-                  \"consider using clone here\",\n-                  \".clone()\",\n-                  Applicability::MachineApplicable,\n-              );\n-              return true;\n+            let suggestion = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+                Some(ident) => format!(\": {}.clone()\", ident),\n+                None => \".clone()\".to_string()\n+            };\n+\n+            diag.span_suggestion_verbose(\n+                expr.span.shrink_to_hi(),\n+                \"consider using clone here\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n+            return true;\n           }\n         false\n     }\n@@ -1150,13 +1155,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        diag.span_suggestion(\n+        let suggestion = match self.maybe_get_struct_pattern_shorthand_field(expr) {\n+            Some(ident) => format!(\": {}.is_some()\", ident),\n+            None => \".is_some()\".to_string(),\n+        };\n+\n+        diag.span_suggestion_verbose(\n             expr.span.shrink_to_hi(),\n             \"use `Option::is_some` to test if the `Option` has a value\",\n-            \".is_some()\",\n+            suggestion,\n             Applicability::MachineApplicable,\n         );\n-\n         true\n     }\n "}, {"sha": "9d15c4a8fcb9088579cb0b2f2accce92d56b495e", "filename": "tests/ui/suggestions/issue-108470.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-108470.fixed?ref=f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    t: Thing\n+}\n+\n+#[derive(Clone)]\n+struct Thing;\n+\n+fn test_clone() {\n+    let t = &Thing;\n+    let _f = Foo {\n+        t: t.clone() //~ ERROR mismatched types\n+    };\n+}\n+\n+struct Bar {\n+    t: bool\n+}\n+\n+fn test_is_some() {\n+    let t = Option::<i32>::Some(1);\n+    let _f = Bar {\n+        t: t.is_some() //~ ERROR mismatched types\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "bda39085d4db5d4ad68ce599eae27812e437042e", "filename": "tests/ui/suggestions/issue-108470.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-108470.rs?ref=f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Foo {\n+    t: Thing\n+}\n+\n+#[derive(Clone)]\n+struct Thing;\n+\n+fn test_clone() {\n+    let t = &Thing;\n+    let _f = Foo {\n+        t //~ ERROR mismatched types\n+    };\n+}\n+\n+struct Bar {\n+    t: bool\n+}\n+\n+fn test_is_some() {\n+    let t = Option::<i32>::Some(1);\n+    let _f = Bar {\n+        t //~ ERROR mismatched types\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "4e561eca73426b04ee679d6ef814b1d7085a4c68", "filename": "tests/ui/suggestions/issue-108470.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e/tests%2Fui%2Fsuggestions%2Fissue-108470.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-108470.stderr?ref=f3d3f350cceb6ce8d20ec4bace032f4a62a43c4e", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-108470.rs:14:9\n+   |\n+LL |         t\n+   |         ^ expected `Thing`, found `&Thing`\n+   |\n+help: consider using clone here\n+   |\n+LL |         t: t.clone()\n+   |          +++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-108470.rs:25:9\n+   |\n+LL |         t\n+   |         ^ expected `bool`, found `Option<i32>`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<i32>`\n+help: use `Option::is_some` to test if the `Option` has a value\n+   |\n+LL |         t: t.is_some()\n+   |          +++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}