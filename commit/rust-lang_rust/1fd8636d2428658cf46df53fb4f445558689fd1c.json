{"sha": "1fd8636d2428658cf46df53fb4f445558689fd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZDg2MzZkMjQyODY1OGNmNDZkZjUzZmI0ZjQ0NTU1ODY4OWZkMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T13:30:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T13:30:13Z"}, "message": "Auto merge of #76159 - matklad:rollup-8jydjg3, r=matklad\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #75938 (Added some `min_const_generics` revisions into `const_generics` tests)\n - #76050 (Remove unused function)\n - #76075 (datastructures: replace `once_cell` crate with an impl from std)\n - #76115 (Restore public visibility on some parsing functions for rustfmt)\n - #76127 (rustbuild: Remove one LLD workaround)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "80c3f9bec7279f5d98c0d7e77588d2754072ee5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80c3f9bec7279f5d98c0d7e77588d2754072ee5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fd8636d2428658cf46df53fb4f445558689fd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd8636d2428658cf46df53fb4f445558689fd1c", "html_url": "https://github.com/rust-lang/rust/commit/1fd8636d2428658cf46df53fb4f445558689fd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fd8636d2428658cf46df53fb4f445558689fd1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4797cb598260b96dd8d6e47cd429210e14c1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4797cb598260b96dd8d6e47cd429210e14c1f6", "html_url": "https://github.com/rust-lang/rust/commit/3b4797cb598260b96dd8d6e47cd429210e14c1f6"}, {"sha": "9caf08f05291276288defa6fba7a4fb5c0e56ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/9caf08f05291276288defa6fba7a4fb5c0e56ade", "html_url": "https://github.com/rust-lang/rust/commit/9caf08f05291276288defa6fba7a4fb5c0e56ade"}], "stats": {"total": 1583, "additions": 915, "deletions": 668}, "files": [{"sha": "13d9a962e37a9e6c7e719a49be0bdcf17eb908eb", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -3420,7 +3420,6 @@ dependencies = [\n  \"lazy_static\",\n  \"libc\",\n  \"measureme\",\n- \"once_cell\",\n  \"parking_lot 0.10.2\",\n  \"rustc-hash\",\n  \"rustc-rayon\","}, {"sha": "464f8c984dde8b90dfa21a0ca31d7a5f3ccb67be", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -13,7 +13,6 @@ indexmap = \"1.5.1\"\n tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n lazy_static = \"1\"\n-once_cell = { version = \"1\", features = [\"parking_lot\"] }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }"}, {"sha": "78b7e08ceedeffb88b74477a439933e5685ed112", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -26,6 +26,7 @@\n #![feature(extend_one)]\n #![feature(const_panic)]\n #![feature(const_generics)]\n+#![feature(once_cell)]\n #![allow(rustc::default_hash_types)]\n \n #[macro_use]"}, {"sha": "d22f3adfb016dbac9f309039757d0df57614fe7b", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -229,7 +229,7 @@ cfg_if! {\n         pub use std::cell::RefMut as LockGuard;\n         pub use std::cell::RefMut as MappedLockGuard;\n \n-        pub use once_cell::unsync::OnceCell;\n+        pub use std::lazy::OnceCell;\n \n         use std::cell::RefCell as InnerRwLock;\n         use std::cell::RefCell as InnerLock;\n@@ -314,7 +314,7 @@ cfg_if! {\n         pub use parking_lot::MutexGuard as LockGuard;\n         pub use parking_lot::MappedMutexGuard as MappedLockGuard;\n \n-        pub use once_cell::sync::OnceCell;\n+        pub use std::lazy::SyncOnceCell as OnceCell;\n \n         pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n "}, {"sha": "0d8332a20aea457ab1bad6955fbcd5dbaa837d2b", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -6,6 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "5436b1ef737f519ba7980bafaf62cbbf4ddb9ccc", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -39,11 +39,6 @@ mod tests;\n mod parse {\n     #[cfg(test)]\n     mod tests;\n-    #[cfg(test)]\n-    mod lexer {\n-        #[cfg(test)]\n-        mod tests;\n-    }\n }\n #[cfg(test)]\n mod tokenstream {"}, {"sha": "871844442839cf7fd27f1a735de3cb7be9dbc7b8", "filename": "compiler/rustc_expand/src/parse/lexer/tests.rs", "status": "removed", "additions": 0, "deletions": 252, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/compiler%2Frustc_expand%2Fsrc%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/compiler%2Frustc_expand%2Fsrc%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Flexer%2Ftests.rs?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,252 +0,0 @@\n-use rustc_ast::ast::AttrStyle;\n-use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n-use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{emitter::EmitterWriter, Handler};\n-use rustc_parse::lexer::StringReader;\n-use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::symbol::Symbol;\n-use rustc_span::with_default_session_globals;\n-use rustc_span::{BytePos, Span};\n-\n-use std::io;\n-use std::path::PathBuf;\n-\n-fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n-    let emitter = EmitterWriter::new(\n-        Box::new(io::sink()),\n-        Some(sm.clone()),\n-        false,\n-        false,\n-        false,\n-        None,\n-        false,\n-    );\n-    ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n-}\n-\n-// Creates a string reader for the given string.\n-fn setup<'a>(sm: &SourceMap, sess: &'a ParseSess, teststr: String) -> StringReader<'a> {\n-    let sf = sm.new_source_file(PathBuf::from(teststr.clone()).into(), teststr);\n-    StringReader::new(sess, sf, None)\n-}\n-\n-#[test]\n-fn t1() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        let mut string_reader = setup(\n-            &sm,\n-            &sh,\n-            \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\".to_string(),\n-        );\n-        assert_eq!(string_reader.next_token(), token::Comment);\n-        assert_eq!(string_reader.next_token(), token::Whitespace);\n-        let tok1 = string_reader.next_token();\n-        let tok2 = Token::new(mk_ident(\"fn\"), Span::with_root_ctxt(BytePos(21), BytePos(23)));\n-        assert_eq!(tok1.kind, tok2.kind);\n-        assert_eq!(tok1.span, tok2.span);\n-        assert_eq!(string_reader.next_token(), token::Whitespace);\n-        // Read another token.\n-        let tok3 = string_reader.next_token();\n-        assert_eq!(string_reader.pos(), BytePos(28));\n-        let tok4 = Token::new(mk_ident(\"main\"), Span::with_root_ctxt(BytePos(24), BytePos(28)));\n-        assert_eq!(tok3.kind, tok4.kind);\n-        assert_eq!(tok3.span, tok4.span);\n-\n-        assert_eq!(string_reader.next_token(), token::OpenDelim(token::Paren));\n-        assert_eq!(string_reader.pos(), BytePos(29))\n-    })\n-}\n-\n-// Checks that the given reader produces the desired stream\n-// of tokens (stop checking after exhausting `expected`).\n-fn check_tokenization(mut string_reader: StringReader<'_>, expected: Vec<TokenKind>) {\n-    for expected_tok in &expected {\n-        assert_eq!(&string_reader.next_token(), expected_tok);\n-    }\n-}\n-\n-// Makes the identifier by looking up the string in the interner.\n-fn mk_ident(id: &str) -> TokenKind {\n-    token::Ident(Symbol::intern(id), false)\n-}\n-\n-fn mk_lit(kind: token::LitKind, symbol: &str, suffix: Option<&str>) -> TokenKind {\n-    TokenKind::lit(kind, Symbol::intern(symbol), suffix.map(Symbol::intern))\n-}\n-\n-#[test]\n-fn doublecolon_parsing() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        check_tokenization(\n-            setup(&sm, &sh, \"a b\".to_string()),\n-            vec![mk_ident(\"a\"), token::Whitespace, mk_ident(\"b\")],\n-        );\n-    })\n-}\n-\n-#[test]\n-fn doublecolon_parsing_2() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        check_tokenization(\n-            setup(&sm, &sh, \"a::b\".to_string()),\n-            vec![mk_ident(\"a\"), token::Colon, token::Colon, mk_ident(\"b\")],\n-        );\n-    })\n-}\n-\n-#[test]\n-fn doublecolon_parsing_3() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        check_tokenization(\n-            setup(&sm, &sh, \"a ::b\".to_string()),\n-            vec![mk_ident(\"a\"), token::Whitespace, token::Colon, token::Colon, mk_ident(\"b\")],\n-        );\n-    })\n-}\n-\n-#[test]\n-fn doublecolon_parsing_4() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        check_tokenization(\n-            setup(&sm, &sh, \"a:: b\".to_string()),\n-            vec![mk_ident(\"a\"), token::Colon, token::Colon, token::Whitespace, mk_ident(\"b\")],\n-        );\n-    })\n-}\n-\n-#[test]\n-fn character_a() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token(), mk_lit(token::Char, \"a\", None),);\n-    })\n-}\n-\n-#[test]\n-fn character_space() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token(), mk_lit(token::Char, \" \", None),);\n-    })\n-}\n-\n-#[test]\n-fn character_escaped() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        assert_eq!(\n-            setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token(),\n-            mk_lit(token::Char, \"\\\\n\", None),\n-        );\n-    })\n-}\n-\n-#[test]\n-fn lifetime_name() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        assert_eq!(\n-            setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n-            token::Lifetime(Symbol::intern(\"'abc\")),\n-        );\n-    })\n-}\n-\n-#[test]\n-fn raw_string() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        assert_eq!(\n-            setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string()).next_token(),\n-            mk_lit(token::StrRaw(3), \"\\\"#a\\\\b\\x00c\\\"\", None),\n-        );\n-    })\n-}\n-\n-#[test]\n-fn literal_suffixes() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        macro_rules! test {\n-            ($input: expr, $tok_type: ident, $tok_contents: expr) => {{\n-                assert_eq!(\n-                    setup(&sm, &sh, format!(\"{}suffix\", $input)).next_token(),\n-                    mk_lit(token::$tok_type, $tok_contents, Some(\"suffix\")),\n-                );\n-                // with a whitespace separator\n-                assert_eq!(\n-                    setup(&sm, &sh, format!(\"{} suffix\", $input)).next_token(),\n-                    mk_lit(token::$tok_type, $tok_contents, None),\n-                );\n-            }};\n-        }\n-\n-        test!(\"'a'\", Char, \"a\");\n-        test!(\"b'a'\", Byte, \"a\");\n-        test!(\"\\\"a\\\"\", Str, \"a\");\n-        test!(\"b\\\"a\\\"\", ByteStr, \"a\");\n-        test!(\"1234\", Integer, \"1234\");\n-        test!(\"0b101\", Integer, \"0b101\");\n-        test!(\"0xABC\", Integer, \"0xABC\");\n-        test!(\"1.0\", Float, \"1.0\");\n-        test!(\"1.0e10\", Float, \"1.0e10\");\n-\n-        assert_eq!(\n-            setup(&sm, &sh, \"2us\".to_string()).next_token(),\n-            mk_lit(token::Integer, \"2\", Some(\"us\")),\n-        );\n-        assert_eq!(\n-            setup(&sm, &sh, \"r###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-            mk_lit(token::StrRaw(3), \"raw\", Some(\"suffix\")),\n-        );\n-        assert_eq!(\n-            setup(&sm, &sh, \"br###\\\"raw\\\"###suffix\".to_string()).next_token(),\n-            mk_lit(token::ByteStrRaw(3), \"raw\", Some(\"suffix\")),\n-        );\n-    })\n-}\n-\n-#[test]\n-fn nested_block_comments() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        let mut lexer = setup(&sm, &sh, \"/* /* */ */'a'\".to_string());\n-        assert_eq!(lexer.next_token(), token::Comment);\n-        assert_eq!(lexer.next_token(), mk_lit(token::Char, \"a\", None));\n-    })\n-}\n-\n-#[test]\n-fn crlf_comments() {\n-    with_default_session_globals(|| {\n-        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let sh = mk_sess(sm.clone());\n-        let mut lexer = setup(&sm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());\n-        let comment = lexer.next_token();\n-        assert_eq!(comment.kind, token::Comment);\n-        assert_eq!((comment.span.lo(), comment.span.hi()), (BytePos(0), BytePos(7)));\n-        assert_eq!(lexer.next_token(), token::Whitespace);\n-        assert_eq!(\n-            lexer.next_token(),\n-            token::DocComment(CommentKind::Line, AttrStyle::Outer, Symbol::intern(\" test\"))\n-        );\n-    })\n-}"}, {"sha": "88d2efe96d16250c6bc2ea10da3abc1841d33c7e", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -4,6 +4,7 @@\n #![feature(nll)]\n #![feature(generator_trait)]\n #![feature(generators)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n \n mod callbacks;"}, {"sha": "94017b7b286e2bd79f364ad117bf54d2259a94ee", "filename": "compiler/rustc_lexer/src/tests.rs", "status": "modified", "additions": 140, "deletions": 20, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Ftests.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -128,6 +128,34 @@ fn check_lexing(src: &str, expect: Expect) {\n     expect.assert_eq(&actual)\n }\n \n+#[test]\n+fn smoke_test() {\n+    check_lexing(\n+        \"/* my source file */ fn main() { println!(\\\"zebra\\\"); }\\n\",\n+        expect![[r#\"\n+            Token { kind: BlockComment { doc_style: None, terminated: true }, len: 20 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Ident, len: 2 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Ident, len: 4 }\n+            Token { kind: OpenParen, len: 1 }\n+            Token { kind: CloseParen, len: 1 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: OpenBrace, len: 1 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Ident, len: 7 }\n+            Token { kind: Bang, len: 1 }\n+            Token { kind: OpenParen, len: 1 }\n+            Token { kind: Literal { kind: Str { terminated: true }, suffix_start: 7 }, len: 7 }\n+            Token { kind: CloseParen, len: 1 }\n+            Token { kind: Semi, len: 1 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: CloseBrace, len: 1 }\n+            Token { kind: Whitespace, len: 1 }\n+        \"#]],\n+    )\n+}\n+\n #[test]\n fn comment_flavors() {\n     check_lexing(\n@@ -143,25 +171,117 @@ fn comment_flavors() {\n /*! inner doc block */\n \",\n         expect![[r#\"\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: LineComment { doc_style: None }, len: 7 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: LineComment { doc_style: None }, len: 17 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: LineComment { doc_style: Some(Outer) }, len: 18 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: LineComment { doc_style: Some(Inner) }, len: 18 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 11 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 4 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: BlockComment { doc_style: None, terminated: true }, len: 18 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: BlockComment { doc_style: Some(Outer), terminated: true }, len: 22 }\n-                Token { kind: Whitespace, len: 1 }\n-                Token { kind: BlockComment { doc_style: Some(Inner), terminated: true }, len: 22 }\n-                Token { kind: Whitespace, len: 1 }\n-            \"#]],\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: LineComment { doc_style: None }, len: 7 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: LineComment { doc_style: None }, len: 17 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: LineComment { doc_style: Some(Outer) }, len: 18 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: LineComment { doc_style: Some(Inner) }, len: 18 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: BlockComment { doc_style: None, terminated: true }, len: 11 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: BlockComment { doc_style: None, terminated: true }, len: 4 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: BlockComment { doc_style: None, terminated: true }, len: 18 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: BlockComment { doc_style: Some(Outer), terminated: true }, len: 22 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: BlockComment { doc_style: Some(Inner), terminated: true }, len: 22 }\n+            Token { kind: Whitespace, len: 1 }\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn nested_block_comments() {\n+    check_lexing(\n+        \"/* /* */ */'a'\",\n+        expect![[r#\"\n+            Token { kind: BlockComment { doc_style: None, terminated: true }, len: 11 }\n+            Token { kind: Literal { kind: Char { terminated: true }, suffix_start: 3 }, len: 3 }\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn characters() {\n+    check_lexing(\n+        \"'a' ' ' '\\\\n'\",\n+        expect![[r#\"\n+            Token { kind: Literal { kind: Char { terminated: true }, suffix_start: 3 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Char { terminated: true }, suffix_start: 3 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Char { terminated: true }, suffix_start: 4 }, len: 4 }\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn lifetime() {\n+    check_lexing(\n+        \"'abc\",\n+        expect![[r#\"\n+            Token { kind: Lifetime { starts_with_number: false }, len: 4 }\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn raw_string() {\n+    check_lexing(\n+        \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\",\n+        expect![[r#\"\n+            Token { kind: Literal { kind: RawStr { n_hashes: 3, err: None }, suffix_start: 17 }, len: 17 }\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn literal_suffixes() {\n+    check_lexing(\n+        r####\"\n+'a'\n+b'a'\n+\"a\"\n+b\"a\"\n+1234\n+0b101\n+0xABC\n+1.0\n+1.0e10\n+2us\n+r###\"raw\"###suffix\n+br###\"raw\"###suffix\n+\"####,\n+        expect![[r#\"\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Char { terminated: true }, suffix_start: 3 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Byte { terminated: true }, suffix_start: 4 }, len: 4 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Str { terminated: true }, suffix_start: 3 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: ByteStr { terminated: true }, suffix_start: 4 }, len: 4 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Int { base: Decimal, empty_int: false }, suffix_start: 4 }, len: 4 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Int { base: Binary, empty_int: false }, suffix_start: 5 }, len: 5 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Int { base: Hexadecimal, empty_int: false }, suffix_start: 5 }, len: 5 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Float { base: Decimal, empty_exponent: false }, suffix_start: 3 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Float { base: Decimal, empty_exponent: false }, suffix_start: 6 }, len: 6 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: Int { base: Decimal, empty_int: false }, suffix_start: 1 }, len: 3 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: RawStr { n_hashes: 3, err: None }, suffix_start: 12 }, len: 18 }\n+            Token { kind: Whitespace, len: 1 }\n+            Token { kind: Literal { kind: RawByteStr { n_hashes: 3, err: None }, suffix_start: 13 }, len: 19 }\n+            Token { kind: Whitespace, len: 1 }\n+        \"#]],\n     )\n }"}, {"sha": "a675aae5b17d421c81354f86429cfd73fb996cf2", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -38,6 +38,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(extern_types)]\n #![feature(nll)]\n+#![feature(once_cell)]\n #![feature(option_expect_none)]\n #![feature(or_patterns)]\n #![feature(min_specialization)]"}, {"sha": "c4ef35bc30c70928da1e1670567e173895e7381c", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -439,10 +439,6 @@ impl<'a> StringReader<'a> {\n         (lit_kind, id)\n     }\n \n-    pub fn pos(&self) -> BytePos {\n-        self.pos\n-    }\n-\n     #[inline]\n     fn src_index(&self, pos: BytePos) -> usize {\n         (pos - self.start_pos).to_usize()"}, {"sha": "d90a61cd34af55342abc786c2fa5fd961293ec40", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1014,7 +1014,8 @@ impl<'a> Parser<'a> {\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses isn't valid,\n     /// so emit a proper diagnostic.\n-    pub(crate) fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n+    // Public for rustfmt usage.\n+    pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);\n \n         self.expected_tokens.push(TokenType::Keyword(kw::Crate));"}, {"sha": "0f522fd788c86a3b900220fb8d04d0a72c026f40", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -21,7 +21,8 @@ use std::mem;\n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n     /// e.g., a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.\n-    pub(super) fn parse_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n+    // Public for rustfmt usage.\n+    pub fn parse_stmt(&mut self) -> PResult<'a, Option<Stmt>> {\n         Ok(self.parse_stmt_without_recovery().unwrap_or_else(|mut e| {\n             e.emit();\n             self.recover_stmt_(SemiColonMode::Break, BlockMode::Ignore);"}, {"sha": "a808261798da7ea97b1efee97d8a61f5e4c354ed", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(once_cell)]\n #![feature(or_patterns)]\n \n #[macro_use]"}, {"sha": "cecc9ef75ea861155b7a42207ab14589ee9c67b0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1041,15 +1041,11 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        // FIXME: Don't use LLD with MSVC if we're compiling libtest, since it fails to link it.\n-        // See https://github.com/rust-lang/rust/issues/68647.\n-        let can_use_lld = mode != Mode::Std;\n-\n-        if let Some(host_linker) = self.linker(compiler.host, can_use_lld) {\n+        if let Some(host_linker) = self.linker(compiler.host, true) {\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }\n \n-        if let Some(target_linker) = self.linker(target, can_use_lld) {\n+        if let Some(target_linker) = self.linker(target, true) {\n             let target = crate::envify(&target.triple);\n             cargo.env(&format!(\"CARGO_TARGET_{}_LINKER\", target), target_linker);\n         }"}, {"sha": "b52e505070330d912bfdd4912eff2b8cf1ab0fea", "filename": "src/test/ui/const-generics/argument_order.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,11 +1,11 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/argument_order.rs:9:32\n+  --> $DIR/argument_order.rs:12:32\n    |\n LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n    |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then consts and types: `<'a, 'b, const N: usize, T, const M: usize, U>`\n \n error[E0747]: lifetime provided when a type was expected\n-  --> $DIR/argument_order.rs:16:23\n+  --> $DIR/argument_order.rs:20:23\n    |\n LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n    |                       ^^^^^^^", "previous_filename": "src/test/ui/const-generics/argument_order.stderr"}, {"sha": "728ae69b41f19f77d770c876d268329b2b436254", "filename": "src/test/ui/const-generics/argument_order.min.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,30 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:6:28\n+   |\n+LL | struct Bad<const N: usize, T> {\n+   |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n+\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:12:32\n+   |\n+LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n+   |               -----------------^^-----^^-------------------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:12:36\n+   |\n+LL | struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n+   |               ---------------------^----------------------^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b, T, U, const N: usize, const M: usize>`\n+\n+error[E0747]: lifetime provided when a type was expected\n+  --> $DIR/argument_order.rs:20:23\n+   |\n+LL |     let _: AlsoBad<7, 'static, u32, 'static, 17, u16>;\n+   |                       ^^^^^^^\n+   |\n+   = note: lifetime arguments must be provided before type arguments\n+   = help: reorder the arguments: lifetimes, then types, then consts: `<'a, 'b, T, U, N, M>`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "507baf5fd755eeb58e04f80e57d14087846abc74", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,13 +1,17 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bad<const N: usize, T> {\n+    //[min]~^ ERROR type parameters must be declared prior to const parameters\n     arr: [u8; { N }],\n     another: T,\n }\n \n struct AlsoBad<const N: usize, 'a, T, 'b, const M: usize, U> {\n     //~^ ERROR lifetime parameters must be declared prior\n+    //[min]~^^ ERROR type parameters must be declared prior to const parameters\n     a: &'a T,\n     b: &'b U,\n }"}, {"sha": "390b6cc2049e546eed3cdb4cebc9ad1ff2a62357", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #![allow(dead_code)]\n "}, {"sha": "e6eb2a0a78303ff7e9bc8557efeed159bd7592fe", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/array-wrapper-struct-ctor.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "931f6ade7f15c88dc78c269b1c978b78c6741b19", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // This test confirms that the types can be inferred correctly for this example with const\n // generics. Previously this would ICE, and more recently error."}, {"sha": "c5c48d7be46895123d03a9f0935675e060c35793", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/cannot-infer-type-for-const-param.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3827002ff4bc6fa06c5a41e03fffb234fa2a3847", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: constant provided when a type was expected\n-  --> $DIR/const-arg-type-arg-misordered.rs:6:35\n+  --> $DIR/const-arg-type-arg-misordered.rs:8:35\n    |\n LL | fn foo<const N: usize>() -> Array<N, ()> {\n    |                                   ^", "previous_filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr"}, {"sha": "2c5fc8dcc01fc98a3c2a45174d2c4e93b5d7af8a", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,12 @@\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/const-arg-type-arg-misordered.rs:8:35\n+   |\n+LL | fn foo<const N: usize>() -> Array<N, ()> {\n+   |                                   ^\n+   |\n+   = note: type arguments must be provided before constant arguments\n+   = help: reorder the arguments: types, then consts: `<T, N>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "6680f772fa3fea7705ae14b2aae9de01d0fab40b", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,9 +1,12 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n type Array<T, const N: usize> = [T; N];\n \n-fn foo<const N: usize>() -> Array<N, ()> { //~ ERROR constant provided when a type was expected\n+fn foo<const N: usize>() -> Array<N, ()> {\n+    //~^ ERROR constant provided when a type was expected\n     unimplemented!()\n }\n "}, {"sha": "c2acaabbd8832cecba0b8bfbf43cc02404bef244", "filename": "src/test/ui/const-generics/const-param-before-other-params.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,5 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:4:21\n+  --> $DIR/const-param-before-other-params.rs:6:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const X: ()>`", "previous_filename": "src/test/ui/const-generics/const-param-before-other-params.stderr"}, {"sha": "c7e6d1be421610b19a7fde14478d6c6f68bac6c3", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,32 @@\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/const-param-before-other-params.rs:6:21\n+   |\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/const-param-before-other-params.rs:11:21\n+   |\n+LL | fn foo<const X: (), T>(_: &T) {}\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+\n+error: `()` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-param-before-other-params.rs:6:17\n+   |\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |                 ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `()` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-param-before-other-params.rs:11:17\n+   |\n+LL | fn foo<const X: (), T>(_: &T) {}\n+   |                 ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f1be90cf2e418a62413c151c84e61c9c77b71121", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,10 +1,15 @@\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n+    //[min]~^^ ERROR `()` is forbidden as the type of a const generic parameter\n }\n \n fn foo<const X: (), T>(_: &T) {}\n+//[min]~^ ERROR type parameters must be declared prior to const parameters\n+//[min]~^^ ERROR `()` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "a20c7264acfdda5460eb50b281231ed12a88c834", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,9 @@\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "e6d9fb7a246836c763aa8ae4d87b77406cd86578", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,18 @@\n+error: `&'static (dyn A + 'static)` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:10:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "2194eb97a410740802c64b8eafc8c761ab3991ed", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,12 +1,15 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait A {}\n struct B;\n impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden\n     unimplemented!()\n }\n "}, {"sha": "32054e43716cb39cff3e499a04e8e55b7d429fb7", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,18 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-63322-forbid-dyn.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:8:18\n-   |\n-LL | fn test<const T: &'static dyn A>() {\n-   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "a97ec9308f814f86230bfb8ebf3e681f07c01189", "filename": "src/test/ui/const-generics/issues/issue-64494.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,13 +1,13 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:14:53\n+  --> $DIR/issue-64494.rs:16:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                                     ^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-64494.rs:16:53\n+  --> $DIR/issue-64494.rs:19:53\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                                     ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-64494.stderr"}, {"sha": "69fe0974a791a166040d65a526d756fad617d37c", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,28 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-64494.rs:16:38\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n+   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-64494.rs:19:38\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n+   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |\n+   = help: it is currently only allowed to use either `T` or `{ T }` as generic constants\n+\n+error[E0119]: conflicting implementations of trait `MyTrait`:\n+  --> $DIR/issue-64494.rs:19:1\n+   |\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n+   | ------------------------------------ first implementation here\n+...\n+LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "3b598a415223ac7bf9a3af5adac1d183753aec68", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo {\n     const VAL: usize;\n@@ -12,8 +14,11 @@ struct Is<const T: bool>;\n impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n-//~^ ERROR constant expression depends on a generic parameter\n+//[full]~^ ERROR constant expression depends on a generic parameter\n+//[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n+//[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "1ca709d09755bc7bc71a0cf82acb1ab3999279cc", "filename": "src/test/ui/const-generics/issues/issue-64519.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64519.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const D: usize> {\n     state: Option<[u8; D]>,"}, {"sha": "a1520912e4e2bb2930f3c8ec401722043e33616b", "filename": "src/test/ui/const-generics/issues/issue-66205.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-66205.rs:8:12\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |            ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "86709c389b623d04c0064cfbdd758c910838802f", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,10 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-66205.rs:8:14\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |              ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to previous error\n+"}, {"sha": "e115eff356a7f51d2e5302893e39e09057fac01b", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,10 +1,13 @@\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![allow(dead_code, unconditional_recursion)]\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial constant values\n }\n \n fn main() {}"}, {"sha": "1e9c0f2f3d9eb175e34479b6936157180decaf88", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66205.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-66205.rs:6:12\n-   |\n-LL |     fact::<{ N - 1 }>();\n-   |            ^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "3e048593c9b2ca8dc156199c0849b9112b13027b", "filename": "src/test/ui/const-generics/issues/issue-66906.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct Tuple;\n "}, {"sha": "8e8b552f90eb5604e56264ae8f6b0d6f73664c8c", "filename": "src/test/ui/const-generics/issues/issue-66906.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66906.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-66906.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "09d88ef89a308f86998e130d2c9ed42c0641ce91", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Baz {\n     type Quaks;"}, {"sha": "9cc797d6d8a017b704cf77c2830ec0f68e19b7fd", "filename": "src/test/ui/const-generics/issues/issue-67185-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-67185-1.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "3b27d4d68c5d440bd8954de299fc1c99d503b261", "filename": "src/test/ui/const-generics/issues/issue-68596.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68596.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub struct S(u8);\n "}, {"sha": "81c8f4392c735e9288633ea15796f998485f4959", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,11 @@\n+error: `[usize; 0]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-68615-adt.rs:7:23\n+   |\n+LL | struct Const<const V: [usize; 0]> {}\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d616f3ab95a822581724dbae5dc78ab573ef2a38", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,8 +1,11 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 0]> {}\n+//[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter\n type MyConst = Const<{ [] }>;\n \n fn main() {"}, {"sha": "8f55a92fce9af58abfb5dbd297ff12f06374c315", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,11 @@\n+error: `[usize; 0]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-68615-array.rs:7:21\n+   |\n+LL | struct Foo<const V: [usize; 0] > {}\n+   |                     ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "24c9a59a1855f04d9ba1d415a5ecc7585cd2bcf3", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,8 +1,11 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo<const V: [usize; 0] > {}\n+//[min]~^ ERROR `[usize; 0]` is forbidden as the type of a const generic parameter\n \n type MyFoo = Foo<{ [] }>;\n "}, {"sha": "3690bac3eb342fc1bf2fa732d1422ca70275b052", "filename": "src/test/ui/const-generics/issues/issue-68977.full.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-68977.rs:35:44\n+   |\n+LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n+   |                                            ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "5b2137b244cb26a4234095ee04ed6a598a890567", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68977.rs:29:17\n+   |\n+LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+   |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n+   |\n+   = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/issue-68977.rs:29:28\n+   |\n+LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+   |                            ^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `FRAC_BITS`\n+   |\n+   = help: it is currently only allowed to use either `FRAC_BITS` or `{ FRAC_BITS }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e634efec3e7198b4d2c1070c447f28f6cd358c", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct PhantomU8<const X: u8>;\n \n@@ -25,11 +27,13 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+    //[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n+    //[min]~| ERROR generic parameters must not be used inside of non trivial constant values\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where\n     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n {\n     storage: <FxpStorageHelper<INT_BITS, FRAC_BITS> as FxpStorage>::SInt,\n }"}, {"sha": "e1190d9026da9d70fee5fe87b5b276667b4d936e", "filename": "src/test/ui/const-generics/issues/issue-68977.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,19 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-68977.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-68977.rs:31:44\n-   |\n-LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n-   |                                            ^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "04175089dc069510d4189d5921b4ce145074ffeb", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const L: usize = 4;\n "}, {"sha": "8ad4b25ae5bc0c23095d919c59a093d1ae245aed", "filename": "src/test/ui/const-generics/issues/issue-70125-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70125-1.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "ceefc2dcb32cfae181b2f75023e78e73d7d24a32", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn main() {\n     <()>::foo();"}, {"sha": "c1f9634810e4897ab298a6440378d5d29029447a", "filename": "src/test/ui/const-generics/issues/issue-70125-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70125-2.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "04c76a4dcaff763bf260db466b384dbf6c17650d", "filename": "src/test/ui/const-generics/issues/issue-70167.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub trait Trait<const N: usize>: From<<Self as Trait<N>>::Item> {\n   type Item;"}, {"sha": "5d647e933c4c56daf25021c687d5fba91d16d9c8", "filename": "src/test/ui/const-generics/issues/issue-70167.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70167.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-70167.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "b87825d20ce321b1d15c4b299339629acf79885a", "filename": "src/test/ui/const-generics/issues/issue-71169.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71169.rs:4:43\n+  --> $DIR/issue-71169.rs:6:43\n    |\n LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                           ^^^ the type must not depend on the parameter `LEN`\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/issue-71169.rs:8:14\n+  --> $DIR/issue-71169.rs:11:14\n    |\n LL |     foo::<4, DATA>();\n    |              ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-71169.stderr"}, {"sha": "79d63443351ff6045f0a65feb0f1e6818cc2769b", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,18 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71169.rs:6:43\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                           ^^^ the type must not depend on the parameter `LEN`\n+\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-71169.rs:6:38\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                      ^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "7007ec222caa8440baedbcf45ca2e954a53edcda", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,10 +1,13 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n //~^ ERROR the type of const parameters must not\n+//[min]~^^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n fn main() {\n     const DATA: [u8; 4] = *b\"ABCD\";\n     foo::<4, DATA>();\n-    //~^ ERROR constant expression depends on\n+    //[full]~^ ERROR constant expression depends on\n }"}, {"sha": "453ef00e6dc1d4976fccae77352a223fc8b51e0e", "filename": "src/test/ui/const-generics/issues/issue-71381.full.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,23 +1,23 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:13:82\n+  --> $DIR/issue-71381.rs:15:82\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n \n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71381.rs:22:40\n+  --> $DIR/issue-71381.rs:24:40\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:13:61\n+  --> $DIR/issue-71381.rs:15:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:22:19\n+  --> $DIR/issue-71381.rs:24:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-71381.stderr"}, {"sha": "453ef00e6dc1d4976fccae77352a223fc8b51e0e", "filename": "src/test/ui/const-generics/issues/issue-71381.min.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,27 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:15:82\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:24:40\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                                        ^^^^ the type must not depend on the parameter `Args`\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71381.rs:15:61\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71381.rs:24:19\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "65d88e553b9e5dd1ea324d3a41557abf1ce0a617", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Test(*const usize);\n "}, {"sha": "3da85ee040de9951ecd0ef23f50e8f37dd299900", "filename": "src/test/ui/const-generics/issues/issue-71382.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71382.rs:15:23\n+  --> $DIR/issue-71382.rs:17:23\n    |\n LL |     fn test<const FN: fn()>(&self) {\n    |                       ^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-71382.stderr"}, {"sha": "3da85ee040de9951ecd0ef23f50e8f37dd299900", "filename": "src/test/ui/const-generics/issues/issue-71382.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:17:23\n+   |\n+LL |     fn test<const FN: fn()>(&self) {\n+   |                       ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "12a7d08382a371c7d813a966a7e6f3ff7b02b1e9", "filename": "src/test/ui/const-generics/issues/issue-71382.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Test();\n "}, {"sha": "48d4bb361a183a89595985efa5334d6eaf0b7e7f", "filename": "src/test/ui/const-generics/issues/issue-71611.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,11 +1,11 @@\n error[E0770]: the type of const parameters must not depend on other generic parameters\n-  --> $DIR/issue-71611.rs:4:31\n+  --> $DIR/issue-71611.rs:6:31\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71611.rs:4:21\n+  --> $DIR/issue-71611.rs:6:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-71611.stderr"}, {"sha": "48d4bb361a183a89595985efa5334d6eaf0b7e7f", "filename": "src/test/ui/const-generics/issues/issue-71611.min.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,15 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71611.rs:6:31\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                               ^ the type must not depend on the parameter `A`\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71611.rs:6:21\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                     ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "9b8e8be6bc6fc72124b9f5008a83ba19eeee0fb3", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n     //~^ ERROR: using function pointers as const generic parameters is forbidden"}, {"sha": "51f94678467437a7ac8541da7c419361205e778c", "filename": "src/test/ui/const-generics/issues/issue-72352.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,5 @@\n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-72352.rs:6:42\n+  --> $DIR/issue-72352.rs:8:42\n    |\n LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n    |                                          ^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/issues/issue-72352.stderr"}, {"sha": "51f94678467437a7ac8541da7c419361205e778c", "filename": "src/test/ui/const-generics/issues/issue-72352.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-72352.rs:8:42\n+   |\n+LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n+   |                                          ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1517f3dae4ff4974d3c3210087ff5c16b879ffb8", "filename": "src/test/ui/const-generics/issues/issue-72352.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::ffi::{CStr, CString};\n "}, {"sha": "5bf3671d38be354af5306ac7484a50a05a0c523d", "filename": "src/test/ui/const-generics/issues/issue-73491.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,11 @@\n+error: `[u32; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-73491.rs:9:19\n+   |\n+LL | fn hoge<const IN: [u32; LEN]>() {}\n+   |                   ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4f6c44ad2cdb0fed2205297405f08dc67dd46480", "filename": "src/test/ui/const-generics/issues/issue-73491.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,9 +1,12 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const LEN: usize = 1024;\n \n fn hoge<const IN: [u32; LEN]>() {}\n+//[min]~^ ERROR `[u32; _]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "0816bad35b2de05dc732a32afa6fd3c5297f88b3", "filename": "src/test/ui/const-generics/issues/issue-73508.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/issue-73508.rs:6:33\n+   |\n+LL | pub const fn func_name<const X: *const u32>() {}\n+   |                                 ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0816bad35b2de05dc732a32afa6fd3c5297f88b3", "filename": "src/test/ui/const-generics/issues/issue-73508.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/issue-73508.rs:6:33\n+   |\n+LL | pub const fn func_name<const X: *const u32>() {}\n+   |                                 ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "21b87f7f9014c31457c0f6b639e0133e0e5510b3", "filename": "src/test/ui/const-generics/issues/issue-73508.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,4 +1,7 @@\n-#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub const fn func_name<const X: *const u32>() {}\n //~^ ERROR using raw pointers"}, {"sha": "23ad1818b6f37305dfb1e10bf9fb0b393b1ff209", "filename": "src/test/ui/const-generics/issues/issue-73508.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73508.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-73508.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using raw pointers as const generic parameters is forbidden\n-  --> $DIR/issue-73508.rs:3:33\n-   |\n-LL | pub const fn func_name<const X: *const u32>() {}\n-   |                                 ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "8062faefbe60b25ea5bbdd3cd21da3ef6c495f87", "filename": "src/test/ui/const-generics/issues/issue-74101.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,20 @@\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-74101.rs:7:18\n+   |\n+LL | fn test<const N: [u8; 1 + 2]>() {}\n+   |                  ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-74101.rs:10:21\n+   |\n+LL | struct Foo<const N: [u8; 1 + 2]>;\n+   |                     ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2a7d31ac8dd662502b4e87c67afc51face437e70", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,9 +1,13 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn test<const N: [u8; 1 + 2]>() {}\n+//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n struct Foo<const N: [u8; 1 + 2]>;\n+//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "86937d715c9739b11dc9a4396a1d95918b0f9ab9", "filename": "src/test/ui/const-generics/issues/issue-74255.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,11 @@\n+error: `IceEnum` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-74255.rs:15:31\n+   |\n+LL |     fn ice_struct_fn<const I: IceEnum>() {}\n+   |                               ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "b277c273461c3ce8c540ea16cd3ba3a91af4267d", "filename": "src/test/ui/const-generics/issues/issue-74255.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(dead_code, incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[derive(PartialEq, Eq)]\n enum IceEnum {\n@@ -11,6 +13,7 @@ struct IceStruct;\n \n impl IceStruct {\n     fn ice_struct_fn<const I: IceEnum>() {}\n+    //[min]~^ ERROR `IceEnum` is forbidden as the type of a const generic parameter\n }\n \n fn main() {"}, {"sha": "edc54b082dbcbcde8d5f02accb1ef04994233ffc", "filename": "src/test/ui/const-generics/issues/issue-75047.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,11 @@\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-75047.rs:15:21\n+   |\n+LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7bab7cdd0989e4c966dfeda2f418e60c253f01fa", "filename": "src/test/ui/const-generics/issues/issue-75047.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n-// check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Bar<T>(T);\n \n@@ -11,5 +13,6 @@ impl<T> Bar<T> {\n }\n \n struct Foo<const N: [u8; Bar::<u32>::value()]>;\n+//[min]~^ ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {}"}, {"sha": "28f80702dcf00c9093c810ab78cb63c3b0c3e5d6", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // check-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait T<const A: usize> {\n     fn f();"}, {"sha": "931701b64b48165a10dd68504dbfe582304dfafd", "filename": "src/test/ui/const-generics/issues/issue70273-assoc-fn.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue70273-assoc-fn.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue70273-assoc-fn.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a71e744202151644e3bfbfcc21eb060462a39409", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,56 @@\n+error: `std::ops::Range<usize>` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:8:24\n+   |\n+LL | struct _Range<const R: std::ops::Range<usize>>;\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `std::ops::RangeFrom<usize>` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:13:28\n+   |\n+LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `std::ops::RangeFull` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:18:28\n+   |\n+LL | struct _RangeFull<const R: std::ops::RangeFull>;\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `std::ops::RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:24:33\n+   |\n+LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `std::ops::RangeTo<usize>` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:29:26\n+   |\n+LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-generics-range.rs:34:35\n+   |\n+LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "c04f4a3acfbb582c2c42a6db6e698f3be8d1ce46", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,30 +1,38 @@\n-// check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// [full] check-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // `Range` should be usable within const generics:\n struct _Range<const R: std::ops::Range<usize>>;\n+//[min]~^ ERROR `std::ops::Range<usize>` is forbidden\n const RANGE : _Range<{ 0 .. 1000 }> = _Range;\n \n // `RangeFrom` should be usable within const generics:\n struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n+//[min]~^ ERROR `std::ops::RangeFrom<usize>` is forbidden\n const RANGE_FROM : _RangeFrom<{ 0 .. }> = _RangeFrom;\n \n // `RangeFull` should be usable within const generics:\n struct _RangeFull<const R: std::ops::RangeFull>;\n+//[min]~^ ERROR `std::ops::RangeFull` is forbidden\n const RANGE_FULL : _RangeFull<{ .. }> = _RangeFull;\n \n // Regression test for #70155\n // `RangeInclusive` should be usable within const generics:\n struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n+//[min]~^ ERROR `std::ops::RangeInclusive<usize>` is forbidden\n const RANGE_INCLUSIVE : _RangeInclusive<{ 0 ..= 999 }> = _RangeInclusive;\n \n // `RangeTo` should be usable within const generics:\n struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n+//[min]~^ ERROR `std::ops::RangeTo<usize>` is forbidden\n const RANGE_TO : _RangeTo<{ .. 1000 }> = _RangeTo;\n \n // `RangeToInclusive` should be usable within const generics:\n struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n+//[min]~^ ERROR `std::ops::RangeToInclusive<usize>` is forbidden\n const RANGE_TO_INCLUSIVE : _RangeToInclusive<{ ..= 999 }> = _RangeToInclusive;\n \n pub fn main() {}"}, {"sha": "67a44d2c5b4ada4624ecc4ecb7033c182630d562", "filename": "src/test/ui/const-generics/type-after-const-ok.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/type-after-const-ok.rs:9:26\n+   |\n+LL | struct A<const N: usize, T>(T);\n+   |         -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "69227cdf19c33a64c383cbaf8d9872cf8e83c333", "filename": "src/test/ui/const-generics/type-after-const-ok.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,10 +1,12 @@\n-// run-pass\n+// [full] run-pass\n+// revisions: full min\n // Verifies that having generic parameters after constants is permitted\n-\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n #[allow(dead_code)]\n struct A<const N: usize, T>(T);\n+//[min]~^ ERROR type parameters must be declared prior to const parameters\n \n fn main() {}"}, {"sha": "1d42afa3f8461de59044ed35380182c730f91b0a", "filename": "src/test/ui/const-generics/type-dependent/issue-61936.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait SliceExt<T: Clone> {\n     fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N>;"}, {"sha": "465b66b09ce22c85bd654fbe6b401e754585f159", "filename": "src/test/ui/const-generics/type-dependent/issue-63695.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait T {\n     fn test<const A: i32>(&self) -> i32 { A }"}, {"sha": "3d4910e9e4b40bf97590818953e968dfc5491b81", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-1.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct X;\n "}, {"sha": "0868d309b337d67ef0fa43200ddbbf38f51e5649", "filename": "src/test/ui/const-generics/type-dependent/issue-67144-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-67144-2.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize>;\n "}, {"sha": "4a374dc1db60be03b4857418d9fca9b8d85b6dab", "filename": "src/test/ui/const-generics/type-dependent/issue-69816.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait IterExt: Sized + Iterator {\n     fn default_for_size<const N: usize>(self) -> [Self::Item; N]"}, {"sha": "ba5a42e47e92da9e7b352f1952e2dc8d3355384a", "filename": "src/test/ui/const-generics/type-dependent/issue-70217.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70217.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Struct<const N: usize>;\n "}, {"sha": "234c09e04ae6d35a543fab83a3b7d7ecd374611d", "filename": "src/test/ui/const-generics/type-dependent/issue-70507.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait ConstChunksExactTrait<T> {\n     fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'_, T, {N}>;"}, {"sha": "fd52373cee218cb5ed7a6944850acd5b374dddb2", "filename": "src/test/ui/const-generics/type-dependent/issue-70586.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70586.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::marker::PhantomData;\n "}, {"sha": "8656239605dfd8cb1c1fa5576a19dcc7ea73c922", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,20 @@\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-71348.rs:11:24\n+   |\n+LL | trait Get<'a, const N: &'static str> {\n+   |                        ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `&'static str` is forbidden as the type of a const generic parameter\n+  --> $DIR/issue-71348.rs:19:25\n+   |\n+LL |     fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Target\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "772e179746ddb5e0df14837b7d9d645df847e0d2", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,19 +1,23 @@\n-// run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// [full] run-pass\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Foo {\n     i: i32,\n }\n \n trait Get<'a, const N: &'static str> {\n+    //[min]~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n     type Target: 'a;\n \n     fn get(&'a self) -> &'a Self::Target;\n }\n \n impl Foo {\n     fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Target\n+    //[min]~^ ERROR `&'static str` is forbidden as the type of a const generic parameter\n     where\n         Self: Get<'a, N>,\n     {"}, {"sha": "da1d3270b7cccc2c678be8ccae8249089a6f2213", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:17:23\n+   |\n+LL |     fn test<const FN: fn() -> u8>(&self) -> u8 {\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "da1d3270b7cccc2c678be8ccae8249089a6f2213", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.min.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,8 @@\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:17:23\n+   |\n+LL |     fn test<const FN: fn() -> u8>(&self) -> u8 {\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "497fd1381de7f3d3901326e70182e3ecd68e687e", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Test;\n "}, {"sha": "f441b71031ece1a8a3df2b0c83b6cb33820c1638", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-71382.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71382.rs:15:23\n-   |\n-LL |     fn test<const FN: fn() -> u8>(&self) -> u8 {\n-   |                       ^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-"}, {"sha": "2aaf12cea4f8c0fb252c569ec99f234f52b4a5ec", "filename": "src/test/ui/const-generics/type-dependent/issue-71805.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71805.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem::MaybeUninit;\n "}, {"sha": "3e53190ee48692117a500bd60d2f81916fa76434", "filename": "src/test/ui/const-generics/type-dependent/issue-73730.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-73730.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // check-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait Foo<'a, A>: Iterator<Item=A> {\n     fn bar<const N: usize>(&mut self) -> *const [A; N];"}, {"sha": "747664a0962997d365b2216ec69764420424690a", "filename": "src/test/ui/const-generics/type-dependent/non-local.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,9 @@\n // aux-build:type_dependent_lib.rs\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n extern crate type_dependent_lib;\n "}, {"sha": "ec23ff1d2212273ac68ba935cf3cce89ae40bf3f", "filename": "src/test/ui/const-generics/type-dependent/qpath.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A;\n impl A {"}, {"sha": "70af65509231015197c622acaec2bc3765f6f575", "filename": "src/test/ui/const-generics/type-dependent/simple.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct R;\n "}, {"sha": "a530e63449d4038958472f80b23eedd3beac8622", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:12:27\n+   |\n+LL |     assert_eq!(R.method::<1u16>(), 1);\n+   |                           ^^^^ expected `u8`, found `u16`\n+   |\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     assert_eq!(R.method::<1u8>(), 1);\n+   |                           ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a530e63449d4038958472f80b23eedd3beac8622", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:12:27\n+   |\n+LL |     assert_eq!(R.method::<1u16>(), 1);\n+   |                           ^^^^ expected `u8`, found `u16`\n+   |\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     assert_eq!(R.method::<1u8>(), 1);\n+   |                           ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "67d80973f0397a46ab239ea019a4af092c78ce1b", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct R;\n "}, {"sha": "5bb7c5b0ea9bf9e4aa75c8bac8c39f56c6dd1bae", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,23 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-mismatch.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-error[E0308]: mismatched types\n-  --> $DIR/type-mismatch.rs:10:27\n-   |\n-LL |     assert_eq!(R.method::<1u16>(), 1);\n-   |                           ^^^^ expected `u8`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `u8`\n-   |\n-LL |     assert_eq!(R.method::<1u8>(), 1);\n-   |                           ^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "265e9ee618be14d8e99f93eebf25c1e8a93027f3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.full.stderr", "status": "renamed", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.full.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/types-mismatch-const-args.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0308]: mismatched types\n-  --> $DIR/types-mismatch-const-args.rs:13:41\n+  --> $DIR/types-mismatch-const-args.rs:15:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2_u32`, found `4_u32`\n@@ -17,7 +8,7 @@ LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data\n               found type `4_u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/types-mismatch-const-args.rs:15:41\n+  --> $DIR/types-mismatch-const-args.rs:17:41\n    |\n LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n    |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n@@ -27,6 +18,6 @@ LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    = note: expected struct `A<'a, u16, {2u32}, {3u32}>`\n               found struct `A<'b, u32, {2u32}, {3u32}>`\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`.", "previous_filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr"}, {"sha": "27277f0c0befad0bab38dc682686de4c1a1565b3", "filename": "src/test/ui/const-generics/types-mismatch-const-args.min.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.min.stderr?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -0,0 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/types-mismatch-const-args.rs:15:41\n+   |\n+LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2_u32`, found `4_u32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `A<'_, _, 2_u32, _>`\n+              found struct `A<'_, _, 4_u32, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/types-mismatch-const-args.rs:17:41\n+   |\n+LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data: PhantomData };\n+   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u16`, found `u32`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected struct `A<'a, u16, _, _>`\n+              found struct `A<'b, u32, _, _>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "34b85304cc4d1a90185d4df1ff76eca2b5f36578", "filename": "src/test/ui/const-generics/types-mismatch-const-args.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,5 +1,7 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // tests the diagnostic output of type mismatches for types that have const generics arguments.\n "}, {"sha": "45afbdc9ab10556d11ad202bbd99186bc36029e9", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt;\n "}, {"sha": "f41628d5d8ee945d80d2b081daf65b4945c93193", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/uninferred-consts-during-codegen-1.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "65ae05e11982609398e2966f55410b2ee60738bf", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fd8636d2428658cf46df53fb4f445558689fd1c/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.rs?ref=1fd8636d2428658cf46df53fb4f445558689fd1c", "patch": "@@ -1,7 +1,8 @@\n // run-pass\n-\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::fmt;\n "}, {"sha": "f1703bc3a2f8db1d0887e253675d4845c7ffd6b1", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-2.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/uninferred-consts-during-codegen-2.rs:3:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n-warning: 1 warning emitted\n-"}]}