{"sha": "ec890fff23d80da97086e89f29ef7f8d14dbaab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODkwZmZmMjNkODBkYTk3MDg2ZTg5ZjI5ZWY3ZjhkMTRkYmFhYjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T00:57:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-06T18:09:08Z"}, "message": "Temp commit on the way to making meta_item into an interior vector", "tree": {"sha": "6375d90036e494fd2644d020df7f56fab36cd12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6375d90036e494fd2644d020df7f56fab36cd12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec890fff23d80da97086e89f29ef7f8d14dbaab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec890fff23d80da97086e89f29ef7f8d14dbaab8", "html_url": "https://github.com/rust-lang/rust/commit/ec890fff23d80da97086e89f29ef7f8d14dbaab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec890fff23d80da97086e89f29ef7f8d14dbaab8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6c9f8d8495bb83ee9afd3894f7dd16065419d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6c9f8d8495bb83ee9afd3894f7dd16065419d2", "html_url": "https://github.com/rust-lang/rust/commit/3f6c9f8d8495bb83ee9afd3894f7dd16065419d2"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "376158b426a4637d7554e7bd891e9def7ce08cae", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -29,13 +29,11 @@ export mk_attr;\n \n // From a list of crate attributes get only the meta_items that impact crate\n // linkage\n-fn find_linkage_metas(&ast::attribute[] attrs) -> vec[@ast::meta_item] {\n-    let vec[@ast::meta_item] metas = [];\n+fn find_linkage_metas(&ast::attribute[] attrs) -> (@ast::meta_item)[] {\n+    let (@ast::meta_item)[] metas = ~[];\n     for (ast::attribute attr in find_attrs_by_name(attrs, \"link\")) {\n         alt (attr.node.value.node) {\n-            case (ast::meta_list(_, ?items)) {\n-                metas += items;\n-            }\n+            case (ast::meta_list(_, ?items)) { metas += items; }\n             case (_) {\n                 log \"ignoring link attribute that has incorrect type\";\n             }\n@@ -133,7 +131,7 @@ fn eq(@ast::meta_item a, @ast::meta_item b) -> bool {\n     }\n }\n \n-fn contains(&vec[@ast::meta_item] haystack, @ast::meta_item needle) -> bool {\n+fn contains(&(@ast::meta_item)[] haystack, @ast::meta_item needle) -> bool {\n     log #fmt(\"looking for %s\",\n              syntax::print::pprust::meta_item_to_str(*needle));\n     for (@ast::meta_item item in haystack) {\n@@ -222,8 +220,8 @@ fn mk_name_value_item(ast::ident name, ast::lit value) -> @ast::meta_item {\n     ret @span(ast::meta_name_value(name, value));\n }\n \n-fn mk_list_item(ast::ident name,\n-                &vec[@ast::meta_item] items) -> @ast::meta_item {\n+fn mk_list_item(ast::ident name, &(@ast::meta_item)[] items)\n+        -> @ast::meta_item {\n     ret @span(ast::meta_list(name, items));\n }\n "}, {"sha": "dd6c6b574f3c3921529d94b2faf1554940dc8ea8", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -109,9 +109,9 @@ fn in_cfg(&ast::crate_cfg cfg, &ast::attribute[] attrs) -> bool {\n     // so we can match against them. This is the list of configurations for\n     // which the item is valid\n     auto item_cfg_metas = {\n-        fn extract_metas(&vec[@ast::meta_item] inner_items,\n+        fn extract_metas(&(@ast::meta_item)[] inner_items,\n                          &@ast::meta_item cfg_item)\n-        -> vec[@ast::meta_item] {\n+        -> (@ast::meta_item)[] {\n \n             alt (cfg_item.node) {\n                 case (ast::meta_list(?name, ?items)) {\n@@ -122,13 +122,11 @@ fn in_cfg(&ast::crate_cfg cfg, &ast::attribute[] attrs) -> bool {\n             }\n         }\n         auto cfg_metas = attr::attr_metas(item_cfg_attrs);\n-        vec::foldl(extract_metas, [], cfg_metas)\n+        ivec::foldl(extract_metas, ~[], cfg_metas)\n     };\n \n     for (@ast::meta_item cfg_mi in item_cfg_metas) {\n-        if (attr::contains(cfg, cfg_mi)) {\n-            ret true;\n-        }\n+        if (attr::contains(cfg, cfg_mi)) { ret true; }\n     }\n \n     ret false;"}, {"sha": "6b0a2f998bc8f83b73bd0e7015ba8a8e3b19dbee", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -81,7 +81,7 @@ fn def_id_of_def(def d) -> def_id {\n \n // The set of meta_items that define the compilation environment of the crate,\n // used to drive conditional compilation\n-type crate_cfg = vec[@meta_item];\n+type crate_cfg = (@meta_item)[];\n \n type crate = spanned[crate_];\n \n@@ -105,7 +105,7 @@ type meta_item = spanned[meta_item_];\n \n tag meta_item_ {\n     meta_word(ident);\n-    meta_list(ident, vec[@meta_item]);\n+    meta_list(ident, (@meta_item)[]);\n     meta_name_value(ident, lit);\n }\n \n@@ -505,7 +505,7 @@ type variant = spanned[variant_];\n type view_item = spanned[view_item_];\n \n tag view_item_ {\n-    view_item_use(ident, vec[@meta_item], node_id);\n+    view_item_use(ident, (@meta_item)[], node_id);\n     view_item_import(ident, vec[ident], node_id);\n     view_item_import_glob(vec[ident], node_id);\n     view_item_export(ident, node_id);"}, {"sha": "ce512d006558b6cfb7855df3ebaa524c7447d2f1", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -103,7 +103,7 @@ fn fold_meta_item_(&@meta_item mi, ast_fold fld) -> @meta_item {\n                  case (meta_word(?id)) { meta_word(fld.fold_ident(id)) }\n                  case (meta_list(?id, ?mis)) {\n                      auto fold_meta_item = bind fold_meta_item_(_,fld);\n-                     meta_list(id, map(fold_meta_item, mis))\n+                     meta_list(id, ivec::map(fold_meta_item, mis))\n                  }\n                  case (meta_name_value(?id,?s)) {\n                      meta_name_value(fld.fold_ident(id),s)\n@@ -134,7 +134,7 @@ fn noop_fold_crate(&crate_ c, ast_fold fld) -> crate_ {\n     ret rec(directives=ivec::map(fld.fold_crate_directive, c.directives),\n             module=fld.fold_mod(c.module),\n             attrs=ivec::map(fold_attribute, c.attrs),\n-            config=vec::map(fold_meta_item, c.config));\n+            config=ivec::map(fold_meta_item, c.config));\n }\n \n fn noop_fold_crate_directive(&crate_directive_ cd, ast_fold fld) "}, {"sha": "8db9a068bbe5bad8e353109f691e6a0381b30482", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -591,6 +591,24 @@ fn parse_seq_to_end[T](token::token ket, option::t[token::token] sep,\n     ret v;\n }\n \n+fn parse_seq_to_end_ivec[T](token::token ket, option::t[token::token] sep,\n+                            fn(&parser)->T  f, &parser p) -> T[] {\n+    let bool first = true;\n+    let T[] v = ~[];\n+    while (p.peek() != ket) {\n+        alt (sep) {\n+            case (some(?t)) {\n+                if (first) { first = false; } else { expect(p, t); }\n+            }\n+            case (_) { }\n+        }\n+        v += ~[f(p)];\n+    }\n+    expect(p, ket);\n+    ret v;\n+}\n+\n+\n fn parse_seq[T](token::token bra, token::token ket,\n                 option::t[token::token] sep, fn(&parser) -> T  f, &parser p)\n    -> ast::spanned[vec[T]] {\n@@ -601,6 +619,17 @@ fn parse_seq[T](token::token bra, token::token ket,\n     ret spanned(lo, hi, result);\n }\n \n+fn parse_seq_ivec[T](token::token bra, token::token ket,\n+                     option::t[token::token] sep,\n+                     fn(&parser)->T  f, &parser p) -> ast::spanned[T[]] {\n+    auto lo = p.get_lo_pos();\n+    expect(p, bra);\n+    auto result = parse_seq_to_end_ivec[T](ket, sep, f, p);\n+    auto hi = p.get_hi_pos();\n+    ret spanned(lo, hi, result);\n+}\n+\n+\n fn parse_lit(&parser p) -> ast::lit {\n     auto sp = p.get_span();\n     let ast::lit_ lit = ast::lit_nil;\n@@ -2186,15 +2215,15 @@ fn parse_meta_item(&parser p) -> @ast::meta_item {\n     }\n }\n \n-fn parse_meta_seq(&parser p) -> vec[@ast::meta_item] {\n-    ret parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n-                  parse_meta_item, p).node;\n+fn parse_meta_seq(&parser p) -> (@ast::meta_item)[] {\n+    ret parse_seq_ivec(token::LPAREN, token::RPAREN, some(token::COMMA),\n+                       parse_meta_item, p).node;\n }\n \n-fn parse_optional_meta(&parser p) -> vec[@ast::meta_item] {\n+fn parse_optional_meta(&parser p) -> (@ast::meta_item)[] {\n     alt (p.peek()) {\n         case (token::LPAREN) { ret parse_meta_seq(p); }\n-        case (_) { let vec[@ast::meta_item] v = []; ret v; }\n+        case (_) { ret ~[]; }\n     }\n }\n \n@@ -2204,8 +2233,7 @@ fn parse_use(&parser p) -> @ast::view_item {\n     auto metadata = parse_optional_meta(p);\n     auto hi = p.get_hi_pos();\n     expect(p, token::SEMI);\n-    auto use_decl =\n-        ast::view_item_use(ident, metadata, p.get_id());\n+    auto use_decl = ast::view_item_use(ident, metadata, p.get_id());\n     ret @spanned(lo, hi, use_decl);\n }\n "}, {"sha": "b03262f58e854af9d5d1b68193b45f7e481fa5f7", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec890fff23d80da97086e89f29ef7f8d14dbaab8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=ec890fff23d80da97086e89f29ef7f8d14dbaab8", "patch": "@@ -1118,7 +1118,7 @@ fn print_meta_item(&ps s, &@ast::meta_item item) {\n         case (ast::meta_list(?name, ?items)) {\n             word(s.s, name);\n             popen(s);\n-            commasep(s, consistent, items, print_meta_item);\n+            commasep_ivec(s, consistent, items, print_meta_item);\n             pclose(s);\n         }\n     }\n@@ -1132,9 +1132,9 @@ fn print_view_item(&ps s, &@ast::view_item item) {\n         case (ast::view_item_use(?id, ?mta, _)) {\n             head(s, \"use\");\n             word(s.s, id);\n-            if (vec::len(mta) > 0u) {\n+            if (ivec::len(mta) > 0u) {\n                 popen(s);\n-                commasep(s, consistent, mta, print_meta_item);\n+                commasep_ivec(s, consistent, mta, print_meta_item);\n                 pclose(s);\n             }\n         }"}]}