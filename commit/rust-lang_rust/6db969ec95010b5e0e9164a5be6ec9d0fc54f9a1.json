{"sha": "6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "node_id": "C_kwDOAAsO6NoAKDZkYjk2OWVjOTUwMTBiNWUwZTkxNjRhNWJlNmVjOWQwZmM1NGY5YTE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:44Z"}, "message": "Rollup merge of #96772 - TaKO8Ki:suggest-fully-qualified-path-with-appropriate-params, r=compiler-errors\n\nSuggest fully qualified path with appropriate params\n\ncloses #96291", "tree": {"sha": "d873b53b880e9b32f8bde11a7b48a14e975b0783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d873b53b880e9b32f8bde11a7b48a14e975b0783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidWN4CRBK7hj4Ov3rIwAA+QEIAHUadNa1XhA1xkswrGjAdtKL\nVpTePwgIoMz97tRXI8H5BpZholIezlXgB+imWUbFlVf88mzQoSGfTNNjOQHR80GY\nkd3FnVCKpXVofVbhmEVDMf90KzwPuZbD62FHJALgqrzrG/b0/N/CAl0qx8+n010D\n5zsJHpQbqyyx6Irsuho6cTsE97fsXA/+h0YdWKuM2S3kelsJeIws3vpaqiRo6PHA\nA4AMkSHbBXzCPb+89HDnXK06zXF1I5N8UUvAo2IjRsnXptF4hE0uGaN0EEXwxt00\nhE0NFmd8bLfBVRbiprnioT7RSTmm9bKXD6yq3PlCsPIZciODnqekJ4xR8b1RlBw=\n=9iCV\n-----END PGP SIGNATURE-----\n", "payload": "tree d873b53b880e9b32f8bde11a7b48a14e975b0783\nparent bcfb95afd394610ffd97fca7dbef7ac92b782dbe\nparent 857eb02abe3931271db6d85a899fccba6d3ab65e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651860344 +0200\ncommitter GitHub <noreply@github.com> 1651860344 +0200\n\nRollup merge of #96772 - TaKO8Ki:suggest-fully-qualified-path-with-appropriate-params, r=compiler-errors\n\nSuggest fully qualified path with appropriate params\n\ncloses #96291\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "html_url": "https://github.com/rust-lang/rust/commit/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfb95afd394610ffd97fca7dbef7ac92b782dbe", "html_url": "https://github.com/rust-lang/rust/commit/bcfb95afd394610ffd97fca7dbef7ac92b782dbe"}, {"sha": "857eb02abe3931271db6d85a899fccba6d3ab65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/857eb02abe3931271db6d85a899fccba6d3ab65e", "html_url": "https://github.com/rust-lang/rust/commit/857eb02abe3931271db6d85a899fccba6d3ab65e"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "78e0864d918d99360d8d8fe47a3b10aea2845d0e", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "patch": "@@ -731,6 +731,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 //    |               help: specify type like: `<Impl as Into<u32>>::into(foo_impl)`\n                 //    |\n                 //    = note: cannot satisfy `Impl: Into<_>`\n+                debug!(?segment);\n                 if !impl_candidates.is_empty() && e.span.contains(span)\n                     && let Some(expr) = exprs.first()\n                     && let ExprKind::Path(hir::QPath::Resolved(_, path)) = expr.kind\n@@ -739,9 +740,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let mut eraser = TypeParamEraser(self.tcx);\n                     let candidate_len = impl_candidates.len();\n                     let mut suggestions: Vec<_> = impl_candidates.iter().map(|candidate| {\n+                        let trait_item = self.tcx\n+                            .associated_items(candidate.def_id)\n+                            .find_by_name_and_kind(\n+                                self.tcx,\n+                                segment.ident,\n+                                ty::AssocKind::Fn,\n+                                candidate.def_id\n+                            );\n+                        let prefix = if let Some(trait_item) = trait_item\n+                            && let Some(trait_m) = trait_item.def_id.as_local()\n+                            && let hir::TraitItemKind::Fn(fn_, _) = &self.tcx.hir().trait_item(hir::TraitItemId { def_id: trait_m }).kind\n+                        {\n+                            match fn_.decl.implicit_self {\n+                                hir::ImplicitSelfKind::ImmRef => \"&\",\n+                                hir::ImplicitSelfKind::MutRef => \"&mut \",\n+                                _ => \"\",\n+                            }\n+                        } else {\n+                            \"\"\n+                        };\n                         let candidate = candidate.super_fold_with(&mut eraser);\n                         vec![\n-                            (expr.span.shrink_to_lo(), format!(\"{}::{}(\", candidate, segment.ident)),\n+                            (expr.span.shrink_to_lo(), format!(\"{}::{}({}\", candidate, segment.ident, prefix)),\n                             if exprs.len() == 1 {\n                                 (expr.span.shrink_to_hi().with_hi(e.span.hi()), \")\".to_string())\n                             } else {"}, {"sha": "da68b996be999df60ade17d648d78960cd56c9ec", "filename": "src/test/ui/traits/suggest-fully-qualified-path-with-appropriate-params.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.rs?ref=6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "patch": "@@ -0,0 +1,24 @@\n+struct Thing;\n+\n+trait Method<T> {\n+    fn method(&self) -> T;\n+    fn mut_method(&mut self) -> T;\n+}\n+\n+impl Method<i32> for Thing {\n+    fn method(&self) -> i32 { 0 }\n+    fn mut_method(&mut self) -> i32 { 0 }\n+}\n+\n+impl Method<u32> for Thing {\n+    fn method(&self) -> u32 { 0 }\n+    fn mut_method(&mut self) -> u32 { 0 }\n+}\n+\n+fn main() {\n+    let thing = Thing;\n+    thing.method();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+    thing.mut_method(); //~ ERROR type annotations needed\n+}"}, {"sha": "0c4962417e9bc152e2544744a8089f99de7ea149", "filename": "src/test/ui/traits/suggest-fully-qualified-path-with-appropriate-params.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-path-with-appropriate-params.stderr?ref=6db969ec95010b5e0e9164a5be6ec9d0fc54f9a1", "patch": "@@ -0,0 +1,61 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-path-with-appropriate-params.rs:20:11\n+   |\n+LL |     thing.method();\n+   |     ------^^^^^^--\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-path-with-appropriate-params.rs:20:11\n+   |\n+LL |     thing.method();\n+   |     ------^^^^^^--\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+   |\n+note: multiple `impl`s satisfying `Thing: Method<_>` found\n+  --> $DIR/suggest-fully-qualified-path-with-appropriate-params.rs:8:1\n+   |\n+LL | impl Method<i32> for Thing {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl Method<u32> for Thing {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: use the fully qualified path for the potential candidates\n+   |\n+LL |     <Thing as Method<i32>>::method(&thing);\n+   |     ++++++++++++++++++++++++++++++++     ~\n+LL |     <Thing as Method<u32>>::method(&thing);\n+   |     ++++++++++++++++++++++++++++++++     ~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-path-with-appropriate-params.rs:23:11\n+   |\n+LL |     thing.mut_method();\n+   |     ------^^^^^^^^^^--\n+   |     |     |\n+   |     |     cannot infer type for type parameter `T` declared on the trait `Method`\n+   |     this method call resolves to `T`\n+   |\n+note: multiple `impl`s satisfying `Thing: Method<_>` found\n+  --> $DIR/suggest-fully-qualified-path-with-appropriate-params.rs:8:1\n+   |\n+LL | impl Method<i32> for Thing {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl Method<u32> for Thing {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: use the fully qualified path for the potential candidates\n+   |\n+LL |     <Thing as Method<i32>>::mut_method(&mut thing);\n+   |     +++++++++++++++++++++++++++++++++++++++      ~\n+LL |     <Thing as Method<u32>>::mut_method(&mut thing);\n+   |     +++++++++++++++++++++++++++++++++++++++      ~\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}]}