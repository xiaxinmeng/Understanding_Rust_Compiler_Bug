{"sha": "6725dcf847300b9cddcbb061b159317113860f31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjVkY2Y4NDczMDBiOWNkZGNiYjA2MWIxNTkzMTcxMTM4NjBmMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T20:09:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-06T20:09:37Z"}, "message": "Minor, cleanup style", "tree": {"sha": "ba8b0ad89c0b87339b7a4d65bd8b51b0c5f99a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8b0ad89c0b87339b7a4d65bd8b51b0c5f99a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6725dcf847300b9cddcbb061b159317113860f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6725dcf847300b9cddcbb061b159317113860f31", "html_url": "https://github.com/rust-lang/rust/commit/6725dcf847300b9cddcbb061b159317113860f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6725dcf847300b9cddcbb061b159317113860f31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "html_url": "https://github.com/rust-lang/rust/commit/1faa9559fe3d731856c4e7e83b40d186f1a21f9e"}], "stats": {"total": 114, "additions": 64, "deletions": 50}, "files": [{"sha": "5674ecb84db7df3fcdb6e8dc5f78a637648e57cb", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 64, "deletions": 50, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/6725dcf847300b9cddcbb061b159317113860f31/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6725dcf847300b9cddcbb061b159317113860f31/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=6725dcf847300b9cddcbb061b159317113860f31", "patch": "@@ -3,7 +3,7 @@\n \n use std::convert::TryInto;\n \n-use rustc_lexer::{LiteralKind as LK, RawStrError};\n+use rustc_lexer::RawStrError;\n \n use crate::{\n     SyntaxError,\n@@ -185,63 +185,77 @@ fn rustc_token_kind_to_syntax_kind(\n     return (syntax_kind, None);\n \n     fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<&'static str>) {\n-        #[rustfmt::skip]\n+        let mut err = \"\";\n         let syntax_kind = match *kind {\n-            LK::Int { empty_int: false, .. } => INT_NUMBER,\n-            LK::Int { empty_int: true, .. } => {\n-                return (INT_NUMBER, Some(\"Missing digits after the integer base prefix\"))\n+            rustc_lexer::LiteralKind::Int { empty_int, base: _ } => {\n+                if empty_int {\n+                    err = \"Missing digits after the integer base prefix\";\n+                }\n+                INT_NUMBER\n             }\n-\n-            LK::Float { empty_exponent: false, .. } => FLOAT_NUMBER,\n-            LK::Float { empty_exponent: true, .. } => {\n-                return (FLOAT_NUMBER, Some(\"Missing digits after the exponent symbol\"))\n+            rustc_lexer::LiteralKind::Float { empty_exponent, base: _ } => {\n+                if empty_exponent {\n+                    err = \"Missing digits after the exponent symbol\";\n+                }\n+                FLOAT_NUMBER\n             }\n-\n-            LK::Char { terminated: true } => CHAR,\n-            LK::Char { terminated: false } => {\n-                return (CHAR, Some(\"Missing trailing `'` symbol to terminate the character literal\"))\n+            rustc_lexer::LiteralKind::Char { terminated } => {\n+                if !terminated {\n+                    err = \"Missing trailing `'` symbol to terminate the character literal\";\n+                }\n+                CHAR\n             }\n-\n-            LK::Byte { terminated: true } => BYTE,\n-            LK::Byte { terminated: false } => {\n-                return (BYTE, Some(\"Missing trailing `'` symbol to terminate the byte literal\"))\n+            rustc_lexer::LiteralKind::Byte { terminated } => {\n+                if !terminated {\n+                    err = \"Missing trailing `'` symbol to terminate the byte literal\";\n+                }\n+                BYTE\n             }\n-\n-            LK::Str { terminated: true } => STRING,\n-            LK::Str { terminated: false } => {\n-                return (STRING, Some(\"Missing trailing `\\\"` symbol to terminate the string literal\"))\n+            rustc_lexer::LiteralKind::Str { terminated } => {\n+                if !terminated {\n+                    err = \"Missing trailing `\\\"` symbol to terminate the string literal\";\n+                }\n+                STRING\n             }\n-\n-\n-            LK::ByteStr { terminated: true } => BYTE_STRING,\n-            LK::ByteStr { terminated: false } => {\n-                return (BYTE_STRING, Some(\"Missing trailing `\\\"` symbol to terminate the byte string literal\"))\n+            rustc_lexer::LiteralKind::ByteStr { terminated } => {\n+                if !terminated {\n+                    err = \"Missing trailing `\\\"` symbol to terminate the byte string literal\";\n+                }\n+                BYTE_STRING\n+            }\n+            rustc_lexer::LiteralKind::RawStr { err: raw_str_err, .. } => {\n+                if let Some(raw_str_err) = raw_str_err {\n+                    err = match raw_str_err {\n+                        RawStrError::InvalidStarter { .. } => \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\",\n+                        RawStrError::NoTerminator { expected, found, .. } => if expected == found {\n+                            \"Missing trailing `\\\"` to terminate the raw string literal\"\n+                        } else {\n+                            \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n+                        },\n+                        RawStrError::TooManyDelimiters { .. } => \"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\",\n+                    };\n+                };\n+                RAW_STRING\n+            }\n+            rustc_lexer::LiteralKind::RawByteStr { err: raw_str_err, .. } => {\n+                if let Some(raw_str_err) = raw_str_err {\n+                    err = match raw_str_err {\n+                        RawStrError::InvalidStarter { .. } => \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\",\n+                        RawStrError::NoTerminator { expected, found, .. } => if expected == found {\n+                            \"Missing trailing `\\\"` to terminate the raw byte string literal\"\n+                        } else {\n+                            \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n+                        },\n+                        RawStrError::TooManyDelimiters { .. } => \"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\",\n+                    };\n+                };\n+\n+                RAW_BYTE_STRING\n             }\n-\n-            LK::RawStr { err, .. } => match err {\n-                None => RAW_STRING,\n-                Some(RawStrError::InvalidStarter { .. }) => return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\")),\n-                Some(RawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n-                    return (RAW_STRING, Some(\"Missing trailing `\\\"` to terminate the raw string literal\"))\n-                } else {\n-                    return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n-\n-                },\n-                Some(RawStrError::TooManyDelimiters { .. }) => return (RAW_STRING, Some(\"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\")),\n-            },\n-            LK::RawByteStr { err, .. } => match err {\n-                None => RAW_BYTE_STRING,\n-                Some(RawStrError::InvalidStarter { .. }) => return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\")),\n-                Some(RawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n-                    return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` to terminate the raw byte string literal\"))\n-                } else {\n-                    return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n-\n-                },\n-                Some(RawStrError::TooManyDelimiters { .. }) => return (RAW_BYTE_STRING, Some(\"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\")),\n-            },\n         };\n \n-        (syntax_kind, None)\n+        let err = if err.is_empty() { None } else { Some(err) };\n+\n+        (syntax_kind, err)\n     }\n }"}]}