{"sha": "b8a632121b051f65061fc78ba6bbd3ad006a9e69", "node_id": "C_kwDOAAsO6NoAKGI4YTYzMjEyMWIwNTFmNjUwNjFmYzc4YmE2YmJkM2FkMDA2YTllNjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-01T16:03:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T16:03:24Z"}, "message": "Merge #11152\n\n11152: internal: add more tests for entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bdd51a66ed9ff21fdd2c5e42e952a738642b2b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd51a66ed9ff21fdd2c5e42e952a738642b2b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a632121b051f65061fc78ba6bbd3ad006a9e69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0HtMCRBK7hj4Ov3rIwAAgOYIAItLj9PFG1kIRW8zJEcYB7na\nuiKuH76rX/hGBv19dxTZiucCc09RzKs4m1I5CZ734Hph3MtZCkbqsTRL5WIigJKv\nqFWs0vqLA5Li/Y1kcC7zmnN10+H5Mh5Jr2G4AnmWi7tGSjry3K5onVnY4Z4ngeoG\nBbmywwPJPrmhRljv1uHufAEDIqSAFg5MEQMj8xz6sAexFzqjQoXTebJVD8j2Td8e\nH0yrjmcPgTPgzAHAAiCR4bajO9z9uF/8M6N6M+87zsF/tuEblHd7AQlVbAfV733N\n+pr0JU5KIkLEy6J8o/3Jok4S0PZ9eKy3mCNf2W3ObJzduup5gmVLsY8+xARMf0c=\n=rgqf\n-----END PGP SIGNATURE-----\n", "payload": "tree bdd51a66ed9ff21fdd2c5e42e952a738642b2b38\nparent 3d63abf1d868218613f33dc59968d3671f7f14a8\nparent 7c4276b3e15a04c9f20d0ad56555a89ac8da2c74\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641053004 +0000\ncommitter GitHub <noreply@github.com> 1641053004 +0000\n\nMerge #11152\n\n11152: internal: add more tests for entry points r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a632121b051f65061fc78ba6bbd3ad006a9e69", "html_url": "https://github.com/rust-lang/rust/commit/b8a632121b051f65061fc78ba6bbd3ad006a9e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a632121b051f65061fc78ba6bbd3ad006a9e69/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d63abf1d868218613f33dc59968d3671f7f14a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d63abf1d868218613f33dc59968d3671f7f14a8", "html_url": "https://github.com/rust-lang/rust/commit/3d63abf1d868218613f33dc59968d3671f7f14a8"}, {"sha": "7c4276b3e15a04c9f20d0ad56555a89ac8da2c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4276b3e15a04c9f20d0ad56555a89ac8da2c74", "html_url": "https://github.com/rust-lang/rust/commit/7c4276b3e15a04c9f20d0ad56555a89ac8da2c74"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "517dfb15b6af852c33424ec7805dda2c37458244", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8a632121b051f65061fc78ba6bbd3ad006a9e69/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a632121b051f65061fc78ba6bbd3ad006a9e69/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=b8a632121b051f65061fc78ba6bbd3ad006a9e69", "patch": "@@ -103,3 +103,22 @@ stringify!(;\n \"#]],\n     );\n }\n+\n+#[test]\n+fn range_patterns() {\n+    // FIXME: rustc thinks there are three patterns here, not one.\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($p:pat)*) => (stringify!($($p |)*);)\n+}\n+m!(.. .. ..);\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($p:pat)*) => (stringify!($($p |)*);)\n+}\n+stringify!(.. .. ..|);\n+\"#]],\n+    );\n+}"}, {"sha": "1174e33f5f8b28cff1c9656091760da38711270c", "filename": "crates/parser/src/tests/entries.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b8a632121b051f65061fc78ba6bbd3ad006a9e69/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a632121b051f65061fc78ba6bbd3ad006a9e69/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=b8a632121b051f65061fc78ba6bbd3ad006a9e69", "patch": "@@ -21,12 +21,48 @@ fn stmt() {\n     check_prefix(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n     check_prefix(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n     check_prefix(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"struct S;;\", \"struct S;\");\n+    check_prefix(PrefixEntryPoint::Stmt, \"fn f() {};\", \"fn f() {}\");\n     check_prefix(PrefixEntryPoint::Stmt, \";;;\", \";\");\n     check_prefix(PrefixEntryPoint::Stmt, \"+\", \"+\");\n     check_prefix(PrefixEntryPoint::Stmt, \"@\", \"@\");\n     check_prefix(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n }\n \n+#[test]\n+fn pat() {\n+    check_prefix(PrefixEntryPoint::Pat, \"x y\", \"x\");\n+    check_prefix(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n+    // FIXME: This one is wrong, we should consume only one pattern.\n+    check_prefix(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n+}\n+\n+#[test]\n+fn ty() {\n+    check_prefix(PrefixEntryPoint::Ty, \"fn() foo\", \"fn()\");\n+    check_prefix(PrefixEntryPoint::Ty, \"Clone + Copy + fn\", \"Clone + Copy +\");\n+    check_prefix(PrefixEntryPoint::Ty, \"struct f\", \"struct\");\n+}\n+\n+#[test]\n+fn expr() {\n+    check_prefix(PrefixEntryPoint::Expr, \"92 92\", \"92\");\n+    check_prefix(PrefixEntryPoint::Expr, \"+1\", \"+\");\n+    check_prefix(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n+    check_prefix(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n+    check_prefix(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n+}\n+\n+#[test]\n+fn path() {\n+    check_prefix(PrefixEntryPoint::Path, \"foo::bar baz\", \"foo::bar\");\n+    check_prefix(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n+    check_prefix(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n+    check_prefix(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n+    // FIXME: this shouldn't be accepted as path actually.\n+    check_prefix(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n+}\n+\n fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let lexed = LexedStr::new(input);\n     let input = lexed.to_input();"}]}