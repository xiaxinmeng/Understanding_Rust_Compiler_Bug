{"sha": "0e84647e18181ea9aa199d42b3da598eb59ab70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODQ2NDdlMTgxODFlYTlhYTE5OWQ0MmIzZGE1OThlYjU5YWI3MGM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-28T15:28:47Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-29T12:57:40Z"}, "message": "rustc/infer: use to_owned instead of to_string with string literals", "tree": {"sha": "6a7be0e53aba5503f78f0e0020657971b93d1231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7be0e53aba5503f78f0e0020657971b93d1231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e84647e18181ea9aa199d42b3da598eb59ab70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e84647e18181ea9aa199d42b3da598eb59ab70c", "html_url": "https://github.com/rust-lang/rust/commit/0e84647e18181ea9aa199d42b3da598eb59ab70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e84647e18181ea9aa199d42b3da598eb59ab70c/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd6fad3208c5f3ad11c49b65eb89732ad911e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd6fad3208c5f3ad11c49b65eb89732ad911e81", "html_url": "https://github.com/rust-lang/rust/commit/9fd6fad3208c5f3ad11c49b65eb89732ad911e81"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "efb316243fad036933d94c2cee3436074323fb9f", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=0e84647e18181ea9aa199d42b3da598eb59ab70c", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let mut labels = vec![(\n             span,\n             if &name == \"_\" {\n-                \"cannot infer type\".to_string()\n+                \"cannot infer type\".to_owned()\n             } else {\n                 format!(\"cannot infer type for `{}`\", name)\n             },\n@@ -138,20 +138,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // ```\n             labels.clear();\n             labels.push(\n-                (pattern.span, \"consider giving this closure parameter a type\".to_string()));\n+                (pattern.span, \"consider giving this closure parameter a type\".to_owned()));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.compiler_desugaring_kind() {\n                     None => labels.push((pattern.span,\n                                          format!(\"consider giving `{}` a type\", simple_ident))),\n                     Some(CompilerDesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n-                        \"the element type for this iterator is not specified\".to_string(),\n+                        \"the element type for this iterator is not specified\".to_owned(),\n                     )),\n                     _ => {}\n                 }\n             } else {\n-                labels.push((pattern.span, \"consider giving the pattern a type\".to_string()));\n+                labels.push((pattern.span, \"consider giving the pattern a type\".to_owned()));\n             }\n         }\n "}, {"sha": "1f84c73a715833fae46ac4cd09fea46b17f8bd1b", "filename": "src/librustc/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=0e84647e18181ea9aa199d42b3da598eb59ab70c", "patch": "@@ -113,12 +113,12 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             (None, None) => {\n                 let (main_label_1, span_label_1) = if ty_sup.id == ty_sub.id {\n                     (\n-                        \"this type is declared with multiple lifetimes...\".to_string(),\n-                        \"...but data with one lifetime flows into the other here\".to_string()\n+                        \"this type is declared with multiple lifetimes...\".to_owned(),\n+                        \"...but data with one lifetime flows into the other here\".to_owned()\n                     )\n                 } else {\n                     (\n-                        \"these two types are declared with different lifetimes...\".to_string(),\n+                        \"these two types are declared with different lifetimes...\".to_owned(),\n                         format!(\n                             \"...but data{} flows{} here\",\n                             span_label_var1,\n@@ -133,15 +133,15 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 ty_sub.span,\n                 ret_span,\n                 \"this parameter and the return type are declared \\\n-                 with different lifetimes...\".to_string()\n+                 with different lifetimes...\".to_owned()\n                 ,\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),\n             (_, Some(ret_span)) => (\n                 ty_sup.span,\n                 ret_span,\n                 \"this parameter and the return type are declared \\\n-                 with different lifetimes...\".to_string()\n+                 with different lifetimes...\".to_owned()\n                 ,\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),"}, {"sha": "48ec3210fe72787988158e9dc47fdac03a544793", "filename": "src/librustc/infer/lexical_region_resolve/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84647e18181ea9aa199d42b3da598eb59ab70c/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fgraphviz.rs?ref=0e84647e18181ea9aa199d42b3da598eb59ab70c", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'gcx, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n         match *e {\n             Edge::Constraint(ref c) =>\n                 dot::LabelText::label(format!(\"{:?}\", self.map.get(c).unwrap())),\n-            Edge::EnclScope(..) => dot::LabelText::label(\"(enclosed)\".to_string()),\n+            Edge::EnclScope(..) => dot::LabelText::label(\"(enclosed)\".to_owned()),\n         }\n     }\n }"}]}