{"sha": "9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "node_id": "C_kwDOAAsO6NoAKDllYTRkNDEyN2ZhMmM3ZTk5ZDMxYTRhOGE1OTIyN2M5ODc0ZDYxZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-26T01:52:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-26T01:52:46Z"}, "message": "Auto merge of #96414 - Dylan-DPC:rollup-t4ofhoa, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #90312 (Fix some confusing wording and improve slice-search-related docs)\n - #96149 (Remove unused macro rules)\n - #96279 (rustdoc: Remove .woff font files)\n - #96355 (Better handle too many `#` recovery in raw str)\n - #96379 (delay bug when adjusting `NeverToAny` twice during diagnostic code)\n - #96384 (do not consider two extern types to be similar)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "13119c42117d0cb1689dda545278f629f45ade06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13119c42117d0cb1689dda545278f629f45ade06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "html_url": "https://github.com/rust-lang/rust/commit/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8619dca239f57201a3ceb59e93149659c07b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8619dca239f57201a3ceb59e93149659c07b58", "html_url": "https://github.com/rust-lang/rust/commit/ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "f0b2dccc2161a6d17effb63232b1dce885f5305e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b2dccc2161a6d17effb63232b1dce885f5305e", "html_url": "https://github.com/rust-lang/rust/commit/f0b2dccc2161a6d17effb63232b1dce885f5305e"}], "stats": {"total": 419, "additions": 243, "deletions": 176}, "files": [{"sha": "d2180408477044b1e7e795874d2ab212ab415a13", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -255,19 +255,6 @@ impl EmissionGuarantee for ! {\n /// instead of a `&DiagnosticBuilder<'a>`. This `forward!` macro makes\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n-    // Forward pattern for &self -> &Self\n-    (\n-        $(#[$attrs:meta])*\n-        pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)?) -> &Self\n-    ) => {\n-        $(#[$attrs])*\n-        #[doc = concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\")]\n-        pub fn $n(&self, $($name: $ty),*) -> &Self {\n-            self.diagnostic.$n($($name),*);\n-            self\n-        }\n-    };\n-\n     // Forward pattern for &mut self -> &mut Self\n     (\n         $(#[$attrs:meta])*"}, {"sha": "23c377651cc6c8f1595e4f329052e8411eeb60a1", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -453,9 +453,6 @@ macro_rules! impl_arena_allocatable_decoder {\n             }\n         }\n     };\n-    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n-        impl_arena_allocatable_decoder!([$($attrs),*]$args);\n-    };\n }\n \n macro_rules! impl_arena_allocatable_decoders {"}, {"sha": "acc0d7a6ee05efd86769c227f4e167aa887f9082", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -431,10 +431,11 @@ impl<'a> Parser<'a> {\n                 return Ok(true);\n             } else if self.look_ahead(0, |t| {\n                 t == &token::CloseDelim(token::Brace)\n-                    || (\n-                        t.can_begin_expr() && t != &token::Semi && t != &token::Pound\n-                        // Avoid triggering with too many trailing `#` in raw string.\n-                    )\n+                    || (t.can_begin_expr() && t != &token::Semi && t != &token::Pound)\n+                    // Avoid triggering with too many trailing `#` in raw string.\n+                    || (sm.is_multiline(\n+                        self.prev_token.span.shrink_to_hi().until(self.token.span.shrink_to_lo())\n+                    ) && t == &token::Pound)\n             }) {\n                 // Missing semicolon typo. This is triggered if the next token could either start a\n                 // new statement or is a block close. For example:\n@@ -508,7 +509,12 @@ impl<'a> Parser<'a> {\n         }\n \n         if self.check_too_many_raw_str_terminators(&mut err) {\n-            return Err(err);\n+            if expected.contains(&TokenType::Token(token::Semi)) && self.eat(&token::Semi) {\n+                err.emit();\n+                return Ok(true);\n+            } else {\n+                return Err(err);\n+            }\n         }\n \n         if self.prev_token.span == DUMMY_SP {\n@@ -538,22 +544,41 @@ impl<'a> Parser<'a> {\n     }\n \n     fn check_too_many_raw_str_terminators(&mut self, err: &mut Diagnostic) -> bool {\n+        let sm = self.sess.source_map();\n         match (&self.prev_token.kind, &self.token.kind) {\n             (\n                 TokenKind::Literal(Lit {\n                     kind: LitKind::StrRaw(n_hashes) | LitKind::ByteStrRaw(n_hashes),\n                     ..\n                 }),\n                 TokenKind::Pound,\n-            ) => {\n+            ) if !sm.is_multiline(\n+                self.prev_token.span.shrink_to_hi().until(self.token.span.shrink_to_lo()),\n+            ) =>\n+            {\n+                let n_hashes: u8 = *n_hashes;\n                 err.set_primary_message(\"too many `#` when terminating raw string\");\n+                let str_span = self.prev_token.span;\n+                let mut span = self.token.span;\n+                let mut count = 0;\n+                while self.token.kind == TokenKind::Pound\n+                    && !sm.is_multiline(span.shrink_to_hi().until(self.token.span.shrink_to_lo()))\n+                {\n+                    span = span.with_hi(self.token.span.hi());\n+                    self.bump();\n+                    count += 1;\n+                }\n+                err.set_span(span);\n                 err.span_suggestion(\n-                    self.token.span,\n-                    \"remove the extra `#`\",\n+                    span,\n+                    &format!(\"remove the extra `#`{}\", pluralize!(count)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );\n-                err.note(&format!(\"the raw string started with {n_hashes} `#`s\"));\n+                err.span_label(\n+                    str_span,\n+                    &format!(\"this raw string started with {n_hashes} `#`{}\", pluralize!(n_hashes)),\n+                );\n                 true\n             }\n             _ => false,"}, {"sha": "7d6b8c760ff6a4e3fde8b1c60691e0322388bc3d", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -498,7 +498,6 @@ macro_rules! peel {\n /// Therefore, the recursion depth is the binary logarithm of the number of\n /// tokens to count, and the expanded tree is likewise very small.\n macro_rules! count {\n-    ()                     => (0usize);\n     ($one:tt)              => (1usize);\n     ($($pairs:tt $_p:tt)*) => (count!($($pairs)*) << 1usize);\n     ($odd:tt $($rest:tt)*) => (count!($($rest)*) | 1usize);"}, {"sha": "965a3c109832ba2cfa79b7a1075955f03a04bc7d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -2249,10 +2249,6 @@ impl ToJson for Target {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n                 d.insert(name, self.$attr.to_json());\n             }};\n-            ($attr:ident, $key_name:expr) => {{\n-                let name = $key_name;\n-                d.insert(name.into(), self.$attr.to_json());\n-            }};\n         }\n \n         macro_rules! target_option_val {"}, {"sha": "082402a38e3f5db45813d5078fa7456103d30e85", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -1727,6 +1727,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         } else if cat_a == cat_b {\n             match (a.kind(), b.kind()) {\n                 (ty::Adt(def_a, _), ty::Adt(def_b, _)) => def_a == def_b,\n+                (ty::Foreign(def_a), ty::Foreign(def_b)) => def_a == def_b,\n                 // Matching on references results in a lot of unhelpful\n                 // suggestions, so let's just not do that for now.\n                 //"}, {"sha": "76ac356efd6d5ffbc1d94f5381626bbd7600783c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -78,10 +78,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // While we don't allow *arbitrary* coercions here, we *do* allow\n         // coercions from ! to `expected`.\n         if ty.is_never() {\n-            assert!(\n-                !self.typeck_results.borrow().adjustments().contains_key(expr.hir_id),\n-                \"expression with never type wound up being adjusted\"\n-            );\n+            if let Some(adjustments) = self.typeck_results.borrow().adjustments().get(expr.hir_id) {\n+                self.tcx().sess.delay_span_bug(\n+                    expr.span,\n+                    \"expression with never type wound up being adjusted\",\n+                );\n+                return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &adjustments[..] {\n+                    target.to_owned()\n+                } else {\n+                    self.tcx().ty_error()\n+                };\n+            }\n+\n             let adj_ty = self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::AdjustmentType,\n                 span: expr.span,"}, {"sha": "736b38370ab87929a5b9b60efec2bf5cd2de4142", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -645,7 +645,7 @@ impl<T> LinkedList<T> {\n     /// Returns `true` if the `LinkedList` contains an element equal to the\n     /// given value.\n     ///\n-    /// This operation should compute in *O*(*n*) time.\n+    /// This operation should compute linearly in *O*(*n*) time.\n     ///\n     /// # Examples\n     ///\n@@ -1569,7 +1569,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// Appends an element to the front of the cursor's parent list. The node\n     /// that the cursor points to is unchanged, even if it is the \"ghost\" node.\n     ///\n-    /// This operation should compute in O(1) time.\n+    /// This operation should compute in *O*(1) time.\n     // `push_front` continues to point to \"ghost\" when it addes a node to mimic\n     // the behavior of `insert_before` on an empty list.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n@@ -1584,7 +1584,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// Appends an element to the back of the cursor's parent list. The node\n     /// that the cursor points to is unchanged, even if it is the \"ghost\" node.\n     ///\n-    /// This operation should compute in O(1) time.\n+    /// This operation should compute in *O*(1) time.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn push_back(&mut self, elt: T) {\n         // Safety: We know that `push_back` does not change the position in\n@@ -1603,7 +1603,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// unchanged, unless it was pointing to the front element. In that case, it\n     /// points to the new front element.\n     ///\n-    /// This operation should compute in O(1) time.\n+    /// This operation should compute in *O*(1) time.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn pop_front(&mut self) -> Option<T> {\n         // We can't check if current is empty, we must check the list directly.\n@@ -1630,7 +1630,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// unchanged, unless it was pointing to the back element. In that case, it\n     /// points to the \"ghost\" element.\n     ///\n-    /// This operation should compute in O(1) time.\n+    /// This operation should compute in *O*(1) time.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n     pub fn pop_back(&mut self) -> Option<T> {\n         if self.list.is_empty() {"}, {"sha": "ab14a43fb9379ea2681d0b2436755675022fe1d9", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -1342,6 +1342,12 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// Returns `true` if the deque contains an element equal to the\n     /// given value.\n     ///\n+    /// This operation is *O*(*n*).\n+    ///\n+    /// Note that if you have a sorted `VecDeque`, [`binary_search`] may be faster.\n+    ///\n+    /// [`binary_search`]: VecDeque::binary_search\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2560,7 +2566,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Binary searches the sorted deque for a given element.\n+    /// Binary searches this `VecDeque` for a given element.\n+    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2570,6 +2577,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n+    /// [`contains`]: VecDeque::contains\n     /// [`binary_search_by`]: VecDeque::binary_search_by\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2614,7 +2622,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.binary_search_by(|e| e.cmp(x))\n     }\n \n-    /// Binary searches the sorted deque with a comparator function.\n+    /// Binary searches this `VecDeque` with a comparator function.\n+    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// The comparator function should implement an order consistent\n     /// with the sort order of the deque, returning an order code that\n@@ -2629,6 +2638,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n+    /// [`contains`]: VecDeque::contains\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by_key`]: VecDeque::binary_search_by_key\n     /// [`partition_point`]: VecDeque::partition_point\n@@ -2667,7 +2677,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Binary searches the sorted deque with a key extraction function.\n+    /// Binary searches this `VecDeque` with a key extraction function.\n+    /// This behaves similarly to [`contains`] if this `VecDeque` is sorted.\n     ///\n     /// Assumes that the deque is sorted by the key, for instance with\n     /// [`make_contiguous().sort_by_key()`] using the same key extraction function.\n@@ -2680,6 +2691,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n+    /// [`contains`]: VecDeque::contains\n     /// [`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n     /// [`binary_search`]: VecDeque::binary_search\n     /// [`binary_search_by`]: VecDeque::binary_search_by"}, {"sha": "7ef78e0b48af161015ef27375dee5755afcdc9df", "filename": "library/core/src/internal_macros.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Fsrc%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Fsrc%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Finternal_macros.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -1,10 +1,6 @@\n // implements the unary operator \"op &T\"\n // based on \"op T\" where T is expected to be `Copy`able\n macro_rules! forward_ref_unop {\n-    (impl $imp:ident, $method:ident for $t:ty) => {\n-        forward_ref_unop!(impl $imp, $method for $t,\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n-    };\n     (impl const $imp:ident, $method:ident for $t:ty) => {\n         forward_ref_unop!(impl const $imp, $method for $t,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n@@ -38,10 +34,6 @@ macro_rules! forward_ref_unop {\n // implements binary operators \"&T op U\", \"T op &U\", \"&T op &U\"\n // based on \"T op U\" where T and U are expected to be `Copy`able\n macro_rules! forward_ref_binop {\n-    (impl $imp:ident, $method:ident for $t:ty, $u:ty) => {\n-        forward_ref_binop!(impl $imp, $method for $t, $u,\n-                #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n-    };\n     (impl const $imp:ident, $method:ident for $t:ty, $u:ty) => {\n         forward_ref_binop!(impl const $imp, $method for $t, $u,\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]);\n@@ -230,22 +222,6 @@ macro_rules! cfg_if {\n         }\n     };\n \n-    // match if/else chains lacking a final `else`\n-    (\n-        if #[cfg( $i_meta:meta )] { $( $i_tokens:tt )* }\n-        $(\n-            else if #[cfg( $e_meta:meta )] { $( $e_tokens:tt )* }\n-        )*\n-    ) => {\n-        cfg_if! {\n-            @__items () ;\n-            (( $i_meta ) ( $( $i_tokens )* )) ,\n-            $(\n-                (( $e_meta ) ( $( $e_tokens )* )) ,\n-            )*\n-        }\n-    };\n-\n     // Internal and recursive macro to emit all the items\n     //\n     // Collects all the previous cfgs in a list at the beginning, so they can be"}, {"sha": "a226dea54a4f2ab228512e666fb4abf7210cb742", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -2139,6 +2139,12 @@ impl<T> [T] {\n \n     /// Returns `true` if the slice contains an element with the given value.\n     ///\n+    /// This operation is *O*(*n*).\n+    ///\n+    /// Note that if you have a sorted slice, [`binary_search`] may be faster.\n+    ///\n+    /// [`binary_search`]: slice::binary_search\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2298,7 +2304,8 @@ impl<T> [T] {\n         None\n     }\n \n-    /// Binary searches this sorted slice for a given element.\n+    /// Binary searches this slice for a given element.\n+    /// This behaves similary to [`contains`] if this slice is sorted.\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n@@ -2310,6 +2317,7 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n+    /// [`contains`]: slice::contains\n     /// [`binary_search_by`]: slice::binary_search_by\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2349,7 +2357,8 @@ impl<T> [T] {\n         self.binary_search_by(|p| p.cmp(x))\n     }\n \n-    /// Binary searches this sorted slice with a comparator function.\n+    /// Binary searches this slice with a comparator function.\n+    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// The comparator function should implement an order consistent\n     /// with the sort order of the underlying slice, returning an\n@@ -2366,6 +2375,7 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n+    /// [`contains`]: slice::contains\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by_key`]: slice::binary_search_by_key\n     /// [`partition_point`]: slice::partition_point\n@@ -2424,7 +2434,8 @@ impl<T> [T] {\n         Err(left)\n     }\n \n-    /// Binary searches this sorted slice with a key extraction function.\n+    /// Binary searches this slice with a key extraction function.\n+    /// This behaves similarly to [`contains`] if this slice is sorted.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n@@ -2439,6 +2450,7 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n+    /// [`contains`]: slice::contains\n     /// [`sort_by_key`]: slice::sort_by_key\n     /// [`binary_search`]: slice::binary_search\n     /// [`binary_search_by`]: slice::binary_search_by"}, {"sha": "ae8b938250ec9177f680902e7de4ff0ee7876dad", "filename": "library/core/tests/num/ops.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Ftests%2Fnum%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fcore%2Ftests%2Fnum%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fops.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -43,18 +43,6 @@ macro_rules! impls_defined {\n }\n \n macro_rules! test_op {\n-    ($fn_name:ident, $op:ident::$method:ident($lhs:literal, $rhs:literal), $result:literal, $($t:ty),+) => {\n-        #[test]\n-        fn $fn_name() {\n-            impls_defined!($op, $method($lhs, $rhs), $result, $($t),+);\n-        }\n-    };\n-    ($fn_name:ident, $op:ident::$method:ident(&mut $lhs:literal, $rhs:literal), $result:literal, $($t:ty),+) => {\n-        #[test]\n-        fn $fn_name() {\n-            impls_defined!($op, $method(&mut $lhs, $rhs), $result, $($t),+);\n-        }\n-    };\n     ($fn_name:ident, $op:ident::$method:ident($lhs:literal), $result:literal, $($t:ty),+) => {\n         #[test]\n         fn $fn_name() {"}, {"sha": "04fa696d5e6be936a97f505aef6e14b7869587ca", "filename": "library/proc_macro/src/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fproc_macro%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/library%2Fproc_macro%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fquote.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -12,7 +12,6 @@ macro_rules! quote_tt {\n     ({$($t:tt)*}) => { Group::new(Delimiter::Brace, quote!($($t)*)) };\n     (,) => { Punct::new(',', Spacing::Alone) };\n     (.) => { Punct::new('.', Spacing::Alone) };\n-    (:) => { Punct::new(':', Spacing::Alone) };\n     (;) => { Punct::new(';', Spacing::Alone) };\n     (!) => { Punct::new('!', Spacing::Alone) };\n     (<) => { Punct::new('<', Spacing::Alone) };"}, {"sha": "7c202e471adbe22d86121716c37bb3a41cdae78c", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -21,27 +21,18 @@ use crate::{try_err, try_none};\n \n static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n     map! {\n-        \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR2,\n-        \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM2,\n-        \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n-        \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n+        \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR,\n+        \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM,\n         \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n-        \"SourceSerif4-Regular.ttf.woff2\" => static_files::source_serif_4::REGULAR2,\n-        \"SourceSerif4-Bold.ttf.woff2\" => static_files::source_serif_4::BOLD2,\n-        \"SourceSerif4-It.ttf.woff2\" => static_files::source_serif_4::ITALIC2,\n-        \"SourceSerif4-Regular.ttf.woff\" => static_files::source_serif_4::REGULAR,\n-        \"SourceSerif4-Bold.ttf.woff\" => static_files::source_serif_4::BOLD,\n-        \"SourceSerif4-It.ttf.woff\" => static_files::source_serif_4::ITALIC,\n+        \"SourceSerif4-Regular.ttf.woff2\" => static_files::source_serif_4::REGULAR,\n+        \"SourceSerif4-Bold.ttf.woff2\" => static_files::source_serif_4::BOLD,\n+        \"SourceSerif4-It.ttf.woff2\" => static_files::source_serif_4::ITALIC,\n         \"SourceSerif4-LICENSE.md\" => static_files::source_serif_4::LICENSE,\n-        \"SourceCodePro-Regular.ttf.woff2\" => static_files::source_code_pro::REGULAR2,\n-        \"SourceCodePro-Semibold.ttf.woff2\" => static_files::source_code_pro::SEMIBOLD2,\n-        \"SourceCodePro-It.ttf.woff2\" => static_files::source_code_pro::ITALIC2,\n-        \"SourceCodePro-Regular.ttf.woff\" => static_files::source_code_pro::REGULAR,\n-        \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n-        \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,\n+        \"SourceCodePro-Regular.ttf.woff2\" => static_files::source_code_pro::REGULAR,\n+        \"SourceCodePro-Semibold.ttf.woff2\" => static_files::source_code_pro::SEMIBOLD,\n+        \"SourceCodePro-It.ttf.woff2\" => static_files::source_code_pro::ITALIC,\n         \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n-        \"NanumBarunGothic.ttf.woff2\" => static_files::nanum_barun_gothic::REGULAR2,\n-        \"NanumBarunGothic.ttf.woff\" => static_files::nanum_barun_gothic::REGULAR,\n+        \"NanumBarunGothic.ttf.woff2\" => static_files::nanum_barun_gothic::REGULAR,\n         \"NanumBarunGothic-LICENSE.txt\" => static_files::nanum_barun_gothic::LICENSE,\n         \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n         \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,"}, {"sha": "34e48134cc34c9295fe78ce55d383c842b9f076d", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -2,8 +2,7 @@ These documentation pages include resources by third parties. This copyright\n file applies only to those resources. The following third party resources are\n included, and carry their own copyright notices and license terms:\n \n-* Fira Sans (FiraSans-Regular.woff2, FiraSans-Medium.woff2,\n-    FiraSans-Regular.woff, FiraSans-Medium.woff):\n+* Fira Sans (FiraSans-Regular.woff2, FiraSans-Medium.woff2):\n \n     Copyright (c) 2014, Mozilla Foundation https://mozilla.org/\n     with Reserved Font Name Fira Sans.\n@@ -25,9 +24,7 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the MIT license (see LICENSE-MIT.txt).\n \n * Source Code Pro (SourceCodePro-Regular.ttf.woff2,\n-    SourceCodePro-Semibold.ttf.woff2, SourceCodePro-It.ttf.woff2,\n-    SourceCodePro-Regular.ttf.woff, SourceCodePro-Semibold.ttf.woff,\n-    SourceCodePro-It.ttf.woff):\n+    SourceCodePro-Semibold.ttf.woff2, SourceCodePro-It.ttf.woff2):\n \n     Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\n     with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark\n@@ -37,8 +34,7 @@ included, and carry their own copyright notices and license terms:\n     See SourceCodePro-LICENSE.txt.\n \n * Source Serif 4 (SourceSerif4-Regular.ttf.woff2, SourceSerif4-Bold.ttf.woff2,\n-    SourceSerif4-It.ttf.woff2, SourceSerif4-Regular.ttf.woff,\n-    SourceSerif4-Bold.ttf.woff, SourceSerif4-It.ttf.woff):\n+    SourceSerif4-It.ttf.woff2):\n \n     Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name\n     'Source'. All Rights Reserved. Source is a trademark of Adobe in the United"}, {"sha": "81c12be8e83c0cdf7d4f99264465c608e4da4dc5", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -4,17 +4,15 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Fira Sans'),\n-\t\turl(\"FiraSans-Regular.woff2\") format(\"woff2\"),\n-\t\turl(\"FiraSans-Regular.woff\") format('woff');\n+\t\turl(\"FiraSans-Regular.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n \tsrc: local('Fira Sans Medium'),\n-\t\turl(\"FiraSans-Medium.woff2\") format(\"woff2\"),\n-\t\turl(\"FiraSans-Medium.woff\") format('woff');\n+\t\turl(\"FiraSans-Medium.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n@@ -24,26 +22,23 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4'),\n-\t\turl(\"SourceSerif4-Regular.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceSerif4-Regular.ttf.woff\") format(\"woff\");\n+\t\turl(\"SourceSerif4-Regular.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4 Italic'),\n-\t\turl(\"SourceSerif4-It.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceSerif4-It.ttf.woff\") format(\"woff\");\n+\t\turl(\"SourceSerif4-It.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n \tsrc: local('Source Serif 4 Bold'),\n-\t\turl(\"SourceSerif4-Bold.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceSerif4-Bold.ttf.woff\") format(\"woff\");\n+\t\turl(\"SourceSerif4-Bold.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n@@ -54,32 +49,28 @@\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceCodePro-Regular.ttf.woff\") format(\"woff\");\n+\tsrc: url(\"SourceCodePro-Regular.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: url(\"SourceCodePro-It.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceCodePro-It.ttf.woff\") format(\"woff\");\n+\tsrc: url(\"SourceCodePro-It.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tsrc: url(\"SourceCodePro-Semibold.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"SourceCodePro-Semibold.ttf.woff\") format(\"woff\");\n+\tsrc: url(\"SourceCodePro-Semibold.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n /* Avoid using legacy CJK serif fonts in Windows like Batang. */\n @font-face {\n \tfont-family: 'NanumBarunGothic';\n-\tsrc: url(\"NanumBarunGothic.ttf.woff2\") format(\"woff2\"),\n-\t\turl(\"NanumBarunGothic.ttf.woff\") format(\"woff\");\n+\tsrc: url(\"NanumBarunGothic.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n \tunicode-range: U+AC00-D7AF, U+1100-11FF, U+3130-318F, U+A960-A97F, U+D7B0-D7FF;\n }"}, {"sha": "7d742c5fb7d4597ae140f8418f52ffe03dc75343", "filename": "src/librustdoc/html/static/fonts/FiraSans-Medium.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Medium.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "d8e0363f4e1a000568d782653291e14c66ee3485", "filename": "src/librustdoc/html/static/fonts/FiraSans-Regular.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FFiraSans-Regular.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "fb063e8fb7dc5435c591560e257903a35f76ee6a", "filename": "src/librustdoc/html/static/fonts/NanumBarunGothic.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FNanumBarunGothic.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FNanumBarunGothic.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FNanumBarunGothic.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "8d68f2febddb04dd6e768a4939d63eb7a1f4a139", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-It.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-It.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "7be076e1fca99ac23aba68ccfb6e4b94b776b772", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Regular.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Regular.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "61bc67b80252dc41fef75b08604adc1a09c34761", "filename": "src/librustdoc/html/static/fonts/SourceCodePro-Semibold.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceCodePro-Semibold.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "8ad41888e6e3f9f4439052ae6b14ece2cdfcd7cb", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Bold.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Bold.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "2a34b5c42a8aaca17a3c6a37a33489ab0cf2193f", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-It.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-It.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "45a5521ab0c77a02ebf55a3f7305faccc02e2894", "filename": "src/librustdoc/html/static/fonts/SourceSerif4-Regular.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/ec8619dca239f57201a3ceb59e93149659c07b58/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FSourceSerif4-Regular.ttf.woff?ref=ec8619dca239f57201a3ceb59e93149659c07b58"}, {"sha": "bec5c083fed225b7f3afd6fbd55ca5866f2c6a10", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -92,72 +92,47 @@ crate mod themes {\n \n /// Files related to the Fira Sans font.\n crate mod fira_sans {\n-    /// The file `FiraSans-Regular.woff`, the Regular variant of the Fira Sans font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff\");\n-\n     /// The file `FiraSans-Regular.woff2`, the Regular variant of the Fira Sans font in woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff2\");\n-\n-    /// The file `FiraSans-Medium.woff`, the Medium variant of the Fira Sans font.\n-    crate static MEDIUM: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff2\");\n \n     /// The file `FiraSans-Medium.woff2`, the Medium variant of the Fira Sans font in woff2.\n-    crate static MEDIUM2: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff2\");\n+    crate static MEDIUM: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff2\");\n \n     /// The file `FiraSans-LICENSE.txt`, the license text for the Fira Sans font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/FiraSans-LICENSE.txt\");\n }\n \n /// Files related to the Source Serif 4 font.\n crate mod source_serif_4 {\n-    /// The file `SourceSerif4-Regular.ttf.woff`, the Regular variant of the Source Serif 4 font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff\");\n-\n     /// The file `SourceSerif4-Regular.ttf.woff2`, the Regular variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff2\");\n-\n-    /// The file `SourceSerif4-Bold.ttf.woff`, the Bold variant of the Source Serif 4 font.\n-    crate static BOLD: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff2\");\n \n     /// The file `SourceSerif4-Bold.ttf.woff2`, the Bold variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static BOLD2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff2\");\n-\n-    /// The file `SourceSerif4-It.ttf.woff`, the Italic variant of the Source Serif 4 font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff\");\n+    crate static BOLD: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff2\");\n \n     /// The file `SourceSerif4-It.ttf.woff2`, the Italic variant of the Source Serif 4 font in\n     /// woff2.\n-    crate static ITALIC2: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff2\");\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff2\");\n \n     /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font.\n crate mod source_code_pro {\n-    /// The file `SourceCodePro-Regular.ttf.woff`, the Regular variant of the Source Code Pro font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff\");\n-\n     /// The file `SourceCodePro-Regular.ttf.woff2`, the Regular variant of the Source Code Pro font\n     /// in woff2.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff2\");\n-\n-    /// The file `SourceCodePro-Semibold.ttf.woff`, the Semibold variant of the Source Code Pro\n-    /// font.\n-    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff2\");\n \n     /// The file `SourceCodePro-Semibold.ttf.woff2`, the Semibold variant of the Source Code Pro\n     /// font in woff2.\n-    crate static SEMIBOLD2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff2\");\n-\n-    /// The file `SourceCodePro-It.ttf.woff`, the Italic variant of the Source Code Pro font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff\");\n+    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff2\");\n \n     /// The file `SourceCodePro-It.ttf.woff2`, the Italic variant of the Source Code Pro font in\n     /// woff2.\n-    crate static ITALIC2: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff2\");\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff2\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-LICENSE.txt\");\n@@ -176,19 +151,11 @@ crate mod source_code_pro {\n /// ```sh\n /// pyftsubset NanumBarunGothic.ttf \\\n /// --unicodes=U+AC00-D7AF,U+1100-11FF,U+3130-318F,U+A960-A97F,U+D7B0-D7FF \\\n-/// --output-file=NanumBarunGothic.ttf.woff --flavor=woff\n-/// ```\n-/// ```sh\n-/// pyftsubset NanumBarunGothic.ttf \\\n-/// --unicodes=U+AC00-D7AF,U+1100-11FF,U+3130-318F,U+A960-A97F,U+D7B0-D7FF \\\n /// --output-file=NanumBarunGothic.ttf.woff2 --flavor=woff2\n /// ```\n crate mod nanum_barun_gothic {\n-    /// The file `NanumBarunGothic.ttf.woff`, the Regular variant of the Nanum Barun Gothic font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic.ttf.woff\");\n-\n     /// The file `NanumBarunGothic.ttf.woff2`, the Regular variant of the Nanum Barun Gothic font.\n-    crate static REGULAR2: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic.ttf.woff2\");\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic.ttf.woff2\");\n \n     /// The file `NanumBarunGothic-LICENSE.txt`, the license text of the Nanum Barun Gothic font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic-LICENSE.txt\");"}, {"sha": "9f46883beaaccd86223a1c1694d5a33899718bc6", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -14,7 +14,7 @@ invocation-only:\n \t[ -e $(INVOCATION_ONLY)/x/index.html ]\n \t[ -e $(INVOCATION_ONLY)/theme-xxx.css ] # generated from z.css\n \t! [ -e $(INVOCATION_ONLY)/storage-xxx.js ]\n-\t! [ -e $(INVOCATION_ONLY)/SourceSerif4-It.ttf.woff ]\n+\t! [ -e $(INVOCATION_ONLY)/SourceSerif4-It.ttf.woff2 ]\n \n \t# FIXME: this probably shouldn't have a suffix\n \t[ -e $(INVOCATION_ONLY)/y-xxx.css ]\n@@ -24,7 +24,7 @@ invocation-only:\n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n-\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerif4-It.ttf.woff ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerif4-It.ttf.woff2 ]\n \t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n \t! [ -e $(TOOLCHAIN_ONLY)/theme.css ]\n@@ -35,7 +35,7 @@ toolchain-only:\n all-shared:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(ALL_SHARED)/storage-xxx.js ]\n-\t[ -e $(ALL_SHARED)/SourceSerif4-It.ttf.woff ]\n+\t[ -e $(ALL_SHARED)/SourceSerif4-It.ttf.woff2 ]\n \t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n \t! [ -e $(ALL_SHARED)/settings.html ]\n \t! [ -e $(ALL_SHARED)/x ]"}, {"sha": "39d00a6c1bc31c11bf0fde0f7a61bd9983ab7e97", "filename": "src/test/ui/extern/extern-type-diag-not-similar.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -0,0 +1,22 @@\n+// We previously mentioned other extern types in the error message here.\n+//\n+// Two extern types shouldn't really be considered similar just\n+// because they are both extern types.\n+\n+#![feature(extern_types)]\n+extern {\n+    type ShouldNotBeMentioned;\n+}\n+\n+extern {\n+    type Foo;\n+}\n+\n+unsafe impl Send for ShouldNotBeMentioned {}\n+\n+fn assert_send<T: Send + ?Sized>() {}\n+\n+fn main() {\n+    assert_send::<Foo>()\n+    //~^ ERROR `Foo` cannot be sent between threads safely\n+}"}, {"sha": "75836f7eca19c794221e25a0a3846e937880e0d5", "filename": "src/test/ui/extern/extern-type-diag-not-similar.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-type-diag-not-similar.stderr?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: `Foo` cannot be sent between threads safely\n+  --> $DIR/extern-type-diag-not-similar.rs:20:19\n+   |\n+LL |     assert_send::<Foo>()\n+   |                   ^^^ `Foo` cannot be sent between threads safely\n+   |\n+   = help: the trait `Send` is not implemented for `Foo`\n+note: required by a bound in `assert_send`\n+  --> $DIR/extern-type-diag-not-similar.rs:17:19\n+   |\n+LL | fn assert_send<T: Send + ?Sized>() {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "411a7c9df657bfc04beea996c915a89571d7bfeb", "filename": "src/test/ui/never_type/issue-96335.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    0.....{loop{}1};\n+    //~^ ERROR unexpected token\n+    //~| ERROR mismatched types\n+}"}, {"sha": "168cf2f83535d3558848392d29d3c6632edf9e40", "filename": "src/test/ui/never_type/issue-96335.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-96335.stderr?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -0,0 +1,35 @@\n+error: unexpected token: `...`\n+  --> $DIR/issue-96335.rs:2:6\n+   |\n+LL |     0.....{loop{}1};\n+   |      ^^^\n+   |\n+help: use `..` for an exclusive range\n+   |\n+LL |     0....{loop{}1};\n+   |      ~~\n+help: or `..=` for an inclusive range\n+   |\n+LL |     0..=..{loop{}1};\n+   |      ~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-96335.rs:2:9\n+   |\n+LL |     0.....{loop{}1};\n+   |     ----^^^^^^^^^^^\n+   |     |   |\n+   |     |   expected integer, found struct `RangeTo`\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected type `{integer}`\n+            found struct `RangeTo<{integer}>`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/ops/range.rs:LL:COL\n+   |\n+LL |     pub const fn new(start: Idx, end: Idx) -> Self {\n+   |                  ^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "38537f8b31e64e1bd392faa7b63c81bb83c8a6ad", "filename": "src/test/ui/parser/raw/raw-str-unbalanced.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.rs?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -1,4 +1,22 @@\n static s: &'static str =\n+    r#\"\"## //~ ERROR too many `#` when terminating raw string\n+;\n+\n+static s2: &'static str =\n     r#\"\n-      \"## //~ too many `#` when terminating raw string\n+      \"#### //~ ERROR too many `#` when terminating raw string\n ;\n+\n+const A: &'static str = r\"\" //~ ERROR expected `;`, found `#`\n+\n+// Test\n+#[test]\n+fn test() {}\n+\n+const B: &'static str = r\"\"## //~ ERROR too many `#` when terminating raw string\n+\n+// Test\n+#[test]\n+fn test2() {}\n+\n+fn main() {}"}, {"sha": "eac8c06c1df5cad02fecadddb6ade773a060d3a9", "filename": "src/test/ui/parser/raw/raw-str-unbalanced.stderr", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr?ref=9ea4d4127fa2c7e99d31a4a8a59227c9874d61dc", "patch": "@@ -1,10 +1,36 @@\n error: too many `#` when terminating raw string\n-  --> $DIR/raw-str-unbalanced.rs:3:9\n+  --> $DIR/raw-str-unbalanced.rs:2:10\n    |\n-LL |       \"##\n-   |         ^ help: remove the extra `#`\n+LL |     r#\"\"##\n+   |     -----^ help: remove the extra `#`\n+   |     |\n+   |     this raw string started with 1 `#`\n+\n+error: too many `#` when terminating raw string\n+  --> $DIR/raw-str-unbalanced.rs:7:9\n+   |\n+LL | /     r#\"\n+LL | |       \"####\n+   | |        -^^^ help: remove the extra `#`s\n+   | |________|\n+   |          this raw string started with 1 `#`\n+\n+error: expected `;`, found `#`\n+  --> $DIR/raw-str-unbalanced.rs:10:28\n+   |\n+LL | const A: &'static str = r\"\"\n+   |                            ^ help: add `;` here\n+...\n+LL | #[test]\n+   | - unexpected token\n+\n+error: too many `#` when terminating raw string\n+  --> $DIR/raw-str-unbalanced.rs:16:28\n    |\n-   = note: the raw string started with 1 `#`s\n+LL | const B: &'static str = r\"\"##\n+   |                         ---^^ help: remove the extra `#`s\n+   |                         |\n+   |                         this raw string started with 0 `#`s\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n "}]}