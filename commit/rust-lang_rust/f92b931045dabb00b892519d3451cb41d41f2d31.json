{"sha": "f92b931045dabb00b892519d3451cb41d41f2d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MmI5MzEwNDVkYWJiMDBiODkyNTE5ZDM0NTFjYjQxZDQxZjJkMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T04:17:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T04:17:41Z"}, "message": "Auto merge of #77856 - GuillaumeGomez:automatic-links-lint, r=jyn514,ollie27\n\nAdd non_autolinks lint\n\nPart of #77501.\n\nr? `@jyn514`", "tree": {"sha": "390bdc031544ab2197d8d8a6795fab934f94a0fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390bdc031544ab2197d8d8a6795fab934f94a0fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92b931045dabb00b892519d3451cb41d41f2d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92b931045dabb00b892519d3451cb41d41f2d31", "html_url": "https://github.com/rust-lang/rust/commit/f92b931045dabb00b892519d3451cb41d41f2d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92b931045dabb00b892519d3451cb41d41f2d31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d78d1d02761b906038ba4d54c5f3427f920f5fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d78d1d02761b906038ba4d54c5f3427f920f5fb", "html_url": "https://github.com/rust-lang/rust/commit/9d78d1d02761b906038ba4d54c5f3427f920f5fb"}, {"sha": "99200f760bf588435ca53477bb1eaff34770db0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99200f760bf588435ca53477bb1eaff34770db0b", "html_url": "https://github.com/rust-lang/rust/commit/99200f760bf588435ca53477bb1eaff34770db0b"}], "stats": {"total": 462, "additions": 425, "deletions": 37}, "files": [{"sha": "b992552a52172423ea50cb8a1a04e32a8788e8df", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -4297,6 +4297,7 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"minifier\",\n  \"pulldown-cmark 0.8.0\",\n+ \"regex\",\n  \"rustc-rayon\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "1e8e86add1a59ad8fcc7d508a4c04018db488847", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1,6 +1,6 @@\n //! Handling of enum discriminants\n //!\n-//! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n+//! Adapted from <https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs>\n \n use rustc_target::abi::{Int, TagEncoding, Variants};\n "}, {"sha": "24bfdad970a1c4cb0f0d0a24b9a8ceee3346d484", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -69,7 +69,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n     BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n     EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, INVALID_HTML_TAGS,\n-    MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n+    MISSING_DOC_CODE_EXAMPLES, NON_AUTOLINKS, PRIVATE_DOC_TESTS,\n };\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -313,6 +313,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n \n     add_lint_group!(\n         \"rustdoc\",\n+        NON_AUTOLINKS,\n         BROKEN_INTRA_DOC_LINKS,\n         PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,"}, {"sha": "ff7a145c2668d8810f6b34d8c7612f9323cd3f5d", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1890,6 +1890,17 @@ declare_lint! {\n     \"detects invalid HTML tags in doc comments\"\n }\n \n+declare_lint! {\n+    /// The `non_autolinks` lint detects when a URL could be written using\n+    /// only angle brackets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#non_autolinks\n+    pub NON_AUTOLINKS,\n+    Warn,\n+    \"detects URLs that could be written using only angle brackets\"\n+}\n+\n declare_lint! {\n     /// The `where_clauses_object_safety` lint detects for [object safety] of\n     /// [where clauses].\n@@ -2795,6 +2806,7 @@ declare_lint_pass! {\n         MISSING_DOC_CODE_EXAMPLES,\n         INVALID_HTML_TAGS,\n         PRIVATE_DOC_TESTS,\n+        NON_AUTOLINKS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,"}, {"sha": "af9926400ca4464c73b4add8724bc4b9c388995e", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -99,13 +99,13 @@ pub struct Lint {\n     /// The name is written with underscores, e.g., \"unused_imports\".\n     /// On the command line, underscores become dashes.\n     ///\n-    /// See https://rustc-dev-guide.rust-lang.org/diagnostics.html#lint-naming\n+    /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html#lint-naming>\n     /// for naming guidelines.\n     pub name: &'static str,\n \n     /// Default level for the lint.\n     ///\n-    /// See https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels\n+    /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html#diagnostic-levels>\n     /// for guidelines on choosing a default level.\n     pub default_level: Level,\n \n@@ -330,8 +330,8 @@ impl LintBuffer {\n \n /// Declares a static item of type `&'static Lint`.\n ///\n-/// See https://rustc-dev-guide.rust-lang.org/diagnostics.html for documentation\n-/// and guidelines on writing lints.\n+/// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html> for\n+/// documentation and guidelines on writing lints.\n ///\n /// The macro call should start with a doc comment explaining the lint\n /// which will be embedded in the rustc user documentation book. It should"}, {"sha": "22c36b928781be077af0f13617574c0e2d67cdd1", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -17,9 +17,9 @@ rustc_index::newtype_index! {\n impl ExpressionOperandId {\n     /// An expression operand for a \"zero counter\", as described in the following references:\n     ///\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#tag\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter-expressions\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#tag>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter-expressions>\n     ///\n     /// This operand can be used to count two or more separate code regions with a single counter,\n     /// if they run sequentially with no branches, by injecting the `Counter` in a `BasicBlock` for"}, {"sha": "1e70f7605045ee5dd54c597f77ea4be70ec9aa4b", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -228,7 +228,7 @@ pub struct CodegenUnit<'tcx> {\n \n /// Specifies the linkage type for a `MonoItem`.\n ///\n-/// See https://llvm.org/docs/LangRef.html#linkage-types for more details about these variants.\n+/// See <https://llvm.org/docs/LangRef.html#linkage-types> for more details about these variants.\n #[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Linkage {\n     External,"}, {"sha": "1c6937e685c65d3c6ceba23d3d10744cd8733261", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -368,7 +368,7 @@ pub struct TypeckResults<'tcx> {\n     /// leads to a `vec![&&Option<i32>, &Option<i32>]`. Empty vectors are not stored.\n     ///\n     /// See:\n-    /// https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md#definitions\n+    /// <https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md#definitions>\n     pat_adjustments: ItemLocalMap<Vec<Ty<'tcx>>>,\n \n     /// Borrows"}, {"sha": "ac8ab71a1dc96ceea51d2626fa49a10d1566ee98", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1364,7 +1364,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// terms that the \"longer free region\" `'a` outlived the \"shorter free region\" `'b`.\n     ///\n     /// More details can be found in this blog post by Niko:\n-    /// http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\n+    /// <http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/>\n     ///\n     /// In the canonical example\n     ///"}, {"sha": "46de5dba6e0ed708415f9f63de86d808ca046262", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -8,7 +8,7 @@\n //! inside a single block to shuffle a value around unnecessarily.\n //!\n //! LLVM by itself is not good enough at eliminating these redundant copies (eg. see\n-//! https://github.com/rust-lang/rust/issues/32966), so this leaves some performance on the table\n+//! <https://github.com/rust-lang/rust/issues/32966>), so this leaves some performance on the table\n //! that we can regain by implementing an optimization for removing these assign statements in rustc\n //! itself. When this optimization runs fast enough, it can also speed up the constant evaluation\n //! and code generation phases of rustc due to the reduced number of statements and locals."}, {"sha": "bc85d45d86773615f92a67206136006c60ac28c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -8,7 +8,7 @@\n //! (b) each pattern is necessary (usefulness)\n //!\n //! The algorithm implemented here is a modified version of the one described in:\n-//! http://moscova.inria.fr/~maranget/papers/warn/index.html\n+//! <http://moscova.inria.fr/~maranget/papers/warn/index.html>\n //! However, to save future implementors from reading the original paper, we\n //! summarise the algorithm here to hopefully save time and be a little clearer\n //! (without being so rigorous).\n@@ -2040,7 +2040,7 @@ impl<'tcx> MissingConstructors<'tcx> {\n     }\n }\n \n-/// Algorithm from http://moscova.inria.fr/~maranget/papers/warn/index.html.\n+/// Algorithm from <http://moscova.inria.fr/~maranget/papers/warn/index.html>.\n /// The algorithm from the paper has been modified to correctly handle empty\n /// types. The changes are:\n ///   (0) We don't exit early if the pattern matrix has zero rows. We just"}, {"sha": "0dfacd78908babccf05fc7bc6ea4a53e01ca8275", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -511,7 +511,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Note: It was decided to not add a test case, because it would be to big.\n-    /// https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180\n+    /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {\n         self.fatal_span_(\n             start,"}, {"sha": "75d75433f1bf1ab44aed0c4220b71d200f6b403c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -38,7 +38,7 @@ use std::{cmp, fmt, mem};\n /// Implemented to visit all `DefId`s in a type.\n /// Visiting `DefId`s is useful because visibilities and reachabilities are attached to them.\n /// The idea is to visit \"all components of a type\", as documented in\n-/// https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md#how-to-determine-visibility-of-a-type.\n+/// <https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md#how-to-determine-visibility-of-a-type>.\n /// The default type visitor (`TypeVisitor`) does most of the job, but it has some shortcomings.\n /// First, it doesn't have overridable `fn visit_trait_ref`, so we have to catch trait `DefId`s\n /// manually. Second, it doesn't visit some type components like signatures of fn types, or traits"}, {"sha": "76c0bf419e8c4d36141da30c993a4bdd984e53ad", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -3,7 +3,7 @@\n //!\n //! Table of CRT objects for popular toolchains.\n //! The `crtx` ones are generally distributed with libc and the `begin/end` ones with gcc.\n-//! See https://dev.gentoo.org/~vapier/crt.txt for some more details.\n+//! See <https://dev.gentoo.org/~vapier/crt.txt> for some more details.\n //!\n //! | Pre-link CRT objects | glibc                  | musl                   | bionic           | mingw             | wasi |\n //! |----------------------|------------------------|------------------------|------------------|-------------------|------|"}, {"sha": "d3c5a9433d08e638d1a02e60c3afa8cf2d701a38", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -950,7 +950,7 @@ pub struct TargetOptions {\n     /// The MergeFunctions pass is generally useful, but some targets may need\n     /// to opt out. The default is \"aliases\".\n     ///\n-    /// Workaround for: https://github.com/rust-lang/rust/issues/57356\n+    /// Workaround for: <https://github.com/rust-lang/rust/issues/57356>\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function"}, {"sha": "1ef0a81937849002dc68a3cfa9c7ca0c955235e0", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -8,7 +8,7 @@\n //! (e.g. trying to create a TCP stream or something like that).\n //!\n //! This target is more or less managed by the Rust and WebAssembly Working\n-//! Group nowadays at https://github.com/rustwasm.\n+//! Group nowadays at <https://github.com/rustwasm>.\n \n use super::wasm32_base;\n use super::{LinkerFlavor, LldFlavor, Target};"}, {"sha": "8c2bb9208291d77dce3f71e3504f069b69e97c22", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -7,7 +7,7 @@\n //! intended to empower WebAssembly binaries with native capabilities such as\n //! filesystem access, network access, etc.\n //!\n-//! You can see more about the proposal at https://wasi.dev\n+//! You can see more about the proposal at <https://wasi.dev>.\n //!\n //! The Rust target definition here is interesting in a few ways. We want to\n //! serve two use cases here with this target:"}, {"sha": "32e0991733bd914eb712cc33a1220d60bca25dcd", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -621,7 +621,7 @@ fn object_ty_for_trait<'tcx>(\n ///\n /// In practice, we cannot use `dyn Trait` explicitly in the obligation because it would result\n /// in a new check that `Trait` is object safe, creating a cycle (until object_safe_for_dispatch\n-/// is stabilized, see tracking issue https://github.com/rust-lang/rust/issues/43561).\n+/// is stabilized, see tracking issue <https://github.com/rust-lang/rust/issues/43561>).\n /// Instead, we fudge a little by introducing a new type parameter `U` such that\n /// `Self: Unsize<U>` and `U: Trait + ?Sized`, and use `U` in place of `dyn Trait`.\n /// Written as a chalk-style query:"}, {"sha": "cdde0941470121cd172bc0f9d8497bee772bc498", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -32,7 +32,7 @@ pub use poll_fn::{poll_fn, PollFn};\n /// This type is needed because:\n ///\n /// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass\n-///    a raw pointer (see https://github.com/rust-lang/rust/issues/68923).\n+///    a raw pointer (see <https://github.com/rust-lang/rust/issues/68923>).\n /// b) Raw pointers and `NonNull` aren't `Send` or `Sync`, so that would make every single future\n ///    non-Send/Sync as well, and we don't want that.\n ///"}, {"sha": "0e3129607a6392dc725e91878ae1e86eedbf91c9", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -9,7 +9,7 @@\n //! This includes changes in the stability of the constness.\n //!\n //! In order to make an intrinsic usable at compile-time, one needs to copy the implementation\n-//! from https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics.rs to\n+//! from <https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics.rs> to\n //! `compiler/rustc_mir/src/interpret/intrinsics.rs` and add a\n //! `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` to the intrinsic.\n //!"}, {"sha": "069e6e7e7188155c57a86eff003d5e73210e66e7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -287,6 +287,7 @@ pub mod primitive;\n     unused_imports,\n     unsafe_op_in_unsafe_fn\n )]\n+#[cfg_attr(not(bootstrap), allow(non_autolinks))]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n #[allow(clashing_extern_declarations)]"}, {"sha": "039112e9f34687d073e4c988df8c188e230d7a6a", "filename": "library/core/src/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -33,7 +33,7 @@\n //!\n //! Primarily, this module and its children implement the algorithms described in:\n //! \"How to Read Floating Point Numbers Accurately\" by William D. Clinger,\n-//! available online: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4152\n+//! available online: <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.45.4152>\n //!\n //! In addition, there are numerous helper functions that are used in the paper but not available\n //! in Rust (or at least in core). Our version is additionally complicated by the need to handle"}, {"sha": "2a7693d27efa2d9649ec667b6a71d4f5a28514b7", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1,7 +1,7 @@\n //! Slice sorting\n //!\n //! This module contains a sorting algorithm based on Orson Peters' pattern-defeating quicksort,\n-//! published at: https://github.com/orlp/pdqsort\n+//! published at: <https://github.com/orlp/pdqsort>\n //!\n //! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n //! stable sorting implementation."}, {"sha": "6dbf7c11b4c4ec87b53c90da40a0d61b2031ef87", "filename": "library/panic_unwind/src/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1,9 +1,9 @@\n //! Parsing of GCC-style Language-Specific Data Area (LSDA)\n //! For details see:\n-//!   http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html\n-//!   http://mentorembedded.github.io/cxx-abi/exceptions.pdf\n-//!   http://www.airs.com/blog/archives/460\n-//!   http://www.airs.com/blog/archives/464\n+//!  * <http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html>\n+//!  * <http://mentorembedded.github.io/cxx-abi/exceptions.pdf>\n+//!  * <http://www.airs.com/blog/archives/460>\n+//!  * <http://www.airs.com/blog/archives/464>\n //!\n //! A reference implementation may be found in the GCC source tree\n //! (`<root>/libgcc/unwind-c.c` as of this writing)."}, {"sha": "14f49bbf483373f7f12aa7dfa89cfc8df2e787a2", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -4,9 +4,9 @@\n //! \"Exception Handling in LLVM\" (llvm.org/docs/ExceptionHandling.html) and\n //! documents linked from it.\n //! These are also good reads:\n-//!     https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html\n-//!     http://monoinfinito.wordpress.com/series/exception-handling-in-c/\n-//!     http://www.airs.com/blog/index.php?s=exception+frames\n+//!  * <https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html>\n+//!  * <http://monoinfinito.wordpress.com/series/exception-handling-in-c/>\n+//!  * <http://www.airs.com/blog/index.php?s=exception+frames>\n //!\n //! ## A brief summary\n //!"}, {"sha": "205524ad84fb7d2e64bec101bc6cb25c1cd93cd0", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -152,7 +152,7 @@ impl Step for ToolStateCheck {\n     /// error if there are any.\n     ///\n     /// This also handles publishing the results to the `history` directory of\n-    /// the toolstate repo https://github.com/rust-lang-nursery/rust-toolstate\n+    /// the toolstate repo <https://github.com/rust-lang-nursery/rust-toolstate>\n     /// if the env var `TOOLSTATE_PUBLISH` is set. Note that there is a\n     /// *separate* step of updating the `latest.json` file and creating GitHub\n     /// issues and comments in `src/ci/publish_toolstate.sh`, which is only\n@@ -162,7 +162,7 @@ impl Step for ToolStateCheck {\n     /// The rules for failure are:\n     /// * If the PR modifies a tool, the status must be test-pass.\n     ///   NOTE: There is intent to change this, see\n-    ///   https://github.com/rust-lang/rust/issues/65000.\n+    ///   <https://github.com/rust-lang/rust/issues/65000>.\n     /// * All \"stable\" tools must be test-pass on the stable or beta branches.\n     /// * During beta promotion week, a PR is not allowed to \"regress\" a\n     ///   stable tool. That is, the status is not allowed to get worse"}, {"sha": "80f804174ed082e20527f8206cd6aef5bbf5eb19", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -32,7 +32,7 @@ macro_rules! t {\n \n /// Reads an environment variable and adds it to dependencies.\n /// Supposed to be used for all variables except those set for build scripts by cargo\n-/// https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\n+/// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts>\n pub fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n     println!(\"cargo:rerun-if-env-changed={}\", key);\n     env::var_os(key)"}, {"sha": "41292b3d8384118aa15d287a6d962583810bd614", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -285,3 +285,41 @@ warning: unclosed HTML tag `h1`\n \n warning: 2 warnings emitted\n ```\n+\n+## non_autolinks\n+\n+This lint is **nightly-only** and **warns by default**. It detects links which\n+could use the \"automatic\" link syntax. For example:\n+\n+```rust\n+/// http://example.org\n+/// [http://example.com](http://example.com)\n+/// [http://example.net]\n+///\n+/// [http://example.com]: http://example.com\n+pub fn foo() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: this URL is not a hyperlink\n+ --> foo.rs:1:5\n+  |\n+1 | /// http://example.org\n+  |     ^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://example.org>`\n+  |\n+  = note: `#[warn(non_autolinks)]` on by default\n+\n+warning: unneeded long form for URL\n+ --> foo.rs:2:5\n+  |\n+2 | /// [http://example.com](http://example.com)\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://example.com>`\n+\n+warning: this URL is not a hyperlink\n+ --> foo.rs:3:6\n+  |\n+3 | /// [http://example.net]\n+  |      ^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://example.net>`\n+```"}, {"sha": "b0f5bac6abd0fc069d431fef32ddc4733697a1bd", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -16,6 +16,7 @@ serde_json = \"1.0\"\n smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.9\"\n+regex = \"1\"\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "5eca54199d6c880626a4bcfbd2f91aaca64f5d60", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -330,6 +330,7 @@ pub fn run_core(\n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n     let invalid_html_tags = rustc_lint::builtin::INVALID_HTML_TAGS.name;\n     let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n+    let non_autolinks = rustc_lint::builtin::NON_AUTOLINKS.name;\n     let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n@@ -344,6 +345,7 @@ pub fn run_core(\n         invalid_html_tags.to_owned(),\n         renamed_and_removed_lints.to_owned(),\n         unknown_lints.to_owned(),\n+        non_autolinks.to_owned(),\n     ];\n \n     let (lint_opts, lint_caps) = init_lints(lints_to_show, lint_opts, |lint| {\n@@ -663,7 +665,7 @@ fn run_global_ctxt(\n     (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n }\n \n-/// Due to https://github.com/rust-lang/rust/pull/73566,\n+/// Due to <https://github.com/rust-lang/rust/pull/73566>,\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:\n /// 'Res::Error found but not reported'. To avoid this, emit the errors now."}, {"sha": "047a73835c8ebe96390d05dbe3309aac9d70b3f5", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -11,6 +11,9 @@ use crate::core::DocContext;\n mod stripper;\n pub use stripper::*;\n \n+mod non_autolinks;\n+pub use self::non_autolinks::CHECK_NON_AUTOLINKS;\n+\n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n \n@@ -90,6 +93,7 @@ pub const PASSES: &[Pass] = &[\n     COLLECT_TRAIT_IMPLS,\n     CALCULATE_DOC_COVERAGE,\n     CHECK_INVALID_HTML_TAGS,\n+    CHECK_NON_AUTOLINKS,\n ];\n \n /// The list of passes run by default.\n@@ -105,6 +109,7 @@ pub const DEFAULT_PASSES: &[ConditionalPass] = &[\n     ConditionalPass::always(CHECK_CODE_BLOCK_SYNTAX),\n     ConditionalPass::always(CHECK_INVALID_HTML_TAGS),\n     ConditionalPass::always(PROPAGATE_DOC_CFG),\n+    ConditionalPass::always(CHECK_NON_AUTOLINKS),\n ];\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc."}, {"sha": "4a8fc7fc6181e50fb7e3408e6812610f7baf4e47", "filename": "src/librustdoc/passes/non_autolinks.rs", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fnon_autolinks.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -0,0 +1,139 @@\n+use super::{span_of_attrs, Pass};\n+use crate::clean::*;\n+use crate::core::DocContext;\n+use crate::fold::DocFolder;\n+use crate::html::markdown::opts;\n+use core::ops::Range;\n+use pulldown_cmark::{Event, LinkType, Parser, Tag};\n+use regex::Regex;\n+use rustc_errors::Applicability;\n+use rustc_feature::UnstableFeatures;\n+use rustc_session::lint;\n+\n+pub const CHECK_NON_AUTOLINKS: Pass = Pass {\n+    name: \"check-non-autolinks\",\n+    run: check_non_autolinks,\n+    description: \"detects URLS that could be written using angle brackets\",\n+};\n+\n+const URL_REGEX: &str = concat!(\n+    r\"https?://\",                          // url scheme\n+    r\"([-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.)+\", // one or more subdomains\n+    r\"[a-zA-Z]{2,63}\",                     // root domain\n+    r\"\\b([-a-zA-Z0-9@:%_\\+.~#?&/=]*)\"      // optional query or url fragments\n+);\n+\n+struct NonAutolinksLinter<'a, 'tcx> {\n+    cx: &'a DocContext<'tcx>,\n+    regex: Regex,\n+}\n+\n+impl<'a, 'tcx> NonAutolinksLinter<'a, 'tcx> {\n+    fn new(cx: &'a DocContext<'tcx>) -> Self {\n+        Self { cx, regex: Regex::new(URL_REGEX).expect(\"failed to build regex\") }\n+    }\n+\n+    fn find_raw_urls(\n+        &self,\n+        text: &str,\n+        range: Range<usize>,\n+        f: &impl Fn(&DocContext<'_>, &str, &str, Range<usize>),\n+    ) {\n+        // For now, we only check \"full\" URLs (meaning, starting with \"http://\" or \"https://\").\n+        for match_ in self.regex.find_iter(&text) {\n+            let url = match_.as_str();\n+            let url_range = match_.range();\n+            f(\n+                self.cx,\n+                \"this URL is not a hyperlink\",\n+                url,\n+                Range { start: range.start + url_range.start, end: range.start + url_range.end },\n+            );\n+        }\n+    }\n+}\n+\n+pub fn check_non_autolinks(krate: Crate, cx: &DocContext<'_>) -> Crate {\n+    if !UnstableFeatures::from_environment().is_nightly_build() {\n+        krate\n+    } else {\n+        let mut coll = NonAutolinksLinter::new(cx);\n+\n+        coll.fold_crate(krate)\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for NonAutolinksLinter<'a, 'tcx> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+            Some(hir_id) => hir_id,\n+            None => {\n+                // If non-local, no need to check anything.\n+                return self.fold_item_recur(item);\n+            }\n+        };\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+        if !dox.is_empty() {\n+            let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n+                let sp = super::source_span_for_markdown_range(cx, &dox, &range, &item.attrs)\n+                    .or_else(|| span_of_attrs(&item.attrs))\n+                    .unwrap_or(item.source.span());\n+                cx.tcx.struct_span_lint_hir(lint::builtin::NON_AUTOLINKS, hir_id, sp, |lint| {\n+                    lint.build(msg)\n+                        .span_suggestion(\n+                            sp,\n+                            \"use an automatic link instead\",\n+                            format!(\"<{}>\", url),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit()\n+                });\n+            };\n+\n+            let mut p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+\n+            while let Some((event, range)) = p.next() {\n+                match event {\n+                    Event::Start(Tag::Link(kind, _, _)) => {\n+                        let ignore = matches!(kind, LinkType::Autolink | LinkType::Email);\n+                        let mut title = String::new();\n+\n+                        while let Some((event, range)) = p.next() {\n+                            match event {\n+                                Event::End(Tag::Link(_, url, _)) => {\n+                                    // NOTE: links cannot be nested, so we don't need to\n+                                    // check `kind`\n+                                    if url.as_ref() == title && !ignore && self.regex.is_match(&url)\n+                                    {\n+                                        report_diag(\n+                                            self.cx,\n+                                            \"unneeded long form for URL\",\n+                                            &url,\n+                                            range,\n+                                        );\n+                                    }\n+                                    break;\n+                                }\n+                                Event::Text(s) if !ignore => title.push_str(&s),\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                    Event::Text(s) => self.find_raw_urls(&s, range, &report_diag),\n+                    Event::Start(Tag::CodeBlock(_)) => {\n+                        // We don't want to check the text inside the code blocks.\n+                        while let Some((event, _)) = p.next() {\n+                            match event {\n+                                Event::End(Tag::CodeBlock(_)) => break,\n+                                _ => {}\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "8531583d38a659bc360d966ca321c1903ece53b1", "filename": "src/test/rustdoc-ui/url-improvements.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Furl-improvements.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -0,0 +1,66 @@\n+#![deny(non_autolinks)]\n+\n+/// [http://aa.com](http://aa.com)\n+//~^ ERROR unneeded long form for URL\n+/// [http://bb.com]\n+//~^ ERROR unneeded long form for URL\n+///\n+/// [http://bb.com]: http://bb.com\n+///\n+/// [http://c.com][http://c.com]\n+pub fn a() {}\n+\n+/// https://somewhere.com\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com/a\n+//~^ ERROR this URL is not a hyperlink\n+/// https://www.somewhere.com\n+//~^ ERROR this URL is not a hyperlink\n+/// https://www.somewhere.com/a\n+//~^ ERROR this URL is not a hyperlink\n+/// https://subdomain.example.com\n+//~^ ERROR not a hyperlink\n+/// https://somewhere.com?\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com/a?\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com?hello=12\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com/a?hello=12\n+//~^ ERROR this URL is not a hyperlink\n+/// https://example.com?hello=12#xyz\n+//~^ ERROR this URL is not a hyperlink\n+/// https://example.com/a?hello=12#xyz\n+//~^ ERROR this URL is not a hyperlink\n+/// https://example.com#xyz\n+//~^ ERROR this URL is not a hyperlink\n+/// https://example.com/a#xyz\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com?hello=12&bye=11\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com/a?hello=12&bye=11\n+//~^ ERROR this URL is not a hyperlink\n+/// https://somewhere.com?hello=12&bye=11#xyz\n+//~^ ERROR this URL is not a hyperlink\n+/// hey! https://somewhere.com/a?hello=12&bye=11#xyz\n+//~^ ERROR this URL is not a hyperlink\n+pub fn c() {}\n+\n+/// <https://somewhere.com>\n+/// [a](http://a.com)\n+/// [b]\n+///\n+/// [b]: http://b.com\n+///\n+/// ```\n+/// This link should not be linted: http://example.com\n+/// ```\n+///\n+/// [should_not.lint](should_not.lint)\n+pub fn everything_is_fine_here() {}\n+\n+#[allow(non_autolinks)]\n+pub mod foo {\n+    /// https://somewhere.com/a?hello=12&bye=11#xyz\n+    pub fn bar() {}\n+}"}, {"sha": "70ad4b06a515d087cfaa04873f46ceb17c231ba3", "filename": "src/test/rustdoc-ui/url-improvements.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Furl-improvements.stderr?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -0,0 +1,122 @@\n+error: unneeded long form for URL\n+  --> $DIR/url-improvements.rs:3:5\n+   |\n+LL | /// [http://aa.com](http://aa.com)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://aa.com>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/url-improvements.rs:1:9\n+   |\n+LL | #![deny(non_autolinks)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unneeded long form for URL\n+  --> $DIR/url-improvements.rs:5:5\n+   |\n+LL | /// [http://bb.com]\n+   |     ^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://bb.com>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:13:5\n+   |\n+LL | /// https://somewhere.com\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:15:5\n+   |\n+LL | /// https://somewhere.com/a\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:17:5\n+   |\n+LL | /// https://www.somewhere.com\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://www.somewhere.com>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:19:5\n+   |\n+LL | /// https://www.somewhere.com/a\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://www.somewhere.com/a>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:21:5\n+   |\n+LL | /// https://subdomain.example.com\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://subdomain.example.com>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:23:5\n+   |\n+LL | /// https://somewhere.com?\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:25:5\n+   |\n+LL | /// https://somewhere.com/a?\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:27:5\n+   |\n+LL | /// https://somewhere.com?hello=12\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:29:5\n+   |\n+LL | /// https://somewhere.com/a?hello=12\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:31:5\n+   |\n+LL | /// https://example.com?hello=12#xyz\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com?hello=12#xyz>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:33:5\n+   |\n+LL | /// https://example.com/a?hello=12#xyz\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com/a?hello=12#xyz>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:35:5\n+   |\n+LL | /// https://example.com#xyz\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com#xyz>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:37:5\n+   |\n+LL | /// https://example.com/a#xyz\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://example.com/a#xyz>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:39:5\n+   |\n+LL | /// https://somewhere.com?hello=12&bye=11\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12&bye=11>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:41:5\n+   |\n+LL | /// https://somewhere.com/a?hello=12&bye=11\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12&bye=11>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:43:5\n+   |\n+LL | /// https://somewhere.com?hello=12&bye=11#xyz\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12&bye=11#xyz>`\n+\n+error: this URL is not a hyperlink\n+  --> $DIR/url-improvements.rs:45:10\n+   |\n+LL | /// hey! https://somewhere.com/a?hello=12&bye=11#xyz\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com/a?hello=12&bye=11#xyz>`\n+\n+error: aborting due to 19 previous errors\n+"}]}