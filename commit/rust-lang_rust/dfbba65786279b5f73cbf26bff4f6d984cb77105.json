{"sha": "dfbba65786279b5f73cbf26bff4f6d984cb77105", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmJhNjU3ODYyNzliNWY3M2NiZjI2YmZmNGY2ZDk4NGNiNzcxMDU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T20:57:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T20:57:35Z"}, "message": "Rollup merge of #73627 - ssomers:btree_iter_min_max, r=Mark-Simulacrum\n\nShortcuts for min/max on double-ended BTreeMap/BTreeSet iterators\n\nCloses #59947: a performance tweak that might benefit some. Optimizes `min` and `max ` on all btree double-ended iterators that do not drop, i.e. the iterators created by:\n\n- `BTreeMap::iter`\n- `BTreeMap::iter_mut`\n- `BTreeMap::keys` and `BTreeSet::iter`\n- `BTreeMap::range` and `BTreeSet::range`\n- `BTreeMap::range_mut`\n\nAlso in these (currently) single-ended iterators, but obviously for `min` only:\n- `BTreeSet::difference`\n- `BTreeSet::intersection`\n- `BTreeSet::symmetric_difference`\n- `BTreeSet::union`\n\nDid not do this in iterators created by `into_iter` to preserve drop order, as outlined in #62316.\n\nDid not do this in iterators created by `drain_filter`, possibly to preserve drop order, possibly to preserve predicate invocation, mostly to not have to think about it too hard (I guess maybe it wouldn't be a change for `min`, which is the only shortcut possible in this single-ended iterator).", "tree": {"sha": "a6d9d80ce2d47b0e91d5d6b590c95fc87e7d3667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6d9d80ce2d47b0e91d5d6b590c95fc87e7d3667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbba65786279b5f73cbf26bff4f6d984cb77105", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9mE/CRBK7hj4Ov3rIwAAdHIIAK4gApXtZ0cl7NtFdjNQaHbl\nvpd02xzsph7NlRJKNLvWMK0GIyTjotIUA9NMqsp1908psKlZ/tJNaNLS5IwSzZnZ\ntSjpbMAFCEmSfcSj13Vq6SNOfBEZAWycmt+BZQD+d470FDS11fjNirnasG5TuEK5\nALG9bH5MU9qhik2ou1W++DjLqko2A5/T15FOhn/f6CT7t7VJPZZVDws9ZcLF/VKr\njbj3rOrZwTzanzJCcoeuOMP+nYZEmxxqKIvbz8bAOtMHP7np36NjSnmHGbZ4T0Gl\nx6E/6LYwwKpQH2xYfm3vbemtA9e1jzk1/DuzcY05x5eNMd83VuigFZUWgKbHU+0=\n=XXcj\n-----END PGP SIGNATURE-----\n", "payload": "tree a6d9d80ce2d47b0e91d5d6b590c95fc87e7d3667\nparent 92af945256913dbec2c679a06e154469d60a0d7e\nparent 42062a58026cdb245e3eb365af726f2d9f4946af\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593205055 -0700\ncommitter GitHub <noreply@github.com> 1593205055 -0700\n\nRollup merge of #73627 - ssomers:btree_iter_min_max, r=Mark-Simulacrum\n\nShortcuts for min/max on double-ended BTreeMap/BTreeSet iterators\n\nCloses #59947: a performance tweak that might benefit some. Optimizes `min` and `max ` on all btree double-ended iterators that do not drop, i.e. the iterators created by:\n\n- `BTreeMap::iter`\n- `BTreeMap::iter_mut`\n- `BTreeMap::keys` and `BTreeSet::iter`\n- `BTreeMap::range` and `BTreeSet::range`\n- `BTreeMap::range_mut`\n\nAlso in these (currently) single-ended iterators, but obviously for `min` only:\n- `BTreeSet::difference`\n- `BTreeSet::intersection`\n- `BTreeSet::symmetric_difference`\n- `BTreeSet::union`\n\nDid not do this in iterators created by `into_iter` to preserve drop order, as outlined in #62316.\n\nDid not do this in iterators created by `drain_filter`, possibly to preserve drop order, possibly to preserve predicate invocation, mostly to not have to think about it too hard (I guess maybe it wouldn't be a change for `min`, which is the only shortcut possible in this single-ended iterator).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbba65786279b5f73cbf26bff4f6d984cb77105", "html_url": "https://github.com/rust-lang/rust/commit/dfbba65786279b5f73cbf26bff4f6d984cb77105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbba65786279b5f73cbf26bff4f6d984cb77105/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92af945256913dbec2c679a06e154469d60a0d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92af945256913dbec2c679a06e154469d60a0d7e", "html_url": "https://github.com/rust-lang/rust/commit/92af945256913dbec2c679a06e154469d60a0d7e"}, {"sha": "42062a58026cdb245e3eb365af726f2d9f4946af", "url": "https://api.github.com/repos/rust-lang/rust/commits/42062a58026cdb245e3eb365af726f2d9f4946af", "html_url": "https://github.com/rust-lang/rust/commit/42062a58026cdb245e3eb365af726f2d9f4946af"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "bb9091a66594bda1665309811e38deab38fe4bd4", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=dfbba65786279b5f73cbf26bff4f6d984cb77105", "patch": "@@ -1396,6 +1396,14 @@ impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1458,6 +1466,14 @@ impl<'a, K: 'a, V: 'a> Iterator for IterMut<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1595,6 +1611,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     fn last(mut self) -> Option<&'a K> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a K> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a K> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1768,6 +1792,14 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a V)> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n@@ -1853,6 +1885,14 @@ impl<'a, K, V> Iterator for RangeMut<'a, K, V> {\n     fn last(mut self) -> Option<(&'a K, &'a mut V)> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<(&'a K, &'a mut V)> {\n+        self.next_back()\n+    }\n }\n \n impl<'a, K, V> RangeMut<'a, K, V> {"}, {"sha": "d8959966fe5ad38a8f846780af27892a77fba621", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=dfbba65786279b5f73cbf26bff4f6d984cb77105", "patch": "@@ -1291,12 +1291,22 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     fn next(&mut self) -> Option<&'a T> {\n         self.iter.next()\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n+\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n@@ -1321,6 +1331,7 @@ impl<T> Iterator for IntoIter<T> {\n     fn next(&mut self) -> Option<T> {\n         self.iter.next().map(|(k, _)| k)\n     }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n     }\n@@ -1359,6 +1370,14 @@ impl<'a, T> Iterator for Range<'a, T> {\n     fn last(mut self) -> Option<&'a T> {\n         self.next_back()\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n+\n+    fn max(mut self) -> Option<&'a T> {\n+        self.next_back()\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n@@ -1429,6 +1448,10 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n         };\n         (self_len.saturating_sub(other_len), Some(self_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1460,6 +1483,10 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n         // the number of elements to less than half the range of usize.\n         (0, Some(a_len + b_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1516,6 +1543,10 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n             IntersectionInner::Answer(Some(_)) => (1, Some(1)),\n         }\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1541,6 +1572,10 @@ impl<'a, T: Ord> Iterator for Union<'a, T> {\n         // No checked_add - see SymmetricDifference::size_hint.\n         (max(a_len, b_len), Some(a_len + b_len))\n     }\n+\n+    fn min(mut self) -> Option<&'a T> {\n+        self.next()\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]"}, {"sha": "682d829d219f31ee918ed1fb42ef9c65a00b5189", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=dfbba65786279b5f73cbf26bff4f6d984cb77105", "patch": "@@ -309,6 +309,41 @@ fn test_iter_mixed() {\n     test(size, map.into_iter());\n }\n \n+#[test]\n+fn test_iter_min_max() {\n+    let mut a = BTreeMap::new();\n+    assert_eq!(a.iter().min(), None);\n+    assert_eq!(a.iter().max(), None);\n+    assert_eq!(a.iter_mut().min(), None);\n+    assert_eq!(a.iter_mut().max(), None);\n+    assert_eq!(a.range(..).min(), None);\n+    assert_eq!(a.range(..).max(), None);\n+    assert_eq!(a.range_mut(..).min(), None);\n+    assert_eq!(a.range_mut(..).max(), None);\n+    assert_eq!(a.keys().min(), None);\n+    assert_eq!(a.keys().max(), None);\n+    assert_eq!(a.values().min(), None);\n+    assert_eq!(a.values().max(), None);\n+    assert_eq!(a.values_mut().min(), None);\n+    assert_eq!(a.values_mut().max(), None);\n+    a.insert(1, 42);\n+    a.insert(2, 24);\n+    assert_eq!(a.iter().min(), Some((&1, &42)));\n+    assert_eq!(a.iter().max(), Some((&2, &24)));\n+    assert_eq!(a.iter_mut().min(), Some((&1, &mut 42)));\n+    assert_eq!(a.iter_mut().max(), Some((&2, &mut 24)));\n+    assert_eq!(a.range(..).min(), Some((&1, &42)));\n+    assert_eq!(a.range(..).max(), Some((&2, &24)));\n+    assert_eq!(a.range_mut(..).min(), Some((&1, &mut 42)));\n+    assert_eq!(a.range_mut(..).max(), Some((&2, &mut 24)));\n+    assert_eq!(a.keys().min(), Some(&1));\n+    assert_eq!(a.keys().max(), Some(&2));\n+    assert_eq!(a.values().min(), Some(&24));\n+    assert_eq!(a.values().max(), Some(&42));\n+    assert_eq!(a.values_mut().min(), Some(&mut 24));\n+    assert_eq!(a.values_mut().max(), Some(&mut 42));\n+}\n+\n fn range_keys(map: &BTreeMap<i32, i32>, range: impl RangeBounds<i32>) -> Vec<i32> {\n     map.range(range)\n         .map(|(&k, &v)| {"}, {"sha": "b6c34b7c6c346dae023617482ffba7cbff6917d7", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbba65786279b5f73cbf26bff4f6d984cb77105/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=dfbba65786279b5f73cbf26bff4f6d984cb77105", "patch": "@@ -33,6 +33,37 @@ fn test_hash() {\n     assert_eq!(hash(&x), hash(&y));\n }\n \n+#[test]\n+fn test_iter_min_max() {\n+    let mut a = BTreeSet::new();\n+    assert_eq!(a.iter().min(), None);\n+    assert_eq!(a.iter().max(), None);\n+    assert_eq!(a.range(..).min(), None);\n+    assert_eq!(a.range(..).max(), None);\n+    assert_eq!(a.difference(&BTreeSet::new()).min(), None);\n+    assert_eq!(a.difference(&BTreeSet::new()).max(), None);\n+    assert_eq!(a.intersection(&a).min(), None);\n+    assert_eq!(a.intersection(&a).max(), None);\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).min(), None);\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).max(), None);\n+    assert_eq!(a.union(&a).min(), None);\n+    assert_eq!(a.union(&a).max(), None);\n+    a.insert(1);\n+    a.insert(2);\n+    assert_eq!(a.iter().min(), Some(&1));\n+    assert_eq!(a.iter().max(), Some(&2));\n+    assert_eq!(a.range(..).min(), Some(&1));\n+    assert_eq!(a.range(..).max(), Some(&2));\n+    assert_eq!(a.difference(&BTreeSet::new()).min(), Some(&1));\n+    assert_eq!(a.difference(&BTreeSet::new()).max(), Some(&2));\n+    assert_eq!(a.intersection(&a).min(), Some(&1));\n+    assert_eq!(a.intersection(&a).max(), Some(&2));\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).min(), Some(&1));\n+    assert_eq!(a.symmetric_difference(&BTreeSet::new()).max(), Some(&2));\n+    assert_eq!(a.union(&a).min(), Some(&1));\n+    assert_eq!(a.union(&a).max(), Some(&2));\n+}\n+\n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)\n where\n     F: FnOnce(&BTreeSet<i32>, &BTreeSet<i32>, &mut dyn FnMut(&i32) -> bool) -> bool,"}]}