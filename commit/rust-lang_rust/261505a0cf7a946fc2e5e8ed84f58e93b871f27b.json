{"sha": "261505a0cf7a946fc2e5e8ed84f58e93b871f27b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTUwNWEwY2Y3YTk0NmZjMmU1ZThlZDg0ZjU4ZTkzYjg3MWYyN2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-21T19:10:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-21T19:10:41Z"}, "message": "Rollup merge of #72350 - danielhenrymantilla:doc_warn_against_adjacent_slice_concat, r=RalfJung\n\nImprove documentation of `slice::from_raw_parts`\n\nThis is to provide a more explicit statement against a code pattern that\nmany people end up coming with, since the reason of it being unsound\ncomes from the badly known single-allocation validity rule.\n\nProviding that very pattern as a counter-example could help mitigate that.\n\nSee also: https://internals.rust-lang.org/t/pre-rfc-add-join-seq-method-to-slices-and-strs/11936/13\n\nr? @RalfJung", "tree": {"sha": "6b418996fa36697c71ddcd60233ec1de710c3505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b418996fa36697c71ddcd60233ec1de710c3505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261505a0cf7a946fc2e5e8ed84f58e93b871f27b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJextIyCRBK7hj4Ov3rIwAAdHIIACq/W24f2kQxMn+k4jLmxkgv\nBePB7aWjstm3WlTZSkIdL6fylXq3yEtJYAIGJLPgwZkVIQKlV/Tov3ylFIC5LKa3\nhZ9fYH6rnDTYPmQ35ttjZm9WV6jZNRYJdm+Vtoa/uogCBJZqIdX2nxaeCXBJ4ADv\nFsHyX2qgjILs5lXtX2A7/jpOf39cYB1MdFQnFEu15xaNx0729lQ8mQ/Cm6c9spkE\nCBIyo/sAKDs+iwJpQHRP496ICkOBLle7jFbZHKvpVWVzY0u2bRfQn6uIhcaKgrxA\n1uXr/Uu+kw98AHvd58Euho7gbf8FmZWwqvY6MoB95yoN8RtZnsfMXOR2UbzQR3g=\n=lunR\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b418996fa36697c71ddcd60233ec1de710c3505\nparent 3d5f130aae7554ceaf0601979d0aeb9fc593cbb0\nparent 67e075589b7e19a87130a700b7e59015a1b80f11\nauthor Ralf Jung <post@ralfj.de> 1590088241 +0200\ncommitter GitHub <noreply@github.com> 1590088241 +0200\n\nRollup merge of #72350 - danielhenrymantilla:doc_warn_against_adjacent_slice_concat, r=RalfJung\n\nImprove documentation of `slice::from_raw_parts`\n\nThis is to provide a more explicit statement against a code pattern that\nmany people end up coming with, since the reason of it being unsound\ncomes from the badly known single-allocation validity rule.\n\nProviding that very pattern as a counter-example could help mitigate that.\n\nSee also: https://internals.rust-lang.org/t/pre-rfc-add-join-seq-method-to-slices-and-strs/11936/13\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261505a0cf7a946fc2e5e8ed84f58e93b871f27b", "html_url": "https://github.com/rust-lang/rust/commit/261505a0cf7a946fc2e5e8ed84f58e93b871f27b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261505a0cf7a946fc2e5e8ed84f58e93b871f27b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5f130aae7554ceaf0601979d0aeb9fc593cbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5f130aae7554ceaf0601979d0aeb9fc593cbb0", "html_url": "https://github.com/rust-lang/rust/commit/3d5f130aae7554ceaf0601979d0aeb9fc593cbb0"}, {"sha": "67e075589b7e19a87130a700b7e59015a1b80f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e075589b7e19a87130a700b7e59015a1b80f11", "html_url": "https://github.com/rust-lang/rust/commit/67e075589b7e19a87130a700b7e59015a1b80f11"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "b5ce165cb43db352c4f945a9df5cc7ff1e9fb97d", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/261505a0cf7a946fc2e5e8ed84f58e93b871f27b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261505a0cf7a946fc2e5e8ed84f58e93b871f27b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=261505a0cf7a946fc2e5e8ed84f58e93b871f27b", "patch": "@@ -5740,7 +5740,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///   and it must be properly aligned. This means in particular:\n ///\n ///     * The entire memory range of this slice must be contained within a single allocated object!\n-///       Slices can never span across multiple allocated objects.\n+///       Slices can never span across multiple allocated objects. See [below](#incorrect-usage)\n+///       for an example incorrectly not taking this into account.\n ///     * `data` must be non-null and aligned even for zero-length slices. One\n ///       reason for this is that enum layout optimizations may rely on references\n ///       (including slices of any length) being aligned and non-null to distinguish\n@@ -5773,6 +5774,34 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n /// assert_eq!(slice[0], 42);\n /// ```\n ///\n+/// ### Incorrect usage\n+///\n+/// The following `join_slices` function is **unsound** \u26a0\ufe0f\n+///\n+/// ```rust,no_run\n+/// use std::slice;\n+///\n+/// fn join_slices<'a, T>(fst: &'a [T], snd: &'a [T]) -> &'a [T] {\n+///     let fst_end = fst.as_ptr().wrapping_add(fst.len());\n+///     let snd_start = snd.as_ptr();\n+///     assert_eq!(fst_end, snd_start, \"Slices must be contiguous!\");\n+///     unsafe {\n+///         // The assertion above ensures `fst` and `snd` are contiguous, but they might\n+///         // still be contained within _different allocated objects_, in which case\n+///         // creating this slice is undefined behavior.\n+///         slice::from_raw_parts(fst.as_ptr(), fst.len() + snd.len())\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     // `a` and `b` are different allocated objects...\n+///     let a = 42;\n+///     let b = 27;\n+///     // ... which may nevertheless be laid out contiguously in memory: | a | b |\n+///     let _ = join_slices(slice::from_ref(&a), slice::from_ref(&b)); // UB\n+/// }\n+/// ```\n+///\n /// [valid]: ../../std/ptr/index.html#safety\n /// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset"}]}