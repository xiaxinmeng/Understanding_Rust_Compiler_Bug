{"sha": "a2bf404d34529e2b916bdc514bd71309e86908bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYmY0MDRkMzQ1MjllMmI5MTZiZGM1MTRiZDcxMzA5ZTg2OTA4YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T15:59:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T15:59:16Z"}, "message": "Auto merge of #6101 - pitiK3U:from_iter_instead_of_collect, r=flip1995\n\nAdd lint: from_iter_instead_of_collect\n\nFixes #5679\n\nThis implements lint for `::from_iter()` from #5679 not the general issue (`std::ops::Add::add`, etc.).\nThis lint checks if expression is function call with `from_iter` name and if it's implementation of the `std::iter::FromIterator` trait.\n\nchangelog: Introduce  from_iter_instead_of_collect lint", "tree": {"sha": "96237ea30df875addbd6ac431e40d1ed587e63c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96237ea30df875addbd6ac431e40d1ed587e63c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2bf404d34529e2b916bdc514bd71309e86908bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2bf404d34529e2b916bdc514bd71309e86908bd", "html_url": "https://github.com/rust-lang/rust/commit/a2bf404d34529e2b916bdc514bd71309e86908bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2bf404d34529e2b916bdc514bd71309e86908bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee9c2e1a07e78e1705b89616e14c0292ecde025", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee9c2e1a07e78e1705b89616e14c0292ecde025", "html_url": "https://github.com/rust-lang/rust/commit/3ee9c2e1a07e78e1705b89616e14c0292ecde025"}, {"sha": "ddf23d649ae02dde7aed22ec6699a736492b7184", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf23d649ae02dde7aed22ec6699a736492b7184", "html_url": "https://github.com/rust-lang/rust/commit/ddf23d649ae02dde7aed22ec6699a736492b7184"}], "stats": {"total": 118, "additions": 111, "deletions": 7}, "files": [{"sha": "11a3e6a613f689a81bfbc4969cfe8f81ba6ef170", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -1732,6 +1732,7 @@ Released 2018-09-13\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n+[`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"}, {"sha": "643e56671db5a7fa71090c4d65ecfe920146f456", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -693,6 +693,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::FILTER_NEXT,\n         &methods::FIND_MAP,\n         &methods::FLAT_MAP_IDENTITY,\n+        &methods::FROM_ITER_INSTEAD_OF_COLLECT,\n         &methods::GET_UNWRAP,\n         &methods::INEFFICIENT_TO_STRING,\n         &methods::INTO_ITER_ON_REF,\n@@ -1422,6 +1423,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::EXPECT_FUN_CALL),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n+        LintId::of(&methods::FROM_ITER_INSTEAD_OF_COLLECT),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n@@ -1620,6 +1622,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n+        LintId::of(&methods::FROM_ITER_INSTEAD_OF_COLLECT),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NEXT_SLICE),"}, {"sha": "4d737b3f49b0351e2222fe950807d948e60c2d43", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -16,7 +16,6 @@ use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n-use std::iter::FromIterator;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -214,14 +213,15 @@ fn could_use_elision<'tcx>(\n     }\n \n     if allowed_lts\n-        .intersection(&FxHashSet::from_iter(\n-            input_visitor\n+        .intersection(\n+            &input_visitor\n                 .nested_elision_site_lts\n                 .iter()\n                 .chain(output_visitor.nested_elision_site_lts.iter())\n                 .cloned()\n-                .filter(|v| matches!(v, RefLt::Named(_))),\n-        ))\n+                .filter(|v| matches!(v, RefLt::Named(_)))\n+                .collect(),\n+        )\n         .next()\n         .is_some()\n     {"}, {"sha": "9ed2edd2a429713af719a2aaf92adfbf4ac4ea36", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -1371,6 +1371,39 @@ declare_clippy_lint! {\n     \"using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `from_iter()` function calls on types that implement the `FromIterator`\n+    /// trait.\n+    ///\n+    /// **Why is this bad?** It is recommended style to use collect. See\n+    /// [FromIterator documentation](https://doc.rust-lang.org/std/iter/trait.FromIterator.html)\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// use std::iter::FromIterator;\n+    ///\n+    /// let five_fives = std::iter::repeat(5).take(5);\n+    ///\n+    /// let v = Vec::from_iter(five_fives);\n+    ///\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let five_fives = std::iter::repeat(5).take(5);\n+    ///\n+    /// let v: Vec<i32> = five_fives.collect();\n+    ///\n+    /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n+    /// ```\n+    pub FROM_ITER_INSTEAD_OF_COLLECT,\n+    style,\n+    \"use `.collect()` instead of `::from_iter()`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     UNWRAP_USED,\n     EXPECT_USED,\n@@ -1421,6 +1454,7 @@ declare_lint_pass!(Methods => [\n     OPTION_AS_REF_DEREF,\n     UNNECESSARY_LAZY_EVALUATIONS,\n     MAP_COLLECT_RESULT_UNIT,\n+    FROM_ITER_INSTEAD_OF_COLLECT,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Methods {\n@@ -1507,6 +1541,13 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         match expr.kind {\n+            hir::ExprKind::Call(ref func, ref args) => {\n+                if let hir::ExprKind::Path(path) = &func.kind {\n+                    if match_qpath(path, &[\"from_iter\"]) {\n+                        lint_from_iter(cx, expr, args);\n+                    }\n+                }\n+            },\n             hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args, _) => {\n                 lint_or_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n                 lint_expect_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);\n@@ -3856,6 +3897,28 @@ fn lint_filetype_is_file(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir\n     span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, None, &help_msg);\n }\n \n+fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    let ty = cx.typeck_results().expr_ty(expr);\n+    let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n+\n+    let from_iter_id = get_trait_def_id(cx, &paths::FROM_ITERATOR).unwrap();\n+    let iter_id = get_trait_def_id(cx, &paths::ITERATOR).unwrap();\n+\n+    if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]) {\n+        // `expr` implements `FromIterator` trait\n+        let iter_expr = snippet(cx, args[0].span, \"..\");\n+        span_lint_and_sugg(\n+            cx,\n+            FROM_ITER_INSTEAD_OF_COLLECT,\n+            expr.span,\n+            \"usage of `FromIterator::from_iter`\",\n+            \"use `.collect()` instead of `::from_iter()`\",\n+            format!(\"{}.collect()\", iter_expr),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+}\n+\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "1ad8c6029860b7a0d33037355a261f0915466012", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -44,6 +44,7 @@ pub const FN: [&str; 3] = [\"core\", \"ops\", \"Fn\"];\n pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n+pub const FROM_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];"}, {"sha": "44d2dd746d5908af90119d4b6e3ad88f304efe1b", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -753,6 +753,13 @@ vec![\n         deprecation: None,\n         module: \"drop_forget_ref\",\n     },\n+    Lint {\n+        name: \"from_iter_instead_of_collect\",\n+        group: \"style\",\n+        desc: \"use `.collect()` instead of `::from_iter()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"future_not_send\",\n         group: \"nursery\","}, {"sha": "045eb3133d3c4b87539a17fe0aa49559e7318126", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -0,0 +1,13 @@\n+#![warn(clippy::from_iter_instead_of_collect)]\n+\n+use std::collections::HashMap;\n+use std::iter::FromIterator;\n+\n+fn main() {\n+    let iter_expr = std::iter::repeat(5).take(5);\n+    Vec::from_iter(iter_expr);\n+\n+    HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+\n+    Vec::from_iter(vec![42u32]);\n+}"}, {"sha": "46bdc2f4e199b34cf645f1cb4f108919a70a6f9c", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -0,0 +1,16 @@\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:8:5\n+   |\n+LL |     Vec::from_iter(iter_expr);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect()`\n+   |\n+   = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:10:5\n+   |\n+LL |     HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect()`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "924c02a4054d4022ef54225853514053b1b59980", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n #![deny(clippy::get_unwrap)]\n \n use std::collections::BTreeMap;"}, {"sha": "c0c37bb7206631e48334b79ac731c178f25dde72", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2bf404d34529e2b916bdc514bd71309e86908bd/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=a2bf404d34529e2b916bdc514bd71309e86908bd", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused_mut)]\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n #![deny(clippy::get_unwrap)]\n \n use std::collections::BTreeMap;"}]}