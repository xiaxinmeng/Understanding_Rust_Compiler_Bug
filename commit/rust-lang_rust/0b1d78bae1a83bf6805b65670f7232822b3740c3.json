{"sha": "0b1d78bae1a83bf6805b65670f7232822b3740c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMWQ3OGJhZTFhODNiZjY4MDViNjU2NzBmNzIzMjgyMmIzNzQwYzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-17T00:08:36Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-17T00:08:36Z"}, "message": "Try hard to format impl signatures\n\nFixes #1249", "tree": {"sha": "d62b919dc07a66bd6bf7f29f7a446763f884b74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62b919dc07a66bd6bf7f29f7a446763f884b74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b1d78bae1a83bf6805b65670f7232822b3740c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1d78bae1a83bf6805b65670f7232822b3740c3", "html_url": "https://github.com/rust-lang/rust/commit/0b1d78bae1a83bf6805b65670f7232822b3740c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b1d78bae1a83bf6805b65670f7232822b3740c3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e89136957b9eedf54255c8059f8a51fbd82a68", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e89136957b9eedf54255c8059f8a51fbd82a68", "html_url": "https://github.com/rust-lang/rust/commit/29e89136957b9eedf54255c8059f8a51fbd82a68"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "09802242332e60c5c7c4013cf40ddd0fa80a107e", "filename": "src/items.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b1d78bae1a83bf6805b65670f7232822b3740c3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1d78bae1a83bf6805b65670f7232822b3740c3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0b1d78bae1a83bf6805b65670f7232822b3740c3", "patch": "@@ -450,17 +450,14 @@ impl<'a> FmtVisitor<'a> {\n pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -> Option<String> {\n     if let ast::ItemKind::Impl(_, _, ref generics, ref trait_ref, _, ref items) = item.node {\n         let mut result = String::new();\n-\n         // First try to format the ref and type without a split at the 'for'.\n         let mut ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, false));\n \n         // If there is a line break present in the first result format it again\n         // with a split at the 'for'. Skip this if there is no trait ref and\n         // therefore no 'for'.\n-        if let Some(_) = *trait_ref {\n-            if ref_and_type.contains('\\n') {\n-                ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, true));\n-            }\n+        if ref_and_type.contains('\\n') && trait_ref.is_some() {\n+            ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, true));\n         }\n         result.push_str(&ref_and_type);\n \n@@ -589,11 +586,13 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                                                      mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n \n-        result.push(' ');\n         if polarity == ast::ImplPolarity::Negative {\n-            result.push('!');\n+            result.push_str(\" !\");\n         }\n         if let Some(ref trait_ref) = *trait_ref {\n+            if polarity != ast::ImplPolarity::Negative {\n+                result.push_str(\" \");\n+            }\n             let budget = try_opt!(context.config.max_width.checked_sub(result.len()));\n             let indent = offset + result.len();\n             result.push_str(&*try_opt!(trait_ref.rewrite(context, budget, indent)));\n@@ -606,9 +605,9 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                 let for_indent = Indent::new(0, width);\n                 result.push_str(&for_indent.to_string(context.config));\n \n-                result.push_str(\"for \");\n+                result.push_str(\"for\");\n             } else {\n-                result.push_str(\" for \");\n+                result.push_str(\" for\");\n             }\n         }\n \n@@ -623,10 +622,21 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n             }\n         }\n \n-        let budget = try_opt!(context.config.max_width.checked_sub(used_space));\n-        let indent = offset + result.len();\n-        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n+        // 1 = space before the type.\n+        let budget = try_opt!(context.config.max_width.checked_sub(used_space + 1));\n+        let indent = offset + result.len() + 1;\n+        let self_ty_str = self_ty.rewrite(context, budget, indent);\n+        if let Some(self_ty_str) = self_ty_str {\n+            result.push_str(\" \");\n+            result.push_str(&self_ty_str);\n+            return Some(result);\n+        }\n \n+        // Can't fit the self type on what's left of the line, so start a new one.\n+        let indent = offset.block_indent(context.config);\n+        result.push_str(&format!(\"\\n{}\", indent.to_string(context.config)));\n+        let budget = try_opt!(context.config.max_width.checked_sub(indent.width()));\n+        result.push_str(&*try_opt!(self_ty.rewrite(context, budget, indent)));\n         Some(result)\n     } else {\n         unreachable!();"}, {"sha": "060376b113e907747e001f3627251e5819cf3e67", "filename": "tests/source/impls.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b1d78bae1a83bf6805b65670f7232822b3740c3/tests%2Fsource%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1d78bae1a83bf6805b65670f7232822b3740c3/tests%2Fsource%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimpls.rs?ref=0b1d78bae1a83bf6805b65670f7232822b3740c3", "patch": "@@ -112,3 +112,8 @@ mod x {\n               C: 'static,\n               D: 'static { }\n }\n+\n+impl<ConcreteThreadSafeLayoutNode: ThreadSafeLayoutNodeFoo> Issue1249<ConcreteThreadSafeLayoutNode> {\n+    // Creates a new flow constructor.\n+   fn foo() {}\n+}"}, {"sha": "dacaa1f5601ade61961f6f2d0c0bb6e09ae7001f", "filename": "tests/target/impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b1d78bae1a83bf6805b65670f7232822b3740c3/tests%2Ftarget%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b1d78bae1a83bf6805b65670f7232822b3740c3/tests%2Ftarget%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpls.rs?ref=0b1d78bae1a83bf6805b65670f7232822b3740c3", "patch": "@@ -143,3 +143,9 @@ mod x {\n     {\n     }\n }\n+\n+impl<ConcreteThreadSafeLayoutNode: ThreadSafeLayoutNodeFoo>\n+    Issue1249<ConcreteThreadSafeLayoutNode> {\n+    // Creates a new flow constructor.\n+    fn foo() {}\n+}"}]}