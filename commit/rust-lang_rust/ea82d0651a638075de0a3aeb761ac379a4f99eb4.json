{"sha": "ea82d0651a638075de0a3aeb761ac379a4f99eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhODJkMDY1MWE2MzgwNzVkZTBhM2FlYjc2MWFjMzc5YTRmOTllYjQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:15Z"}, "message": "Rollup merge of #88512 - m-ou-se:array-into-iter-deref-stuff, r=estebank\n\nUpgrade array_into_iter lint to include Deref-to-array types.\n\nFixes https://github.com/rust-lang/rust/issues/88099\n\nFixes the issue mentioned here: https://github.com/rust-lang/rust/pull/84147#issuecomment-819000436", "tree": {"sha": "cc718fdab115d3ad18d99954cb85e4edd348e867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc718fdab115d3ad18d99954cb85e4edd348e867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea82d0651a638075de0a3aeb761ac379a4f99eb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQV3CRBK7hj4Ov3rIwAAeyAIAJwg0SULq4BY1IOXt6cGsnK9\n5ci+xMA7NJFH4eRIApq4AcsEmk3ipo0VS8tKOvMmd7/7/KGv7guoRfG9nkSiBPny\nYjz4/ia8/I4Pd7w/tQN2GWPACy47NCkgAftt1sppnhP+3iMb5isHQ0lPsfbWfDA3\ndogmLNqcOSIvTjccnGZzPlGKwiaEGM6f1Vns7KP8gN+roZqADe5Y0zbv7rooisAQ\ndtWJ2W4WkqwNOaiM/f4W623CvwVcx9gGxlIN0JQ55FA5zH/vk2XNws7Erjc+/QGd\nUKjjOgt1QHMP6wU/4gvR4CX7OYror4Z8dBvP7rFa5CXHgFir3wOpVKZZDktGm/g=\n=zyla\n-----END PGP SIGNATURE-----\n", "payload": "tree cc718fdab115d3ad18d99954cb85e4edd348e867\nparent 8fd1bf332350b5899f040d749fa2bcc21ac4e23e\nparent 96d4666f23f71683965ded5844e78b3f4346406c\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602615 +0200\ncommitter GitHub <noreply@github.com> 1630602615 +0200\n\nRollup merge of #88512 - m-ou-se:array-into-iter-deref-stuff, r=estebank\n\nUpgrade array_into_iter lint to include Deref-to-array types.\n\nFixes https://github.com/rust-lang/rust/issues/88099\n\nFixes the issue mentioned here: https://github.com/rust-lang/rust/pull/84147#issuecomment-819000436\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea82d0651a638075de0a3aeb761ac379a4f99eb4", "html_url": "https://github.com/rust-lang/rust/commit/ea82d0651a638075de0a3aeb761ac379a4f99eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea82d0651a638075de0a3aeb761ac379a4f99eb4/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd1bf332350b5899f040d749fa2bcc21ac4e23e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd1bf332350b5899f040d749fa2bcc21ac4e23e", "html_url": "https://github.com/rust-lang/rust/commit/8fd1bf332350b5899f040d749fa2bcc21ac4e23e"}, {"sha": "96d4666f23f71683965ded5844e78b3f4346406c", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d4666f23f71683965ded5844e78b3f4346406c", "html_url": "https://github.com/rust-lang/rust/commit/96d4666f23f71683965ded5844e78b3f4346406c"}], "stats": {"total": 167, "additions": 61, "deletions": 106}, "files": [{"sha": "5ac42c50c7240d22edb1adbd1b775248ac89d3fc", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ea82d0651a638075de0a3aeb761ac379a4f99eb4/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea82d0651a638075de0a3aeb761ac379a4f99eb4/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=ea82d0651a638075de0a3aeb761ac379a4f99eb4", "patch": "@@ -74,39 +74,45 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                 _ => return,\n             };\n \n-            // As this is a method call expression, we have at least one\n-            // argument.\n+            // As this is a method call expression, we have at least one argument.\n             let receiver_arg = &args[0];\n+            let receiver_ty = cx.typeck_results().expr_ty(receiver_arg);\n+            let adjustments = cx.typeck_results().expr_adjustments(receiver_arg);\n \n-            // Peel all `Box<_>` layers. We have to special case `Box` here as\n-            // `Box` is the only thing that values can be moved out of via\n-            // method call. `Box::new([1]).into_iter()` should trigger this\n-            // lint.\n-            let mut recv_ty = cx.typeck_results().expr_ty(receiver_arg);\n-            let mut num_box_derefs = 0;\n-            while recv_ty.is_box() {\n-                num_box_derefs += 1;\n-                recv_ty = recv_ty.boxed_ty();\n-            }\n+            let target = match adjustments.last() {\n+                Some(Adjustment { kind: Adjust::Borrow(_), target }) => target,\n+                _ => return,\n+            };\n \n-            // Make sure we found an array after peeling the boxes.\n-            if !matches!(recv_ty.kind(), ty::Array(..)) {\n-                return;\n+            let types =\n+                std::iter::once(receiver_ty).chain(adjustments.iter().map(|adj| adj.target));\n+\n+            let mut found_array = false;\n+\n+            for ty in types {\n+                match ty.kind() {\n+                    // If we run into a &[T; N] or &[T] first, there's nothing to warn about.\n+                    // It'll resolve to the reference version.\n+                    ty::Ref(_, inner_ty, _) if inner_ty.is_array() => return,\n+                    ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), ty::Slice(..)) => return,\n+                    // Found an actual array type without matching a &[T; N] first.\n+                    // This is the problematic case.\n+                    ty::Array(..) => {\n+                        found_array = true;\n+                        break;\n+                    }\n+                    _ => {}\n+                }\n             }\n \n-            // Make sure that there is an autoref coercion at the expected\n-            // position. The first `num_box_derefs` adjustments are the derefs\n-            // of the box.\n-            match cx.typeck_results().expr_adjustments(receiver_arg).get(num_box_derefs) {\n-                Some(Adjustment { kind: Adjust::Borrow(_), .. }) => {}\n-                _ => return,\n+            if !found_array {\n+                return;\n             }\n \n             // Emit lint diagnostic.\n-            let target = match *cx.typeck_results().expr_ty_adjusted(receiver_arg).kind() {\n+            let target = match *target.kind() {\n                 ty::Ref(_, inner_ty, _) if inner_ty.is_array() => \"[T; N]\",\n                 ty::Ref(_, inner_ty, _) if matches!(inner_ty.kind(), ty::Slice(..)) => \"[T]\",\n-\n                 // We know the original first argument type is an array type,\n                 // we know that the first adjustment was an autoref coercion\n                 // and we know that `IntoIterator` is the trait involved. The\n@@ -135,7 +141,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                         String::new(),\n                         Applicability::MaybeIncorrect,\n                     );\n-                } else {\n+                } else if receiver_ty.is_array() {\n                     diag.multipart_suggestion(\n                         \"or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\",\n                         vec!["}, {"sha": "60995170a5164397b459ca6c0df73e865863fd50", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=ea82d0651a638075de0a3aeb761ac379a4f99eb4", "patch": "@@ -19,9 +19,12 @@ fn main() {\n     //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n-    // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this changes meaning\n     let _: Iter<'_, i32> = Array(array).into_iter();\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this changes meaning\n \n     // But you can always use the trait method explicitly as an array.\n     let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);"}, {"sha": "bc08fdcafa08d3dcc249e7c55e8b365cf848e373", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=ea82d0651a638075de0a3aeb761ac379a4f99eb4", "patch": "@@ -20,21 +20,31 @@ warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (du\n   --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-   |                                            ^^^^^^^^^\n+   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-2018.rs:22:43\n    |\n-LL |     let _: Iter<'_, i32> = Box::new(array).iter();\n-   |                                            ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+LL |     let _: Iter<'_, i32> = Rc::new(array).into_iter();\n+   |                                           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this changes meaning in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n+\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n+  --> $DIR/into-iter-on-arrays-2018.rs:25:41\n    |\n-LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(Box::new(array));\n-   |                            ++++++++++++++++++++++++               ~\n+LL |     let _: Iter<'_, i32> = Array(array).into_iter();\n+   |                                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this changes meaning in Rust 2021\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n-  --> $DIR/into-iter-on-arrays-2018.rs:29:24\n+  --> $DIR/into-iter-on-arrays-2018.rs:32:24\n    |\n LL |     for _ in [1, 2, 3].into_iter() {}\n    |                        ^^^^^^^^^\n@@ -51,5 +61,5 @@ LL -     for _ in [1, 2, 3].into_iter() {}\n LL +     for _ in [1, 2, 3] {}\n    | \n \n-warning: 3 warnings emitted\n+warning: 5 warnings emitted\n "}, {"sha": "2df1a06df20ab027ad6e9e49be526149e87ec8ff", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea82d0651a638075de0a3aeb761ac379a4f99eb4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=ea82d0651a638075de0a3aeb761ac379a4f99eb4", "patch": "@@ -71,137 +71,73 @@ warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (du\n   --> $DIR/into-iter-on-arrays-lint.rs:23:21\n    |\n LL |     Box::new(small).into_iter();\n-   |                     ^^^^^^^^^\n+   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(small).iter();\n-   |                     ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(small));\n-   |     ++++++++++++++++++++++++               ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:26:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n-   |                      ^^^^^^^^^\n+   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new([1, 2]).iter();\n-   |                      ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new([1, 2]));\n-   |     ++++++++++++++++++++++++                ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:29:19\n    |\n LL |     Box::new(big).into_iter();\n-   |                   ^^^^^^^^^\n+   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(big).iter();\n-   |                   ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(big));\n-   |     ++++++++++++++++++++++++             ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:32:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n-   |                         ^^^^^^^^^\n+   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new([0u8; 33]).iter();\n-   |                         ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new([0u8; 33]));\n-   |     ++++++++++++++++++++++++                   ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:36:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n-   |                               ^^^^^^^^^\n+   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(Box::new(small)).iter();\n-   |                               ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(Box::new(small)));\n-   |     ++++++++++++++++++++++++                         ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:39:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n-   |                                ^^^^^^^^^\n+   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(Box::new([1, 2])).iter();\n-   |                                ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(Box::new([1, 2])));\n-   |     ++++++++++++++++++++++++                          ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:42:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(Box::new(big)).iter();\n-   |                             ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(Box::new(big)));\n-   |     ++++++++++++++++++++++++                       ~\n \n warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:45:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n-   |                                   ^^^^^^^^^\n+   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n-help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-   |\n-LL |     Box::new(Box::new([0u8; 33])).iter();\n-   |                                   ~~~~\n-help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n-   |\n-LL |     IntoIterator::into_iter(Box::new(Box::new([0u8; 33])));\n-   |     ++++++++++++++++++++++++                             ~\n \n warning: 12 warnings emitted\n "}]}