{"sha": "bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "node_id": "C_kwDOAAsO6NoAKGJjODg4OTU4YzllMWZkZGUwOTc5MWYxNWQzNDIxYmRjM2I2ZDdkMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T05:31:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T05:31:10Z"}, "message": "Auto merge of #111440 - cjgillot:refprop-debuginfo, r=oli-obk\n\nAllow MIR debuginfo to point to a variable's address\n\nMIR optimizations currently do not to operate on borrowed locals.\n\nWhen enabling #106285, many borrows will be left as-is because they are used in debuginfo. This pass allows to replace this pattern directly in MIR debuginfo:\n```rust\na => _1\n_1 = &raw? mut? _2\n```\nbecomes\n```rust\na => &_2\n// No statement to borrow _2.\n```\n\nThis pass is implemented as a drive-by in ReferencePropagation MIR pass.\n\nThis transformation allows following following MIR opts to treat _2 as an unborrowed local, and optimize it as such, even in builds with debuginfo.\n\nIn codegen, when encountering `a => &..&_2`, we create a list of allocas:\n```llvm\nstore ptr %_2.dbg.spill, ptr %a.ref0.dbg.spill\nstore ptr %a.ref0.dbg.spill, ptr %a.ref1.dbg.spill\n...\ncall void `@llvm.dbg.declare(metadata` ptr %a.ref{n}.dbg.spill, /* ... */)\n```\n\nCaveat: this transformation looses the exact type, we do not differentiate `a` as a immutable, mutable reference or a raw pointer. Everything is declared to `*mut` to codegen. I'm not convinced this is a blocker.", "tree": {"sha": "7c58f002e19288e067a691a56b09cb71d7b3ad29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c58f002e19288e067a691a56b09cb71d7b3ad29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "html_url": "https://github.com/rust-lang/rust/commit/bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad6ab11234ae885913229f6de2c4465bdc0d76f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad6ab11234ae885913229f6de2c4465bdc0d76f3", "html_url": "https://github.com/rust-lang/rust/commit/ad6ab11234ae885913229f6de2c4465bdc0d76f3"}, {"sha": "8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "html_url": "https://github.com/rust-lang/rust/commit/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5"}], "stats": {"total": 2188, "additions": 1536, "deletions": 652}, "files": [{"sha": "bba2800fb0545bbb8c6d1f600b69cf0ea4d62a9a", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 101, "deletions": 49, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::{Abi, FieldIdx, Size, VariantIdx};\n+use rustc_target::abi::{Abi, FieldIdx, FieldsShape, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -41,6 +41,9 @@ pub struct PerLocalVarDebugInfo<'tcx, D> {\n \n     /// `.place.projection` from `mir::VarDebugInfo`.\n     pub projection: &'tcx ty::List<mir::PlaceElem<'tcx>>,\n+\n+    /// `references` from `mir::VarDebugInfo`.\n+    pub references: u8,\n }\n \n #[derive(Clone, Copy, Debug)]\n@@ -80,6 +83,7 @@ trait DebugInfoOffsetLocation<'tcx, Bx> {\n     fn deref(&self, bx: &mut Bx) -> Self;\n     fn layout(&self) -> TyAndLayout<'tcx>;\n     fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self;\n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self;\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n }\n \n@@ -98,6 +102,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         PlaceRef::project_field(*self, bx, field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self {\n+        let lloffset = bx.cx().const_usize(offset);\n+        self.project_index(bx, lloffset)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.project_downcast(bx, variant)\n     }\n@@ -120,6 +129,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         self.field(bx.cx(), field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, index: u64) -> Self {\n+        self.field(bx.cx(), index as usize)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.for_variant(bx.cx(), variant)\n     }\n@@ -165,6 +178,18 @@ fn calculate_debuginfo_offset<\n             mir::ProjectionElem::Downcast(_, variant) => {\n                 place = place.downcast(bx, variant);\n             }\n+            mir::ProjectionElem::ConstantIndex {\n+                offset: index,\n+                min_length: _,\n+                from_end: false,\n+            } => {\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                let FieldsShape::Array { stride, count: _ } = place.layout().fields else {\n+                    span_bug!(var.source_info.span, \"ConstantIndex on non-array type {:?}\", place.layout())\n+                };\n+                *offset += stride * index;\n+                place = place.project_constant_index(bx, index);\n+            }\n             _ => {\n                 // Sanity check for `can_use_in_debuginfo`.\n                 debug_assert!(!elem.can_use_in_debuginfo());\n@@ -293,6 +318,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     dbg_var,\n                     fragment: None,\n                     projection: ty::List::empty(),\n+                    references: 0,\n                 })\n             }\n         } else {\n@@ -358,55 +384,74 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let vars = vars.iter().cloned().chain(fallback_var);\n \n         for var in vars {\n-            let Some(dbg_var) = var.dbg_var else { continue };\n-            let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n-\n-            let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n-                calculate_debuginfo_offset(bx, local, &var, base.layout);\n-\n-            // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n-            // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n-            // not DWARF and LLVM doesn't support translating the resulting\n-            // [DW_OP_deref, DW_OP_plus_uconst, offset, DW_OP_deref] debug info to CodeView.\n-            // Creating extra allocas on the stack makes the resulting debug info simple enough\n-            // that LLVM can generate correct CodeView records and thus the values appear in the\n-            // debugger. (#83709)\n-            let should_create_individual_allocas = bx.cx().sess().target.is_like_msvc\n-                && self.mir.local_kind(local) == mir::LocalKind::Arg\n-                // LLVM can handle simple things but anything more complex than just a direct\n-                // offset or one indirect offset of 0 is too complex for it to generate CV records\n-                // correctly.\n-                && (direct_offset != Size::ZERO\n-                    || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n-\n-            if should_create_individual_allocas {\n-                let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n-                    calculate_debuginfo_offset(bx, local, &var, base);\n-\n-                // Create a variable which will be a pointer to the actual value\n-                let ptr_ty = bx\n-                    .tcx()\n-                    .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n-                let ptr_layout = bx.layout_of(ptr_ty);\n-                let alloca = PlaceRef::alloca(bx, ptr_layout);\n-                bx.set_var_name(alloca.llval, &(var.name.to_string() + \".dbg.spill\"));\n-\n-                // Write the pointer to the variable\n-                bx.store(place.llval, alloca.llval, alloca.align);\n-\n-                // Point the debug info to `*alloca` for the current variable\n-                bx.dbg_var_addr(dbg_var, dbg_loc, alloca.llval, Size::ZERO, &[Size::ZERO], None);\n-            } else {\n-                bx.dbg_var_addr(\n-                    dbg_var,\n-                    dbg_loc,\n-                    base.llval,\n-                    direct_offset,\n-                    &indirect_offsets,\n-                    None,\n-                );\n+            self.debug_introduce_local_as_var(bx, local, base, var);\n+        }\n+    }\n+\n+    fn debug_introduce_local_as_var(\n+        &self,\n+        bx: &mut Bx,\n+        local: mir::Local,\n+        mut base: PlaceRef<'tcx, Bx::Value>,\n+        var: PerLocalVarDebugInfo<'tcx, Bx::DIVariable>,\n+    ) {\n+        let Some(dbg_var) = var.dbg_var else { return };\n+        let Some(dbg_loc) = self.dbg_loc(var.source_info) else { return };\n+\n+        let DebugInfoOffset { mut direct_offset, indirect_offsets, result: _ } =\n+            calculate_debuginfo_offset(bx, local, &var, base.layout);\n+        let mut indirect_offsets = &indirect_offsets[..];\n+\n+        // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n+        // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n+        // not DWARF and LLVM doesn't support translating the resulting\n+        // [DW_OP_deref, DW_OP_plus_uconst, offset, DW_OP_deref] debug info to CodeView.\n+        // Creating extra allocas on the stack makes the resulting debug info simple enough\n+        // that LLVM can generate correct CodeView records and thus the values appear in the\n+        // debugger. (#83709)\n+        let should_create_individual_allocas = bx.cx().sess().target.is_like_msvc\n+            && self.mir.local_kind(local) == mir::LocalKind::Arg\n+            // LLVM can handle simple things but anything more complex than just a direct\n+            // offset or one indirect offset of 0 is too complex for it to generate CV records\n+            // correctly.\n+            && (direct_offset != Size::ZERO || !matches!(indirect_offsets, [Size::ZERO] | []));\n+\n+        let create_alloca = |bx: &mut Bx, place: PlaceRef<'tcx, Bx::Value>, refcount| {\n+            // Create a variable which will be a pointer to the actual value\n+            let ptr_ty = bx\n+                .tcx()\n+                .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n+            let ptr_layout = bx.layout_of(ptr_ty);\n+            let alloca = PlaceRef::alloca(bx, ptr_layout);\n+            bx.set_var_name(alloca.llval, &format!(\"{}.ref{}.dbg.spill\", var.name, refcount));\n+\n+            // Write the pointer to the variable\n+            bx.store(place.llval, alloca.llval, alloca.align);\n+\n+            // Point the debug info to `*alloca` for the current variable\n+            alloca\n+        };\n+\n+        if var.references > 0 {\n+            base = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `&...&base == alloca` for the current variable\n+            for refcount in 0..var.references {\n+                base = create_alloca(bx, base, refcount);\n             }\n+\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[];\n+        } else if should_create_individual_allocas {\n+            let place = calculate_debuginfo_offset(bx, local, &var, base).result;\n+\n+            // Point the debug info to `*alloca` for the current variable\n+            base = create_alloca(bx, place, 0);\n+            direct_offset = Size::ZERO;\n+            indirect_offsets = &[Size::ZERO];\n         }\n+\n+        bx.dbg_var_addr(dbg_var, dbg_loc, base.llval, direct_offset, indirect_offsets, None);\n     }\n \n     pub fn debug_introduce_locals(&self, bx: &mut Bx) {\n@@ -439,7 +484,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             };\n \n             let dbg_var = dbg_scope_and_span.map(|(dbg_scope, _, span)| {\n-                let (var_ty, var_kind) = match var.value {\n+                let (mut var_ty, var_kind) = match var.value {\n                     mir::VarDebugInfoContents::Place(place) => {\n                         let var_ty = self.monomorphized_place_ty(place.as_ref());\n                         let var_kind = if let Some(arg_index) = var.argument_index\n@@ -476,6 +521,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 };\n \n+                for _ in 0..var.references {\n+                    var_ty =\n+                        bx.tcx().mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: var_ty });\n+                }\n+\n                 self.cx.create_dbg_var(var.name, var_ty, dbg_scope, var_kind, span)\n             });\n \n@@ -487,6 +537,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         dbg_var,\n                         fragment: None,\n                         projection: place.projection,\n+                        references: var.references,\n                     });\n                 }\n                 mir::VarDebugInfoContents::Const(c) => {\n@@ -540,6 +591,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 Some(fragment_start..fragment_start + fragment_layout.size)\n                             },\n                             projection: place.projection,\n+                            references: var.references,\n                         });\n                     }\n                 }"}, {"sha": "c50e937d84fede636270aa919b1aa5c987551adf", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -448,7 +448,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         };\n         match debuginfo.value {\n             VarDebugInfoContents::Const(_) => {}\n-            VarDebugInfoContents::Place(place) => check_place(place),\n+            VarDebugInfoContents::Place(place) => {\n+                check_place(place);\n+                if debuginfo.references != 0 && place.projection.last() == Some(&PlaceElem::Deref) {\n+                    self.fail(\n+                        START_BLOCK.start_location(),\n+                        format!(\"debuginfo {:?}, has both ref and deref\", debuginfo),\n+                    );\n+                }\n+            }\n             VarDebugInfoContents::Composite { ty, ref fragments } => {\n                 for f in fragments {\n                     check_place(f.contents);"}, {"sha": "6b0401a4c9bb7223e3963b754c5ceeb8d059de83", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -1111,6 +1111,10 @@ pub struct VarDebugInfo<'tcx> {\n     /// originated from (starting from 1). Note, if MIR inlining is enabled, then this is the\n     /// argument number in the original function before it was inlined.\n     pub argument_index: Option<u16>,\n+\n+    /// The data represents `name` dereferenced `references` times,\n+    /// and not the direct value.\n+    pub references: u8,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1550,8 +1554,11 @@ impl<V, T> ProjectionElem<V, T> {\n     /// Returns `true` if this is accepted inside `VarDebugInfoContents::Place`.\n     pub fn can_use_in_debuginfo(&self) -> bool {\n         match self {\n-            Self::Deref | Self::Downcast(_, _) | Self::Field(_, _) => true,\n-            Self::ConstantIndex { .. }\n+            Self::ConstantIndex { from_end: false, .. }\n+            | Self::Deref\n+            | Self::Downcast(_, _)\n+            | Self::Field(_, _) => true,\n+            Self::ConstantIndex { from_end: true, .. }\n             | Self::Index(_)\n             | Self::OpaqueCast(_)\n             | Self::Subslice { .. } => false,\n@@ -1639,18 +1646,7 @@ impl<'tcx> Place<'tcx> {\n             return self;\n         }\n \n-        let mut v: Vec<PlaceElem<'tcx>>;\n-\n-        let new_projections = if self.projection.is_empty() {\n-            more_projections\n-        } else {\n-            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n-            v.extend(self.projection);\n-            v.extend(more_projections);\n-            &v\n-        };\n-\n-        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+        self.as_ref().project_deeper(more_projections, tcx)\n     }\n }\n \n@@ -1721,6 +1717,27 @@ impl<'tcx> PlaceRef<'tcx> {\n             (base, *proj)\n         })\n     }\n+\n+    /// Generates a new place by appending `more_projections` to the existing ones\n+    /// and interning the result.\n+    pub fn project_deeper(\n+        self,\n+        more_projections: &[PlaceElem<'tcx>],\n+        tcx: TyCtxt<'tcx>,\n+    ) -> Place<'tcx> {\n+        let mut v: Vec<PlaceElem<'tcx>>;\n+\n+        let new_projections = if self.projection.is_empty() {\n+            more_projections\n+        } else {\n+            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n+            v.extend(self.projection);\n+            v.extend(more_projections);\n+            &v\n+        };\n+\n+        Place { local: self.local, projection: tcx.mk_place_elems(new_projections) }\n+    }\n }\n \n impl Debug for Place<'_> {"}, {"sha": "62c3d8cf23913f049c33716f353e00182236ebd7", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -551,8 +551,13 @@ fn write_scope_tree(\n         }\n \n         let indented_debug_info = format!(\n-            \"{0:1$}debug {2} => {3:?};\",\n-            INDENT, indent, var_debug_info.name, var_debug_info.value,\n+            \"{0:1$}debug {2} => {3:&<4$}{5:?};\",\n+            INDENT,\n+            indent,\n+            var_debug_info.name,\n+            \"\",\n+            var_debug_info.references as usize,\n+            var_debug_info.value,\n         );\n \n         writeln!("}, {"sha": "596dd80bf48745ceedde2f4f857cfaec68502fb3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -842,6 +842,7 @@ macro_rules! make_mir_visitor {\n                     source_info,\n                     value,\n                     argument_index: _,\n+                    references: _,\n                 } = var_debug_info;\n \n                 self.visit_source_info(source_info);"}, {"sha": "e73208b877f1035ebb835ae80d620beb698df68a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -204,6 +204,7 @@ CloneLiftImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "6df06df5c60f42c84e1f64158853cfc52d734ecf", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -2241,6 +2241,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.var_debug_info.push(VarDebugInfo {\n             name,\n             source_info: debug_source_info,\n+            references: 0,\n             value: VarDebugInfoContents::Place(for_arm_body.into()),\n             argument_index: None,\n         });\n@@ -2260,6 +2261,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info.push(VarDebugInfo {\n                 name,\n                 source_info: debug_source_info,\n+                references: 0,\n                 value: VarDebugInfoContents::Place(ref_for_guard.into()),\n                 argument_index: None,\n             });"}, {"sha": "4e3e98b56e79960030af31ba3bbbd5131ade946d", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -798,6 +798,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n+                    references: 0,\n                     source_info: SourceInfo::outermost(captured_place.var_ident.span),\n                     value: VarDebugInfoContents::Place(use_place),\n                     argument_index: None,\n@@ -828,6 +829,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.var_debug_info.push(VarDebugInfo {\n                     name,\n                     source_info,\n+                    references: 0,\n                     value: VarDebugInfoContents::Place(arg_local.into()),\n                     argument_index: Some(argument_index as u16 + 1),\n                 });"}, {"sha": "bbd9f76ba5cc354e24cbdd048ac3ed78bee933c8", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -77,11 +77,11 @@ impl<'tcx> MirPass<'tcx> for ReferencePropagation {\n     #[instrument(level = \"trace\", skip(self, tcx, body))]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n-        propagate_ssa(tcx, body);\n+        while propagate_ssa(tcx, body) {}\n     }\n }\n \n-fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n     let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n@@ -94,6 +94,8 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     if replacer.any_replacement {\n         crate::simplify::remove_unused_definitions(body);\n     }\n+\n+    replacer.any_replacement\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -263,6 +265,7 @@ fn compute_replacement<'tcx>(\n         targets,\n         storage_to_remove,\n         allowed_replacements,\n+        fully_replacable_locals,\n         any_replacement: false,\n     };\n \n@@ -343,13 +346,33 @@ struct Replacer<'tcx> {\n     storage_to_remove: BitSet<Local>,\n     allowed_replacements: FxHashSet<(Local, Location)>,\n     any_replacement: bool,\n+    fully_replacable_locals: BitSet<Local>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n+    fn visit_var_debug_info(&mut self, debuginfo: &mut VarDebugInfo<'tcx>) {\n+        if let VarDebugInfoContents::Place(ref mut place) = debuginfo.value\n+            && place.projection.is_empty()\n+            && let Value::Pointer(target, _) = self.targets[place.local]\n+            && target.projection.iter().all(|p| p.can_use_in_debuginfo())\n+        {\n+            if let Some((&PlaceElem::Deref, rest)) = target.projection.split_last() {\n+                *place = Place::from(target.local).project_deeper(rest, self.tcx);\n+                self.any_replacement = true;\n+            } else if self.fully_replacable_locals.contains(place.local)\n+                && let Some(references) = debuginfo.references.checked_add(1)\n+            {\n+                debuginfo.references = references;\n+                *place = target;\n+                self.any_replacement = true;\n+            }\n+        }\n+    }\n+\n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n         if place.projection.first() != Some(&PlaceElem::Deref) {\n             return;"}, {"sha": "45a2e9023c9ca44c1c9332a92afb1ab7e34d8c61", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -21,6 +21,7 @@ TrivialTypeTraversalImpls! {\n     (),\n     bool,\n     usize,\n+    u8,\n     u16,\n     u32,\n     u64,"}, {"sha": "85ade170ac6fddece010fc686179683ea6c82afa", "filename": "tests/debuginfo/reference-debuginfo.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fdebuginfo%2Freference-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fdebuginfo%2Freference-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Freference-debuginfo.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -0,0 +1,173 @@\n+// Copy of `borrowed-basic.rs` which enables the `ReferencePropagation` MIR pass.\n+// That pass replaces debuginfo for `a => _x` where `_x = &b` to be `a => &b`,\n+// and leaves codegen to create a ladder of allocations so as `*a == b`.\n+//\n+// compile-flags:-g -Zmir-enable-passes=+ReferencePropagation,-ConstDebugInfo\n+// min-lldb-version: 310\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print *bool_ref\n+// gdb-check:$1 = true\n+\n+// gdb-command:print *int_ref\n+// gdb-check:$2 = -1\n+\n+// gdb-command:print/d *char_ref\n+// gdb-check:$3 = 97\n+\n+// gdb-command:print *i8_ref\n+// gdbg-check:$4 = 68 'D'\n+// gdbr-check:$4 = 68\n+\n+// gdb-command:print *i16_ref\n+// gdb-check:$5 = -16\n+\n+// gdb-command:print *i32_ref\n+// gdb-check:$6 = -32\n+\n+// gdb-command:print *i64_ref\n+// gdb-check:$7 = -64\n+\n+// gdb-command:print *uint_ref\n+// gdb-check:$8 = 1\n+\n+// gdb-command:print *u8_ref\n+// gdbg-check:$9 = 100 'd'\n+// gdbr-check:$9 = 100\n+\n+// gdb-command:print *u16_ref\n+// gdb-check:$10 = 16\n+\n+// gdb-command:print *u32_ref\n+// gdb-check:$11 = 32\n+\n+// gdb-command:print *u64_ref\n+// gdb-check:$12 = 64\n+\n+// gdb-command:print *f32_ref\n+// gdb-check:$13 = 2.5\n+\n+// gdb-command:print *f64_ref\n+// gdb-check:$14 = 3.5\n+\n+// gdb-command:print *f64_double_ref\n+// gdb-check:$15 = 3.5\n+\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print *bool_ref\n+// lldbg-check:[...]$0 = true\n+// lldbr-check:(bool) *bool_ref = true\n+\n+// lldb-command:print *int_ref\n+// lldbg-check:[...]$1 = -1\n+// lldbr-check:(isize) *int_ref = -1\n+\n+// NOTE: only rust-enabled lldb supports 32bit chars\n+// lldbr-command:print *char_ref\n+// lldbr-check:(char) *char_ref = 'a'\n+\n+// lldb-command:print *i8_ref\n+// lldbg-check:[...]$2 = 'D'\n+// lldbr-check:(i8) *i8_ref = 68\n+\n+// lldb-command:print *i16_ref\n+// lldbg-check:[...]$3 = -16\n+// lldbr-check:(i16) *i16_ref = -16\n+\n+// lldb-command:print *i32_ref\n+// lldbg-check:[...]$4 = -32\n+// lldbr-check:(i32) *i32_ref = -32\n+\n+// lldb-command:print *i64_ref\n+// lldbg-check:[...]$5 = -64\n+// lldbr-check:(i64) *i64_ref = -64\n+\n+// lldb-command:print *uint_ref\n+// lldbg-check:[...]$6 = 1\n+// lldbr-check:(usize) *uint_ref = 1\n+\n+// lldb-command:print *u8_ref\n+// lldbg-check:[...]$7 = 'd'\n+// lldbr-check:(u8) *u8_ref = 100\n+\n+// lldb-command:print *u16_ref\n+// lldbg-check:[...]$8 = 16\n+// lldbr-check:(u16) *u16_ref = 16\n+\n+// lldb-command:print *u32_ref\n+// lldbg-check:[...]$9 = 32\n+// lldbr-check:(u32) *u32_ref = 32\n+\n+// lldb-command:print *u64_ref\n+// lldbg-check:[...]$10 = 64\n+// lldbr-check:(u64) *u64_ref = 64\n+\n+// lldb-command:print *f32_ref\n+// lldbg-check:[...]$11 = 2.5\n+// lldbr-check:(f32) *f32_ref = 2.5\n+\n+// lldb-command:print *f64_ref\n+// lldbg-check:[...]$12 = 3.5\n+// lldbr-check:(f64) *f64_ref = 3.5\n+\n+// lldb-command:print *f64_double_ref\n+// lldbg-check:[...]$13 = 3.5\n+// lldbr-check:(f64) **f64_double_ref = 3.5\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+fn main() {\n+    let bool_val: bool = true;\n+    let bool_ref: &bool = &bool_val;\n+\n+    let int_val: isize = -1;\n+    let int_ref: &isize = &int_val;\n+\n+    let char_val: char = 'a';\n+    let char_ref: &char = &char_val;\n+\n+    let i8_val: i8 = 68;\n+    let i8_ref: &i8 = &i8_val;\n+\n+    let i16_val: i16 = -16;\n+    let i16_ref: &i16 = &i16_val;\n+\n+    let i32_val: i32 = -32;\n+    let i32_ref: &i32 = &i32_val;\n+\n+    let i64_val: i64 = -64;\n+    let i64_ref: &i64 = &i64_val;\n+\n+    let uint_val: usize = 1;\n+    let uint_ref: &usize = &uint_val;\n+\n+    let u8_val: u8 = 100;\n+    let u8_ref: &u8 = &u8_val;\n+\n+    let u16_val: u16 = 16;\n+    let u16_ref: &u16 = &u16_val;\n+\n+    let u32_val: u32 = 32;\n+    let u32_ref: &u32 = &u32_val;\n+\n+    let u64_val: u64 = 64;\n+    let u64_ref: &u64 = &u64_val;\n+\n+    let f32_val: f32 = 2.5;\n+    let f32_ref: &f32 = &f32_val;\n+\n+    let f64_val: f64 = 3.5;\n+    let f64_ref: &f64 = &f64_val;\n+    let f64_double_ref: &f64 = &f64_ref;\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {()}"}, {"sha": "73b9ea46c449bbdd7845738cdd045b1b38fc83d5", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -21,9 +21,9 @@\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n           let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n           scope 2 {\n-              debug v1 => _12;             // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n-              debug v2 => _13;             // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n-              debug v3 => _14;             // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n+              debug v1 => &(*_2)[0 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n+              debug v2 => &(*_2)[1 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n+              debug v3 => &(*_2)[2 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n           }\n       }\n   \n@@ -52,15 +52,6 @@\n       }\n   \n       bb2: {\n-          StorageLive(_12);                // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          _12 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          _13 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          _14 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_12);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n           StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/issue_76432.rs:+6:2: +6:2"}, {"sha": "07bd48fc84638a9bcb62dc3d61b751cac67bdd97", "filename": "tests/mir-opt/reference_prop.debuginfo.ReferencePropagation.diff", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -0,0 +1,175 @@\n+- // MIR for `debuginfo` before ReferencePropagation\n++ // MIR for `debuginfo` after ReferencePropagation\n+  \n+  fn debuginfo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:16: +0:16\n+      let _1: &mut u8;                     // in scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+      let _4: debuginfo::T;                // in scope 0 at $DIR/reference_prop.rs:+4:18: +4:22\n+      let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:5: +12:6\n+      let mut _7: std::option::Option<i32>; // in scope 0 at $DIR/reference_prop.rs:+9:11: +9:18\n+      let mut _8: isize;                   // in scope 0 at $DIR/reference_prop.rs:+10:9: +10:13\n+      let _10: ();                         // in scope 0 at $DIR/reference_prop.rs:+16:5: +17:6\n+      let mut _11: &[i32];                 // in scope 0 at $DIR/reference_prop.rs:+16:82: +16:94\n+      let _12: &[i32];                     // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:94\n+      let mut _13: &[i32; 10];             // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let _14: [i32; 10];                  // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let mut _15: std::ops::RangeFull;    // in scope 0 at $DIR/reference_prop.rs:+16:91: +16:93\n+      let mut _16: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _17: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _18: bool;                   // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let _23: &&mut u8;                   // in scope 0 at $DIR/reference_prop.rs:+19:28: +19:40\n+      let _24: &mut u8;                    // in scope 0 at $DIR/reference_prop.rs:+19:29: +19:40\n+      let mut _25: debuginfo::T;           // in scope 0 at $DIR/reference_prop.rs:+19:34: +19:38\n+      scope 1 {\n+-         debug ref_mut_u8 => _1;          // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n++         debug ref_mut_u8 => &_2;         // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n+          let _3: &u8;                     // in scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          let mut _28: &debuginfo::T;      // in scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+          scope 2 {\n+-             debug field => _3;           // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n++             debug field => &((*_28).0: u8); // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n+              let _5: &u8;                 // in scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+              scope 3 {\n+-                 debug reborrow => _5;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n++                 debug reborrow => &_2;   // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n+                  let _9: &i32;            // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  let _22: &&&mut u8;      // in scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+                  let mut _27: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  scope 4 {\n+-                     debug variant_field => _9; // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n++                     debug variant_field => &(((*_27) as Some).0: i32); // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  }\n+                  scope 5 {\n+-                     debug constant_index => _19; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n++                     debug constant_index => &(*_11)[1 of 3]; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      debug subslice => _20; // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      debug constant_index_from_end => _21; // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let _19: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      let _20: &[i32];     // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      let _21: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let mut _26: &[i32; 10]; // in scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                  }\n+                  scope 6 {\n+-                     debug multiple_borrow => _22; // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n++                     debug multiple_borrow => &&&(_25.0: u8); // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+3:9: +3:19\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+          _2 = const 5_u8;                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n+-         _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n+-         StorageLive(_3);                 // scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n+          _28 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:535:17: 535:24\n+                                           // + literal: Const { ty: &T, val: Unevaluated(debuginfo, [], Some(promoted[2])) }\n+-         _3 = &((*_28).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n+-         _5 = &(*_1);                     // scope 2 at $DIR/reference_prop.rs:+7:20: +7:32\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:5: +12:6\n+          StorageLive(_7);                 // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _7 = Option::<i32>::Some(const 0_i32); // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          _8 = discriminant(_7);           // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+          switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 3 at $DIR/reference_prop.rs:+9:5: +9:18\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+          _27 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:542:14: 542:31\n+                                           // + literal: Const { ty: &Option<i32>, val: Unevaluated(debuginfo, [], Some(promoted[1])) }\n+-         _9 = &(((*_27) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+-         _6 = const ();                   // scope 4 at $DIR/reference_prop.rs:+11:36: +11:38\n+-         StorageDead(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 3 at $DIR/reference_prop.rs:+9:11: +9:18\n+      }\n+  \n+      bb3: {\n+-         _6 = const ();                   // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+          goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+10:17: +10:19\n+      }\n+  \n+      bb4: {\n+          StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n+-         StorageLive(_10);                // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+          StorageLive(_11);                // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+          StorageLive(_13);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          _26 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:90\n+                                           // + literal: Const { ty: &[i32; 10], val: Unevaluated(debuginfo, [], Some(promoted[0])) }\n+          _13 = &(*_26);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          StorageLive(_15);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _15 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _12 = <[i32; 10] as Index<RangeFull>>::index(move _13, move _15) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:547:83: 547:94\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32; 10], RangeFull) -> &'a <[i32; 10] as Index<RangeFull>>::Output {<[i32; 10] as Index<RangeFull>>::index}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_15);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          StorageDead(_13);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          _11 = &(*_12);                   // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          _16 = Len((*_11));               // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _17 = const 3_usize;             // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _18 = Ge(move _16, move _17);    // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+      }\n+  \n+      bb6: {\n+-         StorageLive(_19);                // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+-         _19 = &(*_11)[1 of 3];           // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+          StorageLive(_20);                // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          _20 = &(*_11)[2:-1];             // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          StorageLive(_21);                // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+          _21 = &(*_11)[-1 of 3];          // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+-         _10 = const ();                  // scope 5 at $DIR/reference_prop.rs:+16:95: +17:6\n+          StorageDead(_21);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_20);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_19);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb7: {\n+-         _10 = const ();                  // scope 3 at $DIR/reference_prop.rs:+17:6: +17:6\n+          goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+      }\n+  \n+      bb8: {\n+          StorageDead(_12);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_11);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_10);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageLive(_22);                // scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+-         StorageLive(_23);                // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         StorageLive(_24);                // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+          StorageLive(_25);                // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+          _25 = T(const 6_u8);             // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+-         _24 = &mut (_25.0: u8);          // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+-         _23 = &_24;                      // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         _22 = &_23;                      // scope 3 at $DIR/reference_prop.rs:+19:27: +19:40\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:16: +20:2\n+          StorageDead(_25);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_24);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_23);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_22);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+20:1: +20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+20:2: +20:2\n+      }\n+  }\n+  "}, {"sha": "e158f64e9c3cfb439e8b099114417e16dbd8e790", "filename": "tests/mir-opt/reference_prop.dominate_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.dominate_storage.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -24,7 +24,7 @@\n           _5 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_5) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+16:13: +16:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:383:28: 383:34\n+                                           // + span: $DIR/reference_prop.rs:455:28: 455:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "38ab16cedb7cec251f31bda1d2bed62b4f2c5def", "filename": "tests/mir-opt/reference_prop.maybe_dead.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.maybe_dead.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -29,23 +29,23 @@\n           StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+21:13: +21:27\n           _0 = opaque::<i32>(_6) -> bb2;   // scope 0 at $DIR/reference_prop.rs:+22:13: +22:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:417:28: 417:34\n+                                           // + span: $DIR/reference_prop.rs:489:28: 489:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           _7 = (*_4);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_7) -> bb3;   // scope 0 at $DIR/reference_prop.rs:+27:13: +27:38\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:422:28: 422:34\n+                                           // + span: $DIR/reference_prop.rs:494:28: 494:34\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n           _8 = (*_5);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_8) -> bb4;   // scope 0 at $DIR/reference_prop.rs:+33:13: +33:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:428:33: 428:39\n+                                           // + span: $DIR/reference_prop.rs:500:33: 500:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "6e45178687068950f70581d4ae80f49e404ece65", "filename": "tests/mir-opt/reference_prop.multiple_storage.ReferencePropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.multiple_storage.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -16,7 +16,7 @@\n           _3 = (*_2);                      // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n           _0 = opaque::<i32>(_3) -> bb1;   // scope 0 at $DIR/reference_prop.rs:+14:13: +14:43\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:357:33: 357:39\n+                                           // + span: $DIR/reference_prop.rs:429:33: 429:39\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   "}, {"sha": "d99e110359f7d1cc27de933ea391adcf281c463c", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -13,13 +13,16 @@\n           debug x => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:14\n           let _2: &mut i32;                // in scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n           scope 2 {\n-              debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n+-             debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n++             debug xref => &_1;           // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n               let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n               scope 3 {\n-                  debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n+-                 debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n++                 debug xraw => &_1;       // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n                   let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n                   scope 4 {\n-                      debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n+-                     debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n++                     debug xshr => &_1;   // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n                       let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n                       scope 5 {\n                           debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n@@ -35,19 +38,17 @@\n           StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n           _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n -         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n-          _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n-          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+-         _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n+-         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n -         StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-+         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-          _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n -         StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n-          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+-         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n -         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n-+         _6 = &_1;                        // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n           StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n -         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n -         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26\n@@ -64,8 +65,8 @@\n           StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n-          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n -         StorageDead(_2);                 // scope 1 at $DIR/reference_prop.rs:+9:1: +9:2\n           StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:1: +9:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+9:2: +9:2"}, {"sha": "7b31ee695cecc54575cc1133f4691c6dd4f440d5", "filename": "tests/mir-opt/reference_prop.reference_propagation.ReferencePropagation.diff", "status": "modified", "additions": 158, "deletions": 58, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let _19: usize;                      // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:14\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&usize;                // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let _26: usize;                      // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:14\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &usize;            // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _33: usize;                      // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:14\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -35,16 +35,25 @@\n       let _48: &T;                         // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _54: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &T;                         // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+      let mut _54: &T;                     // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _55: &T;                         // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:28\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _60: usize;                      // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _66: usize;                      // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           let _5: &usize;                  // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +95,7 @@\n           let mut _27: &usize;             // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &usize;        // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,26 +140,61 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _61: &usize;                 // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&usize;            // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:14\n+          let mut _67: &usize;             // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &usize;        // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &_4;                        // scope 1 at $DIR/reference_prop.rs:+4:17: +4:19\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -168,7 +212,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -215,18 +259,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:36:9: 36:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(&&usize) {opaque::<&&usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +283,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &_26;                      // scope 12 at $DIR/reference_prop.rs:+32:21: +32:23\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:45:9: 45:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn(*mut &usize) {opaque::<*mut &usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -321,8 +365,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &(*_1);                    // scope 0 at $DIR/reference_prop.rs:+61:17: +61:25\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -340,36 +384,92 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n--         _53 = &(*_54);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-+         _53 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &(*_2);                    // scope 0 at $DIR/reference_prop.rs:+68:17: +68:27\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _55 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+-         _54 = &(*_55);                   // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n++         _54 = &(*_1);                    // scope 27 at $DIR/reference_prop.rs:+69:20: +69:28\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:28\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:27: +69:28\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:28: +69:29\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:81:9: 81:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:17: +76:24\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &_60;                      // scope 29 at $DIR/reference_prop.rs:+77:17: +77:19\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:90:9: 90:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &_66;                      // scope 33 at $DIR/reference_prop.rs:+86:21: +86:23\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:99:9: 99:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "ddeb04e50c79d956c69ec9ba98d4362c18c21394", "filename": "tests/mir-opt/reference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "status": "modified", "additions": 174, "deletions": 69, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_const_ptr.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*const usize;          // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *const usize;      // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *const usize;           // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -31,15 +31,22 @@\n       let mut _53: *const T;               // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:38\n       let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n       let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n-      let _61: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n-      let mut _62: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+      let _69: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _70: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n+      let _75: ();                         // in scope 0 at $DIR/reference_prop.rs:+98:9: +98:19\n+      let mut _76: ();                     // in scope 0 at $DIR/reference_prop.rs:+98:16: +98:18\n       scope 1 {\n           let _4: usize;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           scope 2 {\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n               let _5: *const usize;        // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -90,7 +97,7 @@\n               let mut _26: *const usize;   // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *const usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -144,7 +151,8 @@\n       scope 31 {\n           let _47: *const T;               // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n@@ -162,18 +170,60 @@\n           }\n       }\n       scope 37 {\n-          let _57: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          let _58: usize;                  // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n           scope 38 {\n-              debug a => _57;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n-              let _58: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:14\n+              let _59: *const usize;       // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n               scope 39 {\n-                  debug b => _58;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n-                  let _59: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: *const usize;   // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n                   scope 40 {\n-                      debug c => _59;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n-                      let _60: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-                     debug c => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug c => &_58;     // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n                       scope 41 {\n-                          debug e => _60;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                          debug e => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let _65: usize;                  // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          scope 43 {\n+              debug a => _65;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:14\n+              let _66: *const usize;       // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+              scope 44 {\n+-                 debug b => _66;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n++                 debug b => &_65;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:14\n+                  let _67: &*const usize;  // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _67;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_65;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _68: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _68;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 47 {\n+          let _71: usize;                  // in scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          scope 48 {\n+              debug a => _71;              // in scope 48 at $DIR/reference_prop.rs:+94:13: +94:14\n+              let mut _72: *const usize;   // in scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+              scope 49 {\n+-                 debug b => _72;          // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n++                 debug b => &_71;         // in scope 49 at $DIR/reference_prop.rs:+95:13: +95:18\n+                  let _73: &mut *const usize; // in scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+                  scope 50 {\n+-                     debug d => _73;      // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n++                     debug d => &&_71;    // in scope 50 at $DIR/reference_prop.rs:+96:13: +96:14\n+                      let _74: usize;      // in scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+                      scope 51 {\n+                          debug c => _74;  // in scope 51 at $DIR/reference_prop.rs:+97:13: +97:14\n                       }\n                   }\n               }\n@@ -184,8 +234,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:14\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:17: +3:24\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw const _4;              // scope 2 at $DIR/reference_prop.rs:+4:17: +4:29\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -194,7 +244,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n+                                           // + span: $DIR/reference_prop.rs:202:9: 202:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -203,7 +253,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -224,7 +274,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:177:9: 177:15\n+                                           // + span: $DIR/reference_prop.rs:213:9: 213:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -246,18 +296,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*const usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:186:9: 186:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:222:9: 222:15\n+                                           // + literal: Const { ty: fn(&*const usize) {opaque::<&*const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -270,21 +320,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw const _25;            // scope 16 at $DIR/reference_prop.rs:+32:21: +32:33\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *const usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:195:9: 195:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + literal: Const { ty: fn(*mut *const usize) {opaque::<*mut *const usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -304,7 +354,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*const usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:203:9: 203:15\n+                                           // + span: $DIR/reference_prop.rs:239:9: 239:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -336,7 +386,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*const usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:216:9: 216:15\n+                                           // + span: $DIR/reference_prop.rs:252:9: 252:15\n                                            // + literal: Const { ty: fn(*const usize) {opaque::<*const usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -352,8 +402,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw const (*_1);          // scope 31 at $DIR/reference_prop.rs:+61:17: +61:35\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -362,7 +412,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:223:9: 223:15\n+                                           // + span: $DIR/reference_prop.rs:259:9: 259:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -371,7 +421,7 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n           StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n@@ -387,7 +437,7 @@\n           _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n           _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:231:9: 231:15\n+                                           // + span: $DIR/reference_prop.rs:267:9: 267:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -398,34 +448,89 @@\n           StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n           StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n -         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageLive(_57);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n-          _57 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n-          StorageLive(_58);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n-          _58 = &raw const _57;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n-          StorageLive(_59);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n--         _59 = &raw const (*_58);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-+         _59 = &raw const _57;            // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n-          StorageLive(_60);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n--         _60 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-+         _60 = _57;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n-          StorageLive(_61);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n-          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _62 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n-          _61 = opaque::<()>(move _62) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:14\n+          _58 = const 13_usize;            // scope 37 at $DIR/reference_prop.rs:+76:17: +76:25\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw const _58;            // scope 38 at $DIR/reference_prop.rs:+77:17: +77:29\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &raw const (*_59);         // scope 39 at $DIR/reference_prop.rs:+78:17: +78:30\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_60);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:240:9: 240:15\n+                                           // + span: $DIR/reference_prop.rs:276:9: 276:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb9: {\n-          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n-          StorageDead(_61);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n-          _0 = const ();                   // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n-          StorageDead(_60);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_59);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_58);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n-          StorageDead(_57);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+82:2: +82:2\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageLive(_64);                // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageLive(_65);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:14\n+          _65 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:17: +85:24\n+-         StorageLive(_66);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:14\n+-         _66 = &raw const _65;            // scope 43 at $DIR/reference_prop.rs:+86:17: +86:29\n+-         StorageLive(_67);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _67 = &_66;                      // scope 44 at $DIR/reference_prop.rs:+87:17: +87:19\n+          StorageLive(_68);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _68 = (*_66);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _68 = _65;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_70);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = opaque::<()>(move _70) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:285:9: 285:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_70);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+-         _64 = const ();                  // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_68);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_65);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_64);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageLive(_71);                // scope 47 at $DIR/reference_prop.rs:+94:13: +94:14\n+          _71 = const 5_usize;             // scope 47 at $DIR/reference_prop.rs:+94:17: +94:24\n+-         StorageLive(_72);                // scope 48 at $DIR/reference_prop.rs:+95:13: +95:18\n+-         _72 = &raw const _71;            // scope 48 at $DIR/reference_prop.rs:+95:21: +95:33\n+-         StorageLive(_73);                // scope 49 at $DIR/reference_prop.rs:+96:13: +96:14\n+-         _73 = &mut _72;                  // scope 49 at $DIR/reference_prop.rs:+96:17: +96:23\n+          StorageLive(_74);                // scope 50 at $DIR/reference_prop.rs:+97:13: +97:14\n+-         _74 = (*_72);                    // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n++         _74 = _71;                       // scope 50 at $DIR/reference_prop.rs:+97:17: +97:19\n+          StorageLive(_75);                // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+          StorageLive(_76);                // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _76 = ();                        // scope 51 at $DIR/reference_prop.rs:+98:16: +98:18\n+          _75 = opaque::<()>(move _76) -> bb11; // scope 51 at $DIR/reference_prop.rs:+98:9: +98:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:294:9: 294:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb11: {\n+          StorageDead(_76);                // scope 51 at $DIR/reference_prop.rs:+98:18: +98:19\n+          StorageDead(_75);                // scope 51 at $DIR/reference_prop.rs:+98:19: +98:20\n+          _0 = const ();                   // scope 47 at $DIR/reference_prop.rs:+93:5: +99:6\n+          StorageDead(_74);                // scope 50 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_73);                // scope 49 at $DIR/reference_prop.rs:+99:5: +99:6\n+-         StorageDead(_72);                // scope 48 at $DIR/reference_prop.rs:+99:5: +99:6\n+          StorageDead(_71);                // scope 47 at $DIR/reference_prop.rs:+99:5: +99:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+100:2: +100:2\n       }\n   }\n   "}, {"sha": "8d059de5b875577427f1354e5b4c8c39093dd354", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut.ReferencePropagation.diff", "status": "modified", "additions": 165, "deletions": 65, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -17,12 +17,12 @@\n       let mut _17: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _18: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n       let mut _19: usize;                  // in scope 0 at $DIR/reference_prop.rs:+22:13: +22:18\n-      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _24: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _23: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _24: &&mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _25: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n       let mut _26: usize;                  // in scope 0 at $DIR/reference_prop.rs:+31:13: +31:18\n-      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _31: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _30: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _31: *mut &mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _32: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let mut _33: usize;                  // in scope 0 at $DIR/reference_prop.rs:+40:13: +40:18\n       let _36: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n@@ -35,16 +35,25 @@\n       let _48: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n       let _50: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _51: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let _52: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-      let mut _53: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _52: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let _53: &mut T;                     // in scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n       let mut _54: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n-      let _56: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _57: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let mut _55: &mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:32\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _58: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _59: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let mut _60: usize;                  // in scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+      let _64: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _65: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let mut _66: usize;                  // in scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+      let _70: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _71: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           debug a => _4;                   // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           let _5: &mut usize;              // in scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n           scope 2 {\n-              debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-             debug b => _5;               // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n++             debug b => &_4;              // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               let _6: usize;               // in scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n               scope 3 {\n                   debug c => _6;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -86,7 +95,7 @@\n           let mut _27: &mut usize;         // in scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           scope 13 {\n               debug b => _27;              // in scope 13 at $DIR/reference_prop.rs:+32:13: +32:18\n-              let _28: &mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n+              let _28: *mut &mut usize;    // in scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n               scope 14 {\n                   debug d => _28;          // in scope 14 at $DIR/reference_prop.rs:+33:13: +33:14\n                   let _29: usize;          // in scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -131,26 +140,61 @@\n           }\n       }\n       scope 25 {\n-          debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         debug a => _48;                  // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n++         debug a => _1;                   // in scope 25 at $DIR/reference_prop.rs:+61:13: +61:14\n           let _49: T;                      // in scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n           scope 26 {\n               debug b => _49;              // in scope 26 at $DIR/reference_prop.rs:+62:13: +62:14\n           }\n       }\n       scope 27 {\n-          debug a => _52;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n-          let _55: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          debug a => _53;                  // in scope 27 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _56: T;                      // in scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n           scope 28 {\n-              debug b => _55;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug b => _56;              // in scope 28 at $DIR/reference_prop.rs:+70:13: +70:14\n+          }\n+      }\n+      scope 29 {\n+          debug a => _60;                  // in scope 29 at $DIR/reference_prop.rs:+76:13: +76:18\n+          let _61: &mut usize;             // in scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+          scope 30 {\n+-             debug b => _61;              // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n++             debug b => &_60;             // in scope 30 at $DIR/reference_prop.rs:+77:13: +77:14\n+              let _62: &&mut usize;        // in scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+              scope 31 {\n+-                 debug d => _62;          // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n++                 debug d => &&_60;        // in scope 31 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  let _63: usize;          // in scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  scope 32 {\n+                      debug c => _63;      // in scope 32 at $DIR/reference_prop.rs:+79:13: +79:14\n+                  }\n+              }\n+          }\n+      }\n+      scope 33 {\n+          debug a => _66;                  // in scope 33 at $DIR/reference_prop.rs:+85:13: +85:18\n+          let mut _67: &mut usize;         // in scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+          scope 34 {\n+-             debug b => _67;              // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n++             debug b => &_66;             // in scope 34 at $DIR/reference_prop.rs:+86:13: +86:18\n+              let _68: &mut &mut usize;    // in scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+              scope 35 {\n+-                 debug d => _68;          // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n++                 debug d => &&_66;        // in scope 35 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  let _69: usize;          // in scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  scope 36 {\n+                      debug c => _69;      // in scope 36 at $DIR/reference_prop.rs:+88:13: +88:14\n+                  }\n+              }\n           }\n       }\n   \n       bb0: {\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 0 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 0 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n+-         StorageLive(_5);                 // scope 1 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &mut _4;                    // scope 1 at $DIR/reference_prop.rs:+4:17: +4:23\n           StorageLive(_6);                 // scope 2 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 2 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -159,7 +203,7 @@\n           _8 = ();                         // scope 3 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 3 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:91:9: 91:15\n+                                           // + span: $DIR/reference_prop.rs:109:9: 109:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -168,7 +212,7 @@\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -193,7 +237,7 @@\n           _17 = ();                        // scope 7 at $DIR/reference_prop.rs:+17:16: +17:18\n           _16 = opaque::<()>(move _17) -> bb2; // scope 7 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:102:9: 102:15\n+                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -215,18 +259,18 @@\n           _21 = &_20;                      // scope 9 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_22);                // scope 10 at $DIR/reference_prop.rs:+25:13: +25:14\n           _22 = (*_20);                    // scope 10 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _24 = ();                        // scope 11 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = opaque::<()>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_23);                // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_24);                // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _24 = _21;                       // scope 11 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = opaque::<&&mut usize>(move _24) -> bb3; // scope 11 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:111:9: 111:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:129:9: 129:15\n+                                           // + literal: Const { ty: fn(&&mut usize) {opaque::<&&mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_24);                // scope 11 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_23);                // scope 11 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _18 = const ();                  // scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_22);                // scope 10 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_21);                // scope 9 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -239,21 +283,21 @@\n           StorageLive(_27);                // scope 12 at $DIR/reference_prop.rs:+32:13: +32:18\n           _27 = &mut _26;                  // scope 12 at $DIR/reference_prop.rs:+32:21: +32:27\n           StorageLive(_28);                // scope 13 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _28 = &mut _27;                  // scope 13 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _28 = &raw mut _27;              // scope 13 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_29);                // scope 14 at $DIR/reference_prop.rs:+34:13: +34:14\n           _29 = (*_27);                    // scope 14 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _31 = ();                        // scope 15 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = opaque::<()>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_30);                // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_31);                // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _31 = _28;                       // scope 15 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = opaque::<*mut &mut usize>(move _31) -> bb4; // scope 15 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:120:9: 120:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:138:9: 138:15\n+                                           // + literal: Const { ty: fn(*mut &mut usize) {opaque::<*mut &mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_31);                // scope 15 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_30);                // scope 15 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _25 = const ();                  // scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_29);                // scope 14 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_28);                // scope 13 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -272,7 +316,7 @@\n           _37 = move _34;                  // scope 18 at $DIR/reference_prop.rs:+43:16: +43:17\n           _36 = opaque::<&mut usize>(move _37) -> bb5; // scope 18 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:128:9: 128:15\n+                                           // + span: $DIR/reference_prop.rs:146:9: 146:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -302,7 +346,7 @@\n           _46 = move _44;                  // scope 24 at $DIR/reference_prop.rs:+56:16: +56:18\n           _45 = opaque::<&mut usize>(move _46) -> bb6; // scope 24 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:141:9: 141:15\n+                                           // + span: $DIR/reference_prop.rs:159:9: 159:15\n                                            // + literal: Const { ty: fn(&mut usize) {opaque::<&mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -318,8 +362,8 @@\n           StorageDead(_39);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_38);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_47);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n+-         StorageLive(_48);                // scope 0 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _48 = &mut (*_1);                // scope 0 at $DIR/reference_prop.rs:+61:17: +61:29\n           StorageLive(_49);                // scope 25 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _49 = (*_48);                    // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _49 = (*_1);                     // scope 25 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -328,7 +372,7 @@\n           _51 = ();                        // scope 26 at $DIR/reference_prop.rs:+63:16: +63:18\n           _50 = opaque::<()>(move _51) -> bb7; // scope 26 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:148:9: 148:15\n+                                           // + span: $DIR/reference_prop.rs:166:9: 166:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -337,36 +381,92 @@\n           StorageDead(_50);                // scope 26 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _47 = const ();                  // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_49);                // scope 25 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_48);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_47);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _52 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n-          StorageLive(_53);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n--         _53 = &mut (*_54);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-+         _53 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n-          _2 = move _53;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n-          StorageDead(_53);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n--         StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n-          StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _55 = (*_52);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_56);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _57 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _56 = opaque::<()>(move _57) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_52);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_53);                // scope 0 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _53 = &mut (*_2);                // scope 0 at $DIR/reference_prop.rs:+68:17: +68:31\n+          StorageLive(_54);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         StorageLive(_55);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _55 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+-         _54 = &mut (*_55);               // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n++         _54 = &mut (*_1);                // scope 27 at $DIR/reference_prop.rs:+69:20: +69:32\n+          _2 = move _54;                   // scope 27 at $DIR/reference_prop.rs:+69:9: +69:32\n+          StorageDead(_54);                // scope 27 at $DIR/reference_prop.rs:+69:31: +69:32\n+-         StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+69:32: +69:33\n+          StorageLive(_56);                // scope 27 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _56 = (*_53);                    // scope 27 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_57);                // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_58);                // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _58 = ();                        // scope 28 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _57 = opaque::<()>(move _58) -> bb8; // scope 28 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:156:9: 156:15\n+                                           // + span: $DIR/reference_prop.rs:174:9: 174:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_56);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_55);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_58);                // scope 28 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_57);                // scope 28 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _52 = const ();                  // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_56);                // scope 27 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_53);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_52);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_59);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_60);                // scope 0 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _60 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_61);                // scope 29 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _61 = &mut _60;                  // scope 29 at $DIR/reference_prop.rs:+77:17: +77:23\n+-         StorageLive(_62);                // scope 30 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _62 = &_61;                      // scope 30 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_63);                // scope 31 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _63 = (*_61);                    // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _63 = _60;                       // scope 31 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_64);                // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_65);                // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _65 = ();                        // scope 32 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _64 = opaque::<()>(move _65) -> bb9; // scope 32 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:183:9: 183:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_65);                // scope 32 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_64);                // scope 32 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _59 = const ();                  // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_63);                // scope 31 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_62);                // scope 30 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_61);                // scope 29 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_60);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_66);                // scope 0 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _66 = const 5_usize;             // scope 0 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_67);                // scope 33 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _67 = &mut _66;                  // scope 33 at $DIR/reference_prop.rs:+86:21: +86:27\n+-         StorageLive(_68);                // scope 34 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _68 = &mut _67;                  // scope 34 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_69);                // scope 35 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _69 = (*_67);                    // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _69 = _66;                       // scope 35 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_70);                // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_71);                // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _71 = ();                        // scope 36 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _70 = opaque::<()>(move _71) -> bb10; // scope 36 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:192:9: 192:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_71);                // scope 36 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_70);                // scope 36 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_69);                // scope 35 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_68);                // scope 34 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_67);                // scope 33 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_66);                // scope 0 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "c93aa52be111ab311351c3e12a29bec37f8a364e", "filename": "tests/mir-opt/reference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "status": "modified", "additions": 165, "deletions": 61, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.reference_propagation_mut_ptr.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -13,11 +13,11 @@\n       let _15: ();                         // in scope 0 at $DIR/reference_prop.rs:+17:9: +17:19\n       let mut _16: ();                     // in scope 0 at $DIR/reference_prop.rs:+17:16: +17:18\n       let _17: ();                         // in scope 0 at $DIR/reference_prop.rs:+21:5: +27:6\n-      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:19\n-      let mut _23: ();                     // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:18\n+      let _22: ();                         // in scope 0 at $DIR/reference_prop.rs:+26:9: +26:18\n+      let mut _23: &*mut usize;            // in scope 0 at $DIR/reference_prop.rs:+26:16: +26:17\n       let _24: ();                         // in scope 0 at $DIR/reference_prop.rs:+30:5: +36:6\n-      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:19\n-      let mut _30: ();                     // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:18\n+      let _29: ();                         // in scope 0 at $DIR/reference_prop.rs:+35:9: +35:18\n+      let mut _30: *mut *mut usize;        // in scope 0 at $DIR/reference_prop.rs:+35:16: +35:17\n       let _31: ();                         // in scope 0 at $DIR/reference_prop.rs:+39:5: +44:6\n       let _35: ();                         // in scope 0 at $DIR/reference_prop.rs:+43:9: +43:18\n       let mut _36: *mut usize;             // in scope 0 at $DIR/reference_prop.rs:+43:16: +43:17\n@@ -27,16 +27,23 @@\n       let _46: ();                         // in scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n       let _49: ();                         // in scope 0 at $DIR/reference_prop.rs:+63:9: +63:19\n       let mut _50: ();                     // in scope 0 at $DIR/reference_prop.rs:+63:16: +63:18\n-      let mut _52: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n-      let _54: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n-      let mut _55: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _51: ();                         // in scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+      let mut _53: *mut T;                 // in scope 0 at $DIR/reference_prop.rs:+69:20: +69:36\n+      let _55: ();                         // in scope 0 at $DIR/reference_prop.rs:+71:9: +71:19\n+      let mut _56: ();                     // in scope 0 at $DIR/reference_prop.rs:+71:16: +71:18\n+      let _57: ();                         // in scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+      let _62: ();                         // in scope 0 at $DIR/reference_prop.rs:+80:9: +80:19\n+      let mut _63: ();                     // in scope 0 at $DIR/reference_prop.rs:+80:16: +80:18\n+      let _68: ();                         // in scope 0 at $DIR/reference_prop.rs:+89:9: +89:19\n+      let mut _69: ();                     // in scope 0 at $DIR/reference_prop.rs:+89:16: +89:18\n       scope 1 {\n           let mut _4: usize;               // in scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           scope 2 {\n               debug a => _4;               // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:18\n               let _5: *mut usize;          // in scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n               scope 3 {\n-                  debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n+-                 debug b => _5;           // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n++                 debug b => &_4;          // in scope 3 at $DIR/reference_prop.rs:+4:13: +4:14\n                   let _6: usize;           // in scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n                   scope 4 {\n                       debug c => _6;       // in scope 4 at $DIR/reference_prop.rs:+5:13: +5:14\n@@ -87,7 +94,7 @@\n               let mut _26: *mut usize;     // in scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n               scope 17 {\n                   debug b => _26;          // in scope 17 at $DIR/reference_prop.rs:+32:13: +32:18\n-                  let _27: &mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n+                  let _27: *mut *mut usize; // in scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n                   scope 18 {\n                       debug d => _27;      // in scope 18 at $DIR/reference_prop.rs:+33:13: +33:14\n                       let _28: usize;      // in scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n@@ -141,20 +148,61 @@\n       scope 31 {\n           let _47: *mut T;                 // in scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n           scope 32 {\n-              debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n+-             debug a => _47;              // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n++             debug a => _1;               // in scope 32 at $DIR/reference_prop.rs:+61:13: +61:14\n               let _48: T;                  // in scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n               scope 33 {\n                   debug b => _48;          // in scope 33 at $DIR/reference_prop.rs:+62:13: +62:14\n               }\n           }\n       }\n       scope 34 {\n-          let _51: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          let _52: *mut T;                 // in scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n           scope 35 {\n-              debug a => _51;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n-              let _53: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+              debug a => _52;              // in scope 35 at $DIR/reference_prop.rs:+68:13: +68:14\n+              let _54: T;                  // in scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n               scope 36 {\n-                  debug b => _53;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+                  debug b => _54;          // in scope 36 at $DIR/reference_prop.rs:+70:13: +70:14\n+              }\n+          }\n+      }\n+      scope 37 {\n+          let mut _58: usize;              // in scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          scope 38 {\n+              debug a => _58;              // in scope 38 at $DIR/reference_prop.rs:+76:13: +76:18\n+              let _59: *mut usize;         // in scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+              scope 39 {\n+-                 debug b => _59;          // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n++                 debug b => &_58;         // in scope 39 at $DIR/reference_prop.rs:+77:13: +77:14\n+                  let _60: &*mut usize;    // in scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+                  scope 40 {\n+-                     debug d => _60;      // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n++                     debug d => &&_58;    // in scope 40 at $DIR/reference_prop.rs:+78:13: +78:14\n+                      let _61: usize;      // in scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      scope 41 {\n+                          debug c => _61;  // in scope 41 at $DIR/reference_prop.rs:+79:13: +79:14\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+      scope 42 {\n+          let mut _64: usize;              // in scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          scope 43 {\n+              debug a => _64;              // in scope 43 at $DIR/reference_prop.rs:+85:13: +85:18\n+              let mut _65: *mut usize;     // in scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+              scope 44 {\n+-                 debug b => _65;          // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n++                 debug b => &_64;         // in scope 44 at $DIR/reference_prop.rs:+86:13: +86:18\n+                  let _66: &mut *mut usize; // in scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+                  scope 45 {\n+-                     debug d => _66;      // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n++                     debug d => &&_64;    // in scope 45 at $DIR/reference_prop.rs:+87:13: +87:14\n+                      let _67: usize;      // in scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      scope 46 {\n+                          debug c => _67;  // in scope 46 at $DIR/reference_prop.rs:+88:13: +88:14\n+                      }\n+                  }\n               }\n           }\n       }\n@@ -163,8 +211,8 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageLive(_4);                 // scope 1 at $DIR/reference_prop.rs:+3:13: +3:18\n           _4 = const 5_usize;              // scope 1 at $DIR/reference_prop.rs:+3:21: +3:28\n-          StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n-          _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+4:13: +4:14\n+-         _5 = &raw mut _4;                // scope 2 at $DIR/reference_prop.rs:+4:17: +4:27\n           StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+5:13: +5:14\n -         _6 = (*_5);                      // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n +         _6 = _4;                         // scope 3 at $DIR/reference_prop.rs:+5:17: +5:19\n@@ -173,7 +221,7 @@\n           _8 = ();                         // scope 4 at $DIR/reference_prop.rs:+6:16: +6:18\n           _7 = opaque::<()>(move _8) -> bb1; // scope 4 at $DIR/reference_prop.rs:+6:9: +6:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:250:9: 250:15\n+                                           // + span: $DIR/reference_prop.rs:304:9: 304:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -182,7 +230,7 @@\n           StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:19: +6:20\n -         _3 = const ();                   // scope 1 at $DIR/reference_prop.rs:+2:5: +7:6\n           StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+7:5: +7:6\n-          StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_4);                 // scope 1 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageDead(_3);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n -         StorageLive(_9);                 // scope 0 at $DIR/reference_prop.rs:+10:5: +18:6\n@@ -203,7 +251,7 @@\n           _16 = ();                        // scope 9 at $DIR/reference_prop.rs:+17:16: +17:18\n           _15 = opaque::<()>(move _16) -> bb2; // scope 9 at $DIR/reference_prop.rs:+17:9: +17:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:261:9: 261:15\n+                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -225,18 +273,18 @@\n           _20 = &_19;                      // scope 12 at $DIR/reference_prop.rs:+24:17: +24:19\n           StorageLive(_21);                // scope 13 at $DIR/reference_prop.rs:+25:13: +25:14\n           _21 = (*_19);                    // scope 13 at $DIR/reference_prop.rs:+25:17: +25:19\n-          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n-          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _23 = ();                        // scope 14 at $DIR/reference_prop.rs:+26:16: +26:18\n-          _22 = opaque::<()>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:19\n+          StorageLive(_22);                // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n+          StorageLive(_23);                // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _23 = _20;                       // scope 14 at $DIR/reference_prop.rs:+26:16: +26:17\n+          _22 = opaque::<&*mut usize>(move _23) -> bb3; // scope 14 at $DIR/reference_prop.rs:+26:9: +26:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:270:9: 270:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:324:9: 324:15\n+                                           // + literal: Const { ty: fn(&*mut usize) {opaque::<&*mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n-          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:19: +26:20\n+          StorageDead(_23);                // scope 14 at $DIR/reference_prop.rs:+26:17: +26:18\n+          StorageDead(_22);                // scope 14 at $DIR/reference_prop.rs:+26:18: +26:19\n -         _17 = const ();                  // scope 10 at $DIR/reference_prop.rs:+21:5: +27:6\n           StorageDead(_21);                // scope 13 at $DIR/reference_prop.rs:+27:5: +27:6\n           StorageDead(_20);                // scope 12 at $DIR/reference_prop.rs:+27:5: +27:6\n@@ -249,21 +297,21 @@\n           StorageLive(_26);                // scope 16 at $DIR/reference_prop.rs:+32:13: +32:18\n           _26 = &raw mut _25;              // scope 16 at $DIR/reference_prop.rs:+32:21: +32:31\n           StorageLive(_27);                // scope 17 at $DIR/reference_prop.rs:+33:13: +33:14\n-          _27 = &mut _26;                  // scope 17 at $DIR/reference_prop.rs:+33:17: +33:23\n+          _27 = &raw mut _26;              // scope 17 at $DIR/reference_prop.rs:+33:17: +33:27\n           StorageLive(_28);                // scope 18 at $DIR/reference_prop.rs:+34:13: +34:14\n           _28 = (*_26);                    // scope 18 at $DIR/reference_prop.rs:+34:17: +34:19\n-          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n-          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _30 = ();                        // scope 19 at $DIR/reference_prop.rs:+35:16: +35:18\n-          _29 = opaque::<()>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:19\n+          StorageLive(_29);                // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n+          StorageLive(_30);                // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _30 = _27;                       // scope 19 at $DIR/reference_prop.rs:+35:16: +35:17\n+          _29 = opaque::<*mut *mut usize>(move _30) -> bb4; // scope 19 at $DIR/reference_prop.rs:+35:9: +35:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:279:9: 279:15\n-                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+                                           // + span: $DIR/reference_prop.rs:333:9: 333:15\n+                                           // + literal: Const { ty: fn(*mut *mut usize) {opaque::<*mut *mut usize>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n-          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:19: +35:20\n+          StorageDead(_30);                // scope 19 at $DIR/reference_prop.rs:+35:17: +35:18\n+          StorageDead(_29);                // scope 19 at $DIR/reference_prop.rs:+35:18: +35:19\n -         _24 = const ();                  // scope 15 at $DIR/reference_prop.rs:+30:5: +36:6\n           StorageDead(_28);                // scope 18 at $DIR/reference_prop.rs:+36:5: +36:6\n           StorageDead(_27);                // scope 17 at $DIR/reference_prop.rs:+36:5: +36:6\n@@ -282,7 +330,7 @@\n           _36 = _33;                       // scope 23 at $DIR/reference_prop.rs:+43:16: +43:17\n           _35 = opaque::<*mut usize>(move _36) -> bb5; // scope 23 at $DIR/reference_prop.rs:+43:9: +43:18\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:287:9: 287:15\n+                                           // + span: $DIR/reference_prop.rs:341:9: 341:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -312,7 +360,7 @@\n           _45 = _43;                       // scope 30 at $DIR/reference_prop.rs:+56:16: +56:18\n           _44 = opaque::<*mut usize>(move _45) -> bb6; // scope 30 at $DIR/reference_prop.rs:+56:9: +56:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:300:9: 300:15\n+                                           // + span: $DIR/reference_prop.rs:354:9: 354:15\n                                            // + literal: Const { ty: fn(*mut usize) {opaque::<*mut usize>}, val: Value(<ZST>) }\n       }\n   \n@@ -328,8 +376,8 @@\n           StorageDead(_38);                // scope 24 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageDead(_37);                // scope 0 at $DIR/reference_prop.rs:+57:5: +57:6\n -         StorageLive(_46);                // scope 0 at $DIR/reference_prop.rs:+60:5: +64:6\n-          StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n-          _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n+-         StorageLive(_47);                // scope 31 at $DIR/reference_prop.rs:+61:13: +61:14\n+-         _47 = &raw mut (*_1);            // scope 31 at $DIR/reference_prop.rs:+61:17: +61:33\n           StorageLive(_48);                // scope 32 at $DIR/reference_prop.rs:+62:13: +62:14\n -         _48 = (*_47);                    // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n +         _48 = (*_1);                     // scope 32 at $DIR/reference_prop.rs:+62:17: +62:19\n@@ -338,7 +386,7 @@\n           _50 = ();                        // scope 33 at $DIR/reference_prop.rs:+63:16: +63:18\n           _49 = opaque::<()>(move _50) -> bb7; // scope 33 at $DIR/reference_prop.rs:+63:9: +63:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:307:9: 307:15\n+                                           // + span: $DIR/reference_prop.rs:361:9: 361:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n@@ -347,32 +395,88 @@\n           StorageDead(_49);                // scope 33 at $DIR/reference_prop.rs:+63:19: +63:20\n -         _46 = const ();                  // scope 31 at $DIR/reference_prop.rs:+60:5: +64:6\n           StorageDead(_48);                // scope 32 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n+-         StorageDead(_47);                // scope 31 at $DIR/reference_prop.rs:+64:5: +64:6\n -         StorageDead(_46);                // scope 0 at $DIR/reference_prop.rs:+64:5: +64:6\n-          StorageLive(_51);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n-          _51 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n-          StorageLive(_52);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _52 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n-          _2 = move _52;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n-          StorageDead(_52);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n-          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n-          _53 = (*_51);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n-          StorageLive(_54);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n-          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _55 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n-          _54 = opaque::<()>(move _55) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+-         StorageLive(_51);                // scope 0 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageLive(_52);                // scope 34 at $DIR/reference_prop.rs:+68:13: +68:14\n+          _52 = &raw mut (*_2);            // scope 34 at $DIR/reference_prop.rs:+68:17: +68:35\n+          StorageLive(_53);                // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _53 = &raw mut (*_1);            // scope 35 at $DIR/reference_prop.rs:+69:20: +69:36\n+          _2 = move _53;                   // scope 35 at $DIR/reference_prop.rs:+69:9: +69:36\n+          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+69:35: +69:36\n+          StorageLive(_54);                // scope 35 at $DIR/reference_prop.rs:+70:13: +70:14\n+          _54 = (*_52);                    // scope 35 at $DIR/reference_prop.rs:+70:17: +70:19\n+          StorageLive(_55);                // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n+          StorageLive(_56);                // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _56 = ();                        // scope 36 at $DIR/reference_prop.rs:+71:16: +71:18\n+          _55 = opaque::<()>(move _56) -> bb8; // scope 36 at $DIR/reference_prop.rs:+71:9: +71:19\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:315:9: 315:15\n+                                           // + span: $DIR/reference_prop.rs:369:9: 369:15\n                                            // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n       }\n   \n       bb8: {\n-          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n-          StorageDead(_54);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n-          _0 = const ();                   // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n-          StorageDead(_53);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n-          StorageDead(_51);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+73:2: +73:2\n+          StorageDead(_56);                // scope 36 at $DIR/reference_prop.rs:+71:18: +71:19\n+          StorageDead(_55);                // scope 36 at $DIR/reference_prop.rs:+71:19: +71:20\n+-         _51 = const ();                  // scope 34 at $DIR/reference_prop.rs:+67:5: +72:6\n+          StorageDead(_54);                // scope 35 at $DIR/reference_prop.rs:+72:5: +72:6\n+          StorageDead(_52);                // scope 34 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageDead(_51);                // scope 0 at $DIR/reference_prop.rs:+72:5: +72:6\n+-         StorageLive(_57);                // scope 0 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageLive(_58);                // scope 37 at $DIR/reference_prop.rs:+76:13: +76:18\n+          _58 = const 5_usize;             // scope 37 at $DIR/reference_prop.rs:+76:21: +76:28\n+-         StorageLive(_59);                // scope 38 at $DIR/reference_prop.rs:+77:13: +77:14\n+-         _59 = &raw mut _58;              // scope 38 at $DIR/reference_prop.rs:+77:17: +77:27\n+-         StorageLive(_60);                // scope 39 at $DIR/reference_prop.rs:+78:13: +78:14\n+-         _60 = &_59;                      // scope 39 at $DIR/reference_prop.rs:+78:17: +78:19\n+          StorageLive(_61);                // scope 40 at $DIR/reference_prop.rs:+79:13: +79:14\n+-         _61 = (*_59);                    // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n++         _61 = _58;                       // scope 40 at $DIR/reference_prop.rs:+79:17: +79:19\n+          StorageLive(_62);                // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+          StorageLive(_63);                // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _63 = ();                        // scope 41 at $DIR/reference_prop.rs:+80:16: +80:18\n+          _62 = opaque::<()>(move _63) -> bb9; // scope 41 at $DIR/reference_prop.rs:+80:9: +80:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:378:9: 378:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_63);                // scope 41 at $DIR/reference_prop.rs:+80:18: +80:19\n+          StorageDead(_62);                // scope 41 at $DIR/reference_prop.rs:+80:19: +80:20\n+-         _57 = const ();                  // scope 37 at $DIR/reference_prop.rs:+75:5: +81:6\n+          StorageDead(_61);                // scope 40 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_60);                // scope 39 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_59);                // scope 38 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageDead(_58);                // scope 37 at $DIR/reference_prop.rs:+81:5: +81:6\n+-         StorageDead(_57);                // scope 0 at $DIR/reference_prop.rs:+81:5: +81:6\n+          StorageLive(_64);                // scope 42 at $DIR/reference_prop.rs:+85:13: +85:18\n+          _64 = const 5_usize;             // scope 42 at $DIR/reference_prop.rs:+85:21: +85:28\n+-         StorageLive(_65);                // scope 43 at $DIR/reference_prop.rs:+86:13: +86:18\n+-         _65 = &raw mut _64;              // scope 43 at $DIR/reference_prop.rs:+86:21: +86:31\n+-         StorageLive(_66);                // scope 44 at $DIR/reference_prop.rs:+87:13: +87:14\n+-         _66 = &mut _65;                  // scope 44 at $DIR/reference_prop.rs:+87:17: +87:23\n+          StorageLive(_67);                // scope 45 at $DIR/reference_prop.rs:+88:13: +88:14\n+-         _67 = (*_65);                    // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n++         _67 = _64;                       // scope 45 at $DIR/reference_prop.rs:+88:17: +88:19\n+          StorageLive(_68);                // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+          StorageLive(_69);                // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _69 = ();                        // scope 46 at $DIR/reference_prop.rs:+89:16: +89:18\n+          _68 = opaque::<()>(move _69) -> bb10; // scope 46 at $DIR/reference_prop.rs:+89:9: +89:19\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:387:9: 387:15\n+                                           // + literal: Const { ty: fn(()) {opaque::<()>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb10: {\n+          StorageDead(_69);                // scope 46 at $DIR/reference_prop.rs:+89:18: +89:19\n+          StorageDead(_68);                // scope 46 at $DIR/reference_prop.rs:+89:19: +89:20\n+          _0 = const ();                   // scope 42 at $DIR/reference_prop.rs:+84:5: +90:6\n+          StorageDead(_67);                // scope 45 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_66);                // scope 44 at $DIR/reference_prop.rs:+90:5: +90:6\n+-         StorageDead(_65);                // scope 43 at $DIR/reference_prop.rs:+90:5: +90:6\n+          StorageDead(_64);                // scope 42 at $DIR/reference_prop.rs:+90:5: +90:6\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+91:2: +91:2\n       }\n   }\n   "}, {"sha": "4083b45470b4f3bbe2fadf759dd285aa1aabccff", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 121, "deletions": 12, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -33,16 +33,16 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = &a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but do not propagate it\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let a = 5_usize;\n         let mut b = &a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -80,6 +80,24 @@ fn reference_propagation<'a, T: Copy>(single: &'a T, mut multiple: &'a T) {\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let b = &a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let a = 5_usize;\n+        let mut b = &a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a mut T) {\n@@ -108,16 +126,16 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = &mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     {\n         let mut a = 5_usize;\n         let mut b = &mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -155,6 +173,24 @@ fn reference_propagation_mut<'a, T: Copy>(single: &'a mut T, mut multiple: &'a m\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let b = &mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    {\n+        let mut a = 5_usize;\n+        let mut b = &mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *const T) {\n@@ -183,16 +219,16 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let b = &raw const a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let a = 5_usize;\n         let mut b = &raw const a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -239,6 +275,24 @@ fn reference_propagation_const_ptr<T: Copy>(single: *const T, mut multiple: *con\n         let e = *c;\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let b = &raw const a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let a = 5_usize;\n+        let mut b = &raw const a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T) {\n@@ -267,16 +321,16 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = &raw mut a;\n         let d = &b;\n         let c = *b; // `b` is immutably borrowed, we know its value, but cannot be removed.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through a borrowed reference.\n     unsafe {\n         let mut a = 5_usize;\n         let mut b = &raw mut a;\n-        let d = &mut b;\n+        let d = &raw mut b;\n         let c = *b; // `b` is mutably borrowed, we cannot know its value.\n-        opaque(());\n+        opaque(d); // prevent `d` from being removed.\n     }\n \n     // Propagation through an escaping borrow.\n@@ -314,6 +368,24 @@ fn reference_propagation_mut_ptr<T: Copy>(single: *mut T, mut multiple: *mut T)\n         let b = *a; // This should not be optimized.\n         opaque(());\n     }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let b = &raw mut a;\n+        let d = &b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n+\n+    // Fixed-point propagation through a borrowed reference.\n+    unsafe {\n+        let mut a = 5_usize;\n+        let mut b = &raw mut a;\n+        let d = &mut b; // first round promotes debuginfo for `d`\n+        let c = *b; // second round propagates this dereference\n+        opaque(());\n+    }\n }\n \n #[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n@@ -456,6 +528,40 @@ fn unique_with_copies() {\n     unsafe { opaque(*y) };\n }\n \n+fn debuginfo() {\n+    struct T(u8);\n+\n+    let ref_mut_u8 = &mut 5_u8;\n+    let field = &T(0).0;\n+\n+    // Verify that we don't emit `&*` in debuginfo.\n+    let reborrow = &*ref_mut_u8;\n+\n+    match Some(0) {\n+        None => {}\n+        Some(ref variant_field) => {}\n+    }\n+\n+    // `constant_index_from_end` and `subslice` should not be promoted, as their value depends\n+    // on the slice length.\n+    if let [_, ref constant_index, subslice @ .., ref constant_index_from_end] = &[6; 10][..] {\n+    }\n+\n+    let multiple_borrow = &&&mut T(6).0;\n+}\n+\n+fn many_debuginfo() {\n+    let a = 0;\n+\n+    // Verify that we do not ICE on deeply nested borrows.\n+    let many_borrow =\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\n+        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&a;\n+}\n+\n fn main() {\n     let mut x = 5_usize;\n     let mut y = 7_usize;\n@@ -469,6 +575,8 @@ fn main() {\n     maybe_dead(true);\n     mut_raw_then_mut_shr();\n     unique_with_copies();\n+    debuginfo();\n+    many_debuginfo();\n }\n \n // EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n@@ -481,3 +589,4 @@ fn main() {\n // EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff\n // EMIT_MIR reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff\n // EMIT_MIR reference_prop.unique_with_copies.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.debuginfo.ReferencePropagation.diff"}, {"sha": "b754aff47550d9c6544f32d9896d13e087370749", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -10,7 +10,8 @@\n       let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:14: +9:24\n       let mut _7: i32;                     // in scope 0 at $DIR/reference_prop.rs:+9:21: +9:23\n       scope 1 {\n-          debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n++         debug y => _3;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n           scope 5 {\n           }\n       }\n@@ -25,7 +26,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+-         StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n           _2 = const 0_i32;                // scope 0 at $DIR/reference_prop.rs:+2:21: +2:22\n -         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n@@ -35,14 +36,14 @@\n           _5 = (*_3);                      // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n           _4 = opaque::<i32>(move _5) -> bb1; // scope 4 at $DIR/reference_prop.rs:+5:18: +5:28\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:452:18: 452:24\n+                                           // + span: $DIR/reference_prop.rs:524:18: 524:24\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n           StorageDead(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:27: +5:28\n           StorageDead(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:30: +5:31\n-          _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n -         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n           StorageLive(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:5: +9:26\n@@ -51,15 +52,15 @@\n +         _7 = (*_3);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n           _6 = opaque::<i32>(move _7) -> bb2; // scope 5 at $DIR/reference_prop.rs:+9:14: +9:24\n                                            // mir::Constant\n-                                           // + span: $DIR/reference_prop.rs:456:14: 456:20\n+                                           // + span: $DIR/reference_prop.rs:528:14: 528:20\n                                            // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n       }\n   \n       bb2: {\n           StorageDead(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:23: +9:24\n           StorageDead(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:26: +9:27\n           _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:25: +10:2\n-          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n           return;                          // scope 0 at $DIR/reference_prop.rs:+10:2: +10:2\n       }\n   }"}, {"sha": "afdcf57815f387dd20e15a3c3cc05bdfd645ba13", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 93, "deletions": 197, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -3,136 +3,79 @@\n   \n   fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:8:25: 8:39], _2: &&(usize, usize, usize, usize)) -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:40: +0:40\n-      let _3: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-      let _4: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-      let _5: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-      let _6: &usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-      let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n-      let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _3: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n+      let mut _4: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n+      let mut _5: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _6: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _10: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _11: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _12: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n--         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n--         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n--         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n--         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         debug a => _20;                  // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         debug b => _15;                  // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         debug c => _11;                  // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         debug d => _24;                  // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+          debug a => &((*_9).0: usize);    // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+          debug b => &((*_10).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+          debug c => &((*_11).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+          debug d => &((*_12).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_9).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_11).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _31: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _32: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_9).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_11).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _13: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _14: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _33: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _34: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_11).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_9).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _33;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _34;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _35: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _36: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_11).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_9).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _15: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _16: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_12).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_10).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _37;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _38;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_12).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_10).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _17: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _18: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _42: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => &&((*_10).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => &&((*_12).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _44: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => &((*_10).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => &((*_12).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _19: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _20: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         _20 = &((*_25).0: usize);        // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         _15 = &((*_26).1: usize);        // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-+         _11 = &((*_27).2: usize);        // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n--         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-+         _24 = &((*_28).3: usize);        // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _10 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _11 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _12 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         StorageLive(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-          StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         _29 = deref_copy _20;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+          StorageLive(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _13 = ((*_9).0: usize);          // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _14 = ((*_11).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _4 = Le(move _13, move _14);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb1: {\n@@ -141,127 +84,80 @@\n       }\n   \n       bb2: {\n--         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _33 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         _33 = deref_copy _11;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _15 = ((*_11).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _16 = ((*_9).0: usize);          // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _7 = Le(move _15, move _16);     // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_16);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          switchInt(move _7) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n       bb4: {\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _37 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         _37 = deref_copy _24;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = ((*_12).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _18 = ((*_10).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _5 = Le(move _17, move _18);     // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _3 = move _5;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_5);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_4);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _5) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _6 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _41 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         _41 = deref_copy _15;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _42 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _44 = (*_42);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _21 = Le(move _43, move _44);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _19 = ((*_10).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _20 = ((*_12).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _8 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _19, move _20);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_19);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _6 = move _8;                    // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _6;                    // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "2534eeef43297c1278ecb8113c8b5775a8ce6d95", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.ReferencePropagation.diff", "status": "modified", "additions": 104, "deletions": 84, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.ReferencePropagation.diff?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -38,95 +38,115 @@\n       let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       scope 1 {\n-          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n-          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n-          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n-          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n++         debug a => &((*_25).0: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n++         debug b => &((*_26).1: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n++         debug c => &((*_27).2: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:33: +0:34\n++         debug d => &((*_28).3: usize);   // in scope 1 at $DIR/slice_filter.rs:+0:36: +0:37\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n-              debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_25).0: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_27).2: usize); // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_25).0: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_27).2: usize); // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_27).2: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_25).0: usize); // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_27).2: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_25).0: usize); // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_28).3: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_26).1: usize); // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_28).3: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_26).1: usize); // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-             debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug self => &&((*_26).1: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++             debug other => &&((*_28).3: usize); // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => &((*_26).1: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => &((*_28).3: usize); // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n-          StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n-          StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n+-         StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _29 = deref_copy _3;             // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _30 = deref_copy _11;            // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = ((*_25).0: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = ((*_27).2: usize);         // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+-         StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n@@ -138,36 +158,36 @@\n       bb2: {\n           StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+-         StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _35 = deref_copy _5;             // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _36 = deref_copy _20;            // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = ((*_27).2: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = ((*_25).0: usize);         // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+-         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n           StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n@@ -180,26 +200,26 @@\n   \n       bb5: {\n           StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+-         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _41 = deref_copy _6;             // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _42 = deref_copy _15;            // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = ((*_28).3: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = ((*_26).1: usize);         // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n@@ -213,26 +233,26 @@\n   \n       bb7: {\n           StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+-         StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _47 = deref_copy _4;             // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _48 = deref_copy _24;            // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = ((*_26).1: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = ((*_28).3: usize);         // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }"}, {"sha": "4b2a16b50b4653be19af485addd86e6e6b04a9f2", "filename": "tests/mir-opt/uninhabited_enum.process_void.SimplifyLocals-final.after.mir", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bc888958c9e1fdde09791f15d3421bdc3b6d7d29/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum.process_void.SimplifyLocals-final.after.mir?ref=bc888958c9e1fdde09791f15d3421bdc3b6d7d29", "patch": "@@ -3,16 +3,13 @@\n fn process_void(_1: *const Void) -> () {\n     debug input => _1;                   // in scope 0 at $DIR/uninhabited_enum.rs:+0:21: +0:26\n     let mut _0: ();                      // return place in scope 0 at $DIR/uninhabited_enum.rs:+0:41: +0:41\n-    let _2: &Void;                       // in scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     scope 1 {\n-        debug _input => _2;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n+        debug _input => _1;              // in scope 1 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n     }\n     scope 2 {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+1:8: +1:14\n-        StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum.rs:+4:1: +4:2\n         return;                          // scope 0 at $DIR/uninhabited_enum.rs:+4:2: +4:2\n     }\n }"}]}