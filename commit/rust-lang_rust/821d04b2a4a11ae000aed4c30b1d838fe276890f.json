{"sha": "821d04b2a4a11ae000aed4c30b1d838fe276890f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMWQwNGIyYTRhMTFhZTAwMGFlZDRjMzBiMWQ4MzhmZTI3Njg5MGY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-08T08:46:43Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-08T08:46:43Z"}, "message": "Do not report errors on skipped items or statements", "tree": {"sha": "1538b4e30085fb4257266e3c6d5a7c9213cbc69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1538b4e30085fb4257266e3c6d5a7c9213cbc69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/821d04b2a4a11ae000aed4c30b1d838fe276890f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/821d04b2a4a11ae000aed4c30b1d838fe276890f", "html_url": "https://github.com/rust-lang/rust/commit/821d04b2a4a11ae000aed4c30b1d838fe276890f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/821d04b2a4a11ae000aed4c30b1d838fe276890f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "html_url": "https://github.com/rust-lang/rust/commit/5e6bb3edb0a627dd2104a5314232a15ad342b7d5"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "229e25bb65b7392cc0cdc57495e724e7ca6a9ea6", "filename": "src/lib.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=821d04b2a4a11ae000aed4c30b1d838fe276890f", "patch": "@@ -300,7 +300,7 @@ fn format_ast<F>(\n     mut after_file: F,\n ) -> Result<(FileMap, bool), io::Error>\n where\n-    F: FnMut(&str, &mut StringBuffer) -> Result<bool, io::Error>,\n+    F: FnMut(&str, &mut StringBuffer, &[(usize, usize)]) -> Result<bool, io::Error>,\n {\n     let mut result = FileMap::new();\n     // diff mode: check if any files are differing\n@@ -343,7 +343,7 @@ where\n             ::utils::count_newlines(&format!(\"{}\", visitor.buffer))\n         );\n \n-        has_diff |= match after_file(path_str, &mut visitor.buffer) {\n+        has_diff |= match after_file(path_str, &mut visitor.buffer, &visitor.skipped_range) {\n             Ok(result) => result,\n             Err(e) => {\n                 // Create a new error with path_str to help users see which files failed\n@@ -358,10 +358,24 @@ where\n     Ok((result, has_diff))\n }\n \n+/// Returns true if the line with the given line number was skipped by `#[rustfmt_skip]`.\n+fn is_skipped_line(line_number: usize, skipped_range: &[(usize, usize)]) -> bool {\n+    skipped_range\n+        .iter()\n+        .any(|&(lo, hi)| lo <= line_number && line_number <= hi)\n+}\n+\n // Formatting done on a char by char or line by line basis.\n // FIXME(#209) warn on bad license\n // FIXME(#20) other stuff for parity with make tidy\n-fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &mut FormatReport) {\n+fn format_lines(\n+    text: &mut StringBuffer,\n+    name: &str,\n+    skipped_range: &[(usize, usize)],\n+    config: &Config,\n+    report: &mut FormatReport,\n+) {\n+    println!(\"skipped_range: {:?}\", skipped_range);\n     // Iterate over the chars in the file map.\n     let mut trims = vec![];\n     let mut last_wspace: Option<usize> = None;\n@@ -403,6 +417,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n \n                 // Check for any line width errors we couldn't correct.\n                 let report_error_on_line_overflow = config.error_on_line_overflow()\n+                    && !is_skipped_line(cur_line, skipped_range)\n                     && (config.error_on_line_overflow_comments() || !is_comment);\n                 if report_error_on_line_overflow && line_len > config.max_width() {\n                     errors.push(FormattingError {\n@@ -448,12 +463,14 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n     }\n \n     for &(l, _, _, ref b) in &trims {\n-        errors.push(FormattingError {\n-            line: l,\n-            kind: ErrorKind::TrailingWhitespace,\n-            is_comment: false,\n-            line_buffer: b.clone(),\n-        });\n+        if !is_skipped_line(l, skipped_range) {\n+            errors.push(FormattingError {\n+                line: l,\n+                kind: ErrorKind::TrailingWhitespace,\n+                is_comment: false,\n+                line_buffer: b.clone(),\n+            });\n+        }\n     }\n \n     report.file_error_map.insert(name.to_owned(), errors);\n@@ -546,12 +563,12 @@ pub fn format_input<T: Write>(\n         &mut parse_session,\n         &main_file,\n         config,\n-        |file_name, file| {\n+        |file_name, file, skipped_range| {\n             // For some reason, the codemap does not include terminating\n             // newlines so we must add one on for each file. This is sad.\n             filemap::append_newline(file);\n \n-            format_lines(file, file_name, config, &mut report);\n+            format_lines(file, file_name, skipped_range, config, &mut report);\n \n             if let Some(ref mut out) = out {\n                 return filemap::write_file(file, file_name, out, config);"}, {"sha": "7181512273efc4801e16ee8cf159e255600f8ccb", "filename": "src/spanned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=821d04b2a4a11ae000aed4c30b1d838fe276890f", "patch": "@@ -54,6 +54,8 @@ implement_spanned!(ast::Field);\n implement_spanned!(ast::ForeignItem);\n implement_spanned!(ast::Item);\n implement_spanned!(ast::Local);\n+implement_spanned!(ast::TraitItem);\n+implement_spanned!(ast::ImplItem);\n \n impl Spanned for ast::Stmt {\n     fn span(&self) -> Span {"}, {"sha": "ac5501cae4c08a4dc70ed0970ffefdcda2fd9186", "filename": "src/visitor.rs", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/821d04b2a4a11ae000aed4c30b1d838fe276890f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=821d04b2a4a11ae000aed4c30b1d838fe276890f", "patch": "@@ -82,6 +82,7 @@ pub struct FmtVisitor<'a> {\n     pub is_if_else_block: bool,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n     pub line_number: usize,\n+    pub skipped_range: Vec<(usize, usize)>,\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n@@ -101,13 +102,17 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.visit_item(item);\n             }\n             ast::StmtKind::Local(..) | ast::StmtKind::Expr(..) | ast::StmtKind::Semi(..) => {\n-                let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n-                self.push_rewrite(stmt.span(), rewrite)\n+                if contains_skip(get_attrs_from_stmt(stmt)) {\n+                    self.push_skipped_with_span(stmt.span());\n+                } else {\n+                    let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n+                    self.push_rewrite(stmt.span(), rewrite)\n+                }\n             }\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, _macro_style, ref attrs) = **mac;\n                 if self.visit_attrs(attrs, ast::AttrStyle::Outer) {\n-                    self.push_rewrite(stmt.span(), None);\n+                    self.push_skipped_with_span(stmt.span());\n                 } else {\n                     self.visit_mac(mac, None, MacroPosition::Statement);\n                 }\n@@ -321,7 +326,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     // Module is inline, in this case we treat modules like any\n                     // other item.\n                     if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                        self.push_rewrite(item.span, None);\n+                        self.push_skipped_with_span(item.span());\n                         return;\n                     }\n                 } else if contains_skip(&item.attrs) {\n@@ -349,7 +354,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             _ => {\n                 if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n-                    self.push_rewrite(item.span, None);\n+                    self.push_skipped_with_span(item.span());\n                     return;\n                 }\n             }\n@@ -436,7 +441,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ti.span);\n \n         if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n-            self.push_rewrite(ti.span, None);\n+            self.push_skipped_with_span(ti.span());\n             return;\n         }\n \n@@ -478,7 +483,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, ii.span);\n \n         if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n-            self.push_rewrite(ii.span, None);\n+            self.push_skipped_with_span(ii.span());\n             return;\n         }\n \n@@ -525,8 +530,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.buffer.push_str(s);\n     }\n \n-    pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n-        self.format_missing_with_indent(source!(self, span).lo());\n+    fn push_rewrite_inner(&mut self, span: Span, rewrite: Option<String>) {\n         if let Some(ref s) = rewrite {\n             self.push_str(s);\n         } else {\n@@ -536,6 +540,19 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.last_pos = source!(self, span).hi();\n     }\n \n+    pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n+        self.format_missing_with_indent(source!(self, span).lo());\n+        self.push_rewrite_inner(span, rewrite);\n+    }\n+\n+    pub fn push_skipped_with_span(&mut self, span: Span) {\n+        self.format_missing_with_indent(source!(self, span).lo());\n+        let lo = self.line_number + 1;\n+        self.push_rewrite_inner(span, None);\n+        let hi = self.line_number + 1;\n+        self.skipped_range.push((lo, hi));\n+    }\n+\n     pub fn from_context(ctx: &'a RewriteContext) -> FmtVisitor<'a> {\n         FmtVisitor::from_codemap(ctx.parse_session, ctx.config, ctx.snippet_provider)\n     }\n@@ -555,6 +572,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_if_else_block: false,\n             snippet_provider: snippet_provider,\n             line_number: 0,\n+            skipped_range: vec![],\n         }\n     }\n \n@@ -1058,3 +1076,12 @@ pub fn rewrite_extern_crate(context: &RewriteContext, item: &ast::Item) -> Optio\n         String::from(&*Regex::new(r\"\\s;\").unwrap().replace(no_whitespace, \";\"))\n     })\n }\n+\n+fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n+    match stmt.node {\n+        ast::StmtKind::Local(ref local) => &local.attrs,\n+        ast::StmtKind::Item(ref item) => &item.attrs,\n+        ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => &expr.attrs,\n+        ast::StmtKind::Mac(ref mac) => &mac.2,\n+    }\n+}"}]}