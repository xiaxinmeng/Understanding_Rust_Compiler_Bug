{"sha": "d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZmFkYmMwNGY1YmJkNTIwZTRjZTg2NjVhYzEyODI4OGU5ODQ2YzA=", "commit": {"author": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-26T16:24:34Z"}, "committer": {"name": "Nathaniel Herman", "email": "nherman@college.harvard.edu", "date": "2014-01-30T23:41:57Z"}, "message": "Make mut_last return Option instead of failing on empty vector (and add a test for mut_last)", "tree": {"sha": "006966367d42bf95b22afbd73fabbae5d44a52e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006966367d42bf95b22afbd73fabbae5d44a52e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "html_url": "https://github.com/rust-lang/rust/commit/d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/comments", "author": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanielherman", "id": 5169954, "node_id": "MDQ6VXNlcjUxNjk5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5169954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanielherman", "html_url": "https://github.com/nathanielherman", "followers_url": "https://api.github.com/users/nathanielherman/followers", "following_url": "https://api.github.com/users/nathanielherman/following{/other_user}", "gists_url": "https://api.github.com/users/nathanielherman/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanielherman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanielherman/subscriptions", "organizations_url": "https://api.github.com/users/nathanielherman/orgs", "repos_url": "https://api.github.com/users/nathanielherman/repos", "events_url": "https://api.github.com/users/nathanielherman/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanielherman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339603426e65896a06fcebf63f3d751f242ee820", "url": "https://api.github.com/repos/rust-lang/rust/commits/339603426e65896a06fcebf63f3d751f242ee820", "html_url": "https://github.com/rust-lang/rust/commit/339603426e65896a06fcebf63f3d751f242ee820"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "299cf8f6aeeb4400fd37949703373f204a7c7e21", "filename": "src/librustc/middle/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcleanup.rs?ref=d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "patch": "@@ -662,7 +662,7 @@ impl<'a> CleanupHelperMethods<'a> for FunctionContext<'a> {\n         // Check if a landing pad block exists; if not, create one.\n         {\n             let mut scopes = self.scopes.borrow_mut();\n-            let last_scope = scopes.get().mut_last();\n+            let last_scope = scopes.get().mut_last().unwrap();\n             match last_scope.cached_landing_pad {\n                 Some(llbb) => { return llbb; }\n                 None => {"}, {"sha": "0b9820e12ebc5400d4b42d4de237d6dfc65bf55d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "patch": "@@ -2031,7 +2031,7 @@ pub trait MutableVector<'a, T> {\n     fn mut_iter(self) -> MutItems<'a, T>;\n \n     /// Returns a mutable pointer to the last item in the vector.\n-    fn mut_last(self) -> &'a mut T;\n+    fn mut_last(self) -> Option<&'a mut T>;\n \n     /// Returns a reversed iterator that allows modifying each value\n     fn mut_rev_iter(self) -> RevMutItems<'a, T>;\n@@ -2298,10 +2298,10 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n     }\n \n     #[inline]\n-    fn mut_last(self) -> &'a mut T {\n+    fn mut_last(self) -> Option<&'a mut T> {\n         let len = self.len();\n-        if len == 0 { fail!(\"mut_last: empty vector\") }\n-        &mut self[len - 1]\n+        if len == 0 { return None; }\n+        Some(&mut self[len - 1])\n     }\n \n     #[inline]\n@@ -4305,6 +4305,16 @@ mod tests {\n         let mut y: &mut [int] = [];\n         assert!(y.mut_pop_ref().is_none());\n     }\n+\n+    #[test]\n+    fn test_mut_last() {\n+        let mut x = [1, 2, 3, 4, 5];\n+        let h = x.mut_last();\n+        assert_eq!(*h.unwrap(), 5);\n+\n+        let mut y: &mut [int] = [];\n+        assert!(y.mut_last().is_none());\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "c575e170bef45048120be162aaf5f8531f4a1d4d", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9fadbc04f5bbd520e4ce8665ac128288e9846c0/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=d9fadbc04f5bbd520e4ce8665ac128288e9846c0", "patch": "@@ -62,10 +62,10 @@ impl<T> OptVec<T> {\n         }\n     }\n \n-    pub fn mut_last<'a>(&'a mut self) -> &'a mut T {\n+    pub fn mut_last<'a>(&'a mut self) -> Option<&'a mut T> {\n         match *self {\n             Vec(ref mut v) => v.mut_last(),\n-            Empty => fail!(\"mut_last on empty opt_vec\")\n+            Empty => None\n         }\n     }\n "}]}