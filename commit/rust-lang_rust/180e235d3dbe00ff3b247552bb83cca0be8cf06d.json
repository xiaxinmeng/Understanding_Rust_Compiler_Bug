{"sha": "180e235d3dbe00ff3b247552bb83cca0be8cf06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MGUyMzVkM2RiZTAwZmYzYjI0NzU1MmJiODNjY2EwYmU4Y2YwNmQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-23T22:18:11Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-23T23:23:54Z"}, "message": "fix performance regression from invalid IR\n\nMonomorphize's normalization results in a 2% decrease in non-optimized\ncode size for libstd, so there's a negligible cost to removing it. This\nalso fixes several visit glue bugs because normalize wasn't considering\nthe differences in visit glue between types.\n\nCloses #8720", "tree": {"sha": "e708165d599989ba5183c335ea8455fee8bced46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e708165d599989ba5183c335ea8455fee8bced46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/180e235d3dbe00ff3b247552bb83cca0be8cf06d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/180e235d3dbe00ff3b247552bb83cca0be8cf06d", "html_url": "https://github.com/rust-lang/rust/commit/180e235d3dbe00ff3b247552bb83cca0be8cf06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/180e235d3dbe00ff3b247552bb83cca0be8cf06d/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0f9bd35493def5e23f0f43ddeba54da9d788b4", "html_url": "https://github.com/rust-lang/rust/commit/2c0f9bd35493def5e23f0f43ddeba54da9d788b4"}], "stats": {"total": 71, "additions": 3, "deletions": 68}, "files": [{"sha": "162765350da073507ed047bdfe2f7058105f006c", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 67, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/180e235d3dbe00ff3b247552bb83cca0be8cf06d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180e235d3dbe00ff3b247552bb83cca0be8cf06d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=180e235d3dbe00ff3b247552bb83cca0be8cf06d", "patch": "@@ -26,16 +26,13 @@ use middle::trans::type_of;\n use middle::trans::type_use;\n use middle::trans::intrinsic;\n use middle::ty;\n-use middle::ty::{FnSig};\n use middle::typeck;\n use util::ppaux::{Repr,ty_to_str};\n \n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;\n-use syntax::opt_vec;\n-use syntax::abi::AbiSet;\n \n pub fn monomorphic_fn(ccx: @mut CrateContext,\n                       fn_id: ast::def_id,\n@@ -61,17 +58,10 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     let _icx = push_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n \n-    let do_normalize = |t: &ty::t| {\n-        match normalize_for_monomorphization(ccx.tcx, *t) {\n-          Some(t) => { must_cast = true; t }\n-          None => *t\n-        }\n-    };\n-\n     let psubsts = @param_substs {\n-        tys: real_substs.tps.map(|x| do_normalize(x)),\n+        tys: real_substs.tps.to_owned(),\n         vtables: vtables,\n-        self_ty: real_substs.self_ty.map(|x| do_normalize(x)),\n+        self_ty: real_substs.self_ty.clone(),\n         self_vtables: self_vtables\n     };\n \n@@ -305,61 +295,6 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     (lldecl, must_cast)\n }\n \n-pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n-                                      ty: ty::t) -> Option<ty::t> {\n-    // FIXME[mono] could do this recursively. is that worthwhile? (#2529)\n-    return match ty::get(ty).sty {\n-        ty::ty_box(*) => {\n-            Some(ty::mk_opaque_box(tcx))\n-        }\n-        ty::ty_bare_fn(_) => {\n-            Some(ty::mk_bare_fn(\n-                tcx,\n-                ty::BareFnTy {\n-                    purity: ast::impure_fn,\n-                    abis: AbiSet::Rust(),\n-                    sig: FnSig {bound_lifetime_names: opt_vec::Empty,\n-                                inputs: ~[],\n-                                output: ty::mk_nil()}}))\n-        }\n-        ty::ty_closure(ref fty) => {\n-            Some(normalized_closure_ty(tcx, fty.sigil))\n-        }\n-        ty::ty_trait(_, _, ref store, _, _) => {\n-            let sigil = match *store {\n-                ty::UniqTraitStore => ast::OwnedSigil,\n-                ty::BoxTraitStore => ast::ManagedSigil,\n-                ty::RegionTraitStore(_) => ast::BorrowedSigil,\n-            };\n-\n-            // Traits have the same runtime representation as closures.\n-            Some(normalized_closure_ty(tcx, sigil))\n-        }\n-        ty::ty_ptr(_) => {\n-            Some(ty::mk_uint())\n-        }\n-        _ => {\n-            None\n-        }\n-    };\n-\n-    fn normalized_closure_ty(tcx: ty::ctxt,\n-                             sigil: ast::Sigil) -> ty::t\n-    {\n-        ty::mk_closure(\n-            tcx,\n-            ty::ClosureTy {\n-                purity: ast::impure_fn,\n-                sigil: sigil,\n-                onceness: ast::Many,\n-                region: ty::re_static,\n-                bounds: ty::EmptyBuiltinBounds(),\n-                sig: ty::FnSig {bound_lifetime_names: opt_vec::Empty,\n-                                inputs: ~[],\n-                                output: ty::mk_nil()}})\n-    }\n-}\n-\n pub fn make_mono_id(ccx: @mut CrateContext,\n                     item: ast::def_id,\n                     substs: &param_substs,"}, {"sha": "0218a0e7f3abb736b210f9929f13526b01ede57a", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/180e235d3dbe00ff3b247552bb83cca0be8cf06d/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180e235d3dbe00ff3b247552bb83cca0be8cf06d/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=180e235d3dbe00ff3b247552bb83cca0be8cf06d", "patch": "@@ -590,7 +590,7 @@ fn test_repr() {\n     exact_test(&(~\"he\\u10f3llo\"), \"~\\\"he\\\\u10f3llo\\\"\");\n \n     exact_test(&(@10), \"@10\");\n-    exact_test(&(@mut 10), \"@10\"); // FIXME: #4210: incorrect\n+    exact_test(&(@mut 10), \"@mut 10\");\n     exact_test(&((@mut 10, 2)), \"(@mut 10, 2)\");\n     exact_test(&(~10), \"~10\");\n     exact_test(&(&10), \"&10\");"}]}