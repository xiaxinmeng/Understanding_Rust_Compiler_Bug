{"sha": "3a47103f1d2bbf144d3866abc9fe74a9143d2988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNDcxMDNmMWQyYmJmMTQ0ZDM4NjZhYmM5ZmU3NGE5MTQzZDI5ODg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-26T17:04:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:47Z"}, "message": "Fix codegen tests by make sure items are translated in AST order.", "tree": {"sha": "5f961e354bb3720b36c19a0c2c8c3dec2a2d90ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f961e354bb3720b36c19a0c2c8c3dec2a2d90ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a47103f1d2bbf144d3866abc9fe74a9143d2988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a47103f1d2bbf144d3866abc9fe74a9143d2988", "html_url": "https://github.com/rust-lang/rust/commit/3a47103f1d2bbf144d3866abc9fe74a9143d2988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a47103f1d2bbf144d3866abc9fe74a9143d2988/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283c94cd49c8b7cf0b565902686db5fb0cf3e6fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/283c94cd49c8b7cf0b565902686db5fb0cf3e6fd", "html_url": "https://github.com/rust-lang/rust/commit/283c94cd49c8b7cf0b565902686db5fb0cf3e6fd"}], "stats": {"total": 62, "additions": 49, "deletions": 13}, "files": [{"sha": "e13eea6f8ceae76df5db496e5e0623172b3203c3", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3a47103f1d2bbf144d3866abc9fe74a9143d2988", "patch": "@@ -2626,7 +2626,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Instantiate translation items without filling out definitions yet...\n     for ccx in crate_context_list.iter() {\n         let trans_items = ccx.codegen_unit()\n-                             .items_in_deterministic_order(&symbol_map);\n+                             .items_in_deterministic_order(tcx, &symbol_map);\n \n         for (trans_item, linkage) in trans_items {\n             trans_item.predefine(&ccx, linkage);\n@@ -2636,7 +2636,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // ... and now that we have everything pre-defined, fill out those definitions.\n     for ccx in crate_context_list.iter() {\n         let trans_items = ccx.codegen_unit()\n-                             .items_in_deterministic_order(&symbol_map);\n+                             .items_in_deterministic_order(tcx, &symbol_map);\n \n         for (trans_item, _) in trans_items {\n            trans_item.define(&ccx);"}, {"sha": "2f1961ac9f83005b273a02da0e4b575e7a9e16c1", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=3a47103f1d2bbf144d3866abc9fe74a9143d2988", "patch": "@@ -124,7 +124,9 @@ use rustc::hir::map::DefPathData;\n use rustc::session::config::NUMBERED_CODEGEN_UNIT_MARKER;\n use rustc::ty::TyCtxt;\n use rustc::ty::item_path::characteristic_def_id_of_type;\n+use std::cmp::Ordering;\n use symbol_map::SymbolMap;\n+use syntax::ast::NodeId;\n use syntax::parse::token::{self, InternedString};\n use trans_item::TransItem;\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeSet};\n@@ -144,18 +146,52 @@ pub struct CodegenUnit<'tcx> {\n \n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn items_in_deterministic_order(&self,\n+                                        tcx: TyCtxt,\n                                         symbol_map: &SymbolMap)\n                                         -> Vec<(TransItem<'tcx>, llvm::Linkage)> {\n         let mut items: Vec<(TransItem<'tcx>, llvm::Linkage)> =\n             self.items.iter().map(|(item, linkage)| (*item, *linkage)).collect();\n \n+        // The codegen tests rely on items being process in the same order as\n+        // they appear in the file, so for local items, we sort by node_id first\n         items.as_mut_slice().sort_by(|&(trans_item1, _), &(trans_item2, _)| {\n-            let symbol_name1 = symbol_map.get(trans_item1).unwrap();\n-            let symbol_name2 = symbol_map.get(trans_item2).unwrap();\n-            symbol_name1.cmp(symbol_name2)\n+\n+            let node_id1 = local_node_id(tcx, trans_item1);\n+            let node_id2 = local_node_id(tcx, trans_item2);\n+\n+            match (node_id1, node_id2) {\n+                (None, None) => {\n+                    let symbol_name1 = symbol_map.get(trans_item1).unwrap();\n+                    let symbol_name2 = symbol_map.get(trans_item2).unwrap();\n+                    symbol_name1.cmp(symbol_name2)\n+                }\n+                (None, Some(_)) => Ordering::Less,\n+                (Some(_), None) => Ordering::Greater,\n+                (Some(node_id1), Some(node_id2)) => {\n+                    let ordering = node_id1.cmp(&node_id2);\n+\n+                    if ordering != Ordering::Equal {\n+                        return ordering;\n+                    }\n+\n+                    let symbol_name1 = symbol_map.get(trans_item1).unwrap();\n+                    let symbol_name2 = symbol_map.get(trans_item2).unwrap();\n+                    symbol_name1.cmp(symbol_name2)\n+                }\n+            }\n         });\n \n-        items\n+        return items;\n+\n+        fn local_node_id(tcx: TyCtxt, trans_item: TransItem) -> Option<NodeId> {\n+            match trans_item {\n+                TransItem::Fn(instance) => {\n+                    tcx.map.as_local_node_id(instance.def)\n+                }\n+                TransItem::Static(node_id) => Some(node_id),\n+                TransItem::DropGlue(_) => None,\n+            }\n+        }\n     }\n }\n "}, {"sha": "25f8c130469973d888c617dca289abc639386b54", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a47103f1d2bbf144d3866abc9fe74a9143d2988/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=3a47103f1d2bbf144d3866abc9fe74a9143d2988", "patch": "@@ -31,13 +31,13 @@ pub fn droppy() {\n // that's one new drop call per call to possibly_unwinding(), and finally 3 drop calls for the\n // regular function exit. We used to have problems with quadratic growths of drop calls in such\n // functions.\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK: call{{.*}}SomeUniqueName{{.*}}drop\n-// CHECK-NOT: call{{.*}}SomeUniqueName{{.*}}drop\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n+// CHECK-NOT: call{{.*}}drop{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition\n // CHECK-LABEL: {{^[}]}}\n     let _s = SomeUniqueName;"}]}