{"sha": "dd6e8d45e183861d44ed91a99f0a50403b2776a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNmU4ZDQ1ZTE4Mzg2MWQ0NGVkOTFhOTlmMGE1MDQwM2IyNzc2YTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-24T03:02:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-24T03:02:23Z"}, "message": "Auto merge of #33787 - cuviper:local-rebuild, r=alexcrichton\n\nAdd --enable-local-rebuild to bootstrap from the current release\n\nIn Linux distributions, it is often necessary to rebuild packages for cases like applying new patches or linking against new system libraries.  In this scenario, the rustc in the distro build environment may already match the current release that we're trying to rebuild.  Thus we don't want to use the prior release's bootstrap key, nor `--cfg stage0` for the prior unstable features.\n\nThe new `configure --enable-local-rebuild` option specifies that we are rebuilding from the current release.  The current bootstrap key is used for the local rustc, and current stage1 features are also assumed.  Both the makefiles and rustbuild support this configuration.\n\nFixes #29556\nr? @alexcrichton", "tree": {"sha": "50eda6cbc0faf38303702e7ff2c9f9766bcd3bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50eda6cbc0faf38303702e7ff2c9f9766bcd3bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6e8d45e183861d44ed91a99f0a50403b2776a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e8d45e183861d44ed91a99f0a50403b2776a3", "html_url": "https://github.com/rust-lang/rust/commit/dd6e8d45e183861d44ed91a99f0a50403b2776a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e8d45e183861d44ed91a99f0a50403b2776a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ef015132ec09345b88d2ec20a9d9809b5d3dfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ef015132ec09345b88d2ec20a9d9809b5d3dfc", "html_url": "https://github.com/rust-lang/rust/commit/57ef015132ec09345b88d2ec20a9d9809b5d3dfc"}, {"sha": "0ca7d3dc1ffdf97284d62960a3c2170dae5f1e43", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7d3dc1ffdf97284d62960a3c2170dae5f1e43", "html_url": "https://github.com/rust-lang/rust/commit/0ca7d3dc1ffdf97284d62960a3c2170dae5f1e43"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "b7053c5c54f5612fbc802c73a1b039f3b3767486", "filename": "configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd6e8d45e183861d44ed91a99f0a50403b2776a3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/dd6e8d45e183861d44ed91a99f0a50403b2776a3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=dd6e8d45e183861d44ed91a99f0a50403b2776a3", "patch": "@@ -599,6 +599,7 @@ opt debug-assertions 0 \"build with debugging assertions\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n+opt local-rebuild 0 \"use an installed rustc matching the current version, for rebuilds\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 1 \"build rpaths into rustc itself\"\n opt stage0-landing-pads 1 \"enable landing pads during bootstrap with stage0\"\n@@ -847,6 +848,16 @@ then\n     BIN_SUF=.exe\n fi\n \n+# --enable-local-rebuild implies --enable-local-rust too\n+if [ -n \"$CFG_ENABLE_LOCAL_REBUILD\" ]\n+then\n+    if [ -z \"$CFG_ENABLE_LOCAL_RUST\" ]\n+    then\n+        CFG_ENABLE_LOCAL_RUST=1\n+        putvar CFG_ENABLE_LOCAL_RUST\n+    fi\n+fi\n+\n if [ -n \"$CFG_ENABLE_LOCAL_RUST\" ]\n then\n     system_rustc=$(which rustc)"}, {"sha": "6feb53ec7b17c5194f8e00b22c90225b1fd437c3", "filename": "mk/main.mk", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd6e8d45e183861d44ed91a99f0a50403b2776a3/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dd6e8d45e183861d44ed91a99f0a50403b2776a3/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=dd6e8d45e183861d44ed91a99f0a50403b2776a3", "patch": "@@ -34,7 +34,14 @@ CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(C\n # intentionally not \"secure\" by any definition, this is largely just a deterrent\n # from users enabling unstable features on the stable compiler.\n CFG_BOOTSTRAP_KEY=$(CFG_FILENAME_EXTRA)\n+\n+# The stage0 compiler needs to use the previous key recorded in src/stage0.txt,\n+# except for local-rebuild when it just uses the same current key.\n+ifdef CFG_ENABLE_LOCAL_REBUILD\n+CFG_BOOTSTRAP_KEY_STAGE0=$(CFG_BOOTSTRAP_KEY)\n+else\n CFG_BOOTSTRAP_KEY_STAGE0=$(shell grep 'rustc_key' $(S)src/stage0.txt | sed 's/rustc_key: '//)\n+endif\n \n ifeq ($(CFG_RELEASE_CHANNEL),stable)\n # This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n@@ -526,6 +533,11 @@ ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n \n RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR1_T_$(2)_H_$$(CFG_BUILD))\n+else\n+ifdef CFG_ENABLE_LOCAL_REBUILD\n+# Assume the local-rebuild rustc already has stage1 features too.\n+CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n+endif\n endif\n endif\n "}, {"sha": "fb1ad12d914fc9ec18d03f7ff9746e0f11f1e183", "filename": "src/bootstrap/build/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd6e8d45e183861d44ed91a99f0a50403b2776a3/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6e8d45e183861d44ed91a99f0a50403b2776a3/src%2Fbootstrap%2Fbuild%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fconfig.rs?ref=dd6e8d45e183861d44ed91a99f0a50403b2776a3", "patch": "@@ -67,6 +67,7 @@ pub struct Config {\n     pub target: Vec<String>,\n     pub rustc: Option<String>,\n     pub cargo: Option<String>,\n+    pub local_rebuild: bool,\n \n     // libstd features\n     pub debug_jemalloc: bool,\n@@ -315,6 +316,7 @@ impl Config {\n                 (\"RPATH\", self.rust_rpath),\n                 (\"OPTIMIZE_TESTS\", self.rust_optimize_tests),\n                 (\"DEBUGINFO_TESTS\", self.rust_debuginfo_tests),\n+                (\"LOCAL_REBUILD\", self.local_rebuild),\n             }\n \n             match key {"}, {"sha": "21d12d27d92e1cc38d6284a87f683d659010bb10", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd6e8d45e183861d44ed91a99f0a50403b2776a3/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6e8d45e183861d44ed91a99f0a50403b2776a3/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=dd6e8d45e183861d44ed91a99f0a50403b2776a3", "patch": "@@ -510,6 +510,14 @@ impl Build {\n              .arg(\"-j\").arg(self.jobs().to_string())\n              .arg(\"--target\").arg(target);\n \n+        let stage;\n+        if compiler.stage == 0 && self.config.local_rebuild {\n+            // Assume the local-rebuild rustc already has stage1 features.\n+            stage = 1;\n+        } else {\n+            stage = compiler.stage;\n+        }\n+\n         // Customize the compiler we're running. Specify the compiler to cargo\n         // as our shim and then pass it some various options used to configure\n         // how the actual compiler itself is called.\n@@ -518,7 +526,7 @@ impl Build {\n         // src/bootstrap/{rustc,rustdoc.rs}\n         cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n              .env(\"RUSTC_REAL\", self.compiler_path(compiler))\n-             .env(\"RUSTC_STAGE\", compiler.stage.to_string())\n+             .env(\"RUSTC_STAGE\", stage.to_string())\n              .env(\"RUSTC_DEBUGINFO\", self.config.rust_debuginfo.to_string())\n              .env(\"RUSTC_CODEGEN_UNITS\",\n                   self.config.rust_codegen_units.to_string())\n@@ -744,7 +752,7 @@ impl Build {\n         // In stage0 we're using a previously released stable compiler, so we\n         // use the stage0 bootstrap key. Otherwise we use our own build's\n         // bootstrap key.\n-        let bootstrap_key = if compiler.is_snapshot(self) {\n+        let bootstrap_key = if compiler.is_snapshot(self) && !self.config.local_rebuild {\n             &self.bootstrap_key_stage0\n         } else {\n             &self.bootstrap_key"}]}