{"sha": "7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhM2JhOTYzZTFmZDNmOTg2YTY2NDM3YmVmM2FiYTRiYmY3MWFmZGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-17T11:01:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-17T11:01:56Z"}, "message": "Rustfmt", "tree": {"sha": "1165f2b910e85d78f4716154487b69dd73264e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1165f2b910e85d78f4716154487b69dd73264e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "html_url": "https://github.com/rust-lang/rust/commit/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27dfc3ac9d874685f7cff8f9f1d54f6a2df5b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27dfc3ac9d874685f7cff8f9f1d54f6a2df5b88", "html_url": "https://github.com/rust-lang/rust/commit/f27dfc3ac9d874685f7cff8f9f1d54f6a2df5b88"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "b460547e8209f9bf5ee2cbced70ea82c8ea26301", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "patch": "@@ -9,7 +9,10 @@ impl Drop for PrintOnPanic {\n     }\n }\n \n-pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, impl Backend>, mono_item: MonoItem<'tcx>) {\n+pub fn trans_mono_item<'a, 'tcx: 'a>(\n+    cx: &mut CodegenCx<'a, 'tcx, impl Backend>,\n+    mono_item: MonoItem<'tcx>,\n+) {\n     let tcx = cx.tcx;\n     let context = &mut cx.context;\n "}, {"sha": "88a3498885f28b21e14cce9e097c28fd00c1374f", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3ba963e1fd3f986a66437bef3aba4bbf71afdf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7a3ba963e1fd3f986a66437bef3aba4bbf71afdf", "patch": "@@ -68,7 +68,11 @@ mod prelude {\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable, TypeVariants,\n     };\n-    pub use rustc_data_structures::{fx::{FxHashSet, FxHashMap}, indexed_vec::Idx, sync::Lrc};\n+    pub use rustc_data_structures::{\n+        fx::{FxHashMap, FxHashSet},\n+        indexed_vec::Idx,\n+        sync::Lrc,\n+    };\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::codemap::DUMMY_SP;\n@@ -215,9 +219,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             .finish(flags);\n \n         let mono_items =\n-            collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager)\n-                .0;\n-        \n+            collector::collect_crate_mono_items(tcx, collector::MonoItemCollectionMode::Eager).0;\n+\n         // TODO: move to the end of this function when compiling libcore doesn't have unimplemented stuff anymore\n         save_incremental(tcx);\n         tcx.sess.warn(\"Saved incremental data\");\n@@ -252,13 +255,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             ::std::process::exit(0);\n         } else {\n             let mut faerie_module: Module<FaerieBackend> = Module::new(\n-                    FaerieBuilder::new(\n-                        isa,\n-                        \"some_file.o\".to_string(),\n-                        FaerieTrapCollection::Disabled,\n-                        FaerieBuilder::default_libcall_names(),\n-                    ).unwrap());\n-            \n+                FaerieBuilder::new(\n+                    isa,\n+                    \"some_file.o\".to_string(),\n+                    FaerieTrapCollection::Disabled,\n+                    FaerieBuilder::default_libcall_names(),\n+                ).unwrap(),\n+            );\n+\n             codegen_mono_items(tcx, &mut faerie_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n@@ -340,7 +344,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n }\n \n-fn codegen_mono_items<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, module: &mut Module<impl Backend + 'static>, mono_items: &FxHashSet<MonoItem<'tcx>>) {\n+fn codegen_mono_items<'a, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<impl Backend + 'static>,\n+    mono_items: &FxHashSet<MonoItem<'tcx>>,\n+) {\n     use std::io::Write;\n \n     let mut cx = CodegenCx {"}]}