{"sha": "5e3f291195b580580be7ce5622f54ebca75fb9f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlM2YyOTExOTViNTgwNTgwYmU3Y2U1NjIyZjU0ZWJjYTc1ZmI5ZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T18:23:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-02T18:23:19Z"}, "message": "fix hir for new block syntax", "tree": {"sha": "772693eb44bde1fac1b9292456e1fa6e056bdb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/772693eb44bde1fac1b9292456e1fa6e056bdb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e3f291195b580580be7ce5622f54ebca75fb9f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e3f291195b580580be7ce5622f54ebca75fb9f0", "html_url": "https://github.com/rust-lang/rust/commit/5e3f291195b580580be7ce5622f54ebca75fb9f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e3f291195b580580be7ce5622f54ebca75fb9f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf8e895038a7677711b8168ee12e1d47f6018bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf8e895038a7677711b8168ee12e1d47f6018bc", "html_url": "https://github.com/rust-lang/rust/commit/dcf8e895038a7677711b8168ee12e1d47f6018bc"}], "stats": {"total": 129, "additions": 72, "deletions": 57}, "files": [{"sha": "699221e33567138df6c4734be95df2b57c3d53b4", "filename": "crates/ra_assists/src/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -65,9 +65,9 @@ pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>)\n         \"move condition to match guard\",\n         |edit| {\n             edit.target(if_expr.syntax().text_range());\n-            let then_only_expr = then_block.statements().next().is_none();\n+            let then_only_expr = then_block.block().and_then(|it| it.statements().next()).is_none();\n \n-            match &then_block.expr() {\n+            match &then_block.block().and_then(|it| it.expr()) {\n                 Some(then_expr) if then_only_expr => {\n                     edit.replace(if_expr.syntax().text_range(), then_expr.syntax().text())\n                 }"}, {"sha": "401835c579f4a748ea795c76892b3346bbb8b033", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -1,3 +1,4 @@\n+use format_buf::format;\n use hir::db::HirDatabase;\n use ra_fmt::extract_trivial_expression;\n use ra_syntax::{ast, AstNode};\n@@ -25,16 +26,21 @@ pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) ->\n     ctx.build()\n }\n \n-fn build_match_expr(expr: ast::Expr, pat1: ast::Pat, arm1: ast::Block, arm2: ast::Block) -> String {\n+fn build_match_expr(\n+    expr: ast::Expr,\n+    pat1: ast::Pat,\n+    arm1: ast::BlockExpr,\n+    arm2: ast::BlockExpr,\n+) -> String {\n     let mut buf = String::new();\n-    buf.push_str(&format!(\"match {} {{\\n\", expr.syntax().text()));\n-    buf.push_str(&format!(\"    {} => {}\\n\", pat1.syntax().text(), format_arm(&arm1)));\n-    buf.push_str(&format!(\"    _ => {}\\n\", format_arm(&arm2)));\n+    format!(buf, \"match {} {{\\n\", expr.syntax().text());\n+    format!(buf, \"    {} => {}\\n\", pat1.syntax().text(), format_arm(&arm1));\n+    format!(buf, \"    _ => {}\\n\", format_arm(&arm2));\n     buf.push_str(\"}\");\n     buf\n }\n \n-fn format_arm(block: &ast::Block) -> String {\n+fn format_arm(block: &ast::BlockExpr) -> String {\n     match extract_trivial_expression(block) {\n         None => block.syntax().text().to_string(),\n         Some(e) => format!(\"{},\", e.syntax().text()),"}, {"sha": "e22ac9753f036155317d3ac967efbe5289274939", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -34,7 +34,8 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     successors(token.prev_token(), |token| token.prev_token())\n }\n \n-pub fn extract_trivial_expression(block: &ast::Block) -> Option<ast::Expr> {\n+pub fn extract_trivial_expression(expr: &ast::BlockExpr) -> Option<ast::Expr> {\n+    let block = expr.block()?;\n     let expr = block.expr()?;\n     if expr.syntax().text().contains_char('\\n') {\n         return None;"}, {"sha": "7c9454c0b584f4f92738880ce9bc58c3ebe1b8c6", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -119,10 +119,10 @@ where\n         expr_id: crate::expr::ExprId,\n     ) -> Option<Source<ast::Expr>> {\n         let source_map = self.body_source_map(db);\n-        let expr_syntax = source_map.expr_syntax(expr_id)?;\n+        let expr_syntax = source_map.expr_syntax(expr_id)?.a()?;\n         let source = self.source(db);\n-        let node = expr_syntax.to_node(&source.ast.syntax());\n-        ast::Expr::cast(node).map(|ast| Source { file_id: source.file_id, ast })\n+        let ast = expr_syntax.to_node(&source.ast.syntax());\n+        Some(Source { file_id: source.file_id, ast })\n     }\n }\n "}, {"sha": "5c95bed40c13371207d2ca9c02c639d2592894c8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n         self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n         TypeAscriptionOwner,\n     },\n-    AstNode, AstPtr, SyntaxNodePtr,\n+    AstNode, AstPtr,\n };\n use test_utils::tested_by;\n \n@@ -56,13 +56,14 @@ pub struct Body {\n /// file, so that we don't recompute types whenever some whitespace is typed.\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n-    expr_map: FxHashMap<SyntaxNodePtr, ExprId>,\n-    expr_map_back: ArenaMap<ExprId, SyntaxNodePtr>,\n+    expr_map: FxHashMap<ExprPtr, ExprId>,\n+    expr_map_back: ArenaMap<ExprId, ExprPtr>,\n     pat_map: FxHashMap<PatPtr, PatId>,\n     pat_map_back: ArenaMap<PatId, PatPtr>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n }\n \n+type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n type PatPtr = Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>;\n \n impl Body {\n@@ -128,16 +129,12 @@ impl Index<PatId> for Body {\n }\n \n impl BodySourceMap {\n-    pub(crate) fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n+    pub(crate) fn expr_syntax(&self, expr: ExprId) -> Option<ExprPtr> {\n         self.expr_map_back.get(expr).cloned()\n     }\n \n-    pub(crate) fn syntax_expr(&self, ptr: SyntaxNodePtr) -> Option<ExprId> {\n-        self.expr_map.get(&ptr).cloned()\n-    }\n-\n     pub(crate) fn node_expr(&self, node: &ast::Expr) -> Option<ExprId> {\n-        self.expr_map.get(&SyntaxNodePtr::new(node.syntax())).cloned()\n+        self.expr_map.get(&Either::A(AstPtr::new(node))).cloned()\n     }\n \n     pub(crate) fn pat_syntax(&self, pat: PatId) -> Option<PatPtr> {\n@@ -575,11 +572,12 @@ where\n             current_file_id: file_id,\n         }\n     }\n-    fn alloc_expr(&mut self, expr: Expr, syntax_ptr: SyntaxNodePtr) -> ExprId {\n+    fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n+        let ptr = Either::A(ptr);\n         let id = self.exprs.alloc(expr);\n         if self.current_file_id == self.original_file_id {\n-            self.source_map.expr_map.insert(syntax_ptr, id);\n-            self.source_map.expr_map_back.insert(id, syntax_ptr);\n+            self.source_map.expr_map.insert(ptr, id);\n+            self.source_map.expr_map_back.insert(id, ptr);\n         }\n         id\n     }\n@@ -601,7 +599,7 @@ where\n     }\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n-        let syntax_ptr = SyntaxNodePtr::new(expr.syntax());\n+        let syntax_ptr = AstPtr::new(&expr);\n         match expr {\n             ast::Expr::IfExpr(e) => {\n                 let then_branch = self.collect_block_opt(e.then_branch());\n@@ -640,10 +638,10 @@ where\n                 self.alloc_expr(Expr::If { condition, then_branch, else_branch }, syntax_ptr)\n             }\n             ast::Expr::TryBlockExpr(e) => {\n-                let body = self.collect_block_opt(e.block());\n+                let body = self.collect_block_opt(e.body());\n                 self.alloc_expr(Expr::TryBlock { body }, syntax_ptr)\n             }\n-            ast::Expr::BlockExpr(e) => self.collect_block_opt(e.block()),\n+            ast::Expr::BlockExpr(e) => self.collect_block(e),\n             ast::Expr::LoopExpr(e) => {\n                 let body = self.collect_block_opt(e.loop_body());\n                 self.alloc_expr(Expr::Loop { body }, syntax_ptr)\n@@ -739,7 +737,7 @@ where\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                self.source_map.expr_map.insert(syntax_ptr, inner);\n+                self.source_map.expr_map.insert(Either::A(syntax_ptr), inner);\n                 inner\n             }\n             ast::Expr::ReturnExpr(e) => {\n@@ -763,12 +761,9 @@ where\n                             } else if let Some(nr) = field.name_ref() {\n                                 // field shorthand\n                                 let id = self.exprs.alloc(Expr::Path(Path::from_name_ref(&nr)));\n-                                self.source_map\n-                                    .expr_map\n-                                    .insert(SyntaxNodePtr::new(nr.syntax()), id);\n-                                self.source_map\n-                                    .expr_map_back\n-                                    .insert(id, SyntaxNodePtr::new(nr.syntax()));\n+                                let ptr = Either::B(AstPtr::new(&field));\n+                                self.source_map.expr_map.insert(ptr, id);\n+                                self.source_map.expr_map_back.insert(id, ptr);\n                                 id\n                             } else {\n                                 self.exprs.alloc(Expr::Missing)\n@@ -942,7 +937,12 @@ where\n         }\n     }\n \n-    fn collect_block(&mut self, block: ast::Block) -> ExprId {\n+    fn collect_block(&mut self, expr: ast::BlockExpr) -> ExprId {\n+        let syntax_node_ptr = AstPtr::new(&expr.clone().into());\n+        let block = match expr.block() {\n+            Some(block) => block,\n+            None => return self.alloc_expr(Expr::Missing, syntax_node_ptr),\n+        };\n         let statements = block\n             .statements()\n             .map(|s| match s {\n@@ -956,11 +956,11 @@ where\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));\n-        self.alloc_expr(Expr::Block { statements, tail }, SyntaxNodePtr::new(block.syntax()))\n+        self.alloc_expr(Expr::Block { statements, tail }, syntax_node_ptr)\n     }\n \n-    fn collect_block_opt(&mut self, block: Option<ast::Block>) -> ExprId {\n-        if let Some(block) = block {\n+    fn collect_block_opt(&mut self, expr: Option<ast::BlockExpr>) -> ExprId {\n+        if let Some(block) = expr {\n             self.collect_block(block)\n         } else {\n             self.exprs.alloc(Expr::Missing)"}, {"sha": "b6d7f3fc14baf87b34e2a6086ff236e56d18e40f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -172,7 +172,7 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;\n-    use ra_syntax::{algo::find_node_at_offset, ast, AstNode, SyntaxNodePtr};\n+    use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, extract_offset};\n \n     use crate::{mock::MockDatabase, source_binder::SourceAnalyzer};\n@@ -194,8 +194,7 @@ mod tests {\n         let analyzer = SourceAnalyzer::new(&db, file_id, marker.syntax(), None);\n \n         let scopes = analyzer.scopes();\n-        let expr_id =\n-            analyzer.body_source_map().syntax_expr(SyntaxNodePtr::new(marker.syntax())).unwrap();\n+        let expr_id = analyzer.body_source_map().node_expr(&marker.into()).unwrap();\n         let scope = scopes.scope_for(expr_id);\n \n         let actual = scopes"}, {"sha": "6fdaf1fce3bedcd72d50fbda3bbccbfca0dea8fc", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -1,7 +1,7 @@\n-use rustc_hash::FxHashSet;\n use std::sync::Arc;\n \n-use ra_syntax::ast::{AstNode, RecordLit};\n+use ra_syntax::ast::{self, AstNode};\n+use rustc_hash::FxHashSet;\n \n use super::{Expr, ExprId, RecordLitField};\n use crate::{\n@@ -13,7 +13,6 @@ use crate::{\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Function, HasSource, HirDatabase, ModuleDef, Name, Path, PerNs, Resolution,\n };\n-use ra_syntax::ast;\n \n pub(crate) struct ExprValidator<'a, 'b: 'a> {\n     func: Function,\n@@ -84,8 +83,12 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let source_file = parse.tree();\n         if let Some(field_list_node) = source_map\n             .expr_syntax(id)\n+            .and_then(|ptr| ptr.a())\n             .map(|ptr| ptr.to_node(source_file.syntax()))\n-            .and_then(RecordLit::cast)\n+            .and_then(|expr| match expr {\n+                ast::Expr::RecordLit(it) => Some(it),\n+                _ => None,\n+            })\n             .and_then(|lit| lit.record_field_list())\n         {\n             let field_list_ptr = AstPtr::new(&field_list_node);\n@@ -135,7 +138,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let source_map = self.func.body_source_map(db);\n             let file_id = self.func.source(db).file_id;\n \n-            if let Some(expr) = source_map.expr_syntax(id).and_then(|n| n.cast::<ast::Expr>()) {\n+            if let Some(expr) = source_map.expr_syntax(id).and_then(|n| n.a()) {\n                 self.sink.push(MissingOkInTailExpr { file: file_id, expr });\n             }\n         }"}, {"sha": "e5f4d11a6413a39770291f70794254f87b1875be", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -462,8 +462,8 @@ fn scope_for(\n     node: &SyntaxNode,\n ) -> Option<ScopeId> {\n     node.ancestors()\n-        .map(|it| SyntaxNodePtr::new(&it))\n-        .filter_map(|ptr| source_map.syntax_expr(ptr))\n+        .filter_map(ast::Expr::cast)\n+        .filter_map(|it| source_map.node_expr(&it))\n         .find_map(|it| scopes.scope_for(it))\n }\n \n@@ -475,7 +475,10 @@ fn scope_for_offset(\n     scopes\n         .scope_by_expr()\n         .iter()\n-        .filter_map(|(id, scope)| Some((source_map.expr_syntax(*id)?, scope)))\n+        .filter_map(|(id, scope)| {\n+            let ast_ptr = source_map.expr_syntax(*id)?.a()?;\n+            Some((ast_ptr.syntax_node_ptr(), scope))\n+        })\n         // find containing scope\n         .min_by_key(|(ptr, _scope)| {\n             (!(ptr.range().start() <= offset && offset <= ptr.range().end()), ptr.range().len())\n@@ -495,7 +498,10 @@ fn adjust(\n     let child_scopes = scopes\n         .scope_by_expr()\n         .iter()\n-        .filter_map(|(id, scope)| Some((source_map.expr_syntax(*id)?, scope)))\n+        .filter_map(|(id, scope)| {\n+            let ast_ptr = source_map.expr_syntax(*id)?.a()?;\n+            Some((ast_ptr.syntax_node_ptr(), scope))\n+        })\n         .map(|(ptr, scope)| (ptr.range(), scope))\n         .filter(|(range, _)| range.start() <= offset && range.is_subrange(&r) && *range != r);\n "}, {"sha": "d344ab12e78b714267fdf93e28c6b5005d407d9e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -3582,7 +3582,7 @@ fn infer(content: &str) -> String {\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Some(sp) => sp,\n+                Some(sp) => sp.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()),\n                 None => continue,\n             };\n             types.push((syntax_ptr, ty));"}, {"sha": "a71e4ed7dcd926e8333dfc89e2525a08a9667846", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -123,7 +123,7 @@ fn has_comma_after(node: &SyntaxNode) -> bool {\n fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Option<()> {\n     let block = ast::Block::cast(token.parent())?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n-    let expr = extract_trivial_expression(&block)?;\n+    let expr = extract_trivial_expression(&block_expr)?;\n \n     let block_range = block_expr.syntax().text_range();\n     let mut buf = expr.syntax().text().to_string();"}, {"sha": "1324965cfbd6332e27af27fc26dc14d12d7560a4", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -9,12 +9,12 @@ use crate::{\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ElseBranch {\n-    Block(ast::Block),\n+    Block(ast::BlockExpr),\n     IfExpr(ast::IfExpr),\n }\n \n impl ast::IfExpr {\n-    pub fn then_branch(&self) -> Option<ast::Block> {\n+    pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n         self.blocks().nth(0)\n     }\n     pub fn else_branch(&self) -> Option<ElseBranch> {\n@@ -28,7 +28,7 @@ impl ast::IfExpr {\n         Some(res)\n     }\n \n-    fn blocks(&self) -> AstChildren<ast::Block> {\n+    fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n         children(self)\n     }\n }"}, {"sha": "e2a92ae604b1de24d83c795ca291141e4f0522e8", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -3135,7 +3135,7 @@ impl AstNode for TryBlockExpr {\n     }\n }\n impl TryBlockExpr {\n-    pub fn block(&self) -> Option<Block> {\n+    pub fn body(&self) -> Option<BlockExpr> {\n         AstChildren::new(&self.syntax).next()\n     }\n }"}, {"sha": "c3e676d4c25d7f8a73af697c732f7da64e5e7634", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -28,7 +28,7 @@ pub trait VisibilityOwner: AstNode {\n }\n \n pub trait LoopBodyOwner: AstNode {\n-    fn loop_body(&self) -> Option<ast::Block> {\n+    fn loop_body(&self) -> Option<ast::BlockExpr> {\n         child_opt(self)\n     }\n }"}, {"sha": "c14ee0e856c907a3a0db1a36fa8cb28b5b36eeca", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/5e3f291195b580580be7ce5622f54ebca75fb9f0/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=5e3f291195b580580be7ce5622f54ebca75fb9f0", "patch": "@@ -426,7 +426,7 @@ Grammar(\n             traits: [\"LoopBodyOwner\"],\n         ),\n         \"TryBlockExpr\": (\n-            options: [\"Block\"],\n+            options: [[\"body\", \"BlockExpr\"]],\n         ),\n         \"ForExpr\": (\n             traits: [\"LoopBodyOwner\"],"}]}