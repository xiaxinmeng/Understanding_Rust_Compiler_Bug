{"sha": "21d0e9b8dc297cd78f51b397c55c033673f8be6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDBlOWI4ZGMyOTdjZDc4ZjUxYjM5N2M1NWMwMzM2NzNmOGJlNmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T13:29:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-01T13:29:29Z"}, "message": "Rollup merge of #79291 - JulianKnodt:ce_priv, r=petrochenkov\n\nAdd error message for private fn\n\nAttempts to add a more detailed error when a `const_evaluatable` fn from another scope is used inside of a scope which cannot access it.\n\nr? ````@lcnr````", "tree": {"sha": "627567086330a9da14eaf0374359c96d1377000d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/627567086330a9da14eaf0374359c96d1377000d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d0e9b8dc297cd78f51b397c55c033673f8be6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGAI6CRBK7hj4Ov3rIwAAdHIIADeUkbYeYlWw7mLxVUGPojLK\n8SznfWBl26L6BP23QSI5ySM9M0Xs+PRqP8yguOYUkkGxlpONrGWXZiR0GPVv8ZjO\nc/6Vn6MGrmmMOMl9H+xpqG5w90tdGG7kLl+v1EULMJ8ty5vsieCGMGqSlGLIngPv\nmbKnta7b80Rg1xTEwSO9WkuyUebEZ/IV3gN7UqroMeXMTnbXPKcbwcUn3Fp5wcdZ\nuCGWAEyn9XCldQ6fCMhbjlq5uDXXYfFItpTxEKN99TpEkMmfLnn1xmlgKp6XR7yt\nZM8y6Q2ZSv2pvX35ekSBUtEYEAQQG/5lD3ItuMKFZ/gmdp8D26+8R48Oz8av5QU=\n=f/Oc\n-----END PGP SIGNATURE-----\n", "payload": "tree 627567086330a9da14eaf0374359c96d1377000d\nparent a7a6f013a20fbdf21d77e8ed16f0d8c7b70a7899\nparent 6a03f0350d2c6603eab20ca463d1dd4581c64edf\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612186169 +0100\ncommitter GitHub <noreply@github.com> 1612186169 +0100\n\nRollup merge of #79291 - JulianKnodt:ce_priv, r=petrochenkov\n\nAdd error message for private fn\n\nAttempts to add a more detailed error when a `const_evaluatable` fn from another scope is used inside of a scope which cannot access it.\n\nr? ````@lcnr````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d0e9b8dc297cd78f51b397c55c033673f8be6e", "html_url": "https://github.com/rust-lang/rust/commit/21d0e9b8dc297cd78f51b397c55c033673f8be6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d0e9b8dc297cd78f51b397c55c033673f8be6e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7a6f013a20fbdf21d77e8ed16f0d8c7b70a7899", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a6f013a20fbdf21d77e8ed16f0d8c7b70a7899", "html_url": "https://github.com/rust-lang/rust/commit/a7a6f013a20fbdf21d77e8ed16f0d8c7b70a7899"}, {"sha": "6a03f0350d2c6603eab20ca463d1dd4581c64edf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a03f0350d2c6603eab20ca463d1dd4581c64edf", "html_url": "https://github.com/rust-lang/rust/commit/6a03f0350d2c6603eab20ca463d1dd4581c64edf"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "8bfdf23a30bf43face4b01258179a5fcac6c722a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -4133,6 +4133,7 @@ dependencies = [\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_trait_selection\",\n  \"rustc_typeck\",\n  \"tracing\",\n ]"}, {"sha": "85e584d5435076cdd7d19edb804b20f929acc9fe", "filename": "compiler/rustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2FCargo.toml?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -13,4 +13,5 @@ rustc_typeck = { path = \"../rustc_typeck\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n tracing = \"0.1\""}, {"sha": "3fade2c4437263ca0634b7bdea556f125cd01578", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -18,15 +18,17 @@ use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_middle::bug;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n+use rustc_middle::mir::abstract_const::Node as ACNode;\n use rustc_middle::span_bug;\n use rustc_middle::ty::fold::TypeVisitor;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::{self, Const, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::Span;\n+use rustc_trait_selection::traits::const_evaluatable::{self, AbstractConst};\n \n use std::marker::PhantomData;\n use std::ops::ControlFlow;\n@@ -112,19 +114,35 @@ where\n                 ty.visit_with(self)\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n-            ty::PredicateKind::ConstEvaluatable(..)\n+            ty::PredicateKind::ConstEvaluatable(defs, substs)\n                 if self.def_id_visitor.tcx().features().const_evaluatable_checked =>\n             {\n-                // FIXME(const_evaluatable_checked): If the constant used here depends on a\n-                // private function we may have to do something here...\n-                //\n-                // For now, let's just pretend that everything is fine.\n+                let tcx = self.def_id_visitor.tcx();\n+                if let Ok(Some(ct)) = AbstractConst::new(tcx, defs, substs) {\n+                    self.visit_abstract_const_expr(tcx, ct)?;\n+                }\n                 ControlFlow::CONTINUE\n             }\n             _ => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }\n \n+    fn visit_abstract_const_expr(\n+        &mut self,\n+        tcx: TyCtxt<'tcx>,\n+        ct: AbstractConst<'tcx>,\n+    ) -> ControlFlow<V::BreakTy> {\n+        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node {\n+            ACNode::Leaf(leaf) => {\n+                let leaf = leaf.subst(tcx, ct.substs);\n+                self.visit_const(leaf)\n+            }\n+            ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n+                ControlFlow::CONTINUE\n+            }\n+        })\n+    }\n+\n     fn visit_predicates(\n         &mut self,\n         predicates: ty::GenericPredicates<'tcx>,\n@@ -241,6 +259,15 @@ where\n             ty.super_visit_with(self)\n         }\n     }\n+\n+    fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        self.visit_ty(c.ty)?;\n+        let tcx = self.def_id_visitor.tcx();\n+        if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {\n+            self.visit_abstract_const_expr(tcx, ct)?;\n+        }\n+        ControlFlow::CONTINUE\n+    }\n }\n \n fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {"}, {"sha": "f7c0bafff05b4c8ba416709edebf5ad3d29c5d82", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -6,7 +6,7 @@ pub mod auto_trait;\n mod chalk_fulfill;\n pub mod codegen;\n mod coherence;\n-mod const_evaluatable;\n+pub mod const_evaluatable;\n mod engine;\n pub mod error_reporting;\n mod fulfill;"}, {"sha": "9f457fbd346cd56252a76b30d88d75b98df13672", "filename": "src/test/ui/const-generics/const_evaluatable_checked/eval-privacy.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.rs?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -0,0 +1,31 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+pub struct Const<const U: u8>;\n+\n+pub trait Trait {\n+    type AssocTy;\n+    fn assoc_fn() -> Self::AssocTy;\n+}\n+\n+impl<const U: u8> Trait for Const<U>\n+//~^ WARN private type\n+//~| WARN this was previously\n+//~| WARN private type\n+//~| WARN this was previously\n+\n+where\n+    Const<{ my_const_fn(U) }>: ,\n+{\n+    type AssocTy = Const<{ my_const_fn(U) }>;\n+    //~^ ERROR private type\n+    fn assoc_fn() -> Self::AssocTy {\n+        Const\n+    }\n+}\n+\n+const fn my_const_fn(val: u8) -> u8 {\n+    // body of this function doesn't matter\n+    val\n+}"}, {"sha": "842c22c5c677535791c0acef791decbc1d72448a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/eval-privacy.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/21d0e9b8dc297cd78f51b397c55c033673f8be6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21d0e9b8dc297cd78f51b397c55c033673f8be6e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Feval-privacy.stderr?ref=21d0e9b8dc297cd78f51b397c55c033673f8be6e", "patch": "@@ -0,0 +1,43 @@\n+warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n+  --> $DIR/eval-privacy.rs:12:1\n+   |\n+LL | / impl<const U: u8> Trait for Const<U>\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `#[warn(private_in_public)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+warning: private type `fn(u8) -> u8 {my_const_fn}` in public interface (error E0446)\n+  --> $DIR/eval-privacy.rs:12:1\n+   |\n+LL | / impl<const U: u8> Trait for Const<U>\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>\n+\n+error[E0446]: private type `fn(u8) -> u8 {my_const_fn}` in public interface\n+  --> $DIR/eval-privacy.rs:21:5\n+   |\n+LL |     type AssocTy = Const<{ my_const_fn(U) }>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't leak private type\n+...\n+LL | const fn my_const_fn(val: u8) -> u8 {\n+   | ----------------------------------- `fn(u8) -> u8 {my_const_fn}` declared as private\n+\n+error: aborting due to previous error; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0446`."}]}