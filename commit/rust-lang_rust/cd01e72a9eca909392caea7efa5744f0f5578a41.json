{"sha": "cd01e72a9eca909392caea7efa5744f0f5578a41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMDFlNzJhOWVjYTkwOTM5MmNhZWE3ZWZhNTc0NGYwZjU1NzhhNDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-23T15:26:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-23T15:26:20Z"}, "message": "Merge #3277\n\n3277: vscode: gracefully handle cancellation errors r=matklad a=Veetaha\n\nThis PR fixes a fleet of errors that rapidly populate the Developer Tools console.\r\n![image](https://user-images.githubusercontent.com/36276403/75097665-0c7aba80-55b6-11ea-8edd-ab5dc5f89e1e.png)\r\n\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>", "tree": {"sha": "d4424c9e85b0ca419c90411fe61cfda0db68d7a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4424c9e85b0ca419c90411fe61cfda0db68d7a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd01e72a9eca909392caea7efa5744f0f5578a41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeUpmcCRBK7hj4Ov3rIwAAdHIIAIllNEqMotqPbMAxiH/78qGO\nlrGaQ0+13ulwb1VVt1i74z/+fzdNG0FwapMzqx81G5+0/X3ng2VLLjT5bJFIjOBZ\nHjT2OB6JET7dK9k+HkHDPudiohRp4gSDT6w7BvbkljYPqD1qjLrnYNCK2nLMQM/7\nO50UNIdO7vHxMRNxYeTQmFCJF3rYVs9i3/Bfm0q5Zmsrmt+4PLCmWzx6weurv8jS\nnadOqtmpUTgYL//gxScX8zs/C6kW+k+0s3v8WrDfzHn0Tp9bAevPhzU4jejpYqfc\n54iswTvh0nHyk+c6Ozoh2uezOivyAhPfdap4cX3HdOWETMjKDCg9MnWdnSrMW1Y=\n=F4cP\n-----END PGP SIGNATURE-----\n", "payload": "tree d4424c9e85b0ca419c90411fe61cfda0db68d7a4\nparent 3d6ec45a010201ad9ae71e2e5553529a03cc0443\nparent 4cee7cddc84aa3769d5d3e87e5745f4c981bca28\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582471580 +0000\ncommitter GitHub <noreply@github.com> 1582471580 +0000\n\nMerge #3277\n\n3277: vscode: gracefully handle cancellation errors r=matklad a=Veetaha\n\nThis PR fixes a fleet of errors that rapidly populate the Developer Tools console.\r\n![image](https://user-images.githubusercontent.com/36276403/75097665-0c7aba80-55b6-11ea-8edd-ab5dc5f89e1e.png)\r\n\n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd01e72a9eca909392caea7efa5744f0f5578a41", "html_url": "https://github.com/rust-lang/rust/commit/cd01e72a9eca909392caea7efa5744f0f5578a41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd01e72a9eca909392caea7efa5744f0f5578a41/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6ec45a010201ad9ae71e2e5553529a03cc0443", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6ec45a010201ad9ae71e2e5553529a03cc0443", "html_url": "https://github.com/rust-lang/rust/commit/3d6ec45a010201ad9ae71e2e5553529a03cc0443"}, {"sha": "4cee7cddc84aa3769d5d3e87e5745f4c981bca28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cee7cddc84aa3769d5d3e87e5745f4c981bca28", "html_url": "https://github.com/rust-lang/rust/commit/4cee7cddc84aa3769d5d3e87e5745f4c981bca28"}], "stats": {"total": 104, "additions": 60, "deletions": 44}, "files": [{"sha": "43540e0d8ea3f4a7cd92e989e55b95c869f8001d", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=cd01e72a9eca909392caea7efa5744f0f5578a41", "patch": "@@ -52,24 +52,3 @@ export interface Disposable {\n     dispose(): void;\n }\n export type Cmd = (...args: any[]) => unknown;\n-\n-export async function sendRequestWithRetry<R>(\n-    client: lc.LanguageClient,\n-    method: string,\n-    param: unknown,\n-    token?: vscode.CancellationToken,\n-): Promise<R> {\n-    for (const delay of [2, 4, 6, 8, 10, null]) {\n-        try {\n-            return await (token ? client.sendRequest(method, param, token) : client.sendRequest(method, param));\n-        } catch (err) {\n-            if (delay === null || err.code !== lc.ErrorCodes.ContentModified) {\n-                throw err;\n-            }\n-            await sleep(10 * (1 << delay));\n-        }\n-    }\n-    throw 'unreachable';\n-}\n-\n-const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));"}, {"sha": "77b4a1a68b86de1f2db99e707a2cdecb1ea7f2d9", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=cd01e72a9eca909392caea7efa5744f0f5578a41", "patch": "@@ -3,7 +3,8 @@ import * as lc from 'vscode-languageclient';\n \n import { ColorTheme, TextMateRuleSettings } from './color_theme';\n \n-import { Ctx, sendRequestWithRetry } from './ctx';\n+import { Ctx } from './ctx';\n+import { sendRequestWithRetry } from './util';\n \n export function activateHighlighting(ctx: Ctx) {\n     const highlighter = new Highlighter(ctx);"}, {"sha": "5f9229efbced64fc4e2dcb932cc1e275625cb523", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=cd01e72a9eca909392caea7efa5744f0f5578a41", "patch": "@@ -1,8 +1,8 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Ctx, sendRequestWithRetry } from './ctx';\n-import { log } from './util';\n+import { Ctx } from './ctx';\n+import { log, sendRequestWithRetry } from './util';\n \n export function activateInlayHints(ctx: Ctx) {\n     const hintsUpdater = new HintsUpdater(ctx);\n@@ -152,28 +152,24 @@ class HintsUpdater {\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n-        const client = this.ctx.client;\n-        if (!client) return null;\n+        this.pending.get(documentUri)?.cancel();\n \n-        const request: InlayHintsParams = {\n-            textDocument: { uri: documentUri },\n-        };\n         const tokenSource = new vscode.CancellationTokenSource();\n-        const prevHintsRequest = this.pending.get(documentUri);\n-        prevHintsRequest?.cancel();\n-\n         this.pending.set(documentUri, tokenSource);\n-        try {\n-            return await sendRequestWithRetry<InlayHint[] | null>(\n-                client,\n-                'rust-analyzer/inlayHints',\n-                request,\n-                tokenSource.token,\n-            );\n-        } finally {\n-            if (!tokenSource.token.isCancellationRequested) {\n-                this.pending.delete(documentUri);\n-            }\n-        }\n+\n+        const request: InlayHintsParams = { textDocument: { uri: documentUri } };\n+\n+        return sendRequestWithRetry<InlayHint[]>(\n+            this.ctx.client,\n+            'rust-analyzer/inlayHints',\n+            request,\n+            tokenSource.token\n+        )\n+            .catch(_ => null)\n+            .finally(() => {\n+                if (!tokenSource.token.isCancellationRequested) {\n+                    this.pending.delete(documentUri);\n+                }\n+            });\n     }\n }"}, {"sha": "2f18f85a39251414f926e2643380524f6ce78500", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/cd01e72a9eca909392caea7efa5744f0f5578a41/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=cd01e72a9eca909392caea7efa5744f0f5578a41", "patch": "@@ -1,3 +1,6 @@\n+import * as lc from \"vscode-languageclient\";\n+import * as vscode from \"vscode\";\n+\n let enabled: boolean = false;\n \n export const log = {\n@@ -16,3 +19,40 @@ export const log = {\n         enabled = yes;\n     }\n };\n+\n+export async function sendRequestWithRetry<R>(\n+    client: lc.LanguageClient,\n+    method: string,\n+    param: unknown,\n+    token?: vscode.CancellationToken,\n+): Promise<R> {\n+    for (const delay of [2, 4, 6, 8, 10, null]) {\n+        try {\n+            return await (token\n+                ? client.sendRequest(method, param, token)\n+                : client.sendRequest(method, param)\n+            );\n+        } catch (error) {\n+            if (delay === null) {\n+                log.error(\"LSP request timed out\", { method, param, error });\n+                throw error;\n+            }\n+\n+            if (error.code === lc.ErrorCodes.RequestCancelled) {\n+                throw error;\n+            }\n+\n+            if (error.code !== lc.ErrorCodes.ContentModified) {\n+                log.error(\"LSP request failed\", { method, param, error });\n+                throw error;\n+            }\n+\n+            await sleep(10 * (1 << delay));\n+        }\n+    }\n+    throw 'unreachable';\n+}\n+\n+function sleep(ms: number) {\n+    return new Promise(resolve => setTimeout(resolve, ms));\n+}"}]}