{"sha": "6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjlhN2Q1NjQxZTUyNDJlMWYzNDU5YjI5MGUyYzdmOGU0OWU4NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-23T02:45:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-23T02:45:06Z"}, "message": "Auto merge of #24683 - P1start:help-suggestions, r=nrc\n\nThis PR uses the inline error suggestions introduced in #24242 to modify a few existing `help` messages. The new errors look like this:\r\n\r\n    foobar.rs:5:12: 5:25 error: expected a path on the left-hand side of `+`,\r\n                                not `&'static Copy` [E0178]\r\n    foobar.rs:5     let x: &'static Copy + 'static;\r\n                           ^~~~~~~~~~~~~\r\n    foobar.rs:5:12: 5:35 help: try adding parentheses (per RFC 438):\r\n    foobar.rs:      let x: &'static (Copy + 'static);\r\n\r\n\r\n    foobar.rs:2:13: 2:23 error: cast to unsized type: `&_` as `core::marker::Copy`\r\n    foobar.rs:2     let x = &1 as Copy;\r\n                            ^~~~~~~~~~\r\n    foobar.rs:2:19: 2:23 help: try casting to a reference instead:\r\n    foobar.rs:      let x = &1 as &Copy;\r\n\r\n\r\n    foobar.rs:7:24: 7:25 error: expected expression, found `;`\r\n    foobar.rs:7     let x = box (1 + 1);\r\n                                       ^\r\n    foobar.rs:7:13: 7:16 help: try using `box()` instead:\r\n    foobar.rs:      let x = box() (1 + 1);\r\n\r\nThis also modifies compiletest to give the ability to directly test suggestions given by error messages.", "tree": {"sha": "d3a5fb07f59326f4782953bd571975ac60bd192c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a5fb07f59326f4782953bd571975ac60bd192c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "html_url": "https://github.com/rust-lang/rust/commit/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90cc83015eafb21293fd0cb8fb81f172236325df", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cc83015eafb21293fd0cb8fb81f172236325df", "html_url": "https://github.com/rust-lang/rust/commit/90cc83015eafb21293fd0cb8fb81f172236325df"}, {"sha": "7d2231aa22c80f47deea5b482ae03ae0cb2ae827", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2231aa22c80f47deea5b482ae03ae0cb2ae827", "html_url": "https://github.com/rust-lang/rust/commit/7d2231aa22c80f47deea5b482ae03ae0cb2ae827"}], "stats": {"total": 138, "additions": 113, "deletions": 25}, "files": [{"sha": "91550ae746157313cce613a5a6b1f3df22679bef", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -979,13 +979,25 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n     // is the ending point, and * represents ANSI color codes.\n     for line in proc_res.stderr.lines() {\n         let mut was_expected = false;\n+        let mut prev = 0;\n         for (i, ee) in expected_errors.iter().enumerate() {\n             if !found_flags[i] {\n                 debug!(\"prefix={} ee.kind={} ee.msg={} line={}\",\n                        prefixes[i],\n                        ee.kind,\n                        ee.msg,\n                        line);\n+                // Suggestions have no line number in their output, so take on the line number of\n+                // the previous expected error\n+                if ee.kind == \"suggestion\" {\n+                    assert!(expected_errors[prev].kind == \"help\",\n+                            \"SUGGESTIONs must be preceded by a HELP\");\n+                    if line.contains(&ee.msg) {\n+                        found_flags[i] = true;\n+                        was_expected = true;\n+                        break;\n+                    }\n+                }\n                 if (prefix_matches(line, &prefixes[i]) || continuation(line)) &&\n                     line.contains(&ee.kind) &&\n                     line.contains(&ee.msg) {\n@@ -994,6 +1006,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                     break;\n                 }\n             }\n+            prev = i;\n         }\n \n         // ignore this msg which gets printed at the end"}, {"sha": "d300045c0ec01c1444f37cca16681a2ef82d1a5e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -3138,7 +3138,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                           uses it like a function name\",\n                                          path_name));\n \n-                        let msg = format!(\"Did you mean to write: \\\n+                        let msg = format!(\"did you mean to write: \\\n                                            `{} {{ /* fields */ }}`?\",\n                                           path_name);\n                         if self.emit_errors {\n@@ -3179,7 +3179,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                                 uses it like a function name\",\n                                                 path_name));\n \n-                                let msg = format!(\"Did you mean to write: \\\n+                                let msg = format!(\"did you mean to write: \\\n                                                      `{} {{ /* fields */ }}`?\",\n                                                     path_name);\n                                 if self.emit_errors {"}, {"sha": "78797d086c677fb65492b919e00aeae89dadbd37", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -66,7 +66,7 @@ use std::iter::repeat;\n use std::rc::Rc;\n use std::slice;\n use syntax::{abi, ast, ast_util};\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, Pos};\n use syntax::parse::token;\n use syntax::print::pprust;\n \n@@ -975,21 +975,32 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n             span_err!(this.tcx().sess, ty.span, E0178,\n                       \"expected a path on the left-hand side of `+`, not `{}`\",\n                       pprust::ty_to_string(ty));\n-            match ty.node {\n-                ast::TyRptr(None, ref mut_ty) => {\n-                    fileline_help!(this.tcx().sess, ty.span,\n-                               \"perhaps you meant `&{}({} +{})`? (per RFC 438)\",\n-                               ppaux::mutability_to_string(mut_ty.mutbl),\n-                               pprust::ty_to_string(&*mut_ty.ty),\n-                               pprust::bounds_to_string(bounds));\n+            let hi = bounds.iter().map(|x| match *x {\n+                ast::TraitTyParamBound(ref tr, _) => tr.span.hi,\n+                ast::RegionTyParamBound(ref r) => r.span.hi,\n+            }).max_by(|x| x.to_usize());\n+            let full_span = hi.map(|hi| Span {\n+                lo: ty.span.lo,\n+                hi: hi,\n+                expn_id: ty.span.expn_id,\n+            });\n+            match (&ty.node, full_span) {\n+                (&ast::TyRptr(None, ref mut_ty), Some(full_span)) => {\n+                    this.tcx().sess\n+                        .span_suggestion(full_span, \"try adding parentheses (per RFC 438):\",\n+                                         format!(\"&{}({} +{})\",\n+                                                 ppaux::mutability_to_string(mut_ty.mutbl),\n+                                                 pprust::ty_to_string(&*mut_ty.ty),\n+                                                 pprust::bounds_to_string(bounds)));\n                 }\n-               ast::TyRptr(Some(ref lt), ref mut_ty) => {\n-                    fileline_help!(this.tcx().sess, ty.span,\n-                               \"perhaps you meant `&{} {}({} +{})`? (per RFC 438)\",\n-                               pprust::lifetime_to_string(lt),\n-                               ppaux::mutability_to_string(mut_ty.mutbl),\n-                               pprust::ty_to_string(&*mut_ty.ty),\n-                               pprust::bounds_to_string(bounds));\n+                (&ast::TyRptr(Some(ref lt), ref mut_ty), Some(full_span)) => {\n+                    this.tcx().sess\n+                        .span_suggestion(full_span, \"try adding parentheses (per RFC 438):\",\n+                                         format!(\"&{} {}({} +{})\",\n+                                                 pprust::lifetime_to_string(lt),\n+                                                 ppaux::mutability_to_string(mut_ty.mutbl),\n+                                                 pprust::ty_to_string(&*mut_ty.ty),\n+                                                 pprust::bounds_to_string(bounds)));\n                 }\n \n                 _ => {"}, {"sha": "348846b8ad401400e6b67a81bf247d215e5a7054", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -1071,15 +1071,32 @@ fn report_cast_to_unsized_type<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 ast::MutImmutable => \"\"\n             };\n             if ty::type_is_trait(t_1) {\n-                span_help!(fcx.tcx().sess, t_span, \"did you mean `&{}{}`?\", mtstr, tstr);\n+                match fcx.tcx().sess.codemap().span_to_snippet(t_span) {\n+                    Ok(s) => {\n+                        fcx.tcx().sess.span_suggestion(t_span,\n+                                                       \"try casting to a reference instead:\",\n+                                                       format!(\"&{}{}\", mtstr, s));\n+                    },\n+                    Err(_) =>\n+                        span_help!(fcx.tcx().sess, t_span,\n+                                   \"did you mean `&{}{}`?\", mtstr, tstr),\n+                }\n             } else {\n                 span_help!(fcx.tcx().sess, span,\n                            \"consider using an implicit coercion to `&{}{}` instead\",\n                            mtstr, tstr);\n             }\n         }\n         ty::ty_uniq(..) => {\n-            span_help!(fcx.tcx().sess, t_span, \"did you mean `Box<{}>`?\", tstr);\n+            match fcx.tcx().sess.codemap().span_to_snippet(t_span) {\n+                Ok(s) => {\n+                    fcx.tcx().sess.span_suggestion(t_span,\n+                                                   \"try casting to a `Box` instead:\",\n+                                                   format!(\"Box<{}>\", s));\n+                },\n+                Err(_) =>\n+                    span_help!(fcx.tcx().sess, t_span, \"did you mean `Box<{}>`?\", tstr),\n+            }\n         }\n         _ => {\n             span_help!(fcx.tcx().sess, e_span,"}, {"sha": "dc577f603f621903a1608f4b7edd1a9b2e87ecde", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -978,6 +978,9 @@ impl<'a> Parser<'a> {\n     pub fn span_help(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_help(sp, m)\n     }\n+    pub fn span_suggestion(&self, sp: Span, m: &str, n: String) {\n+        self.sess.span_diagnostic.span_suggestion(sp, m, n)\n+    }\n     pub fn fileline_help(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.fileline_help(sp, m)\n     }\n@@ -2600,6 +2603,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let lo = self.span.lo;\n+            let box_hi = self.span.hi;\n \n             try!(self.bump());\n \n@@ -2616,9 +2620,10 @@ impl<'a> Parser<'a> {\n                         self.span_err(span,\n                                       &format!(\"expected expression, found `{}`\",\n                                               this_token_to_string));\n-                        let box_span = mk_sp(lo, self.last_span.hi);\n-                        self.span_help(box_span,\n-                                       \"perhaps you meant `box() (foo)` instead?\");\n+                        let box_span = mk_sp(lo, box_hi);\n+                        self.span_suggestion(box_span,\n+                                             \"try using `box()` instead:\",\n+                                             \"box()\".to_string());\n                         self.abort_if_errors();\n                     }\n                     let subexpression = try!(self.parse_prefix_expr());"}, {"sha": "4e6ae96e3fc751c600d08160e7cb29dea2c608ff", "filename": "src/test/compile-fail/cast-to-unsized-trait-object-suggestion.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-unsized-trait-object-suggestion.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    &1 as Copy;\n+    //~^ ERROR cast to unsized type\n+    //~| HELP try casting to a reference instead:\n+    //~| SUGGESTION &1 as &Copy;\n+    Box::new(1) as Copy;\n+    //~^ ERROR cast to unsized type\n+    //~| HELP try casting to a `Box` instead:\n+    //~| SUGGESTION Box::new(1) as Box<Copy>;\n+}"}, {"sha": "46a64f99354c61c98ef48a0ed056f1a9bc29369c", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Debug`\n-    //~^^ HELP did you mean `Box<core::fmt::Debug>`?\n+    //~^^ HELP try casting to a `Box` instead\n \n     let _baz = 1_usize as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Debug`"}, {"sha": "e464ddf54c2d998fcb08370ae315a552bee56af6", "filename": "src/test/compile-fail/issue-6702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -15,5 +15,5 @@ struct Monster {\n \n fn main() {\n     let _m = Monster(); //~ ERROR `Monster` is a structure name, but\n-    //~^ HELP Did you mean to write: `Monster { /* fields */ }`?\n+    //~^ HELP did you mean to write: `Monster { /* fields */ }`?\n }"}, {"sha": "fc2ed83b2724d0a2d0be5e9b2b04ab1ca592fb28", "filename": "src/test/compile-fail/trait-object-reference-without-parens-suggestion.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-object-reference-without-parens-suggestion.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _: &Copy + 'static;\n+    //~^ ERROR expected a path\n+    //~| HELP try adding parentheses\n+    //~| SUGGESTION let _: &(Copy + 'static);\n+    let _: &'static Copy + 'static;\n+    //~^ ERROR expected a path\n+    //~| HELP try adding parentheses\n+    //~| SUGGESTION let _: &'static (Copy + 'static);\n+}"}, {"sha": "09d32a71dea48f6d5e0f660da9d1cd94633ad516", "filename": "src/test/parse-fail/parenthesized-box-expr-message.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fparenthesized-box-expr-message.rs?ref=6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    box(1 + 1) //~ HELP perhaps you meant `box() (foo)` instead?\n+    box (1 + 1)\n+    //~^ HELP try using `box()` instead:\n+    //~| SUGGESTION box() (1 + 1)\n     ; //~ ERROR expected expression, found `;`\n }"}]}