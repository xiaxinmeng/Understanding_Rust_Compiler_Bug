{"sha": "64de4e2731cff74e0c4b81d9389734dee7229db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZGU0ZTI3MzFjZmY3NGUwYzRiODFkOTM4OTczNGRlZTcyMjlkYjI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-08-24T12:58:40Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:25Z"}, "message": "Fix LEB128 to work with the stage1\n\nStage 1 can\u2019t really handle negative 128-bit literals, but an equivalent bit-not is fine", "tree": {"sha": "cb6d6b205569301fc451466f549ffa00aafc6e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6d6b205569301fc451466f549ffa00aafc6e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64de4e2731cff74e0c4b81d9389734dee7229db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64de4e2731cff74e0c4b81d9389734dee7229db2", "html_url": "https://github.com/rust-lang/rust/commit/64de4e2731cff74e0c4b81d9389734dee7229db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64de4e2731cff74e0c4b81d9389734dee7229db2/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e2b946e6539b4866c672cda6958fc1a2fe80687", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2b946e6539b4866c672cda6958fc1a2fe80687", "html_url": "https://github.com/rust-lang/rust/commit/4e2b946e6539b4866c672cda6958fc1a2fe80687"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "65533b5011b826dfbedfa43fce063df9311efbe8", "filename": "src/librustc_i128/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibrustc_i128%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibrustc_i128%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_i128%2Flib.rs?ref=64de4e2731cff74e0c4b81d9389734dee7229db2", "patch": "@@ -1,5 +1,5 @@\n #![allow(non_camel_case_types)]\n-#![feature(i128_type)]\n+#![cfg_attr(not(stage0), feature(i128_type))]\n \n #[cfg(stage0)]\n pub type i128 = i64;"}, {"sha": "04ebffd47f20dfdab8f9cd30cf273c85a9442102", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=64de4e2731cff74e0c4b81d9389734dee7229db2", "patch": "@@ -87,12 +87,14 @@ pub fn write_signed_leb128_to<W>(mut value: i128, mut write: W) -> usize\n         value >>= 7;\n         let more = !((((value == 0) && ((byte & 0x40) == 0)) ||\n                       ((value == -1) && ((byte & 0x40) != 0))));\n+\n         if more {\n             byte |= 0x80; // Mark this byte to show that more bytes will follow.\n         }\n \n         write(position, byte);\n         position += 1;\n+\n         if !more {\n             break;\n         }\n@@ -106,30 +108,28 @@ pub fn write_signed_leb128(out: &mut Vec<u8>, start_position: usize, value: i128\n \n #[inline]\n pub fn read_signed_leb128(data: &[u8], start_position: usize) -> (i128, usize) {\n-    let (l, r) = read_unsigned_leb128(data, start_position);\n-    (l as i128, r)\n-    // let mut result = 0;\n-    // let mut shift = 0;\n-    // let mut position = start_position;\n-    // let mut byte;\n-\n-    // loop {\n-    //     byte = data[position];\n-    //     position += 1;\n-    //     result |= ((byte & 0x7F) as i128) << shift;\n-    //     shift += 7;\n-\n-    //     if (byte & 0x80) == 0 {\n-    //         break;\n-    //     }\n-    // }\n-\n-    // if (shift < 64) && ((byte & 0x40) != 0) {\n-    //     // sign extend\n-    //     result |= -(1 << shift);\n-    // }\n-\n-    // (result, position - start_position)\n+    let mut result = 0;\n+    let mut shift = 0;\n+    let mut position = start_position;\n+    let mut byte;\n+\n+    loop {\n+        byte = data[position];\n+        position += 1;\n+        result |= ((byte & 0x7F) as i128) << shift;\n+        shift += 7;\n+\n+        if (byte & 0x80) == 0 {\n+            break;\n+        }\n+    }\n+\n+    if (shift < 64) && ((byte & 0x40) != 0) {\n+        // sign extend\n+        result |= -(1 << shift);\n+    }\n+\n+    (result, position - start_position)\n }\n \n #[test]"}, {"sha": "da4b787160fb2b921bdc2977ed19d335157abdb5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64de4e2731cff74e0c4b81d9389734dee7229db2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=64de4e2731cff74e0c4b81d9389734dee7229db2", "patch": "@@ -1201,8 +1201,8 @@ impl IntTy {\n     }\n \n     pub fn val_to_string(&self, val: i128) -> String {\n-        // cast to a u64 so we can correctly print INT64_MIN. All integral types\n-        // are parsed as u64, so we wouldn't want to print an extra negative\n+        // cast to a u128 so we can correctly print INT128_MIN. All integral types\n+        // are parsed as u128, so we wouldn't want to print an extra negative\n         // sign.\n         format!(\"{}{}\", val as u128, self.ty_to_string())\n     }"}]}