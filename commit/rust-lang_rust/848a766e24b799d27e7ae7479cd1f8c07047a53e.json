{"sha": "848a766e24b799d27e7ae7479cd1f8c07047a53e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OGE3NjZlMjRiNzk5ZDI3ZTdhZTc0NzljZDFmOGMwNzA0N2E1M2U=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-06-06T17:09:05Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-16T22:26:57Z"}, "message": "Use the scope of the imported variable for resolution, not the current scope\n\n- Accept DefId in resolve_str_path_error\n\nThis will probably break lots of internal invariants.", "tree": {"sha": "0e4ce16cb0e83e15c5b08b6e39059347fb2bd7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4ce16cb0e83e15c5b08b6e39059347fb2bd7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848a766e24b799d27e7ae7479cd1f8c07047a53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848a766e24b799d27e7ae7479cd1f8c07047a53e", "html_url": "https://github.com/rust-lang/rust/commit/848a766e24b799d27e7ae7479cd1f8c07047a53e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848a766e24b799d27e7ae7479cd1f8c07047a53e/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5271e98f4e8cf2e74e9b01fc2494ea9e90b08194", "url": "https://api.github.com/repos/rust-lang/rust/commits/5271e98f4e8cf2e74e9b01fc2494ea9e90b08194", "html_url": "https://github.com/rust-lang/rust/commit/5271e98f4e8cf2e74e9b01fc2494ea9e90b08194"}], "stats": {"total": 102, "additions": 95, "deletions": 7}, "files": [{"sha": "686385e24ece8052b6d86ddb6713c302450dfd3c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=848a766e24b799d27e7ae7479cd1f8c07047a53e", "patch": "@@ -2978,7 +2978,7 @@ impl<'a> Resolver<'a> {\n         span: Span,\n         path_str: &str,\n         ns: Namespace,\n-        module_id: LocalDefId,\n+        module_id: DefId,\n     ) -> Result<(ast::Path, Res), ()> {\n         let path = if path_str.starts_with(\"::\") {\n             ast::Path {\n@@ -2998,7 +2998,7 @@ impl<'a> Resolver<'a> {\n                     .collect(),\n             }\n         };\n-        let module = self.get_module(module_id.to_def_id());\n+        let module = self.get_module(module_id);\n         let parent_scope = &ParentScope::module(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))"}, {"sha": "6a52974534f8b66d627718e18327772272986310", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=848a766e24b799d27e7ae7479cd1f8c07047a53e", "patch": "@@ -430,7 +430,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                                 DUMMY_SP,\n                                 extern_name,\n                                 TypeNS,\n-                                LocalDefId { local_def_index: CRATE_DEF_INDEX },\n+                                LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n                             )\n                             .unwrap_or_else(|()| {\n                                 panic!(\"Unable to resolve external crate {}\", extern_name)"}, {"sha": "fce7096a1af7642cbde61c44394c93b2b6d00425", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/848a766e24b799d27e7ae7479cd1f8c07047a53e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=848a766e24b799d27e7ae7479cd1f8c07047a53e", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         &self,\n         path_str: &str,\n         current_item: &Option<String>,\n-        module_id: LocalDefId,\n+        module_id: DefId,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n         let cx = self.cx;\n \n@@ -167,15 +167,103 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n-        parent_id: Option<hir::HirId>,\n+        mut parent_id: Option<hir::HirId>,\n         extra_fragment: &Option<String>,\n         item_opt: Option<&Item>,\n     ) -> Result<(Res, Option<String>), ErrorKind> {\n+        use rustc_hir::{ItemKind, UseKind};\n+\n         let cx = self.cx;\n \n+        // In case this is a re-export, try to resolve the docs relative to the original module.\n+        // Since we don't document `use` statements,\n+        // we don't have to consider the case where an item is documented in both the original module and the current module.\n+        let mut module_id = None;\n+        if let Some(item) = item_opt {\n+            if let ItemEnum::ImportItem(import) = &item.inner {\n+                if let Import::Simple(_, source) = import {\n+                    if let Some(def_id) = source.did {\n+                        use crate::rustc_middle::ty::DefIdTree;\n+\n+                        //let mut current_id = def_id;\n+                        if cx.tcx.def_kind(def_id) == DefKind::Mod {\n+                            module_id = Some(def_id);\n+                            debug!(\"found parent module {:?} for use statement\", def_id);\n+                        //break;\n+                        } else {\n+                            debug!(\n+                                \"not a module: {:?} (maybe an associated item?)\",\n+                                cx.tcx.def_kind(def_id)\n+                            );\n+                        }\n+\n+                    /*\n+                    // For associated items, the parent module might be multiple nodes above\n+                    while let Some(parent) = cx.tcx.parent(current_id) {\n+                        if cx.tcx.def_kind(parent) == DefKind::Mod {\n+                            parent_id = Some(parent);\n+                            debug!(\"found parent module {:?} for use statement\", parent);\n+                            break;\n+                        }\n+                        current_id = parent;\n+                    }\n+                    */\n+                    } else {\n+                        debug!(\"no def id found\");\n+                    }\n+                } else {\n+                    debug!(\"glob imports not handled for intra-doc links\");\n+                }\n+            }\n+            /*\n+            if let Some(reexport) = item.reexport {\n+                use crate::rustc_middle::ty::DefIdTree;\n+\n+                let mut current_id = reexport;\n+                // For associated items, the parent module might be multiple nodes above\n+                while let Some(parent) = cx.tcx.parent(current_id) {\n+                    if cx.tcx.def_kind(parent) == DefKind::Mod {\n+                        parent_id = Some(parent);\n+                        debug!(\"found parent module {:?} for use statement\", parent);\n+                        break;\n+                    }\n+                    current_id = parent;\n+                }\n+            }\n+            */\n+            /*\n+            if let ItemKind::Use(path, use_kind) = item.kind {\n+                if use_kind == UseKind::Single {\n+                    match path.res {\n+                        Res::Def(def_kind, def_id) => {\n+                            use crate::rustc_middle::ty::DefIdTree;\n+\n+                            let mut current_id = def_id;\n+                            // For associated items, the parent module might be multiple nodes above\n+                            while let Some(parent) = cx.tcx.parent(current_id) {\n+                                if cx.tcx.def_kind(parent) == DefKind::Mod {\n+                                    parent_id = Some(parent);\n+                                    debug!(\"found parent module {:?} for use statement\", parent);\n+                                    break;\n+                                }\n+                                current_id = parent;\n+                            }\n+                        }\n+                        _ => debug!(\"use {:?} was not a definition, not treating as cross-crate\", item.name),\n+                    }\n+                } else {\n+                    debug!(\"don't know how to resolve multiple imports for {:?}, not treating as cross-crate\", path);\n+                }\n+            }\n+            */\n+        }\n+\n         // In case we're in a module, try to resolve the relative path.\n-        if let Some(module_id) = parent_id.or(self.mod_ids.last().cloned()) {\n-            let module_id = cx.tcx.hir().local_def_id(module_id);\n+        if module_id.is_none() {\n+            let id = parent_id.or(self.mod_ids.last().cloned());\n+            module_id = id.map(|id| cx.tcx.hir().local_def_id(id).to_def_id());\n+        }\n+        if let Some(module_id) = module_id {\n             let result = cx.enter_resolver(|resolver| {\n                 resolver.resolve_str_path_error(DUMMY_SP, &path_str, ns, module_id)\n             });"}]}