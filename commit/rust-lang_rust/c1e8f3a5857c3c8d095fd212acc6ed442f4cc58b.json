{"sha": "c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZThmM2E1ODU3YzNjOGQwOTVmZDIxMmFjYzZlZDQ0MmY0Y2M1OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T20:20:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-30T20:20:44Z"}, "message": "Auto merge of #85838 - GuillaumeGomez:rollup-rk2rh7m, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85285 (Add eslint checks to CI)\n - #85709 (Use correct edition when parsing `:pat` matchers)\n - #85762 (Do not try to build LLVM with Zlib on Windows)\n - #85770 (Remove `--print unversioned-files` from rustdoc )\n - #85781 (Add documentation for aarch64-apple-ios-sim target)\n - #85801 (Add `String::extend_from_within`)\n - #85817 (Fix a typo)\n - #85818 (Don't drop `PResult` without handling the error)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "017a5aec220066f1e9cbd5fb109f1c154705e4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017a5aec220066f1e9cbd5fb109f1c154705e4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "html_url": "https://github.com/rust-lang/rust/commit/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "758c00ea4088e1ca2714890f00c791c24f001536", "url": "https://api.github.com/repos/rust-lang/rust/commits/758c00ea4088e1ca2714890f00c791c24f001536", "html_url": "https://github.com/rust-lang/rust/commit/758c00ea4088e1ca2714890f00c791c24f001536"}, {"sha": "71a7f8f1884b2c83eeb4a545eef16df1f2ea6476", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a7f8f1884b2c83eeb4a545eef16df1f2ea6476", "html_url": "https://github.com/rust-lang/rust/commit/71a7f8f1884b2c83eeb4a545eef16df1f2ea6476"}], "stats": {"total": 242, "additions": 197, "deletions": 45}, "files": [{"sha": "6608573d720a84a9fb2a558c5925185d4d566bbd", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -467,6 +467,7 @@ pub fn compile_declarative_macro(\n                             &sess.parse_sess,\n                             def.id,\n                             features,\n+                            edition,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -492,6 +493,7 @@ pub fn compile_declarative_macro(\n                             &sess.parse_sess,\n                             def.id,\n                             features,\n+                            edition,\n                         )\n                         .pop()\n                         .unwrap();"}, {"sha": "fb7479eafc86f5e155640393e1efd8891f4c5873", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -9,7 +9,8 @@ use rustc_feature::Features;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{kw, Ident};\n \n-use rustc_span::Span;\n+use rustc_span::edition::Edition;\n+use rustc_span::{Span, SyntaxContext};\n \n use rustc_data_structures::sync::Lrc;\n \n@@ -32,6 +33,7 @@ const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `node_id`: the NodeId of the macro we are parsing.\n /// - `features`: language features so we can do feature gating.\n+/// - `edition`: the edition of the crate defining the macro\n ///\n /// # Returns\n ///\n@@ -42,6 +44,7 @@ pub(super) fn parse(\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n+    edition: Edition,\n ) -> Vec<TokenTree> {\n     // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n@@ -52,7 +55,7 @@ pub(super) fn parse(\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).\n-        let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features);\n+        let tree = parse_tree(tree, &mut trees, expect_matchers, sess, node_id, features, edition);\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n                 let span = match trees.next() {\n@@ -64,7 +67,19 @@ pub(super) fn parse(\n \n                                     let kind =\n                                         token::NonterminalKind::from_symbol(frag.name, || {\n-                                            span.edition()\n+                                            // FIXME(#85708) - once we properly decode a foreign\n+                                            // crate's `SyntaxContext::root`, then we can replace\n+                                            // this with just `span.edition()`. A\n+                                            // `SyntaxContext::root()` from the current crate will\n+                                            // have the edition of the current crate, and a\n+                                            // `SyntaxxContext::root()` from a foreign crate will\n+                                            // have the edition of that crate (which we manually\n+                                            // retrieve via the `edition` parameter).\n+                                            if span.ctxt() == SyntaxContext::root() {\n+                                                edition\n+                                            } else {\n+                                                span.edition()\n+                                            }\n                                         })\n                                         .unwrap_or_else(\n                                             || {\n@@ -117,13 +132,15 @@ pub(super) fn parse(\n /// - `expect_matchers`: same as for `parse` (see above).\n /// - `sess`: the parsing session. Any errors will be emitted to this session.\n /// - `features`: language features so we can do feature gating.\n+/// - `edition` - the edition of the crate defining the macro\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n     outer_trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n     node_id: NodeId,\n     features: &Features,\n+    edition: Edition,\n ) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n@@ -151,7 +168,7 @@ fn parse_tree(\n                         sess.span_diagnostic.span_err(span.entire(), &msg);\n                     }\n                     // Parse the contents of the sequence itself\n-                    let sequence = parse(tts, expect_matchers, sess, node_id, features);\n+                    let sequence = parse(tts, expect_matchers, sess, node_id, features, edition);\n                     // Get the Kleene operator and optional separator\n                     let (separator, kleene) =\n                         parse_sep_and_kleene_op(&mut trees, span.entire(), sess);\n@@ -204,7 +221,7 @@ fn parse_tree(\n             span,\n             Lrc::new(Delimited {\n                 delim,\n-                tts: parse(tts, expect_matchers, sess, node_id, features),\n+                tts: parse(tts, expect_matchers, sess, node_id, features, edition),\n             }),\n         ),\n     }"}, {"sha": "54e6ff6272c0594cfca0861a3b827ba3505c1b82", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -1474,7 +1474,10 @@ impl<'a> Parser<'a> {\n                 self.sess.gated_spans.gate(sym::unnamed_fields, lo);\n             } else {\n                 let err = if self.check_fn_front_matter(false) {\n-                    let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n+                    // We use `parse_fn` to get a span for the function\n+                    if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n+                        db.delay_as_bug();\n+                    }\n                     let mut err = self.struct_span_err(\n                         lo.to(self.prev_token.span),\n                         &format!(\"functions are not allowed in {} definitions\", adt_ty),"}, {"sha": "7bc9aa69be98eac13c970ee5ab9494dad8a7e91f", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -144,6 +144,7 @@\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]\n #![feature(decl_macro)]\n+#![feature(bindings_after_at)]\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": "dbe5bc1da460d7c42521ec175d5a8c13f539cde9", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -843,6 +843,42 @@ impl String {\n         self.vec.extend_from_slice(string.as_bytes())\n     }\n \n+    /// Copies elements from `src` range to the end of the string.\n+    ///\n+    /// ## Panics\n+    ///\n+    /// Panics if the starting point or end point do not lie on a [`char`]\n+    /// boundary, or if they're out of bounds.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(string_extend_from_within)]\n+    /// let mut string = String::from(\"abcde\");\n+    ///\n+    /// string.extend_from_within(2..);\n+    /// assert_eq!(string, \"abcdecde\");\n+    ///\n+    /// string.extend_from_within(..2);\n+    /// assert_eq!(string, \"abcdecdeab\");\n+    ///\n+    /// string.extend_from_within(4..8);\n+    /// assert_eq!(string, \"abcdecdeabecde\");\n+    /// ```\n+    #[cfg(not(no_global_oom_handling))]\n+    #[unstable(feature = \"string_extend_from_within\", issue = \"none\")]\n+    pub fn extend_from_within<R>(&mut self, src: R)\n+    where\n+        R: RangeBounds<usize>,\n+    {\n+        let src @ Range { start, end } = slice::range(src, ..self.len());\n+\n+        assert!(self.is_char_boundary(start));\n+        assert!(self.is_char_boundary(end));\n+\n+        self.vec.extend_from_within(src);\n+    }\n+\n     /// Returns this `String`'s capacity, in bytes.\n     ///\n     /// # Examples"}, {"sha": "0efc4893c3c42847a696197a1a223687cd9f0741", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -73,7 +73,7 @@ unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n // `Option<num::NonZeroU32>` and similar have a representation guarantee that\n // they're the same size as the corresponding `u32` type, as well as a guarantee\n // that transmuting between `NonZeroU32` and `Option<num::NonZeroU32>` works.\n-// While the documentation officially makes in UB to transmute from `None`,\n+// While the documentation officially makes it UB to transmute from `None`,\n // we're the standard library so we can make extra inferences, and we know that\n // the only niche available to represent `None` is the one that's all zeros.\n "}, {"sha": "3f4715e78a9abd5de5fe2ffa6fa927107c2a9016", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -181,7 +181,7 @@ impl Step for Llvm {\n             .define(\"LLVM_TARGET_ARCH\", target_native.split('-').next().unwrap())\n             .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native);\n \n-        if target != \"aarch64-apple-darwin\" {\n+        if target != \"aarch64-apple-darwin\" && !target.contains(\"windows\") {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"ON\");\n         } else {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"OFF\");"}, {"sha": "66afe84be4a27cb9d5feb4c50fab247cf7d01f39", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -22,6 +22,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # Install es-check\n # Pin its version to prevent unrelated CI failures due to future es-check versions.\n RUN npm install es-check@5.2.3 -g\n+RUN npm install eslint@7.20.0 -g\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n@@ -37,4 +38,5 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py doc --stage 0 library/test && \\\n            /scripts/validate-toolstate.sh && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n-           es-check es5 ../src/librustdoc/html/static/*.js\n+           es-check es5 ../src/librustdoc/html/static/*.js && \\\n+           eslint ../src/librustdoc/html/static/*.js"}, {"sha": "bc1873b6836be90eeb3ae50ce219764f5aaf3f39", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -13,6 +13,7 @@\n - [JSON Output](json.md)\n - [Tests](tests/index.md)\n - [Platform Support](platform-support.md)\n+    - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n - [Target Tier Policy](target-tier-policy.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)"}, {"sha": "321d3c5c44ea1db0e76449438b178137b33556f0", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -196,7 +196,7 @@ host tools.\n target | std | host | notes\n -------|:---:|:----:|-------\n `aarch64-apple-ios-macabi` | ? |  | Apple Catalyst on ARM64\n-`aarch64-apple-ios-sim` | ? |  | Apple iOS Simulator on ARM64\n+[`aarch64-apple-ios-sim`](platform-support/aarch64-apple-ios-sim.md) | \u2713 |  | Apple iOS Simulator on ARM64\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |"}, {"sha": "9aa5db26f917ea5a24fc1fcb2f18460222e6ef65", "filename": "src/doc/rustc/src/platform-support/aarch64-apple-ios-sim.md", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Faarch64-apple-ios-sim.md?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,56 @@\n+# aarch64-apple-ios-sim\n+\n+**Tier: 3**\n+\n+Apple iOS Simulator on ARM64.\n+\n+## Designated Developers\n+\n+* [@badboy](https://github.com/badboy)\n+* [@deg4uss3r](https://github.com/deg4uss3r)\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+To build this target Xcode 12 or higher on macOS is required.\n+\n+## Building\n+\n+The target can be built by enabling it for a `rustc` build:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"aarch64-apple-ios-sim\"]\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from `x86_64` or `aarch64` macOS hosts.\n+\n+Other hosts are not supported for cross-compilation, but might work when also providing the required Xcode SDK.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+\n+## Building Rust programs\n+\n+*Note: Building for this target requires the corresponding iOS SDK, as provided by Xcode 12+.*\n+\n+If `rustc` has support for that target and the library artifacts are available,\n+then Rust programs can be built for that target:\n+\n+```text\n+rustc --target aarch64-apple-ios-sim your-code.rs\n+```\n+\n+On Rust Nightly it is possible to build without the target artifacts available:\n+\n+```text\n+cargo build -Z build-std --target aarch64-apple-ios-sim\n+```\n+\n+There is no easy way to run simple programs in the iOS simulator.\n+Static library builds can be embedded into iOS applications."}, {"sha": "90b3733821622a9f249d6bb9402325dd51e7fcef", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -349,13 +349,6 @@ impl Options {\n             return Err(0);\n         }\n \n-        if matches.opt_strs(\"print\").iter().any(|opt| opt == \"unversioned-files\") {\n-            for file in crate::html::render::FILES_UNVERSIONED.keys() {\n-                println!(\"{}\", file);\n-            }\n-            return Err(0);\n-        }\n-\n         let color = config::parse_color(&matches);\n         let config::JsonConfig { json_rendered, json_unused_externs, .. } =\n             config::parse_json(&matches);"}, {"sha": "507c5e175f9b482bb15b877fed775661e3a2ac7e", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -33,7 +33,6 @@ mod print_item;\n mod write_shared;\n \n crate use context::*;\n-crate use write_shared::FILES_UNVERSIONED;\n \n use std::collections::VecDeque;\n use std::default::Default;"}, {"sha": "73ffec0dd4eeb5b3ae08a1be66c0109efef85d00", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -18,7 +18,7 @@ use crate::docfs::PathError;\n use crate::error::Error;\n use crate::html::{layout, static_files};\n \n-crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n+static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n     map! {\n         \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR2,\n         \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM2,"}, {"sha": "256cd2740a010a90dbfe320f13cb6d4cf5062a69", "filename": "src/librustdoc/html/static/sidebar-items.js", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsidebar-items.js", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsidebar-items.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsidebar-items.js?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -1 +1,2 @@\n+/* global initSidebarItems */\n initSidebarItems({});"}, {"sha": "bf0be62635630d99dd8a4fcb47e3a0866b029b1f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -581,9 +581,6 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"Generate JSON file at the top level instead of generating HTML redirection files\",\n             )\n         }),\n-        unstable(\"print\", |o| {\n-            o.optmulti(\"\", \"print\", \"Rustdoc information to print on stdout\", \"[unversioned-files]\")\n-        }),\n         unstable(\"emit\", |o| {\n             o.optmulti(\n                 \"\","}, {"sha": "e368f61cddfc3f5bc7e74e2f6484b55388a6b5b4", "filename": "src/test/run-make-fulldeps/print-unversioned-files/Makefile", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/758c00ea4088e1ca2714890f00c791c24f001536/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/758c00ea4088e1ca2714890f00c791c24f001536/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2FMakefile?ref=758c00ea4088e1ca2714890f00c791c24f001536", "patch": "@@ -1,4 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTDOC) -Z unstable-options --print unversioned-files | sort | diff - unversioned-files.txt"}, {"sha": "348cd1fdf37b3d3ceed08eb9d862824187ba1c7e", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/758c00ea4088e1ca2714890f00c791c24f001536/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/758c00ea4088e1ca2714890f00c791c24f001536/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=758c00ea4088e1ca2714890f00c791c24f001536", "patch": "@@ -1,18 +0,0 @@\n-COPYRIGHT.txt\n-FiraSans-LICENSE.txt\n-FiraSans-Medium.woff\n-FiraSans-Medium.woff2\n-FiraSans-Regular.woff\n-FiraSans-Regular.woff2\n-LICENSE-APACHE.txt\n-LICENSE-MIT.txt\n-SourceCodePro-It.ttf.woff\n-SourceCodePro-LICENSE.txt\n-SourceCodePro-Regular.ttf.woff\n-SourceCodePro-Semibold.ttf.woff\n-SourceSerif4-Bold.ttf.woff\n-SourceSerif4-It.ttf.woff\n-SourceSerif4-LICENSE.md\n-SourceSerif4-Regular.ttf.woff\n-noto-sans-kr-v13-korean-regular-LICENSE.txt\n-noto-sans-kr-v13-korean-regular.woff"}, {"sha": "26d4c96d52433c296a823aadbf5c5614542b3abe", "filename": "src/test/ui/macros/auxiliary/foreign-crate-macro-pat.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fforeign-crate-macro-pat.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+#[macro_export]\n+macro_rules! custom_matches {\n+    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )? $(,)?) => {\n+        match $expression {\n+            $( $pattern )|+ $( if $guard )? => true,\n+            _ => false\n+        }\n+    }\n+}"}, {"sha": "ed67142ce3de2b20fd9af49a2630e7b89350dfe4", "filename": "src/test/ui/macros/cross-crate-pat-span.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcross-crate-pat-span.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+// check-pass\n+// aux-build: foreign-crate-macro-pat.rs\n+//\n+// Tests that the edition of the foreign crate is used\n+// when determining the behavior of the `:pat` matcher.\n+\n+extern crate foreign_crate_macro_pat;\n+\n+fn main() {\n+    let _b = foreign_crate_macro_pat::custom_matches!(b'3', b'0' ..= b'9');\n+}"}, {"sha": "53f134c265fd75c2b6615f574875894b163153ef", "filename": "src/test/ui/macros/issue-84429-matches-edition.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84429-matches-edition.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,9 @@\n+// edition:2021\n+// check-pass\n+//\n+// Regression test for issue #84429\n+// Tests that we can properly invoke `matches!` from a 2021-edition crate.\n+\n+fn main() {\n+    let _b = matches!(b'3', b'0' ..= b'9');\n+}"}, {"sha": "4ea55062fc4be1777552c0537c64d1f2165036b0", "filename": "src/test/ui/parser/fn-field-parse-error-ice.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #85794\n+\n+struct Baz {\n+    inner : dyn fn ()\n+    //~^ ERROR expected `,`, or `}`, found keyword `fn`\n+    //~| ERROR functions are not allowed in struct definitions\n+    //~| ERROR cannot find type `dyn` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "d582f61cc97a9e1fb9108d5f16b55544f2109e1f", "filename": "src/test/ui/parser/fn-field-parse-error-ice.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-field-parse-error-ice.stderr?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -0,0 +1,24 @@\n+error: expected `,`, or `}`, found keyword `fn`\n+  --> $DIR/fn-field-parse-error-ice.rs:4:16\n+   |\n+LL |     inner : dyn fn ()\n+   |                ^ help: try adding a comma: `,`\n+\n+error: functions are not allowed in struct definitions\n+  --> $DIR/fn-field-parse-error-ice.rs:4:17\n+   |\n+LL |     inner : dyn fn ()\n+   |                 ^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error[E0412]: cannot find type `dyn` in this scope\n+  --> $DIR/fn-field-parse-error-ice.rs:4:13\n+   |\n+LL |     inner : dyn fn ()\n+   |             ^^^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "a41e2d6e3aa45690c943fb6cc258da6cc7997b9a", "filename": "src/tools/tier-check/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftier-check%2Fsrc%2Fmain.rs?ref=c1e8f3a5857c3c8d095fd212acc6ed442f4cc58b", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     let doc_targets_md = std::fs::read_to_string(&src).expect(\"failed to read input source\");\n     let doc_targets: HashSet<_> = doc_targets_md\n         .lines()\n-        .filter(|line| line.starts_with('`') && line.contains('|'))\n+        .filter(|line| line.starts_with(&['`', '['][..]) && line.contains('|'))\n         .map(|line| line.split('`').skip(1).next().expect(\"expected target code span\"))\n         .collect();\n "}]}