{"sha": "b039be1e5ca039747b2c8a65b8cb4df14d27b476", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMzliZTFlNWNhMDM5NzQ3YjJjOGE2NWI4Y2I0ZGYxNGQyN2I0NzY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T21:58:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T21:58:19Z"}, "message": "Pass tydescs to parametric fns.", "tree": {"sha": "7550c491f54171578e16c84fac1e15ad0fd6cb17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7550c491f54171578e16c84fac1e15ad0fd6cb17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b039be1e5ca039747b2c8a65b8cb4df14d27b476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b039be1e5ca039747b2c8a65b8cb4df14d27b476", "html_url": "https://github.com/rust-lang/rust/commit/b039be1e5ca039747b2c8a65b8cb4df14d27b476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b039be1e5ca039747b2c8a65b8cb4df14d27b476/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1a4ab23c6493d72e41b5ed8d87e7741e847154", "html_url": "https://github.com/rust-lang/rust/commit/fe1a4ab23c6493d72e41b5ed8d87e7741e847154"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "a01e0d0724b9663b6b63490fd099e46d2ada09f6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b039be1e5ca039747b2c8a65b8cb4df14d27b476/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b039be1e5ca039747b2c8a65b8cb4df14d27b476/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b039be1e5ca039747b2c8a65b8cb4df14d27b476", "patch": "@@ -311,6 +311,7 @@ fn type_of(@crate_ctxt cx, @ty.t t) -> TypeRef {\n     ret llty;\n }\n \n+// NB: this function must match the ABI assumptions of trans_args exactly.\n fn type_of_fn_full(@crate_ctxt cx,\n                    option.t[TypeRef] obj_self,\n                    vec[ty.arg] inputs,\n@@ -1758,17 +1759,20 @@ impure fn trans_alt(@block_ctxt cx, @ast.expr expr, vec[ast.arm] arms)\n \n type lval_result = rec(result res,\n                        bool is_mem,\n+                       option.t[vec[ValueRef]] lltys,\n                        option.t[ValueRef] llobj);\n \n fn lval_mem(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=true,\n+            lltys=none[vec[ValueRef]],\n             llobj=none[ValueRef]);\n }\n \n fn lval_val(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=false,\n+            lltys=none[vec[ValueRef]],\n             llobj=none[ValueRef]);\n }\n \n@@ -1800,11 +1804,19 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     auto fn_item = cx.fcx.ccx.items.get(did);\n                     auto monoty = node_ann_type(cx.fcx.ccx, ann);\n                     auto tys = ty.resolve_ty_params(fn_item, monoty);\n+                    auto vt = none[vec[ValueRef]];\n \n-                    // TODO: build a closure with the type parameters that\n-                    // result\n+                    if (_vec.len[@ty.t](tys) != 0u) {\n+                        let vec[ValueRef] tydescs = vec();\n+                        for (@ty.t t in tys) {\n+                            append[ValueRef](tydescs,\n+                                             get_tydesc(cx, t));\n+                        }\n+                        vt = some[vec[ValueRef]](tydescs);\n+                    }\n \n-                    ret lval_val(cx, cx.fcx.ccx.fn_pairs.get(did));\n+                    auto lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(did));\n+                    ret rec(lltys = vt with lv);\n                 }\n                 case (ast.def_obj(?did)) {\n                     check (cx.fcx.ccx.fn_pairs.contains_key(did));\n@@ -1952,9 +1964,13 @@ impure fn trans_cast(@block_ctxt cx, @ast.expr e, &ast.ann ann) -> result {\n }\n \n \n-impure fn trans_args(@block_ctxt cx, ValueRef llclosure,\n+// NB: this function must match the ABI assumptions of type_of_fn_full exactly.\n+impure fn trans_args(@block_ctxt cx,\n+                     ValueRef llclosure,\n                      option.t[ValueRef] llobj,\n-                     &vec[@ast.expr] es, @ty.t fn_ty)\n+                     option.t[vec[ValueRef]] lltydescs,\n+                     &vec[@ast.expr] es,\n+                     @ty.t fn_ty)\n     -> tup(@block_ctxt, vec[ValueRef]) {\n     let vec[ValueRef] vs = vec(cx.fcx.lltaskptr);\n     let @block_ctxt bcx = cx;\n@@ -1965,6 +1981,15 @@ impure fn trans_args(@block_ctxt cx, ValueRef llclosure,\n         case (_) { fail; }\n     }\n \n+    alt (lltydescs) {\n+        case (some[vec[ValueRef]](?tys)) {\n+            for (ValueRef t in tys) {\n+                vs += t;\n+            }\n+        }\n+        case (_) { }\n+    }\n+\n     alt (llobj) {\n         case (some[ValueRef](?ob)) {\n             // Every object is always found in memory,\n@@ -2250,7 +2275,9 @@ impure fn trans_call(@block_ctxt cx, @ast.expr f,\n     }\n     auto fn_ty = ty.expr_ty(f);\n     auto ret_ty = ty.ann_to_type(ann);\n-    auto args_res = trans_args(f_res.res.bcx, llclosure, f_res.llobj,\n+    auto args_res = trans_args(f_res.res.bcx,\n+                               llclosure, f_res.llobj,\n+                               f_res.lltys,\n                                args, fn_ty);\n \n     auto real_retval = args_res._0.build.FastCall(faddr, args_res._1);"}]}