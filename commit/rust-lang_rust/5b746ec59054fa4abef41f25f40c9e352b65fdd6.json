{"sha": "5b746ec59054fa4abef41f25f40c9e352b65fdd6", "node_id": "C_kwDOAAsO6NoAKDViNzQ2ZWM1OTA1NGZhNGFiZWY0MWYyNWY0MGM5ZTM1MmI2NWZkZDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T11:34:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T11:34:08Z"}, "message": "Auto merge of #12481 - XFFXFF:add_label_to_loop, r=Veykril\n\nassist: add label to loop\n\ncloses: #12392\n\nI changed `'loop` to `'l`, as `cargo check` says `'loop` is an invalid label name.", "tree": {"sha": "6a0055c790db2523a121786c8aa1993352c7e4b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0055c790db2523a121786c8aa1993352c7e4b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b746ec59054fa4abef41f25f40c9e352b65fdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b746ec59054fa4abef41f25f40c9e352b65fdd6", "html_url": "https://github.com/rust-lang/rust/commit/5b746ec59054fa4abef41f25f40c9e352b65fdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b746ec59054fa4abef41f25f40c9e352b65fdd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba329913fa33c29d4ccabf46998d3a0cfac57b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba329913fa33c29d4ccabf46998d3a0cfac57b0c", "html_url": "https://github.com/rust-lang/rust/commit/ba329913fa33c29d4ccabf46998d3a0cfac57b0c"}, {"sha": "e29a6780b1f1076564a00223193fb563b644cdd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e29a6780b1f1076564a00223193fb563b644cdd7", "html_url": "https://github.com/rust-lang/rust/commit/e29a6780b1f1076564a00223193fb563b644cdd7"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "a14cc459899fdf8d356fe34dfc1365cf93b3b366", "filename": "crates/ide-assists/src/handlers/add_label_to_loop.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_label_to_loop.rs?ref=5b746ec59054fa4abef41f25f40c9e352b65fdd6", "patch": "@@ -0,0 +1,164 @@\n+use ide_db::syntax_helpers::node_ext::for_each_break_and_continue_expr;\n+use syntax::{\n+    ast::{self, AstNode, HasLoopBody},\n+    T,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: add_label_to_loop\n+//\n+// Adds a label to a loop.\n+//\n+// ```\n+// fn main() {\n+//     loop$0 {\n+//         break;\n+//         continue;\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     'l: loop {\n+//         break 'l;\n+//         continue 'l;\n+//     }\n+// }\n+// ```\n+pub(crate) fn add_label_to_loop(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let loop_kw = ctx.find_token_syntax_at_offset(T![loop])?;\n+    let loop_expr = loop_kw.parent().and_then(ast::LoopExpr::cast)?;\n+    if loop_expr.label().is_some() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"add_label_to_loop\", AssistKind::Generate),\n+        \"Add Label\",\n+        loop_expr.syntax().text_range(),\n+        |builder| {\n+            builder.insert(loop_kw.text_range().start(), \"'l: \");\n+\n+            let loop_body = loop_expr.loop_body().and_then(|it| it.stmt_list());\n+            for_each_break_and_continue_expr(\n+                loop_expr.label(),\n+                loop_body,\n+                &mut |expr| match expr {\n+                    ast::Expr::BreakExpr(break_expr) => {\n+                        if let Some(break_token) = break_expr.break_token() {\n+                            builder.insert(break_token.text_range().end(), \" 'l\")\n+                        }\n+                    }\n+                    ast::Expr::ContinueExpr(continue_expr) => {\n+                        if let Some(continue_token) = continue_expr.continue_token() {\n+                            builder.insert(continue_token.text_range().end(), \" 'l\")\n+                        }\n+                    }\n+                    _ => {}\n+                },\n+            );\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn add_label() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop$0 {\n+        break;\n+        continue;\n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    'l: loop {\n+        break 'l;\n+        continue 'l;\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_label_to_outer_loop() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop$0 {\n+        break;\n+        continue;\n+        loop {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    'l: loop {\n+        break 'l;\n+        continue 'l;\n+        loop {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_label_to_inner_loop() {\n+        check_assist(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    loop {\n+        break;\n+        continue;\n+        loop$0 {\n+            break;\n+            continue;\n+        }\n+    }\n+}\"#,\n+            r#\"\n+fn main() {\n+    loop {\n+        break;\n+        continue;\n+        'l: loop {\n+            break 'l;\n+            continue 'l;\n+        }\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn do_not_add_label_if_exists() {\n+        check_assist_not_applicable(\n+            add_label_to_loop,\n+            r#\"\n+fn main() {\n+    'l: loop$0 {\n+        break 'l;\n+        continue 'l;\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "7b9134efb48cc99c655628888c8558fa09450ba2", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=5b746ec59054fa4abef41f25f40c9e352b65fdd6", "patch": "@@ -104,6 +104,7 @@ mod handlers {\n     pub(crate) type Handler = fn(&mut Assists, &AssistContext) -> Option<()>;\n \n     mod add_explicit_type;\n+    mod add_label_to_loop;\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n@@ -193,6 +194,7 @@ mod handlers {\n         &[\n             // These are alphabetic for the foolish consistency\n             add_explicit_type::add_explicit_type,\n+            add_label_to_loop::add_label_to_loop,\n             add_missing_match_arms::add_missing_match_arms,\n             add_lifetime_to_type::add_lifetime_to_type,\n             add_return_type::add_return_type,"}, {"sha": "e8d48607be0e9f938814bb94f5995ae6d84bad40", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b746ec59054fa4abef41f25f40c9e352b65fdd6/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5b746ec59054fa4abef41f25f40c9e352b65fdd6", "patch": "@@ -102,6 +102,29 @@ impl Trait<u32> for () {\n     )\n }\n \n+#[test]\n+fn doctest_add_label_to_loop() {\n+    check_doc_test(\n+        \"add_label_to_loop\",\n+        r#####\"\n+fn main() {\n+    loop$0 {\n+        break;\n+        continue;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    'l: loop {\n+        break 'l;\n+        continue 'l;\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_lifetime_to_type() {\n     check_doc_test("}]}