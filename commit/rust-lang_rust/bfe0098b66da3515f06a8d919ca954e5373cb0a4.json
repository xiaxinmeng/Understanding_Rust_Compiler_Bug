{"sha": "bfe0098b66da3515f06a8d919ca954e5373cb0a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZTAwOThiNjZkYTM1MTVmMDZhOGQ5MTljYTk1NGU1MzczY2IwYTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-06-29T08:40:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T08:40:07Z"}, "message": "Rollup merge of #42919 - zackmdavis:once_again_we_heard_you_the_first_time, r=eddyb\n\nmake lint on-by-default/implied-by messages appear only once\n\nFrom review discussion on #38103 (https://github.com/rust-lang/rust/pull/38103#discussion_r94845060).\n\n![we_heard](https://user-images.githubusercontent.com/1076988/27564103-6284b78e-5a8a-11e7-9d35-f7f297ca9573.png)\n\nr? @nikomatsakis", "tree": {"sha": "9b0436e99272f16156c350f94e2e5df0e642f22d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0436e99272f16156c350f94e2e5df0e642f22d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfe0098b66da3515f06a8d919ca954e5373cb0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe0098b66da3515f06a8d919ca954e5373cb0a4", "html_url": "https://github.com/rust-lang/rust/commit/bfe0098b66da3515f06a8d919ca954e5373cb0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfe0098b66da3515f06a8d919ca954e5373cb0a4/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea762f2bff365a76b9dc18417e8c6e012815d960", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea762f2bff365a76b9dc18417e8c6e012815d960", "html_url": "https://github.com/rust-lang/rust/commit/ea762f2bff365a76b9dc18417e8c6e012815d960"}, {"sha": "32b8579b6826091e11ea6d90a2d64f4975894032", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b8579b6826091e11ea6d90a2d64f4975894032", "html_url": "https://github.com/rust-lang/rust/commit/32b8579b6826091e11ea6d90a2d64f4975894032"}], "stats": {"total": 104, "additions": 63, "deletions": 41}, "files": [{"sha": "8202c6106d14753e67db667eaeba4e2582f91a57", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bfe0098b66da3515f06a8d919ca954e5373cb0a4", "patch": "@@ -510,7 +510,6 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n     }\n \n     let name = lint.name_lower();\n-    let mut def = None;\n \n     // Except for possible note details, forbid behaves like deny.\n     let effective_level = if level == Forbid { Deny } else { level };\n@@ -525,7 +524,8 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n \n     match source {\n         Default => {\n-            err.note(&format!(\"#[{}({})] on by default\", level.as_str(), name));\n+            sess.diag_note_once(&mut err, lint,\n+                                &format!(\"#[{}({})] on by default\", level.as_str(), name));\n         },\n         CommandLine(lint_flag_val) => {\n             let flag = match level {\n@@ -534,20 +534,24 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n             };\n             let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n             if lint_flag_val.as_str() == name {\n-                err.note(&format!(\"requested on the command line with `{} {}`\",\n-                                  flag, hyphen_case_lint_name));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"requested on the command line with `{} {}`\",\n+                                             flag, hyphen_case_lint_name));\n             } else {\n                 let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n-                err.note(&format!(\"`{} {}` implied by `{} {}`\",\n-                                  flag, hyphen_case_lint_name, flag, hyphen_case_flag_val));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"`{} {}` implied by `{} {}`\",\n+                                             flag, hyphen_case_lint_name, flag,\n+                                             hyphen_case_flag_val));\n             }\n         },\n         Node(lint_attr_name, src) => {\n-            def = Some(src);\n+            sess.diag_span_note_once(&mut err, lint, src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n-                err.note(&format!(\"#[{}({})] implied by #[{}({})]\",\n-                                  level_str, name, level_str, lint_attr_name));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"#[{}({})] implied by #[{}({})]\",\n+                                             level_str, name, level_str, lint_attr_name));\n             }\n         }\n     }\n@@ -563,10 +567,6 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n         err.note(&citation);\n     }\n \n-    if let Some(span) = def {\n-        sess.diag_span_note_once(&mut err, lint, span, \"lint level defined here\");\n-    }\n-\n     err\n }\n "}, {"sha": "fb513f573d7e2bf83465b9c3aa1c1bd73888982c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=bfe0098b66da3515f06a8d919ca954e5373cb0a4", "patch": "@@ -79,10 +79,10 @@ pub struct Session {\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<lint::LintTable>,\n-    /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n-    /// that have been set once, but should not be set again, in order to avoid\n-    /// redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Span, String)>>,\n+    /// Set of (LintId, Option<Span>, message) tuples tracking lint\n+    /// (sub)diagnostics that have been set once, but should not be set again,\n+    /// in order to avoid redundantly verbose output (Issue #24690).\n+    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n@@ -157,6 +157,13 @@ pub struct PerfStats {\n     pub decode_def_path_tables_time: Cell<Duration>,\n }\n \n+/// Enum to support dispatch of one-time diagnostics (in Session.diag_once)\n+enum DiagnosticBuilderMethod {\n+    Note,\n+    SpanNote,\n+    // add more variants as needed to support one-time diagnostics\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> Symbol {\n         *self.crate_disambiguator.borrow()\n@@ -329,34 +336,53 @@ impl Session {\n         &self.parse_sess.span_diagnostic\n     }\n \n-    /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n-    /// deduplicates on lint ID, span, and message for this `Session` if we're\n-    /// not outputting in JSON mode.\n-    //\n-    // FIXME: if the need arises for one-time diagnostics other than\n-    // `span_note`, we almost certainly want to generalize this\n-    // \"check/insert-into the one-time diagnostics map, then set message if\n-    // it's not already there\" code to accomodate all of them\n-    pub fn diag_span_note_once<'a, 'b>(&'a self,\n-                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                       lint: &'static lint::Lint, span: Span, message: &str) {\n+    /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n+    /// deduplicates on lint ID, span (if any), and message for this `Session`\n+    /// if we're not outputting in JSON mode.\n+    fn diag_once<'a, 'b>(&'a self,\n+                         diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                         method: DiagnosticBuilderMethod,\n+                         lint: &'static lint::Lint, message: &str, span: Option<Span>) {\n+        let mut do_method = || {\n+            match method {\n+                DiagnosticBuilderMethod::Note => {\n+                    diag_builder.note(message);\n+                },\n+                DiagnosticBuilderMethod::SpanNote => {\n+                    diag_builder.span_note(span.expect(\"span_note expects a span\"), message);\n+                }\n+            }\n+        };\n+\n         match self.opts.error_format {\n             // when outputting JSON for tool consumption, the tool might want\n             // the duplicates\n             config::ErrorOutputType::Json => {\n-                diag_builder.span_note(span, &message);\n+                do_method()\n             },\n             _ => {\n                 let lint_id = lint::LintId::of(lint);\n                 let id_span_message = (lint_id, span, message.to_owned());\n                 let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {\n-                    diag_builder.span_note(span, &message);\n+                    do_method()\n                 }\n             }\n         }\n     }\n \n+    pub fn diag_span_note_once<'a, 'b>(&'a self,\n+                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                       lint: &'static lint::Lint, span: Span, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote, lint, message, Some(span));\n+    }\n+\n+    pub fn diag_note_once<'a, 'b>(&'a self,\n+                                  diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                  lint: &'static lint::Lint, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, lint, message, None);\n+    }\n+\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         self.parse_sess.codemap()\n     }"}, {"sha": "636370de302b64c710498a7556da0034ea5a27f0", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=bfe0098b66da3515f06a8d919ca954e5373cb0a4", "patch": "@@ -4,64 +4,64 @@ error: function `CamelCase` should have a snake case name such as `camel_case`\n 14 | fn CamelCase() {}\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:11:9\n    |\n 11 | #![deny(bad_style)]\n    |         ^^^^^^^^^\n+   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n \n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:22:9\n    |\n 22 |         fn CamelCase() {}\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n 20 |     #[forbid(bad_style)]\n    |              ^^^^^^^^^\n+   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n \n error: static variable `bad` should have an upper case name such as `BAD`\n   --> $DIR/lint-group-style.rs:24:9\n    |\n 24 |         static bad: isize = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n 20 |     #[forbid(bad_style)]\n    |              ^^^^^^^^^\n+   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n \n warning: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:30:9\n    |\n 30 |         fn CamelCase() {}\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n 28 |         #![warn(bad_style)]\n    |                 ^^^^^^^^^\n+   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n \n warning: type `snake_case` should have a camel case name such as `SnakeCase`\n   --> $DIR/lint-group-style.rs:32:9\n    |\n 32 |         struct snake_case;\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n 28 |         #![warn(bad_style)]\n    |                 ^^^^^^^^^\n+   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n \n error: aborting due to previous error(s)\n "}, {"sha": "8fd1b8de68787c71e2ffffc6df8de2a65f714a79", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=bfe0098b66da3515f06a8d919ca954e5373cb0a4", "patch": "@@ -23,6 +23,4 @@ warning: function is never used: `no_parens`\n 20 | |   return <T as ToString>::to_string(&arg);\n 21 | | }\n    | |_^\n-   |\n-   = note: #[warn(dead_code)] on by default\n "}, {"sha": "edc150f65eafc0e7ca137ce8e27b0dfbf20fb590", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfe0098b66da3515f06a8d919ca954e5373cb0a4/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=bfe0098b66da3515f06a8d919ca954e5373cb0a4", "patch": "@@ -4,33 +4,31 @@ error: variable `theTwo` should have a snake case name such as `the_two`\n 19 |     let theTwo = 2;\n    |         ^^^^^^\n    |\n-   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n 16 | #![deny(warnings)]\n    |         ^^^^^^^^\n+   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n \n error: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n-   |\n-   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n \n error: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n    |\n-   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n 16 | #![deny(warnings)]\n    |         ^^^^^^^^\n+   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n \n error: aborting due to previous error(s)\n "}]}