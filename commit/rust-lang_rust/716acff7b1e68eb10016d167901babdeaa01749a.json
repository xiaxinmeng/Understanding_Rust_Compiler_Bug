{"sha": "716acff7b1e68eb10016d167901babdeaa01749a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNmFjZmY3YjFlNjhlYjEwMDE2ZDE2NzkwMWJhYmRlYWEwMTc0OWE=", "commit": {"author": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2020-05-24T14:14:06Z"}, "committer": {"name": "Hoe Hao Cheng", "email": "haochengho12907@gmail.com", "date": "2020-05-24T14:14:06Z"}, "message": "Remove heterogeneous ordering for SocketAddr", "tree": {"sha": "ca76ba439486a361752026c17b0749afaa4c9261", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca76ba439486a361752026c17b0749afaa4c9261"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/716acff7b1e68eb10016d167901babdeaa01749a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/716acff7b1e68eb10016d167901babdeaa01749a", "html_url": "https://github.com/rust-lang/rust/commit/716acff7b1e68eb10016d167901babdeaa01749a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/716acff7b1e68eb10016d167901babdeaa01749a/comments", "author": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hch12907", "id": 7030150, "node_id": "MDQ6VXNlcjcwMzAxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7030150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hch12907", "html_url": "https://github.com/hch12907", "followers_url": "https://api.github.com/users/hch12907/followers", "following_url": "https://api.github.com/users/hch12907/following{/other_user}", "gists_url": "https://api.github.com/users/hch12907/gists{/gist_id}", "starred_url": "https://api.github.com/users/hch12907/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hch12907/subscriptions", "organizations_url": "https://api.github.com/users/hch12907/orgs", "repos_url": "https://api.github.com/users/hch12907/repos", "events_url": "https://api.github.com/users/hch12907/events{/privacy}", "received_events_url": "https://api.github.com/users/hch12907/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6", "html_url": "https://github.com/rust-lang/rust/commit/27fc7e5e7a4fe9f21624541ab422f5bfa9ea8fa6"}], "stats": {"total": 70, "additions": 15, "deletions": 55}, "files": [{"sha": "6142d5a9e0dab7a73ac3ed225456664b9434eab2", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 15, "deletions": 55, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/716acff7b1e68eb10016d167901babdeaa01749a/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/716acff7b1e68eb10016d167901babdeaa01749a/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=716acff7b1e68eb10016d167901babdeaa01749a", "patch": "@@ -702,53 +702,13 @@ impl PartialOrd for SocketAddrV4 {\n     }\n }\n \n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialOrd<SocketAddr> for SocketAddrV4 {\n-    fn partial_cmp(&self, other: &SocketAddr) -> Option<Ordering> {\n-        match other {\n-            SocketAddr::V4(v4) => self.partial_cmp(v4),\n-            SocketAddr::V6(_) => Some(Ordering::Less),\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialOrd<SocketAddrV4> for SocketAddr {\n-    fn partial_cmp(&self, other: &SocketAddrV4) -> Option<Ordering> {\n-        match self {\n-            SocketAddr::V4(v4) => v4.partial_cmp(other),\n-            SocketAddr::V6(_) => Some(Ordering::Greater),\n-        }\n-    }\n-}\n-\n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl PartialOrd for SocketAddrV6 {\n     fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n         Some(self.cmp(other))\n     }\n }\n \n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialOrd<SocketAddr> for SocketAddrV6 {\n-    fn partial_cmp(&self, other: &SocketAddr) -> Option<Ordering> {\n-        match other {\n-            SocketAddr::V4(_) => Some(Ordering::Greater),\n-            SocketAddr::V6(v6) => self.partial_cmp(v6),\n-        }\n-    }\n-}\n-\n-#[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n-impl PartialOrd<SocketAddrV6> for SocketAddr {\n-    fn partial_cmp(&self, other: &SocketAddrV6) -> Option<Ordering> {\n-        match self {\n-            SocketAddr::V4(_) => Some(Ordering::Less),\n-            SocketAddr::V6(v6) => v6.partial_cmp(other),\n-        }\n-    }\n-}\n-\n #[stable(feature = \"socketaddr_ordering\", since = \"1.45.0\")]\n impl Ord for SocketAddrV4 {\n     fn cmp(&self, other: &SocketAddrV4) -> Ordering {\n@@ -1213,11 +1173,13 @@ mod tests {\n         let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();\n         let v4_2 = \"224.210.103.5:12345\".parse::<SocketAddrV4>().unwrap();\n         let v4_3 = \"224.210.103.5:23456\".parse::<SocketAddrV4>().unwrap();\n-        let v6_1 = \"[2001:db8:f00::1002]:1234\".parse::<SocketAddrV6>().unwrap();\n-        let v6_2 = \"[2001:db8:f00::2001]:1234\".parse::<SocketAddrV6>().unwrap();\n-        let v6_3 = \"[2001:db8:f00::2001]:2345\".parse::<SocketAddrV6>().unwrap();\n+        let v6_1 = \"[2001:db8:f00::1002]:23456\".parse::<SocketAddrV6>().unwrap();\n+        let v6_2 = \"[2001:db8:f00::2001]:12345\".parse::<SocketAddrV6>().unwrap();\n+        let v6_3 = \"[2001:db8:f00::2001]:23456\".parse::<SocketAddrV6>().unwrap();\n \n         // equality\n+        assert_eq!(v4_1, v4_1);\n+        assert_eq!(v6_1, v6_1);\n         assert_eq!(v4_1, SocketAddr::V4(v4_1));\n         assert_eq!(v6_1, SocketAddr::V6(v6_1));\n         assert_eq!(SocketAddr::V4(v4_1), SocketAddr::V4(v4_1));\n@@ -1229,22 +1191,20 @@ mod tests {\n \n         // compare different addresses\n         assert!(v4_1 < v4_2);\n-        assert!(v4_1 < SocketAddr::V4(v4_2));\n-        assert!(SocketAddr::V4(v4_1) < v4_2);\n-        assert!(SocketAddr::V4(v4_1) < SocketAddr::V4(v4_2));\n         assert!(v6_1 < v6_2);\n-        assert!(v6_1 < SocketAddr::V6(v6_2));\n-        assert!(SocketAddr::V6(v6_1) < v6_2);\n-        assert!(SocketAddr::V6(v6_1) < SocketAddr::V6(v6_2));\n+        assert!(v4_2 > v4_1);\n+        assert!(v6_2 > v6_1);\n \n         // compare the same address with different ports\n         assert!(v4_2 < v4_3);\n-        assert!(v4_2 < SocketAddr::V4(v4_3));\n-        assert!(SocketAddr::V4(v4_2) < v4_3);\n-        assert!(SocketAddr::V4(v4_2) < SocketAddr::V4(v4_3));\n         assert!(v6_2 < v6_3);\n-        assert!(v6_2 < SocketAddr::V6(v6_3));\n-        assert!(SocketAddr::V6(v6_2) < v6_3);\n-        assert!(SocketAddr::V6(v6_2) < SocketAddr::V6(v6_3));\n+        assert!(v4_3 > v4_2);\n+        assert!(v6_3 > v6_2);\n+\n+        // compare different addresses with the same port\n+        assert!(v4_1 < v4_3);\n+        assert!(v6_1 < v6_3);\n+        assert!(v4_1 > v4_3);\n+        assert!(v6_1 > v6_3);\n     }\n }"}]}