{"sha": "0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYjdhY2M4OTBiZDBhZjI5Mzg3YWU3Y2FiN2YxYWFlNTVhYmUxNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T13:57:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T13:57:06Z"}, "message": "Auto merge of #7100 - ABouttefeux:unused_io_amount, r=camsteffen\n\nUnused io amount detects `.read().ok()?`\n\nfixes #7096\nchangelog: unused_io_amount now detect expertion like `.read().ok()?`,  `.read().or_else(|err| ...)?` and similar expressions.", "tree": {"sha": "36f5354ed3260db7029841e230f145353ee96848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f5354ed3260db7029841e230f145353ee96848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "html_url": "https://github.com/rust-lang/rust/commit/0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e2b9f25b6db4b2680a3d388456d9f95cb28344", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e2b9f25b6db4b2680a3d388456d9f95cb28344", "html_url": "https://github.com/rust-lang/rust/commit/98e2b9f25b6db4b2680a3d388456d9f95cb28344"}, {"sha": "5625d58f9f3fbff3d81cbab76fbbcfc5ff06c833", "url": "https://api.github.com/repos/rust-lang/rust/commits/5625d58f9f3fbff3d81cbab76fbbcfc5ff06c833", "html_url": "https://github.com/rust-lang/rust/commit/5625d58f9f3fbff3d81cbab76fbbcfc5ff06c833"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "3387f35bac3d4fea903d4145fbb247dc5e8b5f49", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "patch": "@@ -47,25 +47,35 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                         func.kind,\n                         hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryIntoResult, _))\n                     ) {\n-                        check_method_call(cx, &args[0], expr);\n+                        check_map_error(cx, &args[0], expr);\n                     }\n                 } else {\n-                    check_method_call(cx, res, expr);\n+                    check_map_error(cx, res, expr);\n                 }\n             },\n-\n             hir::ExprKind::MethodCall(path, _, args, _) => match &*path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n-                    check_method_call(cx, &args[0], expr);\n+                    check_map_error(cx, &args[0], expr);\n                 },\n                 _ => (),\n             },\n-\n             _ => (),\n         }\n     }\n }\n \n+fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n+    let mut call = call;\n+    while let hir::ExprKind::MethodCall(ref path, _, ref args, _) = call.kind {\n+        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+            call = &args[0];\n+        } else {\n+            break;\n+        }\n+    }\n+    check_method_call(cx, call, expr);\n+}\n+\n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n         let symbol = &*path.ident.as_str();"}, {"sha": "8b141e25942d7f74a6eb90685def758340ce46ee", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n #![warn(clippy::unused_io_amount)]\n \n-use std::io;\n+use std::io::{self, Read};\n \n fn question_mark<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     s.write(b\"test\")?;\n@@ -22,4 +22,43 @@ fn vectored<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n     Ok(())\n }\n \n+fn ok(file: &str) -> Option<()> {\n+    let mut reader = std::fs::File::open(file).ok()?;\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).ok()?;\n+    Some(())\n+}\n+\n+#[allow(clippy::redundant_closure)]\n+#[allow(clippy::bind_instead_of_map)]\n+fn or_else(file: &str) -> io::Result<()> {\n+    let mut reader = std::fs::File::open(file)?;\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).or_else(|err| Err(err))?;\n+    Ok(())\n+}\n+\n+#[derive(Debug)]\n+enum Error {\n+    Kind,\n+}\n+\n+fn or(file: &str) -> Result<(), Error> {\n+    let mut reader = std::fs::File::open(file).unwrap();\n+    let mut result = [0u8; 0];\n+    reader.read(&mut result).or(Err(Error::Kind))?;\n+    Ok(())\n+}\n+\n+fn combine_or(file: &str) -> Result<(), Error> {\n+    let mut reader = std::fs::File::open(file).unwrap();\n+    let mut result = [0u8; 0];\n+    reader\n+        .read(&mut result)\n+        .or(Err(Error::Kind))\n+        .or(Err(Error::Kind))\n+        .expect(\"error\");\n+    Ok(())\n+}\n+\n fn main() {}"}, {"sha": "d8dfc0e5a798c53edd720d8583f0a2d0745d2206", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ab7acc890bd0af29387ae7cab7f1aae55abe16b/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "patch": "@@ -36,5 +36,33 @@ error: written amount is not handled\n LL |     s.write_vectored(&[io::IoSlice::new(&[])])?;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:28:5\n+   |\n+LL |     reader.read(&mut result).ok()?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:37:5\n+   |\n+LL |     reader.read(&mut result).or_else(|err| Err(err))?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:49:5\n+   |\n+LL |     reader.read(&mut result).or(Err(Error::Kind))?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: read amount is not handled. Use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:56:5\n+   |\n+LL | /     reader\n+LL | |         .read(&mut result)\n+LL | |         .or(Err(Error::Kind))\n+LL | |         .or(Err(Error::Kind))\n+LL | |         .expect(\"error\");\n+   | |________________________^\n+\n+error: aborting due to 10 previous errors\n "}]}