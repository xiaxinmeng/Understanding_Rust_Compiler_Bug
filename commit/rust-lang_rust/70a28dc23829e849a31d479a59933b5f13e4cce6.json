{"sha": "70a28dc23829e849a31d479a59933b5f13e4cce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYTI4ZGMyMzgyOWU4NDlhMzFkNDc5YTU5OTMzYjVmMTNlNGNjZTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T00:03:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-01T17:45:30Z"}, "message": "Cleanup attribute code. Issue #487", "tree": {"sha": "6812bf884186c219450127a0f5a69a6f12c887b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6812bf884186c219450127a0f5a69a6f12c887b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a28dc23829e849a31d479a59933b5f13e4cce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a28dc23829e849a31d479a59933b5f13e4cce6", "html_url": "https://github.com/rust-lang/rust/commit/70a28dc23829e849a31d479a59933b5f13e4cce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a28dc23829e849a31d479a59933b5f13e4cce6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ce1e1035b88e5397539a08d83f134de7eb9cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ce1e1035b88e5397539a08d83f134de7eb9cf4", "html_url": "https://github.com/rust-lang/rust/commit/26ce1e1035b88e5397539a08d83f134de7eb9cf4"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "25fdcdb5faaaafc71b7f927c860a648104181456", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=70a28dc23829e849a31d479a59933b5f13e4cce6", "patch": "@@ -14,8 +14,9 @@ export sort_meta_items;\n export remove_meta_items_by_name;\n export get_attr_name;\n export mk_name_value_item;\n-export mk_link_item;\n+export mk_list_item;\n export mk_word_item;\n+export mk_attr;\n \n // From a list of crate attributes get only the meta_items that impact crate\n // linkage\n@@ -171,14 +172,20 @@ fn mk_name_value_item(ast::ident name, str value) -> @ast::meta_item {\n     ret @span(ast::meta_name_value(name, value));\n }\n \n-fn mk_list_item(ast::ident name, &vec[@ast::meta_item] items) -> @ast::meta_item {\n+fn mk_list_item(ast::ident name,\n+                &vec[@ast::meta_item] items) -> @ast::meta_item {\n     ret @span(ast::meta_list(name, items));\n }\n \n fn mk_word_item(ast::ident name) -> @ast::meta_item {\n     ret @span(ast::meta_word(name));\n }\n \n+fn mk_attr(@ast::meta_item item) -> ast::attribute {\n+    ret span(rec(style = ast::attr_inner,\n+                 value = *item));\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "0eda4bbf5af629fbde3cb5ba3a1d9fd90ea45ce2", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=70a28dc23829e849a31d479a59933b5f13e4cce6", "patch": "@@ -7,6 +7,7 @@ import std::str;\n import std::io;\n import std::map::hashmap;\n import front::ast;\n+import front::attr;\n import middle::ty;\n import tags::*;\n import tydecode::parse_def_id;\n@@ -267,25 +268,22 @@ fn get_meta_items(&ebml::doc md) -> vec[@ast::meta_item] {\n               ebml::tagged_docs(md, tag_meta_item_word)) {\n         auto nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         auto n = str::unsafe_from_bytes(ebml::doc_data(nd));\n-        items += [@rec(node=ast::meta_word(n),\n-                       span=rec(lo=0u, hi=0u))];\n+        items += [attr::mk_word_item(n)];\n     }\n     for each (ebml::doc meta_item_doc in\n               ebml::tagged_docs(md, tag_meta_item_name_value)) {\n         auto nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         auto vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n         auto n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n-        items += [@rec(node=ast::meta_name_value(n, v),\n-                       span=rec(lo=0u, hi=0u))];\n+        items += [attr::mk_name_value_item(n, v)];\n     }\n     for each (ebml::doc meta_item_doc in\n               ebml::tagged_docs(md, tag_meta_item_list)) {\n         auto nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         auto n = str::unsafe_from_bytes(ebml::doc_data(nd));\n         auto subitems = get_meta_items(meta_item_doc);\n-        items += [@rec(node=ast::meta_list(n, subitems),\n-                       span=rec(lo=0u, hi=0u))];                  \n+        items += [attr::mk_list_item(n, subitems)];\n     }\n     ret items;\n }"}, {"sha": "c867f483dd34f5d1f6e869789a095f16c63f5f1a", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a28dc23829e849a31d479a59933b5f13e4cce6/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=70a28dc23829e849a31d479a59933b5f13e4cce6", "patch": "@@ -463,7 +463,7 @@ fn encode_attributes(&ebml::writer ebml_w, &vec[attribute] attrs) {\n \n // So there's a special crate attribute called 'link' which defines the\n // metadata that Rust cares about for linking crates. This attribute requires\n-// name and value attributes, so if the user didn't provide them we will throw\n+// 'name' and 'vers' items, so if the user didn't provide them we will throw\n // them in anyway with default values.\n fn synthesize_crate_attrs(&@crate_ctxt cx,\n                           &@crate crate) -> vec[attribute] {\n@@ -472,33 +472,23 @@ fn synthesize_crate_attrs(&@crate_ctxt cx,\n                             &vec[@meta_item] items)\n         -> attribute {\n \n-        auto bogus_span = rec(lo = 0u, hi = 0u);\n+        assert cx.link_meta.name != \"\";\n+        assert cx.link_meta.vers != \"\";\n \n-        auto name_item_ = meta_name_value(\"name\", cx.link_meta.name);\n-        auto name_item = rec(node=name_item_,\n-                             span=bogus_span);\n-\n-        auto vers_item_ = meta_name_value(\"vers\", cx.link_meta.vers);\n-        auto vers_item = rec(node=vers_item_,\n-                             span=bogus_span);\n+        auto name_item = attr::mk_name_value_item(\"name\",\n+                                                  cx.link_meta.name);\n+        auto vers_item = attr::mk_name_value_item(\"vers\",\n+                                                  cx.link_meta.vers);\n \n         auto other_items = {\n             auto tmp = attr::remove_meta_items_by_name(items, \"name\");\n             attr::remove_meta_items_by_name(tmp, \"vers\")\n         };\n \n-        auto meta_items = [@name_item] + [@vers_item] + other_items;\n-\n-        auto link_item_ = meta_list(\"link\", meta_items);\n-        auto link_item = rec(node=link_item_,\n-                             span=bogus_span);\n-\n-        auto attr_ = rec(style = attr_inner,\n-                         value = link_item);\n-        auto attr = rec(node=attr_,\n-                        span=bogus_span);\n+        auto meta_items = [name_item] + [vers_item] + other_items;\n+        auto link_item = attr::mk_list_item(\"link\", meta_items);\n \n-        ret attr;\n+        ret attr::mk_attr(link_item);\n     }\n \n     let vec[attribute] attrs = [];"}]}