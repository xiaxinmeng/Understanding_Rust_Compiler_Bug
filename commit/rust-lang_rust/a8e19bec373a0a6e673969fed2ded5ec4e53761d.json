{"sha": "a8e19bec373a0a6e673969fed2ded5ec4e53761d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTE5YmVjMzczYTBhNmU2NzM5NjlmZWQyZGVkNWVjNGU1Mzc2MWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:51:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-09T16:01:45Z"}, "message": "Move span_bug and bug helper functions to util", "tree": {"sha": "8a2246b93e0a3b42d406ebe66d3e67c55eb49cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2246b93e0a3b42d406ebe66d3e67c55eb49cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e19bec373a0a6e673969fed2ded5ec4e53761d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e19bec373a0a6e673969fed2ded5ec4e53761d", "html_url": "https://github.com/rust-lang/rust/commit/a8e19bec373a0a6e673969fed2ded5ec4e53761d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e19bec373a0a6e673969fed2ded5ec4e53761d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed246fcc953831b50ec0fb5b26a48d0704a15ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed246fcc953831b50ec0fb5b26a48d0704a15ed7", "html_url": "https://github.com/rust-lang/rust/commit/ed246fcc953831b50ec0fb5b26a48d0704a15ed7"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "55a5e342947fb461c2ff4dc96f9a37432295c182", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a8e19bec373a0a6e673969fed2ded5ec4e53761d", "patch": "@@ -166,6 +166,7 @@ pub mod util {\n     pub mod nodemap;\n     pub mod time_graph;\n     pub mod profiling;\n+    pub mod bug;\n }\n \n // A private module so that macro-expanded idents like"}, {"sha": "e599b0704f957bde8ae6c6d526d9a6df661a9b53", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=a8e19bec373a0a6e673969fed2ded5ec4e53761d", "patch": "@@ -51,14 +51,14 @@ macro_rules! enum_from_u32 {\n macro_rules! bug {\n     () => ( bug!(\"impossible case reached\") );\n     ($($message:tt)*) => ({\n-        $crate::session::bug_fmt(file!(), line!(), format_args!($($message)*))\n+        $crate::util::bug::bug_fmt(file!(), line!(), format_args!($($message)*))\n     })\n }\n \n #[macro_export]\n macro_rules! span_bug {\n     ($span:expr, $($message:tt)*) => ({\n-        $crate::session::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n+        $crate::util::bug::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n     })\n }\n "}, {"sha": "f474f214305449f7740dc1684928d4a78e596fc5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a8e19bec373a0a6e673969fed2ded5ec4e53761d", "patch": "@@ -20,7 +20,6 @@ use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n use session::config::{OutputType, Lto};\n-use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n@@ -49,7 +48,6 @@ use std;\n use std::cell::{self, Cell, RefCell};\n use std::collections::HashMap;\n use std::env;\n-use std::fmt;\n use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::time::Duration;\n@@ -1301,39 +1299,3 @@ pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n         Err(CompileIncomplete::Errored(ErrorReported))\n     }\n }\n-\n-#[cold]\n-#[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n-    // this wrapper mostly exists so I don't have to write a fully\n-    // qualified path of None::<Span> inside the bug!() macro definition\n-    opt_span_bug_fmt(file, line, None::<Span>, args);\n-}\n-\n-#[cold]\n-#[inline(never)]\n-pub fn span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: S,\n-    args: fmt::Arguments,\n-) -> ! {\n-    opt_span_bug_fmt(file, line, Some(span), args);\n-}\n-\n-fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: Option<S>,\n-    args: fmt::Arguments,\n-) -> ! {\n-    tls::with_opt(move |tcx| {\n-        let msg = format!(\"{}:{}: {}\", file, line, args);\n-        match (tcx, span) {\n-            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n-            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n-            (None, _) => panic!(msg),\n-        }\n-    });\n-    unreachable!();\n-}"}, {"sha": "f2593e4d4b5eeaa5aa0cf22b78cf6ba480f7840d", "filename": "src/librustc/util/bug.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e19bec373a0a6e673969fed2ded5ec4e53761d/src%2Flibrustc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fbug.rs?ref=a8e19bec373a0a6e673969fed2ded5ec4e53761d", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// These functions are used by macro expansion for bug! and span_bug!\n+\n+use ty::tls;\n+use std::fmt;\n+use syntax_pos::{Span, MultiSpan};\n+\n+#[cold]\n+#[inline(never)]\n+pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments) -> ! {\n+    // this wrapper mostly exists so I don't have to write a fully\n+    // qualified path of None::<Span> inside the bug!() macro definition\n+    opt_span_bug_fmt(file, line, None::<Span>, args);\n+}\n+\n+#[cold]\n+#[inline(never)]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(\n+    file: &'static str,\n+    line: u32,\n+    span: S,\n+    args: fmt::Arguments,\n+) -> ! {\n+    opt_span_bug_fmt(file, line, Some(span), args);\n+}\n+\n+fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n+    file: &'static str,\n+    line: u32,\n+    span: Option<S>,\n+    args: fmt::Arguments,\n+) -> ! {\n+    tls::with_opt(move |tcx| {\n+        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        match (tcx, span) {\n+            (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n+            (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n+            (None, _) => panic!(msg),\n+        }\n+    });\n+    unreachable!();\n+}"}]}