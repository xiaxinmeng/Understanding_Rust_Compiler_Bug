{"sha": "a9ac2b95f485c31e40273dee7f09dcfff8340777", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YWMyYjk1ZjQ4NWMzMWU0MDI3M2RlZTdmMDlkY2ZmZjgzNDA3Nzc=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T04:36:32Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-07T09:16:03Z"}, "message": "Add abs_sub method to Signed trait", "tree": {"sha": "1df12ee707e16ff8cda02af66ea929cc51ccfc15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1df12ee707e16ff8cda02af66ea929cc51ccfc15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ac2b95f485c31e40273dee7f09dcfff8340777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ac2b95f485c31e40273dee7f09dcfff8340777", "html_url": "https://github.com/rust-lang/rust/commit/a9ac2b95f485c31e40273dee7f09dcfff8340777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ac2b95f485c31e40273dee7f09dcfff8340777/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314b485c9c480c4a7f47c28716e629d642e2d412", "url": "https://api.github.com/repos/rust-lang/rust/commits/314b485c9c480c4a7f47c28716e629d642e2d412", "html_url": "https://github.com/rust-lang/rust/commit/314b485c9c480c4a7f47c28716e629d642e2d412"}], "stats": {"total": 145, "additions": 140, "deletions": 5}, "files": [{"sha": "bdd11200419f406f75cc8d761a427820f470c454", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -312,6 +312,13 @@ impl Signed for f32 {\n     #[inline(always)]\n     fn abs(&self) -> f32 { abs(*self) }\n \n+    ///\n+    /// The positive difference of two numbers. Returns `0.0` if the number is less than or\n+    /// equal to `other`, otherwise the difference between`self` and `other` is returned.\n+    ///\n+    #[inline(always)]\n+    fn abs_sub(&self, other: &f32) -> f32 { abs_sub(*self, *other) }\n+\n     ///\n     /// # Returns\n     ///\n@@ -959,7 +966,7 @@ mod tests {\n     }\n \n     #[test]\n-    pub fn test_signed() {\n+    pub fn test_abs() {\n         assert_eq!(infinity.abs(), infinity);\n         assert_eq!(1f32.abs(), 1f32);\n         assert_eq!(0f32.abs(), 0f32);\n@@ -968,7 +975,24 @@ mod tests {\n         assert_eq!(neg_infinity.abs(), infinity);\n         assert_eq!((1f32/neg_infinity).abs(), 0f32);\n         assert!(NaN.abs().is_NaN());\n+    }\n \n+    #[test]\n+    fn test_abs_sub() {\n+        assert_eq!((-1f32).abs_sub(&1f32), 0f32);\n+        assert_eq!(1f32.abs_sub(&1f32), 0f32);\n+        assert_eq!(1f32.abs_sub(&0f32), 1f32);\n+        assert_eq!(1f32.abs_sub(&-1f32), 2f32);\n+        assert_eq!(neg_infinity.abs_sub(&0f32), 0f32);\n+        assert_eq!(infinity.abs_sub(&1f32), infinity);\n+        assert_eq!(0f32.abs_sub(&neg_infinity), infinity);\n+        assert_eq!(0f32.abs_sub(&infinity), 0f32);\n+        assert!(NaN.abs_sub(&-1f32).is_NaN());\n+        assert!(1f32.abs_sub(&NaN).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_signum() {\n         assert_eq!(infinity.signum(), 1f32);\n         assert_eq!(1f32.signum(), 1f32);\n         assert_eq!(0f32.signum(), 1f32);\n@@ -977,7 +1001,10 @@ mod tests {\n         assert_eq!(neg_infinity.signum(), -1f32);\n         assert_eq!((1f32/neg_infinity).signum(), -1f32);\n         assert!(NaN.signum().is_NaN());\n+    }\n \n+    #[test]\n+    fn test_is_positive() {\n         assert!(infinity.is_positive());\n         assert!(1f32.is_positive());\n         assert!(0f32.is_positive());\n@@ -986,7 +1013,10 @@ mod tests {\n         assert!(!neg_infinity.is_positive());\n         assert!(!(1f32/neg_infinity).is_positive());\n         assert!(!NaN.is_positive());\n+    }\n \n+    #[test]\n+    fn test_is_negative() {\n         assert!(!infinity.is_negative());\n         assert!(!1f32.is_negative());\n         assert!(!0f32.is_negative());"}, {"sha": "7c6246757cd8ed899220866d5f34ac49bb7a48ee", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -325,6 +325,13 @@ impl Signed for f64 {\n     #[inline(always)]\n     fn abs(&self) -> f64 { abs(*self) }\n \n+    ///\n+    /// The positive difference of two numbers. Returns `0.0` if the number is less than or\n+    /// equal to `other`, otherwise the difference between`self` and `other` is returned.\n+    ///\n+    #[inline(always)]\n+    fn abs_sub(&self, other: &f64) -> f64 { abs_sub(*self, *other) }\n+\n     ///\n     /// # Returns\n     ///\n@@ -594,6 +601,7 @@ impl Float for f64 {\n     #[inline(always)]\n     fn neg_zero() -> f64 { -0.0 }\n \n+    /// Returns `true` if the number is NaN\n     #[inline(always)]\n     fn is_NaN(&self) -> bool { *self != *self }\n \n@@ -603,7 +611,7 @@ impl Float for f64 {\n         *self == Float::infinity() || *self == Float::neg_infinity()\n     }\n \n-    /// Returns `true` if the number is finite\n+    /// Returns `true` if the number is not infinite or NaN\n     #[inline(always)]\n     fn is_finite(&self) -> bool {\n         !(self.is_NaN() || self.is_infinite())\n@@ -1005,7 +1013,7 @@ mod tests {\n     }\n \n     #[test]\n-    pub fn test_signed() {\n+    pub fn test_abs() {\n         assert_eq!(infinity.abs(), infinity);\n         assert_eq!(1f64.abs(), 1f64);\n         assert_eq!(0f64.abs(), 0f64);\n@@ -1014,7 +1022,24 @@ mod tests {\n         assert_eq!(neg_infinity.abs(), infinity);\n         assert_eq!((1f64/neg_infinity).abs(), 0f64);\n         assert!(NaN.abs().is_NaN());\n+    }\n \n+    #[test]\n+    fn test_abs_sub() {\n+        assert_eq!((-1f64).abs_sub(&1f64), 0f64);\n+        assert_eq!(1f64.abs_sub(&1f64), 0f64);\n+        assert_eq!(1f64.abs_sub(&0f64), 1f64);\n+        assert_eq!(1f64.abs_sub(&-1f64), 2f64);\n+        assert_eq!(neg_infinity.abs_sub(&0f64), 0f64);\n+        assert_eq!(infinity.abs_sub(&1f64), infinity);\n+        assert_eq!(0f64.abs_sub(&neg_infinity), infinity);\n+        assert_eq!(0f64.abs_sub(&infinity), 0f64);\n+        assert!(NaN.abs_sub(&-1f64).is_NaN());\n+        assert!(1f64.abs_sub(&NaN).is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_signum() {\n         assert_eq!(infinity.signum(), 1f64);\n         assert_eq!(1f64.signum(), 1f64);\n         assert_eq!(0f64.signum(), 1f64);\n@@ -1023,7 +1048,10 @@ mod tests {\n         assert_eq!(neg_infinity.signum(), -1f64);\n         assert_eq!((1f64/neg_infinity).signum(), -1f64);\n         assert!(NaN.signum().is_NaN());\n+    }\n \n+    #[test]\n+    fn test_is_positive() {\n         assert!(infinity.is_positive());\n         assert!(1f64.is_positive());\n         assert!(0f64.is_positive());\n@@ -1032,7 +1060,10 @@ mod tests {\n         assert!(!neg_infinity.is_positive());\n         assert!(!(1f64/neg_infinity).is_positive());\n         assert!(!NaN.is_positive());\n+    }\n \n+    #[test]\n+    fn test_is_negative() {\n         assert!(!infinity.is_negative());\n         assert!(!1f64.is_negative());\n         assert!(!0f64.is_negative());"}, {"sha": "35e113094876f6b5526d500b982fd467770132c1", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -734,6 +734,15 @@ impl Signed for float {\n     #[inline(always)]\n     fn abs(&self) -> float { abs(*self) }\n \n+    ///\n+    /// The positive difference of two numbers. Returns `0.0` if the number is less than or\n+    /// equal to `other`, otherwise the difference between`self` and `other` is returned.\n+    ///\n+    #[inline(always)]\n+    fn abs_sub(&self, other: &float) -> float {\n+        (*self as f64).abs_sub(&(*other as f64)) as float\n+    }\n+\n     ///\n     /// # Returns\n     ///\n@@ -978,7 +987,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_signed() {\n+    fn test_abs() {\n         assert_eq!(infinity.abs(), infinity);\n         assert_eq!(1f.abs(), 1f);\n         assert_eq!(0f.abs(), 0f);\n@@ -987,7 +996,24 @@ mod tests {\n         assert_eq!(neg_infinity.abs(), infinity);\n         assert_eq!((1f/neg_infinity).abs(), 0f);\n         assert!(NaN.abs().is_NaN());\n+    }\n+\n+    #[test]\n+    fn test_abs_sub() {\n+        assert_eq!((-1f).abs_sub(&1f), 0f);\n+        assert_eq!(1f.abs_sub(&1f), 0f);\n+        assert_eq!(1f.abs_sub(&0f), 1f);\n+        assert_eq!(1f.abs_sub(&-1f), 2f);\n+        assert_eq!(neg_infinity.abs_sub(&0f), 0f);\n+        assert_eq!(infinity.abs_sub(&1f), infinity);\n+        assert_eq!(0f.abs_sub(&neg_infinity), infinity);\n+        assert_eq!(0f.abs_sub(&infinity), 0f);\n+        assert!(NaN.abs_sub(&-1f).is_NaN());\n+        assert!(1f.abs_sub(&NaN).is_NaN());\n+    }\n \n+    #[test]\n+    fn test_signum() {\n         assert_eq!(infinity.signum(), 1f);\n         assert_eq!(1f.signum(), 1f);\n         assert_eq!(0f.signum(), 1f);\n@@ -996,7 +1022,10 @@ mod tests {\n         assert_eq!(neg_infinity.signum(), -1f);\n         assert_eq!((1f/neg_infinity).signum(), -1f);\n         assert!(NaN.signum().is_NaN());\n+    }\n \n+    #[test]\n+    fn test_is_positive() {\n         assert!(infinity.is_positive());\n         assert!(1f.is_positive());\n         assert!(0f.is_positive());\n@@ -1005,7 +1034,10 @@ mod tests {\n         assert!(!neg_infinity.is_positive());\n         assert!(!(1f/neg_infinity).is_positive());\n         assert!(!NaN.is_positive());\n+    }\n \n+    #[test]\n+    fn test_is_negative() {\n         assert!(!infinity.is_negative());\n         assert!(!1f.is_negative());\n         assert!(!0f.is_negative());"}, {"sha": "06a9a0b45627db56bdd067fc584866e1f65c238e", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -264,6 +264,15 @@ impl Signed for T {\n         if self.is_negative() { -*self } else { *self }\n     }\n \n+    ///\n+    /// The positive difference of two numbers. Returns `0` if the number is less than or\n+    /// equal to `other`, otherwise the difference between`self` and `other` is returned.\n+    ///\n+    #[inline(always)]\n+    fn abs_sub(&self, other: &T) -> T {\n+        if *self <= *other { 0 } else { *self - *other }\n+    }\n+\n     ///\n     /// # Returns\n     ///\n@@ -554,21 +563,38 @@ mod tests {\n     }\n \n     #[test]\n-    pub fn test_signed() {\n+    pub fn test_abs() {\n         assert_eq!((1 as T).abs(), 1 as T);\n         assert_eq!((0 as T).abs(), 0 as T);\n         assert_eq!((-1 as T).abs(), 1 as T);\n+    }\n+\n+    #[test]\n+    fn test_abs_sub() {\n+        assert_eq!((-1 as T).abs_sub(&(1 as T)), 0 as T);\n+        assert_eq!((1 as T).abs_sub(&(1 as T)), 0 as T);\n+        assert_eq!((1 as T).abs_sub(&(0 as T)), 1 as T);\n+        assert_eq!((1 as T).abs_sub(&(-1 as T)), 2 as T);\n+    }\n \n+    #[test]\n+    fn test_signum() {\n         assert_eq!((1 as T).signum(), 1 as T);\n         assert_eq!((0 as T).signum(), 0 as T);\n         assert_eq!((-0 as T).signum(), 0 as T);\n         assert_eq!((-1 as T).signum(), -1 as T);\n+    }\n \n+    #[test]\n+    fn test_is_positive() {\n         assert!((1 as T).is_positive());\n         assert!(!(0 as T).is_positive());\n         assert!(!(-0 as T).is_positive());\n         assert!(!(-1 as T).is_positive());\n+    }\n \n+    #[test]\n+    fn test_is_negative() {\n         assert!(!(1 as T).is_negative());\n         assert!(!(0 as T).is_negative());\n         assert!(!(-0 as T).is_negative());"}, {"sha": "7a71729e3e73fc3dddfc64a0a2e881d4dfeb9c4a", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -55,7 +55,9 @@ pub trait One {\n pub trait Signed: Num\n                 + Neg<Self> {\n     fn abs(&self) -> Self;\n+    fn abs_sub(&self, other: &Self) -> Self;\n     fn signum(&self) -> Self;\n+\n     fn is_positive(&self) -> bool;\n     fn is_negative(&self) -> bool;\n }"}, {"sha": "a5cf929ed93a20cc2fd06f26dbadc1aaf2a1954e", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ac2b95f485c31e40273dee7f09dcfff8340777/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=a9ac2b95f485c31e40273dee7f09dcfff8340777", "patch": "@@ -831,6 +831,11 @@ impl Signed for BigInt {\n         }\n     }\n \n+    #[inline(always)]\n+    fn abs_sub(&self, other: &BigInt) -> BigInt {\n+        if *self <= *other { Zero::zero() } else { *self - *other }\n+    }\n+\n     #[inline(always)]\n     fn signum(&self) -> BigInt {\n         match self.sign {\n@@ -1920,6 +1925,15 @@ mod bigint_tests {\n         check(11, 5, 55);\n     }\n \n+    #[test]\n+    fn test_abs_sub() {\n+        assert_eq!((-One::one::<BigInt>()).abs_sub(&One::one()), Zero::zero());\n+        assert_eq!(One::one::<BigInt>().abs_sub(&One::one()), Zero::zero());\n+        assert_eq!(One::one::<BigInt>().abs_sub(&Zero::zero()), One::one());\n+        assert_eq!(One::one::<BigInt>().abs_sub(&-One::one::<BigInt>()),\n+                   IntConvertible::from_int(2));\n+    }\n+\n     #[test]\n     fn test_to_str_radix() {\n         fn check(n: int, ans: &str) {"}]}