{"sha": "3b9cf893d0cd1236b988ac2401869eadc39eff76", "node_id": "C_kwDOAAsO6NoAKDNiOWNmODkzZDBjZDEyMzZiOTg4YWMyNDAxODY5ZWFkYzM5ZWZmNzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T11:28:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T11:28:48Z"}, "message": "Auto merge of #97246 - GuillaumeGomez:rollup-btcok8x, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #97190 (Add implicit call to from_str via parse in documentation)\n - #97218 (Add eslint checks)\n - #97219 (make ptr::invalid not the same as a regular int2ptr cast)\n - #97223 (Remove quadratic behaviour from -Zunpretty=hir-tree.)\n - #97232 (typo)\n - #97237 (Add some more weird-exprs)\n - #97238 (Bump LLVM fetched from CI to fix run-make)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3cae4e5ba5719ee47cd3afba72b09b4155421220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cae4e5ba5719ee47cd3afba72b09b4155421220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9cf893d0cd1236b988ac2401869eadc39eff76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9cf893d0cd1236b988ac2401869eadc39eff76", "html_url": "https://github.com/rust-lang/rust/commit/3b9cf893d0cd1236b988ac2401869eadc39eff76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9cf893d0cd1236b988ac2401869eadc39eff76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f33adce1bfe01e4c0c8754400bf782a95af88c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f33adce1bfe01e4c0c8754400bf782a95af88c9", "html_url": "https://github.com/rust-lang/rust/commit/5f33adce1bfe01e4c0c8754400bf782a95af88c9"}, {"sha": "28730acdbe1f8f1d51066c02b418d737b8d15338", "url": "https://api.github.com/repos/rust-lang/rust/commits/28730acdbe1f8f1d51066c02b418d737b8d15338", "html_url": "https://github.com/rust-lang/rust/commit/28730acdbe1f8f1d51066c02b418d737b8d15338"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "bab85a3019d613cb30877a3b41a660450f098b4d", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -10,7 +10,7 @@\n //!\n //! * **Immutability**: `P<T>` disallows mutating its inner `T`, unlike `Box<T>`\n //!   (unless it contains an `Unsafe` interior, but that may be denied later).\n-//!   This mainly prevents mistakes, but can also enforces a kind of \"purity\".\n+//!   This mainly prevents mistakes, but also enforces a kind of \"purity\".\n //!\n //! * **Efficiency**: folding can reuse allocation space for `P<T>` and `Vec<T>`,\n //!   the latter even when the input and output types differ (as it would be the"}, {"sha": "1a0cac8fe79a97a4c47e1a519a5f6ae5cf4b3372", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -796,7 +796,6 @@ impl<'tcx> AttributeMap<'tcx> {\n /// Map of all HIR nodes inside the current owner.\n /// These nodes are mapped by `ItemLocalId` alongside the index of their parent node.\n /// The HIR tree, including bodies, is pre-hashed.\n-#[derive(Debug)]\n pub struct OwnerNodes<'tcx> {\n     /// Pre-computed hash of the full HIR.\n     pub hash_including_bodies: Fingerprint,\n@@ -822,6 +821,18 @@ impl<'tcx> OwnerNodes<'tcx> {\n     }\n }\n \n+impl fmt::Debug for OwnerNodes<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OwnerNodes\")\n+            .field(\"node\", &self.nodes[ItemLocalId::from_u32(0)])\n+            .field(\"bodies\", &self.bodies)\n+            .field(\"local_id_to_def_id\", &self.local_id_to_def_id)\n+            .field(\"hash_without_bodies\", &self.hash_without_bodies)\n+            .field(\"hash_including_bodies\", &self.hash_including_bodies)\n+            .finish()\n+    }\n+}\n+\n /// Full information resulting from lowering an AST node.\n #[derive(Debug, HashStable_Generic)]\n pub struct OwnerInfo<'hir> {"}, {"sha": "dc229c9ff9b44594645573104ea46b13157686ec", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -555,7 +555,11 @@ pub const fn null_mut<T>() -> *mut T {\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid<T>(addr: usize) -> *const T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-    addr as *const T\n+    // We use transmute rather than a cast so tools like Miri can tell that this\n+    // is *not* the same as from_exposed_addr.\n+    // SAFETY: every valid integer is also a valid pointer (as long as you don't dereference that\n+    // pointer).\n+    unsafe { mem::transmute(addr) }\n }\n \n /// Creates an invalid mutable pointer with the given address.\n@@ -582,7 +586,11 @@ pub const fn invalid<T>(addr: usize) -> *const T {\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n     // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-    addr as *mut T\n+    // We use transmute rather than a cast so tools like Miri can tell that this\n+    // is *not* the same as from_exposed_addr.\n+    // SAFETY: every valid integer is also a valid pointer (as long as you don't dereference that\n+    // pointer).\n+    unsafe { mem::transmute(addr) }\n }\n \n /// Convert an address back to a pointer, picking up a previously 'exposed' provenance."}, {"sha": "32c31803a511573cc9cd41c7e72f04f785c7718b", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -530,8 +530,12 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///     }\n /// }\n ///\n-/// let p = Point::from_str(\"(1,2)\");\n-/// assert_eq!(p.unwrap(), Point{ x: 1, y: 2} )\n+/// let expected = Ok(Point { x: 1, y: 2 });\n+/// // Explicit call\n+/// assert_eq!(Point::from_str(\"(1,2)\"), expected);\n+/// // Implicit calls, through parse\n+/// assert_eq!(\"(1,2)\".parse(), expected);\n+/// assert_eq!(\"(1,2)\".parse::<Point>(), expected);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {"}, {"sha": "a6fb72c03f3dd35ea2ada2d4d28e297de44d753d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -2038,6 +2038,9 @@ impl Step for RustDev {\n         tarball.set_overlay(OverlayKind::LLVM);\n \n         let src_bindir = builder.llvm_out(target).join(\"bin\");\n+        // If updating this list, you likely want to change\n+        // src/bootstrap/download-ci-llvm-stamp as well, otherwise local users\n+        // will not pick up the extra file until LLVM gets bumped.\n         for bin in &[\n             \"llvm-config\",\n             \"llvm-ar\","}, {"sha": "19504a51a584b1af9f19cc4ba78865b72b81cd5c", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/94023\n+Last change is for: https://github.com/rust-lang/rust/pull/96867"}, {"sha": "cb163d540e0a8c629ecb6531d4894ca0d49d741f", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -38,5 +38,13 @@ module.exports = {\n             \"error\",\n             { \"before\": true, \"after\": true }\n         ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n     }\n };"}, {"sha": "4066bcf3badd781019f81e523e342f98e7f993ee", "filename": "src/test/ui/weird-exprs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Ftest%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9cf893d0cd1236b988ac2401869eadc39eff76/src%2Ftest%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fweird-exprs.rs?ref=3b9cf893d0cd1236b988ac2401869eadc39eff76", "patch": "@@ -1,11 +1,13 @@\n // run-pass\n \n #![feature(generators)]\n+#![feature(unboxed_closures, fn_traits)]\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n #![allow(unreachable_code)]\n #![allow(unused_braces, unused_must_use, unused_parens)]\n+#![allow(uncommon_codepoints, confusable_idents)]\n \n #![recursion_limit = \"256\"]\n \n@@ -115,7 +117,7 @@ fn union() {\n }\n \n fn special_characters() {\n-    let val = !((|(..):(_,_),__@_|__)((&*\"\\\\\",'\ud83e\udd14')/**/,{})=={&[..=..][..];})//\n+    let val = !((|(..):(_,_),(|__@_|__)|__)((&*\"\\\\\",'\ud83e\udd14')/**/,{})=={&[..=..][..];})//\n     ;\n     assert!(!val);\n }\n@@ -164,6 +166,28 @@ fn monkey_barrel() {\n     assert_eq!(val, ());\n }\n \n+fn \ud835\ude8c\ud835\ude98\ud835\ude97\ud835\ude9d\ud835\ude92\ud835\ude97\ud835\ude9e\ud835\ude8e() {\n+    type \ud835\ude95\ud835\ude98\ud835\ude98\ud835\ude99 = i32;\n+    fn \ud835\ude8b\ud835\ude9b\ud835\ude8e\ud835\ude8a\ud835\ude94() -> \ud835\ude95\ud835\ude98\ud835\ude98\ud835\ude99 {\n+        let \ud835\ude9b\ud835\ude8e\ud835\ude9d\ud835\ude9e\ud835\ude9b\ud835\ude97 = 42;\n+        return \ud835\ude9b\ud835\ude8e\ud835\ude9d\ud835\ude9e\ud835\ude9b\ud835\ude97;\n+    }\n+    assert_eq!(loop {\n+        break \ud835\ude8b\ud835\ude9b\ud835\ude8e\ud835\ude8a\ud835\ude94 ();\n+    }, 42);\n+}\n+\n+fn function() {\n+    struct foo;\n+    impl FnOnce<()> for foo {\n+        type Output = foo;\n+        extern \"rust-call\" fn call_once(self, _args: ()) -> Self::Output {\n+            foo\n+        }\n+    }\n+    let foo = foo () ()() ()()() ()()()() ()()()()();\n+}\n+\n fn bathroom_stall() {\n     let mut i = 1;\n     matches!(2, _|_|_|_|_|_ if (i+=1) != (i+=1));\n@@ -189,5 +213,7 @@ pub fn main() {\n     i_yield();\n     match_nested_if();\n     monkey_barrel();\n+    \ud835\ude8c\ud835\ude98\ud835\ude97\ud835\ude9d\ud835\ude92\ud835\ude97\ud835\ude9e\ud835\ude8e();\n+    function();\n     bathroom_stall();\n }"}]}