{"sha": "77a80708523679d749ac066e3a58b6ad86d30102", "node_id": "C_kwDOAAsO6NoAKDc3YTgwNzA4NTIzNjc5ZDc0OWFjMDY2ZTNhNThiNmFkODZkMzAxMDI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-12T14:06:04Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-12T14:06:04Z"}, "message": "Add eslint check for rustdoc-gui tester", "tree": {"sha": "c043f449c1b58325f3224d7dbbb2c156efdf36a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c043f449c1b58325f3224d7dbbb2c156efdf36a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77a80708523679d749ac066e3a58b6ad86d30102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77a80708523679d749ac066e3a58b6ad86d30102", "html_url": "https://github.com/rust-lang/rust/commit/77a80708523679d749ac066e3a58b6ad86d30102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77a80708523679d749ac066e3a58b6ad86d30102/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24c0b81c1fd5de8e00276524896d3352ed91a8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/24c0b81c1fd5de8e00276524896d3352ed91a8cb", "html_url": "https://github.com/rust-lang/rust/commit/24c0b81c1fd5de8e00276524896d3352ed91a8cb"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "f4aadc071998b21d7a8f20b612a85797935db7ff", "filename": "src/tools/rustdoc-gui/.eslintrc.js", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/77a80708523679d749ac066e3a58b6ad86d30102/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/77a80708523679d749ac066e3a58b6ad86d30102/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2F.eslintrc.js?ref=77a80708523679d749ac066e3a58b6ad86d30102", "patch": "@@ -0,0 +1,96 @@\n+module.exports = {\n+    \"env\": {\n+        \"browser\": true,\n+        \"node\": true,\n+        \"es6\": true\n+    },\n+    \"extends\": \"eslint:recommended\",\n+    \"parserOptions\": {\n+        \"ecmaVersion\": 2018,\n+        \"sourceType\": \"module\"\n+    },\n+    \"rules\": {\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"semi\": [\n+            \"error\",\n+            \"always\"\n+        ],\n+        \"quotes\": [\n+            \"error\",\n+            \"double\"\n+        ],\n+        \"linebreak-style\": [\n+            \"error\",\n+            \"unix\"\n+        ],\n+        \"no-trailing-spaces\": \"error\",\n+        \"no-var\": [\"error\"],\n+        \"prefer-const\": [\"error\"],\n+        \"prefer-arrow-callback\": [\"error\"],\n+        \"brace-style\": [\n+            \"error\",\n+            \"1tbs\",\n+            { \"allowSingleLine\": false }\n+        ],\n+        \"keyword-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"arrow-spacing\": [\n+            \"error\",\n+            { \"before\": true, \"after\": true }\n+        ],\n+        \"key-spacing\": [\n+            \"error\",\n+            { \"beforeColon\": false, \"afterColon\": true, \"mode\": \"strict\" }\n+        ],\n+        \"func-call-spacing\": [\"error\", \"never\"],\n+        \"space-infix-ops\": \"error\",\n+        \"space-before-function-paren\": [\"error\", \"never\"],\n+        \"space-before-blocks\": \"error\",\n+        \"comma-dangle\": [\"error\", \"always-multiline\"],\n+        \"comma-style\": [\"error\", \"last\"],\n+        \"max-len\": [\"error\", { \"code\": 100, \"tabWidth\": 4 }],\n+        \"eol-last\": [\"error\", \"always\"],\n+        \"arrow-parens\": [\"error\", \"as-needed\"],\n+        \"no-unused-vars\": [\n+            \"error\",\n+            {\n+                \"argsIgnorePattern\": \"^_\",\n+                \"varsIgnorePattern\": \"^_\"\n+            }\n+        ],\n+        \"eqeqeq\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-else-if\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-import-assign\": \"error\",\n+        \"no-self-compare\": \"error\",\n+        \"no-template-curly-in-string\": \"error\",\n+        \"block-scoped-var\": \"error\",\n+        \"guard-for-in\": \"error\",\n+        \"no-alert\": \"error\",\n+        \"no-confusing-arrow\": \"error\",\n+        \"no-div-regex\": \"error\",\n+        \"no-floating-decimal\": \"error\",\n+        \"no-implicit-globals\": \"error\",\n+        \"no-implied-eval\": \"error\",\n+        \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n+        \"no-sequences\": \"error\",\n+        \"no-div-regex\": \"error\",\n+    }\n+};"}, {"sha": "72baad606f01e99aff983a4f932cb6522b143b5b", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77a80708523679d749ac066e3a58b6ad86d30102/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/77a80708523679d749ac066e3a58b6ad86d30102/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=77a80708523679d749ac066e3a58b6ad86d30102", "patch": "@@ -6,8 +6,8 @@\n \n const fs = require(\"fs\");\n const path = require(\"path\");\n-const os = require('os');\n-const {Options, runTest} = require('browser-ui-test');\n+const os = require(\"os\");\n+const {Options, runTest} = require(\"browser-ui-test\");\n \n // If a test fails or errors, we will retry it two more times in case it was a flaky failure.\n const NB_RETRY = 3;\n@@ -200,7 +200,7 @@ async function main(argv) {\n     const framework_options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n-        let args = [\n+        const args = [\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"], \"--enable-fail-on-js-error\",\n             \"--allow-file-access-from-files\",\n         ];\n@@ -234,7 +234,7 @@ async function main(argv) {\n     } else {\n         files = opts[\"files\"];\n     }\n-    files = files.filter(file => path.extname(file) == \".goml\");\n+    files = files.filter(file => path.extname(file) === \".goml\");\n     if (files.length === 0) {\n         console.error(\"rustdoc-gui: No test selected\");\n         process.exit(2);\n@@ -259,7 +259,7 @@ async function main(argv) {\n \n     // We catch this \"event\" to display a nicer message in case of unexpected exit (because of a\n     // missing `--no-sandbox`).\n-    const exitHandling = (code) => {\n+    const exitHandling = () => {\n         if (!opts[\"no_sandbox\"]) {\n             console.log(\"\");\n             console.log(\n@@ -268,10 +268,10 @@ async function main(argv) {\n             console.log(\"\");\n         }\n     };\n-    process.on('exit', exitHandling);\n+    process.on(\"exit\", exitHandling);\n \n     const originalFilesLen = files.length;\n-    let results = createEmptyResults();\n+    const results = createEmptyResults();\n     const status_bar = char_printer(files.length);\n \n     let new_results;\n@@ -281,7 +281,7 @@ async function main(argv) {\n         Array.prototype.push.apply(results.successful, new_results.successful);\n         // We generate the new list of files with the previously failing tests.\n         files = Array.prototype.concat(new_results.failed, new_results.errored).map(\n-            f => f['file_name']);\n+            f => f[\"file_name\"]);\n         if (files.length > originalFilesLen / 2) {\n             // If we have too many failing tests, it's very likely not flaky failures anymore so\n             // no need to retry."}]}