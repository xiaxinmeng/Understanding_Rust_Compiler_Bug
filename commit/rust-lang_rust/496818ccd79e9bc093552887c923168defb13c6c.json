{"sha": "496818ccd79e9bc093552887c923168defb13c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NjgxOGNjZDc5ZTliYzA5MzU1Mjg4N2M5MjMxNjhkZWZiMTNjNmM=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-08T16:31:45Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-08T16:38:48Z"}, "message": "Add methods to go from a nul-terminated Vec<u8> to a CString, checked and unchecked.\n\nDoc tests have been written and the documentation on the error type\nupdated too.", "tree": {"sha": "47098b8fa28958f0c0e0c6ff0205f24107963c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47098b8fa28958f0c0e0c6ff0205f24107963c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/496818ccd79e9bc093552887c923168defb13c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/496818ccd79e9bc093552887c923168defb13c6c", "html_url": "https://github.com/rust-lang/rust/commit/496818ccd79e9bc093552887c923168defb13c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/496818ccd79e9bc093552887c923168defb13c6c/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73558160933b2764ed9a84b1b2b647e128eac3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73558160933b2764ed9a84b1b2b647e128eac3f8", "html_url": "https://github.com/rust-lang/rust/commit/73558160933b2764ed9a84b1b2b647e128eac3f8"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "f3a935ccc113026a868728cc5febb7b30a88b990", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/496818ccd79e9bc093552887c923168defb13c6c/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496818ccd79e9bc093552887c923168defb13c6c/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=496818ccd79e9bc093552887c923168defb13c6c", "patch": "@@ -234,15 +234,18 @@ pub struct NulError(usize, Vec<u8>);\n \n /// An error indicating that a nul byte was not in the expected position.\n ///\n-/// The slice used to create a [`CStr`] must have one and only one nul\n-/// byte at the end of the slice.\n+/// The slice used to create a [`CStr`] or the vector used to create a\n+/// [`CString`] must have one and only one nul byte, positioned at the end.\n ///\n /// This error is created by the\n /// [`from_bytes_with_nul`][`CStr::from_bytes_with_nul`] method on\n-/// [`CStr`]. See its documentation for more.\n+/// [`CStr`] or the [`from_vec_with_nul`][`CString::from_vec_with_nul`] method\n+/// on [`CString`]. See their documentation for more.\n ///\n /// [`CStr`]: struct.CStr.html\n /// [`CStr::from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n+/// [`CString`]: struct.CString.html\n+/// [`CString::from_vec_with_nul`]: struct.CString.html#method.from_vec_with_nul\n ///\n /// # Examples\n ///\n@@ -632,6 +635,77 @@ impl CString {\n         let this = mem::ManuallyDrop::new(self);\n         unsafe { ptr::read(&this.inner) }\n     }\n+\n+    /// Converts a `Vec` of `u8` to a `CString` without checking the invariants\n+    /// on the given `Vec`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The given `Vec` **must** have one nul byte as its last element.\n+    /// This means it cannot be empty nor have any other nul byte anywhere else.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    /// assert_eq!(\n+    ///     unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n+    ///     unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n+    /// );\n+    /// ```\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.46.0\")]\n+    pub unsafe fn from_vec_with_nul_unchecked(v: Vec<u8>) -> Self {\n+        Self { inner: v.into_boxed_slice() }\n+    }\n+\n+    /// Attempts to converts a `Vec` of `u8` to a `CString`.\n+    ///\n+    /// Runtime checks are present to ensure there is only one nul byte in the\n+    /// `Vec`, its last element.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If a nul byte is present and not the last element or no nul bytes\n+    /// is present, an error will be returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// A successful conversion will produce the same result as [`new`] when\n+    /// called without the ending nul byte.\n+    ///\n+    /// ```\n+    /// use std::ffi::CString;\n+    /// assert_eq!(\n+    ///     CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n+    ///         .expect(\"CString::from_vec_with_nul failed\"),\n+    ///     CString::new(b\"abc\".to_vec())\n+    /// );\n+    /// ```\n+    ///\n+    /// A incorrectly formatted vector will produce an error.\n+    ///\n+    /// ```\n+    /// use std::ffi::{CString, FromBytesWithNulError};\n+    /// // Interior nul byte\n+    /// let _: FromBytesWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n+    /// // No nul byte\n+    /// let _: FromBytesWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n+    /// ```\n+    ///\n+    /// [`new`]: #method.new\n+    #[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.46.0\")]\n+    pub fn from_vec_with_nul(v: Vec<u8>) -> Result<Self, FromBytesWithNulError> {\n+        let nul_pos = memchr::memchr(0, &v);\n+        match nul_pos {\n+            Some(nul_pos) if nul_pos + 1 == v.len() => {\n+                // SAFETY: We know there is only one nul byte, at the end\n+                // of the vec.\n+                Ok(unsafe { Self::from_vec_with_nul_unchecked(v) })\n+            }\n+            Some(nul_pos) => Err(FromBytesWithNulError::interior_nul(nul_pos)),\n+            None => Err(FromBytesWithNulError::not_nul_terminated()),\n+        }\n+    }\n }\n \n // Turns this `CString` into an empty string to prevent"}]}