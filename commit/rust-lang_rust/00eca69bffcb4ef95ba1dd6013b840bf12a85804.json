{"sha": "00eca69bffcb4ef95ba1dd6013b840bf12a85804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZWNhNjliZmZjYjRlZjk1YmExZGQ2MDEzYjg0MGJmMTJhODU4MDQ=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-24T06:46:30Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-24T06:46:30Z"}, "message": "Properly reject non-const arguments", "tree": {"sha": "a0f9e23cfc467a9b8859909622450a5fb2a413db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f9e23cfc467a9b8859909622450a5fb2a413db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00eca69bffcb4ef95ba1dd6013b840bf12a85804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00eca69bffcb4ef95ba1dd6013b840bf12a85804", "html_url": "https://github.com/rust-lang/rust/commit/00eca69bffcb4ef95ba1dd6013b840bf12a85804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00eca69bffcb4ef95ba1dd6013b840bf12a85804/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69cde44390de43748904bceb808e2e1b097e62a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/69cde44390de43748904bceb808e2e1b097e62a8", "html_url": "https://github.com/rust-lang/rust/commit/69cde44390de43748904bceb808e2e1b097e62a8"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "877633820be520731d0cc473b80ececa3cba5f30", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/00eca69bffcb4ef95ba1dd6013b840bf12a85804/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00eca69bffcb4ef95ba1dd6013b840bf12a85804/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=00eca69bffcb4ef95ba1dd6013b840bf12a85804", "patch": "@@ -2326,8 +2326,20 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ExprKind::Call(ref callee, ref arguments) => {\n                 self.resolve_expr(callee, Some(expr));\n-                for argument in arguments {\n-                    self.resolve_expr(argument, None);\n+                let const_args = self.legacy_const_generic_args(callee).unwrap_or(Vec::new());\n+                for (idx, argument) in arguments.iter().enumerate() {\n+                    if const_args.contains(&idx) {\n+                        self.with_constant_rib(\n+                            IsRepeatExpr::No,\n+                            argument.is_potential_trivial_const_param(),\n+                            None,\n+                            |this| {\n+                                this.resolve_expr(argument, None);\n+                            },\n+                        );\n+                    } else {\n+                        self.resolve_expr(argument, None);\n+                    }\n                 }\n             }\n             ExprKind::Type(ref type_expr, ref ty) => {\n@@ -2406,6 +2418,42 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+\n+    /// Checks if an expression refers to a function marked with\n+    /// `#[rustc_legacy_const_generics]` and returns the argument index list\n+    /// from the attribute.\n+    fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {\n+        if let ExprKind::Path(None, path) = &expr.kind {\n+            if path.segments.last().unwrap().args.is_some() {\n+                return None;\n+            }\n+            if let Some(partial_res) = self.r.get_partial_res(expr.id) {\n+                if partial_res.unresolved_segments() != 0 {\n+                    return None;\n+                }\n+                if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {\n+                    if def_id.is_local() {\n+                        return None;\n+                    }\n+                    let attrs = self.r.cstore().item_attrs(def_id, self.r.session);\n+                    let attr = attrs\n+                        .iter()\n+                        .find(|a| self.r.session.check_name(a, sym::rustc_legacy_const_generics))?;\n+                    let mut ret = vec![];\n+                    for meta in attr.meta_item_list()? {\n+                        match meta.literal()?.kind {\n+                            LitKind::Int(a, _) => {\n+                                ret.push(a as usize);\n+                            }\n+                            _ => panic!(\"invalid arg index\"),\n+                        }\n+                    }\n+                    return Some(ret);\n+                }\n+            }\n+        }\n+        None\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "538eee337cc6db3f2b0230f2ca19d126e711974b", "filename": "src/test/ui/legacy-const-generics-bad.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00eca69bffcb4ef95ba1dd6013b840bf12a85804/src%2Ftest%2Fui%2Flegacy-const-generics-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00eca69bffcb4ef95ba1dd6013b840bf12a85804/src%2Ftest%2Fui%2Flegacy-const-generics-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flegacy-const-generics-bad.rs?ref=00eca69bffcb4ef95ba1dd6013b840bf12a85804", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:legacy-const-generics.rs\n+\n+extern crate legacy_const_generics;\n+\n+fn foo<const N: usize>() {\n+    let a = 1;\n+    legacy_const_generics::foo(0, a, 2);\n+    //~^ ERROR attempt to use a non-constant value in a constant\n+\n+    legacy_const_generics::foo(0, N, 2);\n+\n+    legacy_const_generics::foo(0, N + 1, 2);\n+    //~^ ERROR generic parameters may not be used in const operations\n+}\n+\n+fn main() {}"}, {"sha": "5a44b8e70655352105a4694d256c60436b169032", "filename": "src/test/ui/legacy-const-generics-bad.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/00eca69bffcb4ef95ba1dd6013b840bf12a85804/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00eca69bffcb4ef95ba1dd6013b840bf12a85804/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr?ref=00eca69bffcb4ef95ba1dd6013b840bf12a85804", "patch": "@@ -0,0 +1,20 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/legacy-const-generics-bad.rs:7:35\n+   |\n+LL |     let a = 1;\n+   |     ----- help: consider using `const` instead of `let`: `const a`\n+LL |     legacy_const_generics::foo(0, a, 2);\n+   |                                   ^ non-constant value\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/legacy-const-generics-bad.rs:12:35\n+   |\n+LL |     legacy_const_generics::foo(0, N + 1, 2);\n+   |                                   ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}]}