{"sha": "44b01ccff3d993daae237c75d466050711d06268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjAxY2NmZjNkOTkzZGFhZTIzN2M3NWQ0NjYwNTA3MTFkMDYyNjg=", "commit": {"author": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-06T19:39:11Z"}, "committer": {"name": "Craig Disselkoen", "email": "craigdissel@gmail.com", "date": "2020-05-06T19:39:11Z"}, "message": "return a PathBuf instead of String", "tree": {"sha": "f3493ee99947e99117de7af12fc5bc6033c01a33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3493ee99947e99117de7af12fc5bc6033c01a33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b01ccff3d993daae237c75d466050711d06268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b01ccff3d993daae237c75d466050711d06268", "html_url": "https://github.com/rust-lang/rust/commit/44b01ccff3d993daae237c75d466050711d06268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b01ccff3d993daae237c75d466050711d06268/comments", "author": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cdisselkoen", "id": 4458638, "node_id": "MDQ6VXNlcjQ0NTg2Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4458638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdisselkoen", "html_url": "https://github.com/cdisselkoen", "followers_url": "https://api.github.com/users/cdisselkoen/followers", "following_url": "https://api.github.com/users/cdisselkoen/following{/other_user}", "gists_url": "https://api.github.com/users/cdisselkoen/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdisselkoen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdisselkoen/subscriptions", "organizations_url": "https://api.github.com/users/cdisselkoen/orgs", "repos_url": "https://api.github.com/users/cdisselkoen/repos", "events_url": "https://api.github.com/users/cdisselkoen/events{/privacy}", "received_events_url": "https://api.github.com/users/cdisselkoen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b76b4281e90292922455a9192f82a2b6b80d279", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b76b4281e90292922455a9192f82a2b6b80d279", "html_url": "https://github.com/rust-lang/rust/commit/1b76b4281e90292922455a9192f82a2b6b80d279"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "a1c4239be01ebfade593cd8a5b2fe7ab64546089", "filename": "crates/ra_env/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44b01ccff3d993daae237c75d466050711d06268/crates%2Fra_env%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b01ccff3d993daae237c75d466050711d06268/crates%2Fra_env%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_env%2Fsrc%2Flib.rs?ref=44b01ccff3d993daae237c75d466050711d06268", "patch": "@@ -4,15 +4,15 @@\n \n use anyhow::{Error, Result};\n use std::env;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-/// Return a `String` to use for the given executable.\n+/// Return a `PathBuf` to use for the given executable.\n ///\n /// E.g., `get_path_for_executable(\"cargo\")` may return just `cargo` if that\n /// gives a valid Cargo executable; or it may return a full path to a valid\n /// Cargo.\n-pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<String> {\n+pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<PathBuf> {\n     // The current implementation checks three places for an executable to use:\n     // 1) Appropriate environment variable (erroring if this is set but not a usable executable)\n     //      example: for cargo, this checks $CARGO environment variable; for rustc, $RUSTC; etc\n@@ -25,7 +25,7 @@ pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<Strin\n     let env_var = executable_name.to_ascii_uppercase();\n     if let Ok(path) = env::var(&env_var) {\n         if is_valid_executable(&path) {\n-            Ok(path)\n+            Ok(path.into())\n         } else {\n             Err(Error::msg(format!(\n                 \"`{}` environment variable points to something that's not a valid executable\",\n@@ -34,14 +34,14 @@ pub fn get_path_for_executable(executable_name: impl AsRef<str>) -> Result<Strin\n         }\n     } else {\n         if is_valid_executable(executable_name) {\n-            return Ok(executable_name.to_owned());\n+            return Ok(executable_name.into());\n         }\n         if let Some(mut path) = dirs::home_dir() {\n             path.push(\".cargo\");\n             path.push(\"bin\");\n             path.push(executable_name);\n             if is_valid_executable(&path) {\n-                return Ok(path.into_os_string().into_string().expect(\"Invalid Unicode in path\"));\n+                return Ok(path);\n             }\n         }\n         // This error message may also be caused by $PATH or $CARGO/$RUSTC/etc not being set correctly"}, {"sha": "ed374f241ca01ff74a13f6780773bf8e76a96ba9", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44b01ccff3d993daae237c75d466050711d06268/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b01ccff3d993daae237c75d466050711d06268/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=44b01ccff3d993daae237c75d466050711d06268", "patch": "@@ -89,9 +89,10 @@ fn create_command_text(program: &str, args: &[&str]) -> String {\n     format!(\"{} {}\", program, args.join(\" \"))\n }\n \n-fn run_command_in_cargo_dir(cargo_toml: &Path, program: &str, args: &[&str]) -> Result<Output> {\n+fn run_command_in_cargo_dir(cargo_toml: impl AsRef<Path>, program: impl AsRef<Path>, args: &[&str]) -> Result<Output> {\n+    let program = program.as_ref().as_os_str().to_str().expect(\"Invalid Unicode in path\");\n     let output = Command::new(program)\n-        .current_dir(cargo_toml.parent().unwrap())\n+        .current_dir(cargo_toml.as_ref().parent().unwrap())\n         .args(args)\n         .output()\n         .context(format!(\"{} failed\", create_command_text(program, args)))?;"}]}