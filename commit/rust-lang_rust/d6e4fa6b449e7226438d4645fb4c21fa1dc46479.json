{"sha": "d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTRmYTZiNDQ5ZTcyMjY0MzhkNDY0NWZiNGMyMWZhMWRjNDY0Nzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T00:35:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T00:40:06Z"}, "message": "Teach rustc to append istrs. Issue #855", "tree": {"sha": "34012252f050a7f759b8f2b9d8f15e80c81485dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34012252f050a7f759b8f2b9d8f15e80c81485dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "html_url": "https://github.com/rust-lang/rust/commit/d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e4fa6b449e7226438d4645fb4c21fa1dc46479/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab86fb79edd0c60e4685c0d865531011e6abdb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab86fb79edd0c60e4685c0d865531011e6abdb9", "html_url": "https://github.com/rust-lang/rust/commit/3ab86fb79edd0c60e4685c0d865531011e6abdb9"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "b2189a92637d3e911cd21b5efc752b7bb7ecc599", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6e4fa6b449e7226438d4645fb4c21fa1dc46479/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e4fa6b449e7226438d4645fb4c21fa1dc46479/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "patch": "@@ -354,11 +354,6 @@ fn trans_append(cx: &@block_ctxt, t: ty::t, orig_lhs: ValueRef,\n \n     let unit_ty = ty::sequence_element_type(bcx_tcx(cx), t);\n     let llunitty = type_of_or_i8(cx, unit_ty);\n-    alt ty::struct(bcx_tcx(cx), t) {\n-      ty::ty_istr. { }\n-      ty::ty_vec(_) { }\n-      _ { bcx_tcx(cx).sess.bug(\"non-istr/ivec in trans_append\"); }\n-    }\n \n     let rs = size_of(cx, unit_ty);\n     let bcx = rs.bcx;\n@@ -381,10 +376,31 @@ fn trans_append(cx: &@block_ctxt, t: ty::t, orig_lhs: ValueRef,\n     let rhs_len = rhs_len_and_data.len;\n     let rhs_data = rhs_len_and_data.data;\n     bcx = rhs_len_and_data.bcx;\n-    rs = reserve_space(bcx, llunitty, lhs, rhs_len);\n-    let lhs_data = rs.val;\n+\n+    let have_istrs = alt ty::struct(bcx_tcx(cx), t) {\n+      ty::ty_istr. { true }\n+      ty::ty_vec(_) { false }\n+      _ { bcx_tcx(cx).sess.bug(\"non-istr/ivec in trans_append\"); }\n+    };\n+\n+    let extra_len = if have_istrs {\n+        // Only need one of the nulls\n+        bcx.build.Sub(rhs_len, C_uint(1u))\n+    } else { rhs_len };\n+\n+    rs = reserve_space(bcx, llunitty, lhs, extra_len);\n     bcx = rs.bcx;\n \n+    let lhs_data = if have_istrs {\n+        let lhs_data = rs.val;\n+        let lhs_data_without_null_ptr = alloca(bcx, T_ptr(llunitty));\n+        incr_ptr(bcx, lhs_data, C_int(-1),\n+                 lhs_data_without_null_ptr);\n+        bcx.build.Load(lhs_data_without_null_ptr)\n+    } else {\n+        rs.val\n+    };\n+\n     // If rhs is lhs then our rhs pointer may have changed\n     rhs_len_and_data = get_len_and_data(bcx, rhs, unit_ty);\n     rhs_data = rhs_len_and_data.data;"}, {"sha": "8b0eb0ddc05bd67b6e107f649c81df1dc5122308", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6e4fa6b449e7226438d4645fb4c21fa1dc46479/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e4fa6b449e7226438d4645fb4c21fa1dc46479/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=d6e4fa6b449e7226438d4645fb4c21fa1dc46479", "patch": "@@ -39,6 +39,24 @@ fn test_heap_add() {\n     assert ~\"this should\" + ~\" totally work\" == ~\"this should totally work\";\n }\n \n+fn test_append() {\n+    let s = ~\"\";\n+    s += ~\"a\";\n+    assert s == ~\"a\";\n+\n+    let s = ~\"a\";\n+    s += ~\"b\";\n+    log s;\n+    assert s == ~\"ab\";\n+\n+    let s = ~\"c\";\n+    s += ~\"offee\";\n+    assert s == ~\"coffee\";\n+\n+    s += ~\"&tea\";\n+    assert s == ~\"coffee&tea\";\n+}\n+\n fn main() {\n     test_stack_assign();\n     test_heap_lit();\n@@ -47,4 +65,5 @@ fn main() {\n     test_stack_add();\n     test_stack_heap_add();\n     test_heap_add();\n+    test_append();\n }\n\\ No newline at end of file"}]}