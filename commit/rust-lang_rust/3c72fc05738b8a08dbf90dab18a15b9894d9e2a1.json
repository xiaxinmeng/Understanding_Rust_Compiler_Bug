{"sha": "3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNzJmYzA1NzM4YjhhMDhkYmY5MGRhYjE4YTE1Yjk4OTRkOWUyYTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-16T16:45:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-16T16:45:58Z"}, "message": "Anchor file-system operations to the file, and not to the source root.\n\nAnchoring to the SourceRoot wont' work if the path is absolute:\n\n  #[path = \"/tmp/foo.rs\"]\n  mod foo;\n\nAnchoring to a file will.\n\nHowever, we *should* anchor, instead of just producing an abs path.\n\nI can imagine a situation where, for example, rust-analyzer processes\ncrates from different machines (or, for example, from in-memory git\nbranch), where the same absolute path in different crates might refer\nto different files in the end!", "tree": {"sha": "18501e20ac9848d31019c572170aee9259f1d0ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18501e20ac9848d31019c572170aee9259f1d0ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "html_url": "https://github.com/rust-lang/rust/commit/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da34d630b878f14e85be02b8ffdb702edf736539", "url": "https://api.github.com/repos/rust-lang/rust/commits/da34d630b878f14e85be02b8ffdb702edf736539", "html_url": "https://github.com/rust-lang/rust/commit/da34d630b878f14e85be02b8ffdb702edf736539"}], "stats": {"total": 148, "additions": 67, "deletions": 81}, "files": [{"sha": "30db48f86828d1820bba8a62b08df4bf08f9eaef", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -3,7 +3,6 @@\n use std::any::Any;\n \n use hir_expand::diagnostics::Diagnostic;\n-use ra_db::RelativePathBuf;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n@@ -12,7 +11,7 @@ use hir_expand::{HirFileId, InFile};\n pub struct UnresolvedModule {\n     pub file: HirFileId,\n     pub decl: AstPtr<ast::Module>,\n-    pub candidate: RelativePathBuf,\n+    pub candidate: String,\n }\n \n impl Diagnostic for UnresolvedModule {"}, {"sha": "b3e5f491a36b8f1b25fd4f3c071a134923fb61c7", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -296,7 +296,6 @@ pub enum ModuleSource {\n \n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n-    use ra_db::RelativePathBuf;\n     use ra_syntax::{ast, AstPtr};\n \n     use crate::{db::DefDatabase, diagnostics::UnresolvedModule, nameres::LocalModuleId, AstId};\n@@ -306,7 +305,7 @@ mod diagnostics {\n         UnresolvedModule {\n             module: LocalModuleId,\n             declaration: AstId<ast::Module>,\n-            candidate: RelativePathBuf,\n+            candidate: String,\n         },\n     }\n "}, {"sha": "19fe0615abd00c5546fd63ca98beef253644abab", "filename": "crates/ra_hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -44,19 +44,19 @@ impl ModDir {\n         file_id: HirFileId,\n         name: &Name,\n         attr_path: Option<&SmolStr>,\n-    ) -> Result<(FileId, ModDir), RelativePathBuf> {\n+    ) -> Result<(FileId, ModDir), String> {\n         let file_id = file_id.original_file(db.upcast());\n \n         let mut candidate_files = Vec::new();\n         match attr_to_path(attr_path) {\n             Some(attr_path) => {\n                 let base =\n                     if self.root_non_dir_owner { self.path.parent().unwrap() } else { &self.path };\n-                candidate_files.push(base.join(attr_path))\n+                candidate_files.push(base.join(attr_path).to_string())\n             }\n             None => {\n-                candidate_files.push(self.path.join(&format!(\"{}.rs\", name)));\n-                candidate_files.push(self.path.join(&format!(\"{}/mod.rs\", name)));\n+                candidate_files.push(self.path.join(&format!(\"{}.rs\", name)).to_string());\n+                candidate_files.push(self.path.join(&format!(\"{}/mod.rs\", name)).to_string());\n             }\n         };\n "}, {"sha": "fd9abb55b1ecadab659ad177a97dc088b74b8a45", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -11,7 +11,7 @@ use hir::{\n     Semantics,\n };\n use itertools::Itertools;\n-use ra_db::{RelativePath, SourceDatabase, SourceDatabaseExt};\n+use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n@@ -57,14 +57,10 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n     })\n     .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n         let original_file = d.source().file_id.original_file(db);\n-        let source_root = db.file_source_root(original_file);\n-        let path = db\n-            .file_relative_path(original_file)\n-            .parent()\n-            .unwrap_or_else(|| RelativePath::new(\"\"))\n-            .join(&d.candidate);\n-        let fix =\n-            Fix::new(\"Create module\", FileSystemEdit::CreateFile { source_root, path }.into());\n+        let fix = Fix::new(\n+            \"Create module\",\n+            FileSystemEdit::CreateFile { anchor: original_file, dst: d.candidate.clone() }.into(),\n+        );\n         res.borrow_mut().push(Diagnostic {\n             range: sema.diagnostics_range(d).range,\n             message: d.message(),\n@@ -612,10 +608,10 @@ mod tests {\n                             source_file_edits: [],\n                             file_system_edits: [\n                                 CreateFile {\n-                                    source_root: SourceRootId(\n-                                        0,\n+                                    anchor: FileId(\n+                                        1,\n                                     ),\n-                                    path: \"foo.rs\",\n+                                    dst: \"foo.rs\",\n                                 },\n                             ],\n                             is_snippet: false,"}, {"sha": "c4f07f9057980a2c3826d332e5eb86f68bca6a84", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 41, "deletions": 50, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{ModuleSource, Semantics};\n-use ra_db::{RelativePath, RelativePathBuf, SourceDatabaseExt};\n+use ra_db::{RelativePathBuf, SourceDatabaseExt};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset, ast, ast::TypeAscriptionOwner, lex_single_valid_syntax_kind,\n@@ -92,23 +92,14 @@ fn rename_mod(\n             ModuleSource::SourceFile(..) => {\n                 let mod_path: RelativePathBuf = sema.db.file_relative_path(file_id);\n                 // mod is defined in path/to/dir/mod.rs\n-                let dst_path = if mod_path.file_stem() == Some(\"mod\") {\n-                    mod_path\n-                        .parent()\n-                        .and_then(|p| p.parent())\n-                        .or_else(|| Some(RelativePath::new(\"\")))\n-                        .map(|p| p.join(new_name).join(\"mod.rs\"))\n+                let dst = if mod_path.file_stem() == Some(\"mod\") {\n+                    format!(\"../{}/mod.rs\", new_name)\n                 } else {\n-                    Some(mod_path.with_file_name(new_name).with_extension(\"rs\"))\n+                    format!(\"{}.rs\", new_name)\n                 };\n-                if let Some(path) = dst_path {\n-                    let move_file = FileSystemEdit::MoveFile {\n-                        src: file_id,\n-                        dst_source_root: sema.db.file_source_root(position.file_id),\n-                        dst_path: path,\n-                    };\n-                    file_system_edits.push(move_file);\n-                }\n+                let move_file =\n+                    FileSystemEdit::MoveFile { src: file_id, anchor: position.file_id, dst };\n+                file_system_edits.push(move_file);\n             }\n             ModuleSource::Module(..) => {}\n         }\n@@ -623,16 +614,16 @@ mod tests {\n     #[test]\n     fn test_rename_mod() {\n         let (analysis, position) = analysis_and_position(\n-            \"\n-            //- /lib.rs\n-            mod bar;\n+            r#\"\n+//- /lib.rs\n+mod bar;\n \n-            //- /bar.rs\n-            mod foo<|>;\n+//- /bar.rs\n+mod foo<|>;\n \n-            //- /bar/foo.rs\n-            // emtpy\n-            \",\n+//- /bar/foo.rs\n+// emtpy\n+            \"#,\n         );\n         let new_name = \"foo2\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n@@ -662,10 +653,10 @@ mod tests {\n                             src: FileId(\n                                 3,\n                             ),\n-                            dst_source_root: SourceRootId(\n-                                0,\n+                            anchor: FileId(\n+                                2,\n                             ),\n-                            dst_path: \"bar/foo2.rs\",\n+                            dst: \"foo2.rs\",\n                         },\n                     ],\n                     is_snippet: false,\n@@ -678,12 +669,12 @@ mod tests {\n     #[test]\n     fn test_rename_mod_in_dir() {\n         let (analysis, position) = analysis_and_position(\n-            \"\n-            //- /lib.rs\n-            mod fo<|>o;\n-            //- /foo/mod.rs\n-            // emtpy\n-            \",\n+            r#\"\n+//- /lib.rs\n+mod fo<|>o;\n+//- /foo/mod.rs\n+// emtpy\n+            \"#,\n         );\n         let new_name = \"foo2\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n@@ -713,10 +704,10 @@ mod tests {\n                             src: FileId(\n                                 2,\n                             ),\n-                            dst_source_root: SourceRootId(\n-                                0,\n+                            anchor: FileId(\n+                                1,\n                             ),\n-                            dst_path: \"foo2/mod.rs\",\n+                            dst: \"../foo2/mod.rs\",\n                         },\n                     ],\n                     is_snippet: false,\n@@ -753,19 +744,19 @@ mod tests {\n     #[test]\n     fn test_rename_mod_filename_and_path() {\n         let (analysis, position) = analysis_and_position(\n-            \"\n-            //- /lib.rs\n-            mod bar;\n-            fn f() {\n-                bar::foo::fun()\n-            }\n+            r#\"\n+//- /lib.rs\n+mod bar;\n+fn f() {\n+    bar::foo::fun()\n+}\n \n-            //- /bar.rs\n-            pub mod foo<|>;\n+//- /bar.rs\n+pub mod foo<|>;\n \n-            //- /bar/foo.rs\n-            // pub fn fun() {}\n-            \",\n+//- /bar/foo.rs\n+// pub fn fun() {}\n+            \"#,\n         );\n         let new_name = \"foo2\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n@@ -808,10 +799,10 @@ mod tests {\n                             src: FileId(\n                                 3,\n                             ),\n-                            dst_source_root: SourceRootId(\n-                                0,\n+                            anchor: FileId(\n+                                2,\n                             ),\n-                            dst_path: \"bar/foo2.rs\",\n+                            dst: \"foo2.rs\",\n                         },\n                     ],\n                     is_snippet: false,"}, {"sha": "0bbd3c3e593255261917a8da32cef8d4402bd11f", "filename": "crates/ra_ide_db/src/source_change.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsource_change.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -3,7 +3,7 @@\n //!\n //! It can be viewed as a dual for `AnalysisChange`.\n \n-use ra_db::{FileId, RelativePathBuf, SourceRootId};\n+use ra_db::FileId;\n use ra_text_edit::TextEdit;\n \n #[derive(Debug, Clone)]\n@@ -44,8 +44,8 @@ impl From<Vec<SourceFileEdit>> for SourceChange {\n \n #[derive(Debug, Clone)]\n pub enum FileSystemEdit {\n-    CreateFile { source_root: SourceRootId, path: RelativePathBuf },\n-    MoveFile { src: FileId, dst_source_root: SourceRootId, dst_path: RelativePathBuf },\n+    CreateFile { anchor: FileId, dst: String },\n+    MoveFile { src: FileId, anchor: FileId, dst: String },\n }\n \n impl From<FileSystemEdit> for SourceChange {"}, {"sha": "73ca2a709c6494368f3c05f4a450c8588f6b4493", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -16,7 +16,7 @@ use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n-use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n+use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use stdx::format_to;\n \n@@ -298,9 +298,10 @@ impl GlobalStateSnapshot {\n         self.vfs.read().file_line_endings(VfsFile(id.0))\n     }\n \n-    pub fn path_to_url(&self, root: SourceRootId, path: &RelativePathBuf) -> Url {\n-        let base = self.vfs.read().root2path(VfsRoot(root.0));\n-        let path = path.to_path(base);\n+    pub fn anchored_path(&self, file_id: FileId, path: &str) -> Url {\n+        let mut base = self.vfs.read().file2path(VfsFile(file_id.0));\n+        base.pop();\n+        let path = base.join(path);\n         url_from_abs_path(&path)\n     }\n "}, {"sha": "2851b4d3132b6802eda908d587808c91a5503714", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c72fc05738b8a08dbf90dab18a15b9894d9e2a1/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3c72fc05738b8a08dbf90dab18a15b9894d9e2a1", "patch": "@@ -528,13 +528,13 @@ pub(crate) fn resource_op(\n     file_system_edit: FileSystemEdit,\n ) -> lsp_types::ResourceOp {\n     match file_system_edit {\n-        FileSystemEdit::CreateFile { source_root, path } => {\n-            let uri = snap.path_to_url(source_root, &path);\n+        FileSystemEdit::CreateFile { anchor, dst } => {\n+            let uri = snap.anchored_path(anchor, &dst);\n             lsp_types::ResourceOp::Create(lsp_types::CreateFile { uri, options: None })\n         }\n-        FileSystemEdit::MoveFile { src, dst_source_root, dst_path } => {\n+        FileSystemEdit::MoveFile { src, anchor, dst } => {\n             let old_uri = snap.file_id_to_url(src);\n-            let new_uri = snap.path_to_url(dst_source_root, &dst_path);\n+            let new_uri = snap.anchored_path(anchor, &dst);\n             lsp_types::ResourceOp::Rename(lsp_types::RenameFile { old_uri, new_uri, options: None })\n         }\n     }"}]}