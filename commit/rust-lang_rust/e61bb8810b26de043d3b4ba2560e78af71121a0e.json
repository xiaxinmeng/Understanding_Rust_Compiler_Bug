{"sha": "e61bb8810b26de043d3b4ba2560e78af71121a0e", "node_id": "C_kwDOAAsO6NoAKGU2MWJiODgxMGIyNmRlMDQzZDNiNGJhMjU2MGU3OGFmNzExMjFhMGU", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2023-05-08T06:42:56Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2023-05-08T06:42:56Z"}, "message": "Mark s390x condition code register as clobbered in inline assembly", "tree": {"sha": "ea5481bbfb301d27495fac6cd545b00d20cffc8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea5481bbfb301d27495fac6cd545b00d20cffc8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e61bb8810b26de043d3b4ba2560e78af71121a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e61bb8810b26de043d3b4ba2560e78af71121a0e", "html_url": "https://github.com/rust-lang/rust/commit/e61bb8810b26de043d3b4ba2560e78af71121a0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e61bb8810b26de043d3b4ba2560e78af71121a0e/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4190f2d3a46a59f435f7b42f58bc22b2f4d6917", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4190f2d3a46a59f435f7b42f58bc22b2f4d6917", "html_url": "https://github.com/rust-lang/rust/commit/c4190f2d3a46a59f435f7b42f58bc22b2f4d6917"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "70bcbf92f383a0f2f5ec9b9ddbb5fe3321e9209a", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e61bb8810b26de043d3b4ba2560e78af71121a0e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e61bb8810b26de043d3b4ba2560e78af71121a0e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=e61bb8810b26de043d3b4ba2560e78af71121a0e", "patch": "@@ -238,7 +238,9 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                 InlineAsmArch::Hexagon => {}\n                 InlineAsmArch::LoongArch64 => {}\n                 InlineAsmArch::Mips | InlineAsmArch::Mips64 => {}\n-                InlineAsmArch::S390x => {}\n+                InlineAsmArch::S390x => {\n+                    constraints.push(\"~{cc}\".to_string());\n+                }\n                 InlineAsmArch::SpirV => {}\n                 InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {}\n                 InlineAsmArch::Bpf => {}"}, {"sha": "532cb9eea1107ad56faaca76eec2daeadcf7b41e", "filename": "src/doc/unstable-book/src/language-features/asm-experimental-arch.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e61bb8810b26de043d3b4ba2560e78af71121a0e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "raw_url": "https://github.com/rust-lang/rust/raw/e61bb8810b26de043d3b4ba2560e78af71121a0e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm-experimental-arch.md?ref=e61bb8810b26de043d3b4ba2560e78af71121a0e", "patch": "@@ -18,6 +18,7 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n - MSP430\n - M68k\n - LoongArch\n+- s390x\n \n ## Register classes\n \n@@ -48,6 +49,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg_addr`     | `a[0-3]`                           | `a`                  |\n | LoongArch    | `reg`          | `$r1`, `$r[4-20]`, `$r[23,30]`     | `r`                  |\n | LoongArch    | `freg`         | `$f[0-31]`                         | `f`                  |\n+| s390x        | `reg`          | `r[0-10]`, `r[12-14]`              | `r`                  |\n+| s390x        | `freg`         | `f[0-15]`                          | `f`                  |\n \n > **Notes**:\n > - NVPTX doesn't have a fixed register set, so named registers are not supported.\n@@ -81,6 +84,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | M68k         | `reg_data`                      | None           | `i8`, `i16`, `i32`                      |\n | LoongArch64  | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`, `f32`, `f64` |\n | LoongArch64  | `freg`                          | None           | `f32`, `f64`                            |\n+| s390x        | `reg`                           | None           | `i8`, `i16`, `i32`, `i64`               |\n+| s390x        | `freg`                          | None           | `f32`, `f64`                            |\n \n ## Register aliases\n \n@@ -115,8 +120,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n \n | Architecture | Unsupported register                    | Reason                                                                                                                                                                              |\n | ------------ | --------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n-| All          | `sp`                                    | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n-| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n+| All          | `sp`, `r15` (s390x)                     | The stack pointer must be restored to its original value at the end of an asm code block.                                                                                           |\n+| All          | `fr` (Hexagon), `$fp` (MIPS), `Y` (AVR), `r4` (MSP430), `a6` (M68k), `$fp` (LoongArch), `r11` (s390x) | The frame pointer cannot be used as an input or output.                                                                                                                             |\n | All          | `r19` (Hexagon)                         | This is used internally by LLVM as a \"base pointer\" for functions with complex stack frames.                                                                                        |\n | MIPS         | `$0` or `$zero`                         | This is a constant zero register which can't be modified.                                                                                                                           |\n | MIPS         | `$1` or `$at`                           | Reserved for assembler.                                                                                                                                                             |\n@@ -147,6 +152,8 @@ This feature tracks `asm!` and `global_asm!` support for the following architect\n | PowerPC      | `freg`         | None     | `0`            | None          |\n | LoongArch    | `reg`          | None     | `$r2`          | None          |\n | LoongArch    | `freg`         | None     | `$f0`          | None          |\n+| s390x        | `reg`          | None     | `%r0`          | None          |\n+| s390x        | `freg`         | None     | `%f0`          | None          |\n \n # Flags covered by `preserves_flags`\n \n@@ -157,3 +164,5 @@ These flags registers must be restored upon exiting the asm block if the `preser\n   - The status register `r2`.\n - M68k\n   - The condition code register `ccr`.\n+- s390x\n+  - The condition code register `cc`."}]}