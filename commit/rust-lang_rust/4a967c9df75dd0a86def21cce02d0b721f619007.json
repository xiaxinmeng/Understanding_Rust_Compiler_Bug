{"sha": "4a967c9df75dd0a86def21cce02d0b721f619007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTY3YzlkZjc1ZGQwYTg2ZGVmMjFjY2UwMmQwYjcyMWY2MTkwMDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-08T20:47:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:04:51Z"}, "message": "propagate `region_bound_pairs` into MIR type-check", "tree": {"sha": "c9fc69ccee42158e6fd31e947fa77c62d263459e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9fc69ccee42158e6fd31e947fa77c62d263459e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a967c9df75dd0a86def21cce02d0b721f619007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a967c9df75dd0a86def21cce02d0b721f619007", "html_url": "https://github.com/rust-lang/rust/commit/4a967c9df75dd0a86def21cce02d0b721f619007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a967c9df75dd0a86def21cce02d0b721f619007/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe89f4ba86b5b3adc1af5b795b3017c9500caba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe89f4ba86b5b3adc1af5b795b3017c9500caba3", "html_url": "https://github.com/rust-lang/rust/commit/fe89f4ba86b5b3adc1af5b795b3017c9500caba3"}], "stats": {"total": 333, "additions": 300, "deletions": 33}, "files": [{"sha": "d18883ce47cbd70dc07ce11a39b74d6ead600804", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -85,6 +85,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         mir_node_id,\n         param_env,\n         mir,\n+        &universal_regions.region_bound_pairs,\n         fr_fn_body,\n         universal_regions.input_tys,\n         universal_regions.output_ty,"}, {"sha": "ee455c3e921f1a44bbee891eb20c8cc3982989ff", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -17,7 +17,7 @@ use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedLvals;\n use dataflow::move_paths::MoveData;\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n-use rustc::infer::region_constraints::RegionConstraintData;\n+use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n use rustc::traits::{self, FulfillmentContext};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n@@ -54,6 +54,8 @@ mod liveness;\n /// - `body_id` -- body-id of the MIR being checked\n /// - `param_env` -- parameter environment to use for trait solving\n /// - `mir` -- MIR to type-check\n+/// - `region_bound_pairs` -- the implied outlives obligations between type parameters\n+///   and lifetimes (e.g., `&'a T` implies `T: 'a`)\n /// - `implicit_region_bound` -- a region which all generic parameters are assumed\n ///   to outlive; should represent the fn body\n /// - `input_tys` -- fully liberated, but **not** normalized, expected types of the arguments;\n@@ -69,6 +71,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n+    region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: ty::Region<'tcx>,\n     input_tys: &[Ty<'tcx>],\n     output_ty: Ty<'tcx>,\n@@ -81,6 +84,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n         body_id,\n         param_env,\n         mir,\n+        region_bound_pairs,\n         Some(implicit_region_bound),\n         &mut |cx| {\n             liveness::generate(cx, mir, liveness, flow_inits, move_data);\n@@ -100,10 +104,17 @@ fn type_check_internal<'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n+    region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     extra: &mut FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    let mut checker = TypeChecker::new(infcx, body_id, param_env, implicit_region_bound);\n+    let mut checker = TypeChecker::new(\n+        infcx,\n+        body_id,\n+        param_env,\n+        region_bound_pairs,\n+        implicit_region_bound,\n+    );\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, mir);\n         verifier.visit_mir(mir);\n@@ -571,6 +582,7 @@ struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'gcx>,\n     last_span: Span,\n     body_id: ast::NodeId,\n+    region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     constraints: MirTypeckRegionConstraints<'tcx>,\n@@ -625,13 +637,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n         body_id: ast::NodeId,\n         param_env: ty::ParamEnv<'gcx>,\n+        region_bound_pairs: &'a [(ty::Region<'tcx>, GenericKind<'tcx>)],\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n     ) -> Self {\n         TypeChecker {\n             infcx,\n             last_span: DUMMY_SP,\n             body_id,\n             param_env,\n+            region_bound_pairs,\n             implicit_region_bound,\n             reported_errors: FxHashSet(),\n             constraints: MirTypeckRegionConstraints::default(),\n@@ -658,7 +672,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n \n         self.infcx.process_registered_region_obligations(\n-            &[],\n+            self.region_bound_pairs,\n             self.implicit_region_bound,\n             self.param_env,\n             self.body_id,\n@@ -764,12 +778,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::StorageLive(_) |\n-            StatementKind::StorageDead(_) |\n-            StatementKind::InlineAsm { .. } |\n-            StatementKind::EndRegion(_) |\n-            StatementKind::Validate(..) |\n-            StatementKind::Nop => {}\n+            StatementKind::StorageLive(_)\n+            | StatementKind::StorageDead(_)\n+            | StatementKind::InlineAsm { .. }\n+            | StatementKind::EndRegion(_)\n+            | StatementKind::Validate(..)\n+            | StatementKind::Nop => {}\n         }\n     }\n \n@@ -782,13 +796,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         debug!(\"check_terminator: {:?}\", term);\n         let tcx = self.tcx();\n         match term.kind {\n-            TerminatorKind::Goto { .. } |\n-            TerminatorKind::Resume |\n-            TerminatorKind::Return |\n-            TerminatorKind::GeneratorDrop |\n-            TerminatorKind::Unreachable |\n-            TerminatorKind::Drop { .. } |\n-            TerminatorKind::FalseEdges { .. } => {\n+            TerminatorKind::Goto { .. }\n+            | TerminatorKind::Resume\n+            | TerminatorKind::Return\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::FalseEdges { .. } => {\n                 // no checks needed for these\n             }\n \n@@ -888,9 +902,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // output) types in the signature must be live, since\n                 // all the inputs that fed into it were live.\n                 for &late_bound_region in map.values() {\n-                    self.constraints\n-                        .liveness_set\n-                        .push((late_bound_region, term_location, Cause::LiveOther(term_location)));\n+                    self.constraints.liveness_set.push((\n+                        late_bound_region,\n+                        term_location,\n+                        Cause::LiveOther(term_location),\n+                    ));\n                 }\n \n                 if self.is_box_free(func) {\n@@ -1100,9 +1116,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             }\n             TerminatorKind::Unreachable => {}\n-            TerminatorKind::Drop { target, unwind, .. } |\n-            TerminatorKind::DropAndReplace { target, unwind, .. } |\n-            TerminatorKind::Assert {\n+            TerminatorKind::Drop { target, unwind, .. }\n+            | TerminatorKind::DropAndReplace { target, unwind, .. }\n+            | TerminatorKind::Assert {\n                 target,\n                 cleanup: unwind,\n                 ..\n@@ -1358,13 +1374,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             },\n \n             // FIXME: These other cases have to be implemented in future PRs\n-            Rvalue::Use(..) |\n-            Rvalue::Ref(..) |\n-            Rvalue::Len(..) |\n-            Rvalue::BinaryOp(..) |\n-            Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::UnaryOp(..) |\n-            Rvalue::Discriminant(..) => {}\n+            Rvalue::Use(..)\n+            | Rvalue::Ref(..)\n+            | Rvalue::Len(..)\n+            | Rvalue::BinaryOp(..)\n+            | Rvalue::CheckedBinaryOp(..)\n+            | Rvalue::UnaryOp(..)\n+            | Rvalue::Discriminant(..) => {}\n         }\n     }\n \n@@ -1498,9 +1514,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             let cause = this.misc(this.last_span);\n             let obligations = predicates\n                 .iter()\n-                .map(|&p| {\n-                    traits::Obligation::new(cause.clone(), this.param_env, p)\n-                })\n+                .map(|&p| traits::Obligation::new(cause.clone(), this.param_env, p))\n                 .collect();\n             Ok(InferOk {\n                 value: (),\n@@ -1564,7 +1578,7 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _ = type_check_internal(&infcx, id, param_env, mir, None, &mut |_| ());\n+            let _ = type_check_internal(&infcx, id, param_env, mir, &[], None, &mut |_| ());\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}, {"sha": "9a7c2838cde2930b2c536ad4aea530592476ad58", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+// Test that we can deduce when projections like `T::Item` outlive the\n+// function body. Test that this does not imply that `T: 'a` holds.\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+fn twice<F, T>(mut value: T, mut f: F)\n+where\n+    F: FnMut(&T, Cell<&Option<T::Item>>),\n+    T: Iterator,\n+{\n+    let mut n = value.next();\n+    f(&value, Cell::new(&n));\n+    f(&value, Cell::new(&n));\n+}\n+\n+#[rustc_errors]\n+fn generic1<T: Iterator>(value: T) {\n+    // No error here:\n+    twice(value, |value_ref, item| invoke1(item));\n+}\n+\n+fn invoke1<'a, T>(x: Cell<&'a Option<T>>)\n+where\n+    T: 'a,\n+{\n+}\n+\n+#[rustc_errors]\n+fn generic2<T: Iterator>(value: T) {\n+    twice(value, |value_ref, item| invoke2(value_ref, item));\n+    //~^ WARNING not reporting region error due to -Znll\n+    //~| ERROR `T` does not outlive\n+}\n+\n+fn invoke2<'a, T, U>(a: &T, b: Cell<&'a Option<U>>)\n+where\n+    T: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "6cdf1b6f0a2120abf2960fc9b678c72c517d7504", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/projection-implied-bounds.rs:45:36\n+   |\n+45 |     twice(value, |value_ref, item| invoke2(value_ref, item));\n+   |                                    ^^^^^^^\n+\n+error: `T` does not outlive `'_#0r`\n+  --> $DIR/projection-implied-bounds.rs:45:18\n+   |\n+45 |     twice(value, |value_ref, item| invoke2(value_ref, item));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d632bc8d0f60ef50c59f4ead4aa920154f51f009", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![allow(warnings)]\n+#![feature(dyn_trait)]\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Invoke in such a way that the callee knows:\n+//\n+// - 'a: 'x\n+//\n+// and it must prove that `T: 'x`. Callee passes along `T: 'a`.\n+fn twice<'a, F, T>(v: Cell<&'a ()>, value: T, mut f: F)\n+where\n+    F: for<'x> FnMut(Option<Cell<&'a &'x ()>>, &T),\n+{\n+    f(None, &value);\n+    f(None, &value);\n+}\n+\n+#[rustc_regions]\n+fn generic<T>(value: T) {\n+    let cell = Cell::new(&());\n+    twice(cell, value, |a, b| invoke(a, b));\n+    //~^ WARNING not reporting region error\n+    //\n+    // This error from the old region solver looks bogus.\n+}\n+\n+#[rustc_regions]\n+fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+    twice(cell, value, |a, b| invoke(a, b));\n+    //~^ WARNING not reporting region error\n+    //~| WARNING not reporting region error\n+    //~| ERROR `T` does not outlive\n+}\n+\n+fn invoke<'a, 'x, T>(x: Option<Cell<&'x &'a ()>>, y: &T)\n+where\n+    T: 'x,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "f6ca614ea38d93121fe7a6338afc9625ef45783d", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -0,0 +1,85 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:35:31\n+   |\n+35 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                               ^^^^^^^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:31\n+   |\n+43 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                               ^^^^^^\n+\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:31\n+   |\n+43 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                               ^^^^^^^^^^^^\n+\n+note: External requirements\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:35:24\n+   |\n+35 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n+               T,\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+           ]\n+   = note: number of external vids: 2\n+   = note: where T: '_#1r\n+\n+note: External requirements\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n+   |\n+43 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n+               T,\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+           ]\n+   = note: number of external vids: 2\n+   = note: where T: '_#1r\n+\n+note: No external requirements\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:33:1\n+   |\n+33 | / fn generic<T>(value: T) {\n+34 | |     let cell = Cell::new(&());\n+35 | |     twice(cell, value, |a, b| invoke(a, b));\n+36 | |     //~^ WARNING not reporting region error\n+37 | |     //\n+38 | |     // This error from the old region solver looks bogus.\n+39 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:5 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]) with substs [\n+               T\n+           ]\n+\n+error: `T` does not outlive `'_#3r`\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n+   |\n+43 |     twice(cell, value, |a, b| invoke(a, b));\n+   |                        ^^^^^^^^^^^^^^^^^^^\n+\n+note: No external requirements\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:1\n+   |\n+42 | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+43 | |     twice(cell, value, |a, b| invoke(a, b));\n+44 | |     //~^ WARNING not reporting region error\n+45 | |     //~| WARNING not reporting region error\n+46 | |     //~| ERROR `T` does not outlive\n+47 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]) with substs [\n+               T\n+           ]\n+\n+error: aborting due to previous error\n+"}, {"sha": "cab7ba7a5052518d23bfe576f46cad2a6e914235", "filename": "src/test/ui/nll/ty-outlives/ty-param-implied-bounds.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs?ref=4a967c9df75dd0a86def21cce02d0b721f619007", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// must-compile-successfully\n+\n+// Test that we assume that universal types like `T` outlive the\n+// function body.\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+fn twice<F, T>(value: T, mut f: F)\n+where\n+    F: FnMut(Cell<&T>),\n+{\n+    f(Cell::new(&value));\n+    f(Cell::new(&value));\n+}\n+\n+#[rustc_errors]\n+fn generic<T>(value: T) {\n+    // No error here:\n+    twice(value, |r| invoke(r));\n+}\n+\n+fn invoke<'a, T>(x: Cell<&'a T>)\n+where\n+    T: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/ui/nll/ty-outlives/ty-param-implied-bounds.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a967c9df75dd0a86def21cce02d0b721f619007/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.stderr?ref=4a967c9df75dd0a86def21cce02d0b721f619007"}]}