{"sha": "95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZjYwMGQ2YjlhYTg5MjAwMGM4ZDUyNWE1ZjVjZWU5Zjg5YjZkMWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-07T21:42:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-07T21:42:49Z"}, "message": "Remove `MatchCheckCtxt::create_and_enter`.\n\nIt has a single call site.", "tree": {"sha": "40ae3bcda1b274e8601fb4cb31b2c5679bf80627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ae3bcda1b274e8601fb4cb31b2c5679bf80627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "html_url": "https://github.com/rust-lang/rust/commit/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc577fc719e00f60004c8b22db0256f4c9da4b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc577fc719e00f60004c8b22db0256f4c9da4b2", "html_url": "https://github.com/rust-lang/rust/commit/cbc577fc719e00f60004c8b22db0256f4c9da4b2"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "cdafb63f1ebc17d20ee528038e0b2b1b00c2172d", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "patch": "@@ -580,21 +580,11 @@ crate struct MatchCheckCtxt<'a, 'tcx> {\n     /// outside it's module and should not be matchable with an empty match\n     /// statement.\n     crate module: DefId,\n-    param_env: ty::ParamEnv<'tcx>,\n+    crate param_env: ty::ParamEnv<'tcx>,\n     crate pattern_arena: &'a TypedArena<Pat<'tcx>>,\n }\n \n impl<'a, 'tcx> MatchCheckCtxt<'a, 'tcx> {\n-    crate fn create_and_enter<R>(\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        pattern_arena: &'a TypedArena<Pat<'tcx>>,\n-        module: DefId,\n-        f: impl FnOnce(MatchCheckCtxt<'a, 'tcx>) -> R,\n-    ) -> R {\n-        f(MatchCheckCtxt { tcx, param_env, module, pattern_arena })\n-    }\n-\n     fn is_uninhabited(&self, ty: Ty<'tcx>) -> bool {\n         if self.tcx.features().exhaustive_patterns {\n             self.tcx.is_ty_uninhabited_from(self.module, ty, self.param_env)"}, {"sha": "c3e853c0b2d1242b962bb6f9ac70cb6521a1af90", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f600d6b9aa892000c8d525a5f5cee9f89b6d1d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=95f600d6b9aa892000c8d525a5f5cee9f89b6d1d", "patch": "@@ -149,13 +149,13 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n \n     fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n         let module = self.tcx.parent_module(hir_id);\n-        MatchCheckCtxt::create_and_enter(\n-            self.tcx,\n-            self.param_env,\n-            &self.pattern_arena,\n-            module.to_def_id(),\n-            f,\n-        );\n+        let cx = MatchCheckCtxt {\n+            tcx: self.tcx,\n+            param_env: self.param_env,\n+            module: module.to_def_id(),\n+            pattern_arena: &self.pattern_arena,\n+        };\n+        f(cx);\n     }\n \n     fn check_match("}]}