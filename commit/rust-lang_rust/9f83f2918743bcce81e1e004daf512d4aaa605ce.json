{"sha": "9f83f2918743bcce81e1e004daf512d4aaa605ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODNmMjkxODc0M2JjY2U4MWUxZTAwNGRhZjUxMmQ0YWFhNjA1Y2U=", "commit": {"author": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-13T17:14:24Z"}, "committer": {"name": "Jonathan Behrens", "email": "fintelia@gmail.com", "date": "2017-05-13T17:14:24Z"}, "message": "Refactor file range checking", "tree": {"sha": "4780dbb45ab6f49638714154833b021d38460150", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4780dbb45ab6f49638714154833b021d38460150"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f83f2918743bcce81e1e004daf512d4aaa605ce", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEz+31Or6w9EWGEiCukUmbp1Q7H0cFAlkXPvAACgkQkUmbp1Q7\nH0cslAf+OyVsGQsi7pZLMTtwp0rLZKJ2a7c8+rggKMpCtGDztqbhDhyyQdD3V4j2\nbK4aC++1/yaV/bqwAY69/0tIu/b+G7amREy0fRKAQhPgys3ZhUSRjwKRkdWaq8Rk\nv/ezOi2sL/zD05rvver/TXiEFPRT8TLDJB8tOF5+wwBhU+RvJRISW8q88GMs9LeE\n4WttNqM2P2eQUFTaZtCEHVXUbcyNlduG3TC+MtDcm4trnG4yoURJPibqvczGj732\nLMKnZVkrtwgKg96IBvaWNQDYx8c5rMks9n3CpVC8j73UVYKJMcfFH2rxKqAbEqVn\nqsGLwF7+xrkAnPYATExe/MlIL+WMZQ==\n=jVq6\n-----END PGP SIGNATURE-----", "payload": "tree 4780dbb45ab6f49638714154833b021d38460150\nparent b1c9832c9b54e75141501b691844bdfd37cde7cb\nauthor Jonathan Behrens <fintelia@gmail.com> 1494695664 -0400\ncommitter Jonathan Behrens <fintelia@gmail.com> 1494695664 -0400\n\nRefactor file range checking\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f83f2918743bcce81e1e004daf512d4aaa605ce", "html_url": "https://github.com/rust-lang/rust/commit/9f83f2918743bcce81e1e004daf512d4aaa605ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f83f2918743bcce81e1e004daf512d4aaa605ce/comments", "author": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fintelia", "id": 4943209, "node_id": "MDQ6VXNlcjQ5NDMyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/4943209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fintelia", "html_url": "https://github.com/fintelia", "followers_url": "https://api.github.com/users/fintelia/followers", "following_url": "https://api.github.com/users/fintelia/following{/other_user}", "gists_url": "https://api.github.com/users/fintelia/gists{/gist_id}", "starred_url": "https://api.github.com/users/fintelia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fintelia/subscriptions", "organizations_url": "https://api.github.com/users/fintelia/orgs", "repos_url": "https://api.github.com/users/fintelia/repos", "events_url": "https://api.github.com/users/fintelia/events{/privacy}", "received_events_url": "https://api.github.com/users/fintelia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c9832c9b54e75141501b691844bdfd37cde7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c9832c9b54e75141501b691844bdfd37cde7cb", "html_url": "https://github.com/rust-lang/rust/commit/b1c9832c9b54e75141501b691844bdfd37cde7cb"}], "stats": {"total": 55, "additions": 17, "deletions": 38}, "files": [{"sha": "47497bde03dd3f1d28dbb87eab8e15c7d9eb1f68", "filename": "src/file_lines.rs", "status": "modified", "additions": 17, "deletions": 38, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9f83f2918743bcce81e1e004daf512d4aaa605ce/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f83f2918743bcce81e1e004daf512d4aaa605ce/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=9f83f2918743bcce81e1e004daf512d4aaa605ce", "patch": "@@ -115,62 +115,41 @@ impl FileLines {\n         Files(self.0.as_ref().map(MultiMap::keys))\n     }\n \n-    /// Returns true if `range` is fully contained in `self`.\n-    pub fn contains(&self, range: &LineRange) -> bool {\n+    /// Returns true if `self` includes all lines in all files. Otherwise runs `f` on all ranges in\n+    /// the designated file (if any) and returns true if `f` ever does.\n+    fn file_range_matches<F>(&self, file_name: &str, f: F) -> bool\n+        where F: FnMut(&Range) -> bool\n+    {\n         let map = match self.0 {\n             // `None` means \"all lines in all files\".\n             None => return true,\n             Some(ref map) => map,\n         };\n \n-        match canonicalize_path_string(range.file_name())\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+        match canonicalize_path_string(file_name).and_then(|file| map.get_vec(&file).ok_or(())) {\n+            Ok(ranges) => ranges.iter().any(f),\n             Err(_) => false,\n         }\n     }\n \n+    /// Returns true if `range` is fully contained in `self`.\n+    pub fn contains(&self, range: &LineRange) -> bool {\n+        self.file_range_matches(range.file_name(), |r| r.contains(Range::from(range)))\n+    }\n+\n     /// Returns true if any lines in `range` are in `self`.\n     pub fn intersects(&self, range: &LineRange) -> bool {\n-        let map = match self.0 {\n-            // `None` means \"all lines in all files\".\n-            None => return true,\n-            Some(ref map) => map,\n-        };\n-\n-        match canonicalize_path_string(range.file_name())\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n-            Err(_) => false,\n-        }\n+        self.file_range_matches(range.file_name(), |r| r.intersects(Range::from(range)))\n     }\n \n+    /// Returns true if `line` from `file_name` is in `self`.\n     pub fn contains_line(&self, file_name: &str, line: usize) -> bool {\n-        let map = match self.0 {\n-            // `None` means \"all lines in all files\".\n-            None => return true,\n-            Some(ref map) => map,\n-        };\n-\n-        match canonicalize_path_string(file_name)\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.lo <= line && r.hi >= line),\n-            Err(_) => false,\n-        }\n+        self.file_range_matches(file_name, |r| r.lo <= line && r.hi >= line)\n     }\n \n+    /// Returns true if any of the lines between `lo` and `hi` from `file_name` are in `self`.\n     pub fn intersects_range(&self, file_name: &str, lo: usize, hi: usize) -> bool {\n-        let map = match self.0 {\n-            // `None` means \"all lines in all files\".\n-            None => return true,\n-            Some(ref map) => map,\n-        };\n-\n-        match canonicalize_path_string(file_name)\n-                  .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n-            Ok(ranges) => ranges.iter().any(|r| r.intersects(Range::new(lo, hi))),\n-            Err(_) => false,\n-        }\n+        self.file_range_matches(file_name, |r| r.intersects(Range::new(lo, hi)))\n     }\n }\n "}]}