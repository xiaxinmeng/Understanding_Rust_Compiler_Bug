{"sha": "58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZDg3NjFhYjNmMmVkYTM1MzZjMGE4ZTgxZjIxNzk2NTVhNmZiMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-16T18:24:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-16T18:24:17Z"}, "message": "Auto merge of #46029 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #45951, #45973, #45984, #45993, #46005, #46010\n- Failed merges:", "tree": {"sha": "560f6b6e689e6a5a91362e5d60ff3833b4c47bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/560f6b6e689e6a5a91362e5d60ff3833b4c47bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "html_url": "https://github.com/rust-lang/rust/commit/58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "481b42b50745d433c5bcfd90e7a03a4b9110a677", "url": "https://api.github.com/repos/rust-lang/rust/commits/481b42b50745d433c5bcfd90e7a03a4b9110a677", "html_url": "https://github.com/rust-lang/rust/commit/481b42b50745d433c5bcfd90e7a03a4b9110a677"}, {"sha": "d57fed893e63290c7ef58096cabc3aeea514014f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57fed893e63290c7ef58096cabc3aeea514014f", "html_url": "https://github.com/rust-lang/rust/commit/d57fed893e63290c7ef58096cabc3aeea514014f"}], "stats": {"total": 334, "additions": 144, "deletions": 190}, "files": [{"sha": "acae0daa86b6bd30e30f12ce7f531594c3b7c233", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -232,7 +232,7 @@ impl<'a, B: ?Sized> Cow<'a, B>\n     ///\n     /// assert_eq!(\n     ///   cow.into_owned(),\n-    ///   Cow::Owned(String::from(s))\n+    ///   String::from(s)\n     /// );\n     /// ```\n     ///\n@@ -246,7 +246,7 @@ impl<'a, B: ?Sized> Cow<'a, B>\n     ///\n     /// assert_eq!(\n     ///   cow.into_owned(),\n-    ///   Cow::Owned(String::from(s))\n+    ///   String::from(s)\n     /// );\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "05c371113b4c40ce26d098d7ff2192206d31e612", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -47,27 +47,27 @@ struct CheckAttrVisitor<'a> {\n \n impl<'a> CheckAttrVisitor<'a> {\n     /// Check any attribute.\n-    fn check_attribute(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_attribute(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if let Some(name) = attr.name() {\n             match &*name.as_str() {\n-                \"inline\" => self.check_inline(attr, target),\n-                \"repr\" => self.check_repr(attr, target),\n+                \"inline\" => self.check_inline(attr, item, target),\n+                \"repr\" => self.check_repr(attr, item, target),\n                 _ => (),\n             }\n         }\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n-    fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_inline(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         if target != Target::Fn {\n             struct_span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\")\n-                .span_label(attr.span, \"requires a function\")\n+                .span_label(item.span, \"not a function\")\n                 .emit();\n         }\n     }\n \n     /// Check if an `#[repr]` attr is valid.\n-    fn check_repr(&self, attr: &ast::Attribute, target: Target) {\n+    fn check_repr(&self, attr: &ast::Attribute, item: &ast::Item, target: Target) {\n         let words = match attr.meta_item_list() {\n             Some(words) => words,\n             None => {\n@@ -139,7 +139,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 _ => continue,\n             };\n             struct_span_err!(self.sess, attr.span, E0517, \"{}\", message)\n-                .span_label(attr.span, format!(\"requires {}\", label))\n+                .span_label(item.span, format!(\"not {}\", label))\n                 .emit();\n         }\n         if conflicting_reprs > 1 {\n@@ -153,7 +153,7 @@ impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         let target = Target::from_item(item);\n         for attr in &item.attrs {\n-            self.check_attribute(attr, target);\n+            self.check_attribute(attr, item, target);\n         }\n         visit::walk_item(self, item);\n     }"}, {"sha": "8b55d64c6c67afd4867353e5c940587190a12e0d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -1471,8 +1471,15 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             Some(\"human\") => ErrorOutputType::HumanReadable(color),\n             Some(\"json\")  => ErrorOutputType::Json(false),\n             Some(\"pretty-json\") => ErrorOutputType::Json(true),\n-            Some(\"short\") => ErrorOutputType::Short(color),\n-\n+            Some(\"short\") => {\n+                if nightly_options::is_unstable_enabled(matches) {\n+                    ErrorOutputType::Short(color)\n+                } else {\n+                    early_error(ErrorOutputType::default(),\n+                                &format!(\"the `-Z unstable-options` flag must also be passed to \\\n+                                          enable the short error message option\"));\n+                }\n+            }\n             None => ErrorOutputType::HumanReadable(color),\n \n             Some(arg) => {"}, {"sha": "d9f502cbdeeb5e6202000653aff4260fc004bd23", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -117,6 +117,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use syntax::abi::Abi;\n use syntax::ast;\n+use syntax::attr;\n use syntax::codemap::{self, original_sp, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n@@ -1561,12 +1562,15 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n \n-    if vs.is_empty() && tcx.has_attr(def_id, \"repr\") {\n-        struct_span_err!(\n-            tcx.sess, sp, E0084,\n-            \"unsupported representation for zero-variant enum\")\n-            .span_label(sp, \"unsupported enum representation\")\n-            .emit();\n+    if vs.is_empty() {\n+        let attributes = tcx.get_attrs(def_id);\n+        if let Some(attr) = attr::find_by_name(&attributes, \"repr\") {\n+            struct_span_err!(\n+                tcx.sess, attr.span, E0084,\n+                \"unsupported representation for zero-variant enum\")\n+                .span_label(sp, \"zero-variant enum\")\n+                .emit();\n+        }\n     }\n \n     let repr_type_ty = def.repr.discr_type().to_ty(tcx);"}, {"sha": "e848a8d3853b9aef8e29cc35ff0250f2755c699f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -1683,7 +1683,7 @@ impl<'a> Item<'a> {\n             format!(\"{}-{}\", self.item.source.loline, self.item.source.hiline)\n         };\n         Some(format!(\"{root}src/{krate}/{path}#{lines}\",\n-                     root = root,\n+                     root = Escape(&root),\n                      krate = krate,\n                      path = path,\n                      lines = lines))"}, {"sha": "491dbed01f1273555c5f78de8b18ed217b3995d0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -29,6 +29,7 @@ use std_inject;\n use symbol::Symbol;\n use symbol::keywords;\n use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::hygiene::ExpnFormat;\n use tokenstream::{TokenStream, TokenTree};\n use util::small_vector::SmallVector;\n use visit::Visitor;\n@@ -151,6 +152,26 @@ impl ExpansionKind {\n     }\n }\n \n+fn macro_bang_format(path: &ast::Path) -> ExpnFormat {\n+    // We don't want to format a path using pretty-printing,\n+    // `format!(\"{}\", path)`, because that tries to insert\n+    // line-breaks and is slow.\n+    let mut path_str = String::with_capacity(64);\n+    for (i, segment) in path.segments.iter().enumerate() {\n+        if i != 0 {\n+            path_str.push_str(\"::\");\n+        }\n+\n+        if segment.identifier.name != keywords::CrateRoot.name() &&\n+            segment.identifier.name != keywords::DollarCrate.name()\n+        {\n+            path_str.push_str(&segment.identifier.name.as_str())\n+        }\n+    }\n+\n+    MacroBang(Symbol::intern(&path_str))\n+}\n+\n pub struct Invocation {\n     pub kind: InvocationKind,\n     expansion_kind: ExpansionKind,\n@@ -517,7 +538,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             mark.set_expn_info(ExpnInfo {\n                 call_site: span,\n                 callee: NameAndSpan {\n-                    format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                    format: macro_bang_format(path),\n                     span: def_site_span,\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n@@ -564,7 +585,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                     call_site: span,\n                     callee: NameAndSpan {\n-                        format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                        format: macro_bang_format(path),\n                         span: tt_span,\n                         allow_internal_unstable,\n                         allow_internal_unsafe: false,\n@@ -600,7 +621,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n                     call_site: span,\n                     callee: NameAndSpan {\n-                        format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n+                        format: macro_bang_format(path),\n                         // FIXME procedural macros do not have proper span info\n                         // yet, when they do, we should use it here.\n                         span: None,"}, {"sha": "d19eed7124e82b798ebe170723a853a651921e88", "filename": "src/test/compile-fail/E0084.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0084.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(i32)]\n-enum Foo {}\n-//~^ ERROR E0084\n-//~| unsupported enum representation\n+#[repr(i32)] //~ ERROR: E0084\n+enum Foo {} //~ NOTE: zero-variant enum\n \n fn main() {\n }"}, {"sha": "7feda670f52a3aa85f111b501b6a9cebb671c9c9", "filename": "src/test/compile-fail/E0517.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0517.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-type Foo = u8;\n+#[repr(C)] //~ ERROR: E0517\n+type Foo = u8; //~ NOTE: not a struct, enum or union\n \n-#[repr(packed)] //~ ERROR E0517\n-                //~| requires a struct\n-enum Foo2 {Bar, Baz}\n+#[repr(packed)] //~ ERROR: E0517\n+enum Foo2 {Bar, Baz} //~ NOTE: not a struct\n \n-#[repr(u8)] //~ ERROR E0517\n-            //~| requires an enum\n-struct Foo3 {bar: bool, baz: bool}\n+#[repr(u8)] //~ ERROR: E0517\n+struct Foo3 {bar: bool, baz: bool} //~ NOTE: not an enum\n \n-#[repr(C)] //~ ERROR E0517\n-           //~| requires a struct, enum or union\n-impl Foo3 {\n+#[repr(C)] //~ ERROR: E0517\n+impl Foo3 { //~ NOTE: not a struct, enum or union\n }\n \n fn main() {"}, {"sha": "63d40db0049da736155c9ee6d85d58b41234d6e5", "filename": "src/test/compile-fail/E0518.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fcompile-fail%2FE0518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0518.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[inline(always)] //~ ERROR E0518\n-                  //~| requires a function\n-struct Foo;\n+#[inline(always)] //~ ERROR: E0518\n+struct Foo;       //~ NOTE: not a function\n \n-#[inline(never)] //~ ERROR E0518\n-                 //~| requires a function\n-impl Foo {\n+#[inline(never)] //~ ERROR: E0518\n+impl Foo {       //~ NOTE: not a function\n }\n \n fn main() {"}, {"sha": "d7aba563edf87ab67cf5ab7b5c7f70d88d3096a7", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -26,10 +26,8 @@ pub fn body_not_exported_to_metadata() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n@@ -49,10 +47,8 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline]\n@@ -73,10 +69,8 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[inline]"}, {"sha": "3cd8308c30b4552a9e852c89a1f30ff79bdd5803", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -36,10 +36,8 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n@@ -61,10 +59,8 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n@@ -88,10 +84,8 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n@@ -110,24 +104,22 @@ pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n \n     if x {\n-        ret += 1;\n+        ret = 2;\n     }\n \n     ret\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n \n     if x {\n-        ret += 1;\n+        ret = 2;\n     } else {\n     }\n \n@@ -147,10 +139,8 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n@@ -174,10 +164,8 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n@@ -201,10 +189,8 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n@@ -223,24 +209,22 @@ pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;\n \n     if let Some(x) = x {\n-        ret += x;\n+        ret = x;\n     }\n \n     ret\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;\n \n     if let Some(x) = x {\n-        ret += x;\n+        ret = x;\n     } else {\n     }\n "}, {"sha": "5a81d3a9edf45fe39d8487061f11fbcdf97fe809", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -10,7 +10,7 @@\n \n \n // This test case tests the incremental compilation hash (ICH) implementation\n-// for closure expression.\n+// for indexing expression.\n \n // The general pattern followed here is: Change one thing between rev1 and rev2\n // and make sure that the hash has changed, then change nothing between rev2 and"}, {"sha": "cddd4ae286b02684a735bde997947c1d5880ec76", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 22, "deletions": 44, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -34,10 +34,8 @@ pub fn indexing(slice: &[u8]) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n@@ -52,10 +50,8 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n@@ -70,10 +66,8 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n@@ -88,10 +82,8 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n@@ -106,10 +98,8 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n@@ -124,10 +114,8 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n@@ -141,10 +129,8 @@ pub fn mod_by_zero(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n@@ -159,10 +145,8 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n@@ -177,10 +161,8 @@ pub fn shift_right(val: i32, shift: usize) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n@@ -197,10 +179,8 @@ pub fn bitwise(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise(val: i32) -> i32 {\n@@ -215,10 +195,8 @@ pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {"}, {"sha": "01fb9e9c1e1a2be478fc191af442908d4c280a6f", "filename": "src/test/incremental/hashes/panic_exprs_no_overflow_checks.rs", "status": "modified", "additions": 26, "deletions": 52, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs_no_overflow_checks.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -41,10 +41,8 @@ pub fn indexing(slice: &[u8]) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n@@ -60,10 +58,8 @@ pub fn arithmetic_overflow_plus_inherit(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n@@ -80,10 +76,8 @@ pub fn arithmetic_overflow_minus_inherit(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n@@ -100,10 +94,8 @@ pub fn arithmetic_overflow_mult_inherit(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n@@ -120,10 +112,8 @@ pub fn arithmetic_overflow_negation_inherit(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[rustc_inherit_overflow_checks]\n@@ -139,10 +129,8 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n@@ -156,10 +144,8 @@ pub fn mod_by_zero(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n@@ -177,10 +163,8 @@ pub fn bitwise(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn bitwise(val: i32) -> i32 {\n@@ -195,10 +179,8 @@ pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn logical(val1: bool, val2: bool, val3: bool) -> bool {\n@@ -212,10 +194,8 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n@@ -230,10 +210,8 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n@@ -248,10 +226,8 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n@@ -266,10 +242,8 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {"}, {"sha": "ecce824ca178b34ce742ca7172d4d75adc9f9efb", "filename": "src/test/ui/short-error-format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fui%2Fshort-error-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d8761ab3f2eda3536c0a8e81f2179655a6fb00/src%2Ftest%2Fui%2Fshort-error-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshort-error-format.rs?ref=58d8761ab3f2eda3536c0a8e81f2179655a6fb00", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --error-format=short\n+// compile-flags: --error-format=short -Zunstable-options\n \n fn foo(_: u32) {}\n "}]}