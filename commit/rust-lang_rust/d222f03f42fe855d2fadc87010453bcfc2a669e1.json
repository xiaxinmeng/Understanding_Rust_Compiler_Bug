{"sha": "d222f03f42fe855d2fadc87010453bcfc2a669e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMjJmMDNmNDJmZTg1NWQyZmFkYzg3MDEwNDUzYmNmYzJhNjY5ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-25T13:26:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-25T13:26:36Z"}, "message": "auto merge of #12525 : eddyb/rust/gate-default-type-param-usage, r=alexcrichton\n\nAlso reverted `#[deriving(Hash)]` to implement `Hash` only for `SipState`, until we decide what to do about default type params.", "tree": {"sha": "0e7dfbf0d0577a97d5c00822eb5c913693ea4f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7dfbf0d0577a97d5c00822eb5c913693ea4f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d222f03f42fe855d2fadc87010453bcfc2a669e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d222f03f42fe855d2fadc87010453bcfc2a669e1", "html_url": "https://github.com/rust-lang/rust/commit/d222f03f42fe855d2fadc87010453bcfc2a669e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d222f03f42fe855d2fadc87010453bcfc2a669e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cc309a7f1cc89c35388eda48041d9880b4737c", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc309a7f1cc89c35388eda48041d9880b4737c", "html_url": "https://github.com/rust-lang/rust/commit/27cc309a7f1cc89c35388eda48041d9880b4737c"}, {"sha": "3e531ed0edd44c5af714fdeaa0cddb9d5c8154a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e531ed0edd44c5af714fdeaa0cddb9d5c8154a2", "html_url": "https://github.com/rust-lang/rust/commit/3e531ed0edd44c5af714fdeaa0cddb9d5c8154a2"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "5f9910340c4860e8c4d301a5f65d04c00e9679c1", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -295,8 +295,8 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     let region_map = time(time_passes, \"region resolution\", (), |_|\n                           middle::region::resolve_crate(sess, krate));\n \n-    let ty_cx = ty::mk_ctxt(sess, def_map, named_region_map, ast_map, freevars,\n-                            region_map, lang_items);\n+    let ty_cx = ty::mk_ctxt(sess, def_map, named_region_map, ast_map,\n+                            freevars, region_map, lang_items);\n \n     // passes are timed inside typeck\n     let (method_map, vtable_map) = typeck::check_crate(ty_cx, trait_map, krate);\n@@ -975,6 +975,7 @@ pub fn build_session_(sopts: @session::Options,\n         lints: RefCell::new(HashMap::new()),\n         node_id: Cell::new(1),\n         crate_types: @RefCell::new(~[]),\n+        features: front::feature_gate::Features::new()\n     }\n }\n "}, {"sha": "9a33c54d50f2bdd908fa7f78ea35359226174982", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -12,6 +12,7 @@\n use back::target_strs;\n use back;\n use driver::driver::host_triple;\n+use front;\n use metadata::filesearch;\n use metadata;\n use middle::lint;\n@@ -186,6 +187,7 @@ pub struct Session_ {\n                            ~[(lint::Lint, codemap::Span, ~str)]>>,\n     node_id: Cell<ast::NodeId>,\n     crate_types: @RefCell<~[CrateType]>,\n+    features: front::feature_gate::Features\n }\n \n pub type Session = @Session_;"}, {"sha": "813bceafed546d51a34b4a59a0509482560a1be2", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -30,6 +30,8 @@ use syntax::parse::token;\n \n use driver::session::Session;\n \n+use std::cell::Cell;\n+\n /// This is a list of all known features since the beginning of time. This list\n /// can never shrink, it may only be expanded (in order to prevent old programs\n /// from failing to compile). The status of each feature may change, however.\n@@ -69,6 +71,19 @@ enum Status {\n     Accepted,\n }\n \n+/// A set of features to be used by later passes.\n+pub struct Features {\n+    default_type_params: Cell<bool>\n+}\n+\n+impl Features {\n+    pub fn new() -> Features {\n+        Features {\n+            default_type_params: Cell::new(false)\n+        }\n+    }\n+}\n+\n struct Context {\n     features: ~[&'static str],\n     sess: Session,\n@@ -315,4 +330,6 @@ pub fn check_crate(sess: Session, krate: &ast::Crate) {\n     visit::walk_crate(&mut cx, krate, ());\n \n     sess.abort_if_errors();\n+\n+    sess.features.default_type_params.set(cx.has_feature(\"default_type_params\"));\n }"}, {"sha": "242b9906c72f9117c652fcc494786a23e348482a", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -88,7 +88,6 @@ pub enum Lint {\n     AttributeUsage,\n     UnknownFeatures,\n     UnknownCrateType,\n-    DefaultTypeParamUsage,\n \n     ManagedHeapMemory,\n     OwnedHeapMemory,\n@@ -382,14 +381,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         lint: UnusedResult,\n         desc: \"unused result of an expression in a statement\",\n         default: allow,\n-    }),\n-\n-     (\"default_type_param_usage\",\n-     LintSpec {\n-         lint: DefaultTypeParamUsage,\n-         desc: \"prevents explicitly setting a type parameter with a default\",\n-         default: deny,\n-     }),\n+    })\n ];\n \n /*"}, {"sha": "7a6de3ef5ddce65daedb665471b2d78403901f0f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -1079,6 +1079,7 @@ pub fn mk_ctxt(s: session::Session,\n                region_maps: middle::region::RegionMaps,\n                lang_items: @middle::lang_items::LanguageItems)\n             -> ctxt {\n+\n     @ctxt_ {\n         named_region_map: named_region_map,\n         item_variance_map: RefCell::new(HashMap::new()),\n@@ -1126,7 +1127,7 @@ pub fn mk_ctxt(s: session::Session,\n         upvar_borrow_map: RefCell::new(HashMap::new()),\n         extern_const_statics: RefCell::new(HashMap::new()),\n         extern_const_variants: RefCell::new(HashMap::new()),\n-     }\n+    }\n }\n \n // Type constructors"}, {"sha": "e569f0756e68263a58aaef6b7694c0123e6b0a2f", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -51,7 +51,6 @@\n \n \n use middle::const_eval;\n-use middle::lint;\n use middle::subst::Subst;\n use middle::ty::{substs};\n use middle::ty::{ty_param_substs_and_ty};\n@@ -219,11 +218,12 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n                 expected, formal_ty_param_count, supplied_ty_param_count));\n     }\n \n-    if supplied_ty_param_count > required_ty_param_count {\n-        let id = path.segments.iter().flat_map(|s| s.types.iter())\n-                              .nth(required_ty_param_count).unwrap().id;\n-        this.tcx().sess.add_lint(lint::DefaultTypeParamUsage, id, path.span,\n-                                 ~\"provided type arguments with defaults\");\n+    if supplied_ty_param_count > required_ty_param_count\n+        && !this.tcx().sess.features.default_type_params.get() {\n+        this.tcx().sess.span_err(path.span, \"default type parameters are \\\n+                                             experimental and possibly buggy\");\n+        this.tcx().sess.span_note(path.span, \"add #[feature(default_type_params)] \\\n+                                              to the crate attributes to enable\");\n     }\n \n     let tps = path.segments.iter().flat_map(|s| s.types.iter())"}, {"sha": "5d89f2d2c68b25d0922cdd2d15e99adb37759ef5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -81,7 +81,6 @@ use middle::const_eval;\n use middle::lang_items::{ExchangeHeapLangItem, GcLangItem};\n use middle::lang_items::{ManagedHeapLangItem};\n use middle::lint::UnreachableCode;\n-use middle::lint;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n use middle::subst::Subst;\n@@ -3750,9 +3749,12 @@ pub fn instantiate_path(fcx: @FnCtxt,\n                   expected, user_ty_param_req, ty_substs_len));\n         (fcx.infcx().next_ty_vars(ty_param_count), regions)\n     } else {\n-        if ty_substs_len > user_ty_param_req {\n-            fcx.tcx().sess.add_lint(lint::DefaultTypeParamUsage, node_id, pth.span,\n-                                    ~\"provided type arguments with defaults\");\n+        if ty_substs_len > user_ty_param_req\n+            && !fcx.tcx().sess.features.default_type_params.get() {\n+            fcx.tcx().sess.span_err(pth.span, \"default type parameters are \\\n+                                               experimental and possibly buggy\");\n+            fcx.tcx().sess.span_note(pth.span, \"add #[feature(default_type_params)] \\\n+                                                to the crate attributes to enable\");\n         }\n \n         // Build up the list of type parameters, inserting the self parameter"}, {"sha": "e96eedea5cbe82d744df0eedf35486c1ec8c5c64", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -56,6 +56,8 @@\n \n // Turn on default type parameters.\n #[feature(default_type_params)];\n+// NOTE remove the following two attributes after the next snapshot.\n+#[allow(unrecognized_lint)];\n #[allow(default_type_param_usage)];\n \n // Don't link to std. We are std."}, {"sha": "acae4f9efa6160114a0dd663d2eb50fcebb9d621", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -13,37 +13,25 @@ use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n-use parse::token::InternedString;\n \n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: @MetaItem,\n                             item: @Item,\n                             push: |@Item|) {\n \n-    let allow_default_type_param_usage = cx.attribute(\n-        span,\n-        cx.meta_list(\n-            span,\n-            InternedString::new(\"allow\"),\n-            ~[cx.meta_word(span, InternedString::new(\"default_type_param_usage\"))]));\n-\n     let hash_trait_def = TraitDef {\n         span: span,\n-        attributes: ~[allow_default_type_param_usage],\n-        path: Path::new_(~[\"std\", \"hash\", \"Hash\"], None,\n-                         ~[~Literal(Path::new_local(\"__H\"))], true),\n+        attributes: ~[],\n+        path: Path::new(~[\"std\", \"hash\", \"Hash\"]),\n         additional_bounds: ~[],\n-        generics: LifetimeBounds {\n-            lifetimes: ~[],\n-            bounds: ~[(\"__H\", ~[Path::new(~[\"std\", \"io\", \"Writer\"])])],\n-        },\n+        generics: LifetimeBounds::empty(),\n         methods: ~[\n             MethodDef {\n                 name: \"hash\",\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n-                args: ~[Ptr(~Literal(Path::new_local(\"__H\")),\n+                args: ~[Ptr(~Literal(Path::new(~[\"std\", \"hash\", \"sip\", \"SipState\"])),\n                             Borrowed(None, MutMutable))],\n                 ret_ty: nil_ty(),\n                 inline: true,"}, {"sha": "9961a81a85a843c8555e74c51d039b7d4f68949d", "filename": "src/test/compile-fail/gated-default-type-param-usage.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -8,16 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+// aux-build:default_type_params_xc.rs\n \n #[deny(default_type_param_usage)];\n \n-pub struct Heap;\n-\n-pub struct Vec<T, A = Heap>;\n+extern crate default_type_params_xc;\n \n pub struct FooAlloc;\n \n-pub type VecFoo<T> = Vec<T, FooAlloc>; //~ ERROR provided type arguments with defaults\n+pub type VecFoo<T> = default_type_params_xc::FakeVec<T, FooAlloc>;\n+//~^ ERROR: default type parameters are experimental\n \n fn main() {}", "previous_filename": "src/test/compile-fail/lint-default-type-param-usage.rs"}, {"sha": "72b416018910c57ede5cf2bdc513b2fe411a16b6", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -13,8 +13,6 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(default_type_params)];\n \n-#[allow(default_type_param_usage)];\n-\n extern crate default_type_params_xc;\n \n struct Vec<T, A = default_type_params_xc::Heap>;"}, {"sha": "889d5c948eb1a0cc0f0575537a45536f17009012", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d222f03f42fe855d2fadc87010453bcfc2a669e1/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=d222f03f42fe855d2fadc87010453bcfc2a669e1", "patch": "@@ -11,8 +11,6 @@\n // ignore-fast #[feature] doesn't work with check-fast\n #[feature(default_type_params)];\n \n-#[allow(default_type_param_usage)];\n-\n struct Foo<A = (int, char)> {\n     a: A\n }"}]}