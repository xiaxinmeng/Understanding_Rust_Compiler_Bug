{"sha": "0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMmNkMzNkYjg0YTQ3ODczOTE5ODljNjllZDNjZTcwY2U4YzA3ZWM=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-03-04T13:03:26Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-05-03T14:56:20Z"}, "message": "Cleanup `std::os`", "tree": {"sha": "e15cd5bfea05ba74f138f4eac428a4b5bd4d8087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15cd5bfea05ba74f138f4eac428a4b5bd4d8087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "html_url": "https://github.com/rust-lang/rust/commit/0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c825bc431ee5b815847b9bab693c59c43986fc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c825bc431ee5b815847b9bab693c59c43986fc4b", "html_url": "https://github.com/rust-lang/rust/commit/c825bc431ee5b815847b9bab693c59c43986fc4b"}], "stats": {"total": 224, "additions": 113, "deletions": 111}, "files": [{"sha": "94438defc227077b5799267bf4de43327cc25eb0", "filename": "library/std/src/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fmod.rs?ref=0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "patch": "@@ -1,6 +1,7 @@\n //! Linux-specific definitions.\n \n #![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![doc(cfg(target_os = \"linux\"))]\n \n pub mod fs;\n pub mod raw;"}, {"sha": "5b68a7e126268d9c33563c2587c740b9da67aa5c", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "patch": "@@ -9,7 +9,6 @@\n               definitions\"\n )]\n #![allow(deprecated)]\n-#![allow(missing_debug_implementations)]\n \n use crate::os::raw::c_ulong;\n "}, {"sha": "7e333e2b778d521c090127bc9dea6ca055ea797a", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 89, "deletions": 74, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "patch": "@@ -3,78 +3,93 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, nonstandard_style, missing_debug_implementations)]\n \n-// When documenting libstd we want to show unix/windows/linux/wasi modules as these are the \"main\n-// modules\" that are used across platforms, so all modules are enabled when `cfg(doc)` is set.\n-// This should help show platform-specific functionality in a hopefully cross-platform way in the\n-// documentation.\n-// Note that we deliberately avoid `cfg_if!` here to work around a rust-analyzer bug that would make\n-// `std::os` submodules unusable: https://github.com/rust-analyzer/rust-analyzer/issues/6038\n-\n-#[cfg(doc)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::unix_ext as unix;\n-\n-#[cfg(doc)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::windows_ext as windows;\n-\n-#[cfg(doc)]\n-#[doc(cfg(target_os = \"linux\"))]\n-pub mod linux;\n-\n-#[cfg(doc)]\n-#[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n-pub use crate::sys::wasi_ext as wasi;\n-\n-// If we're not documenting libstd then we just expose the main modules as we otherwise would.\n-\n-#[cfg(not(doc))]\n-#[cfg(any(unix, target_os = \"hermit\"))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::ext as unix;\n-\n-#[cfg(not(doc))]\n-#[cfg(windows)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys::ext as windows;\n-\n-#[cfg(not(doc))]\n-#[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n-pub mod linux;\n-\n-#[cfg(not(doc))]\n-#[cfg(target_os = \"wasi\")]\n-pub mod wasi;\n-\n-#[cfg(target_os = \"android\")]\n-pub mod android;\n-#[cfg(target_os = \"dragonfly\")]\n-pub mod dragonfly;\n-#[cfg(target_os = \"emscripten\")]\n-pub mod emscripten;\n-#[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n-pub mod fortanix_sgx;\n-#[cfg(target_os = \"freebsd\")]\n-pub mod freebsd;\n-#[cfg(target_os = \"fuchsia\")]\n-pub mod fuchsia;\n-#[cfg(target_os = \"haiku\")]\n-pub mod haiku;\n-#[cfg(target_os = \"illumos\")]\n-pub mod illumos;\n-#[cfg(target_os = \"ios\")]\n-pub mod ios;\n-#[cfg(target_os = \"macos\")]\n-pub mod macos;\n-#[cfg(target_os = \"netbsd\")]\n-pub mod netbsd;\n-#[cfg(target_os = \"openbsd\")]\n-pub mod openbsd;\n-#[cfg(target_os = \"redox\")]\n-pub mod redox;\n-#[cfg(target_os = \"solaris\")]\n-pub mod solaris;\n-#[cfg(target_os = \"vxworks\")]\n-pub mod vxworks;\n-\n pub mod raw;\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(all(doc, not(any(target_os = \"hermit\",\n+                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))))]{\n+        // When documenting std we want to show the `unix`, `windows`, `linux` and `wasi`\n+        // modules as these are the \"main modules\" that are used across platforms,\n+        // so these modules are enabled when `cfg(doc)` is set.\n+        // This should help show platform-specific functionality in a hopefully cross-platform\n+        // way in the documentation.\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use crate::sys::unix_ext as unix;\n+\n+        pub mod linux;\n+\n+        #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n+        pub use crate::sys::wasi_ext as wasi;\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use crate::sys::windows_ext as windows;\n+    } else if #[cfg(doc)] {\n+        // On certain platforms right now the \"main modules\" modules that are\n+        // documented don't compile (missing things in `libc` which is empty),\n+        // so just omit them with an empty module.\n+\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod unix {}\n+\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod linux {}\n+\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod wasi {}\n+\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n+        pub mod windows {}\n+    } else {\n+        // If we're not documenting std then we only expose modules appropriate for the\n+        // current platform.\n+\n+        #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n+        pub mod fortanix_sgx;\n+\n+        #[cfg(any(unix, target_os = \"hermit\"))]\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use crate::sys::ext as unix;\n+        #[cfg(target_os = \"android\")]\n+        pub mod android;\n+        #[cfg(target_os = \"dragonfly\")]\n+        pub mod dragonfly;\n+        #[cfg(target_os = \"emscripten\")]\n+        pub mod emscripten;\n+        #[cfg(target_os = \"freebsd\")]\n+        pub mod freebsd;\n+        #[cfg(target_os = \"fuchsia\")]\n+        pub mod fuchsia;\n+        #[cfg(target_os = \"haiku\")]\n+        pub mod haiku;\n+        #[cfg(target_os = \"illumos\")]\n+        pub mod illumos;\n+        #[cfg(target_os = \"ios\")]\n+        pub mod ios;\n+        #[cfg(target_os = \"l4re\")]\n+        pub mod linux;\n+        #[cfg(target_os = \"linux\")]\n+        pub mod linux;\n+        #[cfg(target_os = \"macos\")]\n+        pub mod macos;\n+        #[cfg(target_os = \"netbsd\")]\n+        pub mod netbsd;\n+        #[cfg(target_os = \"openbsd\")]\n+        pub mod openbsd;\n+        #[cfg(target_os = \"redox\")]\n+        pub mod redox;\n+        #[cfg(target_os = \"solaris\")]\n+        pub mod solaris;\n+\n+        #[cfg(target_os = \"vxworks\")]\n+        pub mod vxworks;\n+\n+        #[cfg(target_os = \"wasi\")]\n+        pub mod wasi;\n+\n+        #[cfg(windows)]\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use crate::sys::ext as windows;\n+    }\n+}"}, {"sha": "9a6b99684c5231a1baabdf106405613a36c0878e", "filename": "library/std/src/os/redox/raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fredox%2Fraw.rs?ref=0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "patch": "@@ -9,7 +9,6 @@\n               definitions\"\n )]\n #![allow(deprecated)]\n-#![allow(missing_debug_implementations)]\n \n use crate::os::raw::{c_char, c_int, c_long, c_ulong, c_void};\n "}, {"sha": "33e68d12b0a3d087de538c5508c7f768b2d5558e", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e2cd33db84a4787391989c69ed3ce70ce8c07ec/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=0e2cd33db84a4787391989c69ed3ce70ce8c07ec", "patch": "@@ -49,49 +49,43 @@ cfg_if::cfg_if! {\n     }\n }\n \n-// Import essential modules from both platforms when documenting. These are\n-// then later used in the `std::os` module when documenting, for example,\n-// Windows when we're compiling for Linux.\n+// Import essential modules from platforms used in `std::os` when documenting.\n+//\n+// Note that on some platforms those modules don't compile\n+// (missing things in `libc` which is empty), so they are not included in `std::os` and can be\n+// omitted here as well.\n \n #[cfg(doc)]\n+#[cfg(not(any(\n+    target_os = \"hermit\",\n+    all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+)))]\n cfg_if::cfg_if! {\n     if #[cfg(unix)] {\n-        // On unix we'll document what's already available\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as unix_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the module below doesn't compile\n-        // (missing things in `libc` which is empty) so just omit everything\n-        // with an empty module\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod unix_ext {}\n     } else {\n         #[path = \"unix/ext/mod.rs\"]\n         pub mod unix_ext;\n     }\n }\n \n #[cfg(doc)]\n+#[cfg(not(any(\n+    target_os = \"hermit\",\n+    all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+)))]\n cfg_if::cfg_if! {\n     if #[cfg(windows)] {\n-        // On windows we'll just be documenting what's already available\n         #[allow(missing_docs)]\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as windows_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the shim below doesn't compile, so\n-        // just omit it\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod windows_ext {}\n     } else {\n-        // On all other platforms (aka linux/osx/etc) then pull in a \"minimal\"\n+        // On non-Windows platforms (aka linux/osx/etc) pull in a \"minimal\"\n         // amount of windows goop which ends up compiling\n+\n         #[macro_use]\n         #[path = \"windows/compat.rs\"]\n         mod compat;\n@@ -105,22 +99,16 @@ cfg_if::cfg_if! {\n }\n \n #[cfg(doc)]\n+#[cfg(not(any(\n+    target_os = \"hermit\",\n+    all(target_arch = \"wasm32\", not(target_os = \"wasi\")),\n+    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+)))]\n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"wasi\")] {\n-        // On WASI we'll document what's already available\n         #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n         pub use self::ext as wasi_ext;\n-    } else if #[cfg(any(target_os = \"hermit\",\n-                        target_arch = \"wasm32\",\n-                        all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n-        // On non-WASI wasm right now the module below doesn't compile\n-        // (missing things in `libc` which is empty) so just omit everything\n-        // with an empty module\n-        #[unstable(issue = \"none\", feature = \"std_internals\")]\n-        #[allow(missing_docs)]\n-        pub mod wasi_ext {}\n-    } else {\n-        // On other platforms like Windows document the bare bones of WASI\n+    }  else {\n         #[path = \"wasi/ext/mod.rs\"]\n         #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n         pub mod wasi_ext;"}]}