{"sha": "57d6ada91d7c2d9af1115ae515b000fda93b3c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZDZhZGE5MWQ3YzJkOWFmMTExNWFlNTE1YjAwMGZkYTkzYjNjNGU=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-09-09T06:47:42Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2018-09-09T06:47:42Z"}, "message": "Rename sp_lo to sp_open", "tree": {"sha": "95443bd61183f3edfc2693cbe17094bae0b7f138", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95443bd61183f3edfc2693cbe17094bae0b7f138"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57d6ada91d7c2d9af1115ae515b000fda93b3c4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJblMIOAAoJEPm6FDuV/22CtMgP/1BB1P9ejuAAuTkhv4Hh6XO9\nxWFWev+OrAeCl4MZf0trFJzm1Of3g/DWTUKPJrd8e+sDrHqt/5esfI2sLL7zWETn\n2R2ara7+rQbBJ6doCuQMDdbBMSSY/cHH38BKmi/b6Js7prnwRA9wxMlfS/NXuiDj\nBOZC94m34MfE86Lft5e5HBjFcVhQD9eTcP77G7eawuHGqdITKypWX/qjizWXdooF\n8Yf7yRXUz/aH+R74b5JIjPv7xkDyg7XOhU4QI12fNvSxUrdDFMbU3Hg9VglzPB0R\nyH7+Um5CkXPMKaAR+7Rbtz43OGcLaOTWQaIA2NHdI6vOlEQShT/eLZWOV2FnVJwf\noz9ubZF6YI20rwFZmmn5C+JLPEdaIuS+aN3Wxvyet4KTNkNgGS+87XgiUwT++2g7\nthtmnqxD//nA+bHqZUiQOVXbBMuWLlS1Xodrwl8iWRfRo3u95uC+QGV2DMiXYJT9\nL6MxIriW/igNpl6QYuYR9LdT31IUAVxAP2KRzfRdLsOuwNL5pL8Dm8fdojkbBPqh\nZoRzGdKA6nWSQbcTN9TKMz0Gsl969CWEqp2lLRBbUOlNfFHOwydh09BCMy+Wf+NJ\nuOC0R0RzQS7XSngxCpW9wLKC4Z76D32AGzKrpm+8HVljtDRpCALudh+xsnBpl9XA\nc2U5smoNGtaOwUqAUEMr\n=pu0J\n-----END PGP SIGNATURE-----", "payload": "tree 95443bd61183f3edfc2693cbe17094bae0b7f138\nparent a1dd39e724c2a37f08f534e90ced134d38a49417\nauthor David Tolnay <dtolnay@gmail.com> 1536475662 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1536475662 -0700\n\nRename sp_lo to sp_open\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57d6ada91d7c2d9af1115ae515b000fda93b3c4e", "html_url": "https://github.com/rust-lang/rust/commit/57d6ada91d7c2d9af1115ae515b000fda93b3c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57d6ada91d7c2d9af1115ae515b000fda93b3c4e/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1dd39e724c2a37f08f534e90ced134d38a49417", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1dd39e724c2a37f08f534e90ced134d38a49417", "html_url": "https://github.com/rust-lang/rust/commit/a1dd39e724c2a37f08f534e90ced134d38a49417"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "941fd6f1000a326d07b342911f7da5af098a68e2", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57d6ada91d7c2d9af1115ae515b000fda93b3c4e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57d6ada91d7c2d9af1115ae515b000fda93b3c4e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=57d6ada91d7c2d9af1115ae515b000fda93b3c4e", "patch": "@@ -151,10 +151,10 @@ struct MatcherPos<'a> {\n     top_elts: TokenTreeOrTokenTreeSlice<'a>,\n     /// The position of the \"dot\" in this matcher\n     idx: usize,\n-    /// The beginning position in the source that the beginning of this matcher corresponds to. In\n-    /// other words, the token in the source at `sp_lo` is matched against the first token of the\n-    /// matcher.\n-    sp_lo: Span,\n+    /// The first span of source source that the beginning of this matcher corresponds to. In other\n+    /// words, the token in the source whose span is `sp_open` is matched against the first token of\n+    /// the matcher.\n+    sp_open: Span,\n \n     /// For each named metavar in the matcher, we keep track of token trees matched against the\n     /// metavar by the black box parser. In particular, there may be more than one match per\n@@ -284,17 +284,17 @@ fn create_matches(len: usize) -> Vec<Rc<Vec<NamedMatch>>> {\n }\n \n /// Generate the top-level matcher position in which the \"dot\" is before the first token of the\n-/// matcher `ms` and we are going to start matching at position `lo` in the source.\n-fn initial_matcher_pos(ms: &[TokenTree], lo: Span) -> MatcherPos {\n+/// matcher `ms` and we are going to start matching at the span `open` in the source.\n+fn initial_matcher_pos(ms: &[TokenTree], open: Span) -> MatcherPos {\n     let match_idx_hi = count_names(ms);\n     let matches = create_matches(match_idx_hi);\n     MatcherPos {\n         // Start with the top level matcher given to us\n         top_elts: TtSeq(ms), // \"elts\" is an abbr. for \"elements\"\n         // The \"dot\" is before the first token of the matcher\n         idx: 0,\n-        // We start matching with byte `lo` in the source code\n-        sp_lo: lo,\n+        // We start matching at the span `open` in the source code\n+        sp_open: open,\n \n         // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.\n         // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since\n@@ -488,7 +488,7 @@ fn inner_parse_loop<'a>(\n                     // Add matches from this repetition to the `matches` of `up`\n                     for idx in item.match_lo..item.match_hi {\n                         let sub = item.matches[idx].clone();\n-                        let span = DelimSpan::from_pair(item.sp_lo, span);\n+                        let span = DelimSpan::from_pair(item.sp_open, span);\n                         new_pos.push_match(idx, MatchedSeq(sub, span));\n                     }\n \n@@ -556,7 +556,7 @@ fn inner_parse_loop<'a>(\n                         match_cur: item.match_cur,\n                         match_hi: item.match_cur + seq.num_captures,\n                         up: Some(item),\n-                        sp_lo: sp.open,\n+                        sp_open: sp.open,\n                         top_elts: Tt(TokenTree::Sequence(sp, seq)),\n                     })));\n                 }"}]}