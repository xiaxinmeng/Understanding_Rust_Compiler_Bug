{"sha": "7568632513c4f9e4324e0d7cf97df791c0df4333", "node_id": "C_kwDOAAsO6NoAKDc1Njg2MzI1MTNjNGY5ZTQzMjRlMGQ3Y2Y5N2RmNzkxYzBkZjQzMzM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T13:54:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:46Z"}, "message": "Filter candidates when goal and impl polarity doesn't match", "tree": {"sha": "4c6c7156535df1ac1832a6e7bc533d724c2f81c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6c7156535df1ac1832a6e7bc533d724c2f81c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7568632513c4f9e4324e0d7cf97df791c0df4333", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXYACgkQgTGiTgx5\n768e3BAAtI+QVxRevSOyc7xQWREoPm3+qDJnwE1nYtkRgXs6kwGASXl1kw3HS9A/\n08f1/7e6DE09LN8139Su56foE4+7FDdh21r4UUgWKjQ0cOIS+MulJ1zlwuOGEeGO\nqzYx5jbS5l3xdW5kWozbyH4ltpEZyr6Nta9CR3iN9PiBd74nP6j8aBFA4jgWVdJW\nVSTHa/BNORWGUWN973BbtCmcDL9/N9y/6VUFaC/NdFefAcb0bI4X6hwKQH/E34aJ\nORvesa7P4bwJwFuGK/OLSal/GmzF7HCN2ovc+N1EiFUVsSgVRe9s0kS2xbton/yN\neulyDH4XbjikZBN5II2HrD4Ss+oOud/pnE36HV8YqmuVnIf0rJbLK/PCPdtYD6zV\nFPa4UbaZXPpY7w4N/bcG2FbY2TO5XSttEYj/TCMkidurFjcYj0T0id+eqgAWXbYF\nE3wD9zqrU3qOF6yb/0baPM5KSnvZn5ZKyhCm6oo3Yy2NSI/ngndAYFumSAPQYXNP\nxF48DeqaTTOAVUFaLQvCIgUgO/t3VgqjDzUJNbIj9rDRL7BNXKknb+h+hEaAZ70t\nFVR1dOh3gRxldqssgIT/69djFHyYTW1c02o1u6aVEIHt8bWfA0pkeKfLr0IDzMeM\nbReu8ZSg3vdpf3kmtPQDNqsvFZKjZOFsZPjRn2pew5k2dIlWUQ0=\n=5j37\n-----END PGP SIGNATURE-----", "payload": "tree 4c6c7156535df1ac1832a6e7bc533d724c2f81c5\nparent 6ae1d68e1673f1897739955e17e71d05980f273f\nauthor Santiago Pastorino <spastorino@gmail.com> 1634738088 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742646 -0300\n\nFilter candidates when goal and impl polarity doesn't match\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7568632513c4f9e4324e0d7cf97df791c0df4333", "html_url": "https://github.com/rust-lang/rust/commit/7568632513c4f9e4324e0d7cf97df791c0df4333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7568632513c4f9e4324e0d7cf97df791c0df4333/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ae1d68e1673f1897739955e17e71d05980f273f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae1d68e1673f1897739955e17e71d05980f273f", "html_url": "https://github.com/rust-lang/rust/commit/6ae1d68e1673f1897739955e17e71d05980f273f"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "0c1c2340c71d9c95882fc75ab79a46bbf0b54ca6", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7568632513c4f9e4324e0d7cf97df791c0df4333/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568632513c4f9e4324e0d7cf97df791c0df4333/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7568632513c4f9e4324e0d7cf97df791c0df4333", "patch": "@@ -134,6 +134,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // candidate which assumes $0 == int, one that assumes `$0 ==\n         // usize`, etc. This spells an ambiguity.\n \n+        self.filter_impls(&mut candidates, stack);\n+\n         // If there is more than one candidate, first winnow them down\n         // by considering extra conditions (nested obligations and so\n         // forth). We don't winnow if there is exactly one\n@@ -149,7 +151,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Instead, we select the right impl now but report \"`Bar` does\n         // not implement `Clone`\".\n         if candidates.len() == 1 {\n-            return self.filter_impls(candidates.pop().unwrap(), stack.obligation);\n+            return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);\n         }\n \n         // Winnow, but record the exact outcome of evaluation, which\n@@ -223,7 +225,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // Just one candidate left.\n-        self.filter_impls(candidates.pop().unwrap().candidate, stack.obligation)\n+        self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)\n     }\n \n     #[instrument(skip(self, stack), level = \"debug\")]"}, {"sha": "2748dfcca6c85a4c74d44a83c9b77b28575e5d93", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7568632513c4f9e4324e0d7cf97df791c0df4333/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568632513c4f9e4324e0d7cf97df791c0df4333/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7568632513c4f9e4324e0d7cf97df791c0df4333", "patch": "@@ -1117,8 +1117,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         (result, dep_node)\n     }\n \n+    /// filter_impls filters candidates that have a positive impl for a negative goal and a\n+    /// negative impl for a positive goal\n     #[instrument(level = \"debug\", skip(self))]\n     fn filter_impls(\n+        &mut self,\n+        candidates: &mut Vec<SelectionCandidate<'tcx>>,\n+        stack: &TraitObligationStack<'o, 'tcx>,\n+    ) {\n+        let tcx = self.tcx();\n+        candidates.retain(|candidate| {\n+            if let ImplCandidate(def_id) = candidate {\n+                ty::ImplPolarity::Reservation == tcx.impl_polarity(*def_id)\n+                    || !self.allow_negative_impls\n+                        && stack.obligation.predicate.skip_binder().polarity\n+                            == tcx.impl_polarity(*def_id)\n+            } else {\n+                true\n+            }\n+        });\n+    }\n+\n+    /// filter_reservation_impls filter reservation impl for any goal as ambiguous\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn filter_reservation_impls(\n         &mut self,\n         candidate: SelectionCandidate<'tcx>,\n         obligation: &TraitObligation<'tcx>,\n@@ -1148,7 +1170,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n         }\n-        // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n+        // Treat reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n             if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {\n                 if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {\n@@ -1170,12 +1192,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n                 return Ok(None);\n             }\n-\n-            if !self.allow_negative_impls {\n-                if obligation.predicate.skip_binder().polarity != tcx.impl_polarity(def_id) {\n-                    return Err(Unimplemented);\n-                }\n-            }\n         }\n         Ok(Some(candidate))\n     }"}]}