{"sha": "65147b673bcf8cc740d40209321f0716864a0ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MTQ3YjY3M2JjZjhjYzc0MGQ0MDIwOTMyMWYwNzE2ODY0YTBhYjM=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2017-01-19T23:09:23Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2017-01-19T23:09:23Z"}, "message": "Update nomicon to describe `#[may_dangle]`", "tree": {"sha": "898259f66c8f52cac35ae3c54bfb6e1eac4ee11c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898259f66c8f52cac35ae3c54bfb6e1eac4ee11c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65147b673bcf8cc740d40209321f0716864a0ab3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdBQJYgUc3FhxhcGFzZWx0aW5lckBnbWFpbC5jb20ACgkQ2lzcFfm+\n2yvTCw/+JeB8WmXLehXeBocnJV47sX153NUljFKme8/J7gzVmN/n8s13B2JKHUAk\nBcDSjqhg+Y9nlHocR/0rjmeRpgOMIJbUboWapJAx+yWna3xdmbrLNP2Y2m2q9WX4\nUfMnQnG8sTKWj2twcopn9QhKSupme+2wHuyXt8lvHrwLZnthGUbSBdy8yZ9dupIL\ndQBQ5ighSCtZZhBfk/s/vrdiLdpc4RJyPdWJs+5BRiifJ1YMvmW0UDDLZlwErqW7\nThsR6WwM1yuuqOajUVa73JfcmXQdS0/e0KuDaiz3ThbOdXVpdLpXxC06o+D2ooO7\n14E0gQk8nZvKJxprU1P0NUfXccdDodfPhCovMq5qQl1KUIh5BQbQqbbMtG3bQJaa\n3d5fgJ4+bfWnmNYK7yTEahjHwqvzB+ZBF/comDgGIlgnEs5+lSV9CZMmfuze1Zkj\nsfFh+7QYcFJqeWddrU1gBq1luRNqOnyFoDZqGrCeJ7ej4qtGaJJ8haBRvWe2ZnAY\nkBDmJaQDN0m5ZrToozvCUQWUJMnuiq4YU/bTf74D9XieLPENAMWNLya26Q5yQ7Bv\ng6gFEioZDpf70UaXODwpoNT1s/ZLZUdB6+34XPl3OOUvZWZfNNACjubjaSr27FRb\nokNlOfMUmThZbcItPQs6vn+RWE1A1CirHVa7gArAB75imLD+QDo=\n=0Zkp\n-----END PGP SIGNATURE-----", "payload": "tree 898259f66c8f52cac35ae3c54bfb6e1eac4ee11c\nparent 8e29b4d3876fc141a0c451c65045bda2c1f39534\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1484867363 -0500\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1484867363 -0500\n\nUpdate nomicon to describe `#[may_dangle]`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65147b673bcf8cc740d40209321f0716864a0ab3", "html_url": "https://github.com/rust-lang/rust/commit/65147b673bcf8cc740d40209321f0716864a0ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65147b673bcf8cc740d40209321f0716864a0ab3/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e29b4d3876fc141a0c451c65045bda2c1f39534", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e29b4d3876fc141a0c451c65045bda2c1f39534", "html_url": "https://github.com/rust-lang/rust/commit/8e29b4d3876fc141a0c451c65045bda2c1f39534"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "6114006cbb341c068fd9936244616cb71fadfffd", "filename": "src/doc/nomicon/dropck.md", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/65147b673bcf8cc740d40209321f0716864a0ab3/src%2Fdoc%2Fnomicon%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/65147b673bcf8cc740d40209321f0716864a0ab3/src%2Fdoc%2Fnomicon%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fdropck.md?ref=65147b673bcf8cc740d40209321f0716864a0ab3", "patch": "@@ -199,24 +199,42 @@ assert (unsafely) that a generic type's destructor is *guaranteed* to\n not access any expired data, even if its type gives it the capability\n to do so.\n \n-That attribute is called `unsafe_destructor_blind_to_params`.\n+That attribute is called `may_dangle` and was introduced in [RFC 1327]\n+(https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md).\n To deploy it on the Inspector example from above, we would write:\n \n ```rust,ignore\n struct Inspector<'a>(&'a u8, &'static str);\n \n-impl<'a> Drop for Inspector<'a> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] 'a> Drop for Inspector<'a> {\n     fn drop(&mut self) {\n         println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n     }\n }\n ```\n \n-This attribute has the word `unsafe` in it because the compiler is not\n-checking the implicit assertion that no potentially expired data\n+Use of this attribute requires the `Drop` impl to be marked `unsafe` because the\n+compiler is not checking the implicit assertion that no potentially expired data\n (e.g. `self.0` above) is accessed.\n \n+The attribute can be applied to any number of lifetime and type parameters. In\n+the following example, we assert that we access no data behind a reference of\n+lifetime `'b` and that the only uses of `T` will be moves or drops, but omit\n+the attribute from `'a` and `U`, because we do access data with that lifetime\n+and that type:\n+\n+```rust,ignore\n+use std::fmt::Display;\n+\n+struct Inspector<'a, 'b, T, U: Display>(&'a u8, &'b u8, T, U);\n+\n+unsafe impl<'a, #[may_dangle] 'b, #[may_dangle] T, U: Display> Drop for Inspector<'a, 'b, T, U> {\n+    fn drop(&mut self) {\n+        println!(\"Inspector({}, _, _, {})\", self.0, self.3);\n+    }\n+}\n+```\n+\n It is sometimes obvious that no such access can occur, like the case above.\n However, when dealing with a generic type parameter, such access can\n occur indirectly. Examples of such indirect access are:\n@@ -263,7 +281,7 @@ some other method invoked by the destructor, rather than being written\n directly within it.\n \n In all of the above cases where the `&'a u8` is accessed in the\n-destructor, adding the `#[unsafe_destructor_blind_to_params]`\n+destructor, adding the `#[may_dangle]`\n attribute makes the type vulnerable to misuse that the borrower\n checker will not catch, inviting havoc. It is better to avoid adding\n the attribute."}]}