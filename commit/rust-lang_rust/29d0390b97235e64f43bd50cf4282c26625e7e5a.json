{"sha": "29d0390b97235e64f43bd50cf4282c26625e7e5a", "node_id": "C_kwDOAAsO6NoAKDI5ZDAzOTBiOTcyMzVlNjRmNDNiZDUwY2Y0MjgyYzI2NjI1ZTdlNWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-07T11:43:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-15T14:40:39Z"}, "message": "remove unnecessary `select_obligations_where_possible`\n\nthis was previously used for opaque types but became unnecessary\nafter #89024", "tree": {"sha": "b51f7476a48d52cb8277de07e04a05eedd09042b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51f7476a48d52cb8277de07e04a05eedd09042b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d0390b97235e64f43bd50cf4282c26625e7e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d0390b97235e64f43bd50cf4282c26625e7e5a", "html_url": "https://github.com/rust-lang/rust/commit/29d0390b97235e64f43bd50cf4282c26625e7e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d0390b97235e64f43bd50cf4282c26625e7e5a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b730a3610850336443ff5b9ca4e92430f8b0cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b730a3610850336443ff5b9ca4e92430f8b0cee", "html_url": "https://github.com/rust-lang/rust/commit/2b730a3610850336443ff5b9ca4e92430f8b0cee"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "a05cf23213782e47097bb21694e0f8cecbf4fbf1", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29d0390b97235e64f43bd50cf4282c26625e7e5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d0390b97235e64f43bd50cf4282c26625e7e5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=29d0390b97235e64f43bd50cf4282c26625e7e5a", "patch": "@@ -25,8 +25,8 @@ use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, WellFormedLoc};\n use rustc_trait_selection::traits::query::NoSolution;\n+use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, WellFormedLoc};\n \n use std::cell::LazyCell;\n use std::convert::TryInto;\n@@ -1090,7 +1090,7 @@ fn check_type_defn<'tcx, F>(\n             }\n         }\n \n-        check_where_clauses(fcx, item.span, item.def_id, None);\n+        check_where_clauses(fcx, item.span, item.def_id);\n \n         // No implied bounds in a struct definition.\n         FxHashSet::default()\n@@ -1118,7 +1118,7 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n \n     // FIXME: this shouldn't use an `FnCtxt` at all.\n     for_item(tcx, item).with_fcx(|fcx| {\n-        check_where_clauses(fcx, item.span, item.def_id, None);\n+        check_where_clauses(fcx, item.span, item.def_id);\n \n         FxHashSet::default()\n     });\n@@ -1260,7 +1260,7 @@ fn check_impl<'tcx>(\n             }\n         }\n \n-        check_where_clauses(fcx, item.span, item.def_id, None);\n+        check_where_clauses(fcx, item.span, item.def_id);\n \n         impl_implied_bounds(tcx, fcx.param_env, item.def_id, item.span)\n     });\n@@ -1272,7 +1272,6 @@ fn check_where_clauses<'tcx, 'fcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     def_id: LocalDefId,\n-    return_ty: Option<(Ty<'tcx>, Span)>,\n ) {\n     let tcx = fcx.tcx;\n \n@@ -1443,12 +1442,6 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n     let predicates = predicates.instantiate_identity(tcx);\n \n-    if let Some((return_ty, _)) = return_ty {\n-        if return_ty.has_infer_types_or_consts() {\n-            fcx.select_obligations_where_possible(false, |_| {});\n-        }\n-    }\n-\n     let predicates = fcx.normalize_associated_types_in(span, predicates);\n \n     debug!(?predicates.predicates);\n@@ -1529,7 +1522,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n \n     debug!(?implied_bounds);\n \n-    check_where_clauses(fcx, span, def_id, Some((sig.output(), hir_decl.output.span())));\n+    check_where_clauses(fcx, span, def_id);\n }\n \n const HELP_FOR_SELF_TYPE: &str = \"consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, \\"}]}