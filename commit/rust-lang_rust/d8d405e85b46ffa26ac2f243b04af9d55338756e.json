{"sha": "d8d405e85b46ffa26ac2f243b04af9d55338756e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDQwNWU4NWI0NmZmYTI2YWMyZjI0M2IwNGFmOWQ1NTMzODc1NmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-09T13:16:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-09T13:16:45Z"}, "message": "Rustup to rustc 1.37.0-nightly (991c719a1 2019-06-08)", "tree": {"sha": "8ca2369de7a416f636824d53081f0873e47bc970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca2369de7a416f636824d53081f0873e47bc970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d405e85b46ffa26ac2f243b04af9d55338756e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d405e85b46ffa26ac2f243b04af9d55338756e", "html_url": "https://github.com/rust-lang/rust/commit/d8d405e85b46ffa26ac2f243b04af9d55338756e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d405e85b46ffa26ac2f243b04af9d55338756e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5bb3302b63872048a296f90861694754487a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5bb3302b63872048a296f90861694754487a5a", "html_url": "https://github.com/rust-lang/rust/commit/4b5bb3302b63872048a296f90861694754487a5a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "191f483391905012e4a114d3b46f76ad1669bd00", "filename": "src/constant.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8d405e85b46ffa26ac2f243b04af9d55338756e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d405e85b46ffa26ac2f243b04af9d55338756e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d8d405e85b46ffa26ac2f243b04af9d55338756e", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::mir::interpret::{\n-    read_target_uint, AllocId, GlobalAlloc, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n+    read_target_uint, AllocId, GlobalAlloc, Allocation, ConstValue, InterpResult, GlobalId, Scalar,\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n@@ -140,7 +140,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     const_: Const<'tcx>,\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n-    let result = || -> EvalResult<'tcx, &'tcx Allocation> {\n+    let result = || -> InterpResult<'tcx, &'tcx Allocation> {\n         let mut ecx = InterpretCx::new(\n             fx.tcx.at(DUMMY_SP),\n             ty::ParamEnv::reveal_all(),\n@@ -349,7 +349,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         false\n     }\n \n-    fn before_terminator(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n+    fn before_terminator(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n@@ -359,7 +359,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         _: &[OpTy<'tcx>],\n         _: Option<PlaceTy<'tcx>>,\n         _: Option<BasicBlock>,\n-    ) -> EvalResult<'tcx, Option<&'mir Body<'tcx>>> {\n+    ) -> InterpResult<'tcx, Option<&'mir Body<'tcx>>> {\n         panic!();\n     }\n \n@@ -368,14 +368,14 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: PlaceTy<'tcx>,\n-    ) -> EvalResult<'tcx> {\n+    ) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n     fn find_foreign_static(\n         _: DefId,\n         _: ::rustc::ty::query::TyCtxtAt<'a, 'tcx, 'tcx>,\n-    ) -> EvalResult<'tcx, Cow<'tcx, Allocation>> {\n+    ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         panic!();\n     }\n \n@@ -384,11 +384,11 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         _: mir::BinOp,\n         _: ImmTy<'tcx>,\n         _: ImmTy<'tcx>,\n-    ) -> EvalResult<'tcx, (Scalar, bool)> {\n+    ) -> InterpResult<'tcx, (Scalar, bool)> {\n         panic!();\n     }\n \n-    fn box_alloc(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> EvalResult<'tcx> {\n+    fn box_alloc(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n@@ -405,11 +405,11 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         ()\n     }\n \n-    fn stack_push(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> EvalResult<'tcx> {\n+    fn stack_push(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: ()) -> EvalResult<'tcx> {\n+    fn stack_pop(_: &mut InterpretCx<'a, 'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n         Ok(())\n     }\n }"}]}