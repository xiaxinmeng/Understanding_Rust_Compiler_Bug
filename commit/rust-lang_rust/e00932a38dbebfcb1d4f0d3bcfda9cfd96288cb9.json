{"sha": "e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMDkzMmEzOGRiZWJmY2IxZDRmMGQzYmNmZGE5Y2ZkOTYyODhjYjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-19T08:03:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-19T08:03:29Z"}, "message": "Rollup merge of #57634 - oli-obk:remove_unused_argument, r=davidtwco\n\nRemove an unused function argument\n\nThe only use was a debug printing, which might help someone with debugging dataflow problems, but seems otherwise useless", "tree": {"sha": "4d2df3c698aa1a0a1ff1a5d13a62970708f96a4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2df3c698aa1a0a1ff1a5d13a62970708f96a4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQtnSCRBK7hj4Ov3rIwAAdHIIAAXfEJBuzrRlJY+qcHOXEA6f\ngEWmyN6qQYg3WzuaKz/3Mv1zt9sa659BzZzOXkwaCx4JcOOk++r+4bZ673Q9z9Pm\n6aMI6INhwNL8JYAIh2uWz7WWT/4dIFiBMvGqoXMytVukHMr4DI1yNWBdBgPSNKI+\nLf4f9Y/LiHQ9D6Q56cHO+o/X52Vk49dxPWL2jD9mrBxgbkmXviGYNH0oDTxxBESr\nFtepbkKsmc+GtB8/gNfnTi0+l/vbN0pn+krq2EMxjnZbDVHG1sAg0ZhVrj5PVkLO\n4o0rsNqJbeWIT4tT+y7/JJgdyr/JEuhg6Uhxdu+W//NE46ku2UYd3Xv/Es99Lr0=\n=NtoK\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d2df3c698aa1a0a1ff1a5d13a62970708f96a4a\nparent fd779d3f76240c61104909f237c031ebba9d11df\nparent 096ca873330d61de91d81618ce3a1e9905581ff1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547885009 +0100\ncommitter GitHub <noreply@github.com> 1547885009 +0100\n\nRollup merge of #57634 - oli-obk:remove_unused_argument, r=davidtwco\n\nRemove an unused function argument\n\nThe only use was a debug printing, which might help someone with debugging dataflow problems, but seems otherwise useless\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "html_url": "https://github.com/rust-lang/rust/commit/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd779d3f76240c61104909f237c031ebba9d11df", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd779d3f76240c61104909f237c031ebba9d11df", "html_url": "https://github.com/rust-lang/rust/commit/fd779d3f76240c61104909f237c031ebba9d11df"}, {"sha": "096ca873330d61de91d81618ce3a1e9905581ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/096ca873330d61de91d81618ce3a1e9905581ff1", "html_url": "https://github.com/rust-lang/rust/commit/096ca873330d61de91d81618ce3a1e9905581ff1"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "041291e80eee989d0aa804cdf94a5048187057b6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "patch": "@@ -35,11 +35,9 @@ use syntax::ast::{NodeId, CRATE_NODE_ID, Ident, Name, Attribute};\n use syntax_pos::Span;\n use hir::*;\n use hir::def::Def;\n-use hir::map::{self, Map};\n+use hir::map::Map;\n use super::itemlikevisit::DeepVisitor;\n \n-use std::cmp;\n-\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n@@ -1133,57 +1131,3 @@ pub fn walk_defaultness<'v, V: Visitor<'v>>(_: &mut V, _: &'v Defaultness) {\n     // the right thing to do, should content be added in the future,\n     // would be to walk it.\n }\n-\n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct IdRange {\n-    pub min: NodeId,\n-    pub max: NodeId,\n-}\n-\n-impl IdRange {\n-    pub fn max() -> IdRange {\n-        IdRange {\n-            min: NodeId::MAX,\n-            max: NodeId::from_u32(0),\n-        }\n-    }\n-\n-    pub fn empty(&self) -> bool {\n-        self.min >= self.max\n-    }\n-\n-    pub fn contains(&self, id: NodeId) -> bool {\n-        id >= self.min && id < self.max\n-    }\n-\n-    pub fn add(&mut self, id: NodeId) {\n-        self.min = cmp::min(self.min, id);\n-        self.max = cmp::max(self.max, NodeId::from_u32(id.as_u32() + 1));\n-    }\n-}\n-\n-\n-pub struct IdRangeComputingVisitor<'a, 'hir: 'a> {\n-    result: IdRange,\n-    map: &'a map::Map<'hir>,\n-}\n-\n-impl<'a, 'hir> IdRangeComputingVisitor<'a, 'hir> {\n-    pub fn new(map: &'a map::Map<'hir>) -> IdRangeComputingVisitor<'a, 'hir> {\n-        IdRangeComputingVisitor { result: IdRange::max(), map: map }\n-    }\n-\n-    pub fn result(&self) -> IdRange {\n-        self.result\n-    }\n-}\n-\n-impl<'a, 'hir> Visitor<'hir> for IdRangeComputingVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n-        NestedVisitorMap::OnlyBodies(&self.map)\n-    }\n-\n-    fn visit_id(&mut self, id: NodeId) {\n-        self.result.add(id);\n-    }\n-}"}, {"sha": "72963cb7e7fb4e76a99d34dd59ce70f4f5b0d4f6", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "patch": "@@ -39,7 +39,6 @@ use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor};\n \n use dataflow::{DataFlowContext, BitwiseOperator, DataFlowOperator, KillFrom};\n \n@@ -157,12 +156,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n     where F: FnOnce(&mut BorrowckCtxt<'a, 'tcx>) -> &'c cfg::CFG\n {\n     // Check the body of fn items.\n-    let tcx = this.tcx;\n-    let id_range = {\n-        let mut visitor = intravisit::IdRangeComputingVisitor::new(&tcx.hir());\n-        visitor.visit_body(this.body);\n-        visitor.result()\n-    };\n     let (all_loans, move_data) =\n         gather_loans::gather_loans_in_fn(this, body_id);\n \n@@ -184,7 +177,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n                              Some(this.body),\n                              cfg,\n                              LoanDataFlowOperator,\n-                             id_range,\n                              all_loans.len());\n     for (loan_idx, loan) in all_loans.iter().enumerate() {\n         loan_dfcx.add_gen(loan.gen_scope.item_local_id(), loan_idx);\n@@ -198,7 +190,6 @@ fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tc\n     let flowed_moves = move_data::FlowedMoveData::new(move_data,\n                                                       this,\n                                                       cfg,\n-                                                      id_range,\n                                                       this.body);\n \n     Some(AnalysisData { all_loans,"}, {"sha": "56c9f928eb03a30885a1521b8f5fdf0cabdc1de6", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "patch": "@@ -15,7 +15,6 @@ use std::rc::Rc;\n use std::usize;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::intravisit::IdRange;\n \n #[derive(Default)]\n pub struct MoveData<'tcx> {\n@@ -559,7 +558,6 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n     pub fn new(move_data: MoveData<'tcx>,\n                bccx: &BorrowckCtxt<'a, 'tcx>,\n                cfg: &cfg::CFG,\n-               id_range: IdRange,\n                body: &hir::Body)\n                -> FlowedMoveData<'a, 'tcx> {\n         let tcx = bccx.tcx;\n@@ -570,15 +568,13 @@ impl<'a, 'tcx> FlowedMoveData<'a, 'tcx> {\n                                  Some(body),\n                                  cfg,\n                                  MoveDataFlowOperator,\n-                                 id_range,\n                                  move_data.moves.borrow().len());\n         let mut dfcx_assign =\n             DataFlowContext::new(tcx,\n                                  \"flowed_move_data_assigns\",\n                                  Some(body),\n                                  cfg,\n                                  AssignDataFlowOperator,\n-                                 id_range,\n                                  move_data.var_assignments.borrow().len());\n \n         move_data.add_gen_kills(bccx,"}, {"sha": "8cf620567405c374b203eb5a9be56dd9a1c49e39", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=e00932a38dbebfcb1d4f0d3bcfda9cfd96288cb9", "patch": "@@ -15,7 +15,7 @@ use rustc_data_structures::graph::implementation::OUTGOING;\n \n use rustc::util::nodemap::FxHashMap;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, IdRange};\n+use rustc::hir::intravisit;\n use rustc::hir::print as pprust;\n \n \n@@ -230,16 +230,15 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n                body: Option<&hir::Body>,\n                cfg: &cfg::CFG,\n                oper: O,\n-               id_range: IdRange,\n                bits_per_id: usize) -> DataFlowContext<'a, 'tcx, O> {\n         let usize_bits = mem::size_of::<usize>() * 8;\n         let words_per_id = (bits_per_id + usize_bits - 1) / usize_bits;\n         let num_nodes = cfg.graph.all_nodes().len();\n \n-        debug!(\"DataFlowContext::new(analysis_name: {}, id_range={:?}, \\\n+        debug!(\"DataFlowContext::new(analysis_name: {}, \\\n                                      bits_per_id={}, words_per_id={}) \\\n                                      num_nodes: {}\",\n-               analysis_name, id_range, bits_per_id, words_per_id,\n+               analysis_name, bits_per_id, words_per_id,\n                num_nodes);\n \n         let entry = if oper.initial_value() { usize::MAX } else {0};"}]}