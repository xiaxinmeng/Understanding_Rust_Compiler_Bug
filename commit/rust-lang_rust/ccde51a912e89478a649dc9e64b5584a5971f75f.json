{"sha": "ccde51a912e89478a649dc9e64b5584a5971f75f", "node_id": "C_kwDOAAsO6NoAKGNjZGU1MWE5MTJlODk0NzhhNjQ5ZGM5ZTY0YjU1ODRhNTk3MWY3NWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T01:44:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T01:44:12Z"}, "message": "Auto merge of #102717 - beetrees:repr128-c-style-debuginfo, r=nagisa\n\nPass 128-bit C-style enum enumerator values to LLVM\n\nPass the full 128 bits of C-style enum enumerators through to LLVM. This means that debuginfo for C-style repr128 enums is now emitted correctly for DWARF platforms (as compared to not being correctly emitted on any platform).\n\nTracking issue: #56071", "tree": {"sha": "b67b50d46582a17f8bc14bdcfb9111b4b0be4112", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67b50d46582a17f8bc14bdcfb9111b4b0be4112"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccde51a912e89478a649dc9e64b5584a5971f75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccde51a912e89478a649dc9e64b5584a5971f75f", "html_url": "https://github.com/rust-lang/rust/commit/ccde51a912e89478a649dc9e64b5584a5971f75f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccde51a912e89478a649dc9e64b5584a5971f75f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a102dc806da3bc9c59b3594368a14e7d2632bf9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a102dc806da3bc9c59b3594368a14e7d2632bf9c", "html_url": "https://github.com/rust-lang/rust/commit/a102dc806da3bc9c59b3594368a14e7d2632bf9c"}, {"sha": "6f6eebde2012dcb163726c66f64fce4b5172dd9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6eebde2012dcb163726c66f64fce4b5172dd9f", "html_url": "https://github.com/rust-lang/rust/commit/6f6eebde2012dcb163726c66f64fce4b5172dd9f"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "53e8a291d1e8aa4d9a4cd90530b27ed0ad04edfa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -462,7 +462,7 @@ fn build_variant_names_type_di_node<'ll, 'tcx>(\n         cx,\n         \"VariantNames\",\n         variant_names_enum_base_type(cx),\n-        variants.map(|(variant_index, variant_name)| (variant_name, variant_index.as_u32() as u64)),\n+        variants.map(|(variant_index, variant_name)| (variant_name, variant_index.as_u32().into())),\n         containing_scope,\n     )\n }"}, {"sha": "cb558a50d9148ffde836b3e534aa85c18e9bfb67", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -91,9 +91,7 @@ fn build_c_style_enum_di_node<'ll, 'tcx>(\n             tag_base_type(cx, enum_type_and_layout),\n             enum_adt_def.discriminants(cx.tcx).map(|(variant_index, discr)| {\n                 let name = Cow::from(enum_adt_def.variant(variant_index).name.as_str());\n-                // Is there anything we can do to support 128-bit C-Style enums?\n-                let value = discr.val as u64;\n-                (name, value)\n+                (name, discr.val)\n             }),\n             containing_scope,\n         ),\n@@ -147,36 +145,34 @@ fn tag_base_type<'ll, 'tcx>(\n /// This is a helper function and does not register anything in the type map by itself.\n ///\n /// `variants` is an iterator of (discr-value, variant-name).\n-///\n-// NOTE: Handling of discriminant values is somewhat inconsistent. They can appear as u128,\n-//       u64, and i64. Here everything gets mapped to i64 because that's what LLVM's API expects.\n fn build_enumeration_type_di_node<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     type_name: &str,\n     base_type: Ty<'tcx>,\n-    enumerators: impl Iterator<Item = (Cow<'tcx, str>, u64)>,\n+    enumerators: impl Iterator<Item = (Cow<'tcx, str>, u128)>,\n     containing_scope: &'ll DIType,\n ) -> &'ll DIType {\n     let is_unsigned = match base_type.kind() {\n         ty::Int(_) => false,\n         ty::Uint(_) => true,\n         _ => bug!(\"build_enumeration_type_di_node() called with non-integer tag type.\"),\n     };\n+    let (size, align) = cx.size_and_align_of(base_type);\n \n     let enumerator_di_nodes: SmallVec<Option<&'ll DIType>> = enumerators\n         .map(|(name, value)| unsafe {\n+            let value = [value as u64, (value >> 64) as u64];\n             Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                 DIB(cx),\n                 name.as_ptr().cast(),\n                 name.len(),\n-                value as i64,\n+                value.as_ptr(),\n+                size.bits() as libc::c_uint,\n                 is_unsigned,\n             ))\n         })\n         .collect();\n \n-    let (size, align) = cx.size_and_align_of(base_type);\n-\n     unsafe {\n         llvm::LLVMRustDIBuilderCreateEnumerationType(\n             DIB(cx),"}, {"sha": "f451984973048f0501ded0c2084bd1b98d7e5992", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -2127,7 +2127,8 @@ extern \"C\" {\n         Builder: &DIBuilder<'a>,\n         Name: *const c_char,\n         NameLen: size_t,\n-        Value: i64,\n+        Value: *const u64,\n+        SizeInBits: c_uint,\n         IsUnsigned: bool,\n     ) -> &'a DIEnumerator;\n "}, {"sha": "216c35d6da078fb629c6bba3b02333bd6807dc3f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -1036,8 +1036,9 @@ extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n-    int64_t Value, bool IsUnsigned) {\n-  return wrap(Builder->createEnumerator(StringRef(Name, NameLen), Value, IsUnsigned));\n+    const uint64_t Value[2], unsigned SizeInBits, bool IsUnsigned) {\n+  return wrap(Builder->createEnumerator(StringRef(Name, NameLen),\n+      APSInt(APInt(SizeInBits, makeArrayRef(Value, 2)), IsUnsigned)));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType("}, {"sha": "a840e3ee6d80bd15e22d6ff69581cc7b101a5dc9", "filename": "src/test/run-make/repr128-dwarf/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -0,0 +1,16 @@\n+# ignore-windows\n+# This test should be replaced with one in src/test/debuginfo once GDB or LLDB support 128-bit\n+# enums.\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) -Cdebuginfo=2 lib.rs -o $(TMPDIR)/repr128.rlib\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128A $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128B $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128C $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128D $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128A $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128B $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128C $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128D $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f )\""}, {"sha": "63675441d4babc8d255c273fdc6598ad6682935a", "filename": "src/test/run-make/repr128-dwarf/lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ccde51a912e89478a649dc9e64b5584a5971f75f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccde51a912e89478a649dc9e64b5584a5971f75f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs?ref=ccde51a912e89478a649dc9e64b5584a5971f75f", "patch": "@@ -0,0 +1,23 @@\n+#![crate_type = \"lib\"]\n+#![feature(repr128)]\n+\n+// Use .to_le() to ensure that the bytes are in the same order on both little- and big-endian\n+// platforms.\n+\n+#[repr(u128)]\n+pub enum U128Enum {\n+    U128A = 0_u128.to_le(),\n+    U128B = 1_u128.to_le(),\n+    U128C = (u64::MAX as u128 + 1).to_le(),\n+    U128D = u128::MAX.to_le(),\n+}\n+\n+#[repr(i128)]\n+pub enum I128Enum {\n+    I128A = 0_i128.to_le(),\n+    I128B = (-1_i128).to_le(),\n+    I128C = i128::MIN.to_le(),\n+    I128D = i128::MAX.to_le(),\n+}\n+\n+pub fn f(_: U128Enum, _: I128Enum) {}"}]}