{"sha": "8a391dd8cf2ff938a392cbd177dc0a21d644d627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzkxZGQ4Y2YyZmY5MzhhMzkyY2JkMTc3ZGMwYTIxZDY0NGQ2Mjc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-06T17:14:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-06T17:37:28Z"}, "message": "move check into wf pass, add a test for assoc types", "tree": {"sha": "0933ee185da5d935c6e4f1cf916dcdeeb1a0f42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0933ee185da5d935c6e4f1cf916dcdeeb1a0f42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a391dd8cf2ff938a392cbd177dc0a21d644d627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a391dd8cf2ff938a392cbd177dc0a21d644d627", "html_url": "https://github.com/rust-lang/rust/commit/8a391dd8cf2ff938a392cbd177dc0a21d644d627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a391dd8cf2ff938a392cbd177dc0a21d644d627/comments", "author": null, "committer": null, "parents": [{"sha": "707f7a1617013f7684fe81a1bba2dd77acbaaa73", "url": "https://api.github.com/repos/rust-lang/rust/commits/707f7a1617013f7684fe81a1bba2dd77acbaaa73", "html_url": "https://github.com/rust-lang/rust/commit/707f7a1617013f7684fe81a1bba2dd77acbaaa73"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "595a2295674a12d54f80998d07133e5bfb3349e1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a391dd8cf2ff938a392cbd177dc0a21d644d627", "patch": "@@ -465,29 +465,6 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-// Check that trait with default impls (`impl Trait for ..`) contain no methods\n-struct DefaultedTraitVisitor<'a, 'tcx: 'a> { ccx: &'a CrateCtxt<'a, 'tcx> }\n-\n-impl<'a, 'tcx> Visitor<'tcx> for DefaultedTraitVisitor<'a, 'tcx> {\n-    fn visit_item(&mut self, item: &ast::Item) {\n-        let tcx = self.ccx.tcx;\n-\n-        match item.node {\n-            ast::ItemTrait(_, _, _, ref trait_methods) => {\n-                if ty::trait_has_default_impl(tcx, local_def(item.id)) &&\n-                    !trait_methods.is_empty()\n-                {\n-                    tcx.sess.span_err(\n-                        item.span,\n-                        \"traits with default impls (`e.g. impl Trait for ..`) must have no \\\n-                        methods\")\n-                }\n-            },\n-            _ => {},\n-        }\n-    }\n-}\n-\n pub fn check_item_types(ccx: &CrateCtxt) {\n     let krate = ccx.tcx.map.krate();\n     let mut visit = wf::CheckTypeWellFormedVisitor::new(ccx);\n@@ -501,11 +478,6 @@ pub fn check_item_types(ccx: &CrateCtxt) {\n     visit::walk_crate(&mut visit, krate);\n \n     ccx.tcx.sess.abort_if_errors();\n-\n-    let mut visit = DefaultedTraitVisitor { ccx: ccx };\n-    visit::walk_crate(&mut visit, krate);\n-\n-    ccx.tcx.sess.abort_if_errors();\n }\n \n fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,"}, {"sha": "8185f48cb8c7031ed952bdee0b8ac51be794d0c4", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=8a391dd8cf2ff938a392cbd177dc0a21d644d627", "patch": "@@ -118,7 +118,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n-            ast::ItemTrait(_, ref ast_generics, _, _) => {\n+            ast::ItemTrait(_, ref ast_generics, _, ref items) => {\n                 let trait_predicates =\n                     ty::lookup_predicates(ccx.tcx, local_def(item.id));\n                 reject_non_type_param_bounds(\n@@ -127,6 +127,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                     &trait_predicates);\n                 self.check_variances(item, ast_generics, &trait_predicates,\n                                      self.tcx().lang_items.phantom_fn());\n+                if ty::trait_has_default_impl(ccx.tcx, local_def(item.id)) {\n+                    if !items.is_empty() {\n+                        ccx.tcx.sess.span_err(\n+                            item.span,\n+                            \"traits with default impls (`e.g. unsafe impl Trait for ..`) must \\\n+                            have no methods or associated items\")\n+                    }\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "ff5ac9de8d9443872de7b03f350ba1f0c3652dc4", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=8a391dd8cf2ff938a392cbd177dc0a21d644d627", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![feature(optin_builtin_traits)]\n+\n+use std::marker::MarkerTrait;\n+\n+unsafe trait Trait: MarkerTrait {\n+//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n+    type Output;\n+}\n+\n+unsafe impl Trait for .. {}\n+\n+fn call_method<T: Trait>(x: T) {}\n+\n+fn main() {\n+    // ICE\n+    call_method(());\n+}"}, {"sha": "99373a69697ae33f3197f7f36d8bb42a7b369049", "filename": "src/test/compile-fail/issue-23080.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a391dd8cf2ff938a392cbd177dc0a21d644d627/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=8a391dd8cf2ff938a392cbd177dc0a21d644d627", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![feature(optin_builtin_traits)]\n \n unsafe trait Trait {\n-//~^ error: traits with default impls (`e.g. impl Trait for ..`) must have no methods\n+//~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n     fn method(&self) {\n         println!(\"Hello\");\n     }"}]}