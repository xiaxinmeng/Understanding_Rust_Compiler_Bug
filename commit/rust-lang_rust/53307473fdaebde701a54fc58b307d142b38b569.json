{"sha": "53307473fdaebde701a54fc58b307d142b38b569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzA3NDczZmRhZWJkZTcwMWE1NGZjNThiMzA3ZDE0MmIzOGI1Njk=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-06-28T05:30:23Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-07-01T05:47:47Z"}, "message": "private no-mangle lints: issue suggestion for restricted visibility\n\nThis is probably quite a lot less likely to come up in practice than the\n\"inherited\" (no visibility keyword) case, but now that we have\nvisibility spans in the HIR, we can do this, and it presumably doesn't\nhurt to be exhaustive. (Who can say but that the attention to detail\njust might knock someone's socks off, someday, somewhere?)\n\nThis is inspired by #47383.", "tree": {"sha": "b2ccb112e857c3f6d1cc087d46ef92c5fbed85f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ccb112e857c3f6d1cc087d46ef92c5fbed85f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53307473fdaebde701a54fc58b307d142b38b569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53307473fdaebde701a54fc58b307d142b38b569", "html_url": "https://github.com/rust-lang/rust/commit/53307473fdaebde701a54fc58b307d142b38b569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53307473fdaebde701a54fc58b307d142b38b569/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "104985b8275180ebe8811f8957a93740855995e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/104985b8275180ebe8811f8957a93740855995e0", "html_url": "https://github.com/rust-lang/rust/commit/104985b8275180ebe8811f8957a93740855995e0"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "f4159002eb3859acb5adbd8b86672957c1f329ee", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/53307473fdaebde701a54fc58b307d142b38b569/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53307473fdaebde701a54fc58b307d142b38b569/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=53307473fdaebde701a54fc58b307d142b38b569", "patch": "@@ -1177,6 +1177,23 @@ impl LintPass for InvalidNoMangleItems {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        let suggest_make_pub = |vis: &hir::Visibility, err: &mut DiagnosticBuilder| {\n+            let suggestion = match vis.node {\n+                hir::VisibilityInherited => {\n+                    // inherited visibility is empty span at item start; need an extra space\n+                    Some(\"pub \".to_owned())\n+                },\n+                hir::VisibilityRestricted { .. } |\n+                hir::VisibilityCrate(_) => {\n+                    Some(\"pub\".to_owned())\n+                },\n+                hir::VisibilityPublic => None\n+            };\n+            if let Some(replacement) = suggestion {\n+                err.span_suggestion(vis.span, \"try making it public\", replacement);\n+            }\n+        };\n+\n         match it.node {\n             hir::ItemFn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, \"no_mangle\") {\n@@ -1186,12 +1203,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     if !cx.access_levels.is_reachable(it.id) {\n                         let msg = \"function is marked #[no_mangle], but not exported\";\n                         let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n-                        let insertion_span = it.span.shrink_to_lo();\n-                        if it.vis.node == hir::VisibilityInherited {\n-                            err.span_suggestion(insertion_span,\n-                                                \"try making it public\",\n-                                                \"pub \".to_owned());\n-                        }\n+                        suggest_make_pub(&it.vis, &mut err);\n                         err.emit();\n                     }\n                     for param in &generics.params {\n@@ -1214,17 +1226,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n             }\n             hir::ItemStatic(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") &&\n-                   !cx.access_levels.is_reachable(it.id) {\n-                       let msg = \"static is marked #[no_mangle], but not exported\";\n-                       let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n-                       let insertion_span = it.span.shrink_to_lo();\n-                       if it.vis.node == hir::VisibilityInherited {\n-                           err.span_suggestion(insertion_span,\n-                                               \"try making it public\",\n-                                               \"pub \".to_owned());\n-                       }\n-                       err.emit();\n-                }\n+                    !cx.access_levels.is_reachable(it.id) {\n+                        let msg = \"static is marked #[no_mangle], but not exported\";\n+                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n+                        suggest_make_pub(&it.vis, &mut err);\n+                        err.emit();\n+                    }\n             }\n             hir::ItemConst(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {"}, {"sha": "6c767bca74ae2207f7571291723a6525657440fe", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53307473fdaebde701a54fc58b307d142b38b569/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53307473fdaebde701a54fc58b307d142b38b569/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=53307473fdaebde701a54fc58b307d142b38b569", "patch": "@@ -34,6 +34,12 @@ mod badlands {\n     //~^ WARN static is marked\n     #[no_mangle] pub fn val_jean() {}\n     //~^ WARN function is marked\n+\n+    // ... but we can suggest just-`pub` instead of restricted\n+    #[no_mangle] pub(crate) static VETAR: bool = true;\n+    //~^ WARN static is marked\n+    #[no_mangle] pub(crate) fn crossfield() {}\n+    //~^ WARN function is marked\n }\n \n struct Equinox {"}, {"sha": "adb4b8eb67d570d2c7050211385848819e7f2c28", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/53307473fdaebde701a54fc58b307d142b38b569/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53307473fdaebde701a54fc58b307d142b38b569/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=53307473fdaebde701a54fc58b307d142b38b569", "patch": "@@ -1,5 +1,5 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:48:21\n+  --> $DIR/suggestions.rs:54:21\n    |\n LL |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n@@ -11,15 +11,15 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:43:1\n+  --> $DIR/suggestions.rs:49:1\n    |\n LL | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:48:13\n+  --> $DIR/suggestions.rs:54:13\n    |\n LL |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ----^\n@@ -33,7 +33,7 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:52:13\n+  --> $DIR/suggestions.rs:58:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -96,16 +96,32 @@ warning: function is marked #[no_mangle], but not exported\n LL |     #[no_mangle] pub fn val_jean() {}\n    |                  ^^^^^^^^^^^^^^^^^^^^\n \n+warning: static is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:39:18\n+   |\n+LL |     #[no_mangle] pub(crate) static VETAR: bool = true;\n+   |                  ----------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  help: try making it public: `pub`\n+\n+warning: function is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:41:18\n+   |\n+LL |     #[no_mangle] pub(crate) fn crossfield() {}\n+   |                  ----------^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  help: try making it public: `pub`\n+\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:46:5\n+  --> $DIR/suggestions.rs:52:5\n    |\n LL |     while true { // should suggest `loop`\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:57:23\n+  --> $DIR/suggestions.rs:63:23\n    |\n LL |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n    |                       ------------^^^^^^^^^^^^"}]}