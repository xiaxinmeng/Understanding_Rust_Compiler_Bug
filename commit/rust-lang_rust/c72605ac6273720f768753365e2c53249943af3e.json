{"sha": "c72605ac6273720f768753365e2c53249943af3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjYwNWFjNjI3MzcyMGY3Njg3NTMzNjVlMmM1MzI0OTk0M2FmM2U=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-23T23:51:32Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:51Z"}, "message": "fix up tests", "tree": {"sha": "7be6b6a468cb846962bcf1b5142b204359143152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be6b6a468cb846962bcf1b5142b204359143152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72605ac6273720f768753365e2c53249943af3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72605ac6273720f768753365e2c53249943af3e", "html_url": "https://github.com/rust-lang/rust/commit/c72605ac6273720f768753365e2c53249943af3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72605ac6273720f768753365e2c53249943af3e/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f1b1fce4a57f35dc7f436f4c86158b61bb4482", "html_url": "https://github.com/rust-lang/rust/commit/18f1b1fce4a57f35dc7f436f4c86158b61bb4482"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "59201a0c23ad9eda4b42aa42562208e3aecce683", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c72605ac6273720f768753365e2c53249943af3e/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72605ac6273720f768753365e2c53249943af3e/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=c72605ac6273720f768753365e2c53249943af3e", "patch": "@@ -170,7 +170,7 @@ fn test_range_small() {\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     let mut j = 0;\n-    for ((&k, &v), i) in map.range(Included(&2), Unbounded).zip(2..size) {\n+    for ((&k, &v), i) in map.range(2..).zip(2..size) {\n         assert_eq!(k, i);\n         assert_eq!(v, i);\n         j += 1;\n@@ -184,7 +184,7 @@ fn test_range_1000() {\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n-        let mut kvs = map.range(min, max).map(|(&k, &v)| (k, v));\n+        let mut kvs = map.range((min, max)).map(|(&k, &v)| (k, v));\n         let mut pairs = (0..size).map(|i| (i, i));\n \n         for (kv, pair) in kvs.by_ref().zip(pairs.by_ref()) {\n@@ -201,14 +201,28 @@ fn test_range_1000() {\n     test(&map, size, Unbounded, Unbounded);\n }\n \n+#[test]\n+fn test_range_borrowed_key() {\n+    let mut map = BTreeMap::new();\n+    map.insert(\"aardvark\".to_string(), 1);\n+    map.insert(\"baboon\".to_string(), 2);\n+    map.insert(\"coyote\".to_string(), 3);\n+    map.insert(\"dingo\".to_string(), 4);\n+    // NOTE: would like to use simply \"a\"..\"d\" here...\n+    let mut iter = map.range(\"b\".to_string()..\"d\".to_string());\n+    assert_eq!(iter.next(), Some((&\"baboon\".to_string(), &2)));\n+    assert_eq!(iter.next(), Some((&\"coyote\".to_string(), &3)));\n+    assert_eq!(iter.next(), None);\n+}\n+\n #[test]\n fn test_range() {\n     let size = 200;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n         for j in i..size {\n-            let mut kvs = map.range(Included(&i), Included(&j)).map(|(&k, &v)| (k, v));\n+            let mut kvs = map.range((Included(&i), Included(&j))).map(|(&k, &v)| (k, v));\n             let mut pairs = (i..j + 1).map(|i| (i, i));\n \n             for (kv, pair) in kvs.by_ref().zip(pairs.by_ref()) {"}]}