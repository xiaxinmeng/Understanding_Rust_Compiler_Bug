{"sha": "ae383e2af8c671b3120a3f19c0c167e2df7b23e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzgzZTJhZjhjNjcxYjMxMjBhM2YxOWMwYzE2N2UyZGY3YjIzZTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-26T14:34:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-26T14:34:35Z"}, "message": "Rollup merge of #69447 - Centril:minor-stmt-refactor, r=estebank\n\nMinor refactoring of statement parsing\n\nExtracted out of https://github.com/rust-lang/rust/pull/69445.\n\nr? @estebank", "tree": {"sha": "ab339f2d585f596391e7e6fa43034225aa5cbe55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab339f2d585f596391e7e6fa43034225aa5cbe55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae383e2af8c671b3120a3f19c0c167e2df7b23e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVoH7CRBK7hj4Ov3rIwAAdHIIAI3WMebaXQ4N/3/eqPLo3+54\nRYVSfI4BJL3LNUcRH28EjtGo5zkCRyHWdqXLviDsBBVMvtFCv3sik7dfWHjhAERD\nbS4mmzOfldg+gfFM5XP9avG3w6Ybp8XBNL9o7+zVxw0mZcUPTuLBGQ/2QlocnjTG\nrHL3v9CUcM9CfJCLjkNOA18gbvk5derF2Sjq7j/iIiDSkOfhsPExO1TrwMpuwHNJ\nnjhS3z4WqWVVEDmD3Zymr8pLUu9Ipx9fWChFZJXXDCCOFjgNemWjNF0EI1tSQ/0I\nemtALuBSFbccSUBQaOytqJIXGCfzohwulQp6oJ3Cq9DTN+aL2UBUO7eGpg831zI=\n=bCVu\n-----END PGP SIGNATURE-----\n", "payload": "tree ab339f2d585f596391e7e6fa43034225aa5cbe55\nparent c0760279b3c0b2ae56dce8e569eeec585bb29c92\nparent 7876711b9be1673631c4aaea63c289a984afbb0b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582727675 +0100\ncommitter GitHub <noreply@github.com> 1582727675 +0100\n\nRollup merge of #69447 - Centril:minor-stmt-refactor, r=estebank\n\nMinor refactoring of statement parsing\n\nExtracted out of https://github.com/rust-lang/rust/pull/69445.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae383e2af8c671b3120a3f19c0c167e2df7b23e2", "html_url": "https://github.com/rust-lang/rust/commit/ae383e2af8c671b3120a3f19c0c167e2df7b23e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae383e2af8c671b3120a3f19c0c167e2df7b23e2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0760279b3c0b2ae56dce8e569eeec585bb29c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0760279b3c0b2ae56dce8e569eeec585bb29c92", "html_url": "https://github.com/rust-lang/rust/commit/c0760279b3c0b2ae56dce8e569eeec585bb29c92"}, {"sha": "7876711b9be1673631c4aaea63c289a984afbb0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7876711b9be1673631c4aaea63c289a984afbb0b", "html_url": "https://github.com/rust-lang/rust/commit/7876711b9be1673631c4aaea63c289a984afbb0b"}], "stats": {"total": 181, "additions": 87, "deletions": 94}, "files": [{"sha": "d2a6f0b7fcf0cc7d22b54eb9bff64f9f827c9ac5", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 87, "deletions": 94, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/ae383e2af8c671b3120a3f19c0c167e2df7b23e2/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae383e2af8c671b3120a3f19c0c167e2df7b23e2/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=ae383e2af8c671b3120a3f19c0c167e2df7b23e2", "patch": "@@ -35,61 +35,32 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n \n-        if self.eat_keyword(kw::Let) {\n-            return self.parse_local_mk(lo, attrs.into()).map(Some);\n-        }\n-        if self.is_kw_followed_by_ident(kw::Mut) {\n-            return self.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\");\n-        }\n-        if self.is_kw_followed_by_ident(kw::Auto) {\n+        let stmt = if self.eat_keyword(kw::Let) {\n+            self.parse_local_mk(lo, attrs.into())?\n+        } else if self.is_kw_followed_by_ident(kw::Mut) {\n+            self.recover_stmt_local(lo, attrs.into(), \"missing keyword\", \"let mut\")?\n+        } else if self.is_kw_followed_by_ident(kw::Auto) {\n             self.bump(); // `auto`\n             let msg = \"write `let` instead of `auto` to introduce a new variable\";\n-            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n-        }\n-        if self.is_kw_followed_by_ident(sym::var) {\n+            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+        } else if self.is_kw_followed_by_ident(sym::var) {\n             self.bump(); // `var`\n             let msg = \"write `let` instead of `var` to introduce a new variable\";\n-            return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n-        }\n-\n-        // Starts like a simple path, being careful to avoid contextual keywords,\n-        // e.g., `union`, items with `crate` visibility, or `auto trait` items.\n-        // We aim to parse an arbitrary path `a::b` but not something that starts like a path\n-        // (1 token), but it fact not a path. Also, we avoid stealing syntax from `parse_item_`.\n-        if self.token.is_path_start() && !self.token.is_qpath_start() && !self.is_path_start_item()\n+            self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n+        } else if self.token.is_path_start()\n+            && !self.token.is_qpath_start()\n+            && !self.is_path_start_item()\n         {\n-            let path = self.parse_path(PathStyle::Expr)?;\n-\n-            if self.eat(&token::Not) {\n-                return self.parse_stmt_mac(lo, attrs.into(), path);\n-            }\n-\n-            let expr = if self.check(&token::OpenDelim(token::Brace)) {\n-                self.parse_struct_expr(lo, path, AttrVec::new())?\n-            } else {\n-                let hi = self.prev_span;\n-                self.mk_expr(lo.to(hi), ExprKind::Path(None, path), AttrVec::new())\n-            };\n-\n-            let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n-                let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs.into())?;\n-                this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n-            })?;\n-            return Ok(Some(self.mk_stmt(lo.to(self.prev_span), StmtKind::Expr(expr))));\n-        }\n-\n-        // FIXME: Bad copy of attrs\n-        let old_directory_ownership =\n-            mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n-        let item = self.parse_item_common(attrs.clone(), false, true, |_| true)?;\n-        self.directory.ownership = old_directory_ownership;\n-\n-        if let Some(item) = item {\n-            return Ok(Some(self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))));\n-        }\n-\n-        // Do not attempt to parse an expression if we're done here.\n-        if self.token == token::Semi {\n+            // We have avoided contextual keywords like `union`, items with `crate` visibility,\n+            // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n+            // that starts like a path (1 token), but it fact not a path.\n+            // Also, we avoid stealing syntax from `parse_item_`.\n+            self.parse_stmt_path_start(lo, attrs)?\n+        } else if let Some(item) = self.parse_stmt_item(attrs.clone())? {\n+            // FIXME: Bad copy of attrs\n+            self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n+        } else if self.token == token::Semi {\n+            // Do not attempt to parse an expression if we're done here.\n             self.error_outer_attrs(&attrs);\n             self.bump();\n             let mut last_semi = lo;\n@@ -104,27 +75,49 @@ impl<'a> Parser<'a> {\n                 ExprKind::Tup(Vec::new()),\n                 AttrVec::new(),\n             ));\n-            return Ok(Some(self.mk_stmt(lo.to(last_semi), kind)));\n-        }\n-\n-        if self.token == token::CloseDelim(token::Brace) {\n+            self.mk_stmt(lo.to(last_semi), kind)\n+        } else if self.token != token::CloseDelim(token::Brace) {\n+            // Remainder are line-expr stmts.\n+            let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n+            self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n+        } else {\n             self.error_outer_attrs(&attrs);\n             return Ok(None);\n+        };\n+        Ok(Some(stmt))\n+    }\n+\n+    fn parse_stmt_item(&mut self, attrs: Vec<Attribute>) -> PResult<'a, Option<ast::Item>> {\n+        let old = mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n+        let item = self.parse_item_common(attrs.clone(), false, true, |_| true)?;\n+        self.directory.ownership = old;\n+        Ok(item)\n+    }\n+\n+    fn parse_stmt_path_start(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, Stmt> {\n+        let path = self.parse_path(PathStyle::Expr)?;\n+\n+        if self.eat(&token::Not) {\n+            return self.parse_stmt_mac(lo, attrs.into(), path);\n         }\n \n-        // Remainder are line-expr stmts.\n-        let e = self.parse_expr_res(Restrictions::STMT_EXPR, Some(attrs.into()))?;\n-        Ok(Some(self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))))\n+        let expr = if self.check(&token::OpenDelim(token::Brace)) {\n+            self.parse_struct_expr(lo, path, AttrVec::new())?\n+        } else {\n+            let hi = self.prev_span;\n+            self.mk_expr(lo.to(hi), ExprKind::Path(None, path), AttrVec::new())\n+        };\n+\n+        let expr = self.with_res(Restrictions::STMT_EXPR, |this| {\n+            let expr = this.parse_dot_or_call_expr_with(expr, lo, attrs.into())?;\n+            this.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(expr))\n+        })?;\n+        Ok(self.mk_stmt(lo.to(self.prev_span), StmtKind::Expr(expr)))\n     }\n \n     /// Parses a statement macro `mac!(args)` provided a `path` representing `mac`.\n     /// At this point, the `!` token after the path has already been eaten.\n-    fn parse_stmt_mac(\n-        &mut self,\n-        lo: Span,\n-        attrs: AttrVec,\n-        path: ast::Path,\n-    ) -> PResult<'a, Option<Stmt>> {\n+    fn parse_stmt_mac(&mut self, lo: Span, attrs: AttrVec, path: ast::Path) -> PResult<'a, Stmt> {\n         let args = self.parse_mac_args()?;\n         let delim = args.delim();\n         let hi = self.prev_span;\n@@ -145,7 +138,7 @@ impl<'a> Parser<'a> {\n             let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n             StmtKind::Expr(e)\n         };\n-        Ok(Some(self.mk_stmt(lo.to(hi), kind)))\n+        Ok(self.mk_stmt(lo.to(hi), kind))\n     }\n \n     /// Error on outer attributes in this context.\n@@ -167,12 +160,12 @@ impl<'a> Parser<'a> {\n         attrs: AttrVec,\n         msg: &str,\n         sugg: &str,\n-    ) -> PResult<'a, Option<Stmt>> {\n+    ) -> PResult<'a, Stmt> {\n         let stmt = self.parse_local_mk(lo, attrs)?;\n         self.struct_span_err(lo, \"invalid variable declaration\")\n             .span_suggestion(lo, msg, sugg.to_string(), Applicability::MachineApplicable)\n             .emit();\n-        Ok(Some(stmt))\n+        Ok(stmt)\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n@@ -372,36 +365,36 @@ impl<'a> Parser<'a> {\n \n         let mut eat_semi = true;\n         match stmt.kind {\n-            StmtKind::Expr(ref expr) if self.token != token::Eof => {\n-                // expression without semicolon\n-                if classify::expr_requires_semi_to_be_stmt(expr) {\n-                    // Just check for errors and recover; do not eat semicolon yet.\n-                    if let Err(mut e) =\n-                        self.expect_one_of(&[], &[token::Semi, token::CloseDelim(token::Brace)])\n-                    {\n-                        if let TokenKind::DocComment(..) = self.token.kind {\n-                            if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n-                                let sp = self.token.span;\n-                                let marker = &snippet[..3];\n-                                let (comment_marker, doc_comment_marker) = marker.split_at(2);\n-\n-                                e.span_suggestion(\n-                                    sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n-                                    &format!(\n-                                        \"add a space before `{}` to use a regular comment\",\n-                                        doc_comment_marker,\n-                                    ),\n-                                    format!(\"{} {}\", comment_marker, doc_comment_marker),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            }\n+            // Expression without semicolon.\n+            StmtKind::Expr(ref expr)\n+                if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) =>\n+            {\n+                // Just check for errors and recover; do not eat semicolon yet.\n+                if let Err(mut e) =\n+                    self.expect_one_of(&[], &[token::Semi, token::CloseDelim(token::Brace)])\n+                {\n+                    if let TokenKind::DocComment(..) = self.token.kind {\n+                        if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n+                            let sp = self.token.span;\n+                            let marker = &snippet[..3];\n+                            let (comment_marker, doc_comment_marker) = marker.split_at(2);\n+\n+                            e.span_suggestion(\n+                                sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n+                                &format!(\n+                                    \"add a space before `{}` to use a regular comment\",\n+                                    doc_comment_marker,\n+                                ),\n+                                format!(\"{} {}\", comment_marker, doc_comment_marker),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                         }\n-                        e.emit();\n-                        self.recover_stmt();\n-                        // Don't complain about type errors in body tail after parse error (#57383).\n-                        let sp = expr.span.to(self.prev_span);\n-                        stmt.kind = StmtKind::Expr(self.mk_expr_err(sp));\n                     }\n+                    e.emit();\n+                    self.recover_stmt();\n+                    // Don't complain about type errors in body tail after parse error (#57383).\n+                    let sp = expr.span.to(self.prev_span);\n+                    stmt.kind = StmtKind::Expr(self.mk_expr_err(sp));\n                 }\n             }\n             StmtKind::Local(..) => {"}]}