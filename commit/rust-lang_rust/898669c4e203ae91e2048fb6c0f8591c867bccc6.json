{"sha": "898669c4e203ae91e2048fb6c0f8591c867bccc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODY2OWM0ZTIwM2FlOTFlMjA0OGZiNmMwZjg1OTFjODY3YmNjYzY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-04-02T21:23:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-03T20:43:35Z"}, "message": "fix Option<~ZeroSizeType>\n\n1778b6361627c5894bf75ffecf427573af02d390 provided the guarantee of no\n`exchange_free` calls for ~ZeroSizeType, so a sentinel can now be used\nwithout overhead.\n\nCloses #11998", "tree": {"sha": "00dd1385c83fb35dff75055f477bcc795732d6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00dd1385c83fb35dff75055f477bcc795732d6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898669c4e203ae91e2048fb6c0f8591c867bccc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898669c4e203ae91e2048fb6c0f8591c867bccc6", "html_url": "https://github.com/rust-lang/rust/commit/898669c4e203ae91e2048fb6c0f8591c867bccc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898669c4e203ae91e2048fb6c0f8591c867bccc6/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac8b34ccd02965886d3ca0bd83115c7f7b73729", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac8b34ccd02965886d3ca0bd83115c7f7b73729", "html_url": "https://github.com/rust-lang/rust/commit/1ac8b34ccd02965886d3ca0bd83115c7f7b73729"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "49a4a3ed25ca7aab7c0656776423d906106002ca", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=898669c4e203ae91e2048fb6c0f8591c867bccc6", "patch": "@@ -67,7 +67,7 @@ use middle::typeck::MethodCall;\n use util::common::indenter;\n use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n-use middle::trans::machine::llsize_of;\n+use middle::trans::machine::{llsize_of, llsize_of_alloc};\n use middle::trans::type_::Type;\n \n use std::slice;\n@@ -1200,12 +1200,19 @@ fn trans_boxed_expr<'a>(bcx: &'a Block<'a>,\n         let size = llsize_of(bcx.ccx(), llty);\n         let Result { bcx: bcx, val: val } = malloc_raw_dyn(bcx, contents_ty,\n                                                            heap_exchange, size);\n-        let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n-        fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n-                                val, heap_exchange);\n-        let bcx = trans_into(bcx, contents, SaveIn(val));\n-        fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n-        immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n+        // Unique boxes do not allocate for zero-size types. The standard library may assume\n+        // that `free` is never called on the pointer returned for `~ZeroSizeType`.\n+        if llsize_of_alloc(bcx.ccx(), llty) == 0 {\n+            let bcx = trans_into(bcx, contents, SaveIn(val));\n+            immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n+        } else {\n+            let custom_cleanup_scope = fcx.push_custom_cleanup_scope();\n+            fcx.schedule_free_value(cleanup::CustomScope(custom_cleanup_scope),\n+                                    val, heap_exchange);\n+            let bcx = trans_into(bcx, contents, SaveIn(val));\n+            fcx.pop_custom_cleanup_scope(custom_cleanup_scope);\n+            immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n+        }\n     } else {\n         let base::MallocResult { bcx, smart_ptr: bx, body } =\n             base::malloc_general(bcx, contents_ty, heap);"}, {"sha": "3917857e1af0433ce9d4a65e713cb8fd3a33fa1c", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=898669c4e203ae91e2048fb6c0f8591c867bccc6", "patch": "@@ -64,12 +64,21 @@ pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 {\n     }\n }\n \n+// The compiler never calls `exchange_free` on ~ZeroSizeType, so zero-size\n+// allocations can point to this `static`. It would be incorrect to use a null\n+// pointer, due to enums assuming types like unique pointers are never null.\n+static EMPTY: () = ();\n+\n /// The allocator for unique pointers without contained managed pointers.\n #[cfg(not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline]\n-pub unsafe fn exchange_malloc(size: uint) -> *u8 {\n-    malloc_raw(size) as *u8\n+pub unsafe fn exchange_malloc(size: uint) -> *mut u8 {\n+    if size == 0 {\n+        &EMPTY as *() as *mut u8\n+    } else {\n+        malloc_raw(size)\n+    }\n }\n \n // FIXME: #7496"}, {"sha": "9695296ec15610de322fd0131e531a6c01bb100b", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898669c4e203ae91e2048fb6c0f8591c867bccc6/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=898669c4e203ae91e2048fb6c0f8591c867bccc6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    assert!(Some(~()).is_some());\n+\n+    struct Foo;\n+    assert!(Some(~Foo).is_some());\n+\n+    let xs: ~[()] = ~[];\n+    assert!(Some(xs).is_some());\n+}"}]}