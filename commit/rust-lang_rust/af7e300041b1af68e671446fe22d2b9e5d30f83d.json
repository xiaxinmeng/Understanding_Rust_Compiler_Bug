{"sha": "af7e300041b1af68e671446fe22d2b9e5d30f83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2UzMDAwNDFiMWFmNjhlNjcxNDQ2ZmUyMmQyYjllNWQzMGY4M2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:27:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T11:29:53Z"}, "message": "Remove confusing API", "tree": {"sha": "18b444a0d447465a7de75ec5a0153c90b8566a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b444a0d447465a7de75ec5a0153c90b8566a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7e300041b1af68e671446fe22d2b9e5d30f83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7e300041b1af68e671446fe22d2b9e5d30f83d", "html_url": "https://github.com/rust-lang/rust/commit/af7e300041b1af68e671446fe22d2b9e5d30f83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7e300041b1af68e671446fe22d2b9e5d30f83d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34072d53b683805f449bf106d16788f171ca3522", "url": "https://api.github.com/repos/rust-lang/rust/commits/34072d53b683805f449bf106d16788f171ca3522", "html_url": "https://github.com/rust-lang/rust/commit/34072d53b683805f449bf106d16788f171ca3522"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "8bf2428ed46e536d2c0472f22471cea61e92791a", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=af7e300041b1af68e671446fe22d2b9e5d30f83d", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{FileRange, FileSymbol};\n+use crate::FileSymbol;\n \n use super::short_label::ShortLabel;\n \n@@ -47,6 +47,19 @@ impl NavigationTarget {\n     pub fn range(&self) -> TextRange {\n         self.focus_range.unwrap_or(self.full_range)\n     }\n+    /// A \"most interesting\" range withing the `full_range`.\n+    ///\n+    /// Typically, `full_range` is the whole syntax node,\n+    /// including doc comments, and `focus_range` is the range of the identifier.\n+    pub fn focus_range(&self) -> Option<TextRange> {\n+        self.focus_range\n+    }\n+    pub fn full_range(&self) -> TextRange {\n+        self.full_range\n+    }\n+    pub fn file_id(&self) -> FileId {\n+        self.file_id\n+    }\n \n     pub fn name(&self) -> &SmolStr {\n         &self.name\n@@ -60,19 +73,6 @@ impl NavigationTarget {\n         self.kind\n     }\n \n-    pub fn file_id(&self) -> FileId {\n-        self.file_id\n-    }\n-\n-    // TODO: inconsistent\n-    pub fn file_range(&self) -> FileRange {\n-        FileRange { file_id: self.file_id, range: self.full_range }\n-    }\n-\n-    pub fn full_range(&self) -> TextRange {\n-        self.full_range\n-    }\n-\n     pub fn docs(&self) -> Option<&str> {\n         self.docs.as_deref()\n     }\n@@ -81,14 +81,6 @@ impl NavigationTarget {\n         self.description.as_deref()\n     }\n \n-    /// A \"most interesting\" range withing the `full_range`.\n-    ///\n-    /// Typically, `full_range` is the whole syntax node,\n-    /// including doc comments, and `focus_range` is the range of the identifier.\n-    pub fn focus_range(&self) -> Option<TextRange> {\n-        self.focus_range\n-    }\n-\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {"}, {"sha": "99a7022a4836648ab0b3683cadd83e7168b42f25", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=af7e300041b1af68e671446fe22d2b9e5d30f83d", "patch": "@@ -76,7 +76,7 @@ fn impls_for_trait(\n mod tests {\n     use ra_db::FileRange;\n \n-    use crate::mock_analysis::{analysis_and_position, MockAnalysis};\n+    use crate::mock_analysis::MockAnalysis;\n \n     fn check(ra_fixture: &str) {\n         let (mock, position) = MockAnalysis::with_files_and_position(ra_fixture);"}, {"sha": "25bcd80af8c16c78092a9a2dc28a073984c33737", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=af7e300041b1af68e671446fe22d2b9e5d30f83d", "patch": "@@ -330,11 +330,12 @@ pub(crate) fn handle_workspace_symbol(\n     fn exec_query(snap: &GlobalStateSnapshot, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n         for nav in snap.analysis.symbol_search(query)? {\n+            let container_name = nav.container_name().map(|v| v.to_string());\n             let info = SymbolInformation {\n                 name: nav.name().to_string(),\n                 kind: to_proto::symbol_kind(nav.kind()),\n-                location: to_proto::location(snap, nav.file_range())?,\n-                container_name: nav.container_name().map(|v| v.to_string()),\n+                location: to_proto::location_from_nav(snap, nav)?,\n+                container_name,\n                 deprecated: None,\n             };\n             res.push(info);\n@@ -1213,8 +1214,8 @@ fn show_impl_command_link(\n             let position = to_proto::position(&line_index, position.offset);\n             let locations: Vec<_> = nav_data\n                 .info\n-                .iter()\n-                .filter_map(|it| to_proto::location(snap, it.file_range()).ok())\n+                .into_iter()\n+                .filter_map(|nav| to_proto::location_from_nav(snap, nav).ok())\n                 .collect();\n             let title = implementation_title(locations.len());\n             let command = show_references_command(title, &uri, position, locations);"}, {"sha": "a0a58f689d5deda4686b677550692ed1094214e3", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7e300041b1af68e671446fe22d2b9e5d30f83d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=af7e300041b1af68e671446fe22d2b9e5d30f83d", "patch": "@@ -446,6 +446,18 @@ pub(crate) fn location(\n     Ok(loc)\n }\n \n+/// Perefer using `location_link`, if the client has the cap.\n+pub(crate) fn location_from_nav(\n+    snap: &GlobalStateSnapshot,\n+    nav: NavigationTarget,\n+) -> Result<lsp_types::Location> {\n+    let url = url(snap, nav.file_id());\n+    let line_index = snap.analysis.file_line_index(nav.file_id())?;\n+    let range = range(&line_index, nav.full_range());\n+    let loc = lsp_types::Location::new(url, range);\n+    Ok(loc)\n+}\n+\n pub(crate) fn location_link(\n     snap: &GlobalStateSnapshot,\n     src: Option<FileRange>,"}]}