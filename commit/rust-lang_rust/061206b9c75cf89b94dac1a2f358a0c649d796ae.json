{"sha": "061206b9c75cf89b94dac1a2f358a0c649d796ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTIwNmI5Yzc1Y2Y4OWI5NGRhYzFhMmYzNThhMGM2NDlkNzk2YWU=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-02-15T05:19:50Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-02-18T00:57:35Z"}, "message": "Remove usage of .map(|&foo| foo)", "tree": {"sha": "338308f061cdddd75b18d6fd003abaa1e58c0a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338308f061cdddd75b18d6fd003abaa1e58c0a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061206b9c75cf89b94dac1a2f358a0c649d796ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061206b9c75cf89b94dac1a2f358a0c649d796ae", "html_url": "https://github.com/rust-lang/rust/commit/061206b9c75cf89b94dac1a2f358a0c649d796ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061206b9c75cf89b94dac1a2f358a0c649d796ae/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9", "html_url": "https://github.com/rust-lang/rust/commit/2f586b9687e5c33d9d3b8eccfc309f65d2a9f4e9"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "d9ee34731ceb679da37775ae084b009a4d69b609", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -540,7 +540,7 @@ pub trait IteratorExt: Iterator + Sized {\n     ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n     /// let sum = a.iter()\n-    ///             .map(|&x| x)\n+    ///             .cloned()\n     ///             .inspect(|&x| println!(\"filtering {}\", x))\n     ///             .filter(|&x| x % 2 == 0)\n     ///             .inspect(|&x| println!(\"{} made it through\", x))\n@@ -579,7 +579,7 @@ pub trait IteratorExt: Iterator + Sized {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4, 5];\n-    /// let b: Vec<_> = a.iter().map(|&x| x).collect();\n+    /// let b: Vec<_> = a.iter().cloned().collect();\n     /// assert_eq!(a, b);\n     /// ```\n     #[inline]\n@@ -955,7 +955,7 @@ pub trait IteratorExt: Iterator + Sized {\n     ///\n     /// ```\n     /// let a = [(1, 2), (3, 4)];\n-    /// let (left, right): (Vec<_>, Vec<_>) = a.iter().map(|&x| x).unzip();\n+    /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n     /// assert_eq!([1, 3], left);\n     /// assert_eq!([2, 4], right);\n     /// ```\n@@ -1160,7 +1160,7 @@ pub trait AdditiveIterator<A> {\n     /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1i32, 2, 3, 4, 5];\n-    /// let mut it = a.iter().map(|&x| x);\n+    /// let mut it = a.iter().cloned();\n     /// assert!(it.sum() == 15);\n     /// ```\n     fn sum(self) -> A;"}, {"sha": "4eee0454f5d255cf9f2f8b0ed11d3ce58bb82e8f", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -91,7 +91,7 @@ fn test_iterator_chain() {\n     assert_eq!(i, expected.len());\n \n     let ys = count(30, 10).take(4);\n-    let mut it = xs.iter().map(|&x| x).chain(ys);\n+    let mut it = xs.iter().cloned().chain(ys);\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, expected[i]);\n@@ -119,7 +119,7 @@ fn test_iterator_enumerate() {\n #[test]\n fn test_iterator_peekable() {\n     let xs = vec![0, 1, 2, 3, 4, 5];\n-    let mut it = xs.iter().map(|&x|x).peekable();\n+    let mut it = xs.iter().cloned().peekable();\n \n     assert_eq!(it.len(), 6);\n     assert_eq!(it.peek().unwrap(), &0);\n@@ -259,7 +259,7 @@ fn test_inspect() {\n     let mut n = 0;\n \n     let ys = xs.iter()\n-               .map(|&x| x)\n+               .cloned()\n                .inspect(|_| n += 1)\n                .collect::<Vec<uint>>();\n \n@@ -329,33 +329,33 @@ fn test_iterator_len() {\n #[test]\n fn test_iterator_sum() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().map(|&x| x).sum(), 6);\n-    assert_eq!(v.iter().map(|&x| x).sum(), 55);\n-    assert_eq!(v[..0].iter().map(|&x| x).sum(), 0);\n+    assert_eq!(v[..4].iter().cloned().sum(), 6);\n+    assert_eq!(v.iter().cloned().sum(), 55);\n+    assert_eq!(v[..0].iter().cloned().sum(), 0);\n }\n \n #[test]\n fn test_iterator_product() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().map(|&x| x).product(), 0);\n-    assert_eq!(v[1..5].iter().map(|&x| x).product(), 24);\n-    assert_eq!(v[..0].iter().map(|&x| x).product(), 1);\n+    assert_eq!(v[..4].iter().cloned().product(), 0);\n+    assert_eq!(v[1..5].iter().cloned().product(), 24);\n+    assert_eq!(v[..0].iter().cloned().product(), 1);\n }\n \n #[test]\n fn test_iterator_max() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().map(|&x| x).max(), Some(3));\n-    assert_eq!(v.iter().map(|&x| x).max(), Some(10));\n-    assert_eq!(v[..0].iter().map(|&x| x).max(), None);\n+    assert_eq!(v[..4].iter().cloned().max(), Some(3));\n+    assert_eq!(v.iter().cloned().max(), Some(10));\n+    assert_eq!(v[..0].iter().cloned().max(), None);\n }\n \n #[test]\n fn test_iterator_min() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-    assert_eq!(v[..4].iter().map(|&x| x).min(), Some(0));\n-    assert_eq!(v.iter().map(|&x| x).min(), Some(0));\n-    assert_eq!(v[..0].iter().map(|&x| x).min(), None);\n+    assert_eq!(v[..4].iter().cloned().min(), Some(0));\n+    assert_eq!(v.iter().cloned().min(), Some(0));\n+    assert_eq!(v[..0].iter().cloned().min(), None);\n }\n \n #[test]\n@@ -373,7 +373,7 @@ fn test_iterator_size_hint() {\n     assert_eq!(c.clone().take_while(|_| false).size_hint(), (0, None));\n     assert_eq!(c.clone().skip_while(|_| false).size_hint(), (0, None));\n     assert_eq!(c.clone().enumerate().size_hint(), (uint::MAX, None));\n-    assert_eq!(c.clone().chain(vi.clone().map(|&i| i)).size_hint(), (uint::MAX, None));\n+    assert_eq!(c.clone().chain(vi.clone().cloned()).size_hint(), (uint::MAX, None));\n     assert_eq!(c.clone().zip(vi.clone()).size_hint(), (10, Some(10)));\n     assert_eq!(c.clone().scan(0, |_,_| Some(0)).size_hint(), (0, None));\n     assert_eq!(c.clone().filter(|_| false).size_hint(), (0, None));\n@@ -398,7 +398,7 @@ fn test_iterator_size_hint() {\n #[test]\n fn test_collect() {\n     let a = vec![1, 2, 3, 4, 5];\n-    let b: Vec<int> = a.iter().map(|&x| x).collect();\n+    let b: Vec<int> = a.iter().cloned().collect();\n     assert!(a == b);\n }\n \n@@ -471,7 +471,7 @@ fn test_rev() {\n     let mut it = xs.iter();\n     it.next();\n     it.next();\n-    assert!(it.rev().map(|&x| x).collect::<Vec<int>>() ==\n+    assert!(it.rev().cloned().collect::<Vec<int>>() ==\n             vec![16, 14, 12, 10, 8, 6]);\n }\n \n@@ -508,7 +508,7 @@ fn test_double_ended_map() {\n #[test]\n fn test_double_ended_enumerate() {\n     let xs = [1, 2, 3, 4, 5, 6];\n-    let mut it = xs.iter().map(|&x| x).enumerate();\n+    let mut it = xs.iter().cloned().enumerate();\n     assert_eq!(it.next(), Some((0, 1)));\n     assert_eq!(it.next(), Some((1, 2)));\n     assert_eq!(it.next_back(), Some((5, 6)));\n@@ -522,8 +522,8 @@ fn test_double_ended_enumerate() {\n fn test_double_ended_zip() {\n     let xs = [1, 2, 3, 4, 5, 6];\n     let ys = [1, 2, 3, 7];\n-    let a = xs.iter().map(|&x| x);\n-    let b = ys.iter().map(|&x| x);\n+    let a = xs.iter().cloned();\n+    let b = ys.iter().cloned();\n     let mut it = a.zip(b);\n     assert_eq!(it.next(), Some((1, 1)));\n     assert_eq!(it.next(), Some((2, 2)));"}, {"sha": "701749ff3443f6e0280ad1308001854ea645cfe2", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -215,7 +215,7 @@ impl<'a> SeedableRng<&'a [u32]> for IsaacRng {\n     fn reseed(&mut self, seed: &'a [u32]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u32));\n+        let seed_iter = seed.iter().cloned().chain(repeat(0u32));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;\n@@ -458,7 +458,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n     fn reseed(&mut self, seed: &'a [u64]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u64));\n+        let seed_iter = seed.iter().cloned().chain(repeat(0u64));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;"}, {"sha": "307423734b3bf7a932d97cb3f378636d58974ba4", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -89,7 +89,7 @@ struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> {\n }\n \n fn to_cfgidx_or_die(id: ast::NodeId, index: &NodeMap<CFGIndex>) -> CFGIndex {\n-    let opt_cfgindex = index.get(&id).map(|&i|i);\n+    let opt_cfgindex = index.get(&id).cloned();\n     opt_cfgindex.unwrap_or_else(|| {\n         panic!(\"nodeid_to_index does not have entry for NodeId {}\", id);\n     })\n@@ -400,7 +400,7 @@ impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> {\n \n             let mut changed = false;\n             for &node_id in &edge.data.exiting_scopes {\n-                let opt_cfg_idx = self.nodeid_to_index.get(&node_id).map(|&i|i);\n+                let opt_cfg_idx = self.nodeid_to_index.get(&node_id).cloned();\n                 match opt_cfg_idx {\n                     Some(cfg_idx) => {\n                         let (start, end) = self.compute_id_range(cfg_idx);"}, {"sha": "dc4d0623e9ee9e88ddb37963e4806fc83ca0f9a3", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> Substs<'tcx> {\n     }\n \n     pub fn self_ty(&self) -> Option<Ty<'tcx>> {\n-        self.types.get_self().map(|&t| t)\n+        self.types.get_self().cloned()\n     }\n \n     pub fn with_self_ty(&self, self_ty: Ty<'tcx>) -> Substs<'tcx> {"}, {"sha": "7442dd47f7bb7fab3e0794fc23b449806d3c44c8", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -57,7 +57,7 @@ pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,\n {\n     // Because we query yes/no results frequently, we keep a cache:\n     let cached_result =\n-        tcx.object_safety_cache.borrow().get(&trait_ref.def_id()).map(|&r| r);\n+        tcx.object_safety_cache.borrow().get(&trait_ref.def_id()).cloned();\n \n     let result =\n         cached_result.unwrap_or_else(|| {"}, {"sha": "a488627c7f36286d8c390e0f6afe2d8ee9e90137", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -1581,7 +1581,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::substd_enum_variants(self.tcx(), def_id, substs)\n                     .iter()\n                     .flat_map(|variant| variant.args.iter())\n-                    .map(|&ty| ty)\n+                    .cloned()\n                     .collect();\n                 nominal(self, bound, def_id, types)\n             }"}, {"sha": "ce5f9e213f74144aff6a0b1157524c964f0cdcee", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -4144,7 +4144,7 @@ pub fn positional_element_ty<'tcx>(cx: &ctxt<'tcx>,\n                                    variant: Option<ast::DefId>) -> Option<Ty<'tcx>> {\n \n     match (&ty.sty, variant) {\n-        (&ty_tup(ref v), None) => v.get(i).map(|&t| t),\n+        (&ty_tup(ref v), None) => v.get(i).cloned(),\n \n \n         (&ty_struct(def_id, substs), None) => lookup_struct_fields(cx, def_id)"}, {"sha": "ed75330ffcc70b46402258308e90f2288ec7e50a", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -208,7 +208,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n     let function_type = typer.closure_type(closure_id, param_substs);\n \n     let freevars: Vec<ty::Freevar> =\n-        ty::with_freevars(tcx, id, |fv| fv.iter().map(|&fv| fv).collect());\n+        ty::with_freevars(tcx, id, |fv| fv.iter().cloned().collect());\n \n     let sig = ty::erase_late_bound_regions(tcx, &function_type.sig);\n "}, {"sha": "f6764de97b78e4f5c8e520fe229337739d473b12", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -640,7 +640,7 @@ fn check_fn<'a, 'tcx>(ccx: &'a CrateCtxt<'a, 'tcx>,\n     // Remember return type so that regionck can access it later.\n     let mut fn_sig_tys: Vec<Ty> =\n         arg_tys.iter()\n-        .map(|&ty| ty)\n+        .cloned()\n         .collect();\n \n     if let ty::FnConverging(ret_ty) = ret_ty {"}, {"sha": "d5125f03a716996db4aedfa8c8183e99c0b3e0e0", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -1172,7 +1172,7 @@ mod tests {\n                     let exp: &[&[u8]] = &[$($exp),*];\n                     assert_eq!(comps, exp);\n                     let comps = path.components().rev().collect::<Vec<&[u8]>>();\n-                    let exp = exp.iter().rev().map(|&x|x).collect::<Vec<&[u8]>>();\n+                    let exp = exp.iter().rev().cloned().collect::<Vec<&[u8]>>();\n                     assert_eq!(comps, exp)\n                 }\n             )\n@@ -1204,7 +1204,7 @@ mod tests {\n                     let exp: &[Option<&str>] = &$exp;\n                     assert_eq!(comps, exp);\n                     let comps = path.str_components().rev().collect::<Vec<Option<&str>>>();\n-                    let exp = exp.iter().rev().map(|&x|x).collect::<Vec<Option<&str>>>();\n+                    let exp = exp.iter().rev().cloned().collect::<Vec<Option<&str>>>();\n                     assert_eq!(comps, exp);\n                 }\n             )"}, {"sha": "e485dae3503c863e088c7dc5ab38703ccf581798", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -2226,7 +2226,7 @@ mod tests {\n                     assert_eq!(comps, exp);\n                     let comps = path.str_components().rev().map(|x|x.unwrap())\n                                 .collect::<Vec<&str>>();\n-                    let exp = exp.iter().rev().map(|&x|x).collect::<Vec<&str>>();\n+                    let exp = exp.iter().rev().cloned().collect::<Vec<&str>>();\n                     assert_eq!(comps, exp);\n                 }\n             );\n@@ -2282,7 +2282,7 @@ mod tests {\n                     let exp: &[&[u8]] = &$exp;\n                     assert_eq!(comps, exp);\n                     let comps = path.components().rev().collect::<Vec<&[u8]>>();\n-                    let exp = exp.iter().rev().map(|&x|x).collect::<Vec<&[u8]>>();\n+                    let exp = exp.iter().rev().cloned().collect::<Vec<&[u8]>>();\n                     assert_eq!(comps, exp);\n                 }\n             )"}, {"sha": "5b888c7612d195e214d59f60d9b0467b3593f124", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -547,7 +547,7 @@ mod test {\n     #[test]\n     fn test_choose() {\n         let mut r = thread_rng();\n-        assert_eq!(r.choose(&[1, 1, 1]).map(|&x|x), Some(1));\n+        assert_eq!(r.choose(&[1, 1, 1]).cloned(), Some(1));\n \n         let v: &[int] = &[];\n         assert_eq!(r.choose(v), None);"}, {"sha": "a6cfd1a5a9ac3c1e612b02995457433ee344987d", "filename": "src/libsyntax/diagnostics/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fregistry.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -17,7 +17,7 @@ pub struct Registry {\n \n impl Registry {\n     pub fn new(descriptions: &[(&'static str, &'static str)]) -> Registry {\n-        Registry { descriptions: descriptions.iter().map(|&tuple| tuple).collect() }\n+        Registry { descriptions: descriptions.iter().cloned().collect() }\n     }\n \n     pub fn find_description(&self, code: &str) -> Option<&'static str> {"}, {"sha": "f6ec4816b63fc5ac442c8c5b3ba51fa41f57b825", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -1705,7 +1705,7 @@ impl<'a> Parser<'a> {\n                         (true, LitBinary(parse::binary_lit(i.as_str()))),\n                     token::BinaryRaw(i, _) =>\n                         (true,\n-                         LitBinary(Rc::new(i.as_str().as_bytes().iter().map(|&x| x).collect()))),\n+                         LitBinary(Rc::new(i.as_str().as_bytes().iter().cloned().collect()))),\n                 };\n \n                 if suffix_illegal {"}, {"sha": "0b577f8de74c2a9b2e8178584173c29e8d134b7a", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -608,7 +608,7 @@ mod test {\n             Result<Vec<u8>, String>\n         {\n             let mut u8v: Vec<_> = fmt.bytes().collect();\n-            u8v.extend(cap.as_bytes().iter().map(|&b| b));\n+            u8v.extend(cap.bytes());\n             expand(&u8v, params, vars)\n         }\n "}, {"sha": "4f69600be6c00a25973b6e77f8401dbe9d69b112", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061206b9c75cf89b94dac1a2f358a0c649d796ae/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=061206b9c75cf89b94dac1a2f358a0c649d796ae", "patch": "@@ -202,7 +202,7 @@ fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n     for i in 0..masks.len() {\n         for j in 0..(*masks)[i].len() {\n             masks[i][j] =\n-                (*masks)[i][j].iter().map(|&m| m)\n+                (*masks)[i][j].iter().cloned()\n                 .filter(|&m| !is_board_unfeasible(m, masks))\n                 .collect();\n         }"}]}