{"sha": "80d27414016903fa591548cff22939d3c43cdd8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZDI3NDE0MDE2OTAzZmE1OTE1NDhjZmYyMjkzOWQzYzQzY2RkOGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-20T15:49:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-10-20T15:53:04Z"}, "message": "Add a (hint) diagnostic for unconfigured items", "tree": {"sha": "7e1af2330d87fcefcfcea4e8babfe4130c1e3786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1af2330d87fcefcfcea4e8babfe4130c1e3786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80d27414016903fa591548cff22939d3c43cdd8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80d27414016903fa591548cff22939d3c43cdd8d", "html_url": "https://github.com/rust-lang/rust/commit/80d27414016903fa591548cff22939d3c43cdd8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80d27414016903fa591548cff22939d3c43cdd8d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54e481646edb151075d12ca6903091abe7cfc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a54e481646edb151075d12ca6903091abe7cfc4e", "html_url": "https://github.com/rust-lang/rust/commit/a54e481646edb151075d12ca6903091abe7cfc4e"}], "stats": {"total": 89, "additions": 86, "deletions": 3}, "files": [{"sha": "d476ca3b940c2e92359fe797ccfddb1a19afc837", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -1,5 +1,5 @@\n //! FIXME: write short doc here\n-pub use hir_def::diagnostics::UnresolvedModule;\n+pub use hir_def::diagnostics::{UnconfiguredCode, UnresolvedModule};\n pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n pub use hir_ty::diagnostics::{\n     IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,"}, {"sha": "53cf1aca1887ff03ca4d2e89b04d8bcea15497ce", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -86,3 +86,28 @@ impl Diagnostic for UnresolvedImport {\n         true\n     }\n }\n+\n+// Diagnostic: unconfigured-code\n+//\n+// This diagnostic is shown for code with inactive `#[cfg]` attributes.\n+#[derive(Debug)]\n+pub struct UnconfiguredCode {\n+    pub file: HirFileId,\n+    pub node: SyntaxNodePtr,\n+}\n+\n+impl Diagnostic for UnconfiguredCode {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unconfigured-code\")\n+    }\n+    fn message(&self) -> String {\n+        // FIXME: say *why* it is configured out\n+        \"configured out\".to_string()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone())\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "7eb388baed53e3881f4dd576056f923ccd7bd2e5", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -672,6 +672,24 @@ impl ModItem {\n     pub fn downcast<N: ItemTreeNode>(self) -> Option<FileItemTreeId<N>> {\n         N::id_from_mod_item(self)\n     }\n+\n+    pub fn ast_id(&self, tree: &ItemTree) -> FileAstId<ast::Item> {\n+        match self {\n+            ModItem::Import(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::ExternCrate(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Function(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Struct(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Union(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Enum(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Const(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Static(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Trait(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Impl(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::TypeAlias(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::Mod(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::MacroCall(it) => tree[it.index].ast_id().upcast(),\n+        }\n+    }\n }\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq)]"}, {"sha": "8bb3a659fef7f3b290f6247284805144f44260a1", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -286,7 +286,7 @@ mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use hir_expand::hygiene::Hygiene;\n     use hir_expand::InFile;\n-    use syntax::{ast, AstPtr};\n+    use syntax::{ast, AstPtr, SyntaxNodePtr};\n \n     use crate::path::ModPath;\n     use crate::{db::DefDatabase, diagnostics::*, nameres::LocalModuleId, AstId};\n@@ -298,6 +298,8 @@ mod diagnostics {\n         UnresolvedExternCrate { ast: AstId<ast::ExternCrate> },\n \n         UnresolvedImport { ast: AstId<ast::Use>, index: usize },\n+\n+        UnconfiguredCode { ast: InFile<SyntaxNodePtr> },\n     }\n \n     #[derive(Debug, PartialEq, Eq)]\n@@ -336,6 +338,13 @@ mod diagnostics {\n             Self { in_module: container, kind: DiagnosticKind::UnresolvedImport { ast, index } }\n         }\n \n+        pub(super) fn unconfigured_code(\n+            container: LocalModuleId,\n+            ast: InFile<SyntaxNodePtr>,\n+        ) -> Self {\n+            Self { in_module: container, kind: DiagnosticKind::UnconfiguredCode { ast } }\n+        }\n+\n         pub(super) fn add_to(\n             &self,\n             db: &dyn DefDatabase,\n@@ -385,6 +394,10 @@ mod diagnostics {\n                         sink.push(UnresolvedImport { file: ast.file_id, node: AstPtr::new(&tree) });\n                     }\n                 }\n+\n+                DiagnosticKind::UnconfiguredCode { ast } => {\n+                    sink.push(UnconfiguredCode { file: ast.file_id, node: ast.value.clone() });\n+                }\n             }\n         }\n     }"}, {"sha": "bff8edb62dc8567e8e2c5061c5cb71c5978bdbaf", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -913,6 +913,7 @@ impl ModCollector<'_, '_> {\n         for &item in items {\n             let attrs = self.item_tree.attrs(item.into());\n             if !self.is_cfg_enabled(attrs) {\n+                self.emit_unconfigured_diagnostic(item);\n                 continue;\n             }\n             let module =\n@@ -1323,6 +1324,18 @@ impl ModCollector<'_, '_> {\n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n         attrs.is_cfg_enabled(self.def_collector.cfg_options)\n     }\n+\n+    fn emit_unconfigured_diagnostic(&mut self, item: ModItem) {\n+        let ast_id = item.ast_id(self.item_tree);\n+        let id_map = self.def_collector.db.ast_id_map(self.file_id);\n+        let syntax_ptr = id_map.get(ast_id).syntax_node_ptr();\n+\n+        let ast_node = InFile::new(self.file_id, syntax_ptr);\n+        self.def_collector\n+            .def_map\n+            .diagnostics\n+            .push(DefDiagnostic::unconfigured_code(self.module_id, ast_node));\n+    }\n }\n \n fn is_macro_rules(path: &ModPath) -> bool {"}, {"sha": "394365bc8ccd48f6873d6d6825b414e4049b3fc4", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80d27414016903fa591548cff22939d3c43cdd8d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=80d27414016903fa591548cff22939d3c43cdd8d", "patch": "@@ -10,7 +10,10 @@ mod field_shorthand;\n use std::cell::RefCell;\n \n use base_db::SourceDatabase;\n-use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n+use hir::{\n+    diagnostics::{Diagnostic as _, DiagnosticSinkBuilder},\n+    Semantics,\n+};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n@@ -46,6 +49,10 @@ impl Diagnostic {\n     fn with_fix(self, fix: Option<Fix>) -> Self {\n         Self { fix, ..self }\n     }\n+\n+    fn with_unused(self, unused: bool) -> Self {\n+        Self { unused, ..self }\n+    }\n }\n \n #[derive(Debug)]\n@@ -115,6 +122,13 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n             res.borrow_mut().push(warning_with_fix(d, &sema));\n         })\n+        .on::<hir::diagnostics::UnconfiguredCode, _>(|d| {\n+            // Override severity and mark as unused.\n+            res.borrow_mut().push(\n+                Diagnostic::hint(sema.diagnostics_display_range(d).range, d.message())\n+                    .with_unused(true),\n+            );\n+        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));"}]}