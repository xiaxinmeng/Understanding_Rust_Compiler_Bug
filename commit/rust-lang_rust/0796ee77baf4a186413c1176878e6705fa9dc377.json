{"sha": "0796ee77baf4a186413c1176878e6705fa9dc377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTZlZTc3YmFmNGExODY0MTNjMTE3Njg3OGU2NzA1ZmE5ZGMzNzc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-23T12:31:52Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-23T12:31:52Z"}, "message": "add `indexed_set` mod for typed wrappers around bitarrays representing sets.\n\nIt provides an `Idx` trait for usize wrappers used to represent the\nelements of such sets.", "tree": {"sha": "c850b945e45b6dde9d88a7280188ab50e06150ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c850b945e45b6dde9d88a7280188ab50e06150ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0796ee77baf4a186413c1176878e6705fa9dc377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0796ee77baf4a186413c1176878e6705fa9dc377", "html_url": "https://github.com/rust-lang/rust/commit/0796ee77baf4a186413c1176878e6705fa9dc377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0796ee77baf4a186413c1176878e6705fa9dc377/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d", "html_url": "https://github.com/rust-lang/rust/commit/f18bafdbe1eaa2b0c918debbabfaafeb3614e69d"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "c743e58aa9960c29b1ecfc845df906f574d476bd", "filename": "src/librustc_borrowck/indexed_set.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/0796ee77baf4a186413c1176878e6705fa9dc377/src%2Flibrustc_borrowck%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0796ee77baf4a186413c1176878e6705fa9dc377/src%2Flibrustc_borrowck%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Findexed_set.rs?ref=0796ee77baf4a186413c1176878e6705fa9dc377", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::marker::PhantomData;\n+use std::mem;\n+use bitslice::{BitSlice, Word};\n+\n+pub trait Indexed {\n+    type Idx: Idx;\n+}\n+\n+pub trait Idx {\n+    fn idx(&self) -> usize;\n+}\n+\n+pub struct OwnIdxSet<T: Idx> {\n+    _pd: PhantomData<fn(&[T], usize) -> &T>,\n+    bits: Vec<Word>,\n+}\n+\n+// pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n+// around `&mut IdxSet<T>` or `&IdxSet<T>`.\n+//\n+// Mmapping a `&OwnIdxSet<T>` to `&IdxSet<T>` (at least today)\n+// requires a transmute relying on representation guarantees that may\n+// not hold in the future.\n+\n+pub struct IdxSet<T: Idx> {\n+    _pd: PhantomData<fn(&[T], usize) -> &T>,\n+    bits: [Word],\n+}\n+\n+impl<T: Idx> fmt::Debug for OwnIdxSet<T> {\n+    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result { self.bits.fmt(w) }\n+}\n+\n+impl<T: Idx> fmt::Debug for IdxSet<T> {\n+    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result { self.bits.fmt(w) }\n+}\n+\n+impl<T: Idx> OwnIdxSet<T> {\n+    fn new(init: Word, universe_size: usize) -> Self {\n+        let bits_per_word = mem::size_of::<Word>();\n+        let num_words = (universe_size + (bits_per_word - 1)) / bits_per_word;\n+        OwnIdxSet {\n+            _pd: Default::default(),\n+            bits: vec![init; num_words],\n+        }\n+    }\n+\n+    /// Creates set holding every element whose index falls in range 0..universe_size.\n+    pub fn new_filled(universe_size: usize) -> Self {\n+        Self::new(!0, universe_size)\n+    }\n+\n+    /// Creates set holding no elements.\n+    pub fn new_empty(universe_size: usize) -> Self {\n+        Self::new(0, universe_size)\n+    }\n+\n+    /// Removes `elem` from the set `self`; returns true iff this changed `self`.\n+    pub fn clear(&mut self, elem: &T) -> bool {\n+        self.bits.clear_bit(elem.idx())\n+    }\n+\n+    /// Adds `elem` to the set `self`; returns true iff this changed `self`.\n+    pub fn add(&mut self, elem: &T) -> bool {\n+        self.bits.set_bit(elem.idx())\n+    }\n+\n+    /// Returns true iff set `self` contains `elem`.\n+    pub fn contains(&self, elem: &T) -> bool {\n+        self.bits.get_bit(elem.idx())\n+    }\n+\n+    pub fn bits(&self) -> &[Word] {\n+        &self.bits[..]\n+    }\n+}"}, {"sha": "9d7e05ed9fa864d3b4ec48bee6a2a43a6b3ebcd3", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0796ee77baf4a186413c1176878e6705fa9dc377/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0796ee77baf4a186413c1176878e6705fa9dc377/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=0796ee77baf4a186413c1176878e6705fa9dc377", "patch": "@@ -47,6 +47,7 @@ pub mod diagnostics;\n \n mod borrowck;\n mod bitslice;\n+mod indexed_set;\n \n pub mod graphviz;\n "}]}