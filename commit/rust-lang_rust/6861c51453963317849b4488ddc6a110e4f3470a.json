{"sha": "6861c51453963317849b4488ddc6a110e4f3470a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjFjNTE0NTM5NjMzMTc4NDliNDQ4OGRkYzZhMTEwZTRmMzQ3MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-19T22:15:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-19T22:15:13Z"}, "message": "Auto merge of #29901 - tbu-:pr_env_ignore_malformed_windows, r=alexcrichton\n\nSee also #29297.", "tree": {"sha": "00156f3ae5e43cc0d20f149e48dcb18f2f2b7ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00156f3ae5e43cc0d20f149e48dcb18f2f2b7ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6861c51453963317849b4488ddc6a110e4f3470a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6861c51453963317849b4488ddc6a110e4f3470a", "html_url": "https://github.com/rust-lang/rust/commit/6861c51453963317849b4488ddc6a110e4f3470a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6861c51453963317849b4488ddc6a110e4f3470a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19020210321b08f136349968a8d868f789445090", "url": "https://api.github.com/repos/rust-lang/rust/commits/19020210321b08f136349968a8d868f789445090", "html_url": "https://github.com/rust-lang/rust/commit/19020210321b08f136349968a8d868f789445090"}, {"sha": "9b4f16b370c2c4b44de99960a2bf7300c93e3f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4f16b370c2c4b44de99960a2bf7300c93e3f9e", "html_url": "https://github.com/rust-lang/rust/commit/9b4f16b370c2c4b44de99960a2bf7300c93e3f9e"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "a01a80c4c38b9e5bc32422f11e32402247c0f5d2", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6861c51453963317849b4488ddc6a110e4f3470a/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6861c51453963317849b4488ddc6a110e4f3470a/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=6861c51453963317849b4488ddc6a110e4f3470a", "patch": "@@ -78,22 +78,31 @@ impl Iterator for Env {\n     type Item = (OsString, OsString);\n \n     fn next(&mut self) -> Option<(OsString, OsString)> {\n-        unsafe {\n-            if *self.cur == 0 { return None }\n-            let p = &*self.cur;\n-            let mut len = 0;\n-            while *(p as *const u16).offset(len) != 0 {\n-                len += 1;\n+        loop {\n+            unsafe {\n+                if *self.cur == 0 { return None }\n+                let p = &*self.cur as *const u16;\n+                let mut len = 0;\n+                while *p.offset(len) != 0 {\n+                    len += 1;\n+                }\n+                let s = slice::from_raw_parts(p, len as usize);\n+                self.cur = self.cur.offset(len + 1);\n+\n+                // Windows allows environment variables to start with an equals\n+                // symbol (in any other position, this is the separator between\n+                // variable name and value). Since`s` has at least length 1 at\n+                // this point (because the empty string terminates the array of\n+                // environment variables), we can safely slice.\n+                let pos = match s[1..].iter().position(|&u| u == b'=' as u16).map(|p| p + 1) {\n+                    Some(p) => p,\n+                    None => continue,\n+                };\n+                return Some((\n+                    OsStringExt::from_wide(&s[..pos]),\n+                    OsStringExt::from_wide(&s[pos+1..]),\n+                ))\n             }\n-            let p = p as *const u16;\n-            let s = slice::from_raw_parts(p, len as usize);\n-            self.cur = self.cur.offset(len + 1);\n-\n-            let (k, v) = match s.iter().position(|&b| b == '=' as u16) {\n-                Some(n) => (&s[..n], &s[n+1..]),\n-                None => (s, &[][..]),\n-            };\n-            Some((OsStringExt::from_wide(k), OsStringExt::from_wide(v)))\n         }\n     }\n }"}, {"sha": "933d9a728dbe7e9881c777cb89b4122f13abd757", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6861c51453963317849b4488ddc6a110e4f3470a/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6861c51453963317849b4488ddc6a110e4f3470a/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=6861c51453963317849b4488ddc6a110e4f3470a", "patch": "@@ -14,10 +14,7 @@ use std::env::*;\n fn main() {\n     for (k, v) in vars_os() {\n         let v2 = var_os(&k);\n-        // MingW seems to set some funky environment variables like\n-        // \"=C:=C:\\MinGW\\msys\\1.0\\bin\" and \"!::=::\\\" that are returned\n-        // from vars() but not visible from var().\n-        assert!(v2.is_none() || v2.as_ref().map(|s| &**s) == Some(&*v),\n+        assert!(v2.as_ref().map(|s| &**s) == Some(&*v),\n                 \"bad vars->var transition: {:?} {:?} {:?}\", k, v, v2);\n     }\n }"}]}