{"sha": "eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMGUyZjQ1ZWM1ZWI4NGFjM2IzMGU3Y2U5MmZiNzA0MTVkMjMyZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-18T10:13:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-18T10:13:28Z"}, "message": "auto merge of #6591 : bjz/rust/tuple-elements, r=thestinger\n\nThis commit implements element getters for tuples with an arity of 2 to 12. The getters return references to the elements, so no copying occurs. The traits are re-exported in `core::prelude` so you can use them from regular Rust code.\r\n\r\nHere is an example of one of the getters in use:\r\n\r\n~~~rust\r\nassert_eq!((2, \"hi\", 75.0).n1(), &\"hi\");\r\n~~~", "tree": {"sha": "ac322341677763241ce17a22bf680d1cb7cebf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac322341677763241ce17a22bf680d1cb7cebf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "html_url": "https://github.com/rust-lang/rust/commit/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91daaa8a9390ccf760b3ba7f965b2863103d993", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91daaa8a9390ccf760b3ba7f965b2863103d993", "html_url": "https://github.com/rust-lang/rust/commit/e91daaa8a9390ccf760b3ba7f965b2863103d993"}, {"sha": "b6038b76339deefc340fa709009a7bea069270e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6038b76339deefc340fa709009a7bea069270e4", "html_url": "https://github.com/rust-lang/rust/commit/b6038b76339deefc340fa709009a7bea069270e4"}], "stats": {"total": 174, "additions": 167, "deletions": 7}, "files": [{"sha": "77371b6336848b356cfaed724309e651e293be6b", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "patch": "@@ -52,6 +52,8 @@ pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n+pub use tuple::{Tuple2, Tuple3, Tuple4, Tuple5, Tuple6, Tuple7, Tuple8, Tuple9};\n+pub use tuple::{Tuple10, Tuple11, Tuple12};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};"}, {"sha": "c872839146ab08895cf73080c19ac4d28903cf46", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 165, "deletions": 7, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=eb0e2f45ec5eb84ac3b30e7ce92fb70415d232d3", "patch": "@@ -16,6 +16,8 @@ use vec;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n \n+pub use self::getters::*;\n+\n pub trait CopyableTuple<T, U> {\n     fn first(&self) -> T;\n     fn second(&self) -> U;\n@@ -246,25 +248,181 @@ impl<A:Ord,B:Ord,C:Ord> Ord for (A, B, C) {\n     fn gt(&self, other: &(A, B, C)) -> bool { (*other).lt(&(*self))  }\n }\n \n+// Tuple element getters\n+\n+macro_rules! tuple_getters(\n+    ($(\n+        $name:ident {\n+            $(fn $method:ident -> $T:ident { $accessor:pat => $t:expr })+\n+        }\n+    )+) => (\n+        pub mod getters {\n+            $(pub trait $name<$($T),+> {\n+                    $(fn $method<'a>(&'a self) -> &'a $T;)+\n+            })+\n+\n+            $(impl<$($T),+> $name<$($T),+> for ($($T),+) {\n+                $(\n+                    #[inline(always)]\n+                    fn $method<'a>(&'a self) -> &'a $T {\n+                        match *self {\n+                            $accessor => $t\n+                        }\n+                    }\n+                )+\n+            })+\n+        }\n+    )\n+)\n+\n+tuple_getters!(\n+    Tuple2 {\n+        fn n0 -> A { (ref a,_) => a }\n+        fn n1 -> B { (_,ref b) => b }\n+    }\n+\n+    Tuple3 {\n+        fn n0 -> A { (ref a,_,_) => a }\n+        fn n1 -> B { (_,ref b,_) => b }\n+        fn n2 -> C { (_,_,ref c) => c }\n+    }\n+\n+    Tuple4 {\n+        fn n0 -> A { (ref a,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_) => c }\n+        fn n3 -> D { (_,_,_,ref d) => d }\n+    }\n+\n+    Tuple5 {\n+        fn n0 -> A { (ref a,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e) => e }\n+    }\n+\n+    Tuple6 {\n+        fn n0 -> A { (ref a,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f) => f }\n+    }\n+\n+    Tuple7 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g) => g }\n+    }\n+\n+    Tuple8 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g,_) => g }\n+        fn n7 -> H { (_,_,_,_,_,_,_,ref h) => h }\n+    }\n+\n+    Tuple9 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_) => g }\n+        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_) => h }\n+        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i) => i }\n+    }\n+\n+    Tuple10 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_) => g }\n+        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_) => h }\n+        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_) => i }\n+        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j) => j }\n+    }\n+\n+    Tuple11 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_,_) => g }\n+        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_,_) => h }\n+        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_,_) => i }\n+        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n+        fn n10 -> K { (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n+    }\n+\n+    Tuple12 {\n+        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n+        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n+        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }\n+        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_,_,_) => d }\n+        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_,_,_) => e }\n+        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_,_,_) => f }\n+        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_,_,_) => g }\n+        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_,_,_) => h }\n+        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_,_,_) => i }\n+        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j,_,_) => j }\n+        fn n10 -> K { (_,_,_,_,_,_,_,_,_,_,ref k,_) => k }\n+        fn n11 -> L { (_,_,_,_,_,_,_,_,_,_,_,ref l) => l }\n+    }\n+)\n+\n #[test]\n fn test_tuple_ref() {\n     let x = (~\"foo\", ~\"bar\");\n-    assert!(x.first_ref() == &~\"foo\");\n-    assert!(x.second_ref() == &~\"bar\");\n+    assert_eq!(x.first_ref(), &~\"foo\");\n+    assert_eq!(x.second_ref(), &~\"bar\");\n }\n \n #[test]\n #[allow(non_implicitly_copyable_typarams)]\n fn test_tuple() {\n-    assert!((948, 4039.48).first() == 948);\n-    assert!((34.5, ~\"foo\").second() == ~\"foo\");\n-    assert!(('a', 2).swap() == (2, 'a'));\n+    assert_eq!((948, 4039.48).first(), 948);\n+    assert_eq!((34.5, ~\"foo\").second(), ~\"foo\");\n+    assert_eq!(('a', 2).swap(), (2, 'a'));\n }\n \n #[test]\n fn test_clone() {\n     let a = (1, ~\"2\");\n     let b = a.clone();\n-    assert!(a.first() == b.first());\n-    assert!(a.second() == b.second());\n+    assert_eq!(a.first(), b.first());\n+    assert_eq!(a.second(), b.second());\n+}\n+\n+#[test]\n+fn test_n_tuple() {\n+    let t = (0u8, 1u16, 2u32, 3u64, 4u, 5i8, 6i16, 7i32, 8i64, 9i, 10f32, 11f64);\n+    assert_eq!(*t.n0(), 0u8);\n+    assert_eq!(*t.n1(), 1u16);\n+    assert_eq!(*t.n2(), 2u32);\n+    assert_eq!(*t.n3(), 3u64);\n+    assert_eq!(*t.n4(), 4u);\n+    assert_eq!(*t.n5(), 5i8);\n+    assert_eq!(*t.n6(), 6i16);\n+    assert_eq!(*t.n7(), 7i32);\n+    assert_eq!(*t.n8(), 8i64);\n+    assert_eq!(*t.n9(), 9i);\n+    assert_eq!(*t.n10(), 10f32);\n+    assert_eq!(*t.n11(), 11f64);\n }"}]}