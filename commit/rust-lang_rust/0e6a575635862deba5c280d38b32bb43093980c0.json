{"sha": "0e6a575635862deba5c280d38b32bb43093980c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmE1NzU2MzU4NjJkZWJhNWMyODBkMzhiMzJiYjQzMDkzOTgwYzA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-10-27T23:30:29Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-10-27T23:31:55Z"}, "message": "rustpkg: Build dependencies into the correct workspace when using --rust-path-hack\n\nWhen invoked with the --rust-path-hack flag, rustpkg was correctly building\nthe package into the default workspace (and not into the build/ subdirectory of the\nparent directory of the source directory), but not correctly putting the output\nfor any dependencies into the default workspace as well.\n\nSpotted by Jack.", "tree": {"sha": "1566aa3c3ac69c8706492e35adabcbd3493077c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1566aa3c3ac69c8706492e35adabcbd3493077c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6a575635862deba5c280d38b32bb43093980c0", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6a575635862deba5c280d38b32bb43093980c0", "html_url": "https://github.com/rust-lang/rust/commit/0e6a575635862deba5c280d38b32bb43093980c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6a575635862deba5c280d38b32bb43093980c0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b8a41531bb0054f05be7a19e0867b8174c83b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b8a41531bb0054f05be7a19e0867b8174c83b1", "html_url": "https://github.com/rust-lang/rust/commit/16b8a41531bb0054f05be7a19e0867b8174c83b1"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "797ea3372ccfdf45b97514b5f7da591af3899be8", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=0e6a575635862deba5c280d38b32bb43093980c0", "patch": "@@ -422,6 +422,8 @@ impl PkgSrc {\n                                 fail!(\"Bad kind in build_crates\")\n                             });\n                     }\n+                    debug!(\"Compiling crate {}; its output will be in {}\",\n+                           subpath.display(), sub_dir.display());\n                     let result = compile_crate(&subcx,\n                                                exec,\n                                                &id,\n@@ -473,8 +475,8 @@ impl PkgSrc {\n         let tests = self.tests.clone();\n         let benchs = self.benchs.clone();\n         debug!(\"Building libs in {}, destination = {}\",\n-               self.destination_workspace.display(),\n-               self.destination_workspace.display());\n+               self.source_workspace.display(),\n+               self.build_workspace().display());\n         self.build_crates(build_context,\n                           &mut deps,\n                           libs,"}, {"sha": "bed7d9bc5dd212de53c3172d0cba0e2ffb0076dc", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=0e6a575635862deba5c280d38b32bb43093980c0", "patch": "@@ -585,8 +585,6 @@ impl CtxMethods for BuildContext {\n                                            build_inputs,\n                                            &pkg_src.destination_workspace,\n                                            &id).map(|s| Path::new(s.as_slice()));\n-        debug!(\"install: id = {}, about to call discover_outputs, {:?}\",\n-               id.to_str(), result.map(|p| p.display().to_str()));\n         installed_files = installed_files + result;\n         note(format!(\"Installed package {} to {}\",\n                      id.to_str(),"}, {"sha": "a54bcd6f79f4cc5b0ea07eaecb0e75cddf0ed7ce", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=0e6a575635862deba5c280d38b32bb43093980c0", "patch": "@@ -1512,6 +1512,30 @@ fn rust_path_hack_build_no_arg() {\n    assert!(!built_library_exists(&source_dir, \"foo\"));\n }\n \n+#[test]\n+fn rust_path_hack_build_with_dependency() {\n+    let foo_id = PkgId::new(\"foo\");\n+    let dep_id = PkgId::new(\"dep\");\n+    // Tests that when --rust-path-hack is in effect, dependencies get built\n+    // into the destination workspace and not the source directory\n+    let work_dir = create_local_package(&foo_id);\n+    let work_dir = work_dir.path();\n+    let dep_workspace = create_local_package(&dep_id);\n+    let dep_workspace = dep_workspace.path();\n+    let dest_workspace = mk_emptier_workspace(\"dep\");\n+    let dest_workspace = dest_workspace.path();\n+    let source_dir = work_dir.join_many([\"src\", \"foo-0.1\"]);\n+    writeFile(&source_dir.join(\"lib.rs\"), \"extern mod dep; pub fn f() { }\");\n+    let dep_dir = dep_workspace.join_many([\"src\", \"dep-0.1\"]);\n+    let rust_path = Some(~[(~\"RUST_PATH\",\n+                          format!(\"{}:{}\",\n+                                  dest_workspace.display(),\n+                                  dep_dir.display()))]);\n+    command_line_test_with_env([~\"build\", ~\"--rust-path-hack\", ~\"foo\"], work_dir, rust_path);\n+    assert_built_library_exists(dest_workspace, \"dep\");\n+    assert!(!built_library_exists(dep_workspace, \"dep\"));\n+}\n+\n #[test]\n fn rust_path_install_target() {\n     let dir_for_path = TempDir::new("}, {"sha": "10d53b1dfcc016957f4c167661ab10b81714f96e", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6a575635862deba5c280d38b32bb43093980c0/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=0e6a575635862deba5c280d38b32bb43093980c0", "patch": "@@ -469,22 +469,31 @@ impl<'self> Visitor<()> for ViewItemVisitor<'self> {\n                         // Find all the workspaces in the RUST_PATH that contain this package.\n                         let workspaces = pkg_parent_workspaces(&self.context.context,\n                                                                &pkg_id);\n-                        // Two cases:\n+                        // Three cases:\n                         // (a) `workspaces` is empty. That means there's no local source\n                         // for this package. In that case, we pass the default workspace\n                         // into `PkgSrc::new`, so that if it exists as a remote repository,\n-                        // its sources will be fetched into it.\n-                        // (b) `workspaces` is non-empty -- we found a local source for this\n-                        // package.\n-                        let dest_workspace = if workspaces.is_empty() {\n-                            default_workspace()\n-                        } else { workspaces[0] };\n+                        // its sources will be fetched into it. We also put the output in the\n+                        // same workspace.\n+                        // (b) We're using the Rust path hack. In that case, the output goes\n+                        // in the destination workspace.\n+                        // (c) `workspaces` is non-empty -- we found a local source for this\n+                        // package and will build in that workspace.\n+                        let (source_workspace, dest_workspace) = if workspaces.is_empty() {\n+                            (default_workspace(), default_workspace())\n+                        } else {\n+                            if self.context.context.use_rust_path_hack {\n+                                (workspaces[0], default_workspace())\n+                            } else {\n+                                 (workspaces[0].clone(), workspaces[0])\n+                            }\n+                        };\n                         // In this case, the source and destination workspaces are the same:\n                         // Either it's a remote package, so the local sources don't exist\n                         // and the `PkgSrc` constructor will detect that;\n                         // or else it's already in a workspace and we'll build into that\n                         // workspace\n-                        let pkg_src = PkgSrc::new(dest_workspace.clone(),\n+                        let pkg_src = PkgSrc::new(source_workspace,\n                                                   dest_workspace,\n                         // Use the rust_path_hack to search for dependencies iff\n                         // we were already using it"}]}