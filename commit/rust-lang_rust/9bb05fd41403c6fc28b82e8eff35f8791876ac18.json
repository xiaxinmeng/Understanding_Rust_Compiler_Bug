{"sha": "9bb05fd41403c6fc28b82e8eff35f8791876ac18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjA1ZmQ0MTQwM2M2ZmMyOGI4MmU4ZWZmMzVmODc5MTg3NmFjMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T20:30:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-01T20:30:51Z"}, "message": "rollup merge of #23939: nikomatsakis/fn-box\n\nConflicts:\n\tsrc/liballoc/boxed.rs", "tree": {"sha": "735ecba6abbc1915e7298dae72cbe034b7cf9d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/735ecba6abbc1915e7298dae72cbe034b7cf9d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb05fd41403c6fc28b82e8eff35f8791876ac18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb05fd41403c6fc28b82e8eff35f8791876ac18", "html_url": "https://github.com/rust-lang/rust/commit/9bb05fd41403c6fc28b82e8eff35f8791876ac18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb05fd41403c6fc28b82e8eff35f8791876ac18/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9bacbaa2c9c88aaecf07ee30f02d08a1999e5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9bacbaa2c9c88aaecf07ee30f02d08a1999e5c6", "html_url": "https://github.com/rust-lang/rust/commit/e9bacbaa2c9c88aaecf07ee30f02d08a1999e5c6"}, {"sha": "8eed73feb659633ef809e2af3399e53d5de6c6fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eed73feb659633ef809e2af3399e53d5de6c6fa", "html_url": "https://github.com/rust-lang/rust/commit/8eed73feb659633ef809e2af3399e53d5de6c6fa"}], "stats": {"total": 209, "additions": 124, "deletions": 85}, "files": [{"sha": "f00ff9bcbe5e5c4bec3ad7fbbd4336a72f1a2c55", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -31,7 +31,6 @@ extern crate log;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n-use std::thunk::Thunk;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Codegen};\n@@ -351,7 +350,7 @@ pub fn make_test_name(config: &Config, testfile: &Path) -> test::TestName {\n pub fn make_test_closure(config: &Config, testfile: &Path) -> test::TestFn {\n     let config = (*config).clone();\n     let testfile = testfile.to_path_buf();\n-    test::DynTestFn(Thunk::new(move || {\n+    test::DynTestFn(Box::new(move || {\n         runtest::run(config, &testfile)\n     }))\n }"}, {"sha": "2801cf38cb75529d94912551a60a5eab51597235", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -300,3 +300,74 @@ impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n \n+\n+/// `FnBox` is a version of the `FnOnce` intended for use with boxed\n+/// closure objects. The idea is that where one would normally store a\n+/// `Box<FnOnce()>` in a data structure, you should use\n+/// `Box<FnBox()>`. The two traits behave essentially the same, except\n+/// that a `FnBox` closure can only be called if it is boxed. (Note\n+/// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n+/// closures become directly usable.)\n+///\n+/// ### Example\n+///\n+/// Here is a snippet of code which creates a hashmap full of boxed\n+/// once closures and then removes them one by one, calling each\n+/// closure as it is removed. Note that the type of the closures\n+/// stored in the map is `Box<FnBox() -> i32>` and not `Box<FnOnce()\n+/// -> i32>`.\n+///\n+/// ```\n+/// #![feature(core)]\n+///\n+/// use std::boxed::FnBox;\n+/// use std::collections::HashMap;\n+///\n+/// fn make_map() -> HashMap<i32, Box<FnBox() -> i32>> {\n+///     let mut map: HashMap<i32, Box<FnBox() -> i32>> = HashMap::new();\n+///     map.insert(1, Box::new(|| 22));\n+///     map.insert(2, Box::new(|| 44));\n+///     map\n+/// }\n+///\n+/// fn main() {\n+///     let mut map = make_map();\n+///     for i in &[1, 2] {\n+///         let f = map.remove(&i).unwrap();\n+///         assert_eq!(f(), i * 22);\n+///     }\n+/// }\n+/// ```\n+#[rustc_paren_sugar]\n+#[unstable(feature = \"core\", reason = \"Newly introduced\")]\n+pub trait FnBox<A> {\n+    type Output;\n+\n+    fn call_box(self: Box<Self>, args: A) -> Self::Output;\n+}\n+\n+impl<A,F> FnBox<A> for F\n+    where F: FnOnce<A>\n+{\n+    type Output = F::Output;\n+\n+    fn call_box(self: Box<F>, args: A) -> F::Output {\n+        self.call_once(args)\n+    }\n+}\n+\n+impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+'a> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, args: A) -> R {\n+        self.call_box(args)\n+    }\n+}\n+\n+impl<'a,A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send+'a> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, args: A) -> R {\n+        self.call_box(args)\n+    }\n+}"}, {"sha": "f5bee6240d46c80dc5ee321742b500cb958ec3c0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -19,7 +19,6 @@ use std::path::PathBuf;\n use std::process::Command;\n use std::str;\n use std::sync::{Arc, Mutex};\n-use std::thunk::Thunk;\n \n use testing;\n use rustc_lint;\n@@ -366,7 +365,7 @@ impl Collector {\n                 ignore: should_ignore,\n                 should_panic: testing::ShouldPanic::No, // compiler failures are test failures\n             },\n-            testfn: testing::DynTestFn(Thunk::new(move|| {\n+            testfn: testing::DynTestFn(Box::new(move|| {\n                 runtest(&test,\n                         &cratename,\n                         libs,"}, {"sha": "5c9ff544fa3e8f3380b0876f87bf8e6495a4ef5e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -243,6 +243,7 @@ mod uint_macros;\n #[path = \"num/f64.rs\"]   pub mod f64;\n \n pub mod ascii;\n+\n pub mod thunk;\n \n /* Common traits */"}, {"sha": "beb2870807a7e1aab75edf77b704879eb78e50ca", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -64,7 +64,7 @@ pub fn cleanup() {\n             if queue as usize != 0 {\n                 let queue: Box<Queue> = Box::from_raw(queue);\n                 for to_run in *queue {\n-                    to_run.invoke(());\n+                    to_run();\n                 }\n             }\n         }"}, {"sha": "632d964721239661442c9bb1cba5b78d66bd8360", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -21,7 +21,6 @@\n \n use prelude::v1::*;\n use sys;\n-use thunk::Thunk;\n use usize;\n \n // Reexport some of our utilities which are expected by other crates.\n@@ -153,7 +152,7 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n /// that the closure could not be registered, meaning that it is not scheduled\n /// to be rune.\n pub fn at_exit<F: FnOnce() + Send + 'static>(f: F) -> Result<(), ()> {\n-    if at_exit_imp::push(Thunk::new(f)) {Ok(())} else {Err(())}\n+    if at_exit_imp::push(Box::new(f)) {Ok(())} else {Err(())}\n }\n \n /// One-time runtime cleanup."}, {"sha": "2cdde1aca9e682c7696d67ffad62c8f45adaa043", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -36,6 +36,7 @@\n use core::prelude::*;\n use core::mem::replace;\n \n+use boxed::Box;\n use self::FutureState::*;\n use sync::mpsc::{Receiver, channel};\n use thunk::Thunk;\n@@ -84,7 +85,7 @@ impl<A> Future<A> {\n                 match replace(&mut self.state, Evaluating) {\n                     Forced(_) | Evaluating => panic!(\"Logic error.\"),\n                     Pending(f) => {\n-                        self.state = Forced(f.invoke(()));\n+                        self.state = Forced(f());\n                         self.get_ref()\n                     }\n                 }\n@@ -114,7 +115,7 @@ impl<A> Future<A> {\n          * function. It is not spawned into another task.\n          */\n \n-        Future {state: Pending(Thunk::new(f))}\n+        Future {state: Pending(Box::new(f))}\n     }\n }\n "}, {"sha": "1845b6266ed8d1aa405ad7581278205ef5a30546", "filename": "src/libstd/sys/common/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -25,6 +25,7 @@ pub fn start_thread(main: *mut libc::c_void) {\n     unsafe {\n         stack::record_os_managed_stack_bounds(0, usize::MAX);\n         let _handler = stack_overflow::Handler::new();\n-        Box::from_raw(main as *mut Thunk).invoke(());\n+        let main: Box<Thunk> = Box::from_raw(main as *mut Thunk);\n+        main();\n     }\n }"}, {"sha": "9ab35382845b9172bad37a4999fc36a9d05655a5", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -257,7 +257,7 @@ impl Builder {\n     pub fn spawn<F>(self, f: F) -> io::Result<JoinHandle> where\n         F: FnOnce(), F: Send + 'static\n     {\n-        self.spawn_inner(Thunk::new(f)).map(|i| JoinHandle(i))\n+        self.spawn_inner(Box::new(f)).map(|i| JoinHandle(i))\n     }\n \n     /// Spawn a new child thread that must be joined within a given\n@@ -279,7 +279,7 @@ impl Builder {\n     pub fn scoped<'a, T, F>(self, f: F) -> io::Result<JoinGuard<'a, T>> where\n         T: Send + 'a, F: FnOnce() -> T, F: Send + 'a\n     {\n-        self.spawn_inner(Thunk::new(f)).map(|inner| {\n+        self.spawn_inner(Box::new(f)).map(|inner| {\n             JoinGuard { inner: inner, _marker: PhantomData }\n         })\n     }\n@@ -315,7 +315,7 @@ impl Builder {\n                 thread_info::set(imp::guard::current(), their_thread);\n             }\n \n-            let mut output = None;\n+            let mut output: Option<T> = None;\n             let try_result = {\n                 let ptr = &mut output;\n \n@@ -327,7 +327,11 @@ impl Builder {\n                 // 'unwinding' flag in the thread itself. For these reasons,\n                 // this unsafety should be ok.\n                 unsafe {\n-                    unwind::try(move || *ptr = Some(f.invoke(())))\n+                    unwind::try(move || {\n+                        let f: Thunk<(), T> = f;\n+                        let v: T = f();\n+                        *ptr = Some(v)\n+                    })\n                 }\n             };\n             unsafe {\n@@ -340,7 +344,7 @@ impl Builder {\n         };\n \n         Ok(JoinInner {\n-            native: try!(unsafe { imp::create(stack_size, Thunk::new(main)) }),\n+            native: try!(unsafe { imp::create(stack_size, Box::new(main)) }),\n             thread: my_thread,\n             packet: my_packet,\n             joined: false,\n@@ -820,7 +824,7 @@ mod test {\n         let x: Box<_> = box 1;\n         let x_in_parent = (&*x) as *const i32 as usize;\n \n-        spawnfn(Thunk::new(move|| {\n+        spawnfn(Box::new(move|| {\n             let x_in_child = (&*x) as *const i32 as usize;\n             tx.send(x_in_child).unwrap();\n         }));\n@@ -832,15 +836,15 @@ mod test {\n     #[test]\n     fn test_avoid_copying_the_body_spawn() {\n         avoid_copying_the_body(|v| {\n-            thread::spawn(move || v.invoke(()));\n+            thread::spawn(move || v());\n         });\n     }\n \n     #[test]\n     fn test_avoid_copying_the_body_thread_spawn() {\n         avoid_copying_the_body(|f| {\n             thread::spawn(move|| {\n-                f.invoke(());\n+                f();\n             });\n         })\n     }\n@@ -849,7 +853,7 @@ mod test {\n     fn test_avoid_copying_the_body_join() {\n         avoid_copying_the_body(|f| {\n             let _ = thread::spawn(move|| {\n-                f.invoke(())\n+                f()\n             }).join();\n         })\n     }\n@@ -862,13 +866,13 @@ mod test {\n         // valgrind-friendly. try this at home, instead..!)\n         const GENERATIONS: u32 = 16;\n         fn child_no(x: u32) -> Thunk<'static> {\n-            return Thunk::new(move|| {\n+            return Box::new(move|| {\n                 if x < GENERATIONS {\n-                    thread::spawn(move|| child_no(x+1).invoke(()));\n+                    thread::spawn(move|| child_no(x+1)());\n                 }\n             });\n         }\n-        thread::spawn(|| child_no(0).invoke(()));\n+        thread::spawn(|| child_no(0)());\n     }\n \n     #[test]"}, {"sha": "6091794ed428660162d848512845e186a1b075a9", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -12,45 +12,9 @@\n #![allow(missing_docs)]\n #![unstable(feature = \"std_misc\")]\n \n-use alloc::boxed::Box;\n+use alloc::boxed::{Box, FnBox};\n use core::marker::Send;\n-use core::ops::FnOnce;\n \n-pub struct Thunk<'a, A=(),R=()> {\n-    invoke: Box<Invoke<A,R>+Send + 'a>,\n-}\n+pub type Thunk<'a, A=(), R=()> =\n+    Box<FnBox<A,Output=R> + Send + 'a>;\n \n-impl<'a, R> Thunk<'a,(),R> {\n-    pub fn new<F>(func: F) -> Thunk<'a,(),R>\n-        where F : FnOnce() -> R, F : Send + 'a\n-    {\n-        Thunk::with_arg(move|()| func())\n-    }\n-}\n-\n-impl<'a,A,R> Thunk<'a,A,R> {\n-    pub fn with_arg<F>(func: F) -> Thunk<'a,A,R>\n-        where F : FnOnce(A) -> R, F : Send + 'a\n-    {\n-        Thunk {\n-            invoke: Box::<F>::new(func)\n-        }\n-    }\n-\n-    pub fn invoke(self, arg: A) -> R {\n-        self.invoke.invoke(arg)\n-    }\n-}\n-\n-pub trait Invoke<A=(),R=()> {\n-    fn invoke(self: Box<Self>, arg: A) -> R;\n-}\n-\n-impl<A,R,F> Invoke<A,R> for F\n-    where F : FnOnce(A) -> R\n-{\n-    fn invoke(self: Box<F>, arg: A) -> R {\n-        let f = *self;\n-        f(arg)\n-    }\n-}"}, {"sha": "00117775eee38cba26a42819eb05960cda19c2b2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -62,6 +62,7 @@ use self::OutputLocation::*;\n use stats::Stats;\n use getopts::{OptGroup, optflag, optopt};\n use serialize::Encodable;\n+use std::boxed::FnBox;\n use term::Terminal;\n use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n@@ -79,7 +80,7 @@ use std::path::PathBuf;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n-use std::thunk::{Thunk, Invoke};\n+use std::thunk::Thunk;\n use std::time::Duration;\n \n // to be used by rustc to compile tests in libtest\n@@ -158,7 +159,7 @@ pub enum TestFn {\n     StaticBenchFn(fn(&mut Bencher)),\n     StaticMetricFn(fn(&mut MetricMap)),\n     DynTestFn(Thunk<'static>),\n-    DynMetricFn(Box<for<'a> Invoke<&'a mut MetricMap>+'static>),\n+    DynMetricFn(Box<FnBox(&mut MetricMap)+Send>),\n     DynBenchFn(Box<TDynBenchFn+'static>)\n }\n \n@@ -936,7 +937,7 @@ pub fn run_test(opts: &TestOpts,\n                     io::set_print(box Sink(data2.clone()));\n                     io::set_panic(box Sink(data2));\n                 }\n-                testfn.invoke(())\n+                testfn()\n             }).unwrap();\n             let test_result = calc_result(&desc, result_guard.join());\n             let stdout = data.lock().unwrap().to_vec();\n@@ -957,7 +958,7 @@ pub fn run_test(opts: &TestOpts,\n         }\n         DynMetricFn(f) => {\n             let mut mm = MetricMap::new();\n-            f.invoke(&mut mm);\n+            f.call_box((&mut mm,));\n             monitor_ch.send((desc, TrMetrics(mm), Vec::new())).unwrap();\n             return;\n         }\n@@ -969,7 +970,7 @@ pub fn run_test(opts: &TestOpts,\n         }\n         DynTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture, f),\n         StaticTestFn(f) => run_test_inner(desc, monitor_ch, opts.nocapture,\n-                                          Thunk::new(move|| f()))\n+                                          Box::new(move|| f()))\n     }\n }\n \n@@ -1185,7 +1186,7 @@ mod tests {\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1202,7 +1203,7 @@ mod tests {\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1219,7 +1220,7 @@ mod tests {\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes(None)\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1236,7 +1237,7 @@ mod tests {\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes(Some(\"error message\"))\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1253,7 +1254,7 @@ mod tests {\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes(Some(\"foobar\"))\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1270,7 +1271,7 @@ mod tests {\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes(None)\n             },\n-            testfn: DynTestFn(Thunk::new(move|| f())),\n+            testfn: DynTestFn(Box::new(move|| f())),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1306,15 +1307,15 @@ mod tests {\n                     ignore: true,\n                     should_panic: ShouldPanic::No,\n                 },\n-                testfn: DynTestFn(Thunk::new(move|| {})),\n+                testfn: DynTestFn(Box::new(move|| {})),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                 },\n-                testfn: DynTestFn(Thunk::new(move|| {})),\n+                testfn: DynTestFn(Box::new(move|| {})),\n             });\n         let filtered = filter_tests(&opts, tests);\n \n@@ -1350,7 +1351,7 @@ mod tests {\n                         ignore: false,\n                         should_panic: ShouldPanic::No,\n                     },\n-                    testfn: DynTestFn(Thunk::new(testfn)),\n+                    testfn: DynTestFn(Box::new(testfn)),\n                 };\n                 tests.push(test);\n             }"}, {"sha": "3ad78f088f9c9f5fe26e92187f40e0cee21218d7", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -25,7 +25,7 @@ fn test(slot: &mut Option<Thunk<(),Thunk>>) -> () {\n   let a = slot.take();\n   let _a = match a {\n     // `{let .. a(); }` would break\n-    Some(a) => { let _a = a.invoke(()); },\n+    Some(a) => { let _a = a(); },\n     None => (),\n   };\n }"}, {"sha": "def85b4766783ff499e58efd9a8859a995968c03", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -23,5 +23,5 @@ use std::thunk::Thunk;\n \n pub fn main() {\n     let mut x = 1;\n-    let _thunk = Thunk::new(move|| { x = 2; });\n+    let _thunk = Box::new(move|| { x = 2; });\n }"}, {"sha": "cf8c54fdd808667afc3262f7791369e8746e8ec6", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -12,10 +12,10 @@\n \n use std::thunk::Thunk;\n \n-fn action(cb: Thunk<usize, usize>) -> usize {\n-    cb.invoke(1)\n+fn action(cb: Thunk<(usize,), usize>) -> usize {\n+    cb(1)\n }\n \n pub fn main() {\n-    println!(\"num: {}\", action(Thunk::with_arg(move |u| u)));\n+    println!(\"num: {}\", action(Box::new(move |u| u)));\n }"}, {"sha": "059d25173c2ad75e57f88fa3f2b979a13092eeb2", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -16,13 +16,13 @@ use std::thunk::Thunk;\n \n pub trait Promisable: Send + Sync {}\n impl<T: Send + Sync> Promisable for T {}\n-pub fn propagate<'a, T, E, F, G>(action: F) -> Thunk<'a,Result<T, E>, Result<T, E>>\n+pub fn propagate<'a, T, E, F, G>(action: F) -> Thunk<'a, (Result<T, E>,), Result<T, E>>\n     where\n         T: Promisable + Clone + 'a,\n         E: Promisable + Clone + 'a,\n         F: FnOnce(&T) -> Result<T, E> + Send + 'a,\n         G: FnOnce(Result<T, E>) -> Result<T, E> + 'a {\n-    Thunk::with_arg(move |result: Result<T, E>| {\n+    Box::new(move |result: Result<T, E>| {\n         match result {\n             Ok(ref t) => action(t),\n             Err(ref e) => Err(e.clone()),"}, {"sha": "5c84c30aa7fa3631a7fc277f4697f3cb8def9f1e", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -18,11 +18,11 @@ use std::thunk::Thunk;\n static generations: usize = 1024+256+128+49;\n \n fn spawn(f: Thunk<'static>) {\n-    Builder::new().stack_size(32 * 1024).spawn(move|| f.invoke(()));\n+    Builder::new().stack_size(32 * 1024).spawn(move|| f());\n }\n \n fn child_no(x: usize) -> Thunk<'static> {\n-    Thunk::new(move|| {\n+    Box::new(move|| {\n         if x < generations {\n             spawn(child_no(x+1));\n         }"}, {"sha": "2167a3df9766ffd471abad9e07e154448ae16308", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb05fd41403c6fc28b82e8eff35f8791876ac18/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=9bb05fd41403c6fc28b82e8eff35f8791876ac18", "patch": "@@ -13,7 +13,6 @@\n \n use std::thread;\n use std::sync::mpsc::Sender;\n-use std::thunk::Invoke;\n \n type RingBuffer = Vec<f64> ;\n type SamplesFn = Box<FnMut(&RingBuffer) + Send>;"}]}