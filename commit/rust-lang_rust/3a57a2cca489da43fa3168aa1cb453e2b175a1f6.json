{"sha": "3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTdhMmNjYTQ4OWRhNDNmYTMxNjhhYTFjYjQ1M2UyYjE3NWExZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-02T01:53:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T17:01:33Z"}, "message": "`ast_validation`: move trait item logic to proper place.", "tree": {"sha": "2d1aa949139194fd5f7cdbc494aadce4cb80e769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1aa949139194fd5f7cdbc494aadce4cb80e769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "html_url": "https://github.com/rust-lang/rust/commit/3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a57a2cca489da43fa3168aa1cb453e2b175a1f6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d41d0fe1423b4d21d6a9a2778419d399da1a13a", "html_url": "https://github.com/rust-lang/rust/commit/0d41d0fe1423b4d21d6a9a2778419d399da1a13a"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "884af188ed64ccce7264eef60d1818a757c3f73b", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3a57a2cca489da43fa3168aa1cb453e2b175a1f6/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a57a2cca489da43fa3168aa1cb453e2b175a1f6/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3a57a2cca489da43fa3168aa1cb453e2b175a1f6", "patch": "@@ -608,26 +608,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n-                for trait_item in trait_items {\n-                    if let TraitItemKind::Method(ref sig, ref block) = trait_item.kind {\n-                        self.check_fn_decl(&sig.decl);\n-                        self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n-                        self.check_trait_fn_not_const(sig.header.constness);\n-                        if block.is_none() {\n-                            Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n-                                if mut_ident {\n-                                    self.lint_buffer.buffer_lint(\n-                                        lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n-                                        trait_item.id, span,\n-                                        \"patterns aren't allowed in methods without bodies\");\n-                                } else {\n-                                    struct_span_err!(self.session, span, E0642,\n-                                        \"patterns aren't allowed in methods without bodies\").emit();\n-                                }\n-                            });\n-                        }\n-                    }\n-                }\n             }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (cf. issue #35584).\n@@ -812,6 +792,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_trait_item(&mut self, ti: &'a AssocItem) {\n         self.invalid_visibility(&ti.vis, None);\n         self.check_defaultness(ti.span, ti.defaultness);\n+\n+        if let AssocItemKind::Method(sig, block) = &ti.kind {\n+            self.check_fn_decl(&sig.decl);\n+            self.check_trait_fn_not_async(ti.span, sig.header.asyncness.node);\n+            self.check_trait_fn_not_const(sig.header.constness);\n+            if block.is_none() {\n+                Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+                    if mut_ident {\n+                        self.lint_buffer.buffer_lint(\n+                            lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            ti.id, span,\n+                            \"patterns aren't allowed in methods without bodies\"\n+                        );\n+                    } else {\n+                        struct_span_err!(\n+                            self.session, span, E0642,\n+                            \"patterns aren't allowed in methods without bodies\"\n+                        ).emit();\n+                    }\n+                });\n+            }\n+        }\n+\n         visit::walk_trait_item(self, ti);\n     }\n "}]}