{"sha": "b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDFiMmY2NWY2NGU3NTk1YWUxYmZhMTlmNmE4YjNjMzU0YjlmOWQ=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-03T15:14:19Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-07-03T15:14:19Z"}, "message": "Make vtable_allocation always succeed", "tree": {"sha": "2a2bc8a83e4b8a74705adaf84f6126075ca0a76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2bc8a83e4b8a74705adaf84f6126075ca0a76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "html_url": "https://github.com/rust-lang/rust/commit/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d69d9f8eb888a6e124c567f804c2e464c7b00a", "html_url": "https://github.com/rust-lang/rust/commit/e9d69d9f8eb888a6e124c567f804c2e464c7b00a"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "12f7092d935a33732d858ddad42e2eff87f93b66", "filename": "compiler/rustc_codegen_cranelift/src/vtable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvtable.rs?ref=b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "patch": "@@ -72,10 +72,7 @@ pub(crate) fn get_vtable<'tcx>(\n     let vtable_ptr = if let Some(vtable_ptr) = fx.vtables.get(&(ty, trait_ref)) {\n         *vtable_ptr\n     } else {\n-        let vtable_alloc_id = match fx.tcx.vtable_allocation(ty, trait_ref) {\n-            Ok(alloc) => alloc,\n-            Err(_) => fx.tcx.sess.fatal(\"allocation of constant vtable failed\"),\n-        };\n+        let vtable_alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n         let vtable_allocation = fx.tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n         let vtable_ptr = pointer_for_allocation(fx, vtable_allocation);\n "}, {"sha": "63245a94c8e3d8fb9388d85e948e8347c53865a5", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "patch": "@@ -70,10 +70,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n         return val;\n     }\n \n-    let vtable_alloc_id = match tcx.vtable_allocation(ty, trait_ref) {\n-        Ok(alloc) => alloc,\n-        Err(_) => tcx.sess.fatal(\"allocation of constant vtable failed\"),\n-    };\n+    let vtable_alloc_id = tcx.vtable_allocation(ty, trait_ref);\n     let vtable_allocation = tcx.global_alloc(vtable_alloc_id).unwrap_memory();\n     let vtable_const = cx.const_data_from_alloc(vtable_allocation);\n     let align = cx.data_layout().pointer_align.abi;"}, {"sha": "0940137a7c33facf95989c8603001027b719d481", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "patch": "@@ -1,6 +1,6 @@\n use std::convert::TryFrom;\n \n-use crate::mir::interpret::{alloc_range, AllocId, Allocation, InterpResult, Pointer, Scalar};\n+use crate::mir::interpret::{alloc_range, AllocId, Allocation, Pointer, Scalar};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{self, DefId, SubstsRef, Ty, TyCtxt};\n use rustc_ast::Mutability;\n@@ -28,11 +28,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         ty: Ty<'tcx>,\n         poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n-    ) -> InterpResult<'tcx, AllocId> {\n+    ) -> AllocId {\n         let tcx = self;\n         let vtables_cache = tcx.vtables_cache.lock();\n         if let Some(alloc_id) = vtables_cache.get(&(ty, poly_trait_ref)).cloned() {\n-            return Ok(alloc_id);\n+            return alloc_id;\n         }\n         drop(vtables_cache);\n \n@@ -60,7 +60,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         let ptr_align = tcx.data_layout.pointer_align.abi;\n \n         let vtable_size = ptr_size * u64::try_from(vtable_entries.len()).unwrap();\n-        let mut vtable = Allocation::uninit(vtable_size, ptr_align, true)?;\n+        let mut vtable =\n+            Allocation::uninit(vtable_size, ptr_align, /* panic_on_fail */ true).unwrap();\n \n         // No need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n@@ -101,6 +102,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let alloc_id = tcx.create_memory_alloc(tcx.intern_const_alloc(vtable));\n         let mut vtables_cache = self.vtables_cache.lock();\n         vtables_cache.insert((ty, poly_trait_ref), alloc_id);\n-        Ok(alloc_id)\n+        alloc_id\n     }\n }"}, {"sha": "5332e615bc8eacaec143f53c02343b4f79bb1fe9", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=b201b2f65f64e7595ae1bfa19f6a8b3c354b9f9d", "patch": "@@ -30,7 +30,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ensure_monomorphic_enough(*self.tcx, ty)?;\n         ensure_monomorphic_enough(*self.tcx, poly_trait_ref)?;\n \n-        let vtable_allocation = self.tcx.vtable_allocation(ty, poly_trait_ref)?;\n+        let vtable_allocation = self.tcx.vtable_allocation(ty, poly_trait_ref);\n \n         let vtable_ptr = self.memory.global_base_pointer(Pointer::from(vtable_allocation))?;\n "}]}