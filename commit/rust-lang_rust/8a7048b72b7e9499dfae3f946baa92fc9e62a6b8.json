{"sha": "8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNzA0OGI3MmI3ZTk0OTlkZmFlM2Y5NDZiYWE5MmZjOWU2MmE2Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T18:01:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-16T18:01:41Z"}, "message": "Auto merge of #54251 - varkor:silence-bad_style, r=Manishearth\n\nMake `bad_style` a silent alias for `nonstandard_style`\n\nNow only `nonstandard_style` is suggested in `rustc -W help`, but `bad_style` will not produce a warning. Closes #41646.\n\nr? @Manishearth", "tree": {"sha": "26f453c3108c2f086ec9ade7a4c24f773706a313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f453c3108c2f086ec9ade7a4c24f773706a313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "html_url": "https://github.com/rust-lang/rust/commit/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ab2f4071b959b0276862605d7107227c2fa76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ab2f4071b959b0276862605d7107227c2fa76f", "html_url": "https://github.com/rust-lang/rust/commit/99ab2f4071b959b0276862605d7107227c2fa76f"}, {"sha": "15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a", "html_url": "https://github.com/rust-lang/rust/commit/15ecd1973ae83fcf00ba3a9b4290ba05ee1eeb5a"}], "stats": {"total": 139, "additions": 94, "deletions": 45}, "files": [{"sha": "852af2cdaa237a536e88bfd73a85247062a3f626", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "patch": "@@ -67,10 +67,8 @@ pub struct LintStore {\n     /// Lints indexed by name.\n     by_name: FxHashMap<String, TargetLint>,\n \n-    /// Map of registered lint groups to what lints they expand to. The first\n-    /// bool is true if the lint group was added by a plugin. The optional string\n-    /// is used to store the new names of deprecated lint group names.\n-    lint_groups: FxHashMap<&'static str, (Vec<LintId>, bool, Option<&'static str>)>,\n+    /// Map of registered lint groups to what lints they expand to.\n+    lint_groups: FxHashMap<&'static str, LintGroup>,\n \n     /// Extra info for future incompatibility lints, describing the\n     /// issue or RFC that caused the incompatibility.\n@@ -127,6 +125,18 @@ pub enum FindLintError {\n     Removed,\n }\n \n+struct LintAlias {\n+    name: &'static str,\n+    /// Whether deprecation warnings should be suppressed for this alias.\n+    silent: bool,\n+}\n+\n+struct LintGroup {\n+    lint_ids: Vec<LintId>,\n+    from_plugin: bool,\n+    depr: Option<LintAlias>,\n+}\n+\n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist\n@@ -160,9 +170,15 @@ impl LintStore {\n     }\n \n     pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n-        self.lint_groups.iter().map(|(k, v)| (*k,\n-                                              v.0.clone(),\n-                                              v.1)).collect()\n+        self.lint_groups.iter()\n+            .filter(|(_, LintGroup { depr, .. })| {\n+                // Don't display deprecated lint groups.\n+                depr.is_none()\n+            })\n+            .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n+                (*k, lint_ids.clone(), *from_plugin)\n+            })\n+            .collect()\n     }\n \n     pub fn register_early_pass(&mut self,\n@@ -245,6 +261,18 @@ impl LintStore {\n         self.future_incompatible.get(&id)\n     }\n \n+    pub fn register_group_alias(\n+        &mut self,\n+        lint_name: &'static str,\n+        alias: &'static str,\n+    ) {\n+        self.lint_groups.insert(alias, LintGroup {\n+            lint_ids: vec![],\n+            from_plugin: false,\n+            depr: Some(LintAlias { name: lint_name, silent: true }),\n+        });\n+    }\n+\n     pub fn register_group(\n         &mut self,\n         sess: Option<&Session>,\n@@ -255,11 +283,18 @@ impl LintStore {\n     ) {\n         let new = self\n             .lint_groups\n-            .insert(name, (to, from_plugin, None))\n+            .insert(name, LintGroup {\n+                lint_ids: to,\n+                from_plugin,\n+                depr: None,\n+            })\n             .is_none();\n         if let Some(deprecated) = deprecated_name {\n-            self.lint_groups\n-                .insert(deprecated, (vec![], from_plugin, Some(name)));\n+            self.lint_groups.insert(deprecated, LintGroup {\n+                lint_ids: vec![],\n+                from_plugin,\n+                depr: Some(LintAlias { name, silent: false }),\n+            });\n         }\n \n         if !new {\n@@ -288,7 +323,7 @@ impl LintStore {\n         self.by_name.insert(name.into(), Removed(reason.into()));\n     }\n \n-    pub fn find_lints(&self, lint_name: &str) -> Result<Vec<LintId>, FindLintError> {\n+    pub fn find_lints(&self, mut lint_name: &str) -> Result<Vec<LintId>, FindLintError> {\n         match self.by_name.get(lint_name) {\n             Some(&Id(lint_id)) => Ok(vec![lint_id]),\n             Some(&Renamed(_, lint_id)) => {\n@@ -298,9 +333,17 @@ impl LintStore {\n                 Err(FindLintError::Removed)\n             },\n             None => {\n-                match self.lint_groups.get(lint_name) {\n-                    Some(v) => Ok(v.0.clone()),\n-                    None => Err(FindLintError::Removed)\n+                loop {\n+                    return match self.lint_groups.get(lint_name) {\n+                        Some(LintGroup {lint_ids, depr, .. }) => {\n+                            if let Some(LintAlias { name, .. }) = depr {\n+                                lint_name = name;\n+                                continue;\n+                            }\n+                            Ok(lint_ids.clone())\n+                        }\n+                        None => Err(FindLintError::Removed)\n+                    };\n                 }\n             }\n         }\n@@ -366,7 +409,9 @@ impl LintStore {\n             match self.by_name.get(&complete_name) {\n                 None => match self.lint_groups.get(&*complete_name) {\n                     None => return CheckLintNameResult::Tool(Err((None, String::new()))),\n-                    Some(ids) => return CheckLintNameResult::Tool(Ok(&ids.0)),\n+                    Some(LintGroup { lint_ids, .. }) => {\n+                        return CheckLintNameResult::Tool(Ok(&lint_ids));\n+                    }\n                 },\n                 Some(&Id(ref id)) => return CheckLintNameResult::Tool(Ok(slice::from_ref(id))),\n                 // If the lint was registered as removed or renamed by the lint tool, we don't need\n@@ -390,16 +435,20 @@ impl LintStore {\n                 // If neither the lint, nor the lint group exists check if there is a `clippy::`\n                 // variant of this lint\n                 None => self.check_tool_name_for_backwards_compat(&complete_name, \"clippy\"),\n-                Some(ids) => {\n+                Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Check if the lint group name is deprecated\n-                    if let Some(new_name) = ids.2 {\n-                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return CheckLintNameResult::Tool(Err((\n-                            Some(&lint_ids.0),\n-                            new_name.to_string(),\n-                        )));\n+                    if let Some(LintAlias { name, silent }) = depr {\n+                        let LintGroup { lint_ids, .. } = self.lint_groups.get(name).unwrap();\n+                        return if *silent {\n+                            CheckLintNameResult::Ok(&lint_ids)\n+                        } else {\n+                            CheckLintNameResult::Tool(Err((\n+                                Some(&lint_ids),\n+                                name.to_string(),\n+                            )))\n+                        };\n                     }\n-                    CheckLintNameResult::Ok(&ids.0)\n+                    CheckLintNameResult::Ok(&lint_ids)\n                 }\n             },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n@@ -416,16 +465,20 @@ impl LintStore {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n                 None => CheckLintNameResult::NoLint,\n-                Some(ids) => {\n-                    // Reaching this would be weird, but lets cover this case anyway\n-                    if let Some(new_name) = ids.2 {\n-                        let lint_ids = self.lint_groups.get(new_name).unwrap();\n-                        return CheckLintNameResult::Tool(Err((\n-                            Some(&lint_ids.0),\n-                            new_name.to_string(),\n-                        )));\n+                Some(LintGroup { lint_ids, depr, .. }) => {\n+                    // Reaching this would be weird, but let's cover this case anyway\n+                    if let Some(LintAlias { name, silent }) = depr {\n+                        let LintGroup { lint_ids, .. } = self.lint_groups.get(name).unwrap();\n+                        return if *silent {\n+                            CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n+                        } else {\n+                            CheckLintNameResult::Tool(Err((\n+                                Some(&lint_ids),\n+                                name.to_string(),\n+                            )))\n+                        };\n                     }\n-                    CheckLintNameResult::Tool(Err((Some(&ids.0), complete_name)))\n+                    CheckLintNameResult::Tool(Err((Some(&lint_ids), complete_name)))\n                 }\n             },\n             Some(&Id(ref id)) => {"}, {"sha": "7aae22d5739e7a28d72c58f0644220f08d9a41e4", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a7048b72b7e9499dfae3f946baa92fc9e62a6b8/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=8a7048b72b7e9499dfae3f946baa92fc9e62a6b8", "patch": "@@ -84,30 +84,30 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_early_pass($sess, false, box $name);\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_pre_expansion_builtin {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_pre_expansion_pass($sess, box $name);\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_early_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n                 store.register_early_pass($sess, false, box $name::new());\n-                )*}\n-            )\n+            )*}\n+        )\n     }\n \n     macro_rules! add_lint_group {\n         ($sess:ident, $name:expr, $($lint:ident),*) => (\n             store.register_group($sess, false, $name, None, vec![$(LintId::of($lint)),*]);\n-            )\n+        )\n     }\n \n     add_pre_expansion_builtin!(sess,\n@@ -162,12 +162,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     store.register_late_pass(sess, false, box BuiltinCombinedLateLintPass::new());\n \n-    add_lint_group!(sess,\n-                    \"bad_style\",\n-                    NON_CAMEL_CASE_TYPES,\n-                    NON_SNAKE_CASE,\n-                    NON_UPPER_CASE_GLOBALS);\n-\n     add_lint_group!(sess,\n                     \"nonstandard_style\",\n                     NON_CAMEL_CASE_TYPES,\n@@ -357,6 +351,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n     store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");\n+    // Register lint group aliases\n+    store.register_group_alias(\"nonstandard_style\", \"bad_style\");\n     // This was renamed to raw_pointer_derive, which was then removed,\n     // so it is also considered removed\n     store.register_removed(\"raw_pointer_deriving\", \"using derive with raw pointers is ok\");"}]}