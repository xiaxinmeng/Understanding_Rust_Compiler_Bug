{"sha": "d376012a43f91f6dfdd761d786c016f7c343f950", "node_id": "C_kwDOAAsO6NoAKGQzNzYwMTJhNDNmOTFmNmRmZGQ3NjFkNzg2YzAxNmY3YzM0M2Y5NTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T13:43:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T13:43:44Z"}, "message": "Derive TypeFoldable and TypeVisitable for mir::PlaceElement", "tree": {"sha": "35e2156b79a672085ba15d44e7ae4b9767833370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35e2156b79a672085ba15d44e7ae4b9767833370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d376012a43f91f6dfdd761d786c016f7c343f950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d376012a43f91f6dfdd761d786c016f7c343f950", "html_url": "https://github.com/rust-lang/rust/commit/d376012a43f91f6dfdd761d786c016f7c343f950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d376012a43f91f6dfdd761d786c016f7c343f950/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c0560cd2aac5856387f58a86a202c82e7b4a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c0560cd2aac5856387f58a86a202c82e7b4a20", "html_url": "https://github.com/rust-lang/rust/commit/10c0560cd2aac5856387f58a86a202c82e7b4a20"}], "stats": {"total": 33, "additions": 1, "deletions": 32}, "files": [{"sha": "685f11db4e0703fd9f35051d4918bfa7968089ea", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d376012a43f91f6dfdd761d786c016f7c343f950", "patch": "@@ -2551,8 +2551,6 @@ impl UserTypeProjection {\n     }\n }\n \n-TrivialTypeTraversalAndLiftImpls! { ProjectionKind, }\n-\n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {"}, {"sha": "89b999b55b921a6962dbb8a604f1f6e0fc028b75", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=d376012a43f91f6dfdd761d786c016f7c343f950", "patch": "@@ -872,7 +872,7 @@ pub struct Place<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ProjectionElem<V, T> {\n     Deref,\n     Field(Field, T),"}, {"sha": "64dac2e38344cce93b3cf6d8946feeaeb268d8e4", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=d376012a43f91f6dfdd761d786c016f7c343f950", "patch": "@@ -175,23 +175,6 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        use crate::mir::ProjectionElem::*;\n-\n-        Ok(match self {\n-            Deref => Deref,\n-            Field(f, ty) => Field(f, ty.try_fold_with(folder)?),\n-            Index(v) => Index(v.try_fold_with(folder)?),\n-            Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n-            ConstantIndex { offset, min_length, from_end } => {\n-                ConstantIndex { offset, min_length, from_end }\n-            }\n-            Subslice { from, to, from_end } => Subslice { from, to, from_end },\n-        })\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)"}, {"sha": "7875b2bb8cf5e4cda2a193eeb399d494c223ad31", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d376012a43f91f6dfdd761d786c016f7c343f950/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=d376012a43f91f6dfdd761d786c016f7c343f950", "patch": "@@ -137,18 +137,6 @@ impl<'tcx> TypeVisitable<'tcx> for Operand<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for PlaceElem<'tcx> {\n-    fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n-        use crate::mir::ProjectionElem::*;\n-\n-        match self {\n-            Field(_, ty) => ty.visit_with(visitor),\n-            Index(v) => v.visit_with(visitor),\n-            _ => ControlFlow::CONTINUE,\n-        }\n-    }\n-}\n-\n impl<'tcx> TypeVisitable<'tcx> for GeneratorSavedLocal {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::CONTINUE"}]}