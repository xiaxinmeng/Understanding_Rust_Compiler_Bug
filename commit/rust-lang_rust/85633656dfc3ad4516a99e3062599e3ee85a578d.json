{"sha": "85633656dfc3ad4516a99e3062599e3ee85a578d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NjMzNjU2ZGZjM2FkNDUxNmE5OWUzMDYyNTk5ZTNlZTg1YTU3OGQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-28T13:43:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-04-28T14:03:49Z"}, "message": "Fix hover on the beginning of a nested expression\n\nE.g. in\n```\nlet foo = 1u32;\nif true {\n   <|>foo;\n}\n```\nthe hover shows `()`, the type of the whole if expression, instead of the more\nsensible `u32`. The reason for this was that the search for an expression was\nslightly left-biased: When on the edge between two tokens, it first looked at\nall ancestors of the left token and then of the right token. Instead merge the\nancestors in ascending order, so that we get the smaller of the two possible\nexpressions.", "tree": {"sha": "6b037199384ddf1021c2ad81886425dfcb8271a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b037199384ddf1021c2ad81886425dfcb8271a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85633656dfc3ad4516a99e3062599e3ee85a578d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85633656dfc3ad4516a99e3062599e3ee85a578d", "html_url": "https://github.com/rust-lang/rust/commit/85633656dfc3ad4516a99e3062599e3ee85a578d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85633656dfc3ad4516a99e3062599e3ee85a578d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd3d9bc2d328e164c594f3d2022dcf174f907a9", "html_url": "https://github.com/rust-lang/rust/commit/1dd3d9bc2d328e164c594f3d2022dcf174f907a9"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "163781f88ab38d715c370a0c1e40638abb706c9f", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=85633656dfc3ad4516a99e3062599e3ee85a578d", "patch": "@@ -25,6 +25,7 @@ pub(crate) fn goto_definition(\n     None\n }\n \n+#[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),\n     Approximate(Vec<NavigationTarget>),"}, {"sha": "6545a25811f8698f55689df2f34813deb15317d6", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=85633656dfc3ad4516a99e3062599e3ee85a578d", "patch": "@@ -1,7 +1,7 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     AstNode, ast,\n-    algo::{find_covering_element, find_node_at_offset, find_token_at_offset},\n+    algo::{find_covering_element, find_node_at_offset, ancestors_at_offset},\n };\n use hir::HirDisplay;\n \n@@ -104,12 +104,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     }\n \n     if range.is_none() {\n-        let node = find_token_at_offset(file.syntax(), position.offset).find_map(|token| {\n-            token\n-                .parent()\n-                .ancestors()\n-                .find(|n| ast::Expr::cast(*n).is_some() || ast::Pat::cast(*n).is_some())\n-        })?;\n+        let node = ancestors_at_offset(file.syntax(), position.offset)\n+            .find(|n| ast::Expr::cast(*n).is_some() || ast::Pat::cast(*n).is_some())?;\n         let frange = FileRange { file_id: position.file_id, range: node.range() };\n         res.extend(type_of(db, frange).map(rust_code_markup));\n         range = Some(node.range());\n@@ -397,6 +393,17 @@ The Some variant\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n+    #[test]\n+    fn hover_local_var_edge() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+fn func(foo: i32) { if true { <|>foo; }; }\n+\",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+    }\n+\n     #[test]\n     fn test_type_of_for_function() {\n         let (analysis, range) = single_file_with_range("}, {"sha": "d31d0034332b51422453c19c9f9449a6c44994b8", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85633656dfc3ad4516a99e3062599e3ee85a578d/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=85633656dfc3ad4516a99e3062599e3ee85a578d", "patch": "@@ -1,5 +1,7 @@\n pub mod visit;\n \n+use itertools::Itertools;\n+\n use crate::{SyntaxNode, TextRange, TextUnit, AstNode, Direction, SyntaxToken, SyntaxElement};\n \n pub use rowan::TokenAtOffset;\n@@ -12,6 +14,20 @@ pub fn find_token_at_offset(node: &SyntaxNode, offset: TextUnit) -> TokenAtOffse\n     }\n }\n \n+/// Returns ancestors of the node at the offset, sorted by length. This should\n+/// do the right thing at an edge, e.g. when searching for expressions at `{\n+/// <|>foo }` we will get the name reference instead of the whole block, which\n+/// we would get if we just did `find_token_at_offset(...).flat_map(|t|\n+/// t.parent().ancestors())`.\n+pub fn ancestors_at_offset(\n+    node: &SyntaxNode,\n+    offset: TextUnit,\n+) -> impl Iterator<Item = &SyntaxNode> {\n+    find_token_at_offset(node, offset)\n+        .map(|token| token.parent().ancestors())\n+        .kmerge_by(|node1, node2| node1.range().len() < node2.range().len())\n+}\n+\n /// Finds a node of specific Ast type at offset. Note that this is slightly\n /// imprecise: if the cursor is strictly between two nodes of the desired type,\n /// as in\n@@ -20,10 +36,9 @@ pub fn find_token_at_offset(node: &SyntaxNode, offset: TextUnit) -> TokenAtOffse\n /// struct Foo {}|struct Bar;\n /// ```\n ///\n-/// then the left node will be silently preferred.\n+/// then the shorter node will be silently preferred.\n pub fn find_node_at_offset<N: AstNode>(syntax: &SyntaxNode, offset: TextUnit) -> Option<&N> {\n-    find_token_at_offset(syntax, offset)\n-        .find_map(|leaf| leaf.parent().ancestors().find_map(N::cast))\n+    ancestors_at_offset(syntax, offset).find_map(N::cast)\n }\n \n /// Finds the first sibling in the given direction which is not `trivia`"}]}