{"sha": "dba767802d05c493b7798b0173a2d102dcc73a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYTc2NzgwMmQwNWM0OTNiNzc5OGIwMTczYTJkMTAyZGNjNzNhOTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T12:01:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-29T12:01:55Z"}, "message": "make file id repr private again", "tree": {"sha": "758276e45d5eb57f2eaa2460c29b3ddbf6385af8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/758276e45d5eb57f2eaa2460c29b3ddbf6385af8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dba767802d05c493b7798b0173a2d102dcc73a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dba767802d05c493b7798b0173a2d102dcc73a95", "html_url": "https://github.com/rust-lang/rust/commit/dba767802d05c493b7798b0173a2d102dcc73a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dba767802d05c493b7798b0173a2d102dcc73a95/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b803055b7b690a57f1c08da8f1640139c739e76", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b803055b7b690a57f1c08da8f1640139c739e76", "html_url": "https://github.com/rust-lang/rust/commit/5b803055b7b690a57f1c08da8f1640139c739e76"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "3921175cb0de64156acea2009a0ac652d60da1dd", "filename": "crates/ra_hir_expand/src/expand.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dba767802d05c493b7798b0173a2d102dcc73a95/crates%2Fra_hir_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba767802d05c493b7798b0173a2d102dcc73a95/crates%2Fra_hir_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fexpand.rs?ref=dba767802d05c493b7798b0173a2d102dcc73a95", "patch": "@@ -39,30 +39,33 @@ macro_rules! impl_intern_key {\n /// finite (because everything bottoms out at the real `FileId`) and small\n /// (`MacroCallId` uses the location interner).\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum HirFileId {\n+pub struct HirFileId(HirFileIdRepr);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+enum HirFileIdRepr {\n     FileId(FileId),\n     MacroFile(MacroFile),\n }\n \n impl From<FileId> for HirFileId {\n     fn from(id: FileId) -> Self {\n-        HirFileId::FileId(id)\n+        HirFileId(HirFileIdRepr::FileId(id))\n     }\n }\n \n impl From<MacroFile> for HirFileId {\n     fn from(id: MacroFile) -> Self {\n-        HirFileId::MacroFile(id)\n+        HirFileId(HirFileIdRepr::MacroFile(id))\n     }\n }\n \n impl HirFileId {\n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n     pub fn original_file(self, db: &impl AstDatabase) -> FileId {\n-        match self {\n-            HirFileId::FileId(file_id) => file_id,\n-            HirFileId::MacroFile(macro_file) => {\n+        match self.0 {\n+            HirFileIdRepr::FileId(file_id) => file_id,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n                 loc.ast_id.file_id().original_file(db)\n             }\n@@ -71,9 +74,9 @@ impl HirFileId {\n \n     /// Get the crate which the macro lives in, if it is a macro file.\n     pub fn macro_crate(self, db: &impl AstDatabase) -> Option<CrateId> {\n-        match self {\n-            HirFileId::FileId(_) => None,\n-            HirFileId::MacroFile(macro_file) => {\n+        match self.0 {\n+            HirFileIdRepr::FileId(_) => None,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n                 let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n                 Some(loc.def.krate)\n             }\n@@ -215,9 +218,11 @@ pub(crate) fn parse_or_expand_query(\n     db: &impl AstDatabase,\n     file_id: HirFileId,\n ) -> Option<SyntaxNode> {\n-    match file_id {\n-        HirFileId::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n-        HirFileId::MacroFile(macro_file) => db.parse_macro(macro_file).map(|it| it.syntax_node()),\n+    match file_id.0 {\n+        HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n+        HirFileIdRepr::MacroFile(macro_file) => {\n+            db.parse_macro(macro_file).map(|it| it.syntax_node())\n+        }\n     }\n }\n "}]}