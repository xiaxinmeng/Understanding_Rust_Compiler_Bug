{"sha": "3279f7ed773d330616e799537cdbf53179cb0eab", "node_id": "C_kwDOAAsO6NoAKDMyNzlmN2VkNzczZDMzMDYxNmU3OTk1MzdjZGJmNTMxNzljYjBlYWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-06T15:42:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-06T15:42:00Z"}, "message": "Rollup merge of #108807 - MU001999:lint/suspicious_auto_trait_impls, r=lcnr\n\nEmit the suspicious_auto_trait_impls for negative impls as well\n\nFixes #108804", "tree": {"sha": "a10164e404dcec14b24021a06a96b7311f291b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10164e404dcec14b24021a06a96b7311f291b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3279f7ed773d330616e799537cdbf53179cb0eab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBgnICRBK7hj4Ov3rIwAArX0IAJkQV4lfMRY6i5cFf28lDQ8Q\n8QeHbH9k6rXPqGaobuv1E71qGQeUELLQOxeIggezcsfGmK3KJTLq5zZ52gyKYTv/\n3v750GtNlZKovbZGdPDqVzSNYgAfsafZIk/VxeXKtm6k0uvySUVv1k+Z2DifeyN+\nA+jF+72ak67u0cFFlH82D4WcocYAWLeATD9OQLHxGp09azNX+uEd8IhMPHtvxn66\n0Ul7yDrJB529Hr8QxuzHxr65a+tzkGnqRLJek2J1xGGxrWXNejkyY/3zIKiL/0P7\nfrfZjf85uLCFhmDU5p4lk9cH4bh0EXmnzv8MYWDnbHWT+gD5yk6N/IUZwaBqLvg=\n=LZqQ\n-----END PGP SIGNATURE-----\n", "payload": "tree a10164e404dcec14b24021a06a96b7311f291b7e\nparent ab7dd09fc2f75d7ab6b638725a5bde0cfa9fdf54\nparent 717f93cec57606e83b20c26bedad1e0cdf5154c2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678117320 +0100\ncommitter GitHub <noreply@github.com> 1678117320 +0100\n\nRollup merge of #108807 - MU001999:lint/suspicious_auto_trait_impls, r=lcnr\n\nEmit the suspicious_auto_trait_impls for negative impls as well\n\nFixes #108804\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3279f7ed773d330616e799537cdbf53179cb0eab", "html_url": "https://github.com/rust-lang/rust/commit/3279f7ed773d330616e799537cdbf53179cb0eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3279f7ed773d330616e799537cdbf53179cb0eab/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7dd09fc2f75d7ab6b638725a5bde0cfa9fdf54", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7dd09fc2f75d7ab6b638725a5bde0cfa9fdf54", "html_url": "https://github.com/rust-lang/rust/commit/ab7dd09fc2f75d7ab6b638725a5bde0cfa9fdf54"}, {"sha": "717f93cec57606e83b20c26bedad1e0cdf5154c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/717f93cec57606e83b20c26bedad1e0cdf5154c2", "html_url": "https://github.com/rust-lang/rust/commit/717f93cec57606e83b20c26bedad1e0cdf5154c2"}], "stats": {"total": 137, "additions": 128, "deletions": 9}, "files": [{"sha": "47c47de8cedbaa3515e9b8fb8ddde220d8faebd1", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -478,10 +478,6 @@ fn lint_auto_trait_impl<'tcx>(\n     trait_ref: ty::TraitRef<'tcx>,\n     impl_def_id: LocalDefId,\n ) {\n-    if tcx.impl_polarity(impl_def_id) != ImplPolarity::Positive {\n-        return;\n-    }\n-\n     assert_eq!(trait_ref.substs.len(), 1);\n     let self_ty = trait_ref.self_ty();\n     let (self_type_did, substs) = match self_ty.kind() {"}, {"sha": "34842e5944b463c4003104d7c130b0351f68c638", "filename": "tests/ui/auto-traits/suspicious-negative-impls-lint.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.rs?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -0,0 +1,21 @@\n+#![feature(negative_impls)]\n+#![deny(suspicious_auto_trait_impls)]\n+\n+use std::marker::PhantomData;\n+\n+struct ContainsVec<T>(Vec<T>);\n+impl !Send for ContainsVec<u32> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n+impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+pub struct WithLifetime<'a, T>(&'a (), T);\n+impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+//~^ ERROR\n+//~| WARNING this will change its meaning\n+\n+fn main() {}"}, {"sha": "ee03ea1255757d539112549235b04d1721be4919", "filename": "tests/ui/auto-traits/suspicious-negative-impls-lint.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fsuspicious-negative-impls-lint.stderr?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -0,0 +1,52 @@\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:7:1\n+   |\n+LL | impl !Send for ContainsVec<u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `u32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:6:1\n+   |\n+LL | struct ContainsVec<T>(Vec<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+note: the lint level is defined here\n+  --> $DIR/suspicious-negative-impls-lint.rs:2:9\n+   |\n+LL | #![deny(suspicious_auto_trait_impls)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:12:1\n+   |\n+LL | impl<T> !Send for WithPhantomDataSend<*const T, u8> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `*const T` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:11:1\n+   |\n+LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n+  --> $DIR/suspicious-negative-impls-lint.rs:17:1\n+   |\n+LL | impl<T> !Sync for WithLifetime<'static, Option<T>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `Option<T>` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/suspicious-negative-impls-lint.rs:16:1\n+   |\n+LL | pub struct WithLifetime<'a, T>(&'a (), T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "76a57936e6985b1e3d20a0d1f985eb915cce038f", "filename": "tests/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -13,5 +13,7 @@ impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and nega\n unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() {}"}, {"sha": "020199da99141327256d4ec26af91e30cb2892d6", "filename": "tests/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -16,7 +16,23 @@ LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n LL | unsafe impl<T: 'static> Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:15:1\n+   |\n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `i32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/coherence-conflicting-negative-trait-impl.rs:7:1\n+   |\n+LL | struct TestType<T>(::std::marker::PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "bed782203af508727210c3ca00435ada7eb6c590", "filename": "tests/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -14,7 +14,8 @@ impl TheTrait<TheType> for isize { }\n \n impl TheTrait<isize> for TheType { }\n \n-impl !Send for Vec<isize> { }\n-//~^ ERROR E0117\n+impl !Send for Vec<isize> { } //~ ERROR E0117\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() { }"}, {"sha": "9ec1d0dc32aa4d5f209a3efbb486ae178400046d", "filename": "tests/ui/coherence/coherence-orphan.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -21,6 +21,19 @@ LL | impl !Send for Vec<isize> { }\n    |\n    = note: define and implement a trait or new type instead\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/coherence-orphan.rs:17:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `isize` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0117`."}, {"sha": "5eabc3bfb13848f954d40ef97603f64d2d98f76f", "filename": "tests/ui/issues/issue-106755.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fissues%2Fissue-106755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fissues%2Fissue-106755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.rs?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -15,5 +15,7 @@ impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR found both positive and nega\n unsafe impl<T: 'static> Send for TestType<T> {} //~ ERROR conflicting implementations\n \n impl !Send for TestType<i32> {}\n+//~^ WARNING\n+//~| WARNING this will change its meaning\n \n fn main() {}"}, {"sha": "6b3a8427e7738033059d37ab01d73ffcd739b672", "filename": "tests/ui/issues/issue-106755.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fissues%2Fissue-106755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3279f7ed773d330616e799537cdbf53179cb0eab/tests%2Fui%2Fissues%2Fissue-106755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-106755.stderr?ref=3279f7ed773d330616e799537cdbf53179cb0eab", "patch": "@@ -16,7 +16,23 @@ LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n LL | unsafe impl<T: 'static> Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `TestType<_>`\n \n-error: aborting due to 2 previous errors\n+warning: cross-crate traits with a default impl, like `Send`, should not be specialized\n+  --> $DIR/issue-106755.rs:17:1\n+   |\n+LL | impl !Send for TestType<i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this will change its meaning in a future release!\n+   = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `i32` is not a generic parameter\n+note: try using the same sequence of generic parameters as the struct definition\n+  --> $DIR/issue-106755.rs:9:1\n+   |\n+LL | struct TestType<T>(::std::marker::PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(suspicious_auto_trait_impls)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}]}