{"sha": "3045ffa512db4fd9745278e43c8e775db2d0d19d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNDVmZmE1MTJkYjRmZDk3NDUyNzhlNDNjOGU3NzVkYjJkMGQxOWQ=", "commit": {"author": {"name": "Tristan Burgess", "email": "tburgessdev@gmail.com", "date": "2018-08-22T04:02:07Z"}, "committer": {"name": "Tristan Burgess", "email": "tburgessdev@gmail.com", "date": "2018-08-22T22:56:16Z"}, "message": "52985: better cycle error for existential types\n  - Original cycle error diagnostics PR'd against this issue caught\npanic-causing error while resolving std::mem::transmute calls\n  - Now, catch invalid use case of not providing a concrete sized type\nbehind existential type in definining use case.\n  - Update relevant test to reflect this new error\n\n52985: revert normalize query changes\n      - PR 53588 invalidates 53316, causing a correct cycle error to occur\n    with a good span.\n      - Don't need to revert the whole merge as the test files are\n    still fine, just need to revert the normalize query changes.\n      - It should now be correct that infinite recursion detected during\n    normalize query type folding is a bug, should have been caught earlier\n    (when resolving the existential type's defining use cases).\n\n52985: code review impl\n  - Only cause cycle error if anonymous type resolves to anonymous type\nthat has the same def id (is the same type) as the original (parent)\ntype.\n  - Add test case to cover this case for existential types.\n\n52985: remove Ty prefix from TyAnon\n  - To align with changes per commit 6f637da50c56a22f745fd056691da8c86824cd9b", "tree": {"sha": "b3b2e4846e75fec65816200443618575816f3c9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3b2e4846e75fec65816200443618575816f3c9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3045ffa512db4fd9745278e43c8e775db2d0d19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3045ffa512db4fd9745278e43c8e775db2d0d19d", "html_url": "https://github.com/rust-lang/rust/commit/3045ffa512db4fd9745278e43c8e775db2d0d19d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3045ffa512db4fd9745278e43c8e775db2d0d19d/comments", "author": {"login": "tristanburgess", "id": 3913590, "node_id": "MDQ6VXNlcjM5MTM1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3913590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tristanburgess", "html_url": "https://github.com/tristanburgess", "followers_url": "https://api.github.com/users/tristanburgess/followers", "following_url": "https://api.github.com/users/tristanburgess/following{/other_user}", "gists_url": "https://api.github.com/users/tristanburgess/gists{/gist_id}", "starred_url": "https://api.github.com/users/tristanburgess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tristanburgess/subscriptions", "organizations_url": "https://api.github.com/users/tristanburgess/orgs", "repos_url": "https://api.github.com/users/tristanburgess/repos", "events_url": "https://api.github.com/users/tristanburgess/events{/privacy}", "received_events_url": "https://api.github.com/users/tristanburgess/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tristanburgess", "id": 3913590, "node_id": "MDQ6VXNlcjM5MTM1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3913590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tristanburgess", "html_url": "https://github.com/tristanburgess", "followers_url": "https://api.github.com/users/tristanburgess/followers", "following_url": "https://api.github.com/users/tristanburgess/following{/other_user}", "gists_url": "https://api.github.com/users/tristanburgess/gists{/gist_id}", "starred_url": "https://api.github.com/users/tristanburgess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tristanburgess/subscriptions", "organizations_url": "https://api.github.com/users/tristanburgess/orgs", "repos_url": "https://api.github.com/users/tristanburgess/repos", "events_url": "https://api.github.com/users/tristanburgess/events{/privacy}", "received_events_url": "https://api.github.com/users/tristanburgess/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75b0471a8b87c44e0bd953d2a5c36d896128723", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b0471a8b87c44e0bd953d2a5c36d896128723", "html_url": "https://github.com/rust-lang/rust/commit/b75b0471a8b87c44e0bd953d2a5c36d896128723"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "45f026c9b68bb7caf657913353d02827e2ae6837", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=3045ffa512db4fd9745278e43c8e775db2d0d19d", "patch": "@@ -12,15 +12,15 @@\n //! which folds deeply, invoking the underlying\n //! `normalize_projection_ty` query when it encounters projections.\n \n-use infer::at::At;\n use infer::{InferCtxt, InferOk};\n-use mir::interpret::{ConstValue, GlobalId};\n+use infer::at::At;\n+use mir::interpret::{GlobalId, ConstValue};\n use rustc_data_structures::small_vec::SmallVec;\n-use traits::project::Normalized;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n+use traits::project::Normalized;\n+use ty::{self, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt};\n \n use super::NoSolution;\n \n@@ -121,36 +121,9 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         let concrete_ty = generic_ty.subst(self.tcx(), substs);\n                         self.anon_depth += 1;\n                         if concrete_ty == ty {\n-                            // The type in question can only be inferred in terms of itself. This\n-                            // is likely a user code issue, not a compiler issue. Thus, we will\n-                            // induce a cycle error by calling the parent query again on the type.\n-                            //\n-                            // FIXME: Perhaps a better solution would be to have fold_ty()\n-                            // itself be a query. Then, a type fold cycle would be detected\n-                            // and reported more naturally as part of the query system, rather\n-                            // than forcing it here.\n-                            //\n-                            // FIXME: Need a better span than just one pointing to the type def.\n-                            // Should point to a defining use of the type that results in this\n-                            // un-normalizable state.\n-                            if let Some(param_env_lifted) =\n-                                self.tcx().lift_to_global(&self.param_env)\n-                            {\n-                                if let Some(ty_lifted) = self.tcx().lift_to_global(&concrete_ty) {\n-                                    let span = self.tcx().def_span(def_id);\n-                                    self.tcx()\n-                                        .global_tcx()\n-                                        .at(span)\n-                                        .normalize_ty_after_erasing_regions(\n-                                            param_env_lifted.and(ty_lifted),\n-                                        );\n-                                    self.tcx().sess.abort_if_errors();\n-                                }\n-                            }\n-                            // If a cycle error can't be emitted, indicate a NoSolution error\n-                            // and let the caller handle it.\n-                            self.error = true;\n-                            return concrete_ty;\n+                            bug!(\"infinite recursion generic_ty: {:#?}, substs: {:#?}, \\\n+                                  concrete_ty: {:#?}, ty: {:#?}\", generic_ty, substs, concrete_ty,\n+                                  ty);\n                         }\n                         let folded_ty = self.fold_ty(concrete_ty);\n                         self.anon_depth -= 1;\n@@ -176,8 +149,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                 let gcx = self.infcx.tcx.global_tcx();\n \n                 let mut orig_values = SmallVec::new();\n-                let c_data = self.infcx\n-                    .canonicalize_query(&self.param_env.and(*data), &mut orig_values);\n+                let c_data =\n+                    self.infcx.canonicalize_query(&self.param_env.and(*data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n                 match gcx.normalize_projection_ty(c_data) {"}, {"sha": "72103caadf623c7bb06f7c29f6244da4ca1cb9f6", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=3045ffa512db4fd9745278e43c8e775db2d0d19d", "patch": "@@ -492,6 +492,14 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 })\n             };\n \n+            if let ty::Anon(defin_ty_def_id, _substs) = definition_ty.sty {\n+                if def_id == defin_ty_def_id {\n+                  // Concrete type resolved to the existential type itself\n+                  // Force a cycle error\n+                  self.tcx().at(span).type_of(defin_ty_def_id);\n+                }\n+            }\n+\n             let old = self.tables.concrete_existential_types.insert(def_id, definition_ty);\n             if let Some(old) = old {\n                 if old != definition_ty {"}, {"sha": "aac72c71d030850b26b7fd8963fce28331047eb4", "filename": "src/test/ui/existential_types/nested_existential_types.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fnested_existential_types.rs?ref=3045ffa512db4fd9745278e43c8e775db2d0d19d", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(existential_type)]\n+// compile-pass\n+mod my_mod {\n+  use std::fmt::Debug;\n+\n+  pub existential type Foo: Debug;\n+  pub existential type Foot: Debug;\n+\n+  pub fn get_foo() -> Foo {\n+      5i32\n+  }\n+\n+  pub fn get_foot() -> Foot {\n+      get_foo()\n+  }\n+}\n+\n+fn main() {\n+    let _: my_mod::Foot = my_mod::get_foot();\n+}\n+"}, {"sha": "06e40fd6ab554ff8aec2d8a5aa52e4138514fe2b", "filename": "src/test/ui/existential_types/no_inferrable_concrete_type.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3045ffa512db4fd9745278e43c8e775db2d0d19d/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fno_inferrable_concrete_type.stderr?ref=3045ffa512db4fd9745278e43c8e775db2d0d19d", "patch": "@@ -1,10 +1,15 @@\n-error[E0391]: cycle detected when normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Foo }`\n+error[E0391]: cycle detected when processing `Foo`\n   --> $DIR/no_inferrable_concrete_type.rs:16:1\n    |\n LL | existential type Foo: Copy; //~ cycle detected\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: Foo }`, completing the cycle\n+note: ...which requires processing `bar`...\n+  --> $DIR/no_inferrable_concrete_type.rs:19:23\n+   |\n+LL | fn bar(x: Foo) -> Foo { x }\n+   |                       ^^^^^\n+   = note: ...which again requires processing `Foo`, completing the cycle\n \n error: aborting due to previous error\n "}]}