{"sha": "ae838f76455461031119c9c6f33b0791c33c4fee", "node_id": "C_kwDOAAsO6NoAKGFlODM4Zjc2NDU1NDYxMDMxMTE5YzljNmYzM2IwNzkxYzMzYzRmZWU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-08-26T12:08:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T12:08:44Z"}, "message": "Rollup merge of #99742 - sigaloid:master, r=thomcc\n\nAdd comments about stdout locking\n\nThis is the source of some confusion regarding the `println!` macro:\n* https://llogiq.github.io/2017/06/01/perf-pitfalls.html#unbuffered-io\n* https://news.ycombinator.com/item?id=18794930\n* https://reddit.com/r/rust/comments/5puyx2/why_is_println_so_slow/dcua5g5/\n* https://reddit.com/r/rust/comments/ab7hsi/comparing_pythagorean_triples_in_c_d_and_rust/ecy7ql8/\n\nIn some of these cases it's not the locking behavior where the bottleneck lies, but it's still mentioned as a surprise when, eg, benchmarking a million `println!`'s in a very tight loop.\n\nIf there's any stylistic problems please feel free to correct me! This is my first contribution and I want to get it right :crab:", "tree": {"sha": "aaba5320627defd4127b9333146fb8ffc2e8c163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaba5320627defd4127b9333146fb8ffc2e8c163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae838f76455461031119c9c6f33b0791c33c4fee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCLfMCRBK7hj4Ov3rIwAAEsEIAIhaI6wlZ6xEPl6fQ1Zi7V0g\nJTmv+GDuRLnoeTV4iJwR+IV7Ksni0FBYpqQcYYP6aXNMvd/lQAGmZTU9awrffoXw\nyBRQ/2qqRCtSgmcUZiUr8eChFdlpwwA4Fslqmd4yEtkWBcwnLa74PHRe73xqtCOs\nsLJnMbZOb0tPgNWobVSqu4R5ft3a1H4nZcCeYmztAjsAZAlOT/4P+30YYUWNqU2/\nfi3Xy+Y/O+4U1EKTDK306V7F+c6iDUad12dNeLCbZcuY7//hNgKXdSF4Gqa/5ypX\nkKHo1akUkKW1WgWuY+Qv6ul2a8xPyqbTBQ6gGlna3hm1vwrIikGrTotSm8tWRqM=\n=cPCt\n-----END PGP SIGNATURE-----\n", "payload": "tree aaba5320627defd4127b9333146fb8ffc2e8c163\nparent e3148dc7c48e1c96b05c85f57394308a6e46c1ed\nparent fab36d1713504824be4eefdd7614cf9e79ca7358\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1661515724 +0200\ncommitter GitHub <noreply@github.com> 1661515724 +0200\n\nRollup merge of #99742 - sigaloid:master, r=thomcc\n\nAdd comments about stdout locking\n\nThis is the source of some confusion regarding the `println!` macro:\n* https://llogiq.github.io/2017/06/01/perf-pitfalls.html#unbuffered-io\n* https://news.ycombinator.com/item?id=18794930\n* https://reddit.com/r/rust/comments/5puyx2/why_is_println_so_slow/dcua5g5/\n* https://reddit.com/r/rust/comments/ab7hsi/comparing_pythagorean_triples_in_c_d_and_rust/ecy7ql8/\n\nIn some of these cases it's not the locking behavior where the bottleneck lies, but it's still mentioned as a surprise when, eg, benchmarking a million `println!`'s in a very tight loop.\n\nIf there's any stylistic problems please feel free to correct me! This is my first contribution and I want to get it right :crab:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae838f76455461031119c9c6f33b0791c33c4fee", "html_url": "https://github.com/rust-lang/rust/commit/ae838f76455461031119c9c6f33b0791c33c4fee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae838f76455461031119c9c6f33b0791c33c4fee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3148dc7c48e1c96b05c85f57394308a6e46c1ed", "html_url": "https://github.com/rust-lang/rust/commit/e3148dc7c48e1c96b05c85f57394308a6e46c1ed"}, {"sha": "fab36d1713504824be4eefdd7614cf9e79ca7358", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab36d1713504824be4eefdd7614cf9e79ca7358", "html_url": "https://github.com/rust-lang/rust/commit/fab36d1713504824be4eefdd7614cf9e79ca7358"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "a5003c66fcad72224b5ebc007c60d95c0ff0ba5e", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae838f76455461031119c9c6f33b0791c33c4fee/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae838f76455461031119c9c6f33b0791c33c4fee/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=ae838f76455461031119c9c6f33b0791c33c4fee", "patch": "@@ -27,12 +27,23 @@ macro_rules! panic {\n /// necessary to use [`io::stdout().flush()`][flush] to ensure the output is emitted\n /// immediately.\n ///\n+/// The `print!` macro will lock the standard output on each call. If you call\n+/// `print!` within a hot loop, this behavior may be the bottleneck of the loop.\n+/// To avoid this, lock stdout with [`io::stdout().lock()`][lock]:\n+/// ```\n+/// use std::io::{stdout, Write};\n+///\n+/// let mut lock = stdout().lock();\n+/// write!(lock, \"hello world\").unwrap();\n+/// ```\n+///\n /// Use `print!` only for the primary output of your program. Use\n /// [`eprint!`] instead to print error and progress messages.\n ///\n /// [flush]: crate::io::Write::flush\n /// [`println!`]: crate::println\n /// [`eprint!`]: crate::eprint\n+/// [lock]: crate::io::Stdout\n ///\n /// # Panics\n ///\n@@ -75,11 +86,22 @@ macro_rules! print {\n /// This macro uses the same syntax as [`format!`], but writes to the standard output instead.\n /// See [`std::fmt`] for more information.\n ///\n+/// The `println!` macro will lock the standard output on each call. If you call\n+/// `println!` within a hot loop, this behavior may be the bottleneck of the loop.\n+/// To avoid this, lock stdout with [`io::stdout().lock()`][lock]:\n+/// ```\n+/// use std::io::{stdout, Write};\n+///\n+/// let mut lock = stdout().lock();\n+/// writeln!(lock, \"hello world\").unwrap();\n+/// ```\n+///\n /// Use `println!` only for the primary output of your program. Use\n /// [`eprintln!`] instead to print error and progress messages.\n ///\n /// [`std::fmt`]: crate::fmt\n /// [`eprintln!`]: crate::eprintln\n+/// [lock]: crate::io::Stdout\n ///\n /// # Panics\n ///"}]}