{"sha": "0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "node_id": "C_kwDOAAsO6NoAKDBkNzZiOTRjOTBhMjBjMjBkM2U1N2VhMWFiMDNkOWFmYTAwZGVlNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T22:14:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T22:14:31Z"}, "message": "Auto merge of #13866 - Nilstrieb:rustc_safe_intrinsic, r=Veykril\n\nUse `rustc_safe_intrinsic` attribute to check for intrinsic safety\n\nInstead of maintaining a list that is poorly kept in sync we can just use the attribute.\n\nThis will make new RA versions unusable with old toolchains that don't have the attribute yet. Should we keep maintaining the list as a fallback or just don't care?", "tree": {"sha": "dca685def10263280b33be3a1a5ee513f1438f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca685def10263280b33be3a1a5ee513f1438f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "html_url": "https://github.com/rust-lang/rust/commit/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bc37c849d40bfe27be3558fbef8f18bef42f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/09bc37c849d40bfe27be3558fbef8f18bef42f84", "html_url": "https://github.com/rust-lang/rust/commit/09bc37c849d40bfe27be3558fbef8f18bef42f84"}, {"sha": "72afcf2cadbd1434150049e4102ccc89251772a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/72afcf2cadbd1434150049e4102ccc89251772a0", "html_url": "https://github.com/rust-lang/rust/commit/72afcf2cadbd1434150049e4102ccc89251772a0"}], "stats": {"total": 62, "additions": 14, "deletions": 48}, "files": [{"sha": "f7c1e683d0d20366df5ba7e87c910934deadca89", "filename": "crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "patch": "@@ -350,6 +350,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(rustc_safe_intrinsic, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\","}, {"sha": "1f3470a36222512b50500dd7c3c6f28ab504b7b6", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n     ConstParamId, FunctionId, GenericDefId, ItemContainerId, Lookup, TraitId, TypeAliasId,\n     TypeOrConstParamId, TypeParamId,\n };\n-use hir_expand::name::{known, Name};\n+use hir_expand::name::Name;\n use itertools::Either;\n use rustc_hash::FxHashSet;\n use smallvec::{smallvec, SmallVec};\n@@ -335,54 +335,18 @@ pub fn is_fn_unsafe_to_call(db: &dyn HirDatabase, func: FunctionId) -> bool {\n             // Function in an `extern` block are always unsafe to call, except when it has\n             // `\"rust-intrinsic\"` ABI there are a few exceptions.\n             let id = block.lookup(db.upcast()).id;\n-            !matches!(\n-                id.item_tree(db.upcast())[id.value].abi.as_deref(),\n-                Some(\"rust-intrinsic\") if !is_intrinsic_fn_unsafe(&data.name)\n-            )\n+\n+            let is_intrinsic =\n+                id.item_tree(db.upcast())[id.value].abi.as_deref() == Some(\"rust-intrinsic\");\n+\n+            if is_intrinsic {\n+                // Intrinsics are unsafe unless they have the rustc_safe_intrinsic attribute\n+                !data.attrs.by_key(\"rustc_safe_intrinsic\").exists()\n+            } else {\n+                // Extern items are always unsafe\n+                true\n+            }\n         }\n         _ => false,\n     }\n }\n-\n-/// Returns `true` if the given intrinsic is unsafe to call, or false otherwise.\n-fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n-    // Should be kept in sync with https://github.com/rust-lang/rust/blob/532d2b14c05f9bc20b2d27cbb5f4550d28343a36/compiler/rustc_typeck/src/check/intrinsic.rs#L72-L106\n-    ![\n-        known::abort,\n-        known::add_with_overflow,\n-        known::bitreverse,\n-        known::black_box,\n-        known::bswap,\n-        known::caller_location,\n-        known::ctlz,\n-        known::ctpop,\n-        known::cttz,\n-        known::discriminant_value,\n-        known::forget,\n-        known::likely,\n-        known::maxnumf32,\n-        known::maxnumf64,\n-        known::min_align_of,\n-        known::minnumf32,\n-        known::minnumf64,\n-        known::mul_with_overflow,\n-        known::needs_drop,\n-        known::ptr_guaranteed_eq,\n-        known::ptr_guaranteed_ne,\n-        known::rotate_left,\n-        known::rotate_right,\n-        known::rustc_peek,\n-        known::saturating_add,\n-        known::saturating_sub,\n-        known::size_of,\n-        known::sub_with_overflow,\n-        known::type_id,\n-        known::type_name,\n-        known::unlikely,\n-        known::variant_count,\n-        known::wrapping_add,\n-        known::wrapping_mul,\n-        known::wrapping_sub,\n-    ]\n-    .contains(name)\n-}"}, {"sha": "ea1ea5a216dfc9b83025df7ea988b5976bd80836", "filename": "crates/ide-diagnostics/src/handlers/missing_unsafe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d76b94c90a20c20d3e57ea1ab03d9afa00dee72/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_unsafe.rs?ref=0d76b94c90a20c20d3e57ea1ab03d9afa00dee72", "patch": "@@ -86,6 +86,7 @@ fn main() {\n         check_diagnostics(\n             r#\"\n extern \"rust-intrinsic\" {\n+    #[rustc_safe_intrinsic]\n     pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n     pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n }"}]}