{"sha": "81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "node_id": "C_kwDOAAsO6NoAKDgxZDI2ZTczMGVjY2IzYzdiNTFkNWQzNmIwNjk1MGJmZTg0YTgxZjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T09:21:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-24T09:21:44Z"}, "message": "Auto merge of #13667 - Veykril:detached-files-sysroot, r=Veykril\n\nHandle sysroot config in detached-files workspaces", "tree": {"sha": "0b8390e3340f4f16e656f7a66bb7d093b689e810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8390e3340f4f16e656f7a66bb7d093b689e810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "html_url": "https://github.com/rust-lang/rust/commit/81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d26e730eccb3c7b51d5d36b06950bfe84a81f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26562973b3482a635416b2b663a13016d4d90e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/26562973b3482a635416b2b663a13016d4d90e20", "html_url": "https://github.com/rust-lang/rust/commit/26562973b3482a635416b2b663a13016d4d90e20"}, {"sha": "2300c9de83d0dbff1f27546a04f12a1ebe59c9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2300c9de83d0dbff1f27546a04f12a1ebe59c9e3", "html_url": "https://github.com/rust-lang/rust/commit/2300c9de83d0dbff1f27546a04f12a1ebe59c9e3"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "aa54342e39d7130bf06543d4a33460c36a261a10", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/81d26e730eccb3c7b51d5d36b06950bfe84a81f6/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d26e730eccb3c7b51d5d36b06950bfe84a81f6/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "patch": "@@ -93,7 +93,7 @@ pub enum ProjectWorkspace {\n     // //\n     /// Project with a set of disjoint files, not belonging to any particular workspace.\n     /// Backed by basic sysroot crates for basic completion and highlighting.\n-    DetachedFiles { files: Vec<AbsPathBuf>, sysroot: Sysroot, rustc_cfg: Vec<CfgFlag> },\n+    DetachedFiles { files: Vec<AbsPathBuf>, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n }\n \n impl fmt::Debug for ProjectWorkspace {\n@@ -133,7 +133,7 @@ impl fmt::Debug for ProjectWorkspace {\n             ProjectWorkspace::DetachedFiles { files, sysroot, rustc_cfg } => f\n                 .debug_struct(\"DetachedFiles\")\n                 .field(\"n_files\", &files.len())\n-                .field(\"n_sysroot_crates\", &sysroot.crates().len())\n+                .field(\"sysroot\", &sysroot.is_some())\n                 .field(\"n_rustc_cfg\", &rustc_cfg.len())\n                 .finish(),\n         }\n@@ -191,10 +191,7 @@ impl ProjectWorkspace {\n                 let sysroot = match &config.sysroot {\n                     Some(RustcSource::Path(path)) => {\n                         Some(Sysroot::with_sysroot_dir(path.clone()).with_context(|| {\n-                            format!(\n-                                \"Failed to find sysroot for Cargo.toml file {}.\",\n-                                cargo_toml.display()\n-                            )\n+                            format!(\"Failed to find sysroot at {}.\", path.display())\n                         })?)\n                     }\n                     Some(RustcSource::Discover) => Some(\n@@ -291,14 +288,29 @@ impl ProjectWorkspace {\n         Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n     }\n \n-    pub fn load_detached_files(detached_files: Vec<AbsPathBuf>) -> Result<ProjectWorkspace> {\n-        let sysroot = Sysroot::discover(\n-            detached_files\n-                .first()\n-                .and_then(|it| it.parent())\n-                .ok_or_else(|| format_err!(\"No detached files to load\"))?,\n-            &Default::default(),\n-        )?;\n+    pub fn load_detached_files(\n+        detached_files: Vec<AbsPathBuf>,\n+        config: &CargoConfig,\n+    ) -> Result<ProjectWorkspace> {\n+        let sysroot = match &config.sysroot {\n+            Some(RustcSource::Path(path)) => Some(\n+                Sysroot::with_sysroot_dir(path.clone())\n+                    .with_context(|| format!(\"Failed to find sysroot at {}.\", path.display()))?,\n+            ),\n+            Some(RustcSource::Discover) => {\n+                let dir = &detached_files\n+                    .first()\n+                    .and_then(|it| it.parent())\n+                    .ok_or_else(|| format_err!(\"No detached files to load\"))?;\n+                Some(Sysroot::discover(dir, &config.extra_env).with_context(|| {\n+                    format!(\"Failed to find sysroot in {}. Is rust-src installed?\", dir.display())\n+                })?)\n+            }\n+            None => None,\n+        };\n+        if let Some(sysroot) = &sysroot {\n+            tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n+        }\n         let rustc_cfg = rustc_cfg::get(None, None, &Default::default());\n         Ok(ProjectWorkspace::DetachedFiles { files: detached_files, sysroot, rustc_cfg })\n     }\n@@ -479,21 +491,25 @@ impl ProjectWorkspace {\n                     include: vec![detached_file.clone()],\n                     exclude: Vec::new(),\n                 })\n-                .chain(mk_sysroot(Some(sysroot)))\n+                .chain(mk_sysroot(sysroot.as_ref()))\n                 .collect(),\n         }\n     }\n \n     pub fn n_packages(&self) -> usize {\n         match self {\n-            ProjectWorkspace::Json { project, .. } => project.n_crates(),\n+            ProjectWorkspace::Json { project, sysroot, .. } => {\n+                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.crates().len());\n+                sysroot_package_len + project.n_crates()\n+            }\n             ProjectWorkspace::Cargo { cargo, sysroot, rustc, .. } => {\n                 let rustc_package_len = rustc.as_ref().map_or(0, |it| it.packages().len());\n                 let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.crates().len());\n                 cargo.packages().len() + sysroot_package_len + rustc_package_len\n             }\n             ProjectWorkspace::DetachedFiles { sysroot, files, .. } => {\n-                sysroot.crates().len() + files.len()\n+                let sysroot_package_len = sysroot.as_ref().map_or(0, |it| it.crates().len());\n+                sysroot_package_len + files.len()\n             }\n         }\n     }\n@@ -805,12 +821,14 @@ fn detached_files_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     detached_files: &[AbsPathBuf],\n-    sysroot: &Sysroot,\n+    sysroot: &Option<Sysroot>,\n ) -> CrateGraph {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n-    let (public_deps, _libproc_macro) =\n-        sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load);\n+    let (public_deps, _libproc_macro) = match sysroot {\n+        Some(sysroot) => sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load),\n+        None => (SysrootPublicDeps::default(), None),\n+    };\n \n     let mut cfg_options = CfgOptions::default();\n     cfg_options.extend(rustc_cfg);"}, {"sha": "748a189c203eb5e08c52bf653e981b9365b0c04c", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81d26e730eccb3c7b51d5d36b06950bfe84a81f6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d26e730eccb3c7b51d5d36b06950bfe84a81f6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=81d26e730eccb3c7b51d5d36b06950bfe84a81f6", "patch": "@@ -158,8 +158,10 @@ impl GlobalState {\n                     .collect::<Vec<_>>();\n \n                 if !detached_files.is_empty() {\n-                    workspaces\n-                        .push(project_model::ProjectWorkspace::load_detached_files(detached_files));\n+                    workspaces.push(project_model::ProjectWorkspace::load_detached_files(\n+                        detached_files,\n+                        &cargo_config,\n+                    ));\n                 }\n \n                 tracing::info!(\"did fetch workspaces {:?}\", workspaces);"}]}