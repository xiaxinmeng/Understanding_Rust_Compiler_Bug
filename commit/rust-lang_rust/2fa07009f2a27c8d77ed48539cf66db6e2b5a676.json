{"sha": "2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTA3MDA5ZjJhMjdjOGQ3N2VkNDg1MzljZjY2ZGI2ZTJiNWE2NzY=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-13T16:45:02Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T12:43:08Z"}, "message": "Windows shims for env var emulation\n\nShims for GetEnvironmentVariableW / SetEnvironmentVariableW /\nGetEnvironmentStringsW.\nPasses test 'tests/run-pass/env.rs'", "tree": {"sha": "65f7504b68a0d393b3a3c157278aa9f65d20a237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65f7504b68a0d393b3a3c157278aa9f65d20a237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "html_url": "https://github.com/rust-lang/rust/commit/2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2a9c7baed31d29c02d62acfcf49e61af1c37f12", "html_url": "https://github.com/rust-lang/rust/commit/e2a9c7baed31d29c02d62acfcf49e61af1c37f12"}], "stats": {"total": 152, "additions": 136, "deletions": 16}, "files": [{"sha": "97d74ad0e069313eb981a1192fda864452d840cc", "filename": "src/shims/env.rs", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "patch": "@@ -1,6 +1,7 @@\n use std::ffi::{OsString, OsStr};\n use std::env;\n use std::convert::TryFrom;\n+use std::collections::hash_map::Values;\n \n use crate::stacked_borrows::Tag;\n use crate::rustc_target::abi::LayoutOf;\n@@ -40,6 +41,10 @@ impl<'tcx> EnvVars<'tcx> {\n         }\n         ecx.update_environ()\n     }\n+\n+    pub(super) fn values(&self) -> InterpResult<'tcx, Values<'_, OsString, Pointer<Tag>>> {\n+        Ok(self.map.values())\n+    }\n }\n \n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n@@ -82,6 +87,79 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    fn getenvironmentvariablew(\n+        &mut self,\n+        name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName\n+        buf_op: OpTy<'tcx, Tag>, // LPWSTR  lpBuffer\n+        size_op: OpTy<'tcx, Tag>, // DWORD   nSize\n+    ) -> InterpResult<'tcx, u64> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n+\n+        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name = this.read_os_str_from_wide_str(name_ptr)?;\n+        Ok(match this.machine.env_vars.map.get(&name) {\n+            Some(var_ptr) => {\n+                // The offset is used to strip the \"{name}=\" part of the string.\n+                let name_offset_bytes =\n+                    u64::try_from(name.len()).unwrap().checked_add(1).unwrap().checked_mul(2).unwrap();\n+                let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n+\n+                let var_size = u64::try_from(this.read_os_str_from_wide_str(var_ptr)?.len()).unwrap();\n+                let buf_size = u64::try_from(this.read_scalar(size_op)?.to_i32()?).unwrap();\n+                let return_val = if var_size.checked_add(1).unwrap() > buf_size {\n+                    // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n+                    // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n+                    var_size + 1\n+                } else {\n+                    let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n+                    for i in 0..var_size {\n+                        this.memory.copy(\n+                            this.force_ptr(var_ptr.ptr_offset(Size::from_bytes(i) * 2, this)?)?,\n+                            this.force_ptr(buf_ptr.ptr_offset(Size::from_bytes(i) * 2, this)?)?,\n+                            Size::from_bytes(2),\n+                            true,\n+                        )?;\n+                    }\n+                    // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n+                    // not including the terminating null character.\n+                    var_size\n+                };\n+                return_val\n+            }\n+            None => {\n+                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n+                0 // return zero upon failure\n+            }\n+        })\n+    }\n+\n+    fn getenvironmentstringsw(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"GetEnvironmentStringsW\");\n+\n+        // Info on layout of environment blocks in Windows: \n+        // https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\n+        let mut env_vars = std::ffi::OsString::new();\n+        for &item in this.machine.env_vars.values()? {\n+            let env_var = this.read_os_str_from_target_str(Scalar::from(item))?;\n+            env_vars.push(env_var);\n+            env_vars.push(\"\\0\");\n+        }\n+\n+        // Allocate environment block\n+        let tcx = this.tcx;\n+        let env_block_size = env_vars.len().checked_add(1).unwrap();\n+        let env_block_type = tcx.mk_array(tcx.types.u16, u64::try_from(env_block_size).unwrap());\n+        let env_block_place = this.allocate(this.layout_of(env_block_type)?, MiriMemoryKind::WinHeap.into());\n+        \n+        // Store environment variables to environment block\n+        // Final null terminator(block terminator) is pushed by `write_os_str_to_wide_str`\n+        this.write_os_str_to_wide_str(&env_vars, env_block_place, u64::try_from(env_block_size).unwrap())?;\n+\n+        Ok(env_block_place.ptr)\n+    }\n+\n     fn setenv(\n         &mut self,\n         name_op: OpTy<'tcx, Tag>,\n@@ -118,6 +196,46 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    fn setenvironmentvariablew(\n+        &mut self,\n+        name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName,\n+        value_op: OpTy<'tcx, Tag>, // LPCWSTR lpValue,\n+    ) -> InterpResult<'tcx, i32> {\n+        let mut this = self.eval_context_mut();\n+        this.assert_target_os(\"windows\", \"SetEnvironmentVariableW\");\n+\n+        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n+\n+        let mut new = None;\n+        if !this.is_null(name_ptr)? {\n+            let name = this.read_os_str_from_target_str(name_ptr)?;\n+            if this.is_null(value_ptr)? {\n+                // Delete environment variable `{name}`\n+                if let Some(var) = this.machine.env_vars.map.remove(&name) {\n+                    this.memory.deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+                    this.update_environ()?;\n+                }\n+                return Ok(1);  // return non-zero on success\n+            }\n+            if !name.is_empty() && !name.to_string_lossy().contains('=') {\n+                let value = this.read_os_str_from_target_str(value_ptr)?;\n+                new = Some((name.to_owned(), value.to_owned()));\n+            }\n+        }\n+        if let Some((name, value)) = new {\n+            let var_ptr = alloc_env_var_as_target_str(&name, &value, &mut this)?;\n+            if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n+                this.memory\n+                    .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n+            }\n+            this.update_environ()?;\n+            Ok(1) // return non-zero on success\n+        } else {\n+            Ok(0)\n+        }\n+    }\n+\n     fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         let target_os = &this.tcx.sess.target.target.target_os;\n@@ -126,7 +244,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let mut success = None;\n         if !this.is_null(name_ptr)? {\n-            let name = this.read_os_str_from_c_str(name_ptr)?.to_owned();\n+            let name = this.read_os_str_from_target_str(name_ptr)?.to_owned();\n             if !name.is_empty() && !name.to_string_lossy().contains('=') {\n                 success = Some(this.machine.env_vars.map.remove(&name));\n             }"}, {"sha": "057f1c06a8505b7c4599765d976ec914ad6562a7", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "patch": "@@ -23,22 +23,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // Environment related shims\n             \"GetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPWSTR lpBuffer (32-bit pointer to a string of 16-bit Unicode chars)\n-                // lpBuffer : ptr to buffer that receives contents of the env_var as a null-terminated string.\n-                // Return `# of chars` stored in the buffer pointed to by lpBuffer, excluding null-terminator.\n-                // Return 0 upon failure.\n-\n-                // This is not the env var you are looking for.\n-                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n-                this.write_null(dest)?;\n+                let result = this.getenvironmentvariablew(args[0], args[1], args[2])?;\n+                this.write_scalar(Scalar::from_uint(result, dest.layout.size), dest)?;\n             }\n \n             \"SetEnvironmentVariableW\" => {\n-                // args[0] : LPCWSTR lpName (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // args[1] : LPCWSTR lpValue (32-bit ptr to a const string of 16-bit Unicode chars)\n-                // Return nonzero if success, else return 0.\n-                throw_unsup_format!(\"can't set environment variable on Windows\");\n+                let result = this.setenvironmentvariablew(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n+            \"GetEnvironmentStringsW\" => {\n+                let result = this.getenvironmentstringsw()?;\n+                // If the function succeeds, the return value is a pointer to the environment block of the current process.\n+                this.write_scalar(result, dest)?;\n+            }\n+\n+            \"FreeEnvironmentStringsW\" => {\n+                let old_vars_ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let result = this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::WinHeap.into()).is_ok();\n+                // If the function succeeds, the return value is nonzero.\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n             // File related shims"}, {"sha": "23a3724ff7fd3117c7a9865b2dfaab52f828e978", "filename": "tests/run-pass/env.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/tests%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa07009f2a27c8d77ed48539cf66db6e2b5a676/tests%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.rs?ref=2fa07009f2a27c8d77ed48539cf66db6e2b5a676", "patch": "@@ -1,5 +1,3 @@\n-//ignore-windows: TODO env var emulation stubbed out on Windows\n-\n use std::env;\n \n fn main() {"}]}