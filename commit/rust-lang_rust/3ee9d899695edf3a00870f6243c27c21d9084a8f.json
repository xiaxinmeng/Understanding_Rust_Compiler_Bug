{"sha": "3ee9d899695edf3a00870f6243c27c21d9084a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTlkODk5Njk1ZWRmM2EwMDg3MGY2MjQzYzI3YzIxZDkwODRhOGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-05-28T16:27:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-05-28T16:34:15Z"}, "message": "extend from_raw_parts docs for slices and strs to mention alignment requirement", "tree": {"sha": "ccda38a4ee1f6e6726112b3c26e284e5629814cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccda38a4ee1f6e6726112b3c26e284e5629814cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee9d899695edf3a00870f6243c27c21d9084a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee9d899695edf3a00870f6243c27c21d9084a8f", "html_url": "https://github.com/rust-lang/rust/commit/3ee9d899695edf3a00870f6243c27c21d9084a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee9d899695edf3a00870f6243c27c21d9084a8f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1d69d6b520046108dae04c625f15ea35127388", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1d69d6b520046108dae04c625f15ea35127388", "html_url": "https://github.com/rust-lang/rust/commit/2b1d69d6b520046108dae04c625f15ea35127388"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "d52cc8cbe3f5b7605dd8bdd0a5a4ddbf9169e0b6", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9d899695edf3a00870f6243c27c21d9084a8f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9d899695edf3a00870f6243c27c21d9084a8f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=3ee9d899695edf3a00870f6243c27c21d9084a8f", "patch": "@@ -3839,10 +3839,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n /// valid for `len` elements, nor whether the lifetime inferred is a suitable\n /// lifetime for the returned slice.\n ///\n-/// `p` must be non-null, even for zero-length slices, because non-zero bits\n-/// are required to distinguish between a zero-length slice within `Some()`\n-/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n-/// for zero-length slices, though.\n+/// `p` must be non-null and aligned, even for zero-length slices, as is\n+/// required for all references. However, for zero-length slices, `p` can be\n+/// a bogus non-dereferencable pointer such as [`NonNull::dangling()`].\n ///\n /// # Caveat\n ///\n@@ -3864,6 +3863,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n ///     let slice = slice::from_raw_parts(ptr, amt);\n /// }\n /// ```\n+///\n+/// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n@@ -3875,7 +3876,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///\n /// This function is unsafe for the same reasons as `from_raw_parts`, as well\n /// as not being able to provide a non-aliasing guarantee of the returned\n-/// mutable slice. `p` must be non-null even for zero-length slices as with\n+/// mutable slice. `p` must be non-null and aligned even for zero-length slices as with\n /// `from_raw_parts`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ea0a0b74db6591134925fa2a1b27b8449659022c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ee9d899695edf3a00870f6243c27c21d9084a8f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee9d899695edf3a00870f6243c27c21d9084a8f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3ee9d899695edf3a00870f6243c27c21d9084a8f", "patch": "@@ -388,10 +388,9 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n ///\n /// The data must be valid UTF-8\n ///\n-/// `p` must be non-null, even for zero-length strs, because non-zero bits\n-/// are required to distinguish between a zero-length str within `Some()`\n-/// from `None`. `p` can be a bogus non-dereferencable pointer, such as `0x1`,\n-/// for zero-length strs, though.\n+/// `p` must be non-null and aligned, even for zero-length strs, as is\n+/// required for all references. However, for zero-length strs, `p` can be\n+/// a bogus non-dereferencable pointer such as [`NonNull::dangling()`].\n ///\n /// # Caveat\n ///\n@@ -400,9 +399,8 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// source lifetime is safe in the context, such as by providing a helper\n /// function taking the lifetime of a host value for the str, or by explicit\n /// annotation.\n-/// Performs the same functionality as `from_raw_parts`, except that a mutable\n-/// str is returned.\n ///\n+/// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n     from_utf8_unchecked_mut(slice::from_raw_parts_mut(p, len))\n }"}]}