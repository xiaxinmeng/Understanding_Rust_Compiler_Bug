{"sha": "385f8e2078b00282a7a7ffcd58aad17b405f57bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NWY4ZTIwNzhiMDAyODJhN2E3ZmZjZDU4YWFkMTdiNDA1ZjU3YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T05:28:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-07T05:28:53Z"}, "message": "Auto merge of #88689 - Aaron1011:confused-std-resolver, r=cjgillot\n\nMove `confused_type_with_std_module` to `ResolverOutputs`\n\nThis eliminates untracked global state from `Session`.", "tree": {"sha": "c5ca0787224a071e736195ef260d5d3e62341e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5ca0787224a071e736195ef260d5d3e62341e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/385f8e2078b00282a7a7ffcd58aad17b405f57bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/385f8e2078b00282a7a7ffcd58aad17b405f57bf", "html_url": "https://github.com/rust-lang/rust/commit/385f8e2078b00282a7a7ffcd58aad17b405f57bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/385f8e2078b00282a7a7ffcd58aad17b405f57bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf857045f4f4d8bb563e0a5077f9b065f42916", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf857045f4f4d8bb563e0a5077f9b065f42916", "html_url": "https://github.com/rust-lang/rust/commit/ffaf857045f4f4d8bb563e0a5077f9b065f42916"}, {"sha": "404402430d33795d43cce567bc822cad38bc5fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/404402430d33795d43cce567bc822cad38bc5fc4", "html_url": "https://github.com/rust-lang/rust/commit/404402430d33795d43cce567bc822cad38bc5fc4"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "fddfd6e435c0550e586f0ffa732a35784ab33f99", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -137,6 +137,9 @@ pub struct ResolverOutputs {\n     /// A list of proc macro LocalDefIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<LocalDefId>,\n+    /// Mapping from ident span to path span for paths that don't exist as written, but that\n+    /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n+    pub confused_type_with_std_module: FxHashMap<Span, Span>,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "c0b52d21fa639c293987ce4779a9158e9f261d53", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -1999,9 +1999,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         let item_span =\n                             path.iter().last().map_or(span, |segment| segment.ident.span);\n \n-                        let mut hm = self.r.session.confused_type_with_std_module.borrow_mut();\n-                        hm.insert(item_span, span);\n-                        hm.insert(span, span);\n+                        self.r.confused_type_with_std_module.insert(item_span, span);\n+                        self.r.confused_type_with_std_module.insert(span, span);\n                     }\n                 }\n "}, {"sha": "6d2961db9e3dace832a4e86ef6e3663148d7fbb3", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -1038,6 +1038,7 @@ pub struct Resolver<'a> {\n     /// A list of proc macro LocalDefIds, written out in the order in which\n     /// they are declared in the static array generated by proc_macro_harness.\n     proc_macros: Vec<NodeId>,\n+    confused_type_with_std_module: FxHashMap<Span, Span>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1404,6 +1405,7 @@ impl<'a> Resolver<'a> {\n             main_def: Default::default(),\n             trait_impls: Default::default(),\n             proc_macros: Default::default(),\n+            confused_type_with_std_module: Default::default(),\n         };\n \n         let root_parent_scope = ParentScope::module(graph_root, &resolver);\n@@ -1447,6 +1449,7 @@ impl<'a> Resolver<'a> {\n         let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n         let main_def = self.main_def;\n+        let confused_type_with_std_module = self.confused_type_with_std_module;\n         ResolverOutputs {\n             definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n@@ -1464,6 +1467,7 @@ impl<'a> Resolver<'a> {\n             main_def,\n             trait_impls: self.trait_impls,\n             proc_macros,\n+            confused_type_with_std_module,\n         }\n     }\n \n@@ -1486,6 +1490,7 @@ impl<'a> Resolver<'a> {\n             main_def: self.main_def.clone(),\n             trait_impls: self.trait_impls.clone(),\n             proc_macros,\n+            confused_type_with_std_module: self.confused_type_with_std_module.clone(),\n         }\n     }\n "}, {"sha": "c71595ab57e7224ab60699e8bf4caf698827bc8b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -183,10 +183,6 @@ pub struct Session {\n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n-    /// Mapping from ident span to path span for paths that don't exist as written, but that\n-    /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n-    pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n-\n     /// Tracks the current behavior of the CTFE engine when an error occurs.\n     /// Options range from returning the error without a backtrace to returning an error\n     /// and immediately printing the backtrace to stderr.\n@@ -1313,7 +1309,6 @@ pub fn build_session(\n         print_fuel,\n         jobserver: jobserver::client(),\n         driver_lint_caps,\n-        confused_type_with_std_module: Lock::new(Default::default()),\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,"}, {"sha": "a795a52a25c46243b9acf01e6d5d5ad420bfa709", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -1495,9 +1495,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n         if let (true, Ok(snippet)) = (\n             self.tcx()\n-                .sess\n+                .resolutions(())\n                 .confused_type_with_std_module\n-                .borrow()\n                 .keys()\n                 .any(|full_span| full_span.contains(span)),\n             self.tcx().sess.source_map().span_to_snippet(span),"}, {"sha": "aec080ae205178e45361a9c0d487c219cd4cf333", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385f8e2078b00282a7a7ffcd58aad17b405f57bf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=385f8e2078b00282a7a7ffcd58aad17b405f57bf", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                         if let Some(span) =\n-                            tcx.sess.confused_type_with_std_module.borrow().get(&span)\n+                            tcx.resolutions(()).confused_type_with_std_module.get(&span)\n                         {\n                             if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(*span) {\n                                 err.span_suggestion("}]}