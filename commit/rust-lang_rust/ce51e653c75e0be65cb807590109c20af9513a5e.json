{"sha": "ce51e653c75e0be65cb807590109c20af9513a5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNTFlNjUzYzc1ZTBiZTY1Y2I4MDc1OTAxMDljMjBhZjk1MTNhNWU=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2019-06-16T01:12:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T11:17:01Z"}, "message": "Separate libsyntax_ext module", "tree": {"sha": "9001ee9733ee3d93342ac862d8199b5e4677b334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9001ee9733ee3d93342ac862d8199b5e4677b334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce51e653c75e0be65cb807590109c20af9513a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce51e653c75e0be65cb807590109c20af9513a5e", "html_url": "https://github.com/rust-lang/rust/commit/ce51e653c75e0be65cb807590109c20af9513a5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce51e653c75e0be65cb807590109c20af9513a5e/comments", "author": null, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c7857704bb2fee0807038207436b389adae9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c7857704bb2fee0807038207436b389adae9ee", "html_url": "https://github.com/rust-lang/rust/commit/f0c7857704bb2fee0807038207436b389adae9ee"}], "stats": {"total": 427, "additions": 212, "deletions": 215}, "files": [{"sha": "3d4f82764413a0021fd93b3dfb194b259ad18264", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 215, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=ce51e653c75e0be65cb807590109c20af9513a5e", "patch": "@@ -605,159 +605,7 @@ pub mod printf {\n     }\n \n     #[cfg(test)]\n-    mod tests {\n-        use super::{\n-            Format as F,\n-            Num as N,\n-            Substitution as S,\n-            iter_subs,\n-            parse_next_substitution as pns,\n-        };\n-\n-        macro_rules! assert_eq_pnsat {\n-            ($lhs:expr, $rhs:expr) => {\n-                assert_eq!(\n-                    pns($lhs).and_then(|(s, _)| s.translate()),\n-                    $rhs.map(<String as From<&str>>::from)\n-                )\n-            };\n-        }\n-\n-        #[test]\n-        fn test_escape() {\n-            assert_eq!(pns(\"has no escapes\"), None);\n-            assert_eq!(pns(\"has no escapes, either %\"), None);\n-            assert_eq!(pns(\"*so* has a %% escape\"), Some((S::Escape,\" escape\")));\n-            assert_eq!(pns(\"%% leading escape\"), Some((S::Escape, \" leading escape\")));\n-            assert_eq!(pns(\"trailing escape %%\"), Some((S::Escape, \"\")));\n-        }\n-\n-        #[test]\n-        fn test_parse() {\n-            macro_rules! assert_pns_eq_sub {\n-                ($in_:expr, {\n-                    $param:expr, $flags:expr,\n-                    $width:expr, $prec:expr, $len:expr, $type_:expr,\n-                    $pos:expr,\n-                }) => {\n-                    assert_eq!(\n-                        pns(concat!($in_, \"!\")),\n-                        Some((\n-                            S::Format(F {\n-                                span: $in_,\n-                                parameter: $param,\n-                                flags: $flags,\n-                                width: $width,\n-                                precision: $prec,\n-                                length: $len,\n-                                type_: $type_,\n-                                position: syntax_pos::InnerSpan::new($pos.0, $pos.1),\n-                            }),\n-                            \"!\"\n-                        ))\n-                    )\n-                };\n-            }\n-\n-            assert_pns_eq_sub!(\"%!\",\n-                { None, \"\", None, None, None, \"!\", (0, 2), });\n-            assert_pns_eq_sub!(\"%c\",\n-                { None, \"\", None, None, None, \"c\", (0, 2), });\n-            assert_pns_eq_sub!(\"%s\",\n-                { None, \"\", None, None, None, \"s\", (0, 2), });\n-            assert_pns_eq_sub!(\"%06d\",\n-                { None, \"0\", Some(N::Num(6)), None, None, \"d\", (0, 4), });\n-            assert_pns_eq_sub!(\"%4.2f\",\n-                { None, \"\", Some(N::Num(4)), Some(N::Num(2)), None, \"f\", (0, 5), });\n-            assert_pns_eq_sub!(\"%#x\",\n-                { None, \"#\", None, None, None, \"x\", (0, 3), });\n-            assert_pns_eq_sub!(\"%-10s\",\n-                { None, \"-\", Some(N::Num(10)), None, None, \"s\", (0, 5), });\n-            assert_pns_eq_sub!(\"%*s\",\n-                { None, \"\", Some(N::Next), None, None, \"s\", (0, 3), });\n-            assert_pns_eq_sub!(\"%-10.*s\",\n-                { None, \"-\", Some(N::Num(10)), Some(N::Next), None, \"s\", (0, 7), });\n-            assert_pns_eq_sub!(\"%-*.*s\",\n-                { None, \"-\", Some(N::Next), Some(N::Next), None, \"s\", (0, 6), });\n-            assert_pns_eq_sub!(\"%.6i\",\n-                { None, \"\", None, Some(N::Num(6)), None, \"i\", (0, 4), });\n-            assert_pns_eq_sub!(\"%+i\",\n-                { None, \"+\", None, None, None, \"i\", (0, 3), });\n-            assert_pns_eq_sub!(\"%08X\",\n-                { None, \"0\", Some(N::Num(8)), None, None, \"X\", (0, 4), });\n-            assert_pns_eq_sub!(\"%lu\",\n-                { None, \"\", None, None, Some(\"l\"), \"u\", (0, 3), });\n-            assert_pns_eq_sub!(\"%Iu\",\n-                { None, \"\", None, None, Some(\"I\"), \"u\", (0, 3), });\n-            assert_pns_eq_sub!(\"%I32u\",\n-                { None, \"\", None, None, Some(\"I32\"), \"u\", (0, 5), });\n-            assert_pns_eq_sub!(\"%I64u\",\n-                { None, \"\", None, None, Some(\"I64\"), \"u\", (0, 5), });\n-            assert_pns_eq_sub!(\"%'d\",\n-                { None, \"'\", None, None, None, \"d\", (0, 3), });\n-            assert_pns_eq_sub!(\"%10s\",\n-                { None, \"\", Some(N::Num(10)), None, None, \"s\", (0, 4), });\n-            assert_pns_eq_sub!(\"%-10.10s\",\n-                { None, \"-\", Some(N::Num(10)), Some(N::Num(10)), None, \"s\", (0, 8), });\n-            assert_pns_eq_sub!(\"%1$d\",\n-                { Some(1), \"\", None, None, None, \"d\", (0, 4), });\n-            assert_pns_eq_sub!(\"%2$.*3$d\",\n-                { Some(2), \"\", None, Some(N::Arg(3)), None, \"d\", (0, 8), });\n-            assert_pns_eq_sub!(\"%1$*2$.*3$d\",\n-                { Some(1), \"\", Some(N::Arg(2)), Some(N::Arg(3)), None, \"d\", (0, 11), });\n-            assert_pns_eq_sub!(\"%-8ld\",\n-                { None, \"-\", Some(N::Num(8)), None, Some(\"l\"), \"d\", (0, 5), });\n-        }\n-\n-        #[test]\n-        fn test_iter() {\n-            let s = \"The %d'th word %% is: `%.*s` %!\\n\";\n-            let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n-            assert_eq!(\n-                subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n-                vec![Some(\"{}\"), None, Some(\"{:.*}\"), None]\n-            );\n-        }\n-\n-        /// Checks that the translations are what we expect.\n-        #[test]\n-        fn test_translation() {\n-            assert_eq_pnsat!(\"%c\", Some(\"{}\"));\n-            assert_eq_pnsat!(\"%d\", Some(\"{}\"));\n-            assert_eq_pnsat!(\"%u\", Some(\"{}\"));\n-            assert_eq_pnsat!(\"%x\", Some(\"{:x}\"));\n-            assert_eq_pnsat!(\"%X\", Some(\"{:X}\"));\n-            assert_eq_pnsat!(\"%e\", Some(\"{:e}\"));\n-            assert_eq_pnsat!(\"%E\", Some(\"{:E}\"));\n-            assert_eq_pnsat!(\"%f\", Some(\"{}\"));\n-            assert_eq_pnsat!(\"%g\", Some(\"{:e}\"));\n-            assert_eq_pnsat!(\"%G\", Some(\"{:E}\"));\n-            assert_eq_pnsat!(\"%s\", Some(\"{}\"));\n-            assert_eq_pnsat!(\"%p\", Some(\"{:p}\"));\n-\n-            assert_eq_pnsat!(\"%06d\",        Some(\"{:06}\"));\n-            assert_eq_pnsat!(\"%4.2f\",       Some(\"{:4.2}\"));\n-            assert_eq_pnsat!(\"%#x\",         Some(\"{:#x}\"));\n-            assert_eq_pnsat!(\"%-10s\",       Some(\"{:<10}\"));\n-            assert_eq_pnsat!(\"%*s\",         None);\n-            assert_eq_pnsat!(\"%-10.*s\",     Some(\"{:<10.*}\"));\n-            assert_eq_pnsat!(\"%-*.*s\",      None);\n-            assert_eq_pnsat!(\"%.6i\",        Some(\"{:06}\"));\n-            assert_eq_pnsat!(\"%+i\",         Some(\"{:+}\"));\n-            assert_eq_pnsat!(\"%08X\",        Some(\"{:08X}\"));\n-            assert_eq_pnsat!(\"%lu\",         Some(\"{}\"));\n-            assert_eq_pnsat!(\"%Iu\",         Some(\"{}\"));\n-            assert_eq_pnsat!(\"%I32u\",       Some(\"{}\"));\n-            assert_eq_pnsat!(\"%I64u\",       Some(\"{}\"));\n-            assert_eq_pnsat!(\"%'d\",         None);\n-            assert_eq_pnsat!(\"%10s\",        Some(\"{:>10}\"));\n-            assert_eq_pnsat!(\"%-10.10s\",    Some(\"{:<10.10}\"));\n-            assert_eq_pnsat!(\"%1$d\",        Some(\"{0}\"));\n-            assert_eq_pnsat!(\"%2$.*3$d\",    Some(\"{1:02$}\"));\n-            assert_eq_pnsat!(\"%1$*2$.*3$s\", Some(\"{0:>1$.2$}\"));\n-            assert_eq_pnsat!(\"%-8ld\",       Some(\"{:<8}\"));\n-        }\n-    }\n+    mod tests;\n }\n \n pub mod shell {\n@@ -899,68 +747,7 @@ pub mod shell {\n     }\n \n     #[cfg(test)]\n-    mod tests {\n-        use super::{\n-            Substitution as S,\n-            parse_next_substitution as pns,\n-        };\n-\n-        macro_rules! assert_eq_pnsat {\n-            ($lhs:expr, $rhs:expr) => {\n-                assert_eq!(\n-                    pns($lhs).and_then(|(f, _)| f.translate()),\n-                    $rhs.map(<String as From<&str>>::from)\n-                )\n-            };\n-        }\n-\n-        #[test]\n-        fn test_escape() {\n-            assert_eq!(pns(\"has no escapes\"), None);\n-            assert_eq!(pns(\"has no escapes, either $\"), None);\n-            assert_eq!(pns(\"*so* has a $$ escape\"), Some((S::Escape((11, 13)), \" escape\")));\n-            assert_eq!(pns(\"$$ leading escape\"), Some((S::Escape((0, 2)), \" leading escape\")));\n-            assert_eq!(pns(\"trailing escape $$\"), Some((S::Escape((16, 18)), \"\")));\n-        }\n-\n-        #[test]\n-        fn test_parse() {\n-            macro_rules! assert_pns_eq_sub {\n-                ($in_:expr, $kind:ident($arg:expr, $pos:expr)) => {\n-                    assert_eq!(pns(concat!($in_, \"!\")), Some((S::$kind($arg.into(), $pos), \"!\")))\n-                };\n-            }\n-\n-            assert_pns_eq_sub!(\"$0\", Ordinal(0, (0, 2)));\n-            assert_pns_eq_sub!(\"$1\", Ordinal(1, (0, 2)));\n-            assert_pns_eq_sub!(\"$9\", Ordinal(9, (0, 2)));\n-            assert_pns_eq_sub!(\"$N\", Name(\"N\", (0, 2)));\n-            assert_pns_eq_sub!(\"$NAME\", Name(\"NAME\", (0, 5)));\n-        }\n-\n-        #[test]\n-        fn test_iter() {\n-            use super::iter_subs;\n-            let s = \"The $0'th word $$ is: `$WORD` $!\\n\";\n-            let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n-            assert_eq!(\n-                subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n-                vec![Some(\"{0}\"), None, Some(\"{WORD}\")]\n-            );\n-        }\n-\n-        #[test]\n-        fn test_translation() {\n-            assert_eq_pnsat!(\"$0\", Some(\"{0}\"));\n-            assert_eq_pnsat!(\"$9\", Some(\"{9}\"));\n-            assert_eq_pnsat!(\"$1\", Some(\"{1}\"));\n-            assert_eq_pnsat!(\"$10\", Some(\"{1}\"));\n-            assert_eq_pnsat!(\"$stuff\", Some(\"{stuff}\"));\n-            assert_eq_pnsat!(\"$NAME\", Some(\"{NAME}\"));\n-            assert_eq_pnsat!(\"$PREFIX/bin\", Some(\"{PREFIX}\"));\n-        }\n-\n-    }\n+    mod tests;\n }\n \n mod strcursor {"}, {"sha": "87021f1ef5a52857e55023624abb719b71b2113e", "filename": "src/libsyntax_ext/format_foreign/printf/tests.rs", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=ce51e653c75e0be65cb807590109c20af9513a5e", "patch": "@@ -0,0 +1,151 @@\n+use super::{\n+    Format as F,\n+    Num as N,\n+    Substitution as S,\n+    iter_subs,\n+    parse_next_substitution as pns,\n+};\n+\n+macro_rules! assert_eq_pnsat {\n+    ($lhs:expr, $rhs:expr) => {\n+        assert_eq!(\n+            pns($lhs).and_then(|(s, _)| s.translate()),\n+            $rhs.map(<String as From<&str>>::from)\n+        )\n+    };\n+}\n+\n+#[test]\n+fn test_escape() {\n+    assert_eq!(pns(\"has no escapes\"), None);\n+    assert_eq!(pns(\"has no escapes, either %\"), None);\n+    assert_eq!(pns(\"*so* has a %% escape\"), Some((S::Escape,\" escape\")));\n+    assert_eq!(pns(\"%% leading escape\"), Some((S::Escape, \" leading escape\")));\n+    assert_eq!(pns(\"trailing escape %%\"), Some((S::Escape, \"\")));\n+}\n+\n+#[test]\n+fn test_parse() {\n+    macro_rules! assert_pns_eq_sub {\n+        ($in_:expr, {\n+            $param:expr, $flags:expr,\n+            $width:expr, $prec:expr, $len:expr, $type_:expr,\n+            $pos:expr,\n+        }) => {\n+            assert_eq!(\n+                pns(concat!($in_, \"!\")),\n+                Some((\n+                    S::Format(F {\n+                        span: $in_,\n+                        parameter: $param,\n+                        flags: $flags,\n+                        width: $width,\n+                        precision: $prec,\n+                        length: $len,\n+                        type_: $type_,\n+                        position: syntax_pos::InnerSpan::new($pos.0, $pos.1),\n+                    }),\n+                    \"!\"\n+                ))\n+            )\n+        };\n+    }\n+\n+    assert_pns_eq_sub!(\"%!\",\n+        { None, \"\", None, None, None, \"!\", (0, 2), });\n+    assert_pns_eq_sub!(\"%c\",\n+        { None, \"\", None, None, None, \"c\", (0, 2), });\n+    assert_pns_eq_sub!(\"%s\",\n+        { None, \"\", None, None, None, \"s\", (0, 2), });\n+    assert_pns_eq_sub!(\"%06d\",\n+        { None, \"0\", Some(N::Num(6)), None, None, \"d\", (0, 4), });\n+    assert_pns_eq_sub!(\"%4.2f\",\n+        { None, \"\", Some(N::Num(4)), Some(N::Num(2)), None, \"f\", (0, 5), });\n+    assert_pns_eq_sub!(\"%#x\",\n+        { None, \"#\", None, None, None, \"x\", (0, 3), });\n+    assert_pns_eq_sub!(\"%-10s\",\n+        { None, \"-\", Some(N::Num(10)), None, None, \"s\", (0, 5), });\n+    assert_pns_eq_sub!(\"%*s\",\n+        { None, \"\", Some(N::Next), None, None, \"s\", (0, 3), });\n+    assert_pns_eq_sub!(\"%-10.*s\",\n+        { None, \"-\", Some(N::Num(10)), Some(N::Next), None, \"s\", (0, 7), });\n+    assert_pns_eq_sub!(\"%-*.*s\",\n+        { None, \"-\", Some(N::Next), Some(N::Next), None, \"s\", (0, 6), });\n+    assert_pns_eq_sub!(\"%.6i\",\n+        { None, \"\", None, Some(N::Num(6)), None, \"i\", (0, 4), });\n+    assert_pns_eq_sub!(\"%+i\",\n+        { None, \"+\", None, None, None, \"i\", (0, 3), });\n+    assert_pns_eq_sub!(\"%08X\",\n+        { None, \"0\", Some(N::Num(8)), None, None, \"X\", (0, 4), });\n+    assert_pns_eq_sub!(\"%lu\",\n+        { None, \"\", None, None, Some(\"l\"), \"u\", (0, 3), });\n+    assert_pns_eq_sub!(\"%Iu\",\n+        { None, \"\", None, None, Some(\"I\"), \"u\", (0, 3), });\n+    assert_pns_eq_sub!(\"%I32u\",\n+        { None, \"\", None, None, Some(\"I32\"), \"u\", (0, 5), });\n+    assert_pns_eq_sub!(\"%I64u\",\n+        { None, \"\", None, None, Some(\"I64\"), \"u\", (0, 5), });\n+    assert_pns_eq_sub!(\"%'d\",\n+        { None, \"'\", None, None, None, \"d\", (0, 3), });\n+    assert_pns_eq_sub!(\"%10s\",\n+        { None, \"\", Some(N::Num(10)), None, None, \"s\", (0, 4), });\n+    assert_pns_eq_sub!(\"%-10.10s\",\n+        { None, \"-\", Some(N::Num(10)), Some(N::Num(10)), None, \"s\", (0, 8), });\n+    assert_pns_eq_sub!(\"%1$d\",\n+        { Some(1), \"\", None, None, None, \"d\", (0, 4), });\n+    assert_pns_eq_sub!(\"%2$.*3$d\",\n+        { Some(2), \"\", None, Some(N::Arg(3)), None, \"d\", (0, 8), });\n+    assert_pns_eq_sub!(\"%1$*2$.*3$d\",\n+        { Some(1), \"\", Some(N::Arg(2)), Some(N::Arg(3)), None, \"d\", (0, 11), });\n+    assert_pns_eq_sub!(\"%-8ld\",\n+        { None, \"-\", Some(N::Num(8)), None, Some(\"l\"), \"d\", (0, 5), });\n+}\n+\n+#[test]\n+fn test_iter() {\n+    let s = \"The %d'th word %% is: `%.*s` %!\\n\";\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    assert_eq!(\n+        subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n+        vec![Some(\"{}\"), None, Some(\"{:.*}\"), None]\n+    );\n+}\n+\n+/// Checks that the translations are what we expect.\n+#[test]\n+fn test_translation() {\n+    assert_eq_pnsat!(\"%c\", Some(\"{}\"));\n+    assert_eq_pnsat!(\"%d\", Some(\"{}\"));\n+    assert_eq_pnsat!(\"%u\", Some(\"{}\"));\n+    assert_eq_pnsat!(\"%x\", Some(\"{:x}\"));\n+    assert_eq_pnsat!(\"%X\", Some(\"{:X}\"));\n+    assert_eq_pnsat!(\"%e\", Some(\"{:e}\"));\n+    assert_eq_pnsat!(\"%E\", Some(\"{:E}\"));\n+    assert_eq_pnsat!(\"%f\", Some(\"{}\"));\n+    assert_eq_pnsat!(\"%g\", Some(\"{:e}\"));\n+    assert_eq_pnsat!(\"%G\", Some(\"{:E}\"));\n+    assert_eq_pnsat!(\"%s\", Some(\"{}\"));\n+    assert_eq_pnsat!(\"%p\", Some(\"{:p}\"));\n+\n+    assert_eq_pnsat!(\"%06d\",        Some(\"{:06}\"));\n+    assert_eq_pnsat!(\"%4.2f\",       Some(\"{:4.2}\"));\n+    assert_eq_pnsat!(\"%#x\",         Some(\"{:#x}\"));\n+    assert_eq_pnsat!(\"%-10s\",       Some(\"{:<10}\"));\n+    assert_eq_pnsat!(\"%*s\",         None);\n+    assert_eq_pnsat!(\"%-10.*s\",     Some(\"{:<10.*}\"));\n+    assert_eq_pnsat!(\"%-*.*s\",      None);\n+    assert_eq_pnsat!(\"%.6i\",        Some(\"{:06}\"));\n+    assert_eq_pnsat!(\"%+i\",         Some(\"{:+}\"));\n+    assert_eq_pnsat!(\"%08X\",        Some(\"{:08X}\"));\n+    assert_eq_pnsat!(\"%lu\",         Some(\"{}\"));\n+    assert_eq_pnsat!(\"%Iu\",         Some(\"{}\"));\n+    assert_eq_pnsat!(\"%I32u\",       Some(\"{}\"));\n+    assert_eq_pnsat!(\"%I64u\",       Some(\"{}\"));\n+    assert_eq_pnsat!(\"%'d\",         None);\n+    assert_eq_pnsat!(\"%10s\",        Some(\"{:>10}\"));\n+    assert_eq_pnsat!(\"%-10.10s\",    Some(\"{:<10.10}\"));\n+    assert_eq_pnsat!(\"%1$d\",        Some(\"{0}\"));\n+    assert_eq_pnsat!(\"%2$.*3$d\",    Some(\"{1:02$}\"));\n+    assert_eq_pnsat!(\"%1$*2$.*3$s\", Some(\"{0:>1$.2$}\"));\n+    assert_eq_pnsat!(\"%-8ld\",       Some(\"{:<8}\"));\n+}"}, {"sha": "8ef58b8387e5a5f9cedcf24bd26ed9dc99e0020d", "filename": "src/libsyntax_ext/format_foreign/shell/tests.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign%2Fshell%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce51e653c75e0be65cb807590109c20af9513a5e/src%2Flibsyntax_ext%2Fformat_foreign%2Fshell%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign%2Fshell%2Ftests.rs?ref=ce51e653c75e0be65cb807590109c20af9513a5e", "patch": "@@ -0,0 +1,59 @@\n+use super::{\n+    Substitution as S,\n+    parse_next_substitution as pns,\n+};\n+\n+macro_rules! assert_eq_pnsat {\n+    ($lhs:expr, $rhs:expr) => {\n+        assert_eq!(\n+            pns($lhs).and_then(|(f, _)| f.translate()),\n+            $rhs.map(<String as From<&str>>::from)\n+        )\n+    };\n+}\n+\n+#[test]\n+fn test_escape() {\n+    assert_eq!(pns(\"has no escapes\"), None);\n+    assert_eq!(pns(\"has no escapes, either $\"), None);\n+    assert_eq!(pns(\"*so* has a $$ escape\"), Some((S::Escape((11, 13)), \" escape\")));\n+    assert_eq!(pns(\"$$ leading escape\"), Some((S::Escape((0, 2)), \" leading escape\")));\n+    assert_eq!(pns(\"trailing escape $$\"), Some((S::Escape((16, 18)), \"\")));\n+}\n+\n+#[test]\n+fn test_parse() {\n+    macro_rules! assert_pns_eq_sub {\n+        ($in_:expr, $kind:ident($arg:expr, $pos:expr)) => {\n+            assert_eq!(pns(concat!($in_, \"!\")), Some((S::$kind($arg.into(), $pos), \"!\")))\n+        };\n+    }\n+\n+    assert_pns_eq_sub!(\"$0\", Ordinal(0, (0, 2)));\n+    assert_pns_eq_sub!(\"$1\", Ordinal(1, (0, 2)));\n+    assert_pns_eq_sub!(\"$9\", Ordinal(9, (0, 2)));\n+    assert_pns_eq_sub!(\"$N\", Name(\"N\", (0, 2)));\n+    assert_pns_eq_sub!(\"$NAME\", Name(\"NAME\", (0, 5)));\n+}\n+\n+#[test]\n+fn test_iter() {\n+    use super::iter_subs;\n+    let s = \"The $0'th word $$ is: `$WORD` $!\\n\";\n+    let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate()).collect();\n+    assert_eq!(\n+        subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n+        vec![Some(\"{0}\"), None, Some(\"{WORD}\")]\n+    );\n+}\n+\n+#[test]\n+fn test_translation() {\n+    assert_eq_pnsat!(\"$0\", Some(\"{0}\"));\n+    assert_eq_pnsat!(\"$9\", Some(\"{9}\"));\n+    assert_eq_pnsat!(\"$1\", Some(\"{1}\"));\n+    assert_eq_pnsat!(\"$10\", Some(\"{1}\"));\n+    assert_eq_pnsat!(\"$stuff\", Some(\"{stuff}\"));\n+    assert_eq_pnsat!(\"$NAME\", Some(\"{NAME}\"));\n+    assert_eq_pnsat!(\"$PREFIX/bin\", Some(\"{PREFIX}\"));\n+}"}]}