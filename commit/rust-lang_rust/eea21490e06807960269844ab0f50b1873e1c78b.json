{"sha": "eea21490e06807960269844ab0f50b1873e1c78b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYTIxNDkwZTA2ODA3OTYwMjY5ODQ0YWIwZjUwYjE4NzNlMWM3OGI=", "commit": {"author": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-10T01:58:17Z"}, "committer": {"name": "Luiz Carlos Mour\u00e3o Paes de Carvalho", "email": "luizcarlosmpc@gmail.com", "date": "2021-03-10T01:58:17Z"}, "message": "feat: add assist to conver for_each into for loops", "tree": {"sha": "357e6961f4fae83e3fe819c758f0380429ed980a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/357e6961f4fae83e3fe819c758f0380429ed980a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea21490e06807960269844ab0f50b1873e1c78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea21490e06807960269844ab0f50b1873e1c78b", "html_url": "https://github.com/rust-lang/rust/commit/eea21490e06807960269844ab0f50b1873e1c78b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea21490e06807960269844ab0f50b1873e1c78b/comments", "author": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saiintbrisson", "id": 29989290, "node_id": "MDQ6VXNlcjI5OTg5Mjkw", "avatar_url": "https://avatars.githubusercontent.com/u/29989290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saiintbrisson", "html_url": "https://github.com/saiintbrisson", "followers_url": "https://api.github.com/users/saiintbrisson/followers", "following_url": "https://api.github.com/users/saiintbrisson/following{/other_user}", "gists_url": "https://api.github.com/users/saiintbrisson/gists{/gist_id}", "starred_url": "https://api.github.com/users/saiintbrisson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saiintbrisson/subscriptions", "organizations_url": "https://api.github.com/users/saiintbrisson/orgs", "repos_url": "https://api.github.com/users/saiintbrisson/repos", "events_url": "https://api.github.com/users/saiintbrisson/events{/privacy}", "received_events_url": "https://api.github.com/users/saiintbrisson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21913d0fdb848445a908021dbcd4c3accf2ca0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/21913d0fdb848445a908021dbcd4c3accf2ca0a5", "html_url": "https://github.com/rust-lang/rust/commit/21913d0fdb848445a908021dbcd4c3accf2ca0a5"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "3220f2f46d7b51043de8267b1ac4cce9dbda03e6", "filename": "crates/ide_assists/src/handlers/convert_iter_for_each_to_for.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/eea21490e06807960269844ab0f50b1873e1c78b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea21490e06807960269844ab0f50b1873e1c78b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_iter_for_each_to_for.rs?ref=eea21490e06807960269844ab0f50b1873e1c78b", "patch": "@@ -0,0 +1,138 @@\n+use ide_db::helpers::FamousDefs;\n+use stdx::format_to;\n+use syntax::{AstNode, ast::{self, ArgListOwner}};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+/// Assist: convert_iter_for_each_to_for\n+//\n+/// Converts an Iterator::for_each function into a for loop.\n+///\n+/// ```rust\n+/// fn main() {\n+///     let vec = vec![(1, 2), (2, 3), (3, 4)];\n+///     x.iter().for_each(|(x, y)| {\n+///         println!(\"x: {}, y: {}\", x, y);\n+///    })\n+/// }\n+/// ```\n+/// ->\n+/// ```rust\n+/// fn main() {\n+///     let vec = vec![(1, 2), (2, 3), (3, 4)];\n+///     for (x, y) in x.iter() {\n+///         println!(\"x: {}, y: {}\", x, y);\n+///     });\n+/// }\n+/// ```\n+pub(crate) fn convert_iter_for_each_to_for(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let closure;\n+\n+    let total_expr = match ctx.find_node_at_offset::<ast::Expr>()? {\n+        ast::Expr::MethodCallExpr(expr) => {\n+            closure = match expr.arg_list()?.args().next()? {\n+                ast::Expr::ClosureExpr(expr) => expr,\n+                _ => { return None; }\n+            };\n+            \n+            expr\n+        },\n+        ast::Expr::ClosureExpr(expr) => {\n+            closure = expr;\n+            ast::MethodCallExpr::cast(closure.syntax().ancestors().nth(2)?)?\n+        },\n+        _ => { return None; }\n+    };\n+\n+    let (total_expr, parent) = validate_method_call_expr(&ctx.sema, total_expr)?;\n+\n+    let param_list = closure.param_list()?;\n+    let param = param_list.params().next()?;\n+    let body = closure.body()?;\n+\n+    acc.add(\n+        AssistId(\"convert_iter_for_each_to_for\", AssistKind::RefactorRewrite),\n+        \"Replace this `Iterator::for_each` with a for loop\",\n+        total_expr.syntax().text_range(),\n+        |builder| {\n+            let mut buf = String::new();\n+\n+            format_to!(buf, \"for {} in {} \", param, parent);\n+\n+            match body {\n+                ast::Expr::BlockExpr(body) => format_to!(buf, \"{}\", body),\n+                _ => format_to!(buf, \"{{\\n{}\\n}}\", body)\n+            }\n+\n+            builder.replace(total_expr.syntax().text_range(), buf)\n+        },\n+    )\n+}\n+\n+fn validate_method_call_expr(\n+    sema: &hir::Semantics<ide_db::RootDatabase>,\n+    expr: ast::MethodCallExpr,\n+) -> Option<(ast::Expr, ast::Expr)> {\n+    if expr.name_ref()?.text() != \"for_each\" {\n+        return None;\n+    }\n+\n+    let expr = ast::Expr::MethodCallExpr(expr);\n+    let parent = ast::Expr::cast(expr.syntax().first_child()?)?;\n+\n+    let it_type = sema.type_of_expr(&parent)?;\n+    let module = sema.scope(parent.syntax()).module()?;\n+    let krate = module.krate();\n+\n+    let iter_trait = FamousDefs(sema, Some(krate)).core_iter_Iterator()?;\n+    it_type.impls_trait(sema.db, iter_trait, &[]).then(|| (expr, parent))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn test_for_each_in_method() {\n+        check_assist(\n+            convert_iter_for_each_to_for,\n+            r\"\n+fn main() {\n+    let x = vec![(1, 1), (2, 2), (3, 3), (4, 4)];\n+    x.iter().$0for_each(|(x, y)| {\n+        dbg!(x, y)\n+    });\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![(1, 1), (2, 2), (3, 3), (4, 4)];\n+    for (x, y) in x.iter() {\n+        dbg!(x, y)\n+    };\n+}\",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_for_each_in_closure() {\n+        check_assist(\n+            convert_iter_for_each_to_for,\n+            r\"\n+fn main() {\n+    let x = vec![(1, 1), (2, 2), (3, 3), (4, 4)];\n+    x.iter().for_each($0|(x, y)| {\n+        dbg!(x, y)\n+    });\n+}\",\n+            r\"\n+fn main() {\n+    let x = vec![(1, 1), (2, 2), (3, 3), (4, 4)];\n+    for (x, y) in x.iter() {\n+        dbg!(x, y)\n+    };\n+}\",\n+        )\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "f1aab74d47b4e045e0bceda0ecd9bed6dd547608", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eea21490e06807960269844ab0f50b1873e1c78b/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea21490e06807960269844ab0f50b1873e1c78b/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=eea21490e06807960269844ab0f50b1873e1c78b", "patch": "@@ -116,6 +116,7 @@ mod handlers {\n     mod change_visibility;\n     mod convert_integer_literal;\n     mod convert_comment_block;\n+    mod convert_iter_for_each_to_for;\n     mod early_return;\n     mod expand_glob_import;\n     mod extract_function;\n@@ -181,6 +182,7 @@ mod handlers {\n             change_visibility::change_visibility,\n             convert_integer_literal::convert_integer_literal,\n             convert_comment_block::convert_comment_block,\n+            convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,"}]}