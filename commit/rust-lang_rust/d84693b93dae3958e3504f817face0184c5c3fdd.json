{"sha": "d84693b93dae3958e3504f817face0184c5c3fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDY5M2I5M2RhZTM5NThlMzUwNGY4MTdmYWNlMDE4NGM1YzNmZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-09T21:40:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-09T21:40:16Z"}, "message": "Auto merge of #43115 - petrochenkov:methlife2, r=eddyb\n\nStore all generic arguments for method calls in AST/HIR\n\nThe first part of https://github.com/rust-lang/rust/pull/42492.\nLanded separately to start the process of merging libsyntax changes breaking rustfmt, which is not easy these days.", "tree": {"sha": "5f92468ec862671e782ecc7d5f3f23012826bf9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f92468ec862671e782ecc7d5f3f23012826bf9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d84693b93dae3958e3504f817face0184c5c3fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d84693b93dae3958e3504f817face0184c5c3fdd", "html_url": "https://github.com/rust-lang/rust/commit/d84693b93dae3958e3504f817face0184c5c3fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d84693b93dae3958e3504f817face0184c5c3fdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b1271fcdd5b5958c76c43084e544d075d7d5dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1271fcdd5b5958c76c43084e544d075d7d5dfd", "html_url": "https://github.com/rust-lang/rust/commit/8b1271fcdd5b5958c76c43084e544d075d7d5dfd"}, {"sha": "9ac79e4934476ba520151c24f1954cfc5895ce10", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac79e4934476ba520151c24f1954cfc5895ce10", "html_url": "https://github.com/rust-lang/rust/commit/9ac79e4934476ba520151c24f1954cfc5895ce10"}], "stats": {"total": 273, "additions": 137, "deletions": 136}, "files": [{"sha": "1b21ffdfe70f461ead32f943aab997faaa5cea6e", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -578,7 +578,7 @@ dependencies = [\n \n [[package]]\n name = \"languageserver-types\"\n-version = \"0.11.0\"\n+version = \"0.11.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1017,14 +1017,14 @@ dependencies = [\n  \"cargo 0.21.0 (git+https://github.com/rust-lang/cargo)\",\n  \"derive-new 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"languageserver-types 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"languageserver-types 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-nightly 0.1.8 (git+https://github.com/rust-lang-nursery/rustfmt?branch=rustfmt-42492)\",\n  \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1474,8 +1474,8 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"0.1.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+version = \"0.1.8\"\n+source = \"git+https://github.com/rust-lang-nursery/rustfmt?branch=rustfmt-42492#7333dfc95b4af5c7283ba03f33c50f108d2be3f5\"\n dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2067,7 +2067,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum jobserver 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e28adc987f6d0521ef66ad60b055968107b164b3bb3cf3dc8474e0a380474a6\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n-\"checksum languageserver-types 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c178b944c3187527293fb9f8a0b0db3c5fb62eb127cacd65296f651a2440f5b1\"\n+\"checksum languageserver-types 0.11.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"680aee78c75504fdcb172635a7b7da0dccaafa4c42d935e19576c14b27942362\"\n \"checksum lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b37545ab726dd833ec6420aaba8231c5b320814b9029ad585555d2a03e94fbf\"\n \"checksum libc 0.2.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f5c2b18a287cf78b4097db62e20f43cace381dc76ae5c0a3073067f78b7ddc\"\n \"checksum libgit2-sys 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df18a822100352d9863b302faf6f8f25c0e77f0e60feb40e5dbe1238b7f13b1d\"\n@@ -2116,7 +2116,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-vfs 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f19246a0fda45f2fb6eb34addef2a692c044cbf1c90ec7695583450fb5f23e7\"\n \"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum rustfmt-nightly 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31ac6fe40a9844ee2de3d51d0be2bbcdb361bad6f3667a02db8c4e2330afbbb5\"\n+\"checksum rustfmt-nightly 0.1.8 (git+https://github.com/rust-lang-nursery/rustfmt?branch=rustfmt-42492)\" = \"<none>\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum semver 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fdd61b85a0fa777f7fb7c454b9189b2941b110d1385ce84d7f76efdf1606a85\""}, {"sha": "57198d8ca0b77433ea8a265c8381ee68f51670a0", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -944,10 +944,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_list!(visitor, visit_expr, arguments);\n             visitor.visit_expr(callee_expression)\n         }\n-        ExprMethodCall(ref name, ref types, ref arguments) => {\n-            visitor.visit_name(name.span, name.node);\n+        ExprMethodCall(ref segment, _, ref arguments) => {\n+            visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n-            walk_list!(visitor, visit_ty, types);\n         }\n         ExprBinary(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(left_expression);"}, {"sha": "67dc069da41314b62a6844af6a246fb948e4dfca", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -1844,10 +1844,10 @@ impl<'a> LoweringContext<'a> {\n                 let f = P(self.lower_expr(f));\n                 hir::ExprCall(f, args.iter().map(|x| self.lower_expr(x)).collect())\n             }\n-            ExprKind::MethodCall(i, ref tps, ref args) => {\n-                let tps = tps.iter().map(|x| self.lower_ty(x)).collect();\n+            ExprKind::MethodCall(ref seg, ref args) => {\n+                let hir_seg = self.lower_path_segment(e.span, seg, ParamMode::Optional, 0);\n                 let args = args.iter().map(|x| self.lower_expr(x)).collect();\n-                hir::ExprMethodCall(respan(i.span, self.lower_ident(i.node)), tps, args)\n+                hir::ExprMethodCall(hir_seg, seg.span, args)\n             }\n             ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                 let binop = self.lower_binop(binop);"}, {"sha": "fd79ec3b6b92ce539b66b9879186e7a3ba710d16", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -972,19 +972,16 @@ pub enum Expr_ {\n     /// The first field resolves to the function itself (usually an `ExprPath`),\n     /// and the second field is the list of arguments\n     ExprCall(P<Expr>, HirVec<Expr>),\n-    /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n+    /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n     ///\n-    /// The `Spanned<Name>` is the identifier for the method name.\n-    /// The vector of `Ty`s are the ascripted type parameters for the method\n+    /// The `PathSegment`/`Span` represent the method name and its generic arguments\n     /// (within the angle brackets).\n-    ///\n-    /// The first element of the vector of `Expr`s is the expression that\n-    /// evaluates to the object on which the method is being called on (the\n-    /// receiver), and the remaining elements are the rest of the arguments.\n-    ///\n+    /// The first element of the vector of `Expr`s is the expression that evaluates\n+    /// to the object on which the method is being called on (the receiver),\n+    /// and the remaining elements are the rest of the arguments.\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprMethodCall(foo, [Bar, Baz], [x, a, b, c, d])`.\n-    ExprMethodCall(Spanned<Name>, HirVec<P<Ty>>, HirVec<Expr>),\n+    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    ExprMethodCall(PathSegment, Span, HirVec<Expr>),\n     /// A tuple (`(a, b, c ,d)`)\n     ExprTup(HirVec<Expr>),\n     /// A binary operation (For example: `a + b`, `a * b`)"}, {"sha": "1f7b73d134596cb49911d4bae46e7975b3021592", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -1188,18 +1188,17 @@ impl<'a> State<'a> {\n     }\n \n     fn print_expr_method_call(&mut self,\n-                              name: Spanned<ast::Name>,\n-                              tys: &[P<hir::Ty>],\n+                              segment: &hir::PathSegment,\n                               args: &[hir::Expr])\n                               -> io::Result<()> {\n         let base_args = &args[1..];\n         self.print_expr(&args[0])?;\n         word(&mut self.s, \".\")?;\n-        self.print_name(name.node)?;\n-        if !tys.is_empty() {\n-            word(&mut self.s, \"::<\")?;\n-            self.commasep(Inconsistent, tys, |s, ty| s.print_type(&ty))?;\n-            word(&mut self.s, \">\")?;\n+        self.print_name(segment.name)?;\n+        if !segment.parameters.lifetimes().is_empty() ||\n+                !segment.parameters.types().is_empty() ||\n+                !segment.parameters.bindings().is_empty() {\n+            self.print_path_parameters(&segment.parameters, true)?;\n         }\n         self.print_call_post(base_args)\n     }\n@@ -1254,8 +1253,8 @@ impl<'a> State<'a> {\n             hir::ExprCall(ref func, ref args) => {\n                 self.print_expr_call(&func, args)?;\n             }\n-            hir::ExprMethodCall(name, ref tys, ref args) => {\n-                self.print_expr_method_call(name, &tys[..], args)?;\n+            hir::ExprMethodCall(ref segment, _, ref args) => {\n+                self.print_expr_method_call(segment, args)?;\n             }\n             hir::ExprBinary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, &lhs, &rhs)?;"}, {"sha": "c82fea197fb751f5692c527c1441af95220db578", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -626,7 +626,7 @@ impl_stable_hash_for!(enum hir::Expr_ {\n     ExprBox(sub),\n     ExprArray(subs),\n     ExprCall(callee, args),\n-    ExprMethodCall(name, ts, args),\n+    ExprMethodCall(segment, span, args),\n     ExprTup(fields),\n     ExprBinary(op, lhs, rhs),\n     ExprUnary(op, operand),"}, {"sha": "72c7b92fe6e309e149eed66844ccb2f526a51c4f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -125,6 +125,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::Continue(Some(ident)) => {\n                 self.check_label(ident.node, ident.span);\n             }\n+            ExprKind::MethodCall(ref segment, ..) => {\n+                if let Some(ref params) = segment.parameters {\n+                    match **params {\n+                        PathParameters::AngleBracketed(ref param_data) => {\n+                            if !param_data.bindings.is_empty() {\n+                                let binding_span = param_data.bindings[0].span;\n+                                self.err_handler().span_err(binding_span,\n+                                    \"type bindings cannot be used in method calls\");\n+                            }\n+                        }\n+                        PathParameters::Parenthesized(..) => {\n+                            self.err_handler().span_err(expr.span,\n+                                \"parenthesized parameters cannot be used on method calls\");\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n "}, {"sha": "4a74a9e524d0ccdd3d75c91ffa5a5752f688daaf", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -670,10 +670,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     return;\n                 }\n             }\n-            hir::ExprMethodCall(name, ..) => {\n+            hir::ExprMethodCall(_, span, _) => {\n                 // Method calls have to be checked specially.\n                 let def_id = self.tables.type_dependent_defs[&expr.id].def_id();\n-                self.span = name.span;\n+                self.span = span;\n                 if self.tcx.type_of(def_id).visit_with(self) {\n                     return;\n                 }"}, {"sha": "7754cd7366ecfa6932104d056eaa25eb3e205f4d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -2467,9 +2467,9 @@ impl<'a> Resolver<'a> {\n                                                                  path_str, ident.node));\n                             return err;\n                         }\n-                        ExprKind::MethodCall(ident, ..) => {\n+                        ExprKind::MethodCall(ref segment, ..) => {\n                             err.span_label(parent.span, format!(\"did you mean `{}::{}(...)`?\",\n-                                                                 path_str, ident.node));\n+                                                                 path_str, segment.identifier));\n                             return err;\n                         }\n                         _ => {}\n@@ -3145,15 +3145,13 @@ impl<'a> Resolver<'a> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(_, ref types, ref arguments) => {\n+            ExprKind::MethodCall(ref segment, ref arguments) => {\n                 let mut arguments = arguments.iter();\n                 self.resolve_expr(arguments.next().unwrap(), Some(expr));\n                 for argument in arguments {\n                     self.resolve_expr(argument, None);\n                 }\n-                for ty in types.iter() {\n-                    self.visit_ty(ty);\n-                }\n+                self.visit_path_segment(expr.span, segment);\n             }\n \n             ExprKind::Repeat(ref element, ref count) => {\n@@ -3185,10 +3183,10 @@ impl<'a> Resolver<'a> {\n                 let traits = self.get_traits_containing_item(name.node, ValueNS);\n                 self.trait_map.insert(expr.id, traits);\n             }\n-            ExprKind::MethodCall(name, ..) => {\n+            ExprKind::MethodCall(ref segment, ..) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\",\n                        expr.id);\n-                let traits = self.get_traits_containing_item(name.node, ValueNS);\n+                let traits = self.get_traits_containing_item(segment.identifier, ValueNS);\n                 self.trait_map.insert(expr.id, traits);\n             }\n             _ => {"}, {"sha": "0829951e12debfdaaed9d6d6d15f6aa5c89fc109", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -44,15 +44,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                           call_expr: &'gcx hir::Expr,\n                           unadjusted_self_ty: Ty<'tcx>,\n                           pick: probe::Pick<'tcx>,\n-                          supplied_method_types: Vec<Ty<'tcx>>)\n+                          segment: &hir::PathSegment)\n                           -> MethodCallee<'tcx> {\n-        debug!(\"confirm(unadjusted_self_ty={:?}, pick={:?}, supplied_method_types={:?})\",\n+        debug!(\"confirm(unadjusted_self_ty={:?}, pick={:?}, generic_args={:?})\",\n                unadjusted_self_ty,\n                pick,\n-               supplied_method_types);\n+               segment.parameters);\n \n         let mut confirm_cx = ConfirmContext::new(self, span, self_expr, call_expr);\n-        confirm_cx.confirm(unadjusted_self_ty, pick, supplied_method_types)\n+        confirm_cx.confirm(unadjusted_self_ty, pick, segment)\n     }\n }\n \n@@ -73,7 +73,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     fn confirm(&mut self,\n                unadjusted_self_ty: Ty<'tcx>,\n                pick: probe::Pick<'tcx>,\n-               supplied_method_types: Vec<Ty<'tcx>>)\n+               segment: &hir::PathSegment)\n                -> MethodCallee<'tcx> {\n         // Adjust the self expression the user provided and obtain the adjusted type.\n         let self_ty = self.adjust_self_ty(unadjusted_self_ty, &pick);\n@@ -83,7 +83,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         // Create substitutions for the method's type parameters.\n         let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n-        let all_substs = self.instantiate_method_substs(&pick, supplied_method_types, rcvr_substs);\n+        let all_substs = self.instantiate_method_substs(&pick, segment, rcvr_substs);\n \n         debug!(\"all_substs={:?}\", all_substs);\n \n@@ -279,9 +279,14 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n     fn instantiate_method_substs(&mut self,\n                                  pick: &probe::Pick<'tcx>,\n-                                 mut supplied_method_types: Vec<Ty<'tcx>>,\n+                                 segment: &hir::PathSegment,\n                                  substs: &Substs<'tcx>)\n                                  -> &'tcx Substs<'tcx> {\n+        let supplied_method_types = match segment.parameters {\n+            hir::AngleBracketedParameters(ref data) => &data.types,\n+            _ => bug!(\"unexpected generic arguments: {:?}\", segment.parameters),\n+        };\n+\n         // Determine the values for the generic parameters of the method.\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n@@ -312,7 +317,6 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                          num_method_types))\n                     .emit();\n             }\n-            supplied_method_types = vec![self.tcx.types.err; num_method_types];\n         }\n \n         // Create subst for early-bound lifetime parameters, combining\n@@ -331,10 +335,10 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             let i = def.index as usize;\n             if i < substs.len() {\n                 substs.type_at(i)\n-            } else if supplied_method_types.is_empty() {\n-                self.type_var_for_def(self.span, def, cur_substs)\n+            } else if let Some(ast_ty) = supplied_method_types.get(i - supplied_start) {\n+                self.to_ty(ast_ty)\n             } else {\n-                supplied_method_types[i - supplied_start]\n+                self.type_var_for_def(self.span, def, cur_substs)\n             }\n         })\n     }"}, {"sha": "c842e47aaf51cbaac5bbe686ed14646348a68c44", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -130,22 +130,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// * `supplied_method_types`: the explicit method type parameters, if any (`T1..Tn`)\n     /// * `self_expr`:             the self expression (`foo`)\n     pub fn lookup_method(&self,\n-                         span: Span,\n-                         method_name: ast::Name,\n                          self_ty: ty::Ty<'tcx>,\n-                         supplied_method_types: Vec<ty::Ty<'tcx>>,\n+                         segment: &hir::PathSegment,\n+                         span: Span,\n                          call_expr: &'gcx hir::Expr,\n                          self_expr: &'gcx hir::Expr)\n                          -> Result<MethodCallee<'tcx>, MethodError<'tcx>> {\n         debug!(\"lookup(method_name={}, self_ty={:?}, call_expr={:?}, self_expr={:?})\",\n-               method_name,\n+               segment.name,\n                self_ty,\n                call_expr,\n                self_expr);\n \n         let mode = probe::Mode::MethodCall;\n         let self_ty = self.resolve_type_vars_if_possible(&self_ty);\n-        let pick = self.probe_for_name(span, mode, method_name, IsSuggestion(false),\n+        let pick = self.probe_for_name(span, mode, segment.name, IsSuggestion(false),\n                                        self_ty, call_expr.id)?;\n \n         if let Some(import_id) = pick.import_id {\n@@ -161,7 +160,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                call_expr,\n                                self_ty,\n                                pick,\n-                               supplied_method_types))\n+                               segment))\n     }\n \n     /// `lookup_method_in_trait` is used for overloaded operators."}, {"sha": "2634e8fcc006d5476114216b68fc2f2a057d7722", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -2771,33 +2771,30 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // Checks a method call.\n     fn check_method_call(&self,\n                          expr: &'gcx hir::Expr,\n-                         method_name: Spanned<ast::Name>,\n+                         segment: &hir::PathSegment,\n+                         span: Span,\n                          args: &'gcx [hir::Expr],\n-                         tps: &[P<hir::Ty>],\n                          expected: Expectation<'tcx>,\n                          lvalue_pref: LvaluePreference) -> Ty<'tcx> {\n         let rcvr = &args[0];\n         let rcvr_t = self.check_expr_with_lvalue_pref(&rcvr, lvalue_pref);\n-\n         // no need to check for bot/err -- callee does that\n-        let expr_t = self.structurally_resolved_type(expr.span, rcvr_t);\n+        let rcvr_t = self.structurally_resolved_type(expr.span, rcvr_t);\n \n-        let tps = tps.iter().map(|ast_ty| self.to_ty(&ast_ty)).collect::<Vec<_>>();\n-        let method = match self.lookup_method(method_name.span,\n-                                              method_name.node,\n-                                              expr_t,\n-                                              tps,\n+        let method = match self.lookup_method(rcvr_t,\n+                                              segment,\n+                                              span,\n                                               expr,\n                                               rcvr) {\n             Ok(method) => {\n                 self.write_method_call(expr.id, method);\n                 Ok(method)\n             }\n             Err(error) => {\n-                if method_name.node != keywords::Invalid.name() {\n-                    self.report_method_error(method_name.span,\n-                                             expr_t,\n-                                             method_name.node,\n+                if segment.name != keywords::Invalid.name() {\n+                    self.report_method_error(span,\n+                                             rcvr_t,\n+                                             segment.name,\n                                              Some(rcvr),\n                                              error,\n                                              Some(args));\n@@ -2807,7 +2804,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Call the generic checker.\n-        self.check_method_argument_types(method_name.span, method,\n+        self.check_method_argument_types(span, method,\n                                          &args[1..],\n                                          DontTupleArguments,\n                                          expected)\n@@ -3735,8 +3732,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::ExprCall(ref callee, ref args) => {\n               self.check_call(expr, &callee, args, expected)\n           }\n-          hir::ExprMethodCall(name, ref tps, ref args) => {\n-              self.check_method_call(expr, name, args, &tps[..], expected, lvalue_pref)\n+          hir::ExprMethodCall(ref segment, span, ref args) => {\n+              self.check_method_call(expr, segment, span, args, expected, lvalue_pref)\n           }\n           hir::ExprCast(ref e, ref t) => {\n             // Find the type of `e`. Supply hints based on the type we are casting to,"}, {"sha": "f7d9d532062a99acf62ffcf15a3626a0d6e017ad", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -848,19 +848,16 @@ pub enum ExprKind {\n     /// The first field resolves to the function itself,\n     /// and the second field is the list of arguments\n     Call(P<Expr>, Vec<P<Expr>>),\n-    /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n+    /// A method call (`x.foo::<'static, Bar, Baz>(a, b, c, d)`)\n     ///\n-    /// The `SpannedIdent` is the identifier for the method name.\n-    /// The vector of `Ty`s are the ascripted type parameters for the method\n+    /// The `PathSegment` represents the method name and its generic arguments\n     /// (within the angle brackets).\n-    ///\n     /// The first element of the vector of `Expr`s is the expression that evaluates\n     /// to the object on which the method is being called on (the receiver),\n     /// and the remaining elements are the rest of the arguments.\n-    ///\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprKind::MethodCall(foo, [Bar, Baz], [x, a, b, c, d])`.\n-    MethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),\n+    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    MethodCall(PathSegment, Vec<P<Expr>>),\n     /// A tuple (`(a, b, c ,d)`)\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (For example: `a + b`, `a * b`)"}, {"sha": "2555bf6dea7ab32d591b56685a51b8afb08b0ebf", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -673,9 +673,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                         expr: P<ast::Expr>,\n                         ident: ast::Ident,\n                         mut args: Vec<P<ast::Expr>> ) -> P<ast::Expr> {\n-        let id = Spanned { node: ident, span: span };\n         args.insert(0, expr);\n-        self.expr(span, ast::ExprKind::MethodCall(id, Vec::new(), args))\n+        self.expr(span, ast::ExprKind::MethodCall(ast::PathSegment::from_ident(ident, span), args))\n     }\n     fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n         self.expr(b.span, ast::ExprKind::Block(b))"}, {"sha": "eaec1eef1722cc3b4d0cb8c78a7460bd3a346a40", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -1151,10 +1151,15 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 ExprKind::Call(folder.fold_expr(f),\n                          folder.fold_exprs(args))\n             }\n-            ExprKind::MethodCall(i, tps, args) => {\n+            ExprKind::MethodCall(seg, args) => {\n                 ExprKind::MethodCall(\n-                    respan(folder.new_span(i.span), folder.fold_ident(i.node)),\n-                    tps.move_map(|x| folder.fold_ty(x)),\n+                    PathSegment {\n+                        identifier: folder.fold_ident(seg.identifier),\n+                        span: folder.new_span(seg.span),\n+                        parameters: seg.parameters.map(|ps| {\n+                            ps.map(|ps| folder.fold_path_parameters(ps))\n+                        }),\n+                    },\n                     folder.fold_exprs(args))\n             }\n             ExprKind::Binary(binop, lhs, rhs) => {"}, {"sha": "093ab0073f0dbef84082fcdde8ab573ef8265f51", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use abi::{self, Abi};\n-use ast::{AttrStyle, BareFnTy};\n+use ast::{AngleBracketedParameterData, AttrStyle, BareFnTy};\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Unsafety;\n use ast::{Mod, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n@@ -1831,11 +1831,7 @@ impl<'a> Parser<'a> {\n             let parameters = if parse_generics && self.eat_lt() {\n                 let (lifetimes, types, bindings) = self.parse_generic_args()?;\n                 self.expect_gt()?;\n-                ast::AngleBracketedParameterData {\n-                    lifetimes: lifetimes,\n-                    types: types,\n-                    bindings: bindings,\n-                }.into()\n+                AngleBracketedParameterData { lifetimes, types, bindings }.into()\n             } else if self.eat(&token::OpenDelim(token::Paren)) {\n                 let lo = self.prev_span;\n \n@@ -1898,11 +1894,7 @@ impl<'a> Parser<'a> {\n                 segments.push(PathSegment {\n                     identifier: identifier,\n                     span: ident_span,\n-                    parameters: ast::AngleBracketedParameterData {\n-                        lifetimes: lifetimes,\n-                        types: types,\n-                        bindings: bindings,\n-                    }.into(),\n+                    parameters: AngleBracketedParameterData { lifetimes, types, bindings }.into(),\n                 });\n \n                 // Consumed `a::b::<T,U>`, check for `::` before proceeding\n@@ -2023,14 +2015,6 @@ impl<'a> Parser<'a> {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_method_call(&mut self,\n-                      ident: ast::SpannedIdent,\n-                      tps: Vec<P<Ty>>,\n-                      args: Vec<P<Expr>>)\n-                      -> ast::ExprKind {\n-        ExprKind::MethodCall(ident, tps, args)\n-    }\n-\n     pub fn mk_index(&mut self, expr: P<Expr>, idx: P<Expr>) -> ast::ExprKind {\n         ExprKind::Index(expr, idx)\n     }\n@@ -2460,7 +2444,7 @@ impl<'a> Parser<'a> {\n     // parsing into an expression.\n     fn parse_dot_suffix(&mut self, ident: Ident, ident_span: Span, self_value: P<Expr>, lo: Span)\n                         -> PResult<'a, P<Expr>> {\n-        let (_, tys, bindings) = if self.eat(&token::ModSep) {\n+        let (lifetimes, types, bindings) = if self.eat(&token::ModSep) {\n             self.expect_lt()?;\n             let args = self.parse_generic_args()?;\n             self.expect_gt()?;\n@@ -2469,11 +2453,6 @@ impl<'a> Parser<'a> {\n             (Vec::new(), Vec::new(), Vec::new())\n         };\n \n-        if !bindings.is_empty() {\n-            let prev_span = self.prev_span;\n-            self.span_err(prev_span, \"type bindings are only permitted on trait paths\");\n-        }\n-\n         Ok(match self.token {\n             // expr.f() method call.\n             token::OpenDelim(token::Paren) => {\n@@ -2486,17 +2465,20 @@ impl<'a> Parser<'a> {\n                 let hi = self.prev_span;\n \n                 es.insert(0, self_value);\n-                let id = respan(ident_span.to(ident_span), ident);\n-                let nd = self.mk_method_call(id, tys, es);\n-                self.mk_expr(lo.to(hi), nd, ThinVec::new())\n+                let seg = PathSegment {\n+                    identifier: ident,\n+                    span: ident_span.to(ident_span),\n+                    parameters: AngleBracketedParameterData { lifetimes, types, bindings }.into(),\n+                };\n+                self.mk_expr(lo.to(hi), ExprKind::MethodCall(seg, es), ThinVec::new())\n             }\n             // Field access.\n             _ => {\n-                if !tys.is_empty() {\n-                    let prev_span = self.prev_span;\n-                    self.span_err(prev_span,\n-                                  \"field expressions may not \\\n-                                   have type parameters\");\n+                if let Some(generic_arg_span) = lifetimes.get(0).map(|x| x.span).or_else(||\n+                                                types.get(0).map(|x| x.span)).or_else(||\n+                                                bindings.get(0).map(|x| x.span)) {\n+                    self.span_err(generic_arg_span,\n+                                  \"field expressions may not have generic arguments\");\n                 }\n \n                 let id = respan(ident_span.to(ident_span), ident);"}, {"sha": "51c48f15f2975c442b44e4f05c980dfed19b5dc1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -1951,18 +1951,14 @@ impl<'a> State<'a> {\n     }\n \n     fn print_expr_method_call(&mut self,\n-                              ident: ast::SpannedIdent,\n-                              tys: &[P<ast::Ty>],\n+                              segment: &ast::PathSegment,\n                               args: &[P<ast::Expr>]) -> io::Result<()> {\n         let base_args = &args[1..];\n         self.print_expr(&args[0])?;\n         word(&mut self.s, \".\")?;\n-        self.print_ident(ident.node)?;\n-        if !tys.is_empty() {\n-            word(&mut self.s, \"::<\")?;\n-            self.commasep(Inconsistent, tys,\n-                          |s, ty| s.print_type(ty))?;\n-            word(&mut self.s, \">\")?;\n+        self.print_ident(segment.identifier)?;\n+        if let Some(ref parameters) = segment.parameters {\n+            self.print_path_parameters(parameters, true)?;\n         }\n         self.print_call_post(base_args)\n     }\n@@ -2041,8 +2037,8 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args[..])?;\n             }\n-            ast::ExprKind::MethodCall(ident, ref tys, ref args) => {\n-                self.print_expr_method_call(ident, &tys[..], &args[..])?;\n+            ast::ExprKind::MethodCall(ref segment, ref args) => {\n+                self.print_expr_method_call(segment, &args[..])?;\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs)?;"}, {"sha": "f4ac7e341ce4b6773d201dd38ad90406f570a671", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -674,9 +674,8 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref ident, ref types, ref arguments) => {\n-            visitor.visit_ident(ident.span, ident.node);\n-            walk_list!(visitor, visit_ty, types);\n+        ExprKind::MethodCall(ref segment, ref arguments) => {\n+            visitor.visit_path_segment(expression.span, segment);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {"}, {"sha": "acffb06ebecf2cc4cbfdef6441e2cd8cf9d1190a", "filename": "src/test/compile-fail/method-call-type-binding.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-type-binding.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    0.clone::<T = u8>(); //~ ERROR type bindings cannot be used in method calls\n+}"}, {"sha": "e904e8b5447a490876ac9261c7a7e3ef4826de37", "filename": "src/test/parse-fail/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d84693b93dae3958e3504f817face0184c5c3fdd/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftype-parameters-in-field-exprs.rs?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -21,5 +21,5 @@ fn main() {\n         y: 2,\n     };\n     f.x::<isize>;\n-    //~^ ERROR field expressions may not have type parameters\n+    //~^ ERROR field expressions may not have generic arguments\n }"}, {"sha": "70b89fdd7e5e77a3b88fc68982861d39d155be29", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=d84693b93dae3958e3504f817face0184c5c3fdd", "patch": "@@ -1 +1 @@\n-Subproject commit 4c0a8b63d61942349c18727409b2a600446e02d6\n+Subproject commit 70b89fdd7e5e77a3b88fc68982861d39d155be29"}]}