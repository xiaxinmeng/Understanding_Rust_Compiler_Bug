{"sha": "c0a6b5ff69580325e590d1062570be16c0a93f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTZiNWZmNjk1ODAzMjVlNTkwZDEwNjI1NzBiZTE2YzBhOTNmMTQ=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T08:30:55Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T08:30:55Z"}, "message": "Set errno when getcwd fails", "tree": {"sha": "40be63a3aca2470be128c04a54d3e1e923da129e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40be63a3aca2470be128c04a54d3e1e923da129e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a6b5ff69580325e590d1062570be16c0a93f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a6b5ff69580325e590d1062570be16c0a93f14", "html_url": "https://github.com/rust-lang/rust/commit/c0a6b5ff69580325e590d1062570be16c0a93f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a6b5ff69580325e590d1062570be16c0a93f14/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49275d42690318e410f65e3a38d04f2c4ccfbd0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/49275d42690318e410f65e3a38d04f2c4ccfbd0c", "html_url": "https://github.com/rust-lang/rust/commit/49275d42690318e410f65e3a38d04f2c4ccfbd0c"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "d766d8f0c1a6915cfc17cf4cb82b7c999e6c776c", "filename": "src/shims/env.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c0a6b5ff69580325e590d1062570be16c0a93f14/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a6b5ff69580325e590d1062570be16c0a93f14/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=c0a6b5ff69580325e590d1062570be16c0a93f14", "patch": "@@ -130,18 +130,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n         // FIXME: Technically we have to set the `errno` global too\n-        if let Ok(cwd) = env::current_dir() {\n-            // It is not clear what happens with non-utf8 paths here\n-            let mut bytes = cwd.display().to_string().into_bytes();\n-            // If the buffer is smaller or equal than the path, we return null.\n-            // FIXME: Technically we have to set the `errno` global too\n-            if (bytes.len() as u64) < size {\n-                // We add a `/0` terminator\n-                bytes.push(0);\n-                // This is ok because the buffer is larger than the path with the null terminator.\n-                this.memory_mut().get_mut(buf.alloc_id)?.write_bytes(tcx, buf, &bytes)?;\n-                return Ok(Scalar::Ptr(buf))\n+        match env::current_dir() {\n+            Ok(cwd) =>{\n+                // It is not clear what happens with non-utf8 paths here\n+                let mut bytes = cwd.display().to_string().into_bytes();\n+                // If the buffer is smaller or equal than the path, we return null.\n+                if (bytes.len() as u64) < size {\n+                    // We add a `/0` terminator\n+                    bytes.push(0);\n+                    // This is ok because the buffer is larger than the path with the null terminator.\n+                    this.memory_mut().get_mut(buf.alloc_id)?.write_bytes(tcx, buf, &bytes)?;\n+                    return Ok(Scalar::Ptr(buf))\n+                }\n+                this.machine.last_error = 34; // ERANGE\n             }\n+            Err(e) => this.machine.last_error = e.raw_os_error().unwrap() as u32,\n         }\n         Ok(Scalar::ptr_null(&*this.tcx))\n     }"}]}