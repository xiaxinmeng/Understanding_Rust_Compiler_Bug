{"sha": "514dfdbf12b71758c7abc3219ae1a3936e4d59d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGRmZGJmMTJiNzE3NThjN2FiYzMyMTlhZTFhMzkzNmU0ZDU5ZDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-29T13:06:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-19T08:29:29Z"}, "message": "Add tests for sub relationship on free/bound regions, revealing a bug.", "tree": {"sha": "edfa206f39fb3f125496685fb173809c4b1633d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfa206f39fb3f125496685fb173809c4b1633d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514dfdbf12b71758c7abc3219ae1a3936e4d59d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514dfdbf12b71758c7abc3219ae1a3936e4d59d9", "html_url": "https://github.com/rust-lang/rust/commit/514dfdbf12b71758c7abc3219ae1a3936e4d59d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514dfdbf12b71758c7abc3219ae1a3936e4d59d9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdce25e155d846bb9252fa4a18baef7e74cf8bf", "html_url": "https://github.com/rust-lang/rust/commit/6bdce25e155d846bb9252fa4a18baef7e74cf8bf"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "943650ce8a63b2ce9e06d88532bb2284904212fb", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/514dfdbf12b71758c7abc3219ae1a3936e4d59d9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514dfdbf12b71758c7abc3219ae1a3936e4d59d9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=514dfdbf12b71758c7abc3219ae1a3936e4d59d9", "patch": "@@ -25,6 +25,7 @@ use rustc_typeck::middle::infer::combine::Combine;\n use rustc_typeck::middle::infer;\n use rustc_typeck::middle::infer::lub::Lub;\n use rustc_typeck::middle::infer::glb::Glb;\n+use rustc_typeck::middle::infer::sub::Sub;\n use rustc_typeck::util::ppaux::{ty_to_string, Repr, UserString};\n use rustc::session::{mod,config};\n use syntax::{abi, ast, ast_map, ast_util};\n@@ -341,6 +342,11 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         infer::TypeTrace::dummy()\n     }\n \n+    pub fn sub(&self) -> Sub<'a, 'tcx> {\n+        let trace = self.dummy_type_trace();\n+        Sub(self.infcx.combine_fields(true, trace))\n+    }\n+\n     pub fn lub(&self) -> Lub<'a, 'tcx> {\n         let trace = self.dummy_type_trace();\n         Lub(self.infcx.combine_fields(true, trace))\n@@ -359,6 +365,33 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n         }\n     }\n \n+    /// Checks that `t1 <: t2` is true (this may register additional\n+    /// region checks).\n+    pub fn check_sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) {\n+        match self.sub().tys(t1, t2) {\n+            Ok(_) => { }\n+            Err(ref e) => {\n+                panic!(\"unexpected error computing sub({},{}): {}\",\n+                       t1.repr(self.infcx.tcx),\n+                       t2.repr(self.infcx.tcx),\n+                       ty::type_err_to_str(self.infcx.tcx, e));\n+            }\n+        }\n+    }\n+\n+    /// Checks that `t1 <: t2` is false (this may register additional\n+    /// region checks).\n+    pub fn check_not_sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) {\n+        match self.sub().tys(t1, t2) {\n+            Err(_) => { }\n+            Ok(_) => {\n+                panic!(\"unexpected success computing sub({},{})\",\n+                       t1.repr(self.infcx.tcx),\n+                       t2.repr(self.infcx.tcx));\n+            }\n+        }\n+    }\n+\n     /// Checks that `LUB(t1,t2) == t_lub`\n     pub fn check_lub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>, t_lub: Ty<'tcx>) {\n         match self.lub().tys(t1, t2) {\n@@ -421,6 +454,54 @@ fn contravariant_region_ptr_err() {\n              })\n }\n \n+#[test]\n+fn sub_free_bound_false() {\n+    //! Test that:\n+    //!\n+    //!     fn(&'a int) <: for<'b> fn(&'b int)\n+    //!\n+    //! does NOT hold.\n+\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let t_rptr_free1 = env.t_rptr_free(0, 1);\n+        let t_rptr_bound1 = env.t_rptr_late_bound(1);\n+        env.check_not_sub(env.t_fn(&[t_rptr_free1], ty::mk_int()),\n+                          env.t_fn(&[t_rptr_bound1], ty::mk_int()));\n+    })\n+}\n+\n+#[test]\n+fn sub_bound_free_true() {\n+    //! Test that:\n+    //!\n+    //!     for<'a> fn(&'a int) <: fn(&'b int)\n+    //!\n+    //! DOES hold.\n+\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let t_rptr_bound1 = env.t_rptr_late_bound(1);\n+        let t_rptr_free1 = env.t_rptr_free(0, 1);\n+        env.check_sub(env.t_fn(&[t_rptr_bound1], ty::mk_int()),\n+                      env.t_fn(&[t_rptr_free1], ty::mk_int()));\n+    })\n+}\n+\n+#[test]\n+fn sub_free_bound_false_infer() {\n+    //! Test that:\n+    //!\n+    //!     fn(_#1) <: for<'b> fn(&'b int)\n+    //!\n+    //! does NOT hold for any instantiation of `_#1`.\n+\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let t_infer1 = env.infcx.next_ty_var();\n+        let t_rptr_bound1 = env.t_rptr_late_bound(1);\n+        env.check_not_sub(env.t_fn(&[t_infer1], ty::mk_int()),\n+                          env.t_fn(&[t_rptr_bound1], ty::mk_int()));\n+    })\n+}\n+\n #[test]\n fn lub_bound_bound() {\n     test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {"}]}