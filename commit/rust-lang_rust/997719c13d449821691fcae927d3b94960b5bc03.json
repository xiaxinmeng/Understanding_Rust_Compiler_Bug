{"sha": "997719c13d449821691fcae927d3b94960b5bc03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NzcxOWMxM2Q0NDk4MjE2OTFmY2FlOTI3ZDNiOTQ5NjBiNWJjMDM=", "commit": {"author": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-07-29T19:06:36Z"}, "committer": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-08-01T22:16:01Z"}, "message": "Fixed a race where a scheduler configured to only run tasks pinned to it would \"bounch\" a regular task in and out of the work queue without allowing a different scheduler to run it.", "tree": {"sha": "c2a194a3161ac8f341eb789c6825f6464d37af50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a194a3161ac8f341eb789c6825f6464d37af50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997719c13d449821691fcae927d3b94960b5bc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997719c13d449821691fcae927d3b94960b5bc03", "html_url": "https://github.com/rust-lang/rust/commit/997719c13d449821691fcae927d3b94960b5bc03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997719c13d449821691fcae927d3b94960b5bc03/comments", "author": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f385e44bbe31a693a665a74b6b493e11b7cf1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f385e44bbe31a693a665a74b6b493e11b7cf1c", "html_url": "https://github.com/rust-lang/rust/commit/37f385e44bbe31a693a665a74b6b493e11b7cf1c"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "2bfe0fafdd85d3cb9a89d1be032e3ced08911fd5", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/997719c13d449821691fcae927d3b94960b5bc03/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997719c13d449821691fcae927d3b94960b5bc03/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=997719c13d449821691fcae927d3b94960b5bc03", "patch": "@@ -120,7 +120,7 @@ impl Local for IoFactoryObject {\n \n #[cfg(test)]\n mod test {\n-    use unstable::run_in_bare_thread;\n+//    use unstable::run_in_bare_thread;\n     use rt::test::*;\n //    use rt::sched::Scheduler;\n     use super::*;"}, {"sha": "d22c5857a1995937a2fbfa59abea9e5662bb7a2b", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/997719c13d449821691fcae927d3b94960b5bc03/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997719c13d449821691fcae927d3b94960b5bc03/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=997719c13d449821691fcae927d3b94960b5bc03", "patch": "@@ -68,7 +68,10 @@ pub struct Scheduler {\n     priv cleanup_job: Option<CleanupJob>,\n     metrics: SchedMetrics,\n     /// Should this scheduler run any task, or only pinned tasks?\n-    run_anything: bool\n+    run_anything: bool,\n+    /// If the scheduler shouldn't run some tasks, a friend to send\n+    /// them to.\n+    friend_handle: Option<SchedHandle>\n }\n \n pub struct SchedHandle {\n@@ -80,7 +83,8 @@ pub struct SchedHandle {\n pub enum SchedMessage {\n     Wake,\n     Shutdown,\n-    PinnedTask(~Task)\n+    PinnedTask(~Task),\n+    TaskFromFriend(~Task)\n }\n \n enum CleanupJob {\n@@ -97,7 +101,7 @@ impl Scheduler {\n                sleeper_list: SleeperList)\n         -> Scheduler {\n \n-        Scheduler::new_special(event_loop, work_queue, sleeper_list, true)\n+        Scheduler::new_special(event_loop, work_queue, sleeper_list, true, None)\n \n     }\n \n@@ -106,7 +110,8 @@ impl Scheduler {\n     pub fn new_special(event_loop: ~EventLoopObject,\n                        work_queue: WorkQueue<~Task>,\n                        sleeper_list: SleeperList,\n-                       run_anything: bool)\n+                       run_anything: bool,\n+                       friend: Option<SchedHandle>)\n         -> Scheduler {\n \n         Scheduler {\n@@ -120,7 +125,8 @@ impl Scheduler {\n             sched_task: None,\n             cleanup_job: None,\n             metrics: SchedMetrics::new(),\n-            run_anything: run_anything\n+            run_anything: run_anything,\n+            friend_handle: friend\n         }\n     }\n \n@@ -327,6 +333,10 @@ impl Scheduler {\n                 this.resume_task_immediately(task);\n                 return None;\n             }\n+            Some(TaskFromFriend(task)) => {\n+                this.resume_task_immediately(task);\n+                return None;\n+            }\n             Some(Wake) => {\n                 this.sleepy = false;\n                 return Some(this);\n@@ -376,6 +386,19 @@ impl Scheduler {\n         }\n     }\n \n+    /// Take a non-homed task we aren't allowed to run here and send\n+    /// it to the designated friend scheduler to execute.\n+    fn send_to_friend(&mut self, task: ~Task) {\n+        match self.friend_handle {\n+            Some(ref mut handle) => {\n+                handle.send(TaskFromFriend(task));\n+            }\n+            None => {\n+                rtabort!(\"tried to send task to a friend but scheduler has no friends\");\n+            }\n+        }\n+    }\n+\n     // Resume a task from the queue - but also take into account that\n     // it might not belong here.\n \n@@ -409,7 +432,8 @@ impl Scheduler {\n                     }\n                     AnySched => {\n                         task.give_home(AnySched);\n-                        this.enqueue_task(task);\n+//                        this.enqueue_task(task);\n+                        this.send_to_friend(task);\n                         return Some(this);\n                     }\n                 }\n@@ -816,12 +840,15 @@ mod test {\n \n             let normal_handle = Cell::new(normal_sched.make_handle());\n \n+            let friend_handle = normal_sched.make_handle();\n+\n             // Our special scheduler\n             let mut special_sched = ~Scheduler::new_special(\n                 ~UvEventLoop::new(),\n                 work_queue.clone(),\n                 sleepers.clone(),\n-                false);\n+                false,\n+                Some(friend_handle));\n \n             let special_handle = Cell::new(special_sched.make_handle());\n "}]}