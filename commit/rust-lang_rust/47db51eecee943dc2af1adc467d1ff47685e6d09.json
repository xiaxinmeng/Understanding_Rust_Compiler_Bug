{"sha": "47db51eecee943dc2af1adc467d1ff47685e6d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZGI1MWVlY2VlOTQzZGMyYWYxYWRjNDY3ZDFmZjQ3Njg1ZTZkMDk=", "commit": {"author": {"name": "Blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2018-12-17T01:01:57Z"}, "committer": {"name": "Blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2019-01-09T01:57:22Z"}, "message": "Issue 56905\n\nAdding a map to TypeckTables to get the list of all the Upvars\ngiven a closureID. This is help us get rid of the recurring\npattern in the codebase of iterating over the free vars\nusing with_freevars.", "tree": {"sha": "29a49f95d46194a8cbbfe370ec2b88741f5cd40b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a49f95d46194a8cbbfe370ec2b88741f5cd40b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47db51eecee943dc2af1adc467d1ff47685e6d09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47db51eecee943dc2af1adc467d1ff47685e6d09", "html_url": "https://github.com/rust-lang/rust/commit/47db51eecee943dc2af1adc467d1ff47685e6d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47db51eecee943dc2af1adc467d1ff47685e6d09/comments", "author": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167ceff01ec2f01f677fa6351646255d3dacbb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/167ceff01ec2f01f677fa6351646255d3dacbb98", "html_url": "https://github.com/rust-lang/rust/commit/167ceff01ec2f01f677fa6351646255d3dacbb98"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "aebf71791bc6061ba935f4adb754101f9878f6f0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=47db51eecee943dc2af1adc467d1ff47685e6d09", "patch": "@@ -417,6 +417,12 @@ pub struct TypeckTables<'tcx> {\n     /// All the existential types that are restricted to concrete types\n     /// by this function\n     pub concrete_existential_types: FxHashMap<DefId, Ty<'tcx>>,\n+\n+    /// Given the closure ID this map provides the list of UpvarIDs used by it.\n+    /// The upvarID contains the HIR node ID and it also contains the full path\n+    /// leading to the member of the struct or tuple that is used instead of the\n+    /// entire variable.\n+    pub upvar_list: ty::UpvarListMap<'tcx>,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -441,6 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             tainted_by_errors: false,\n             free_region_map: Default::default(),\n             concrete_existential_types: Default::default(),\n+            upvar_list: Default::default(),\n         }\n     }\n \n@@ -741,6 +748,8 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             tainted_by_errors,\n             ref free_region_map,\n             ref concrete_existential_types,\n+            ref upvar_list,\n+\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -783,6 +792,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);\n             concrete_existential_types.hash_stable(hcx, hasher);\n+            upvar_list.hash_stable(hcx, hasher);\n         })\n     }\n }"}, {"sha": "f770f2bf7b1255fde5888ec76c16b30b5d561c79", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=47db51eecee943dc2af1adc467d1ff47685e6d09", "patch": "@@ -589,6 +589,8 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::TyS<'gcx> {\n \n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n+pub type UpvarListMap<'tcx> = FxHashMap<DefId, Vec<UpvarId>>;\n+\n impl<'tcx> serialize::UseSpecializedEncodable for Ty<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n "}, {"sha": "c37e0e262cf5f357f515f1f2f53c816604c34f2d", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47db51eecee943dc2af1adc467d1ff47685e6d09/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=47db51eecee943dc2af1adc467d1ff47685e6d09", "patch": "@@ -122,14 +122,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         self.tcx.with_freevars(closure_node_id, |freevars| {\n+            let mut freevar_list: Vec<ty::UpvarId> = Vec::new();\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n-                        hir_id : self.tcx.hir().node_to_hir_id(freevar.var_id()),\n+                        hir_id: self.tcx.hir().node_to_hir_id(freevar.var_id()),\n                     },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n+                freevar_list.push(upvar_id);\n \n                 let capture_kind = match capture_clause {\n                     hir::CaptureByValue => ty::UpvarCapture::ByValue,\n@@ -149,6 +151,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .upvar_capture_map\n                     .insert(upvar_id, capture_kind);\n             }\n+            self.tables\n+                .borrow_mut()\n+                .upvar_list\n+                .insert(closure_def_id, freevar_list);\n         });\n \n         let body_owner_def_id = self.tcx.hir().body_owner_def_id(body.id());\n@@ -166,7 +172,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.param_env,\n             region_scope_tree,\n             &self.tables.borrow(),\n-        ).consume_body(body);\n+        )\n+        .consume_body(body);\n \n         if let Some(closure_substs) = infer_kind {\n             // Unify the (as yet unbound) type variable in the closure\n@@ -240,9 +247,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let var_hir_id = tcx.hir().node_to_hir_id(var_node_id);\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_path: ty::UpvarPath {\n-                            hir_id: var_hir_id,\n-                        },\n+                        var_path: ty::UpvarPath { hir_id: var_hir_id },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n@@ -262,7 +267,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             },\n                         ),\n                     }\n-                }).collect()\n+                })\n+                .collect()\n         })\n     }\n }"}]}