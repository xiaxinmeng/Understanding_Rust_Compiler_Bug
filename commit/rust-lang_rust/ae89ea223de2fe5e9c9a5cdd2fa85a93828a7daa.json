{"sha": "ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODllYTIyM2RlMmZlNWU5YzlhNWNkZDJmYTg1YTkzODI4YTdkYWE=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-17T21:42:28Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-17T21:42:40Z"}, "message": "Making more of the rust_task structure directly accessible from Rust.", "tree": {"sha": "1a28bb09eaeaf105bd84cc62c6a3e6c9ae2a8b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a28bb09eaeaf105bd84cc62c6a3e6c9ae2a8b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "html_url": "https://github.com/rust-lang/rust/commit/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/comments", "author": null, "committer": null, "parents": [{"sha": "efac7c9a197fa3ff3497ce99a2dda8693b3ef683", "url": "https://api.github.com/repos/rust-lang/rust/commits/efac7c9a197fa3ff3497ce99a2dda8693b3ef683", "html_url": "https://github.com/rust-lang/rust/commit/efac7c9a197fa3ff3497ce99a2dda8693b3ef683"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "17c766cda1a53e930293e4c97e8cbb7f2cc2882c", "filename": "src/lib/comm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -8,7 +8,6 @@ export _chan;\n export _port;\n \n export mk_port;\n-export chan_from_unsafe_ptr;\n export send;\n export recv;\n export chan;\n@@ -47,7 +46,6 @@ resource port_ptr(po: *rustrt::rust_port) {\n type port<~T> = @port_ptr;\n \n obj port_obj<~T>(raw_port : port<T>) {\n-    // FIXME: rename this to chan once chan is not a keyword.\n     fn mk_chan() -> _chan<T> {\n         chan::<T>(raw_port)\n     }"}, {"sha": "42815845e477f76fa1998d04257c5bc02abf4798", "filename": "src/lib/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -10,3 +10,4 @@ fn offset<T>(ptr: *T, count: uint) -> *T {\n     ret rusti::ptr_offset(ptr, count);\n }\n \n+fn null<T>() -> *T { ret unsafe::reinterpret_cast(0u); }"}, {"sha": "d3f26ce769bba9a4ee4d44bea4fa37c377892669", "filename": "src/lib/task.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -4,6 +4,7 @@ import comm::_chan;\n import option::some;\n import option::none;\n import option = option::t;\n+import ptr;\n \n native \"rust\" mod rustrt {\n     fn task_sleep(time_in_us: uint);\n@@ -19,9 +20,8 @@ native \"rust\" mod rustrt {\n     fn set_min_stack(stack_size: uint);\n \n     fn new_task() -> task_id;\n-    fn drop_task(id : task_id);\n+    fn drop_task(task : *rust_task);\n     fn get_task_pointer(id : task_id) -> *rust_task;\n-    fn get_task_context(id : task_id) -> *x86_registers;\n     fn start_task(id : task_id);\n     fn get_task_trampoline() -> u32;\n \n@@ -31,10 +31,26 @@ native \"rust\" mod rustrt {\n }\n \n type rust_task = {\n+    id : task,\n     mutable notify_enabled : u8,\n-    mutable notify_chan : _chan<task_notification>\n+    mutable notify_chan : _chan<task_notification>,\n+    ctx : task_context,\n+    stack_ptr : *u8\n };\n \n+type task_context = {\n+    regs : x86_registers,\n+    next : *u8\n+};\n+\n+resource rust_task_ptr(task : *rust_task) {\n+    rustrt::drop_task(task);\n+}\n+\n+fn get_task_ptr(id : task) -> rust_task_ptr {\n+    ret rust_task_ptr(rustrt::get_task_pointer(id));\n+}\n+\n type task = int;\n type task_id = task;\n \n@@ -95,23 +111,25 @@ fn spawn_inner(thunk : -fn() -> (),\n     let id = rustrt::new_task();\n \n     // the order of arguments are outptr, taskptr, envptr.\n-\n-    // In LLVM fastcall puts the first two in ecx, edx, and the rest on the\n+    // LLVM fastcall puts the first two in ecx, edx, and the rest on the\n     // stack.\n-    let regs = rustrt::get_task_context(id);\n \n     // set up the task pointer\n-    let task_ptr = rustrt::get_task_pointer(id);\n-    (*regs).edx = cast(task_ptr);\n+    let task_ptr = get_task_ptr(id);\n+    let regs = ptr::addr_of((**task_ptr).ctx.regs);\n+    (*regs).edx = cast(*task_ptr);\n+    (*regs).esp = cast((**task_ptr).stack_ptr);\n+\n+    assert ptr::null() != (**task_ptr).stack_ptr;\n \n     let raw_thunk : { code: u32, env: u32 } = cast(thunk);\n     (*regs).eip = raw_thunk.code;\n \n     // set up notifications if they are enabled.\n     alt notify {\n       some(c) {\n-        (*task_ptr).notify_enabled = 1u8;\n-        (*task_ptr).notify_chan = c;\n+        (**task_ptr).notify_enabled = 1u8;\n+        (**task_ptr).notify_chan = c;\n       }\n       none {}\n     };\n@@ -130,7 +148,7 @@ fn spawn_inner(thunk : -fn() -> (),\n     // put the return pointer in ecx.\n     (*regs).ecx = (*regs).esp + 8u32;\n \n-    *tptr = cast(task_ptr);\n+    *tptr = cast(*task_ptr);\n     *env = raw_thunk.env;\n     *ra = rustrt::get_task_trampoline();\n \n@@ -139,11 +157,6 @@ fn spawn_inner(thunk : -fn() -> (),\n \n     rustrt::leak(thunk);\n \n-    // Drop twice because get_task_context and get_task_pounter both bump the\n-    // ref count and expect us to free it.\n-    rustrt::drop_task(id);\n-    rustrt::drop_task(id);\n-\n     ret id;\n }\n "}, {"sha": "f5fa3777eec390c9f093106dbc9401858bf374ed", "filename": "src/rt/arch/i386/context.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.cpp?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -4,13 +4,15 @@\n \n #include <stdio.h>\n #include <stdlib.h>\n+#include <assert.h>\n \n extern \"C\" uint32_t CDECL swap_registers(registers_t *oregs,\n                                          registers_t *regs)\n   asm (\"swap_registers\");\n \n context::context()\n {\n+    assert((void*)&regs == (void*)this);\n }\n \n void context::swap(context &out)"}, {"sha": "aa00de961b8f71a9452dcc9f36e6cbc28eda3d09", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -712,38 +712,24 @@ unpin_task(rust_task *task) {\n \n extern \"C\" CDECL rust_task_id\n get_task_id(rust_task *task) {\n-    return task->id;\n+    return task->user.id;\n }\n \n extern \"C\" CDECL rust_task_id\n new_task(rust_task *task) {\n     return task->kernel->create_task(task, NULL);\n }\n \n-extern \"C\" CDECL registers_t *\n-get_task_context(rust_task *task, rust_task_id id) {\n-    rust_task *target = task->kernel->get_task_by_id(id);\n-    registers_t *regs = &target->ctx.regs;\n-    // This next line is a little dangerous.. It means we can only safely call\n-    // this when starting a task.\n-    regs->esp = target->rust_sp;\n-    return regs;\n-}\n-\n extern \"C\" CDECL void\n-drop_task(rust_task *task, rust_task_id tid) {\n-    rust_task *target = task->kernel->get_task_by_id(tid);\n+drop_task(rust_task *task, rust_task *target) {\n     if(target) {\n         target->deref();\n-        // Deref twice because get_task_by_id does once.\n-        target->deref();\n     }\n }\n \n extern \"C\" CDECL rust_task *\n get_task_pointer(rust_task *task, rust_task_id id) {\n-    rust_task *t = task->kernel->get_task_by_id(id);\n-    return t;\n+    return task->kernel->get_task_by_id(id);\n }\n \n extern \"C\" CDECL void"}, {"sha": "9899939da02c0f65d808deed60b512434f6cc980", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -154,10 +154,10 @@ rust_kernel::create_task(rust_task *spawner, const char *name) {\n     rust_task *t = thread->create_task(spawner, name);\n     {\n         scoped_lock with(_kernel_lock);\n-        t->id = max_id++;\n-        task_table.put(t->id, t);\n+        t->user.id = max_id++;\n+        task_table.put(t->user.id, t);\n     }\n-    return t->id;\n+    return t->user.id;\n }\n \n rust_task *"}, {"sha": "913f489c382cd1ee89492199bdd4a3951c76b4e0", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -47,10 +47,10 @@ void\n rust_scheduler::activate(rust_task *task) {\n     context ctx;\n \n-    task->ctx.next = &ctx;\n+    task->user.ctx.next = &ctx;\n     DLOG(this, task, \"descheduling...\");\n     lock.unlock();\n-    task->ctx.swap(ctx);\n+    task->user.ctx.swap(ctx);\n     lock.lock();\n     DLOG(this, task, \"task has returned\");\n }\n@@ -226,7 +226,7 @@ rust_scheduler::start_main_loop() {\n              \", state: %s\",\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n-             scheduled_task->rust_sp,\n+             scheduled_task->user.rust_sp,\n              scheduled_task->state->name);\n \n         interrupt_flag = 0;\n@@ -244,7 +244,7 @@ rust_scheduler::start_main_loop() {\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n              scheduled_task->state->name,\n-             scheduled_task->rust_sp,\n+             scheduled_task->user.rust_sp,\n              id);\n \n         reap_dead_tasks(id);"}, {"sha": "7b8160f36374440057baece8ab5a357595e63a57", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -57,7 +57,6 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     ref_count(1),\n     stk(NULL),\n     runtime_sp(0),\n-    rust_sp(0),\n     gc_alloc_chain(0),\n     sched(sched),\n     cache(NULL),\n@@ -86,7 +85,7 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     user.notify_enabled = 0;\n \n     stk = new_stk(sched, this, 0);\n-    rust_sp = stk->limit;\n+    user.rust_sp = stk->limit;\n }\n \n rust_task::~rust_task()\n@@ -99,15 +98,15 @@ rust_task::~rust_task()\n             get_chan_by_handle(&user.notify_chan);\n         if(target) {\n             task_notification msg;\n-            msg.id = id;\n+            msg.id = user.id;\n             msg.result = failed ? tr_failure : tr_success;\n \n             target->send(&msg);\n             target->deref();\n         }\n     }\n \n-    kernel->release_task_id(id);\n+    kernel->release_task_id(user.id);\n \n     /* FIXME: tighten this up, there are some more\n        assertions that hold at task-lifecycle events. */\n@@ -166,7 +165,7 @@ rust_task::start(uintptr_t spawnee_fn,\n \n     I(sched, stk->data != NULL);\n \n-    char *sp = (char *)rust_sp;\n+    char *sp = (char *)user.rust_sp;\n \n     sp -= sizeof(spawn_args);\n \n@@ -178,7 +177,7 @@ rust_task::start(uintptr_t spawnee_fn,\n     void **f = (void **)&a->f;\n     *f = (void *)spawnee_fn;\n \n-    ctx.call((void *)task_start_wrapper, a, sp);\n+    user.ctx.call((void *)task_start_wrapper, a, sp);\n \n     this->start();\n }\n@@ -213,7 +212,7 @@ rust_task::yield(size_t time_in_us) {\n     yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler.\n-    ctx.next->swap(ctx);\n+    user.ctx.next->swap(user.ctx);\n }\n \n void"}, {"sha": "ea155687d984174ecfce4ae00e22b44d82102515", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -38,8 +38,11 @@ struct gc_alloc {\n // portions of the task structure that are accessible from the standard\n // library. This struct must agree with the std::task::rust_task record.\n struct rust_task_user {\n+    rust_task_id id;\n     uint8_t notify_enabled;\n     chan_handle notify_chan;\n+    context ctx;\n+    uintptr_t rust_sp;         // Saved sp when not running.\n };\n \n // std::lib::task::task_result\n@@ -66,7 +69,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Fields known to the compiler.\n     stk_seg *stk;\n     uintptr_t runtime_sp;      // Runtime sp while task running.\n-    uintptr_t rust_sp;         // Saved sp when not running.\n     gc_alloc *gc_alloc_chain;  // Linked list of GC allocations.\n     rust_scheduler *sched;\n     rust_crate_cache *cache;\n@@ -82,7 +84,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     size_t gc_alloc_thresh;\n     size_t gc_alloc_accum;\n \n-    rust_task_id id;\n     rust_port_id next_port_id;\n \n     // Keeps track of the last time this task yielded.\n@@ -99,8 +100,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // List of tasks waiting for this task to finish.\n     array_list<rust_task *> tasks_waiting_to_join;\n \n-    context ctx;\n-\n     // This flag indicates that a worker is either currently running the task\n     // or is about to run this task.\n     int running_on;"}, {"sha": "ea3be3158317da22b03e0d6a4b30ca31b52de164", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ae89ea223de2fe5e9c9a5cdd2fa85a93828a7daa", "patch": "@@ -25,7 +25,6 @@ do_gc\n drop_port\n drop_task\n get_port_id\n-get_task_context\n get_task_id\n get_task_pointer\n get_task_trampoline"}]}