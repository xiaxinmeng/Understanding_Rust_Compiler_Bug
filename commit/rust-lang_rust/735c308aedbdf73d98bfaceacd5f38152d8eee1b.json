{"sha": "735c308aedbdf73d98bfaceacd5f38152d8eee1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNWMzMDhhZWRiZGY3M2Q5OGJmYWNlYWNkNWYzODE1MmQ4ZWVlMWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:23:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:23:42Z"}, "message": "rollup merge of #20416: nikomatsakis/coherence\n\nConflicts:\n\tsrc/test/run-pass/issue-15734.rs\n\tsrc/test/run-pass/issue-3743.rs", "tree": {"sha": "9e2a67565a411343625c31ca149196f284d6b12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2a67565a411343625c31ca149196f284d6b12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735c308aedbdf73d98bfaceacd5f38152d8eee1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735c308aedbdf73d98bfaceacd5f38152d8eee1b", "html_url": "https://github.com/rust-lang/rust/commit/735c308aedbdf73d98bfaceacd5f38152d8eee1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735c308aedbdf73d98bfaceacd5f38152d8eee1b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dab96758aeb9ffaeedc7993cdabcf163f4fd491", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dab96758aeb9ffaeedc7993cdabcf163f4fd491", "html_url": "https://github.com/rust-lang/rust/commit/4dab96758aeb9ffaeedc7993cdabcf163f4fd491"}, {"sha": "82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32", "html_url": "https://github.com/rust-lang/rust/commit/82a2e8e31016ace5ee67c89b852dcc8e1fa09e32"}], "stats": {"total": 877, "additions": 705, "deletions": 172}, "files": [{"sha": "d17a54ce6e56d8bb5f208b512f2a13f4ab42ecd8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -64,7 +64,8 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![no_std]\n-#![feature(lang_items, phase, unsafe_destructor, default_type_params)]\n+#![allow(unknown_features)]\n+#![feature(lang_items, phase, unsafe_destructor, default_type_params, old_orphan_check)]\n \n #[phase(plugin, link)]\n extern crate core;"}, {"sha": "82175c3949466c0d3315d5a5e409ef2ba91873d7", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -25,6 +25,7 @@\n #![feature(macro_rules, default_type_params, phase, globs)]\n #![feature(unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n #![no_std]\n \n #[phase(plugin, link)] extern crate core;"}, {"sha": "d0396ddc7adcc21504039c20f8a9f484a0e2e08a", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -98,9 +98,9 @@ impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n }\n \n #[allow(deprecated)]\n-impl<'a, T: PartialEq, Sized? V: AsSlice<T>> Equiv<V> for MaybeOwnedVector<'a, T> {\n-    fn equiv(&self, other: &V) -> bool {\n-        self.as_slice() == other.as_slice()\n+impl<'a, T: PartialEq> Equiv<[T]> for MaybeOwnedVector<'a, T> {\n+    fn equiv(&self, other: &[T]) -> bool {\n+        self.as_slice() == other\n     }\n }\n "}, {"sha": "cdc27244dde6ea6dde1650a75750bf0fd5944939", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -22,10 +22,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate flate;\n@@ -98,6 +100,7 @@ pub mod middle {\n     pub mod traits;\n     pub mod ty;\n     pub mod ty_fold;\n+    pub mod ty_walk;\n     pub mod weak_lang_items;\n }\n "}, {"sha": "a25b6d8b8fa4688a0821bc8285699ba4188e41c3", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -443,9 +443,15 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n                             -> Option<Rc<ty::TraitRef<'tcx>>>\n {\n     let item_doc = lookup_item(id, cdata.data());\n-    reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n-        doc_trait_ref(tp, tcx, cdata)\n-    })\n+    let fam = item_family(item_doc);\n+    match fam {\n+        Family::Impl => {\n+            reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n+                doc_trait_ref(tp, tcx, cdata)\n+            })\n+        }\n+        _ => None\n+    }\n }\n \n pub fn get_impl_vtables<'tcx>(cdata: Cmd,"}, {"sha": "505352fa1234462801e06c5d95abbece2acce6d7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -11,7 +11,8 @@\n //! A pass that annotates every item and method with its stability level,\n //! propagating default levels lexically from parent to children ast nodes.\n \n-use util::nodemap::{NodeMap, DefIdMap};\n+use middle::ty;\n+use metadata::csearch;\n use syntax::codemap::Span;\n use syntax::{attr, visit};\n use syntax::ast;\n@@ -21,8 +22,8 @@ use syntax::ast::{TypeMethod, Method, Generics, StructField, TypeTraitItem};\n use syntax::ast_util::is_local;\n use syntax::attr::Stability;\n use syntax::visit::{FnKind, FkMethod, Visitor};\n-use middle::ty;\n-use metadata::csearch;\n+use util::nodemap::{NodeMap, DefIdMap};\n+use util::ppaux::Repr;\n \n use std::mem::replace;\n \n@@ -154,10 +155,13 @@ impl Index {\n /// Lookup the stability for a node, loading external crate\n /// metadata as necessary.\n pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n+    debug!(\"lookup(id={})\",\n+           id.repr(tcx));\n+\n     // is this definition the implementation of a trait method?\n     match ty::trait_item_of_item(tcx, id) {\n-        Some(ty::MethodTraitItemId(trait_method_id))\n-                if trait_method_id != id => {\n+        Some(ty::MethodTraitItemId(trait_method_id)) if trait_method_id != id => {\n+            debug!(\"lookup: trait_method_id={}\", trait_method_id);\n             return lookup(tcx, trait_method_id)\n         }\n         _ => {}\n@@ -178,6 +182,7 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n             // stability of the trait to determine the stability of any\n             // unmarked impls for it. See FIXME above for more details.\n \n+            debug!(\"lookup: trait_id={}\", trait_id);\n             lookup(tcx, trait_id)\n         } else {\n             None"}, {"sha": "4aff36c2624958764c83996cbe82af71f682efaa", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 82, "deletions": 71, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -14,10 +14,10 @@ use super::SelectionContext;\n use super::{Obligation, ObligationCause};\n use super::util;\n \n-use middle::subst;\n use middle::subst::Subst;\n use middle::ty::{mod, Ty};\n use middle::infer::InferCtxt;\n+use std::collections::HashSet;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::DUMMY_SP;\n@@ -52,9 +52,21 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n     selcx.evaluate_impl(impl2_def_id, &obligation)\n }\n \n-pub fn impl_is_local(tcx: &ty::ctxt,\n-                     impl_def_id: ast::DefId)\n-                     -> bool\n+#[allow(missing_copy_implementations)]\n+pub enum OrphanCheckErr {\n+    NoLocalInputType,\n+    UncoveredTypeParameter(ty::ParamTy),\n+}\n+\n+/// Checks the coherence orphan rules. `impl_def_id` should be the\n+/// def-id of a trait impl. To pass, either the trait must be local, or else\n+/// two conditions must be satisfied:\n+///\n+/// 1. At least one of the input types must involve a local type.\n+/// 2. All type parameters must be covered by a local type.\n+pub fn orphan_check(tcx: &ty::ctxt,\n+                    impl_def_id: ast::DefId)\n+                    -> Result<(), OrphanCheckErr>\n {\n     debug!(\"impl_is_local({})\", impl_def_id.repr(tcx));\n \n@@ -63,99 +75,74 @@ pub fn impl_is_local(tcx: &ty::ctxt,\n     let trait_ref = ty::impl_trait_ref(tcx, impl_def_id).unwrap();\n     debug!(\"trait_ref={}\", trait_ref.repr(tcx));\n \n-    // If the trait is local to the crate, ok.\n+    // If the *trait* is local to the crate, ok.\n     if trait_ref.def_id.krate == ast::LOCAL_CRATE {\n         debug!(\"trait {} is local to current crate\",\n                trait_ref.def_id.repr(tcx));\n-        return true;\n+        return Ok(());\n     }\n \n-    // Otherwise, at least one of the input types must be local to the\n-    // crate.\n-    trait_ref.input_types().iter().any(|&t| ty_is_local(tcx, t))\n+    // Check condition 1: at least one type must be local.\n+    if !trait_ref.input_types().iter().any(|&t| ty_reaches_local(tcx, t)) {\n+        return Err(OrphanCheckErr::NoLocalInputType);\n+    }\n+\n+    // Check condition 2: type parameters must be \"covered\" by a local type.\n+    let covered_params: HashSet<_> =\n+        trait_ref.input_types().iter()\n+                               .flat_map(|&t| type_parameters_covered_by_ty(tcx, t).into_iter())\n+                               .collect();\n+    let all_params: HashSet<_> =\n+        trait_ref.input_types().iter()\n+                               .flat_map(|&t| type_parameters_reachable_from_ty(t).into_iter())\n+                               .collect();\n+    for &param in all_params.difference(&covered_params) {\n+        return Err(OrphanCheckErr::UncoveredTypeParameter(param));\n+    }\n+\n+    return Ok(());\n+}\n+\n+fn ty_reaches_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.walk().any(|t| ty_is_local_constructor(tcx, t))\n }\n \n-pub fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n-    debug!(\"ty_is_local({})\", ty.repr(tcx));\n+fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    debug!(\"ty_is_local_constructor({})\", ty.repr(tcx));\n \n     match ty.sty {\n         ty::ty_bool |\n         ty::ty_char |\n         ty::ty_int(..) |\n         ty::ty_uint(..) |\n         ty::ty_float(..) |\n-        ty::ty_str(..) => {\n-            false\n-        }\n-\n-        ty::ty_unboxed_closure(..) => {\n-            // This routine is invoked on types specified by users as\n-            // part of an impl and hence an unboxed closure type\n-            // cannot appear.\n-            tcx.sess.bug(\"ty_is_local applied to unboxed closure type\")\n-        }\n-\n+        ty::ty_str(..) |\n         ty::ty_bare_fn(..) |\n-        ty::ty_closure(..) => {\n+        ty::ty_closure(..) |\n+        ty::ty_vec(..) |\n+        ty::ty_ptr(..) |\n+        ty::ty_rptr(..) |\n+        ty::ty_tup(..) |\n+        ty::ty_param(..) |\n+        ty::ty_projection(..) => {\n             false\n         }\n \n-        ty::ty_uniq(t) => {\n-            let krate = tcx.lang_items.owned_box().map(|d| d.krate);\n-            krate == Some(ast::LOCAL_CRATE) || ty_is_local(tcx, t)\n-        }\n-\n-        ty::ty_vec(t, _) |\n-        ty::ty_ptr(ty::mt { ty: t, .. }) |\n-        ty::ty_rptr(_, ty::mt { ty: t, .. }) => {\n-            ty_is_local(tcx, t)\n-        }\n-\n-        ty::ty_tup(ref ts) => {\n-            ts.iter().any(|&t| ty_is_local(tcx, t))\n+        ty::ty_enum(def_id, _) |\n+        ty::ty_struct(def_id, _) => {\n+            def_id.krate == ast::LOCAL_CRATE\n         }\n \n-        ty::ty_enum(def_id, ref substs) |\n-        ty::ty_struct(def_id, ref substs) => {\n-            def_id.krate == ast::LOCAL_CRATE || {\n-                let variances = ty::item_variances(tcx, def_id);\n-                subst::ParamSpace::all().iter().any(|&space| {\n-                    substs.types.get_slice(space).iter().enumerate().any(\n-                        |(i, &t)| {\n-                            match *variances.types.get(space, i) {\n-                                ty::Bivariant => {\n-                                    // If Foo<T> is bivariant with respect to\n-                                    // T, then it doesn't matter whether T is\n-                                    // local or not, because `Foo<U>` for any\n-                                    // U will be a subtype of T.\n-                                    false\n-                                }\n-                                ty::Contravariant |\n-                                ty::Covariant |\n-                                ty::Invariant => {\n-                                    ty_is_local(tcx, t)\n-                                }\n-                            }\n-                        })\n-                })\n-            }\n+        ty::ty_uniq(_) => { // treat ~T like Box<T>\n+            let krate = tcx.lang_items.owned_box().map(|d| d.krate);\n+            krate == Some(ast::LOCAL_CRATE)\n         }\n \n         ty::ty_trait(ref tt) => {\n             tt.principal_def_id().krate == ast::LOCAL_CRATE\n         }\n \n-        // Type parameters may be bound to types that are not local to\n-        // the crate.\n-        ty::ty_param(..) => {\n-            false\n-        }\n-\n-        // Associated types could be anything, I guess.\n-        ty::ty_projection(..) => {\n-            false\n-        }\n-\n+        ty::ty_unboxed_closure(..) |\n         ty::ty_infer(..) |\n         ty::ty_open(..) |\n         ty::ty_err => {\n@@ -165,3 +152,27 @@ pub fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         }\n     }\n }\n+\n+fn type_parameters_covered_by_ty<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                 ty: Ty<'tcx>)\n+                                 -> HashSet<ty::ParamTy>\n+{\n+    if ty_is_local_constructor(tcx, ty) {\n+        type_parameters_reachable_from_ty(ty)\n+    } else {\n+        ty.walk_children().flat_map(|t| type_parameters_covered_by_ty(tcx, t).into_iter()).collect()\n+    }\n+}\n+\n+/// All type parameters reachable from `ty`\n+fn type_parameters_reachable_from_ty<'tcx>(ty: Ty<'tcx>) -> HashSet<ty::ParamTy> {\n+    ty.walk()\n+        .filter_map(|t| {\n+            match t.sty {\n+                ty::ty_param(ref param_ty) => Some(param_ty.clone()),\n+                _ => None,\n+            }\n+        })\n+        .collect()\n+}\n+"}, {"sha": "fc2eb43c8a5ffec84396136837659a89ddc0571e", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -25,6 +25,8 @@ use syntax::codemap::{Span, DUMMY_SP};\n use util::ppaux::Repr;\n \n pub use self::error_reporting::report_fulfillment_errors;\n+pub use self::coherence::orphan_check;\n+pub use self::coherence::OrphanCheckErr;\n pub use self::fulfill::{FulfillmentContext, RegionObligation};\n pub use self::project::MismatchedProjectionTypes;\n pub use self::project::normalize;\n@@ -245,15 +247,6 @@ pub struct VtableBuiltinData<N> {\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n-/// True if neither the trait nor self type is local. Note that `impl_def_id` must refer to an impl\n-/// of a trait, not an inherent impl.\n-pub fn is_orphan_impl(tcx: &ty::ctxt,\n-                      impl_def_id: ast::DefId)\n-                      -> bool\n-{\n-    !coherence::impl_is_local(tcx, impl_def_id)\n-}\n-\n /// True if there exist types that satisfy both of the two given impls.\n pub fn overlapping_impls(infcx: &InferCtxt,\n                          impl1_def_id: ast::DefId,"}, {"sha": "26a9cc5464e9549ff7bc6450a34b8d63c8535d5e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 54, "deletions": 64, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -59,6 +59,7 @@ use middle::subst::{mod, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n use middle::ty_fold::{mod, TypeFoldable, TypeFolder};\n+use middle::ty_walk::TypeWalker;\n use util::ppaux::{note_and_explain_region, bound_region_ptr_to_string};\n use util::ppaux::{trait_store_to_string, ty_to_string};\n use util::ppaux::{Repr, UserString};\n@@ -2831,59 +2832,61 @@ pub fn mk_param_from_def<'tcx>(cx: &ctxt<'tcx>, def: &TypeParameterDef) -> Ty<'t\n \n pub fn mk_open<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> { mk_t(cx, ty_open(ty)) }\n \n-pub fn walk_ty<'tcx, F>(ty: Ty<'tcx>, mut f: F) where\n-    F: FnMut(Ty<'tcx>),\n+impl<'tcx> TyS<'tcx> {\n+    /// Iterator that walks `self` and any types reachable from\n+    /// `self`, in depth-first order. Note that just walks the types\n+    /// that appear in `self`, it does not descend into the fields of\n+    /// structs or variants. For example:\n+    ///\n+    /// ```notrust\n+    /// int => { int }\n+    /// Foo<Bar<int>> => { Foo<Bar<int>>, Bar<int>, int }\n+    /// [int] => { [int], int }\n+    /// ```\n+    pub fn walk(&'tcx self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(self)\n+    }\n+\n+    /// Iterator that walks types reachable from `self`, in\n+    /// depth-first order. Note that this is a shallow walk. For\n+    /// example:\n+    ///\n+    /// ```notrust\n+    /// int => { }\n+    /// Foo<Bar<int>> => { Bar<int>, int }\n+    /// [int] => { int }\n+    /// ```\n+    pub fn walk_children(&'tcx self) -> TypeWalker<'tcx> {\n+        // Walks type reachable from `self` but not `self\n+        let mut walker = self.walk();\n+        let r = walker.next();\n+        assert_eq!(r, Some(self));\n+        walker\n+    }\n+}\n+\n+pub fn walk_ty<'tcx, F>(ty_root: Ty<'tcx>, mut f: F)\n+    where F: FnMut(Ty<'tcx>),\n {\n-    maybe_walk_ty(ty, |ty| { f(ty); true });\n+    for ty in ty_root.walk() {\n+        f(ty);\n+    }\n }\n \n-pub fn maybe_walk_ty<'tcx, F>(ty: Ty<'tcx>, mut f: F) where F: FnMut(Ty<'tcx>) -> bool {\n-    // FIXME(#19596) This is a workaround, but there should be a better way to do this\n-    fn maybe_walk_ty_<'tcx, F>(ty: Ty<'tcx>, f: &mut F) where F: FnMut(Ty<'tcx>) -> bool {\n-        if !(*f)(ty) {\n-            return;\n-        }\n-        match ty.sty {\n-            ty_bool | ty_char | ty_int(_) | ty_uint(_) | ty_float(_) |\n-            ty_str | ty_infer(_) | ty_param(_) | ty_err => {}\n-            ty_uniq(ty) | ty_vec(ty, _) | ty_open(ty) => maybe_walk_ty_(ty, f),\n-            ty_ptr(ref tm) | ty_rptr(_, ref tm) => {\n-                maybe_walk_ty_(tm.ty, f);\n-            }\n-            ty_trait(box TyTrait { ref principal, .. }) => {\n-                for subty in principal.0.substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_projection(ProjectionTy { ref trait_ref, .. }) => {\n-                for subty in trait_ref.substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_enum(_, ref substs) |\n-            ty_struct(_, ref substs) |\n-            ty_unboxed_closure(_, _, ref substs) => {\n-                for subty in substs.types.iter() {\n-                    maybe_walk_ty_(*subty, f);\n-                }\n-            }\n-            ty_tup(ref ts) => { for tt in ts.iter() { maybe_walk_ty_(*tt, f); } }\n-            ty_bare_fn(_, ref ft) => {\n-                for a in ft.sig.0.inputs.iter() { maybe_walk_ty_(*a, f); }\n-                if let ty::FnConverging(output) = ft.sig.0.output {\n-                    maybe_walk_ty_(output, f);\n-                }\n-            }\n-            ty_closure(ref ft) => {\n-                for a in ft.sig.0.inputs.iter() { maybe_walk_ty_(*a, f); }\n-                if let ty::FnConverging(output) = ft.sig.0.output {\n-                    maybe_walk_ty_(output, f);\n-                }\n-            }\n+/// Walks `ty` and any types appearing within `ty`, invoking the\n+/// callback `f` on each type. If the callback returns false, then the\n+/// children of the current type are ignored.\n+///\n+/// Note: prefer `ty.walk()` where possible.\n+pub fn maybe_walk_ty<'tcx,F>(ty_root: Ty<'tcx>, mut f: F)\n+    where F : FnMut(Ty<'tcx>) -> bool\n+{\n+    let mut walker = ty_root.walk();\n+    while let Some(ty) = walker.next() {\n+        if !f(ty) {\n+            walker.skip_current_subtree();\n         }\n     }\n-\n-    maybe_walk_ty_(ty, &mut f);\n }\n \n // Folds types from the bottom up.\n@@ -6122,22 +6125,9 @@ pub fn populate_implementations_for_trait_if_necessary(\n /// Given the def_id of an impl, return the def_id of the trait it implements.\n /// If it implements no trait, return `None`.\n pub fn trait_id_of_impl(tcx: &ctxt,\n-                        def_id: ast::DefId) -> Option<ast::DefId> {\n-    let node = match tcx.map.find(def_id.node) {\n-        Some(node) => node,\n-        None => return None\n-    };\n-    match node {\n-        ast_map::NodeItem(item) => {\n-            match item.node {\n-                ast::ItemImpl(_, _, Some(ref trait_ref), _, _) => {\n-                    Some(node_id_to_trait_ref(tcx, trait_ref.ref_id).def_id)\n-                }\n-                _ => None\n-            }\n-        }\n-        _ => None\n-    }\n+                        def_id: ast::DefId)\n+                        -> Option<ast::DefId> {\n+    ty::impl_trait_ref(tcx, def_id).map(|tr| tr.def_id)\n }\n \n /// If the given def ID describes a method belonging to an impl, return the"}, {"sha": "406ebf4bc38a40288f08ac3e234b653e9a0dd6b4", "filename": "src/librustc/middle/ty_walk.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,112 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! An iterator over the type substructure.\n+\n+use middle::ty::{mod, Ty};\n+use std::iter::Iterator;\n+\n+pub struct TypeWalker<'tcx> {\n+    stack: Vec<Ty<'tcx>>,\n+    last_subtree: uint,\n+}\n+\n+impl<'tcx> TypeWalker<'tcx> {\n+    pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> {\n+        TypeWalker { stack: vec!(ty), last_subtree: 1, }\n+    }\n+\n+    fn push_subtypes(&mut self, parent_ty: Ty<'tcx>) {\n+        match parent_ty.sty {\n+            ty::ty_bool | ty::ty_char | ty::ty_int(_) | ty::ty_uint(_) | ty::ty_float(_) |\n+            ty::ty_str | ty::ty_infer(_) | ty::ty_param(_) | ty::ty_err => {\n+            }\n+            ty::ty_uniq(ty) | ty::ty_vec(ty, _) | ty::ty_open(ty) => {\n+                self.stack.push(ty);\n+            }\n+            ty::ty_ptr(ref mt) | ty::ty_rptr(_, ref mt) => {\n+                self.stack.push(mt.ty);\n+            }\n+            ty::ty_projection(ref data) => {\n+                self.push_reversed(data.trait_ref.substs.types.as_slice());\n+            }\n+            ty::ty_trait(box ty::TyTrait { ref principal, .. }) => {\n+                self.push_reversed(principal.substs().types.as_slice());\n+            }\n+            ty::ty_enum(_, ref substs) |\n+            ty::ty_struct(_, ref substs) |\n+            ty::ty_unboxed_closure(_, _, ref substs) => {\n+                self.push_reversed(substs.types.as_slice());\n+            }\n+            ty::ty_tup(ref ts) => {\n+                self.push_reversed(ts.as_slice());\n+            }\n+            ty::ty_bare_fn(_, ref ft) => {\n+                self.push_sig_subtypes(&ft.sig);\n+            }\n+            ty::ty_closure(ref ft) => {\n+                self.push_sig_subtypes(&ft.sig);\n+            }\n+        }\n+    }\n+\n+    fn push_sig_subtypes(&mut self, sig: &ty::PolyFnSig<'tcx>) {\n+        match sig.0.output {\n+            ty::FnConverging(output) => { self.stack.push(output); }\n+            ty::FnDiverging => { }\n+        }\n+        self.push_reversed(sig.0.inputs.as_slice());\n+    }\n+\n+    fn push_reversed(&mut self, tys: &[Ty<'tcx>]) {\n+        // We push slices on the stack in reverse order so as to\n+        // maintain a pre-order traversal. As of the time of this\n+        // writing, the fact that the traversal is pre-order is not\n+        // known to be significant to any code, but it seems like the\n+        // natural order one would expect (basically, the order of the\n+        // types as they are written).\n+        for &ty in tys.iter().rev() {\n+            self.stack.push(ty);\n+        }\n+    }\n+\n+    /// Skips the subtree of types corresponding to the last type\n+    /// returned by `next()`.\n+    ///\n+    /// Example: Imagine you are walking `Foo<Bar<int>, uint>`.\n+    ///\n+    /// ```rust\n+    /// let mut iter: TypeWalker = ...;\n+    /// iter.next(); // yields Foo\n+    /// iter.next(); // yields Bar<int>\n+    /// iter.skip_current_subtree(); // skips int\n+    /// iter.next(); // yields uint\n+    /// ```\n+    pub fn skip_current_subtree(&mut self) {\n+        self.stack.truncate(self.last_subtree);\n+    }\n+}\n+\n+impl<'tcx> Iterator<Ty<'tcx>> for TypeWalker<'tcx> {\n+    fn next(&mut self) -> Option<Ty<'tcx>> {\n+        debug!(\"next(): stack={}\", self.stack);\n+        match self.stack.pop() {\n+            None => {\n+                return None;\n+            }\n+            Some(ty) => {\n+                self.last_subtree = self.stack.len();\n+                self.push_subtypes(ty);\n+                debug!(\"next: stack={}\", self.stack);\n+                Some(ty)\n+            }\n+        }\n+    }\n+}"}, {"sha": "2bb99a7141f7098c8d74ad9375eb66ad193ce83e", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -32,6 +32,7 @@\n #![allow(unknown_features)]\n #![feature(globs, phase, macro_rules, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n #[phase(plugin, link)]\n extern crate log;"}, {"sha": "b886883c73ad21c989cf14d10f0d6e9e8c401f35", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -16,10 +16,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n #![allow(non_camel_case_types)]\n \n #[phase(plugin, link)] extern crate log;"}, {"sha": "eddcc75006899bf74bfda8acc8cd238ae283bd1b", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -34,8 +34,6 @@ use syntax::codemap::{Span, CodeMap, DUMMY_SP};\n use syntax::diagnostic::{Level, RenderSpan, Bug, Fatal, Error, Warning, Note, Help};\n use syntax::parse::token;\n \n-use arena::TypedArena;\n-\n struct Env<'a, 'tcx: 'a> {\n     infcx: &'a infer::InferCtxt<'a, 'tcx>,\n }\n@@ -831,3 +829,57 @@ fn subst_region_renumber_region() {\n         assert_eq!(t_substituted, t_expected);\n     })\n }\n+\n+#[test]\n+fn walk_ty() {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let tcx = env.infcx.tcx;\n+        let int_ty = tcx.types.int;\n+        let uint_ty = tcx.types.uint;\n+        let tup1_ty = ty::mk_tup(tcx, vec!(int_ty, uint_ty, int_ty, uint_ty));\n+        let tup2_ty = ty::mk_tup(tcx, vec!(tup1_ty, tup1_ty, uint_ty));\n+        let uniq_ty = ty::mk_uniq(tcx, tup2_ty);\n+        let walked: Vec<_> = uniq_ty.walk().collect();\n+        assert_eq!(vec!(uniq_ty,\n+                        tup2_ty,\n+                        tup1_ty, int_ty, uint_ty, int_ty, uint_ty,\n+                        tup1_ty, int_ty, uint_ty, int_ty, uint_ty,\n+                        uint_ty),\n+                   walked);\n+    })\n+}\n+\n+#[test]\n+fn walk_ty_skip_subtree() {\n+    test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n+        let tcx = env.infcx.tcx;\n+        let int_ty = tcx.types.int;\n+        let uint_ty = tcx.types.uint;\n+        let tup1_ty = ty::mk_tup(tcx, vec!(int_ty, uint_ty, int_ty, uint_ty));\n+        let tup2_ty = ty::mk_tup(tcx, vec!(tup1_ty, tup1_ty, uint_ty));\n+        let uniq_ty = ty::mk_uniq(tcx, tup2_ty);\n+\n+        // types we expect to see (in order), plus a boolean saying\n+        // whether to skip the subtree.\n+        let mut expected = vec!((uniq_ty, false),\n+                                (tup2_ty, false),\n+                                (tup1_ty, false),\n+                                (int_ty, false),\n+                                (uint_ty, false),\n+                                (int_ty, false),\n+                                (uint_ty, false),\n+                                (tup1_ty, true), // skip the int/uint/int/uint\n+                                (uint_ty, false));\n+        expected.reverse();\n+\n+        let mut walker = uniq_ty.walk();\n+        while let Some(t) = walker.next() {\n+            debug!(\"walked to {}\", t);\n+            let (expected_ty, skip) = expected.pop().unwrap();\n+            assert_eq!(t, expected_ty);\n+            if skip { walker.skip_current_subtree(); }\n+        }\n+\n+        assert!(expected.is_empty());\n+    })\n+}"}, {"sha": "5ffe9b2d6471acc1a2ceaa5d20a1f69f1ec073a9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -22,10 +22,12 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(default_type_params, globs, macro_rules, phase, quote)]\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "1da49799712bd6e3166639e85819b35fe57688da", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -18,7 +18,7 @@ use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;\n use syntax::visit;\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr, UserString};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n@@ -72,10 +72,27 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n             ast::ItemImpl(_, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\", item.repr(self.tcx));\n-                if traits::is_orphan_impl(self.tcx, def_id) {\n-                    span_err!(self.tcx.sess, item.span, E0117,\n-                              \"cannot provide an extension implementation \\\n-                               where both trait and type are not defined in this crate\");\n+                match traits::orphan_check(self.tcx, def_id) {\n+                    Ok(()) => { }\n+                    Err(traits::OrphanCheckErr::NoLocalInputType) => {\n+                        span_err!(self.tcx.sess, item.span, E0117,\n+                                  \"cannot provide an extension implementation \\\n+                                   where both trait and type are not defined in this crate\");\n+                    }\n+                    Err(traits::OrphanCheckErr::UncoveredTypeParameter(param_ty)) => {\n+                        if !self.tcx.sess.features.borrow().old_orphan_check {\n+                            self.tcx.sess.span_err(\n+                                item.span,\n+                                format!(\"type parameter `{}` must also appear as a type parameter \\\n+                                         of some type defined within this crate\",\n+                                        param_ty.user_string(self.tcx)).as_slice());\n+                            self.tcx.sess.span_note(\n+                                item.span,\n+                                format!(\"for a limited time, you can add \\\n+                                         `#![feature(old_orphan_check)]` to your crate \\\n+                                         to disable this rule\").as_slice());\n+                        }\n+                    }\n                 }\n             }\n             _ => {"}, {"sha": "1beeeaf629dbf0e724acd1ab807ce91deeac363c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -20,6 +20,7 @@\n #![allow(unknown_features)]\n #![feature(globs, macro_rules, phase, slicing_syntax)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "e0122ad106fa07c2a7c9d0ddf79b15bae787aa2d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -76,12 +76,13 @@\n //! Create a struct called `TestStruct` and serialize and deserialize it to and from JSON using the\n //! serialization API, using the derived serialization code.\n //!\n-//! ```rust\n+//! ```notrust\n+//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n //! extern crate serialize;\n //! use serialize::json;\n //!\n //! // Automatically generate `Decodable` and `Encodable` trait implementations\n-//! #[deriving(Decodable, Encodable)]\n+//! #[deriving(RustcDecodable, RustcEncodable)]\n //! pub struct TestStruct  {\n //!     data_int: u8,\n //!     data_str: String,\n@@ -110,7 +111,8 @@\n //!\n //! ### Simple example of `ToJson` usage\n //!\n-//! ```rust\n+//! ```notrust\n+//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n //! extern crate serialize;\n //! use serialize::json::{mod, ToJson, Json};\n //!\n@@ -149,7 +151,8 @@\n //!\n //! ### Verbose example of `ToJson` usage\n //!\n-//! ```rust\n+//! ```notrust\n+//! // FIXME(#19470): this cannot be ```rust``` because it fails orphan checking at the moment\n //! extern crate serialize;\n //! use std::collections::BTreeMap;\n //! use serialize::json::{mod, Json, ToJson};"}, {"sha": "848d3604953ead44e3043e8a889e497fc22f36e1", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -107,6 +107,7 @@\n #![feature(macro_rules, globs, linkage, thread_local, asm)]\n #![feature(default_type_params, phase, lang_items, unsafe_destructor)]\n #![feature(slicing_syntax, unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "545856a27af4ccd81b911f818d091581485a051a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -78,8 +78,11 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", Accepted),\n \n-    // A way to temporary opt out of opt in copy. This will *never* be accepted.\n-    (\"opt_out_copy\", Active),\n+    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    (\"opt_out_copy\", Deprecated),\n+\n+    // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n+    (\"old_orphan_check\", Deprecated),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -92,6 +95,10 @@ enum Status {\n     /// currently being considered for addition/removal.\n     Active,\n \n+    /// Represents a feature gate that is temporarily enabling deprecated behavior.\n+    /// This gate will never be accepted.\n+    Deprecated,\n+\n     /// Represents a feature which has since been removed (it was once Active)\n     Removed,\n \n@@ -109,6 +116,7 @@ pub struct Features {\n     pub visible_private_types: bool,\n     pub quote: bool,\n     pub opt_out_copy: bool,\n+    pub old_orphan_check: bool,\n }\n \n impl Features {\n@@ -121,6 +129,7 @@ impl Features {\n             visible_private_types: false,\n             quote: false,\n             opt_out_copy: false,\n+            old_orphan_check: false,\n         }\n     }\n }\n@@ -453,7 +462,16 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n                     };\n                     match KNOWN_FEATURES.iter()\n                                         .find(|& &(n, _)| name == n) {\n-                        Some(&(name, Active)) => { cx.features.push(name); }\n+                        Some(&(name, Active)) => {\n+                            cx.features.push(name);\n+                        }\n+                        Some(&(name, Deprecated)) => {\n+                            cx.features.push(name);\n+                            span_handler.span_warn(\n+                                mi.span,\n+                                \"feature is deprecated and will only be available \\\n+                                 for a limited time, please rewrite code that relies on it\");\n+                        }\n                         Some(&(_, Removed)) => {\n                             span_handler.span_err(mi.span, \"feature has been removed\");\n                         }\n@@ -480,6 +498,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n         opt_out_copy: cx.has_feature(\"opt_out_copy\"),\n+        old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n     },\n     unknown_features)\n }"}, {"sha": "7a6824ac27c658cbfc256f664376c42faa76c071", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -26,6 +26,7 @@\n #![feature(macro_rules, globs, default_type_params, phase, slicing_syntax)]\n #![feature(quote, unsafe_destructor)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "b2d3611fc64fcb0d76614fc546d6cca05f0d4dcc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -31,8 +31,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n+#![allow(unknown_features)]\n #![feature(asm, macro_rules, phase, globs, slicing_syntax)]\n #![feature(unboxed_closures, default_type_params)]\n+#![feature(old_orphan_check)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "bc5d0c21aaeb466c63c9e9cedf2621688a7ee6be", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -20,7 +20,10 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+\n+#![allow(unknown_features)]\n #![feature(phase, globs)]\n+#![feature(old_orphan_check)]\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n "}, {"sha": "daa123849e4e797d539db3433a7908c97f18887f", "filename": "src/test/auxiliary/coherence-lib.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fauxiliary%2Fcoherence-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fauxiliary%2Fcoherence-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcoherence-lib.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Remote {\n+    fn foo(&self) { }\n+}\n+\n+pub trait Remote1<T> {\n+    fn foo(&self, t: T) { }\n+}\n+\n+pub trait Remote2<T, U> {\n+    fn foo(&self, t: T, u: U) { }\n+}\n+\n+pub struct Pair<T,U>(T,U);"}, {"sha": "67d96aa95a6a2513ba59bb831b1f3512c03a48e1", "filename": "src/test/compile-fail/coherence-all-remote.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-all-remote.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+impl<T> Remote for int { }\n+//~^ ERROR cannot provide an extension implementation\n+\n+fn main() { }"}, {"sha": "a04dfd36c98f175e3acaac0f414785ac5cfa02be", "filename": "src/test/compile-fail/coherence-bigint-param.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl<T> Remote1<BigInt> for T { }\n+//~^ ERROR type parameter `T` must also appear\n+\n+fn main() { }"}, {"sha": "2ed7a6db7ae1cf426e5fa5dbb1af7c9dbc7f1aa3", "filename": "src/test/compile-fail/coherence-iterator-vec-any-elem.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-iterator-vec-any-elem.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+struct Foo<T>(T);\n+\n+impl<T,U> Remote1<U> for Foo<T> { }\n+//~^ ERROR type parameter `U` must also appear\n+\n+fn main() { }"}, {"sha": "0223dacd8eca0754761e73fa2a06fc448de8f730", "filename": "src/test/compile-fail/coherence-lone-type-parameter.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+impl<T> Remote for T { } //~ ERROR E0117\n+\n+fn main() { }"}, {"sha": "d42bd529b6665bd12cf12c801501b70eb21b0fc9", "filename": "src/test/compile-fail/coherence-overlapping-pairs.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+struct Foo;\n+\n+impl<T> Remote for lib::Pair<T,Foo> { }\n+//~^ ERROR type parameter `T` must also appear\n+\n+fn main() { }"}, {"sha": "09895ec11db108529a20fe7955904a574c3b8b77", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::{Remote, Pair};\n+\n+struct Local<T>(T);\n+\n+impl<T,U> Remote for Pair<T,Local<U>> { }\n+//~^ ERROR type parameter `T` must also appear\n+\n+fn main() { }"}, {"sha": "4aae8fa87daffbd7e6abcd8eb6e1ccf4ddbb6b4f", "filename": "src/test/compile-fail/opt-out-copy-bad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![feature(opt_out_copy)]\n+//~^ WARNING feature is deprecated\n+//~| WARNING feature is deprecated\n \n // Test that when using the `opt-out-copy` feature we still consider\n // destructors to be non-movable"}, {"sha": "1e90453980f8687adc35bd1aec7d9cc47f28b0a1", "filename": "src/test/run-pass/coherence-bigint-int.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-int.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl Remote1<BigInt> for int { }\n+\n+fn main() { }"}, {"sha": "b100455eb339c0c86a6c280382a1b32046b7e6d6", "filename": "src/test/run-pass/coherence-bigint-vecint.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-bigint-vecint.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+pub struct BigInt;\n+\n+impl Remote1<BigInt> for Vec<int> { }\n+\n+fn main() { }"}, {"sha": "e02117d1ca261f02b0c751c43d6ddb5b8189a76b", "filename": "src/test/run-pass/coherence-blanket.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-blanket.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+pub trait Local {\n+    fn foo(&self) { }\n+}\n+\n+impl<T> Local for T { }\n+\n+fn main() { }"}, {"sha": "27f1f2dafb003628399c7cbfccdb9a5c0582ad97", "filename": "src/test/run-pass/coherence-covered-type-parameter.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-covered-type-parameter.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+struct Foo<T>(T);\n+\n+impl<T> Remote for Foo<T> { }\n+\n+fn main() { }"}, {"sha": "7077503f73ff9353fc82f77d48039a8e82a8fa3e", "filename": "src/test/run-pass/coherence-iterator-vec.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-iterator-vec.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote1;\n+\n+struct Foo<T>(T);\n+\n+impl<T> Remote1<T> for Foo<T> { }\n+\n+fn main() { }"}, {"sha": "a9bc3dc0e2f277b148664e0b507b6d1d1a9ae796", "filename": "src/test/run-pass/coherence-local-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-1.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+struct Local;\n+\n+impl Remote for Vec<Local> { }\n+\n+fn main() { }"}, {"sha": "07a830cb1ac2daa75b545156d55e294642b4d5d8", "filename": "src/test/run-pass/coherence-local-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-local-2.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:coherence-lib.rs\n+\n+extern crate \"coherence-lib\" as lib;\n+use lib::Remote;\n+\n+struct Local<T>(T);\n+\n+impl<T> Remote for Vec<Local<T>> { }\n+\n+fn main() { }"}, {"sha": "a24ae22b224a3b223567e30fe2885d2784176091", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n \n use serialize::{Encodable, Decodable};"}, {"sha": "f5df1940fa47ea306301260afe69433e495da084", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -11,6 +11,8 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[deriving(Encodable, Decodable)]`\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n \n use std::cell::{Cell, RefCell};"}, {"sha": "9ece4af278bdac2985db3030bf515619ea19943d", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate serialize;\n extern crate rand;\n "}, {"sha": "06c637435551253d46a0e24ab8e523ebd4435895", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n+\n extern crate rbml;\n extern crate serialize;\n "}, {"sha": "39b4a726d4514557222b1851d3efd903bbdedf2d", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(old_orphan_check)]\n \n extern crate serialize;\n "}, {"sha": "e99b1dc5befb00fdf1d2e11d80cc847b0516fe7c", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// If `Index` used an associated type for its output, this test would\n+// work more smoothly.\n+#![feature(old_orphan_check)]\n+\n use std::ops::Index;\n \n struct Mat<T> { data: Vec<T>, cols: uint, }"}, {"sha": "cb4f1b7d20f14213b11434073d5c471755ad8589", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// If `Mul` used an associated type for its output, this test would\n+// work more smoothly.\n+#![feature(old_orphan_check)]\n+\n use std::ops::Mul;\n \n struct Vec2 {"}, {"sha": "bdaccee65d7f53bfeb208f99b02ae65f576ebd78", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735c308aedbdf73d98bfaceacd5f38152d8eee1b/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=735c308aedbdf73d98bfaceacd5f38152d8eee1b", "patch": "@@ -15,9 +15,9 @@\n use std::ops::Fn;\n use std::ops::Add;\n \n-struct G;\n+struct G<A>;\n \n-impl<'a, A: Add<int, int>> Fn<(A,), int> for G {\n+impl<'a, A: Add<int, int>> Fn<(A,), int> for G<A> {\n     extern \"rust-call\" fn call(&self, (arg,): (A,)) -> int {\n         arg.add(1)\n     }"}]}