{"sha": "2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjJhOTI5YzZkMjMxZDlhOWQ4NzJhYzQwYjVjOWUzNmRhYWJlMzg=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-07T06:58:01Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-09T21:40:54Z"}, "message": "add Self: Trait<..> inside the param_env of a default impl", "tree": {"sha": "27f07ac9e55aae8d63763d86a4aabfad03d07648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f07ac9e55aae8d63763d86a4aabfad03d07648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "html_url": "https://github.com/rust-lang/rust/commit/2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "html_url": "https://github.com/rust-lang/rust/commit/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "07c5b319970f8e673500b0bb4ad01f1982aa7b93", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -181,9 +181,6 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // obligations within. This is expected to be done 'late enough'\n     // that all type inference variables have been bound and so forth.\n     region_obligations: RefCell<Vec<(ast::NodeId, RegionObligation<'tcx>)>>,\n-\n-    // true if trait selection in this context should emit `default impl` candiates\n-    pub emit_defaul_impl_candidates: Cell<bool>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -455,7 +452,6 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n             region_obligations: RefCell::new(vec![]),\n-            emit_defaul_impl_candidates: Cell::new(false)\n         }))\n     }\n }"}, {"sha": "aa43bf8ca2eff1495d0dd2327c4a16b1347a3a05", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -1296,12 +1296,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return false;\n         }\n \n-        // Using local cache if the infcx can emit `default impls`\n-        if self.infcx.emit_defaul_impl_candidates.get() {\n-            return false;\n-        }\n-\n-\n         // Otherwise, we can use the global cache.\n         true\n     }\n@@ -1716,11 +1710,30 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\"assemble_candidates_from_impls(obligation={:?})\", obligation);\n \n+        // Check if default impls should be emitted.\n+        // default impls are emitted if the param_env is refered to a default impl.\n+        // The param_env should contain a Self: Trait<..> predicate in those cases\n+        let self_trait_is_present:Vec<&ty::Predicate<'tcx>> =\n+                    obligation.param_env\n+                               .caller_bounds\n+                               .iter()\n+                               .filter(|predicate| {\n+                                    match **predicate {\n+                                         ty::Predicate::Trait(ref trait_predicate) => {\n+                                             trait_predicate.def_id() ==\n+                                                 obligation.predicate.def_id() &&\n+                                             obligation.predicate.0.trait_ref.self_ty() ==\n+                                                 trait_predicate.skip_binder().self_ty()\n+                                         }\n+                                         _ => false\n+                                    }\n+                               }).collect::<Vec<&ty::Predicate<'tcx>>>();\n+\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.0.trait_ref.self_ty(),\n             |impl_def_id| {\n-                if self.infcx().emit_defaul_impl_candidates.get() ||\n+                if self_trait_is_present.len() > 0 ||\n                    !self.tcx().impl_is_default(impl_def_id) {\n                     self.probe(|this, snapshot| { /* [1] */\n                         match this.match_impl(impl_def_id, obligation, snapshot) {"}, {"sha": "63bf52a9bdf786d7603cf2cf43f8e4a012927d0f", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::{Kind, Subst};\n+use ty::subst::Kind;\n use traits;\n use syntax::abi::Abi;\n use util::ppaux;"}, {"sha": "52d33c750f864e1478d91ae98007ee495f7d44bf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -2606,8 +2606,31 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx> {\n     // Compute the bounds on Self and the type parameters.\n+    let mut predicates = tcx.predicates_of(def_id);\n+    match tcx.hir.as_local_node_id(def_id)\n+           .and_then(|node_id| tcx.hir.find(node_id))\n+           .and_then(|item| {\n+        match item {\n+            hir::map::NodeItem(..) => {\n+                if tcx.impl_is_default(def_id) {\n+                    tcx.impl_trait_ref(def_id)\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None\n+        }\n+    }) {\n+        Some(trait_ref) =>\n+            predicates.predicates\n+                      .push(\n+                trait_ref.to_poly_trait_ref()\n+                         .to_predicate()\n+            ),\n+        None => {}\n+    }\n \n-    let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n+    let bounds = predicates.instantiate_identity(tcx);\n     let predicates = bounds.predicates;\n \n     // Finally, we have to normalize the bounds in the environment, in"}, {"sha": "4fe2f5b574e67d6c040b183c93cc0b9799754260", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -1745,8 +1745,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                param_env: ty::ParamEnv<'tcx>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n-        FnCtxt::set_emit_default_impl_candidates(inh, body_id);\n-\n         FnCtxt {\n             body_id,\n             param_env,\n@@ -1765,22 +1763,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn set_emit_default_impl_candidates(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n-                                        body_id: ast::NodeId) {\n-        inh.infcx.emit_defaul_impl_candidates.set(\n-            match inh.tcx.hir.find(body_id) {\n-                Some(Node::NodeItem(..)) => {\n-                    if inh.tcx.impl_is_default(inh.tcx.hir.local_def_id(body_id)) {\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                },\n-                _ => false\n-            }\n-        );\n-    }\n-\n     pub fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }"}, {"sha": "072507851d795c1deadafeb70c963c9cf31b669e", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -28,4 +28,4 @@ impl Foo for MyStruct {}\n \n fn main() {\n     println!(\"{}\", MyStruct.foo_one());\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d020a6775772d67c4ca0a26717e1fd70529e3b97", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -27,4 +27,4 @@ default impl<T> Foo for T {\n fn main() {\n     println!(\"{}\", MyStruct.foo_one());\n     //~^ ERROR no method named `foo_one` found for type `MyStruct` in the current scope\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3422973799282fd499b3714805ddfc9386a541c1", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -15,4 +15,4 @@ trait Foo<'a, T: Eq + 'a> { }\n default impl<U> Foo<'static, U> for () {}\n //~^ ERROR the trait bound `U: std::cmp::Eq` is not satisfied\n \n-fn main(){}\n\\ No newline at end of file\n+fn main(){}"}, {"sha": "e11a30214974e07984e1f22f6c3cfa178e705ff3", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f22a929c6d231d9a9d872ac40b5c9e36daabe38/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "patch": "@@ -31,4 +31,4 @@ impl Foo for MyStruct {\n \n fn main() {\n     assert!(MyStruct.foo_two() == \"generic\");\n-}\n\\ No newline at end of file\n+}"}]}