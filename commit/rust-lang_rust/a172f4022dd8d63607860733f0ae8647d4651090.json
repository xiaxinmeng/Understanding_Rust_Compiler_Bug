{"sha": "a172f4022dd8d63607860733f0ae8647d4651090", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNzJmNDAyMmRkOGQ2MzYwNzg2MDczM2YwYWU4NjQ3ZDQ2NTEwOTA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-05T16:34:37Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-19T14:42:14Z"}, "message": "Expose enum discriminant signedness", "tree": {"sha": "b89fbee0b296c6fb722faeaa314636e4ee4e7bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89fbee0b296c6fb722faeaa314636e4ee4e7bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a172f4022dd8d63607860733f0ae8647d4651090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a172f4022dd8d63607860733f0ae8647d4651090", "html_url": "https://github.com/rust-lang/rust/commit/a172f4022dd8d63607860733f0ae8647d4651090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a172f4022dd8d63607860733f0ae8647d4651090/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b301e02f37127da993dd2cf370aa1066d48b042e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b301e02f37127da993dd2cf370aa1066d48b042e", "html_url": "https://github.com/rust-lang/rust/commit/b301e02f37127da993dd2cf370aa1066d48b042e"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "6d4c72c132a592ae1b060648dba77f7869e7b884", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a172f4022dd8d63607860733f0ae8647d4651090/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a172f4022dd8d63607860733f0ae8647d4651090/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=a172f4022dd8d63607860733f0ae8647d4651090", "patch": "@@ -795,43 +795,40 @@ pub fn trans_switch<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n }\n \n-\n+pub fn is_discr_signed<'tcx>(r: &Repr<'tcx>) -> bool {\n+    match *r {\n+        CEnum(ity, _, _) => ity.is_signed(),\n+        General(ity, _, _) => ity.is_signed(),\n+        Univariant(..) => false,\n+        RawNullablePointer { .. } => false,\n+        StructWrappedNullablePointer { .. } => false,\n+    }\n+}\n \n /// Obtain the actual discriminant of a value.\n pub fn trans_get_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n                                    scrutinee: ValueRef, cast_to: Option<Type>)\n     -> ValueRef {\n-    let signed;\n-    let val;\n     debug!(\"trans_get_discr r: {:?}\", r);\n-    match *r {\n-        CEnum(ity, min, max) => {\n-            val = load_discr(bcx, ity, scrutinee, min, max);\n-            signed = ity.is_signed();\n-        }\n+    let val = match *r {\n+        CEnum(ity, min, max) => load_discr(bcx, ity, scrutinee, min, max),\n         General(ity, ref cases, _) => {\n             let ptr = GEPi(bcx, scrutinee, &[0, 0]);\n-            val = load_discr(bcx, ity, ptr, 0, (cases.len() - 1) as Disr);\n-            signed = ity.is_signed();\n-        }\n-        Univariant(..) => {\n-            val = C_u8(bcx.ccx(), 0);\n-            signed = false;\n+            load_discr(bcx, ity, ptr, 0, (cases.len() - 1) as Disr)\n         }\n+        Univariant(..) => C_u8(bcx.ccx(), 0),\n         RawNullablePointer { nndiscr, nnty, .. } =>  {\n             let cmp = if nndiscr == 0 { IntEQ } else { IntNE };\n             let llptrty = type_of::sizing_type_of(bcx.ccx(), nnty);\n-            val = ICmp(bcx, cmp, Load(bcx, scrutinee), C_null(llptrty), DebugLoc::None);\n-            signed = false;\n+            ICmp(bcx, cmp, Load(bcx, scrutinee), C_null(llptrty), DebugLoc::None)\n         }\n         StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-            val = struct_wrapped_nullable_bitdiscr(bcx, nndiscr, discrfield, scrutinee);\n-            signed = false;\n+            struct_wrapped_nullable_bitdiscr(bcx, nndiscr, discrfield, scrutinee)\n         }\n-    }\n+    };\n     match cast_to {\n         None => val,\n-        Some(llty) => if signed { SExt(bcx, val, llty) } else { ZExt(bcx, val, llty) }\n+        Some(llty) => if is_discr_signed(r) { SExt(bcx, val, llty) } else { ZExt(bcx, val, llty) }\n     }\n }\n "}]}