{"sha": "8deadfa2713b92816a73d7148966cf867779c06e", "node_id": "C_kwDOAAsO6NoAKDhkZWFkZmEyNzEzYjkyODE2YTczZDcxNDg5NjZjZjg2Nzc3OWMwNmU", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-28T20:56:32Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T08:26:23Z"}, "message": "fully move dropck to mir", "tree": {"sha": "e217de57eddf99a362081b35bd89e897b4dc942f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e217de57eddf99a362081b35bd89e897b4dc942f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8deadfa2713b92816a73d7148966cf867779c06e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8deadfa2713b92816a73d7148966cf867779c06e", "html_url": "https://github.com/rust-lang/rust/commit/8deadfa2713b92816a73d7148966cf867779c06e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8deadfa2713b92816a73d7148966cf867779c06e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "html_url": "https://github.com/rust-lang/rust/commit/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56"}], "stats": {"total": 203, "additions": 79, "deletions": 124}, "files": [{"sha": "d5c401ae1c6ed63a0da08782d57d22276b614c77", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1,11 +1,11 @@\n+use itertools::{Either, Itertools};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n-use std::rc::Rc;\n-\n use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n use rustc_mir_dataflow::move_paths::MoveData;\n use rustc_mir_dataflow::ResultsCursor;\n+use std::rc::Rc;\n \n use crate::{\n     constraints::OutlivesConstraintSet,\n@@ -46,7 +46,8 @@ pub(super) fn generate<'mir, 'tcx>(\n         &typeck.borrowck_context.universal_regions,\n         &typeck.borrowck_context.constraints.outlives_constraints,\n     );\n-    let live_locals = compute_live_locals(typeck.tcx(), &free_regions, &body);\n+    let (relevant_live_locals, boring_locals) =\n+        compute_relevant_live_locals(typeck.tcx(), &free_regions, &body);\n     let facts_enabled = use_polonius || AllFacts::enabled(typeck.tcx());\n \n     let polonius_drop_used = if facts_enabled {\n@@ -57,48 +58,44 @@ pub(super) fn generate<'mir, 'tcx>(\n         None\n     };\n \n-    if !live_locals.is_empty() || facts_enabled {\n-        trace::trace(\n-            typeck,\n-            body,\n-            elements,\n-            flow_inits,\n-            move_data,\n-            live_locals,\n-            polonius_drop_used,\n-        );\n-    }\n+    trace::trace(\n+        typeck,\n+        body,\n+        elements,\n+        flow_inits,\n+        move_data,\n+        relevant_live_locals,\n+        boring_locals,\n+        polonius_drop_used,\n+    );\n }\n \n-// The purpose of `compute_live_locals` is to define the subset of `Local`\n+// The purpose of `compute_relevant_live_locals` is to define the subset of `Local`\n // variables for which we need to do a liveness computation. We only need\n // to compute whether a variable `X` is live if that variable contains\n // some region `R` in its type where `R` is not known to outlive a free\n // region (i.e., where `R` may be valid for just a subset of the fn body).\n-fn compute_live_locals<'tcx>(\n+fn compute_relevant_live_locals<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     free_regions: &FxHashSet<RegionVid>,\n     body: &Body<'tcx>,\n-) -> Vec<Local> {\n-    let live_locals: Vec<Local> = body\n-        .local_decls\n-        .iter_enumerated()\n-        .filter_map(|(local, local_decl)| {\n+) -> (Vec<Local>, Vec<Local>) {\n+    let (boring_locals, relevant_live_locals): (Vec<_>, Vec<_>) =\n+        body.local_decls.iter_enumerated().partition_map(|(local, local_decl)| {\n             if tcx.all_free_regions_meet(&local_decl.ty, |r| {\n                 free_regions.contains(&r.to_region_vid())\n             }) {\n-                None\n+                Either::Left(local)\n             } else {\n-                Some(local)\n+                Either::Right(local)\n             }\n-        })\n-        .collect();\n+        });\n \n     debug!(\"{} total variables\", body.local_decls.len());\n-    debug!(\"{} variables need liveness\", live_locals.len());\n+    debug!(\"{} variables need liveness\", relevant_live_locals.len());\n     debug!(\"{} regions outlive free regions\", free_regions.len());\n \n-    live_locals\n+    (relevant_live_locals, boring_locals)\n }\n \n /// Computes all regions that are (currently) known to outlive free"}, {"sha": "a69eec47c7bccfa7386717032910dc89c5ac2a6b", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -41,12 +41,13 @@ pub(super) fn trace<'mir, 'tcx>(\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n-    live_locals: Vec<Local>,\n+    relevant_live_locals: Vec<Local>,\n+    boring_locals: Vec<Local>,\n     polonius_drop_used: Option<Vec<(Local, Location)>>,\n ) {\n     debug!(\"trace()\");\n \n-    let local_use_map = &LocalUseMap::build(&live_locals, elements, body);\n+    let local_use_map = &LocalUseMap::build(&relevant_live_locals, elements, body);\n \n     let cx = LivenessContext {\n         typeck,\n@@ -61,10 +62,12 @@ pub(super) fn trace<'mir, 'tcx>(\n     let mut results = LivenessResults::new(cx);\n \n     if let Some(drop_used) = polonius_drop_used {\n-        results.add_extra_drop_facts(drop_used, live_locals.iter().copied().collect())\n+        results.add_extra_drop_facts(drop_used, relevant_live_locals.iter().copied().collect())\n     }\n \n-    results.compute_for_all_locals(live_locals);\n+    results.compute_for_all_locals(relevant_live_locals);\n+\n+    results.dropck_boring_locals(boring_locals);\n }\n \n /// Contextual state for the type-liveness generator.\n@@ -133,8 +136,8 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n-    fn compute_for_all_locals(&mut self, live_locals: Vec<Local>) {\n-        for local in live_locals {\n+    fn compute_for_all_locals(&mut self, relevant_live_locals: Vec<Local>) {\n+        for local in relevant_live_locals {\n             self.reset_local_state();\n             self.add_defs_for(local);\n             self.compute_use_live_points_for(local);\n@@ -157,19 +160,37 @@ impl<'me, 'typeck, 'flow, 'tcx> LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         }\n     }\n \n+    // Runs dropck for locals whose liveness isn't relevant. This is\n+    // necessary to eagerly detect unbound recursion during drop glue computation.\n+    fn dropck_boring_locals(&mut self, boring_locals: Vec<Local>) {\n+        for local in boring_locals {\n+            let local_ty = self.cx.body.local_decls[local].ty;\n+            let drop_data = self.cx.drop_data.entry(local_ty).or_insert_with({\n+                let typeck = &mut self.cx.typeck;\n+                move || LivenessContext::compute_drop_data(typeck, local_ty)\n+            });\n+\n+            drop_data.dropck_result.report_overflows(\n+                self.cx.typeck.infcx.tcx,\n+                self.cx.body.local_decls[local].source_info.span,\n+                local_ty,\n+            );\n+        }\n+    }\n+\n     /// Add extra drop facts needed for Polonius.\n     ///\n     /// Add facts for all locals with free regions, since regions may outlive\n     /// the function body only at certain nodes in the CFG.\n     fn add_extra_drop_facts(\n         &mut self,\n         drop_used: Vec<(Local, Location)>,\n-        live_locals: FxHashSet<Local>,\n+        relevant_live_locals: FxHashSet<Local>,\n     ) {\n         let locations = IntervalSet::new(self.cx.elements.num_points());\n \n         for (local, location) in drop_used {\n-            if !live_locals.contains(&local) {\n+            if !relevant_live_locals.contains(&local) {\n                 let local_ty = self.cx.body.local_decls[local].ty;\n                 if local_ty.has_free_regions() {\n                     self.cx.add_drop_live_facts_for(local, local_ty, &[location], &locations);"}, {"sha": "b8bb93891c27f7a47a001497dcab8f087de34701", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1825,7 +1825,8 @@ rustc_queries! {\n         remap_env_constness\n     }\n \n-    /// Do not call this query directly: invoke `infcx.at().dropck_outlives()` instead.\n+    /// Do not call this query directly:\n+    /// invoke `DropckOutlives::new(dropped_ty)).fully_perform(typeck.infcx)` instead.\n     query dropck_outlives(\n         goal: CanonicalTyGoal<'tcx>\n     ) -> Result<"}, {"sha": "a4013e10525ee861d700321c086dbe53a1730555", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -8,8 +8,6 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n use rustc_span::Span;\n-use rustc_trait_selection::traits::query::dropck_outlives::AtExt;\n-use rustc_trait_selection::traits::ObligationCause;\n \n /// This function confirms that the `Drop` implementation identified by\n /// `drop_impl_did` is not any more specialized than the type it is\n@@ -234,18 +232,14 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n /// This function is not only checking that the dropck obligations are met for\n /// the given type, but it's also currently preventing non-regular recursion in\n /// types from causing stack overflows (dropck_no_diverge_on_nonregular_*.rs).\n+///\n+/// FIXME: Completely rip out dropck and regionck.\n pub(crate) fn check_drop_obligations<'a, 'tcx>(\n-    rcx: &mut RegionCtxt<'a, 'tcx>,\n-    ty: Ty<'tcx>,\n-    span: Span,\n-    body_id: hir::HirId,\n+    _rcx: &mut RegionCtxt<'a, 'tcx>,\n+    _ty: Ty<'tcx>,\n+    _span: Span,\n+    _body_id: hir::HirId,\n ) {\n-    debug!(\"check_drop_obligations typ: {:?}\", ty);\n-\n-    let cause = &ObligationCause::misc(span, body_id);\n-    let infer_ok = rcx.infcx.at(cause, rcx.fcx.param_env).dropck_outlives(ty);\n-    debug!(\"dropck_outlives = {:#?}\", infer_ok);\n-    rcx.fcx.register_infer_ok_obligations(infer_ok);\n }\n \n // This is an implementation of the TypeRelation trait with the"}, {"sha": "43c1c7759789d487f656bde5dccb8c70e6d83ccc", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -23,5 +23,4 @@ enum FingerTree<T:'static> {\n fn main() {\n     let ft = //~ ERROR overflow while adding drop-check rules for FingerTree\n         FingerTree::Single(1);\n-    //~^ ERROR overflow while adding drop-check rules for FingerTree\n }"}, {"sha": "c447e2f7987cc869c64127a8e984e2ad3f55a8c9", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_1.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_1.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -6,13 +6,5 @@ LL |     let ft =\n    |\n    = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n \n-error[E0320]: overflow while adding drop-check rules for FingerTree<i32>\n-  --> $DIR/dropck_no_diverge_on_nonregular_1.rs:25:9\n-   |\n-LL |         FingerTree::Single(1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "edd07652e53f79e8e180f25a64d07b743fcb0e1a", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -22,5 +22,4 @@ enum FingerTree<T:'static> {\n fn main() {\n     let ft = //~ ERROR overflow while adding drop-check rules for FingerTree\n         FingerTree::Single(1);\n-    //~^ ERROR overflow while adding drop-check rules for FingerTree\n }"}, {"sha": "cd4706dd903f41612be335cb2259a38f6978008c", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_2.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_2.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -6,13 +6,5 @@ LL |     let ft =\n    |\n    = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n \n-error[E0320]: overflow while adding drop-check rules for FingerTree<i32>\n-  --> $DIR/dropck_no_diverge_on_nonregular_2.rs:24:9\n-   |\n-LL |         FingerTree::Single(1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "af7402ca4a1ce8b1a9e884a44ddb25bb8db685f9", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -31,6 +31,5 @@ enum Wrapper<T:'static> {\n fn main() {\n     let w = //~ ERROR overflow while adding drop-check rules for Option\n         Some(Wrapper::Simple::<u32>);\n-    //~^ ERROR overflow while adding drop-check rules for Option\n-    //~| ERROR overflow while adding drop-check rules for Wrapper\n+    //~^ ERROR overflow while adding drop-check rules for Wrapper\n }"}, {"sha": "18cd1b6cd413ba42b0d1e9dd79ebe194df12cc94", "filename": "src/test/ui/dropck/dropck_no_diverge_on_nonregular_3.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_no_diverge_on_nonregular_3.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -6,14 +6,6 @@ LL |     let w =\n    |\n    = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<u32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n \n-error[E0320]: overflow while adding drop-check rules for Option<Wrapper<u32>>\n-  --> $DIR/dropck_no_diverge_on_nonregular_3.rs:33:9\n-   |\n-LL |         Some(Wrapper::Simple::<u32>);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<u32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n-\n error[E0320]: overflow while adding drop-check rules for Wrapper<u32>\n   --> $DIR/dropck_no_diverge_on_nonregular_3.rs:33:14\n    |\n@@ -22,5 +14,5 @@ LL |         Some(Wrapper::Simple::<u32>);\n    |\n    = note: overflowed on FingerTree<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<Node<u32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "74185dc597b52f55fda3c87dcadc9356ca94c150", "filename": "src/test/ui/infinite/infinite-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1,6 +1,5 @@\n struct Take(Take);\n //~^ ERROR has infinite size\n-//~| ERROR cycle detected\n \n // check that we don't hang trying to find the tail of a recursive struct (#79437)\n fn foo() -> Take {"}, {"sha": "5a6d13786d1976cc4bcfa039d1918b06b6ca54bd", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -11,16 +11,6 @@ help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Take` repre\n LL | struct Take(Box<Take>);\n    |             ++++    +\n \n-error[E0391]: cycle detected when computing drop-check constraints for `Take`\n-  --> $DIR/infinite-struct.rs:1:1\n-   |\n-LL | struct Take(Take);\n-   | ^^^^^^^^^^^\n-   |\n-   = note: ...which immediately requires computing drop-check constraints for `Take` again\n-   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: Take } }`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0072, E0391.\n-For more information about an error, try `rustc --explain E0072`.\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "87a9e08dd381a64837b7cc68765386a86fec5ce6", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1,5 +1,4 @@\n enum MList { Cons(isize, MList), Nil }\n //~^ ERROR recursive type `MList` has infinite size\n-//~| ERROR cycle detected when computing drop-check constraints for `MList`\n \n fn main() { let a = MList::Cons(10, MList::Cons(11, MList::Nil)); }"}, {"sha": "d2dad4b9178d9f073be7ae1eb06681fe91e96118", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -11,16 +11,6 @@ help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `MList` repr\n LL | enum MList { Cons(isize, Box<MList>), Nil }\n    |                          ++++     +\n \n-error[E0391]: cycle detected when computing drop-check constraints for `MList`\n-  --> $DIR/infinite-tag-type-recursion.rs:1:1\n-   |\n-LL | enum MList { Cons(isize, MList), Nil }\n-   | ^^^^^^^^^^\n-   |\n-   = note: ...which immediately requires computing drop-check constraints for `MList` again\n-   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: MList } }`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0072, E0391.\n-For more information about an error, try `rustc --explain E0072`.\n+For more information about this error, try `rustc --explain E0072`."}, {"sha": "c9e93174e20fe63dac9c1fc46b1901f3641aac58", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1,18 +1,14 @@\n-// Dropck shouldn't hit a recursion limit from checking `S<u32>` since it has\n-// no free regions or type parameters.\n-// Codegen however, has to error for the infinitely many `drop_in_place`\n-// functions it has been asked to create.\n-\n-// build-fail\n-// normalize-stderr-test: \".nll/\" -> \"/\"\n-// compile-flags: -Zmir-opt-level=0\n+// `S` is infinitely recursing so it's not possible to generate a finite\n+// drop impl (ignoring polymorphization).\n+//\n+// Dropck should therefore detect that this is the case and eagerly error.\n \n struct S<T> {\n     t: T,\n     s: Box<S<fn(u: T)>>,\n }\n \n-fn f(x: S<u32>) {}\n+fn f(x: S<u32>) {} //~ ERROR overflow while adding drop-check rules for S<u32>\n \n fn main() {\n     // Force instantiation."}, {"sha": "1da29be43db864d627d9b905147687e68b935058", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8deadfa2713b92816a73d7148966cf867779c06e/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=8deadfa2713b92816a73d7148966cf867779c06e", "patch": "@@ -1,15 +1,10 @@\n-error: reached the recursion limit while instantiating `std::ptr::drop_in_place::<S<fn(f...)))))))))))))))))))))))))))))>))`\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+error[E0320]: overflow while adding drop-check rules for S<u32>\n+  --> $DIR/issue-38591-non-regular-dropck-recursion.rs:11:6\n    |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn f(x: S<u32>) {}\n+   |      ^\n    |\n-note: `std::ptr::drop_in_place` defined here\n-  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   |\n-LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-38591-non-regular-dropck-recursion/issue-38591-non-regular-dropck-recursion.long-type.txt'\n+   = note: overflowed on S<fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(u32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))>\n \n error: aborting due to previous error\n "}]}