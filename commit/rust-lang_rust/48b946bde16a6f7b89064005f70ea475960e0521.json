{"sha": "48b946bde16a6f7b89064005f70ea475960e0521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Yjk0NmJkZTE2YTZmN2I4OTA2NDAwNWY3MGVhNDc1OTYwZTA1MjE=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-08T14:20:14Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-08T14:37:43Z"}, "message": "Reduce allocations in Expand macro", "tree": {"sha": "af5a8fcbc611172265240044cb37de52e584326a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5a8fcbc611172265240044cb37de52e584326a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b946bde16a6f7b89064005f70ea475960e0521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b946bde16a6f7b89064005f70ea475960e0521", "html_url": "https://github.com/rust-lang/rust/commit/48b946bde16a6f7b89064005f70ea475960e0521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b946bde16a6f7b89064005f70ea475960e0521/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce", "html_url": "https://github.com/rust-lang/rust/commit/eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "be0ee03bf8f8cf09dbc8bcae5c80b0061cbe547b", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/48b946bde16a6f7b89064005f70ea475960e0521/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b946bde16a6f7b89064005f70ea475960e0521/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=48b946bde16a6f7b89064005f70ea475960e0521", "patch": "@@ -1,3 +1,5 @@\n+use std::iter;\n+\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n@@ -91,27 +93,42 @@ fn insert_whitespaces(syn: SyntaxNode) -> String {\n         let is_last =\n             |f: fn(SyntaxKind) -> bool, default| -> bool { last.map(f).unwrap_or(default) };\n \n-        res += &match token.kind() {\n-            k if is_text(k) && is_next(|it| !it.is_punct(), true) => token.text().to_string() + \" \",\n+        match token.kind() {\n+            k if is_text(k) && is_next(|it| !it.is_punct(), true) => {\n+                res.push_str(token.text());\n+                res.push(' ');\n+            }\n             L_CURLY if is_next(|it| it != R_CURLY, true) => {\n                 indent += 1;\n-                let leading_space = if is_last(is_text, false) { \" \" } else { \"\" };\n-                format!(\"{}{{\\n{}\", leading_space, \"  \".repeat(indent))\n+                if is_last(is_text, false) {\n+                    res.push(' ');\n+                }\n+                res.push_str(\"{\\n\");\n+                res.extend(iter::repeat(\" \").take(2 * indent));\n             }\n             R_CURLY if is_last(|it| it != L_CURLY, true) => {\n                 indent = indent.saturating_sub(1);\n-                format!(\"\\n{}}}\", \"  \".repeat(indent))\n+                res.push('\\n');\n+                res.extend(iter::repeat(\" \").take(2 * indent));\n+                res.push_str(\"}\");\n+            }\n+            R_CURLY => {\n+                res.push_str(\"}\\n\");\n+                res.extend(iter::repeat(\" \").take(2 * indent));\n             }\n-            R_CURLY => format!(\"}}\\n{}\", \"  \".repeat(indent)),\n             LIFETIME_IDENT if is_next(|it| it == IDENT, true) => {\n-                format!(\"{} \", token.text().to_string())\n+                res.push_str(token.text());\n+                res.push(' ');\n             }\n-            T![;] => format!(\";\\n{}\", \"  \".repeat(indent)),\n-            T![->] => \" -> \".to_string(),\n-            T![=] => \" = \".to_string(),\n-            T![=>] => \" => \".to_string(),\n-            _ => token.text().to_string(),\n-        };\n+            T![;] => {\n+                res.push_str(\";\\n\");\n+                res.extend(iter::repeat(\" \").take(2 * indent));\n+            }\n+            T![->] => res.push_str(\" -> \"),\n+            T![=] => res.push_str(\" = \"),\n+            T![=>] => res.push_str(\" => \"),\n+            _ => res.push_str(token.text()),\n+        }\n \n         last = Some(token.kind());\n     }"}]}