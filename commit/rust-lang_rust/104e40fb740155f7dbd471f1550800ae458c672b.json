{"sha": "104e40fb740155f7dbd471f1550800ae458c672b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNGU0MGZiNzQwMTU1ZjdkYmQ0NzFmMTU1MDgwMGFlNDU4YzY3MmI=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-01T11:06:15Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:29Z"}, "message": "Const dropping", "tree": {"sha": "3e72e32d0c7b57b69eb98a59d92cdb4865886ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e72e32d0c7b57b69eb98a59d92cdb4865886ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104e40fb740155f7dbd471f1550800ae458c672b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdkACgkQAn35M4hi\nrd0bFQ/7BDKOWjKDC2cNBnmsS9wKwun3VxuhAXBVKL8SpprhLVbLouNmvZb1K2DX\nc73//tP/t4JTU9iZuPkbWB0IGBPRQrKncoBxQcg0At2hUOMEDviLJCiX+z9PsU2i\n4qjIGxaIz6EoslXZ49JUBodyu2JcxYkH2timlm/sXt3qakc0FvyIRsT3yyhyOi8C\ncX0zGGy/dla6TDOGpgzrMoajUyn6R8/1vW596Mrpdf8P+Hvm3w43OJ7C2/BBquo0\nOH38WU2bJuITqQ9B9RtzeyehthAL4U6AJRQW+YJNJinp57WwLc1eYqmf6fMMrvgD\nVcF7Xx1sA4lIYtNOC60F6y5niGqhk+Nv9/T32uzV5ej93x4FwYJ3rwIrFAflOCqh\nd7XXZT8sa0gy/p9xAVdbWgYCcqEbTSylMFxb0zmy7jwgTpsQBw8IT946clbr6UFQ\nQvg7DM1bhQnniG8K3PtBpvmAr76isXwZzAD3oGO6qGf0D+wobOXxHz0pYzvYztTL\nSrgRs7Hq5WQJ9OhILSLgUKLvfqjD5jUNSFeBRPaZe4dj7JmVafGIAAfoARn9kfys\nlpUKYHDzj7PYrawDQ2jPra3UQAdYKq5oia1/9UFClJahfQwi3rgLT26Itsh5yMNo\nCRyhBcrESm+26Nil3jm0EH9yzIwgbc4z9PHQmDvYvPLXbuPYeME=\n=hNG+\n-----END PGP SIGNATURE-----", "payload": "tree 3e72e32d0c7b57b69eb98a59d92cdb4865886ecc\nparent d9797d23d5e03aeafeac4eed6e147045af65783b\nauthor Deadbeef <ent3rm4n@gmail.com> 1630494375 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164889 +0000\n\nConst dropping\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104e40fb740155f7dbd471f1550800ae458c672b", "html_url": "https://github.com/rust-lang/rust/commit/104e40fb740155f7dbd471f1550800ae458c672b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104e40fb740155f7dbd471f1550800ae458c672b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9797d23d5e03aeafeac4eed6e147045af65783b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9797d23d5e03aeafeac4eed6e147045af65783b", "html_url": "https://github.com/rust-lang/rust/commit/d9797d23d5e03aeafeac4eed6e147045af65783b"}], "stats": {"total": 169, "additions": 141, "deletions": 28}, "files": [{"sha": "189e1b043b3d53ecbe2fb80d8724283e65d47991", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -22,7 +22,7 @@ use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n-use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n+use super::qualifs::{self, CustomEq, HasMutInterior, NeedsNonConstDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n@@ -39,7 +39,7 @@ type QualifResults<'mir, 'tcx, Q> =\n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {\n     has_mut_interior: Option<QualifResults<'mir, 'tcx, HasMutInterior>>,\n-    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsDrop>>,\n+    needs_drop: Option<QualifResults<'mir, 'tcx, NeedsNonConstDrop>>,\n     indirectly_mutable: Option<IndirectlyMutableResults<'mir, 'tcx>>,\n }\n \n@@ -80,14 +80,14 @@ impl Qualifs<'mir, 'tcx> {\n         location: Location,\n     ) -> bool {\n         let ty = ccx.body.local_decls[local].ty;\n-        if !NeedsDrop::in_any_value_of_ty(ccx, ty) {\n+        if !NeedsNonConstDrop::in_any_value_of_ty(ccx, ty) {\n             return false;\n         }\n \n         let needs_drop = self.needs_drop.get_or_insert_with(|| {\n             let ConstCx { tcx, body, .. } = *ccx;\n \n-            FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n+            FlowSensitiveAnalysis::new(NeedsNonConstDrop, ccx)\n                 .into_engine(tcx, &body)\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n@@ -991,7 +991,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 // Check to see if the type of this place can ever have a drop impl. If not, this\n                 // `Drop` terminator is frivolous.\n                 let ty_needs_drop =\n-                    dropped_place.ty(self.body, self.tcx).ty.needs_drop(self.tcx, self.param_env);\n+                    dropped_place.ty(self.body, self.tcx).ty.needs_non_const_drop(self.tcx, self.param_env);\n \n                 if !ty_needs_drop {\n                     return;"}, {"sha": "4f66e6be2970748378b4b9cb1b598ee1651aac20", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -5,7 +5,7 @@ use rustc_span::Span;\n \n use super::check::Qualifs;\n use super::ops::{self, NonConstOp};\n-use super::qualifs::{NeedsDrop, Qualif};\n+use super::qualifs::{NeedsNonConstDrop, Qualif};\n use super::ConstCx;\n \n /// Returns `true` if we should use the more precise live drop checker that runs after drop\n@@ -78,7 +78,7 @@ impl Visitor<'tcx> for CheckLiveDrops<'mir, 'tcx> {\n         match &terminator.kind {\n             mir::TerminatorKind::Drop { place: dropped_place, .. } => {\n                 let dropped_ty = dropped_place.ty(self.body, self.tcx).ty;\n-                if !NeedsDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n+                if !NeedsNonConstDrop::in_any_value_of_ty(self.ccx, dropped_ty) {\n                     bug!(\n                         \"Drop elaboration left behind a Drop for a type that does not need dropping\"\n                     );"}, {"sha": "50b691dffe83c44e4ffc45c64900c05d10c31c3f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -17,7 +17,7 @@ pub fn in_any_value_of_ty(\n ) -> ConstQualifs {\n     ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n-        needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n+        needs_drop: NeedsNonConstDrop::in_any_value_of_ty(cx, ty),\n         custom_eq: CustomEq::in_any_value_of_ty(cx, ty),\n         error_occured,\n     }\n@@ -97,10 +97,10 @@ impl Qualif for HasMutInterior {\n /// This must be ruled out (a) because we cannot run `Drop` during compile-time\n /// as that might not be a `const fn`, and (b) because implicit promotion would\n /// remove side-effects that occur as part of dropping that value.\n-pub struct NeedsDrop;\n+pub struct NeedsNonConstDrop;\n \n-impl Qualif for NeedsDrop {\n-    const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n+impl Qualif for NeedsNonConstDrop {\n+    const ANALYSIS_NAME: &'static str = \"flow_needs_nonconst_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n     fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n@@ -112,7 +112,7 @@ impl Qualif for NeedsDrop {\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {\n-        adt.has_dtor(cx.tcx)\n+        adt.has_non_const_dtor(cx.tcx)\n     }\n }\n "}, {"sha": "94c0d8db847146f76bff65b3a57e77d483cb0f0b", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -231,7 +231,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                         // We cannot promote things that need dropping, since the promoted value\n                         // would not get dropped.\n-                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n+                        if self.qualif_local::<qualifs::NeedsNonConstDrop>(place.local) {\n                             return Err(Unpromotable);\n                         }\n "}, {"sha": "4f13ca892dddce52babaac6cc0fd5fd1a87463b5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -1077,6 +1077,10 @@ rustc_queries! {\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n     }\n+    /// Query backing `Tys::needs_non_const_drop`.\n+    query needs_non_const_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+        desc { \"computing whether `{}` needs non-const drop\", env.value }\n+    }\n     /// Query backing `TyS::has_significant_drop_raw`.\n     query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` has a significant drop\", env.value }\n@@ -1101,6 +1105,14 @@ rustc_queries! {\n         cache_on_disk_if { true }\n     }\n \n+    /// A list of types where the ADT requires drop if and only if any of\n+    /// those types require non-const drop. If the ADT is known to always need\n+    /// non-const drop then `Err(AlwaysRequiresDrop)` is returned.\n+    query adt_drop_tys_non_const(def_id: DefId) -> Result<&'tcx ty::List<Ty<'tcx>>, AlwaysRequiresDrop> {\n+        desc { |tcx| \"computing when `{}` needs non-const drop\", tcx.def_path_str(def_id) }\n+        cache_on_disk_if { true }\n+    }\n+\n     /// A list of types where the ADT requires drop if and only if any of those types\n     /// has significant drop. A type marked with the attribute `rustc_insignificant_dtor`\n     /// is considered to not be significant. A drop is significant if it is implemented"}, {"sha": "c32f0ea9ca55a2c147c9177071379f92960b6a92", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -7,6 +7,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -288,6 +289,10 @@ impl<'tcx> AdtDef {\n         self.destructor(tcx).is_some()\n     }\n \n+    pub fn has_non_const_dtor(&self, tcx: TyCtxt<'tcx>) -> bool {\n+        matches!(self.destructor(tcx), Some(Destructor { constness: hir::Constness::NotConst, .. }))\n+    }\n+\n     /// Asserts this is a struct or union and returns its unique variant.\n     pub fn non_enum_variant(&self) -> &VariantDef {\n         assert!(self.is_struct() || self.is_union());"}, {"sha": "bab223ac6d535e3ec0c24f52e75cff1c18809437", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -1377,6 +1377,8 @@ where\n pub struct Destructor {\n     /// The `DefId` of the destructor method\n     pub did: DefId,\n+    /// The constness of the destructor method\n+    pub constness: hir::Constness,\n }\n \n bitflags! {"}, {"sha": "1d86715772db7f663560d240f9c7d570e3901481", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -336,16 +336,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.ensure().coherent_trait(drop_trait);\n \n         let ty = self.type_of(adt_did);\n-        let dtor_did = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n+        let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n-                    return Some(item.def_id);\n+                    return Some((item.def_id, self.impl_constness(impl_did)));\n                 }\n             }\n             None\n-        });\n+        })?;\n \n-        Some(ty::Destructor { did: dtor_did? })\n+        Some(ty::Destructor { did, constness })\n     }\n \n     /// Returns the set of types that are required to be alive in\n@@ -792,6 +792,35 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n         }\n     }\n+    /// If `ty.needs_non_const_drop(...)` returns true, then `ty` is definitely\n+    /// non-copy and *might* have a non-const destructor attached; if it returns\n+    /// `false`, then `ty` definitely has a const destructor or no destructor at all.\n+    ///\n+    /// (Note that this implies that if `ty` has a non-const destructor attached,\n+    /// then `needs_non_const_drop` will definitely return `true` for `ty`.)\n+    pub fn needs_non_const_drop(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> bool {\n+        // Avoid querying in simple cases.\n+        match needs_drop_components(self, &tcx.data_layout) {\n+            Err(AlwaysRequiresDrop) => true,\n+            Ok(components) => {\n+                let query_ty = match *components {\n+                    [] => return false,\n+                    // if we've got a single component, call the query with that\n+                    // to increase the chance that we hit the query cache.\n+                    [component_ty] => component_ty,\n+                    _ => self,\n+                };\n+                // This doesn't depend on regions, so try to minimize distinct\n+                // query keys used.\n+                let erased = tcx.normalize_erasing_regions(param_env, query_ty);\n+                tcx.needs_non_const_drop_raw(param_env.and(erased))\n+            }\n+        }\n+    }\n \n     /// Checks if `ty` has has a significant drop.\n     ///"}, {"sha": "d93379aa3866b330c8f4f39a8b59920c8944fac9", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 76, "deletions": 11, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104e40fb740155f7dbd471f1550800ae458c672b/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=104e40fb740155f7dbd471f1550800ae458c672b", "patch": "@@ -1,22 +1,41 @@\n //! Check whether a type has (potentially) non-trivial drop glue.\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::{sym, DUMMY_SP};\n+use rustc_trait_selection::traits::{Obligation, ObligationCause, SelectionContext};\n \n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n-fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-    let adt_fields =\n-        move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n+fn needs_drop_raw<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n+    needs_non_const_drop: bool,\n+) -> bool {\n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n     // needs drop.\n-    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, adt_fields).next().is_some();\n+    let res = if needs_non_const_drop {\n+        let adt_components = move |adt_def: &ty::AdtDef| {\n+            tcx.adt_drop_tys_non_const(adt_def.did).map(|tys| tys.iter())\n+        };\n+        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components, needs_non_const_drop)\n+            .next()\n+            .is_some()\n+    } else {\n+        let adt_components =\n+            move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n+        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components, needs_non_const_drop)\n+            .next()\n+            .is_some()\n+    };\n+\n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n }\n@@ -27,9 +46,10 @@ fn has_significant_drop_raw<'tcx>(\n ) -> bool {\n     let significant_drop_fields =\n         move |adt_def: &ty::AdtDef| tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter());\n-    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields)\n-        .next()\n-        .is_some();\n+    let res =\n+        NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields, false)\n+            .next()\n+            .is_some();\n     debug!(\"has_significant_drop_raw({:?}) = {:?}\", query, res);\n     res\n }\n@@ -46,6 +66,7 @@ struct NeedsDropTypes<'tcx, F> {\n     unchecked_tys: Vec<(Ty<'tcx>, usize)>,\n     recursion_limit: Limit,\n     adt_components: F,\n+    needs_non_const_drop: bool,\n }\n \n impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n@@ -54,6 +75,7 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n         param_env: ty::ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n         adt_components: F,\n+        needs_non_const_drop: bool,\n     ) -> Self {\n         let mut seen_tys = FxHashSet::default();\n         seen_tys.insert(ty);\n@@ -65,6 +87,7 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n             unchecked_tys: vec![(ty, 0)],\n             recursion_limit: tcx.recursion_limit(),\n             adt_components,\n+            needs_non_const_drop,\n         }\n     }\n }\n@@ -147,6 +170,35 @@ where\n                             queue_type(self, subst_ty);\n                         }\n                     }\n+                    ty::Param(_)\n+                        if self.needs_non_const_drop && self.tcx.features().const_trait_impl =>\n+                    {\n+                        // Check if the param is bounded to have a `~const Drop` impl.\n+                        let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, None);\n+                        let trait_ref = ty::TraitRef {\n+                            def_id: drop_trait,\n+                            substs: self.tcx.mk_substs_trait(component, &[]),\n+                        };\n+\n+                        let obligation = Obligation::new(\n+                            ObligationCause::dummy(),\n+                            self.param_env,\n+                            ty::Binder::dummy(ty::TraitPredicate {\n+                                trait_ref,\n+                                constness: ty::BoundConstness::ConstIfConst,\n+                            }),\n+                        );\n+\n+                        let implsrc = tcx.infer_ctxt().enter(|infcx| {\n+                            let mut selcx =\n+                                SelectionContext::with_constness(&infcx, hir::Constness::Const);\n+                            selcx.select(&obligation)\n+                        });\n+\n+                        if let Ok(Some(_)) = implsrc {\n+                            return None;\n+                        }\n+                    }\n                     ty::Array(..) | ty::Opaque(..) | ty::Projection(..) | ty::Param(_) => {\n                         if ty == component {\n                             // Return the type to the caller: they may be able\n@@ -176,6 +228,7 @@ fn adt_drop_tys_helper(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n     adt_has_dtor: impl Fn(&ty::AdtDef) -> bool,\n+    needs_non_const_drop: bool,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_components = move |adt_def: &ty::AdtDef| {\n         if adt_def.is_manually_drop() {\n@@ -194,15 +247,25 @@ fn adt_drop_tys_helper(\n     let adt_ty = tcx.type_of(def_id);\n     let param_env = tcx.param_env(def_id);\n     let res: Result<Vec<_>, _> =\n-        NeedsDropTypes::new(tcx, param_env, adt_ty, adt_components).collect();\n+        NeedsDropTypes::new(tcx, param_env, adt_ty, adt_components, needs_non_const_drop).collect();\n \n     debug!(\"adt_drop_tys(`{}`) = `{:?}`\", tcx.def_path_str(def_id), res);\n     res.map(|components| tcx.intern_type_list(&components))\n }\n \n fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_has_dtor = |adt_def: &ty::AdtDef| adt_def.destructor(tcx).is_some();\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, false)\n+}\n+\n+fn adt_drop_tys_non_const(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n+    let adt_has_dtor = |adt_def: &ty::AdtDef| {\n+        adt_def.destructor(tcx).map(|d| d.constness) == Some(hir::Constness::NotConst)\n+    };\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, true)\n }\n \n fn adt_significant_drop_tys(\n@@ -215,14 +278,16 @@ fn adt_significant_drop_tys(\n             .map(|dtor| !tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor))\n             .unwrap_or(false)\n     };\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, false)\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n-        needs_drop_raw,\n+        needs_drop_raw: |tcx, query| needs_drop_raw(tcx, query, false),\n+        needs_non_const_drop_raw: |tcx, query| needs_drop_raw(tcx, query, true),\n         has_significant_drop_raw,\n         adt_drop_tys,\n+        adt_drop_tys_non_const,\n         adt_significant_drop_tys,\n         ..*providers\n     };"}]}