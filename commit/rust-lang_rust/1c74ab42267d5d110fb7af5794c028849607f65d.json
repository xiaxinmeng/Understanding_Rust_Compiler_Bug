{"sha": "1c74ab42267d5d110fb7af5794c028849607f65d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzRhYjQyMjY3ZDVkMTEwZmI3YWY1Nzk0YzAyODg0OTYwN2Y2NWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-21T09:20:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-21T09:47:19Z"}, "message": "Make is_freeze and is_copy_modulo_regions take TyCtxtAt", "tree": {"sha": "d57ccc87198096177245cbce77ae54a0530fa114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57ccc87198096177245cbce77ae54a0530fa114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c74ab42267d5d110fb7af5794c028849607f65d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c74ab42267d5d110fb7af5794c028849607f65d", "html_url": "https://github.com/rust-lang/rust/commit/1c74ab42267d5d110fb7af5794c028849607f65d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c74ab42267d5d110fb7af5794c028849607f65d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2", "html_url": "https://github.com/rust-lang/rust/commit/228a0ed7b0cef2fbfeb781acf6c23015ccc40ba2"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "c55bf9858b972450c4cd607ee630221dacb23f38", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -74,7 +74,7 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(self.tcx(), ty::ParamEnv::reveal_all(), DUMMY_SP)\n+        ty.is_freeze(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all())\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {"}, {"sha": "e746396e4c684d7e13afb04ef2ac0dd7e75169d1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n             return;\n         }\n         let param_env = ty::ParamEnv::empty();\n-        if ty.is_copy_modulo_regions(cx.tcx, param_env, item.span) {\n+        if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {\n             return;\n         }\n         if can_type_implement_copy(cx.tcx, param_env, ty).is_ok() {"}, {"sha": "e4cc96dd83bfbd751cd4b29b9e1b9bcd1e892b32", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -2159,7 +2159,7 @@ where\n \n             ty::Ref(_, ty, mt) if offset.bytes() == 0 => {\n                 let tcx = cx.tcx();\n-                let is_freeze = ty.is_freeze(tcx, cx.param_env(), DUMMY_SP);\n+                let is_freeze = ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env());\n                 let kind = match mt {\n                     hir::Mutability::Not => {\n                         if is_freeze {"}, {"sha": "67ad7ee708267968560c9b5b1b97106d5b041ff2", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -681,11 +681,10 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// winds up being reported as an error during NLL borrow check.\n     pub fn is_copy_modulo_regions(\n         &'tcx self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx_at: TyCtxtAt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        span: Span,\n     ) -> bool {\n-        tcx.at(span).is_copy_raw(param_env.and(self))\n+        tcx_at.is_copy_raw(param_env.and(self))\n     }\n \n     /// Checks whether values of this type `T` have a size known at\n@@ -706,13 +705,8 @@ impl<'tcx> ty::TyS<'tcx> {\n     /// that the `Freeze` trait is not exposed to end users and is\n     /// effectively an implementation detail.\n     // FIXME: use `TyCtxtAt` instead of separate `Span`.\n-    pub fn is_freeze(\n-        &'tcx self,\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        span: Span,\n-    ) -> bool {\n-        self.is_trivially_freeze() || tcx.at(span).is_freeze_raw(param_env.and(self))\n+    pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {\n+        self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))\n     }\n \n     /// Fast path helper for testing if a type is `Freeze`."}, {"sha": "a3fc51cad656b0c9f2721f2d53b3b68d21dd527f", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -233,7 +233,7 @@ impl MutBorrow<'mir, 'tcx> {\n     ///\n     /// [rust-lang/unsafe-code-guidelines#134]: https://github.com/rust-lang/unsafe-code-guidelines/issues/134\n     fn shared_borrow_allows_mutation(&self, place: Place<'tcx>) -> bool {\n-        !place.ty(self.body, self.tcx).ty.is_freeze(self.tcx, self.param_env, DUMMY_SP)\n+        !place.ty(self.body, self.tcx).ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env)\n     }\n }\n "}, {"sha": "91b1ec8b3a3ad2a645fd39ca1fbe69577b29e82d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -391,7 +391,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(*self.tcx, self.param_env, self.tcx.span)\n+        ty.is_freeze(self.tcx, self.param_env)\n     }\n \n     pub fn load_mir("}, {"sha": "dffbc969c21b8c645158e7ba7850e59d29df5bb6", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -111,7 +111,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     if let InternMode::Static(mutability) = mode {\n         // For this, we need to take into account `UnsafeCell`. When `ty` is `None`, we assume\n         // no interior mutability.\n-        let frozen = ty.map_or(true, |ty| ty.is_freeze(*ecx.tcx, ecx.param_env, ecx.tcx.span));\n+        let frozen = ty.map_or(true, |ty| ty.is_freeze(ecx.tcx, ecx.param_env));\n         // For statics, allocation mutability is the combination of the place mutability and\n         // the type mutability.\n         // The entire allocation needs to be mutable if it contains an `UnsafeCell` anywhere."}, {"sha": "8327affd982ed0f4578d41eded44cf05460e573b", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -327,7 +327,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     let param_env = tcx.param_env(def_id);\n \n     let mut builder = CloneShimBuilder::new(tcx, def_id, self_ty);\n-    let is_copy = self_ty.is_copy_modulo_regions(tcx, param_env, builder.span);\n+    let is_copy = self_ty.is_copy_modulo_regions(tcx.at(builder.span), param_env);\n \n     let dest = Place::return_place();\n     let src = tcx.mk_place_deref(Place::from(Local::new(1 + 0)));"}, {"sha": "e2893e81a2ce63dc8a0cebdce21ac276ce145957", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -77,7 +77,7 @@ impl Qualif for HasMutInterior {\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-        !ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP)\n+        !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)\n     }\n \n     fn in_adt_inherently(cx: &ConstCx<'_, 'tcx>, adt: &'tcx AdtDef, _: SubstsRef<'tcx>) -> bool {"}, {"sha": "9898cde5207780ac582c5e7c899e402bd59968c9", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -282,9 +282,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                 ),\n                             };\n                             if !elem_ty.is_copy_modulo_regions(\n-                                self.tcx,\n+                                self.tcx.at(self.source_info.span),\n                                 self.param_env,\n-                                self.source_info.span,\n                             ) {\n                                 self.require_unsafe(\n                                     \"assignment to non-`Copy` union field\",\n@@ -459,11 +458,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n \n                             // Check `is_freeze` as late as possible to avoid cycle errors\n                             // with opaque types.\n-                            } else if !place.ty(self.body, self.tcx).ty.is_freeze(\n-                                self.tcx,\n-                                self.param_env,\n-                                self.source_info.span,\n-                            ) {\n+                            } else if !place\n+                                .ty(self.body, self.tcx)\n+                                .ty\n+                                .is_freeze(self.tcx.at(self.source_info.span), self.param_env)\n+                            {\n                                 (\n                                     \"borrow of layout constrained field with interior \\\n                                         mutability\","}, {"sha": "8bcbcd79ae60b798a49ed22bb6a2221b8599d08e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                     Place::ty_from(place.local, proj_base, self.body, self.tcx)\n                                         .projection_ty(self.tcx, elem)\n                                         .ty;\n-                                if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n+                                if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n                                     has_mut_interior = false;\n                                     break;\n                                 }\n@@ -678,7 +678,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         let ty = Place::ty_from(place.local, proj_base, self.body, self.tcx)\n                             .projection_ty(self.tcx, elem)\n                             .ty;\n-                        if ty.is_freeze(self.tcx, self.param_env, DUMMY_SP) {\n+                        if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n                             has_mut_interior = false;\n                             break;\n                         }"}, {"sha": "953b335d9d798b5e4160689a180372b98c5a83d7", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n             let span = self.body.source_info(location).span;\n \n-            if !ty.is_copy_modulo_regions(self.tcx, self.param_env, span) {\n+            if !ty.is_copy_modulo_regions(self.tcx.at(span), self.param_env) {\n                 self.fail(location, format!(\"`Operand::Copy` with non-`Copy` type {}\", ty));\n             }\n         }"}, {"sha": "5949fd1e22ce88dbc3effbb1487311d48e738e7f", "filename": "src/librustc_mir_build/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_operand.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -172,7 +172,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             if !ty.is_sized(tcx.at(span), param_env) {\n                 // !sized means !copy, so this is an unsized move\n-                assert!(!ty.is_copy_modulo_regions(tcx, param_env, span));\n+                assert!(!ty.is_copy_modulo_regions(tcx.at(span), param_env));\n \n                 // As described above, detect the case where we are passing a value of unsized\n                 // type, and that value is coming from the deref of a box."}, {"sha": "6fc447a87f57a7892bfe694846bc568495941f89", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -579,7 +579,7 @@ fn maybe_point_at_variant(ty: Ty<'_>, patterns: &[super::Pat<'_>]) -> Vec<Span>\n \n /// Check if a by-value binding is by-value. That is, check if the binding's type is not `Copy`.\n fn is_binding_by_move(cx: &MatchVisitor<'_, '_>, hir_id: HirId, span: Span) -> bool {\n-    !cx.tables.node_type(hir_id).is_copy_modulo_regions(cx.tcx, cx.param_env, span)\n+    !cx.tables.node_type(hir_id).is_copy_modulo_regions(cx.tcx.at(span), cx.param_env)\n }\n \n /// Check the legality of legality of by-move bindings."}, {"sha": "c8666ba1fd078d58676329565fc6a44f40c16a8f", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -214,7 +214,7 @@ impl ExprVisitor<'tcx> {\n \n         // Check that the type implements Copy. The only case where this can\n         // possibly fail is for SIMD types which don't #[derive(Copy)].\n-        if !ty.is_copy_modulo_regions(self.tcx, self.param_env, DUMMY_SP) {\n+        if !ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), self.param_env) {\n             let msg = \"arguments for inline assembly must be copyable\";\n             let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n             err.note(&format!(\"`{}` does not implement the Copy trait\", ty));"}, {"sha": "dc895ad34a93205017fdd623c22e083b606e9dfa", "filename": "src/librustc_trait_selection/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_trait_selection%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_trait_selection%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Finfer.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -44,7 +44,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n \n         if !(param_env, ty).needs_infer() {\n-            return ty.is_copy_modulo_regions(self.tcx, param_env, span);\n+            return ty.is_copy_modulo_regions(self.tcx.at(span), param_env);\n         }\n \n         let copy_def_id = self.tcx.require_lang_item(lang_items::CopyTraitLangItem, None);"}, {"sha": "7880c09c2ad81a04ad3284ab97fd1b2093a014c9", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -91,7 +91,7 @@ where\n \n             for component in components {\n                 match component.kind {\n-                    _ if component.is_copy_modulo_regions(tcx, self.param_env, DUMMY_SP) => (),\n+                    _ if component.is_copy_modulo_regions(tcx.at(DUMMY_SP), self.param_env) => (),\n \n                     ty::Closure(_, substs) => {\n                         for upvar_ty in substs.as_closure().upvar_tys() {"}, {"sha": "1f9bd7a691b520bed9c788980974d3050d14e69d", "filename": "src/tools/clippy/clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -513,7 +513,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n         ty::Adt(ref adt, ref substs) => {\n-            tys.insert(adt.did) && !ty.is_freeze(cx.tcx, cx.param_env, span)\n+            tys.insert(adt.did) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n                 || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },"}, {"sha": "e097f40f87e47c4b13084141de3e89b840b89232", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -74,9 +74,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                     let span = stmt.span.to(if_.span);\n \n                     let has_interior_mutability = !cx.tables.node_type(canonical_id).is_freeze(\n-                        cx.tcx,\n+                        cx.tcx.at(span),\n                         cx.param_env,\n-                        span\n                     );\n                     if has_interior_mutability { return; }\n "}, {"sha": "93569a04f7a3a23b151b70b28752f912d6cacf23", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -118,7 +118,7 @@ fn is_mutable_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Spa\n             size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0) && is_mutable_type(cx, inner_ty, span)\n         },\n         Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n-        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx, cx.param_env, span),\n+        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx.at(span), cx.param_env),\n         _ => false,\n     }\n }"}, {"sha": "230dfd2ebf5661c3dd768225627bc5b4199fd93d", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -110,7 +110,7 @@ impl Source {\n }\n \n fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: Source) {\n-    if ty.is_freeze(cx.tcx, cx.param_env, DUMMY_SP) || is_copy(cx, ty) {\n+    if ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env) || is_copy(cx, ty) {\n         // An `UnsafeCell` is `!Copy`, and an `UnsafeCell` is also the only type which\n         // is `!Freeze`, thus if our type is `Copy` we can be sure it must be `Freeze`\n         // as well."}, {"sha": "d8a73f8054bcaa0dff4509fd060d686b24a89ee2", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -137,7 +137,7 @@ impl QuestionMark {\n     fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n \n-        !expr_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, expression.span)\n+        !expr_ty.is_copy_modulo_regions(cx.tcx.at(expression.span), cx.param_env)\n     }\n \n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr<'_>) -> bool {"}, {"sha": "6d4c6c6ce1ceada7c78195219f454e35374ccc3f", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c74ab42267d5d110fb7af5794c028849607f65d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1c74ab42267d5d110fb7af5794c028849607f65d", "patch": "@@ -891,7 +891,7 @@ pub fn type_is_unsafe_function<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx\n }\n \n pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n-    ty.is_copy_modulo_regions(cx.tcx, cx.param_env, DUMMY_SP)\n+    ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n }\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct"}]}