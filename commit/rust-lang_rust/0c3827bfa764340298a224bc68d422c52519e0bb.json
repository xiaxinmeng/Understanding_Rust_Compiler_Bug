{"sha": "0c3827bfa764340298a224bc68d422c52519e0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzgyN2JmYTc2NDM0MDI5OGEyMjRiYzY4ZDQyMmM1MjUxOWUwYmI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-23T00:02:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-23T00:02:08Z"}, "message": "Rollup merge of #67195 - 0dvictor:nolink, r=tmandry\n\n[experiment] Add `-Z no-link` flag\n\nAdds a compiler option to allow rustc compile a crate without linking.\nWith this flag, `rustc` serializes codegen_results into a `.rlink` file.\n\nPart of Issue #64191", "tree": {"sha": "855442fe1710ff235f8ea29628dce81581b1f5e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855442fe1710ff235f8ea29628dce81581b1f5e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c3827bfa764340298a224bc68d422c52519e0bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKOKACRBK7hj4Ov3rIwAAdHIIABY8aHdHFnT+CIZSCneQXTX2\nSsMVya8U4b8XQdRdSDr5ruzL7wYFHS8iJURZXezKAaN45hyLtzPOYN7TSXRPPib5\n3lmw18Z0tATwt0+Db8e/KzRJJ/Lyeb4mWy/HHsTOF/2k8jLCf0Q9G31lNgACo5Y5\nmcn7BXavkvKYXAYoQpQBwNgYViJVazzFF8l3mFLMeajryEItfhGj+MJSS6+Wa5RA\n7tBCXlOOfPAt+GLIZZ66QCBV8hsN14dbv1o0VarnTgSuAmvckdZf4J/sGw7i1w1h\nqPJnP9Fz4MKG6d+EbnkGEn7jwc1jbzmf73ELWB45nhg4FmUJrxY3T+7B7OnMMAI=\n=/5vb\n-----END PGP SIGNATURE-----\n", "payload": "tree 855442fe1710ff235f8ea29628dce81581b1f5e3\nparent d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c\nparent 6a6ebb4403683e1e12d3916cabc1a4898ce798cf\nauthor Tyler Mandry <tmandry@gmail.com> 1579737728 -0800\ncommitter GitHub <noreply@github.com> 1579737728 -0800\n\nRollup merge of #67195 - 0dvictor:nolink, r=tmandry\n\n[experiment] Add `-Z no-link` flag\n\nAdds a compiler option to allow rustc compile a crate without linking.\nWith this flag, `rustc` serializes codegen_results into a `.rlink` file.\n\nPart of Issue #64191\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3827bfa764340298a224bc68d422c52519e0bb", "html_url": "https://github.com/rust-lang/rust/commit/0c3827bfa764340298a224bc68d422c52519e0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c3827bfa764340298a224bc68d422c52519e0bb/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c", "html_url": "https://github.com/rust-lang/rust/commit/d1e594f4029c6ac8feb7c2acf9f9e04c1b9c493c"}, {"sha": "6a6ebb4403683e1e12d3916cabc1a4898ce798cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6ebb4403683e1e12d3916cabc1a4898ce798cf", "html_url": "https://github.com/rust-lang/rust/commit/6a6ebb4403683e1e12d3916cabc1a4898ce798cf"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "237b3dda670dfb34dbb61b0109c5a8ec3817f1c8", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -3428,6 +3428,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serialize\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n ]"}, {"sha": "0e7ff3a3393efcb35cdfce6488a1ff8f744f79be", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -27,7 +27,7 @@ pub use rustc_session::utils::NativeLibraryKind;\n \n /// Where a crate came from on the local filesystem. One of these three options\n /// must be non-None.\n-#[derive(PartialEq, Clone, Debug, HashStable)]\n+#[derive(PartialEq, Clone, Debug, HashStable, RustcEncodable, RustcDecodable)]\n pub struct CrateSource {\n     pub dylib: Option<(PathBuf, PathKind)>,\n     pub rlib: Option<(PathBuf, PathKind)>,\n@@ -75,7 +75,7 @@ impl DepKind {\n     }\n }\n \n-#[derive(PartialEq, Clone, Debug)]\n+#[derive(PartialEq, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum LibSource {\n     Some(PathBuf),\n     MetadataOnly,\n@@ -160,6 +160,7 @@ pub enum ExternCrateSource {\n     Path,\n }\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct EncodedMetadata {\n     pub raw_data: Vec<u8>,\n }"}, {"sha": "6ece51fe866745d449ad8af4468ac601c2496483", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -19,7 +19,7 @@ pub type DependencyList = Vec<Linkage>;\n /// This is local to the tcx, and is generally relevant to one session.\n pub type Dependencies = Vec<(config::CrateType, DependencyList)>;\n \n-#[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Debug, HashStable, RustcEncodable, RustcDecodable)]\n pub enum Linkage {\n     NotLinked,\n     IncludedFromDylib,"}, {"sha": "dd9eadde098ec8a01b433ed8898b9f8781c69f50", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -28,6 +28,7 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n rustc_session = { path = \"../librustc_session\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "70e3874035b601953e9ca926736599c29dec39ba", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -33,6 +33,7 @@ use rustc_codegen_ssa::CompiledModule;\n use rustc_errors::{FatalError, Handler};\n use std::any::Any;\n use std::ffi::CStr;\n+use std::fs;\n use std::sync::Arc;\n use syntax::expand::allocator::AllocatorKind;\n \n@@ -44,6 +45,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_serialize::json;\n \n mod back {\n     pub mod archive;\n@@ -298,6 +300,18 @@ impl CodegenBackend for LlvmCodegenBackend {\n             return Ok(());\n         }\n \n+        if sess.opts.debugging_opts.no_link {\n+            // FIXME: use a binary format to encode the `.rlink` file\n+            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n+                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n+            })?;\n+            let rlink_file = outputs.with_extension(\"rlink\");\n+            fs::write(&rlink_file, rlink_data).map_err(|err| {\n+                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n+            })?;\n+            return Ok(());\n+        }\n+\n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n         sess.time(\"link_crate\", || {"}, {"sha": "695f171dfb49cc574b611ae982a206a9fe26c325", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::{LinkerFlavor, LldFlavor};\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct LinkerInfo {\n     exports: FxHashMap<CrateType, Vec<String>>,\n }"}, {"sha": "b69def5428ccf760fab9ed00df66218c260deae8", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -87,7 +87,7 @@ impl<M> ModuleCodegen<M> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct CompiledModule {\n     pub name: String,\n     pub kind: ModuleKind,\n@@ -101,7 +101,7 @@ pub struct CachedModuleCodegen {\n     pub source: WorkProduct,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ModuleKind {\n     Regular,\n     Metadata,\n@@ -117,7 +117,14 @@ bitflags::bitflags! {\n }\n \n /// Misc info we load from metadata to persist beyond the tcx.\n-#[derive(Debug)]\n+///\n+/// Note: though `CrateNum` is only meaningful within the same tcx, information within `CrateInfo`\n+/// is self-contained. `CrateNum` can be viewed as a unique identifier within a `CrateInfo`, where\n+/// `used_crate_source` contains all `CrateSource` of the dependents, and maintains a mapping from\n+/// identifiers (`CrateNum`) to `CrateSource`. The other fields map `CrateNum` to the crate's own\n+/// additional properties, so that effectively we can retrieve each dependent crate's `CrateSource`\n+/// and the corresponding properties without referencing information outside of a `CrateInfo`.\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct CrateInfo {\n     pub panic_runtime: Option<CrateNum>,\n     pub compiler_builtins: Option<CrateNum>,\n@@ -135,6 +142,7 @@ pub struct CrateInfo {\n     pub dependency_formats: Lrc<Dependencies>,\n }\n \n+#[derive(RustcEncodable, RustcDecodable)]\n pub struct CodegenResults {\n     pub crate_name: Symbol,\n     pub modules: Vec<CompiledModule>,"}, {"sha": "7ee778ddd8ec79bd9f320df16c37c60601055f6d", "filename": "src/librustc_hir/def_id.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_hir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_hir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef_id.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -1,7 +1,8 @@\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n+use rustc_serialize::{Decoder, Encoder};\n use std::fmt;\n-use std::u32;\n+use std::{u32, u64};\n \n rustc_index::newtype_index! {\n     pub struct CrateId {\n@@ -86,8 +87,18 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl rustc_serialize::UseSpecializedEncodable for CrateNum {}\n-impl rustc_serialize::UseSpecializedDecodable for CrateNum {}\n+/// As a local identifier, a `CrateNum` is only meaningful within its context, e.g. within a tcx.\n+/// Therefore, make sure to include the context when encode a `CrateNum`.\n+impl rustc_serialize::UseSpecializedEncodable for CrateNum {\n+    fn default_encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n+        e.emit_u32(self.as_u32())\n+    }\n+}\n+impl rustc_serialize::UseSpecializedDecodable for CrateNum {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<CrateNum, D::Error> {\n+        Ok(CrateNum::from_u32(d.read_u32()?))\n+    }\n+}\n \n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n@@ -135,8 +146,21 @@ impl DefId {\n     }\n }\n \n-impl rustc_serialize::UseSpecializedEncodable for DefId {}\n-impl rustc_serialize::UseSpecializedDecodable for DefId {}\n+impl rustc_serialize::UseSpecializedEncodable for DefId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        let krate = u64::from(self.krate.as_u32());\n+        let index = u64::from(self.index.as_u32());\n+        s.emit_u64((krate << 32) | index)\n+    }\n+}\n+impl rustc_serialize::UseSpecializedDecodable for DefId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<DefId, D::Error> {\n+        let def_id = d.read_u64()?;\n+        let krate = CrateNum::from_u32((def_id >> 32) as u32);\n+        let index = DefIndex::from_u32((def_id & 0xffffffff) as u32);\n+        Ok(DefId { krate, index })\n+    }\n+}\n \n pub fn default_def_id_debug(def_id: DefId, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     f.debug_struct(\"DefId\").field(\"krate\", &def_id.krate).field(\"index\", &def_id.index).finish()"}, {"sha": "b1ba81aa95b195a9f71e4e15511e22833f85e2e3", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -619,7 +619,7 @@ pub enum EntryFnType {\n \n impl_stable_hash_via_hash!(EntryFnType);\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum CrateType {\n     Executable,\n     Dylib,"}, {"sha": "34da2188a51d2cbf366359d21e69d2c29ffc5f6b", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -950,4 +950,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n          (such as entering an empty infinite loop) by inserting llvm.sideeffect\"),\n     deduplicate_diagnostics: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"deduplicate identical diagnostics\"),\n+    no_link: bool = (false, parse_bool, [TRACKED],\n+        \"compile without linking\"),\n }"}, {"sha": "06f408b4a8d64f8def249268172040bd2565e087", "filename": "src/librustc_session/search_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c3827bfa764340298a224bc68d422c52519e0bb/src%2Flibrustc_session%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsearch_paths.rs?ref=0c3827bfa764340298a224bc68d422c52519e0bb", "patch": "@@ -9,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq, RustcEncodable, RustcDecodable)]\n pub enum PathKind {\n     Native,\n     Crate,"}]}