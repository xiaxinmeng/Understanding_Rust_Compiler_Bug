{"sha": "f3fa7c15552294fba231ca8add5c113c8e6dd15c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZmE3YzE1NTUyMjk0ZmJhMjMxY2E4YWRkNWMxMTNjOGU2ZGQxNWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T00:09:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T00:09:32Z"}, "message": "rustdoc: Extract functions from tystr_pass::fold_fn", "tree": {"sha": "60aa81291813579a0a433dd3e1b9450adaa8d7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60aa81291813579a0a433dd3e1b9450adaa8d7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3fa7c15552294fba231ca8add5c113c8e6dd15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fa7c15552294fba231ca8add5c113c8e6dd15c", "html_url": "https://github.com/rust-lang/rust/commit/f3fa7c15552294fba231ca8add5c113c8e6dd15c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3fa7c15552294fba231ca8add5c113c8e6dd15c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd7e8ed1bfe65b9559d46ff9fdf2e0939729fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd7e8ed1bfe65b9559d46ff9fdf2e0939729fa8", "html_url": "https://github.com/rust-lang/rust/commit/cbd7e8ed1bfe65b9559d46ff9fdf2e0939729fa8"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "6fad1e1e9317640c8e1d6a8eddd2fd2aa2a73d41", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f3fa7c15552294fba231ca8add5c113c8e6dd15c/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3fa7c15552294fba231ca8add5c113c8e6dd15c/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=f3fa7c15552294fba231ca8add5c113c8e6dd15c", "patch": "@@ -33,49 +33,49 @@ fn fold_fn(\n ) -> doc::fndoc {\n \n     let srv = fold.ctxt;\n+    let ret_ty = get_ret_ty(srv, doc.id);\n \n-    fn add_ret_ty(\n-        doc: option<doc::retdoc>,\n-        tystr: str\n-    ) -> option<doc::retdoc> {\n-        alt doc {\n-          some(doc) {\n-            fail \"unimplemented\";\n-          }\n-          none. {\n-            some({\n-                desc: none,\n-                ty: some(tystr)\n-            })\n-          }\n-        }\n+    ~{\n+        return: merge_ret_ty(doc.return, ret_ty)\n+        with *doc\n     }\n+}\n \n-    let retty = astsrv::exec(srv) {|ctxt|\n-        alt ctxt.map.get(doc.id) {\n+fn get_ret_ty(srv: astsrv::srv, id: doc::ast_id) -> str {\n+    astsrv::exec(srv) {|ctxt|\n+        alt ctxt.map.get(id) {\n           ast_map::node_item(@{\n             node: ast::item_fn(decl, _, _), _\n           }) {\n             pprust::ty_to_str(decl.output)\n           }\n         }\n-    };\n-\n-    ~{\n-        return: add_ret_ty(doc.return, retty)\n-        with *doc\n     }\n }\n \n-#[cfg(test)]\n-mod tests {\n-\n-    #[test]\n-    fn should_add_fn_ret_types() {\n-        let source = \"fn a() -> int { }\";\n-        let srv = astsrv::mk_srv_from_str(source);\n-        let doc = extract::from_srv(srv, \"\");\n-        let doc = run(srv, doc);\n-        assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");\n+fn merge_ret_ty(\n+    doc: option<doc::retdoc>,\n+    tystr: str\n+) -> option<doc::retdoc> {\n+    alt doc {\n+      some(doc) {\n+        fail \"unimplemented\";\n+      }\n+      none. {\n+        some({\n+            desc: none,\n+            ty: some(tystr)\n+        })\n+      }\n     }\n }\n+\n+#[test]\n+fn should_add_fn_ret_types() {\n+    let source = \"fn a() -> int { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");\n+}\n+"}]}