{"sha": "4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmZkOWNmYjcwYTI3ZDVkNjU2Y2FhOGY3NDI5NzFmYmJhZmFlYTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:54Z"}, "message": "Rollup merge of #57494 - dotdash:expand, r=nikomatsakis\n\nSpeed up item_bodies for large match statements involving regions\n\nThese changes don't change anything about the complexity of the algorithms, but use some easy shortcuts or modifications to cut down some overhead.\n\nThe first change, which incrementally removes the constraints from the set we're iterating over probably introduces some overhead for small to medium sized constraint sets, but it's not big enough for me to observe it in any project I tested against (not that many though).\n\nThough most other crates probably won't improve much at all, because huge matches aren't that common, the changes seemed simple enough for me to make them.\n\nRef #55528\n\ncc unicode-rs/unicode-normalization#29\n\nr? @nikomatsakis", "tree": {"sha": "80ada84c6371f577a5f1acc6f44b429bc1b3fd63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ada84c6371f577a5f1acc6f44b429bc1b3fd63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4OCRBK7hj4Ov3rIwAAdHIIAKpfLrsUPd7PFATvWTxuZgD4\n0RzWKlHQ8ryNdVirxa39BfAi/VbtXAqwn48exoQ/8oagMvgfrUmSKs90KAX8IgX9\nYa8gqeXUbBtjHXz45trpcAU58oSvz1naS3dxwtSxwB6Yv/4fe6r9FCEUlNBLFyQW\nhHxQRMlU2CRgFLETqf5VtrIUJEuo5OszFOAGHcVXJ7gL4QhRVSnO17jKG0S5yBPH\nsuHxozOhhR7G1S57aDVGcLov5+3htOB11CdNvO2e1YKLDSH6jbYaodQLQq+AgIgy\nKJ27CRmwMA6K1YyTPVVBzbb2OhiRf3amppDOloEc1h95po4pVz3tEYxfTXS3ZOo=\n=Ecas\n-----END PGP SIGNATURE-----\n", "payload": "tree 80ada84c6371f577a5f1acc6f44b429bc1b3fd63\nparent edec83835aed689a9f5c6ab50d3eb5491007de25\nparent 5f402b827726607b04887c7c7b8d8b95cce8f487\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353614 +0100\ncommitter GitHub <noreply@github.com> 1547353614 +0100\n\nRollup merge of #57494 - dotdash:expand, r=nikomatsakis\n\nSpeed up item_bodies for large match statements involving regions\n\nThese changes don't change anything about the complexity of the algorithms, but use some easy shortcuts or modifications to cut down some overhead.\n\nThe first change, which incrementally removes the constraints from the set we're iterating over probably introduces some overhead for small to medium sized constraint sets, but it's not big enough for me to observe it in any project I tested against (not that many though).\n\nThough most other crates probably won't improve much at all, because huge matches aren't that common, the changes seemed simple enough for me to make them.\n\nRef #55528\n\ncc unicode-rs/unicode-normalization#29\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "html_url": "https://github.com/rust-lang/rust/commit/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edec83835aed689a9f5c6ab50d3eb5491007de25", "url": "https://api.github.com/repos/rust-lang/rust/commits/edec83835aed689a9f5c6ab50d3eb5491007de25", "html_url": "https://github.com/rust-lang/rust/commit/edec83835aed689a9f5c6ab50d3eb5491007de25"}, {"sha": "5f402b827726607b04887c7c7b8d8b95cce8f487", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f402b827726607b04887c7c7b8d8b95cce8f487", "html_url": "https://github.com/rust-lang/rust/commit/5f402b827726607b04887c7c7b8d8b95cce8f487"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "39ce8cc621b49d9215de6dfe3998085a937eead7", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "patch": "@@ -13,6 +13,7 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n+use smallvec::SmallVec;\n use std::fmt;\n use std::u32;\n use ty::fold::TypeFoldable;\n@@ -190,19 +191,24 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n             match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    self.expand_node(a_region, b_vid, b_data)\n+                    (self.expand_node(a_region, b_vid, b_data), false)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => false,\n+                    VarValue::ErrorValue => (false, false),\n                     VarValue::Value(a_region) => {\n                         let b_node = var_values.value_mut(b_vid);\n-                        self.expand_node(a_region, b_vid, b_node)\n+                        let changed = self.expand_node(a_region, b_vid, b_node);\n+                        let retain = match *b_node {\n+                            VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n+                            _ => true\n+                        };\n+                        (changed, retain)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n                     // These constraints are checked after expansion\n                     // is done, in `collect_errors`.\n-                    false\n+                    (false, false)\n                 }\n             }\n         })\n@@ -268,6 +274,13 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let tcx = self.tcx();\n+\n+        // Equal scopes can show up quite often, if the fixed point\n+        // iteration converges slowly, skip them\n+        if a == b {\n+            return a;\n+        }\n+\n         match (a, b) {\n             (&ty::ReClosureBound(..), _)\n             | (_, &ty::ReClosureBound(..))\n@@ -710,21 +723,23 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n     fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F)\n     where\n-        F: FnMut(&Constraint<'tcx>, &SubregionOrigin<'tcx>) -> bool,\n+        F: FnMut(&Constraint<'tcx>, &SubregionOrigin<'tcx>) -> (bool, bool),\n     {\n+        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.iter().collect();\n         let mut iteration = 0;\n         let mut changed = true;\n         while changed {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- {} Iteration {}{}\", \"#\", tag, iteration);\n-            for (constraint, origin) in &self.data.constraints {\n-                let edge_changed = body(constraint, origin);\n+            constraints.retain(|(constraint, origin)| {\n+                let (edge_changed, retain) = body(constraint, origin);\n                 if edge_changed {\n                     debug!(\"Updated due to constraint {:?}\", constraint);\n                     changed = true;\n                 }\n-            }\n+                retain\n+            });\n         }\n         debug!(\"---- {} Complete after {} iteration(s)\", tag, iteration);\n     }"}]}