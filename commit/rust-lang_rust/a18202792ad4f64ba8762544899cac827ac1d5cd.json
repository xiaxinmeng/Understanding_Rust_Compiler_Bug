{"sha": "a18202792ad4f64ba8762544899cac827ac1d5cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODIwMjc5MmFkNGY2NGJhODc2MjU0NDg5OWNhYzgyN2FjMWQ1Y2Q=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-05T23:01:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-05T23:01:05Z"}, "message": "Rollup merge of #40709 - lifthrasiir:leaner-unicode-debug-str, r=alexcrichton\n\nReduce a table used for `Debug` impl of `str`.\n\nThis commit shrinks the size of the aforementioned table from 2,102 bytes to 1,197 bytes. This is achieved by an observation that most `u16` entries are common in its upper byte. Specifically:\n\n- `SINGLETONS` now uses two tables, one for (upper byte, lower count) and another for a series of lower bytes. For each upper byte given number of lower bytes are read and compared.\n\n- `NORMAL` now uses a variable length format for the count of \"true\" codepoints and \"false\" codepoints (one byte with MSB unset, or two big-endian bytes with the first MSB set).\n\nThe code size and relative performance roughly remains same as this commit tries to optimize for both. The new table and algorithm has been verified for the equivalence to older ones.\n\nIn my x86-64 macOS laptop with `rustc 1.17.0-nightly (0aeb9c129 2017-03-15)`, `-C opt-level=3 -C lto` gives the following:\n\n* The old routine compiles to 2,102 bytes of data and 416 bytes of code.\n* The new routine compiles to 1,197 bytes of data and 448 bytes of code.\n\nCounting a number of all printable Unicode scalar values (128,003, if you wonder) by filtering `0..0x110000` with `std::char::from_u32` and `is_printable` took 50\u00b17ms for both. This can be surprising as the new routine *has* to do more calculations; this is partly explained by the fact that a linear search of `SINGLETONS` has been replaced by *two* linear searches for upper and lower bytes, which greatly reduces the iteration count.", "tree": {"sha": "eac3ef3c8dacbf5ef777e3b102fa63f692745a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac3ef3c8dacbf5ef777e3b102fa63f692745a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18202792ad4f64ba8762544899cac827ac1d5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18202792ad4f64ba8762544899cac827ac1d5cd", "html_url": "https://github.com/rust-lang/rust/commit/a18202792ad4f64ba8762544899cac827ac1d5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18202792ad4f64ba8762544899cac827ac1d5cd/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327b9be9e98288dfe1a0d6a96804cb0529ea6222", "url": "https://api.github.com/repos/rust-lang/rust/commits/327b9be9e98288dfe1a0d6a96804cb0529ea6222", "html_url": "https://github.com/rust-lang/rust/commit/327b9be9e98288dfe1a0d6a96804cb0529ea6222"}, {"sha": "44bcd261a7fa2a4ad873a77b67ac88b0cf09f111", "url": "https://api.github.com/repos/rust-lang/rust/commits/44bcd261a7fa2a4ad873a77b67ac88b0cf09f111", "html_url": "https://github.com/rust-lang/rust/commit/44bcd261a7fa2a4ad873a77b67ac88b0cf09f111"}], "stats": {"total": 1370, "additions": 565, "deletions": 805}, "files": [{"sha": "75ab3f1a17be43f4e3669d6eb347ce6e7c56e4cb", "filename": "src/etc/char_private.py", "status": "modified", "additions": 98, "deletions": 34, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/a18202792ad4f64ba8762544899cac827ac1d5cd/src%2Fetc%2Fchar_private.py", "raw_url": "https://github.com/rust-lang/rust/raw/a18202792ad4f64ba8762544899cac827ac1d5cd/src%2Fetc%2Fchar_private.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fchar_private.py?ref=a18202792ad4f64ba8762544899cac827ac1d5cd", "patch": "@@ -76,6 +76,66 @@ def get_codepoints(f):\n     for c in range(prev_codepoint + 1, NUM_CODEPOINTS):\n         yield Codepoint(c, None)\n \n+def compress_singletons(singletons):\n+    uppers = [] # (upper, # items in lowers)\n+    lowers = []\n+\n+    for i in singletons:\n+        upper = i >> 8\n+        lower = i & 0xff\n+        if len(uppers) == 0 or uppers[-1][0] != upper:\n+            uppers.append((upper, 1))\n+        else:\n+            upper, count = uppers[-1]\n+            uppers[-1] = upper, count + 1\n+        lowers.append(lower)\n+\n+    return uppers, lowers\n+\n+def compress_normal(normal):\n+    # lengths 0x00..0x7f are encoded as 00, 01, ..., 7e, 7f\n+    # lengths 0x80..0x7fff are encoded as 80 80, 80 81, ..., ff fe, ff ff\n+    compressed = [] # [truelen, (truelenaux), falselen, (falselenaux)]\n+\n+    prev_start = 0\n+    for start, count in normal:\n+        truelen = start - prev_start\n+        falselen = count\n+        prev_start = start + count\n+\n+        assert truelen < 0x8000 and falselen < 0x8000\n+        entry = []\n+        if truelen > 0x7f:\n+            entry.append(0x80 | (truelen >> 8))\n+            entry.append(truelen & 0xff)\n+        else:\n+            entry.append(truelen & 0x7f)\n+        if falselen > 0x7f:\n+            entry.append(0x80 | (falselen >> 8))\n+            entry.append(falselen & 0xff)\n+        else:\n+            entry.append(falselen & 0x7f)\n+\n+        compressed.append(entry)\n+\n+    return compressed\n+\n+def print_singletons(uppers, lowers, uppersname, lowersname):\n+    print(\"const {}: &'static [(u8, u8)] = &[\".format(uppersname))\n+    for u, c in uppers:\n+        print(\"    ({:#04x}, {}),\".format(u, c))\n+    print(\"];\")\n+    print(\"const {}: &'static [u8] = &[\".format(lowersname))\n+    for i in range(0, len(lowers), 8):\n+        print(\"    {}\".format(\" \".join(\"{:#04x},\".format(l) for l in lowers[i:i+8])))\n+    print(\"];\")\n+\n+def print_normal(normal, normalname):\n+    print(\"const {}: &'static [u8] = &[\".format(normalname))\n+    for v in normal:\n+        print(\"    {}\".format(\" \".join(\"{:#04x},\".format(i) for i in v)))\n+    print(\"];\")\n+\n def main():\n     file = get_file(\"http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\")\n \n@@ -111,6 +171,11 @@ def main():\n             else:\n                 normal0.append((a, b - a))\n \n+    singletons0u, singletons0l = compress_singletons(singletons0)\n+    singletons1u, singletons1l = compress_singletons(singletons1)\n+    normal0 = compress_normal(normal0)\n+    normal1 = compress_normal(normal1)\n+\n     print(\"\"\"\\\n // Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n@@ -125,38 +190,49 @@ def main():\n // NOTE: The following code was generated by \"src/etc/char_private.py\",\n //       do not edit directly!\n \n-use slice::SliceExt;\n-\n-fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n-    for &s in singletons {\n-        if x == s {\n-            return false;\n-        } else if x < s {\n+fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8],\n+         normal: &[u8]) -> bool {\n+    let xupper = (x >> 8) as u8;\n+    let mut lowerstart = 0;\n+    for &(upper, lowercount) in singletonuppers {\n+        let lowerend = lowerstart + lowercount as usize;\n+        if xupper == upper {\n+            for &lower in &singletonlowers[lowerstart..lowerend] {\n+                if lower == x as u8 {\n+                    return false;\n+                }\n+            }\n+        } else if xupper < upper {\n             break;\n         }\n+        lowerstart = lowerend;\n     }\n-    for w in normal.chunks(2) {\n-        let start = w[0];\n-        let len = w[1];\n-        let difference = (x as i32) - (start as i32);\n-        if 0 <= difference {\n-            if difference < len as i32 {\n-                return false;\n-            }\n+\n+    let mut x = x as i32;\n+    let mut normal = normal.iter().cloned();\n+    let mut current = true;\n+    while let Some(v) = normal.next() {\n+        let len = if v & 0x80 != 0 {\n+            ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32\n         } else {\n+            v as i32\n+        };\n+        x -= len;\n+        if x < 0 {\n             break;\n         }\n+        current = !current;\n     }\n-    true\n+    current\n }\n \n pub fn is_printable(x: char) -> bool {\n     let x = x as u32;\n     let lower = x as u16;\n     if x < 0x10000 {\n-        check(lower, SINGLETONS0, NORMAL0)\n+        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)\n     } else if x < 0x20000 {\n-        check(lower, SINGLETONS1, NORMAL1)\n+        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)\n     } else {\\\n \"\"\")\n     for a, b in extra:\n@@ -169,22 +245,10 @@ def main():\n }\\\n \"\"\")\n     print()\n-    print(\"const SINGLETONS0: &'static [u16] = &[\")\n-    for s in singletons0:\n-        print(\"    0x{:x},\".format(s))\n-    print(\"];\")\n-    print(\"const SINGLETONS1: &'static [u16] = &[\")\n-    for s in singletons1:\n-        print(\"    0x{:x},\".format(s))\n-    print(\"];\")\n-    print(\"const NORMAL0: &'static [u16] = &[\")\n-    for a, b in normal0:\n-        print(\"    0x{:x}, 0x{:x},\".format(a, b))\n-    print(\"];\")\n-    print(\"const NORMAL1: &'static [u16] = &[\")\n-    for a, b in normal1:\n-        print(\"    0x{:x}, 0x{:x},\".format(a, b))\n-    print(\"];\")\n+    print_singletons(singletons0u, singletons0l, 'SINGLETONS0U', 'SINGLETONS0L')\n+    print_singletons(singletons1u, singletons1l, 'SINGLETONS1U', 'SINGLETONS1L')\n+    print_normal(normal0, 'NORMAL0')\n+    print_normal(normal1, 'NORMAL1')\n \n if __name__ == '__main__':\n     main()"}, {"sha": "2c0f449b27601405bdcb1014552944c36b2461e7", "filename": "src/libcore/char_private.rs", "status": "modified", "additions": 467, "deletions": 771, "changes": 1238, "blob_url": "https://github.com/rust-lang/rust/blob/a18202792ad4f64ba8762544899cac827ac1d5cd/src%2Flibcore%2Fchar_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18202792ad4f64ba8762544899cac827ac1d5cd/src%2Flibcore%2Fchar_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar_private.rs?ref=a18202792ad4f64ba8762544899cac827ac1d5cd", "patch": "@@ -11,38 +11,49 @@\n // NOTE: The following code was generated by \"src/etc/char_private.py\",\n //       do not edit directly!\n \n-use slice::SliceExt;\n-\n-fn check(x: u16, singletons: &[u16], normal: &[u16]) -> bool {\n-    for &s in singletons {\n-        if x == s {\n-            return false;\n-        } else if x < s {\n+fn check(x: u16, singletonuppers: &[(u8, u8)], singletonlowers: &[u8],\n+         normal: &[u8]) -> bool {\n+    let xupper = (x >> 8) as u8;\n+    let mut lowerstart = 0;\n+    for &(upper, lowercount) in singletonuppers {\n+        let lowerend = lowerstart + lowercount as usize;\n+        if xupper == upper {\n+            for &lower in &singletonlowers[lowerstart..lowerend] {\n+                if lower == x as u8 {\n+                    return false;\n+                }\n+            }\n+        } else if xupper < upper {\n             break;\n         }\n+        lowerstart = lowerend;\n     }\n-    for w in normal.chunks(2) {\n-        let start = w[0];\n-        let len = w[1];\n-        let difference = (x as i32) - (start as i32);\n-        if 0 <= difference {\n-            if difference < len as i32 {\n-                return false;\n-            }\n+\n+    let mut x = x as i32;\n+    let mut normal = normal.iter().cloned();\n+    let mut current = true;\n+    while let Some(v) = normal.next() {\n+        let len = if v & 0x80 != 0 {\n+            ((v & 0x7f) as i32) << 8 | normal.next().unwrap() as i32\n         } else {\n+            v as i32\n+        };\n+        x -= len;\n+        if x < 0 {\n             break;\n         }\n+        current = !current;\n     }\n-    true\n+    current\n }\n \n pub fn is_printable(x: char) -> bool {\n     let x = x as u32;\n     let lower = x as u16;\n     if x < 0x10000 {\n-        check(lower, SINGLETONS0, NORMAL0)\n+        check(lower, SINGLETONS0U, SINGLETONS0L, NORMAL0)\n     } else if x < 0x20000 {\n-        check(lower, SINGLETONS1, NORMAL1)\n+        check(lower, SINGLETONS1U, SINGLETONS1L, NORMAL1)\n     } else {\n         if 0x2a6d7 <= x && x < 0x2a700 {\n             return false;\n@@ -66,761 +77,446 @@ pub fn is_printable(x: char) -> bool {\n     }\n }\n \n-const SINGLETONS0: &'static [u16] = &[\n-    0xad,\n-    0x378,\n-    0x379,\n-    0x38b,\n-    0x38d,\n-    0x3a2,\n-    0x530,\n-    0x557,\n-    0x558,\n-    0x560,\n-    0x588,\n-    0x58b,\n-    0x58c,\n-    0x590,\n-    0x61c,\n-    0x61d,\n-    0x6dd,\n-    0x70e,\n-    0x70f,\n-    0x74b,\n-    0x74c,\n-    0x82e,\n-    0x82f,\n-    0x83f,\n-    0x85c,\n-    0x85d,\n-    0x8b5,\n-    0x8e2,\n-    0x984,\n-    0x98d,\n-    0x98e,\n-    0x991,\n-    0x992,\n-    0x9a9,\n-    0x9b1,\n-    0x9ba,\n-    0x9bb,\n-    0x9c5,\n-    0x9c6,\n-    0x9c9,\n-    0x9ca,\n-    0x9de,\n-    0x9e4,\n-    0x9e5,\n-    0xa04,\n-    0xa11,\n-    0xa12,\n-    0xa29,\n-    0xa31,\n-    0xa34,\n-    0xa37,\n-    0xa3a,\n-    0xa3b,\n-    0xa3d,\n-    0xa49,\n-    0xa4a,\n-    0xa5d,\n-    0xa84,\n-    0xa8e,\n-    0xa92,\n-    0xaa9,\n-    0xab1,\n-    0xab4,\n-    0xaba,\n-    0xabb,\n-    0xac6,\n-    0xaca,\n-    0xace,\n-    0xacf,\n-    0xae4,\n-    0xae5,\n-    0xb04,\n-    0xb0d,\n-    0xb0e,\n-    0xb11,\n-    0xb12,\n-    0xb29,\n-    0xb31,\n-    0xb34,\n-    0xb3a,\n-    0xb3b,\n-    0xb45,\n-    0xb46,\n-    0xb49,\n-    0xb4a,\n-    0xb5e,\n-    0xb64,\n-    0xb65,\n-    0xb84,\n-    0xb91,\n-    0xb9b,\n-    0xb9d,\n-    0xbc9,\n-    0xbce,\n-    0xbcf,\n-    0xc04,\n-    0xc0d,\n-    0xc11,\n-    0xc29,\n-    0xc45,\n-    0xc49,\n-    0xc57,\n-    0xc64,\n-    0xc65,\n-    0xc84,\n-    0xc8d,\n-    0xc91,\n-    0xca9,\n-    0xcb4,\n-    0xcba,\n-    0xcbb,\n-    0xcc5,\n-    0xcc9,\n-    0xcdf,\n-    0xce4,\n-    0xce5,\n-    0xcf0,\n-    0xd04,\n-    0xd0d,\n-    0xd11,\n-    0xd3b,\n-    0xd3c,\n-    0xd45,\n-    0xd49,\n-    0xd64,\n-    0xd65,\n-    0xd80,\n-    0xd81,\n-    0xd84,\n-    0xdb2,\n-    0xdbc,\n-    0xdbe,\n-    0xdbf,\n-    0xdd5,\n-    0xdd7,\n-    0xdf0,\n-    0xdf1,\n-    0xe83,\n-    0xe85,\n-    0xe86,\n-    0xe89,\n-    0xe8b,\n-    0xe8c,\n-    0xe98,\n-    0xea0,\n-    0xea4,\n-    0xea6,\n-    0xea8,\n-    0xea9,\n-    0xeac,\n-    0xeba,\n-    0xebe,\n-    0xebf,\n-    0xec5,\n-    0xec7,\n-    0xece,\n-    0xecf,\n-    0xeda,\n-    0xedb,\n-    0xf48,\n-    0xf98,\n-    0xfbd,\n-    0xfcd,\n-    0x10c6,\n-    0x10ce,\n-    0x10cf,\n-    0x1249,\n-    0x124e,\n-    0x124f,\n-    0x1257,\n-    0x1259,\n-    0x125e,\n-    0x125f,\n-    0x1289,\n-    0x128e,\n-    0x128f,\n-    0x12b1,\n-    0x12b6,\n-    0x12b7,\n-    0x12bf,\n-    0x12c1,\n-    0x12c6,\n-    0x12c7,\n-    0x12d7,\n-    0x1311,\n-    0x1316,\n-    0x1317,\n-    0x135b,\n-    0x135c,\n-    0x13f6,\n-    0x13f7,\n-    0x13fe,\n-    0x13ff,\n-    0x1680,\n-    0x170d,\n-    0x176d,\n-    0x1771,\n-    0x17de,\n-    0x17df,\n-    0x180e,\n-    0x180f,\n-    0x191f,\n-    0x196e,\n-    0x196f,\n-    0x1a1c,\n-    0x1a1d,\n-    0x1a5f,\n-    0x1a7d,\n-    0x1a7e,\n-    0x1aae,\n-    0x1aaf,\n-    0x1cf7,\n-    0x1f16,\n-    0x1f17,\n-    0x1f1e,\n-    0x1f1f,\n-    0x1f46,\n-    0x1f47,\n-    0x1f4e,\n-    0x1f4f,\n-    0x1f58,\n-    0x1f5a,\n-    0x1f5c,\n-    0x1f5e,\n-    0x1f7e,\n-    0x1f7f,\n-    0x1fb5,\n-    0x1fc5,\n-    0x1fd4,\n-    0x1fd5,\n-    0x1fdc,\n-    0x1ff0,\n-    0x1ff1,\n-    0x1ff5,\n-    0x2072,\n-    0x2073,\n-    0x208f,\n-    0x23ff,\n-    0x2b74,\n-    0x2b75,\n-    0x2b96,\n-    0x2b97,\n-    0x2bc9,\n-    0x2c2f,\n-    0x2c5f,\n-    0x2d26,\n-    0x2d2e,\n-    0x2d2f,\n-    0x2da7,\n-    0x2daf,\n-    0x2db7,\n-    0x2dbf,\n-    0x2dc7,\n-    0x2dcf,\n-    0x2dd7,\n-    0x2ddf,\n-    0x2e9a,\n-    0x3040,\n-    0x3097,\n-    0x3098,\n-    0x318f,\n-    0x321f,\n-    0x32ff,\n-    0xa7af,\n-    0xa8fe,\n-    0xa8ff,\n-    0xa9ce,\n-    0xa9ff,\n-    0xaa4e,\n-    0xaa4f,\n-    0xaa5a,\n-    0xaa5b,\n-    0xab07,\n-    0xab08,\n-    0xab0f,\n-    0xab10,\n-    0xab27,\n-    0xab2f,\n-    0xabee,\n-    0xabef,\n-    0xfa6e,\n-    0xfa6f,\n-    0xfb37,\n-    0xfb3d,\n-    0xfb3f,\n-    0xfb42,\n-    0xfb45,\n-    0xfd90,\n-    0xfd91,\n-    0xfdfe,\n-    0xfdff,\n-    0xfe53,\n-    0xfe67,\n-    0xfe75,\n-    0xffc8,\n-    0xffc9,\n-    0xffd0,\n-    0xffd1,\n-    0xffd8,\n-    0xffd9,\n-    0xffe7,\n-    0xfffe,\n-    0xffff,\n+const SINGLETONS0U: &'static [(u8, u8)] = &[\n+    (0x00, 1),\n+    (0x03, 5),\n+    (0x05, 8),\n+    (0x06, 3),\n+    (0x07, 4),\n+    (0x08, 7),\n+    (0x09, 16),\n+    (0x0a, 27),\n+    (0x0b, 24),\n+    (0x0c, 22),\n+    (0x0d, 20),\n+    (0x0e, 22),\n+    (0x0f, 4),\n+    (0x10, 3),\n+    (0x12, 18),\n+    (0x13, 9),\n+    (0x16, 1),\n+    (0x17, 5),\n+    (0x18, 2),\n+    (0x19, 3),\n+    (0x1a, 7),\n+    (0x1c, 1),\n+    (0x1f, 22),\n+    (0x20, 3),\n+    (0x23, 1),\n+    (0x2b, 5),\n+    (0x2c, 2),\n+    (0x2d, 11),\n+    (0x2e, 1),\n+    (0x30, 3),\n+    (0x31, 1),\n+    (0x32, 2),\n+    (0xa7, 1),\n+    (0xa8, 2),\n+    (0xa9, 2),\n+    (0xaa, 4),\n+    (0xab, 8),\n+    (0xfa, 2),\n+    (0xfb, 5),\n+    (0xfd, 4),\n+    (0xfe, 3),\n+    (0xff, 9),\n ];\n-const SINGLETONS1: &'static [u16] = &[\n-    0xc,\n-    0x27,\n-    0x3b,\n-    0x3e,\n-    0x4e,\n-    0x4f,\n-    0x18f,\n-    0x39e,\n-    0x49e,\n-    0x49f,\n-    0x806,\n-    0x807,\n-    0x809,\n-    0x836,\n-    0x83d,\n-    0x83e,\n-    0x856,\n-    0x8f3,\n-    0x9d0,\n-    0x9d1,\n-    0xa04,\n-    0xa14,\n-    0xa18,\n-    0xb56,\n-    0xb57,\n-    0x10bd,\n-    0x1135,\n-    0x11ce,\n-    0x11cf,\n-    0x11e0,\n-    0x1212,\n-    0x1287,\n-    0x1289,\n-    0x128e,\n-    0x129e,\n-    0x1304,\n-    0x130d,\n-    0x130e,\n-    0x1311,\n-    0x1312,\n-    0x1329,\n-    0x1331,\n-    0x1334,\n-    0x133a,\n-    0x133b,\n-    0x1345,\n-    0x1346,\n-    0x1349,\n-    0x134a,\n-    0x134e,\n-    0x134f,\n-    0x1364,\n-    0x1365,\n-    0x145a,\n-    0x145c,\n-    0x15b6,\n-    0x15b7,\n-    0x1c09,\n-    0x1c37,\n-    0x1c90,\n-    0x1c91,\n-    0x1ca8,\n-    0x246f,\n-    0x6a5f,\n-    0x6aee,\n-    0x6aef,\n-    0x6b5a,\n-    0x6b62,\n-    0xbc9a,\n-    0xbc9b,\n-    0xd127,\n-    0xd128,\n-    0xd455,\n-    0xd49d,\n-    0xd4a0,\n-    0xd4a1,\n-    0xd4a3,\n-    0xd4a4,\n-    0xd4a7,\n-    0xd4a8,\n-    0xd4ad,\n-    0xd4ba,\n-    0xd4bc,\n-    0xd4c4,\n-    0xd506,\n-    0xd50b,\n-    0xd50c,\n-    0xd515,\n-    0xd51d,\n-    0xd53a,\n-    0xd53f,\n-    0xd545,\n-    0xd551,\n-    0xd6a6,\n-    0xd6a7,\n-    0xd7cc,\n-    0xd7cd,\n-    0xdaa0,\n-    0xe007,\n-    0xe019,\n-    0xe01a,\n-    0xe022,\n-    0xe025,\n-    0xe8c5,\n-    0xe8c6,\n-    0xee04,\n-    0xee20,\n-    0xee23,\n-    0xee25,\n-    0xee26,\n-    0xee28,\n-    0xee33,\n-    0xee38,\n-    0xee3a,\n-    0xee48,\n-    0xee4a,\n-    0xee4c,\n-    0xee50,\n-    0xee53,\n-    0xee55,\n-    0xee56,\n-    0xee58,\n-    0xee5a,\n-    0xee5c,\n-    0xee5e,\n-    0xee60,\n-    0xee63,\n-    0xee65,\n-    0xee66,\n-    0xee6b,\n-    0xee73,\n-    0xee78,\n-    0xee7d,\n-    0xee7f,\n-    0xee8a,\n-    0xeea4,\n-    0xeeaa,\n-    0xf0af,\n-    0xf0b0,\n-    0xf0c0,\n-    0xf0d0,\n-    0xf12f,\n-    0xf91f,\n-    0xf931,\n-    0xf932,\n-    0xf93f,\n+const SINGLETONS0L: &'static [u8] = &[\n+    0xad, 0x78, 0x79, 0x8b, 0x8d, 0xa2, 0x30, 0x57,\n+    0x58, 0x60, 0x88, 0x8b, 0x8c, 0x90, 0x1c, 0x1d,\n+    0xdd, 0x0e, 0x0f, 0x4b, 0x4c, 0x2e, 0x2f, 0x3f,\n+    0x5c, 0x5d, 0xb5, 0xe2, 0x84, 0x8d, 0x8e, 0x91,\n+    0x92, 0xa9, 0xb1, 0xba, 0xbb, 0xc5, 0xc6, 0xc9,\n+    0xca, 0xde, 0xe4, 0xe5, 0x04, 0x11, 0x12, 0x29,\n+    0x31, 0x34, 0x37, 0x3a, 0x3b, 0x3d, 0x49, 0x4a,\n+    0x5d, 0x84, 0x8e, 0x92, 0xa9, 0xb1, 0xb4, 0xba,\n+    0xbb, 0xc6, 0xca, 0xce, 0xcf, 0xe4, 0xe5, 0x04,\n+    0x0d, 0x0e, 0x11, 0x12, 0x29, 0x31, 0x34, 0x3a,\n+    0x3b, 0x45, 0x46, 0x49, 0x4a, 0x5e, 0x64, 0x65,\n+    0x84, 0x91, 0x9b, 0x9d, 0xc9, 0xce, 0xcf, 0x04,\n+    0x0d, 0x11, 0x29, 0x45, 0x49, 0x57, 0x64, 0x65,\n+    0x84, 0x8d, 0x91, 0xa9, 0xb4, 0xba, 0xbb, 0xc5,\n+    0xc9, 0xdf, 0xe4, 0xe5, 0xf0, 0x04, 0x0d, 0x11,\n+    0x3b, 0x3c, 0x45, 0x49, 0x64, 0x65, 0x80, 0x81,\n+    0x84, 0xb2, 0xbc, 0xbe, 0xbf, 0xd5, 0xd7, 0xf0,\n+    0xf1, 0x83, 0x85, 0x86, 0x89, 0x8b, 0x8c, 0x98,\n+    0xa0, 0xa4, 0xa6, 0xa8, 0xa9, 0xac, 0xba, 0xbe,\n+    0xbf, 0xc5, 0xc7, 0xce, 0xcf, 0xda, 0xdb, 0x48,\n+    0x98, 0xbd, 0xcd, 0xc6, 0xce, 0xcf, 0x49, 0x4e,\n+    0x4f, 0x57, 0x59, 0x5e, 0x5f, 0x89, 0x8e, 0x8f,\n+    0xb1, 0xb6, 0xb7, 0xbf, 0xc1, 0xc6, 0xc7, 0xd7,\n+    0x11, 0x16, 0x17, 0x5b, 0x5c, 0xf6, 0xf7, 0xfe,\n+    0xff, 0x80, 0x0d, 0x6d, 0x71, 0xde, 0xdf, 0x0e,\n+    0x0f, 0x1f, 0x6e, 0x6f, 0x1c, 0x1d, 0x5f, 0x7d,\n+    0x7e, 0xae, 0xaf, 0xf7, 0x16, 0x17, 0x1e, 0x1f,\n+    0x46, 0x47, 0x4e, 0x4f, 0x58, 0x5a, 0x5c, 0x5e,\n+    0x7e, 0x7f, 0xb5, 0xc5, 0xd4, 0xd5, 0xdc, 0xf0,\n+    0xf1, 0xf5, 0x72, 0x73, 0x8f, 0xff, 0x74, 0x75,\n+    0x96, 0x97, 0xc9, 0x2f, 0x5f, 0x26, 0x2e, 0x2f,\n+    0xa7, 0xaf, 0xb7, 0xbf, 0xc7, 0xcf, 0xd7, 0xdf,\n+    0x9a, 0x40, 0x97, 0x98, 0x8f, 0x1f, 0xff, 0xaf,\n+    0xfe, 0xff, 0xce, 0xff, 0x4e, 0x4f, 0x5a, 0x5b,\n+    0x07, 0x08, 0x0f, 0x10, 0x27, 0x2f, 0xee, 0xef,\n+    0x6e, 0x6f, 0x37, 0x3d, 0x3f, 0x42, 0x45, 0x90,\n+    0x91, 0xfe, 0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9,\n+    0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n-const NORMAL0: &'static [u16] = &[\n-    0x0, 0x20,\n-    0x7f, 0x22,\n-    0x380, 0x4,\n-    0x5c8, 0x8,\n-    0x5eb, 0x5,\n-    0x5f5, 0x11,\n-    0x7b2, 0xe,\n-    0x7fb, 0x5,\n-    0x85f, 0x41,\n-    0x8be, 0x16,\n-    0x9b3, 0x3,\n-    0x9cf, 0x8,\n-    0x9d8, 0x4,\n-    0x9fc, 0x5,\n-    0xa0b, 0x4,\n-    0xa43, 0x4,\n-    0xa4e, 0x3,\n-    0xa52, 0x7,\n-    0xa5f, 0x7,\n-    0xa76, 0xb,\n-    0xad1, 0xf,\n-    0xaf2, 0x7,\n-    0xafa, 0x7,\n-    0xb4e, 0x8,\n-    0xb58, 0x4,\n-    0xb78, 0xa,\n-    0xb8b, 0x3,\n-    0xb96, 0x3,\n-    0xba0, 0x3,\n-    0xba5, 0x3,\n-    0xbab, 0x3,\n-    0xbba, 0x4,\n-    0xbc3, 0x3,\n-    0xbd1, 0x6,\n-    0xbd8, 0xe,\n-    0xbfb, 0x5,\n-    0xc3a, 0x3,\n-    0xc4e, 0x7,\n-    0xc5b, 0x5,\n-    0xc70, 0x8,\n-    0xcce, 0x7,\n-    0xcd7, 0x7,\n-    0xcf3, 0xe,\n-    0xd50, 0x4,\n-    0xd97, 0x3,\n-    0xdc7, 0x3,\n-    0xdcb, 0x4,\n-    0xde0, 0x6,\n-    0xdf5, 0xc,\n-    0xe3b, 0x4,\n-    0xe5c, 0x25,\n-    0xe8e, 0x6,\n-    0xee0, 0x20,\n-    0xf6d, 0x4,\n-    0xfdb, 0x25,\n-    0x10c8, 0x5,\n-    0x137d, 0x3,\n-    0x139a, 0x6,\n-    0x169d, 0x3,\n-    0x16f9, 0x7,\n-    0x1715, 0xb,\n-    0x1737, 0x9,\n-    0x1754, 0xc,\n-    0x1774, 0xc,\n-    0x17ea, 0x6,\n-    0x17fa, 0x6,\n-    0x181a, 0x6,\n-    0x1878, 0x8,\n-    0x18ab, 0x5,\n-    0x18f6, 0xa,\n-    0x192c, 0x4,\n-    0x193c, 0x4,\n-    0x1941, 0x3,\n-    0x1975, 0xb,\n-    0x19ac, 0x4,\n-    0x19ca, 0x6,\n-    0x19db, 0x3,\n-    0x1a8a, 0x6,\n-    0x1a9a, 0x6,\n-    0x1abf, 0x41,\n-    0x1b4c, 0x4,\n-    0x1b7d, 0x3,\n-    0x1bf4, 0x8,\n-    0x1c38, 0x3,\n-    0x1c4a, 0x3,\n-    0x1c89, 0x37,\n-    0x1cc8, 0x8,\n-    0x1cfa, 0x6,\n-    0x1df6, 0x5,\n-    0x1fff, 0x11,\n-    0x2028, 0x8,\n-    0x205f, 0x11,\n-    0x209d, 0x3,\n-    0x20bf, 0x11,\n-    0x20f1, 0xf,\n-    0x218c, 0x4,\n-    0x2427, 0x19,\n-    0x244b, 0x15,\n-    0x2bba, 0x3,\n-    0x2bd2, 0x1a,\n-    0x2bf0, 0x10,\n-    0x2cf4, 0x5,\n-    0x2d28, 0x5,\n-    0x2d68, 0x7,\n-    0x2d71, 0xe,\n-    0x2d97, 0x9,\n-    0x2e45, 0x3b,\n-    0x2ef4, 0xc,\n-    0x2fd6, 0x1a,\n-    0x2ffc, 0x5,\n-    0x3100, 0x5,\n-    0x312e, 0x3,\n-    0x31bb, 0x5,\n-    0x31e4, 0xc,\n-    0x4db6, 0xa,\n-    0x9fd6, 0x2a,\n-    0xa48d, 0x3,\n-    0xa4c7, 0x9,\n-    0xa62c, 0x14,\n-    0xa6f8, 0x8,\n-    0xa7b8, 0x3f,\n-    0xa82c, 0x4,\n-    0xa83a, 0x6,\n-    0xa878, 0x8,\n-    0xa8c6, 0x8,\n-    0xa8da, 0x6,\n-    0xa954, 0xb,\n-    0xa97d, 0x3,\n-    0xa9da, 0x4,\n-    0xaa37, 0x9,\n-    0xaac3, 0x18,\n-    0xaaf7, 0xa,\n-    0xab17, 0x9,\n-    0xab66, 0xa,\n-    0xabfa, 0x6,\n-    0xd7a4, 0xc,\n-    0xd7c7, 0x4,\n-    0xd7fc, 0x2104,\n-    0xfada, 0x26,\n-    0xfb07, 0xc,\n-    0xfb18, 0x5,\n-    0xfbc2, 0x11,\n-    0xfd40, 0x10,\n-    0xfdc8, 0x28,\n-    0xfe1a, 0x6,\n-    0xfe6c, 0x4,\n-    0xfefd, 0x4,\n-    0xffbf, 0x3,\n-    0xffdd, 0x3,\n-    0xffef, 0xd,\n+const SINGLETONS1U: &'static [(u8, u8)] = &[\n+    (0x00, 6),\n+    (0x01, 1),\n+    (0x03, 1),\n+    (0x04, 2),\n+    (0x08, 8),\n+    (0x09, 2),\n+    (0x0a, 3),\n+    (0x0b, 2),\n+    (0x10, 1),\n+    (0x11, 4),\n+    (0x12, 5),\n+    (0x13, 18),\n+    (0x14, 2),\n+    (0x15, 2),\n+    (0x1c, 5),\n+    (0x24, 1),\n+    (0x6a, 3),\n+    (0x6b, 2),\n+    (0xbc, 2),\n+    (0xd1, 2),\n+    (0xd4, 12),\n+    (0xd5, 9),\n+    (0xd6, 2),\n+    (0xd7, 2),\n+    (0xda, 1),\n+    (0xe0, 5),\n+    (0xe8, 2),\n+    (0xee, 32),\n+    (0xf0, 4),\n+    (0xf1, 1),\n+    (0xf9, 4),\n ];\n-const NORMAL1: &'static [u16] = &[\n+const SINGLETONS1L: &'static [u8] = &[\n+    0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n+    0x9e, 0x9f, 0x06, 0x07, 0x09, 0x36, 0x3d, 0x3e,\n+    0x56, 0xf3, 0xd0, 0xd1, 0x04, 0x14, 0x18, 0x56,\n+    0x57, 0xbd, 0x35, 0xce, 0xcf, 0xe0, 0x12, 0x87,\n+    0x89, 0x8e, 0x9e, 0x04, 0x0d, 0x0e, 0x11, 0x12,\n+    0x29, 0x31, 0x34, 0x3a, 0x3b, 0x45, 0x46, 0x49,\n+    0x4a, 0x4e, 0x4f, 0x64, 0x65, 0x5a, 0x5c, 0xb6,\n+    0xb7, 0x09, 0x37, 0x90, 0x91, 0xa8, 0x6f, 0x5f,\n+    0xee, 0xef, 0x5a, 0x62, 0x9a, 0x9b, 0x27, 0x28,\n+    0x55, 0x9d, 0xa0, 0xa1, 0xa3, 0xa4, 0xa7, 0xa8,\n+    0xad, 0xba, 0xbc, 0xc4, 0x06, 0x0b, 0x0c, 0x15,\n+    0x1d, 0x3a, 0x3f, 0x45, 0x51, 0xa6, 0xa7, 0xcc,\n+    0xcd, 0xa0, 0x07, 0x19, 0x1a, 0x22, 0x25, 0xc5,\n+    0xc6, 0x04, 0x20, 0x23, 0x25, 0x26, 0x28, 0x33,\n+    0x38, 0x3a, 0x48, 0x4a, 0x4c, 0x50, 0x53, 0x55,\n+    0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x63, 0x65,\n+    0x66, 0x6b, 0x73, 0x78, 0x7d, 0x7f, 0x8a, 0xa4,\n+    0xaa, 0xaf, 0xb0, 0xc0, 0xd0, 0x2f, 0x1f, 0x31,\n+    0x32, 0x3f,\n+];\n+const NORMAL0: &'static [u8] = &[\n+    0x00, 0x20,\n+    0x5f, 0x22,\n+    0x82, 0xdf, 0x04,\n+    0x82, 0x44, 0x08,\n+    0x1b, 0x05,\n+    0x05, 0x11,\n+    0x81, 0xac, 0x0e,\n+    0x3b, 0x05,\n+    0x5f, 0x41,\n+    0x1e, 0x16,\n+    0x80, 0xdf, 0x03,\n+    0x19, 0x08,\n+    0x01, 0x04,\n+    0x20, 0x05,\n+    0x0a, 0x04,\n+    0x34, 0x04,\n+    0x07, 0x03,\n+    0x01, 0x07,\n+    0x06, 0x07,\n+    0x10, 0x0b,\n+    0x50, 0x0f,\n+    0x12, 0x07,\n+    0x01, 0x07,\n+    0x4d, 0x08,\n+    0x02, 0x04,\n+    0x1c, 0x0a,\n+    0x09, 0x03,\n+    0x08, 0x03,\n+    0x07, 0x03,\n+    0x02, 0x03,\n+    0x03, 0x03,\n+    0x0c, 0x04,\n+    0x05, 0x03,\n+    0x0b, 0x06,\n+    0x01, 0x0e,\n+    0x15, 0x05,\n+    0x3a, 0x03,\n+    0x11, 0x07,\n+    0x06, 0x05,\n+    0x10, 0x08,\n+    0x56, 0x07,\n+    0x02, 0x07,\n+    0x15, 0x0e,\n+    0x4f, 0x04,\n+    0x43, 0x03,\n+    0x2d, 0x03,\n+    0x01, 0x04,\n+    0x11, 0x06,\n+    0x0f, 0x0c,\n+    0x3a, 0x04,\n+    0x1d, 0x25,\n+    0x0d, 0x06,\n+    0x4c, 0x20,\n+    0x6d, 0x04,\n+    0x6a, 0x25,\n+    0x80, 0xc8, 0x05,\n+    0x82, 0xb0, 0x03,\n+    0x1a, 0x06,\n+    0x82, 0xfd, 0x03,\n+    0x59, 0x07,\n+    0x15, 0x0b,\n+    0x17, 0x09,\n+    0x14, 0x0c,\n+    0x14, 0x0c,\n+    0x6a, 0x06,\n+    0x0a, 0x06,\n+    0x1a, 0x06,\n+    0x58, 0x08,\n+    0x2b, 0x05,\n+    0x46, 0x0a,\n+    0x2c, 0x04,\n+    0x0c, 0x04,\n+    0x01, 0x03,\n+    0x31, 0x0b,\n+    0x2c, 0x04,\n+    0x1a, 0x06,\n+    0x0b, 0x03,\n+    0x80, 0xac, 0x06,\n+    0x0a, 0x06,\n+    0x1f, 0x41,\n+    0x4c, 0x04,\n+    0x2d, 0x03,\n+    0x74, 0x08,\n+    0x3c, 0x03,\n+    0x0f, 0x03,\n+    0x3c, 0x37,\n+    0x08, 0x08,\n+    0x2a, 0x06,\n+    0x80, 0xf6, 0x05,\n+    0x82, 0x04, 0x11,\n+    0x18, 0x08,\n+    0x2f, 0x11,\n+    0x2d, 0x03,\n+    0x1f, 0x11,\n+    0x21, 0x0f,\n+    0x80, 0x8c, 0x04,\n+    0x82, 0x97, 0x19,\n+    0x0b, 0x15,\n+    0x87, 0x5a, 0x03,\n+    0x15, 0x1a,\n+    0x04, 0x10,\n+    0x80, 0xf4, 0x05,\n+    0x2f, 0x05,\n+    0x3b, 0x07,\n+    0x02, 0x0e,\n+    0x18, 0x09,\n+    0x80, 0xa5, 0x3b,\n+    0x74, 0x0c,\n+    0x80, 0xd6, 0x1a,\n+    0x0c, 0x05,\n+    0x80, 0xff, 0x05,\n+    0x29, 0x03,\n+    0x80, 0x8a, 0x05,\n+    0x24, 0x0c,\n+    0x9b, 0xc6, 0x0a,\n+    0xd2, 0x16, 0x2a,\n+    0x84, 0x8d, 0x03,\n+    0x37, 0x09,\n+    0x81, 0x5c, 0x14,\n+    0x80, 0xb8, 0x08,\n+    0x80, 0xb8, 0x3f,\n+    0x35, 0x04,\n+    0x0a, 0x06,\n+    0x38, 0x08,\n+    0x46, 0x08,\n+    0x0c, 0x06,\n+    0x74, 0x0b,\n+    0x1e, 0x03,\n+    0x5a, 0x04,\n+    0x59, 0x09,\n+    0x80, 0x83, 0x18,\n+    0x1c, 0x0a,\n+    0x16, 0x09,\n+    0x46, 0x0a,\n+    0x80, 0x8a, 0x06,\n+    0xab, 0xa4, 0x0c,\n+    0x17, 0x04,\n+    0x31, 0xa1, 0x04,\n+    0x81, 0xda, 0x26,\n+    0x07, 0x0c,\n+    0x05, 0x05,\n+    0x80, 0xa5, 0x11,\n+    0x81, 0x6d, 0x10,\n+    0x78, 0x28,\n+    0x2a, 0x06,\n+    0x4c, 0x04,\n+    0x80, 0x8d, 0x04,\n+    0x80, 0xbe, 0x03,\n+    0x1b, 0x03,\n+    0x0f, 0x0d,\n+];\n+const NORMAL1: &'static [u8] = &[\n+    0x5e, 0x22,\n+    0x7b, 0x05,\n+    0x03, 0x04,\n+    0x2d, 0x03,\n+    0x65, 0x04,\n+    0x01, 0x2f,\n+    0x2e, 0x80, 0x82,\n+    0x1d, 0x03,\n+    0x31, 0x0f,\n+    0x1c, 0x04,\n+    0x24, 0x0c,\n+    0x1b, 0x05,\n+    0x2b, 0x05,\n+    0x44, 0x04,\n+    0x0e, 0x2a,\n+    0x80, 0xaa, 0x06,\n+    0x24, 0x04,\n+    0x24, 0x04,\n+    0x28, 0x08,\n+    0x34, 0x0b,\n+    0x01, 0x80, 0x90,\n+    0x81, 0x37, 0x09,\n+    0x16, 0x0a,\n+    0x08, 0x80, 0x98,\n+    0x39, 0x03,\n+    0x63, 0x08,\n+    0x09, 0x30,\n+    0x16, 0x05,\n+    0x21, 0x03,\n+    0x1b, 0x05,\n+    0x01, 0x40,\n+    0x38, 0x04,\n+    0x4b, 0x05,\n+    0x28, 0x04,\n+    0x03, 0x04,\n+    0x09, 0x08,\n+    0x09, 0x07,\n+    0x40, 0x20,\n+    0x27, 0x04,\n+    0x0c, 0x09,\n+    0x36, 0x03,\n+    0x3a, 0x05,\n+    0x1a, 0x07,\n+    0x04, 0x0c,\n+    0x07, 0x50,\n+    0x49, 0x37,\n+    0x33, 0x0d,\n+    0x33, 0x07,\n+    0x06, 0x81, 0x60,\n+    0x1f, 0x81, 0x81,\n+    0x4e, 0x04,\n+    0x1e, 0x0f,\n+    0x43, 0x0e,\n+    0x19, 0x07,\n+    0x0a, 0x06,\n+    0x44, 0x0c,\n+    0x27, 0x09,\n+    0x75, 0x0b,\n+    0x3f, 0x41,\n+    0x2a, 0x06,\n+    0x3b, 0x05,\n+    0x0a, 0x06,\n+    0x51, 0x06,\n+    0x01, 0x05,\n+    0x10, 0x03,\n+    0x05, 0x80, 0x8b,\n+    0x5e, 0x22,\n+    0x48, 0x08,\n+    0x0a, 0x80, 0xa6,\n     0x5e, 0x22,\n-    0xfb, 0x5,\n-    0x103, 0x4,\n-    0x134, 0x3,\n-    0x19c, 0x4,\n-    0x1a1, 0x2f,\n-    0x1fe, 0x82,\n-    0x29d, 0x3,\n-    0x2d1, 0xf,\n-    0x2fc, 0x4,\n-    0x324, 0xc,\n-    0x34b, 0x5,\n-    0x37b, 0x5,\n-    0x3c4, 0x4,\n-    0x3d6, 0x2a,\n-    0x4aa, 0x6,\n-    0x4d4, 0x4,\n-    0x4fc, 0x4,\n-    0x528, 0x8,\n-    0x564, 0xb,\n-    0x570, 0x90,\n-    0x737, 0x9,\n-    0x756, 0xa,\n-    0x768, 0x98,\n-    0x839, 0x3,\n-    0x89f, 0x8,\n-    0x8b0, 0x30,\n-    0x8f6, 0x5,\n-    0x91c, 0x3,\n-    0x93a, 0x5,\n-    0x940, 0x40,\n-    0x9b8, 0x4,\n-    0xa07, 0x5,\n-    0xa34, 0x4,\n-    0xa3b, 0x4,\n-    0xa48, 0x8,\n-    0xa59, 0x7,\n-    0xaa0, 0x20,\n-    0xae7, 0x4,\n-    0xaf7, 0x9,\n-    0xb36, 0x3,\n-    0xb73, 0x5,\n-    0xb92, 0x7,\n-    0xb9d, 0xc,\n-    0xbb0, 0x50,\n-    0xc49, 0x37,\n-    0xcb3, 0xd,\n-    0xcf3, 0x7,\n-    0xd00, 0x160,\n-    0xe7f, 0x181,\n-    0x104e, 0x4,\n-    0x1070, 0xf,\n-    0x10c2, 0xe,\n-    0x10e9, 0x7,\n-    0x10fa, 0x6,\n-    0x1144, 0xc,\n-    0x1177, 0x9,\n-    0x11f5, 0xb,\n-    0x123f, 0x41,\n-    0x12aa, 0x6,\n-    0x12eb, 0x5,\n-    0x12fa, 0x6,\n-    0x1351, 0x6,\n-    0x1358, 0x5,\n-    0x136d, 0x3,\n-    0x1375, 0x8b,\n-    0x145e, 0x22,\n-    0x14c8, 0x8,\n-    0x14da, 0xa6,\n-    0x15de, 0x22,\n-    0x1645, 0xb,\n-    0x165a, 0x6,\n-    0x166d, 0x13,\n-    0x16b8, 0x8,\n-    0x16ca, 0x36,\n-    0x171a, 0x3,\n-    0x172c, 0x4,\n-    0x1740, 0x160,\n-    0x18f3, 0xc,\n-    0x1900, 0x1c0,\n-    0x1af9, 0x107,\n-    0x1c46, 0xa,\n-    0x1c6d, 0x3,\n-    0x1cb7, 0x349,\n-    0x239a, 0x66,\n-    0x2475, 0xb,\n-    0x2544, 0xabc,\n-    0x342f, 0xfd1,\n-    0x4647, 0x21b9,\n-    0x6a39, 0x7,\n-    0x6a6a, 0x4,\n-    0x6a70, 0x60,\n-    0x6af6, 0xa,\n-    0x6b46, 0xa,\n-    0x6b78, 0x5,\n-    0x6b90, 0x370,\n-    0x6f45, 0xb,\n-    0x6f7f, 0x10,\n-    0x6fa0, 0x40,\n-    0x6fe1, 0x1f,\n-    0x87ed, 0x13,\n-    0x8af3, 0x250d,\n-    0xb002, 0xbfe,\n-    0xbc6b, 0x5,\n-    0xbc7d, 0x3,\n-    0xbc89, 0x7,\n-    0xbca0, 0x1360,\n-    0xd0f6, 0xa,\n-    0xd173, 0x8,\n-    0xd1e9, 0x17,\n-    0xd246, 0xba,\n-    0xd357, 0x9,\n-    0xd372, 0x8e,\n-    0xd547, 0x3,\n-    0xda8c, 0xf,\n-    0xdab0, 0x550,\n-    0xe02b, 0x7d5,\n-    0xe8d7, 0x29,\n-    0xe94b, 0x5,\n-    0xe95a, 0x4,\n-    0xe960, 0x4a0,\n-    0xee3c, 0x6,\n-    0xee43, 0x4,\n-    0xee9c, 0x5,\n-    0xeebc, 0x34,\n-    0xeef2, 0x10e,\n-    0xf02c, 0x4,\n-    0xf094, 0xc,\n-    0xf0f6, 0xa,\n-    0xf10d, 0x3,\n-    0xf16c, 0x4,\n-    0xf1ad, 0x39,\n-    0xf203, 0xd,\n-    0xf23c, 0x4,\n-    0xf249, 0x7,\n-    0xf252, 0xae,\n-    0xf6d3, 0xd,\n-    0xf6ed, 0x3,\n-    0xf6f7, 0x9,\n-    0xf774, 0xc,\n-    0xf7d5, 0x2b,\n-    0xf80c, 0x4,\n-    0xf848, 0x8,\n-    0xf85a, 0x6,\n-    0xf888, 0x8,\n-    0xf8ae, 0x62,\n-    0xf928, 0x8,\n-    0xf94c, 0x4,\n-    0xf95f, 0x21,\n-    0xf992, 0x2e,\n-    0xf9c1, 0x63f,\n+    0x45, 0x0b,\n+    0x0a, 0x06,\n+    0x0d, 0x13,\n+    0x38, 0x08,\n+    0x0a, 0x36,\n+    0x1a, 0x03,\n+    0x0f, 0x04,\n+    0x10, 0x81, 0x60,\n+    0x53, 0x0c,\n+    0x01, 0x81, 0xc0,\n+    0x39, 0x81, 0x07,\n+    0x46, 0x0a,\n+    0x1d, 0x03,\n+    0x47, 0x83, 0x49,\n+    0x83, 0x9a, 0x66,\n+    0x75, 0x0b,\n+    0x80, 0xc4, 0x8a, 0xbc,\n+    0x84, 0x2f, 0x8f, 0xd1,\n+    0x82, 0x47, 0xa1, 0xb9,\n+    0x82, 0x39, 0x07,\n+    0x2a, 0x04,\n+    0x02, 0x60,\n+    0x26, 0x0a,\n+    0x46, 0x0a,\n+    0x28, 0x05,\n+    0x13, 0x83, 0x70,\n+    0x45, 0x0b,\n+    0x2f, 0x10,\n+    0x11, 0x40,\n+    0x01, 0x1f,\n+    0x97, 0xed, 0x13,\n+    0x82, 0xf3, 0xa5, 0x0d,\n+    0x02, 0x8b, 0xfe,\n+    0x6b, 0x05,\n+    0x0d, 0x03,\n+    0x09, 0x07,\n+    0x10, 0x93, 0x60,\n+    0x80, 0xf6, 0x0a,\n+    0x73, 0x08,\n+    0x6e, 0x17,\n+    0x46, 0x80, 0xba,\n+    0x57, 0x09,\n+    0x12, 0x80, 0x8e,\n+    0x81, 0x47, 0x03,\n+    0x85, 0x42, 0x0f,\n+    0x15, 0x85, 0x50,\n+    0x2b, 0x87, 0xd5,\n+    0x80, 0xd7, 0x29,\n+    0x4b, 0x05,\n+    0x0a, 0x04,\n+    0x02, 0x84, 0xa0,\n+    0x3c, 0x06,\n+    0x01, 0x04,\n+    0x55, 0x05,\n+    0x1b, 0x34,\n+    0x02, 0x81, 0x0e,\n+    0x2c, 0x04,\n+    0x64, 0x0c,\n+    0x56, 0x0a,\n+    0x0d, 0x03,\n+    0x5c, 0x04,\n+    0x3d, 0x39,\n+    0x1d, 0x0d,\n+    0x2c, 0x04,\n+    0x09, 0x07,\n+    0x02, 0x80, 0xae,\n+    0x83, 0xd3, 0x0d,\n+    0x0d, 0x03,\n+    0x07, 0x09,\n+    0x74, 0x0c,\n+    0x55, 0x2b,\n+    0x0c, 0x04,\n+    0x38, 0x08,\n+    0x0a, 0x06,\n+    0x28, 0x08,\n+    0x1e, 0x62,\n+    0x18, 0x08,\n+    0x1c, 0x04,\n+    0x0f, 0x21,\n+    0x12, 0x2e,\n+    0x01, 0x86, 0x3f,\n ];"}]}