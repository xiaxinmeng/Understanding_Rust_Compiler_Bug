{"sha": "645de5b825987473f02b6ac62cfe915602be4c28", "node_id": "C_kwDOAAsO6NoAKDY0NWRlNWI4MjU5ODc0NzNmMDJiNmFjNjJjZmU5MTU2MDJiZTRjMjg", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-08-22T13:58:26Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2022-08-22T18:09:18Z"}, "message": "Remove use of DiagnosticArgFromDisplay", "tree": {"sha": "e736a65eadfb10a37dc0502ce19ee6968d104cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e736a65eadfb10a37dc0502ce19ee6968d104cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645de5b825987473f02b6ac62cfe915602be4c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645de5b825987473f02b6ac62cfe915602be4c28", "html_url": "https://github.com/rust-lang/rust/commit/645de5b825987473f02b6ac62cfe915602be4c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645de5b825987473f02b6ac62cfe915602be4c28/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d80ee705f8a7acb65b5ecb05ae0e6deaa97bb53", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d80ee705f8a7acb65b5ecb05ae0e6deaa97bb53", "html_url": "https://github.com/rust-lang/rust/commit/0d80ee705f8a7acb65b5ecb05ae0e6deaa97bb53"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "6a497aed4aba75900410fe8b166cd56b92293a21", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=645de5b825987473f02b6ac62cfe915602be4c28", "patch": "@@ -1,7 +1,9 @@\n-use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n \n+use std::io;\n+use std::path::Path;\n+\n #[derive(SessionDiagnostic)]\n #[diag(interface::ferris_identifier)]\n pub struct FerrisIdentifier {\n@@ -34,21 +36,21 @@ pub struct ProcMacroDocWithoutArg;\n #[derive(SessionDiagnostic)]\n #[diag(interface::error_writing_dependencies)]\n pub struct ErrorWritingDependencies<'a> {\n-    pub path: DiagnosticArgFromDisplay<'a>,\n-    pub error: DiagnosticArgFromDisplay<'a>,\n+    pub path: &'a Path,\n+    pub error: io::Error,\n }\n \n #[derive(SessionDiagnostic)]\n #[diag(interface::input_file_would_be_overwritten)]\n pub struct InputFileWouldBeOverWritten<'a> {\n-    pub path: DiagnosticArgFromDisplay<'a>,\n+    pub path: &'a Path,\n }\n \n #[derive(SessionDiagnostic)]\n #[diag(interface::generated_file_conflicts_with_directory)]\n pub struct GeneratedFileConflictsWithDirectory<'a> {\n-    pub input_path: DiagnosticArgFromDisplay<'a>,\n-    pub dir_path: DiagnosticArgFromDisplay<'a>,\n+    pub input_path: &'a Path,\n+    pub dir_path: &'a Path,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -61,8 +63,8 @@ pub struct OutDirError;\n \n #[derive(SessionDiagnostic)]\n #[diag(interface::cant_emit_mir)]\n-pub struct CantEmitMIR<'a> {\n-    pub error: DiagnosticArgFromDisplay<'a>,\n+pub struct CantEmitMIR {\n+    pub error: io::Error,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -82,6 +84,6 @@ pub struct RustcErrorUnexpectedAnnotation {\n #[derive(SessionDiagnostic)]\n #[diag(interface::failed_writing_file)]\n pub struct FailedWritingFile<'a> {\n-    pub path: DiagnosticArgFromDisplay<'a>,\n-    pub error: DiagnosticArgFromDisplay<'a>,\n+    pub path: &'a Path,\n+    pub error: io::Error,\n }"}, {"sha": "269d4c3795a62a425ba0d9563ea7c2235ff523f6", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=645de5b825987473f02b6ac62cfe915602be4c28", "patch": "@@ -647,11 +647,8 @@ fn write_out_deps(\n                     .emit_artifact_notification(&deps_filename, \"dep-info\");\n             }\n         }\n-        Err(e) => {\n-            sess.emit_fatal(ErrorWritingDependencies {\n-                path: (&deps_filename.display()).into(),\n-                error: (&e).into(),\n-            });\n+        Err(error) => {\n+            sess.emit_fatal(ErrorWritingDependencies { path: &deps_filename, error });\n         }\n     }\n }\n@@ -682,15 +679,12 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = compiler.input_path {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                let reported = sess\n-                    .emit_err(InputFileWouldBeOverWritten { path: (&input_path.display()).into() });\n+                let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n                 return Err(reported);\n             }\n-            if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n-                let reported = sess.emit_err(GeneratedFileConflictsWithDirectory {\n-                    input_path: (&input_path.display()).into(),\n-                    dir_path: (&dir_path.display()).into(),\n-                });\n+            if let Some(ref dir_path) = output_conflicts_with_dir(&output_paths) {\n+                let reported =\n+                    sess.emit_err(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n                 return Err(reported);\n             }\n         }\n@@ -994,8 +988,8 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(e) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n-            tcx.sess.emit_err(CantEmitMIR { error: (&e).into() });\n+        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n+            tcx.sess.emit_err(CantEmitMIR { error });\n             tcx.sess.abort_if_errors();\n         }\n     }"}, {"sha": "65fa8d7495a4bf16cc76277a97bf5593e3e29fd9", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645de5b825987473f02b6ac62cfe915602be4c28/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=645de5b825987473f02b6ac62cfe915602be4c28", "patch": "@@ -357,12 +357,8 @@ impl Linker {\n         if sess.opts.unstable_opts.no_link {\n             let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoded).map_err(|err| {\n-                sess.emit_fatal(FailedWritingFile {\n-                    path: (&rlink_file.display()).into(),\n-                    error: (&err).into(),\n-                })\n-            })?;\n+            std::fs::write(&rlink_file, encoded)\n+                .map_err(|error| sess.emit_fatal(FailedWritingFile { path: &rlink_file, error }))?;\n             return Ok(());\n         }\n "}]}