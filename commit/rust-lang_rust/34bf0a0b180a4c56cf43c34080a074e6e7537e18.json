{"sha": "34bf0a0b180a4c56cf43c34080a074e6e7537e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmYwYTBiMTgwYTRjNTZjZjQzYzM0MDgwYTA3NGU2ZTc1MzdlMTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T23:41:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T23:41:31Z"}, "message": "More premature layout micro optimizations", "tree": {"sha": "af9b8ad059be1d1b41f1f9ac121b01b928a7af78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9b8ad059be1d1b41f1f9ac121b01b928a7af78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bf0a0b180a4c56cf43c34080a074e6e7537e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bf0a0b180a4c56cf43c34080a074e6e7537e18", "html_url": "https://github.com/rust-lang/rust/commit/34bf0a0b180a4c56cf43c34080a074e6e7537e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bf0a0b180a4c56cf43c34080a074e6e7537e18/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4", "html_url": "https://github.com/rust-lang/rust/commit/08475a690ccc26ab5fd5e809a8cd3a19fcf5aff4"}], "stats": {"total": 49, "additions": 12, "deletions": 37}, "files": [{"sha": "787968363b6ac87b572c4608dbe5bd006f360185", "filename": "src/yellow/green.rs", "status": "modified", "additions": 12, "deletions": 37, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/34bf0a0b180a4c56cf43c34080a074e6e7537e18/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bf0a0b180a4c56cf43c34080a074e6e7537e18/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=34bf0a0b180a4c56cf43c34080a074e6e7537e18", "patch": "@@ -6,13 +6,16 @@ use {\n \n #[derive(Clone, Debug)]\n pub(crate) enum GreenNode {\n-    Leaf(GreenLeaf),\n+    Leaf {\n+        kind: SyntaxKind,\n+        text: SmolStr,\n+    },\n     Branch(Arc<GreenBranch>),\n }\n \n impl GreenNode {\n     pub(crate) fn new_leaf(kind: SyntaxKind, text: &str) -> GreenNode {\n-        GreenNode::Leaf(GreenLeaf::new(kind, text))\n+        GreenNode::Leaf { kind, text: SmolStr::new(text) }\n     }\n \n     pub(crate) fn new_branch(kind: SyntaxKind, children: Box<[GreenNode]>) -> GreenNode {\n@@ -21,21 +24,21 @@ impl GreenNode {\n \n     pub fn kind(&self) -> SyntaxKind {\n         match self {\n-            GreenNode::Leaf(l) => l.kind(),\n+            GreenNode::Leaf { kind, .. } => *kind,\n             GreenNode::Branch(b) => b.kind(),\n         }\n     }\n \n     pub fn text_len(&self) -> TextUnit {\n         match self {\n-            GreenNode::Leaf(l) => l.text_len(),\n+            GreenNode::Leaf { text, ..} => TextUnit::of_str(text.as_str()),\n             GreenNode::Branch(b) => b.text_len(),\n         }\n     }\n \n     pub fn children(&self) -> &[GreenNode] {\n         match self {\n-            GreenNode::Leaf(_) => &[],\n+            GreenNode::Leaf { .. } => &[],\n             GreenNode::Branch(b) => b.children(),\n         }\n     }\n@@ -46,7 +49,7 @@ impl GreenNode {\n         return buff;\n         fn go(node: &GreenNode, buff: &mut String) {\n             match node {\n-                GreenNode::Leaf(l) => buff.push_str(&l.text()),\n+                GreenNode::Leaf { text, .. } => buff.push_str(text.as_str()),\n                 GreenNode::Branch(b) => b.children().iter().for_each(|child| go(child, buff)),\n             }\n         }\n@@ -89,38 +92,10 @@ impl GreenBranch {\n     }\n }\n \n-#[derive(Clone, Debug)]\n-pub(crate) struct GreenLeaf {\n-    kind: SyntaxKind,\n-    text: SmolStr,\n-}\n-\n-impl GreenLeaf {\n-    fn new(kind: SyntaxKind, text: &str) -> Self {\n-        let text = SmolStr::new(text);\n-        GreenLeaf { kind, text }\n-    }\n-\n-    pub(crate) fn kind(&self) -> SyntaxKind {\n-        self.kind\n-    }\n-\n-    pub(crate) fn text(&self) -> &str {\n-        self.text.as_str()\n-    }\n-\n-    pub(crate) fn text_len(&self) -> TextUnit {\n-        TextUnit::of_str(self.text())\n-    }\n-}\n-\n-\n #[test]\n fn test_sizes() {\n     use std::mem::size_of;\n-\n-    println!(\"GreenNode = {}\", size_of::<GreenNode>());\n-    println!(\"GreenLeaf = {}\", size_of::<GreenLeaf>());\n-    println!(\"SyntaxKind = {}\", size_of::<SyntaxKind>());\n-    println!(\"SmolStr = {}\", size_of::<SmolStr>());\n+    println!(\"GreenBranch = {}\", size_of::<GreenBranch>());\n+    println!(\"GreenNode   = {}\", size_of::<GreenNode>());\n+    println!(\"SmolStr     = {}\", size_of::<SmolStr>());\n }"}]}