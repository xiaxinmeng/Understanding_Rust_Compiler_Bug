{"sha": "bc82f8329829d7efbade879839b5846bfc877a4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODJmODMyOTgyOWQ3ZWZiYWRlODc5ODM5YjU4NDZiZmM4NzdhNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T19:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-04T19:50:41Z"}, "message": "Auto merge of #884 - Aaron1011:fix/linux-getrandom, r=RalfJung\n\nAllowing passing a null pointer to getrandom() when length is 0\n\nThe Linux kernel will handle a null pointer passed to 'getrandom'\nwithout error, as long as the length is also 0. The `getrandom` crate\nrelies on this behavior: https://github.com/rust-random/getrandom/blob/ab44edf3c7af721a00e22648b6c811ccb559ba81/src/linux_android.rs#L26\n\nSince it works fine on the actual kernel (and should continue to, due to\nthe kernel's backwards-compatibility guarantees), Miri should support it\nas well.", "tree": {"sha": "cc5bc7ff421f16b3499a43a5847d5c52eb401ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5bc7ff421f16b3499a43a5847d5c52eb401ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc82f8329829d7efbade879839b5846bfc877a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc82f8329829d7efbade879839b5846bfc877a4f", "html_url": "https://github.com/rust-lang/rust/commit/bc82f8329829d7efbade879839b5846bfc877a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc82f8329829d7efbade879839b5846bfc877a4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8053288bd07d3110c7f7b62e6b2bf6e181d5c8ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8053288bd07d3110c7f7b62e6b2bf6e181d5c8ae", "html_url": "https://github.com/rust-lang/rust/commit/8053288bd07d3110c7f7b62e6b2bf6e181d5c8ae"}, {"sha": "4d3398fc6262a0159af7311524ade980637121ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3398fc6262a0159af7311524ade980637121ae", "html_url": "https://github.com/rust-lang/rust/commit/4d3398fc6262a0159af7311524ade980637121ae"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "c0e1ec2cd75bceaf202b57f8d9672d2fb19a8678", "filename": "src/helpers.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc82f8329829d7efbade879839b5846bfc877a4f/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc82f8329829d7efbade879839b5846bfc877a4f/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=bc82f8329829d7efbade879839b5846bfc877a4f", "patch": "@@ -81,12 +81,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ptr: Scalar<Tag>,\n         len: usize,\n     ) -> InterpResult<'tcx>  {\n+        // Some programs pass in a null pointer and a length of 0\n+        // to their platform's random-generation function (e.g. getrandom())\n+        // on Linux. For compatibility with these programs, we don't perform\n+        // any additional checks - it's okay if the pointer is invalid,\n+        // since we wouldn't actually be writing to it.\n+        if len == 0 {\n+            return Ok(());\n+        }\n         let this = self.eval_context_mut();\n \n-        let ptr = match this.memory().check_ptr_access(ptr, Size::from_bytes(len as u64), Align::from_bytes(1).unwrap())? {\n-            Some(ptr) => ptr,\n-            None => return Ok(()), // zero-sized access\n-        };\n+        let ptr = this.memory().check_ptr_access(\n+            ptr,\n+            Size::from_bytes(len as u64),\n+            Align::from_bytes(1).unwrap()\n+        )?.expect(\"we already checked for size 0\");\n \n         let rng = this.memory_mut().extra.rng.get_mut();\n         let mut data = vec![0; len];"}]}