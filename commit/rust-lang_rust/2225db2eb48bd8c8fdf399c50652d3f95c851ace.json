{"sha": "2225db2eb48bd8c8fdf399c50652d3f95c851ace", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjVkYjJlYjQ4YmQ4YzhmZGYzOTljNTA2NTJkM2Y5NWM4NTFhY2U=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T11:56:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T11:56:55Z"}, "message": "Refine `self`, `super` and `crate` completion in use paths", "tree": {"sha": "31a419449dff7bb0112ae328de2e4fdec755326d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a419449dff7bb0112ae328de2e4fdec755326d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2225db2eb48bd8c8fdf399c50652d3f95c851ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2225db2eb48bd8c8fdf399c50652d3f95c851ace", "html_url": "https://github.com/rust-lang/rust/commit/2225db2eb48bd8c8fdf399c50652d3f95c851ace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2225db2eb48bd8c8fdf399c50652d3f95c851ace/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14f5cfff04942f45a4af3b45152df9672b3458a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14f5cfff04942f45a4af3b45152df9672b3458a", "html_url": "https://github.com/rust-lang/rust/commit/e14f5cfff04942f45a4af3b45152df9672b3458a"}], "stats": {"total": 101, "additions": 47, "deletions": 54}, "files": [{"sha": "814c1565362ec8ee742b2ae8d860f74ac33cbbfb", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -109,7 +109,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if ctx.use_item_syntax.is_some()\n+    if ctx.in_use_tree()\n         || ctx.is_path_disallowed()\n         || ctx.expects_item()\n         || ctx.expects_assoc_item()"}, {"sha": "9754122a0e4499ab54df6d7bc34198c358ecb05d", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -18,17 +18,24 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n         item\n     };\n \n-    if ctx.use_item_syntax.is_some() {\n-        let qual = ctx.path_qual();\n-        if qual.is_none() {\n-            kw_completion(\"crate::\").add_to(acc);\n-        }\n-        kw_completion(\"self\").add_to(acc);\n-        if iter::successors(qual.cloned(), |p| p.qualifier())\n-            .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n-        {\n-            kw_completion(\"super::\").add_to(acc);\n-        }\n+    if ctx.in_use_tree() {\n+        match &ctx.path_context {\n+            Some(PathCompletionContext { qualifier: Some(qual), use_tree_parent, .. }) => {\n+                if iter::successors(Some(qual.clone()), |p| p.qualifier())\n+                    .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n+                {\n+                    kw_completion(\"super::\").add_to(acc);\n+                }\n+                if *use_tree_parent {\n+                    kw_completion(\"self\").add_to(acc);\n+                }\n+            }\n+            _ => {\n+                kw_completion(\"crate::\").add_to(acc);\n+                kw_completion(\"self::\").add_to(acc);\n+                kw_completion(\"super::\").add_to(acc);\n+            }\n+        };\n     }\n \n     // Suggest .await syntax for types that implement Future trait"}, {"sha": "0597879ac61341a89b92275fdfdcff5f1c887558", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         hir::PathResolution::Def(hir::ModuleDef::Module(module)) => {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n-                if ctx.use_item_syntax.is_some() {\n+                if ctx.in_use_tree() {\n                     if let hir::ScopeDef::Unknown = def {\n                         if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n                             if name_ref.syntax().text() == name.to_string().as_str() {"}, {"sha": "4bafc1bf8e19019920bbd537dd24b1fa7ce540ff", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n-    if ctx.expects_use_tree() {\n+    if ctx.expects_new_use_tree() {\n         // only show modules in a fresh UseTree\n         cov_mark::hit!(only_completes_modules_in_import);\n         ctx.scope.process_all_names(&mut |name, res| {"}, {"sha": "c3076f608d6123a69e100a9d85302b71a20dae47", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -43,6 +43,8 @@ pub(crate) struct PathCompletionContext {\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n     pub(super) qualifier: Option<ast::Path>,\n+    /// Whether the qualifier comes from a use tree parent or not\n+    pub(super) use_tree_parent: bool,\n     pub(super) kind: Option<PathKind>,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n@@ -79,7 +81,6 @@ pub(crate) struct CompletionContext<'a> {\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n-    pub(super) use_item_syntax: Option<ast::Use>,\n \n     // potentially set if we are completing a lifetime\n     pub(super) lifetime_syntax: Option<ast::Lifetime>,\n@@ -151,7 +152,6 @@ impl<'a> CompletionContext<'a> {\n             function_def: None,\n             impl_def: None,\n             name_ref_syntax: None,\n-            use_item_syntax: None,\n             lifetime_syntax: None,\n             lifetime_param_syntax: None,\n             lifetime_allowed: false,\n@@ -264,7 +264,7 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn expects_use_tree(&self) -> bool {\n+    pub(crate) fn expects_new_use_tree(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::Use))\n     }\n \n@@ -295,6 +295,13 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::RecordField))\n     }\n \n+    pub(crate) fn in_use_tree(&self) -> bool {\n+        matches!(\n+            self.completion_location,\n+            Some(ImmediateLocation::Use) | Some(ImmediateLocation::UseTree)\n+        )\n+    }\n+\n     pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n         matches!(\n             self.prev_sibling,\n@@ -578,9 +585,6 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n-        self.use_item_syntax =\n-            self.sema.token_ancestors_with_macros(self.token.clone()).find_map(ast::Use::cast);\n-\n         self.function_def = self\n             .sema\n             .token_ancestors_with_macros(self.token.clone())\n@@ -600,6 +604,7 @@ impl<'a> CompletionContext<'a> {\n                 has_type_args: false,\n                 can_be_stmt: false,\n                 in_loop_body: false,\n+                use_tree_parent: false,\n                 kind: None,\n             });\n             path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n@@ -627,7 +632,8 @@ impl<'a> CompletionContext<'a> {\n             }\n             path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n-            if let Some(path) = path_or_use_tree_qualifier(&path) {\n+            if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {\n+                path_ctx.use_tree_parent = use_tree_parent;\n                 path_ctx.qualifier = path\n                     .segment()\n                     .and_then(|it| {\n@@ -681,13 +687,13 @@ fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n     }\n }\n \n-fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<ast::Path> {\n+fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<(ast::Path, bool)> {\n     if let Some(qual) = path.qualifier() {\n-        return Some(qual);\n+        return Some((qual, false));\n     }\n     let use_tree_list = path.syntax().ancestors().find_map(ast::UseTreeList::cast)?;\n     let use_tree = use_tree_list.syntax().parent().and_then(ast::UseTree::cast)?;\n-    use_tree.path()\n+    use_tree.path().zip(Some(true))\n }\n \n #[cfg(test)]"}, {"sha": "271409c38adbc199b96f61935d8ec9a2247d4352", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -27,6 +27,7 @@ pub(crate) enum ImmediatePrevSibling {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n     Use,\n+    UseTree,\n     Impl,\n     Trait,\n     RecordField,\n@@ -180,6 +181,8 @@ pub(crate) fn determine_location(\n         match parent {\n             ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n             ast::Use(_it) => ImmediateLocation::Use,\n+            ast::UseTree(_it) => ImmediateLocation::UseTree,\n+            ast::UseTreeList(_it) => ImmediateLocation::UseTree,\n             ast::BlockExpr(_it) => ImmediateLocation::BlockExpr,\n             ast::SourceFile(_it) => ImmediateLocation::ItemList,\n             ast::ItemList(_it) => ImmediateLocation::ItemList,\n@@ -373,8 +376,8 @@ mod tests {\n     fn test_use_loc() {\n         check_location(r\"use f$0\", ImmediateLocation::Use);\n         check_location(r\"use f$0;\", ImmediateLocation::Use);\n-        check_location(r\"use f::{f$0}\", None);\n-        check_location(r\"use {f$0}\", None);\n+        check_location(r\"use f::{f$0}\", ImmediateLocation::UseTree);\n+        check_location(r\"use {f$0}\", ImmediateLocation::UseTree);\n     }\n \n     #[test]"}, {"sha": "749dfc665a023465e1f51aa9708a76bdc1ac1a93", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -28,7 +28,7 @@ impl Builder {\n         if !ctx.config.add_call_parenthesis {\n             return false;\n         }\n-        if ctx.use_item_syntax.is_some() {\n+        if ctx.in_use_tree() {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "4d5179c4f95fefd57a9f1de87cf40f772dcbded4", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -69,7 +69,7 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn needs_bang(&self) -> bool {\n-        self.ctx.completion.use_item_syntax.is_none()\n+        !self.ctx.completion.in_use_tree()\n             && !matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac))\n     }\n "}, {"sha": "878bc42bf5286917d0c9dfe07dbea419649e4659", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2225db2eb48bd8c8fdf399c50652d3f95c851ace/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=2225db2eb48bd8c8fdf399c50652d3f95c851ace", "patch": "@@ -20,10 +20,9 @@ mod foo {}\n //- /other_crate/lib.rs crate:other_crate\n // nothing here\n \"#,\n-        // FIXME: self in this case should also get the colons\n         expect![[r#\"\n             kw crate::\n-            kw self\n+            kw self::\n             kw super::\n             md foo\n             md other_crate\n@@ -34,13 +33,7 @@ mod foo {}\n #[test]\n fn dont_complete_current_use() {\n     cov_mark::check!(dont_complete_current_use);\n-    // FIXME: self shouldn't be here\n-    check(\n-        r#\"use self::foo$0;\"#,\n-        expect![[r#\"\n-        kw self\n-    \"#]],\n-    );\n+    check(r#\"use self::foo$0;\"#, expect![[r#\"\"#]]);\n     check(\n         r#\"\n mod foo { pub struct S; }\n@@ -56,7 +49,6 @@ use self::{foo::*, bar$0};\n \n #[test]\n fn nested_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n mod foo {\n@@ -67,7 +59,6 @@ mod foo {\n use foo::{bar::$0}\n \"#,\n         expect![[r#\"\n-            kw self\n             st FooBar\n         \"#]],\n     );\n@@ -89,7 +80,6 @@ use foo::{$0}\n \n #[test]\n fn deeply_nested_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n mod foo {\n@@ -102,7 +92,6 @@ mod foo {\n use foo::{bar::{baz::$0}}\n \"#,\n         expect![[r#\"\n-            kw self\n             st FooBarBaz\n         \"#]],\n     );\n@@ -126,7 +115,6 @@ use foo::{bar::{$0}}\n \n #[test]\n fn plain_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n use foo::$0\n@@ -138,15 +126,13 @@ mod foo {\n struct Bar;\n \"#,\n         expect![[r#\"\n-            kw self\n             st Foo\n         \"#]],\n     );\n }\n \n #[test]\n fn self_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n use self::$0\n@@ -155,7 +141,6 @@ mod foo {}\n struct Bar;\n \"#,\n         expect![[r#\"\n-            kw self\n             md foo\n             st Bar\n         \"#]],\n@@ -164,7 +149,6 @@ struct Bar;\n \n #[test]\n fn super_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n mod bar {\n@@ -175,7 +159,6 @@ mod foo {}\n struct Bar;\n \"#,\n         expect![[r#\"\n-            kw self\n             kw super::\n             st Bar\n             md bar\n@@ -186,7 +169,6 @@ struct Bar;\n \n #[test]\n fn super_super_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n mod a {\n@@ -198,7 +180,6 @@ mod a {\n }\n \"#,\n         expect![[r#\"\n-            kw self\n             kw super::\n             md b\n             ct A\n@@ -208,7 +189,6 @@ mod a {\n \n #[test]\n fn crate_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n use crate::$0\n@@ -217,7 +197,6 @@ mod foo {}\n struct Bar;\n \"#,\n         expect![[r#\"\n-            kw self\n             md foo\n             st Bar\n         \"#]],\n@@ -226,7 +205,6 @@ struct Bar;\n \n #[test]\n fn extern_crate_qualified_use_tree() {\n-    // FIXME: self shouldn't be here\n     check(\n         r#\"\n //- /lib.rs crate:main deps:other_crate\n@@ -236,7 +214,6 @@ pub struct Foo;\n pub mod foo {}\n \"#,\n         expect![[r#\"\n-            kw self\n             st Foo\n             md foo\n         \"#]],\n@@ -253,7 +230,7 @@ pub use $0;\n \"#,\n         expect![[r#\"\n             kw crate::\n-            kw self\n+            kw self::\n             kw super::\n             md bar\n         \"#]],"}]}