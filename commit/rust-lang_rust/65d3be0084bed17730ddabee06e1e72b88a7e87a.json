{"sha": "65d3be0084bed17730ddabee06e1e72b88a7e87a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZDNiZTAwODRiZWQxNzczMGRkYWJlZTA2ZTFlNzJiODhhN2U4N2E=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-15T04:10:06Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-15T04:13:11Z"}, "message": "Add support for local `Value`s in `Lvalue`.\n\nThe new `Lvalue` has an additional form, `Lvalue::Local`, with the old\nform being `Lvalue::Ptr`. In an upcoming commit, we will start producing\nthe new form for locals, and enable reading and writing of primitive\nlocals without ever touching `Memory`.\n\nStatics should be able to get a similar treatment, where primitive\nstatics can be stored and accessed without touching `Memory`.", "tree": {"sha": "78396d6577a5c86b2ac87b1a4e070001a54442a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78396d6577a5c86b2ac87b1a4e070001a54442a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65d3be0084bed17730ddabee06e1e72b88a7e87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65d3be0084bed17730ddabee06e1e72b88a7e87a", "html_url": "https://github.com/rust-lang/rust/commit/65d3be0084bed17730ddabee06e1e72b88a7e87a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65d3be0084bed17730ddabee06e1e72b88a7e87a/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7", "html_url": "https://github.com/rust-lang/rust/commit/3d6dbb89ddc3f60dc589e4a22e8ad5e4ba4889a7"}], "stats": {"total": 282, "additions": 166, "deletions": 116}, "files": [{"sha": "77d4c3d560cc661a2bcc758e9c9e2a59669fad0d", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 166, "deletions": 116, "changes": 282, "blob_url": "https://github.com/rust-lang/rust/blob/65d3be0084bed17730ddabee06e1e72b88a7e87a/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65d3be0084bed17730ddabee06e1e72b88a7e87a/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=65d3be0084bed17730ddabee06e1e72b88a7e87a", "patch": "@@ -42,6 +42,7 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     memory: Memory<'a, 'tcx>,\n \n     /// Precomputed statics, constants and promoteds.\n+    // FIXME(solson): Change from Pointer to Value.\n     statics: HashMap<ConstantId<'tcx>, Pointer>,\n \n     /// The virtual call stack.\n@@ -93,13 +94,24 @@ pub struct Frame<'a, 'tcx: 'a> {\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub struct Lvalue {\n-    ptr: Pointer,\n-    extra: LvalueExtra,\n+pub enum Lvalue {\n+    /// An lvalue referring to a value allocated in the `Memory` system.\n+    Ptr {\n+        ptr: Pointer,\n+        extra: LvalueExtra,\n+    },\n+\n+    /// An lvalue referring to a value on the stack.\n+    Local {\n+        frame: usize,\n+        local: usize,\n+    }\n+\n+    // TODO(solson): Static/Const? None/Never?\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-enum LvalueExtra {\n+pub enum LvalueExtra {\n     None,\n     Length(u64),\n     Vtable(Pointer),\n@@ -603,9 +615,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let dest = dest.to_ptr();\n \n                 let lvalue = self.eval_lvalue(lvalue)?;\n-                self.memory.write_ptr(dest, lvalue.ptr)?;\n+\n+                // FIXME(solson)\n+                let (ptr, extra) = lvalue.to_ptr_and_extra();\n+\n+                self.memory.write_ptr(dest, ptr)?;\n                 let extra_ptr = dest.offset(self.memory.pointer_size() as isize);\n-                match lvalue.extra {\n+                match extra {\n                     LvalueExtra::None => {},\n                     LvalueExtra::Length(len) => self.memory.write_usize(extra_ptr, len)?,\n                     LvalueExtra::Vtable(ptr) => self.memory.write_ptr(extra_ptr, ptr)?,\n@@ -818,12 +834,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn eval_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Lvalue> {\n         use rustc::mir::repr::Lvalue::*;\n-        let ptr = match *lvalue {\n+        match *lvalue {\n             Local(i) => {\n-                match self.frame().locals[i.index()] {\n+                // FIXME(solson): Switch to the following code to start enabling lvalues referring\n+                // to `Value`s placed on the locals stack instead of in `Memory`:\n+                //\n+                //     let frame_index = self.stack.len();\n+                //     Ok(Lvalue::Local { frame: frame_index, local: i.index() })\n+                //\n+                let ptr = match self.frame().locals[i.index()] {\n                     Value::ByRef(p) => p,\n                     _ => bug!(),\n-                }\n+                };\n+                Ok(Lvalue::Ptr { ptr: ptr, extra: LvalueExtra::None })\n             }\n \n             Static(def_id) => {\n@@ -833,119 +856,132 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     substs: substs,\n                     kind: ConstantKind::Global,\n                 };\n-                *self.statics.get(&cid).expect(\"static should have been cached (lvalue)\")\n-            },\n+                let ptr = *self.statics.get(&cid)\n+                    .expect(\"static should have been cached (lvalue)\");\n+                Ok(Lvalue::Ptr { ptr: ptr, extra: LvalueExtra::None })\n+            }\n \n-            Projection(ref proj) => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n-                let base_layout = self.type_layout(base_ty);\n-\n-                use rustc::mir::repr::ProjectionElem::*;\n-                match proj.elem {\n-                    Field(field, field_ty) => {\n-                        let field_ty = self.monomorphize(field_ty, self.substs());\n-                        use rustc::ty::layout::Layout::*;\n-                        let field = field.index();\n-                        let offset = match *base_layout {\n-                            Univariant { ref variant, .. } => variant.offsets[field],\n-                            General { ref variants, .. } => {\n-                                if let LvalueExtra::DowncastVariant(variant_idx) = base.extra {\n-                                    // +1 for the discriminant, which is field 0\n-                                    variants[variant_idx].offsets[field + 1]\n-                                } else {\n-                                    bug!(\"field access on enum had no variant index\");\n-                                }\n-                            }\n-                            RawNullablePointer { .. } => {\n-                                assert_eq!(field.index(), 0);\n-                                return Ok(base);\n-                            }\n-                            StructWrappedNullablePointer { ref nonnull, .. } => {\n-                                nonnull.offsets[field]\n-                            }\n-                            _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n-                        };\n+            Projection(ref proj) => self.eval_lvalue_projection(proj),\n+        }\n+    }\n \n-                        let ptr = base.ptr.offset(offset.bytes() as isize);\n-                        if self.type_is_sized(field_ty) {\n-                            ptr\n+    fn eval_lvalue_projection(\n+        &mut self,\n+        proj: &mir::LvalueProjection<'tcx>,\n+    ) -> EvalResult<'tcx, Lvalue> {\n+        let base = self.eval_lvalue(&proj.base)?;\n+        let (base_ptr, base_extra) = base.to_ptr_and_extra();\n+        let base_ty = self.lvalue_ty(&proj.base);\n+        let base_layout = self.type_layout(base_ty);\n+\n+        use rustc::mir::repr::ProjectionElem::*;\n+        let (ptr, extra) = match proj.elem {\n+            Field(field, field_ty) => {\n+                let field_ty = self.monomorphize(field_ty, self.substs());\n+                let field = field.index();\n+\n+                use rustc::ty::layout::Layout::*;\n+                let offset = match *base_layout {\n+                    Univariant { ref variant, .. } => variant.offsets[field],\n+\n+                    General { ref variants, .. } => {\n+                        if let LvalueExtra::DowncastVariant(variant_idx) = base_extra {\n+                            // +1 for the discriminant, which is field 0\n+                            variants[variant_idx].offsets[field + 1]\n                         } else {\n-                            match base.extra {\n-                                LvalueExtra::None => bug!(\"expected fat pointer\"),\n-                                LvalueExtra::DowncastVariant(..) => bug!(\"Rust doesn't support unsized fields in enum variants\"),\n-                                LvalueExtra::Vtable(_) |\n-                                LvalueExtra::Length(_) => {},\n-                            }\n-                            return Ok(Lvalue {\n-                                ptr: ptr,\n-                                extra: base.extra,\n-                            });\n+                            bug!(\"field access on enum had no variant index\");\n                         }\n-                    },\n+                    }\n \n-                    Downcast(_, variant) => {\n-                        use rustc::ty::layout::Layout::*;\n-                        match *base_layout {\n-                            General { .. } => {\n-                                return Ok(Lvalue {\n-                                    ptr: base.ptr,\n-                                    extra: LvalueExtra::DowncastVariant(variant),\n-                                });\n-                            }\n-                            RawNullablePointer { .. } | StructWrappedNullablePointer { .. } => {\n-                                return Ok(base);\n-                            }\n-                            _ => bug!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n-                        }\n-                    },\n+                    RawNullablePointer { .. } => {\n+                        assert_eq!(field.index(), 0);\n+                        return Ok(base);\n+                    }\n \n-                    Deref => {\n-                        use primval::PrimVal::*;\n-                        use interpreter::value::Value::*;\n-                        let (ptr, extra) = match self.read_value(base.ptr, base_ty)? {\n-                            ByValPair(Ptr(ptr), Ptr(vptr)) => (ptr, LvalueExtra::Vtable(vptr)),\n-                            ByValPair(Ptr(ptr), n) => (ptr, LvalueExtra::Length(n.expect_uint(\"slice length\"))),\n-                            ByVal(Ptr(ptr)) => (ptr, LvalueExtra::None),\n-                            _ => bug!(\"can't deref non pointer types\"),\n-                        };\n-                        return Ok(Lvalue { ptr: ptr, extra: extra });\n+                    StructWrappedNullablePointer { ref nonnull, .. } => {\n+                        nonnull.offsets[field]\n                     }\n \n-                    Index(ref operand) => {\n-                        let (elem_ty, len) = base.elem_ty_and_len(base_ty);\n-                        let elem_size = self.type_size(elem_ty);\n-                        let n_ptr = self.eval_operand(operand)?;\n-                        let usize = self.tcx.types.usize;\n-                        let n = self.value_to_primval(n_ptr, usize)?.expect_uint(\"Projection::Index expected usize\");\n-                        assert!(n < len);\n-                        base.ptr.offset(n as isize * elem_size as isize)\n+                    _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n+                };\n+\n+                let ptr = base_ptr.offset(offset.bytes() as isize);\n+                let extra = if self.type_is_sized(field_ty) {\n+                    LvalueExtra::None\n+                } else {\n+                    match base_extra {\n+                        LvalueExtra::None => bug!(\"expected fat pointer\"),\n+                        LvalueExtra::DowncastVariant(..) =>\n+                            bug!(\"Rust doesn't support unsized fields in enum variants\"),\n+                        LvalueExtra::Vtable(_) |\n+                        LvalueExtra::Length(_) => {},\n                     }\n+                    base_extra\n+                };\n \n-                    ConstantIndex { offset, min_length, from_end } => {\n-                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n-                        let elem_size = self.type_size(elem_ty);\n-                        assert!(n >= min_length as u64);\n-                        if from_end {\n-                            base.ptr.offset((n as isize - offset as isize) * elem_size as isize)\n-                        } else {\n-                            base.ptr.offset(offset as isize * elem_size as isize)\n-                        }\n-                    },\n-                    Subslice { from, to } => {\n-                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n-                        let elem_size = self.type_size(elem_ty);\n-                        assert!((from as u64) <= n - (to as u64));\n-                        return Ok(Lvalue {\n-                            ptr: base.ptr.offset(from as isize * elem_size as isize),\n-                            extra: LvalueExtra::Length(n - to as u64 - from as u64),\n-                        })\n-                    },\n+                (ptr, extra)\n+            }\n+\n+            Downcast(_, variant) => {\n+                use rustc::ty::layout::Layout::*;\n+                let extra = match *base_layout {\n+                    General { .. } => LvalueExtra::DowncastVariant(variant),\n+                    RawNullablePointer { .. } | StructWrappedNullablePointer { .. } => base_extra,\n+                    _ => bug!(\"variant downcast on non-aggregate: {:?}\", base_layout),\n+                };\n+                (base_ptr, extra)\n+            }\n+\n+            Deref => {\n+                use primval::PrimVal::*;\n+                use interpreter::value::Value::*;\n+                match self.read_value(base_ptr, base_ty)? {\n+                    ByValPair(Ptr(ptr), Ptr(vptr)) => (ptr, LvalueExtra::Vtable(vptr)),\n+                    ByValPair(Ptr(ptr), n) =>\n+                        (ptr, LvalueExtra::Length(n.expect_uint(\"slice length\"))),\n+                    ByVal(Ptr(ptr)) => (ptr, LvalueExtra::None),\n+                    _ => bug!(\"can't deref non pointer types\"),\n                 }\n             }\n+\n+            Index(ref operand) => {\n+                let (elem_ty, len) = base.elem_ty_and_len(base_ty);\n+                let elem_size = self.type_size(elem_ty);\n+                let n_ptr = self.eval_operand(operand)?;\n+                let usize = self.tcx.types.usize;\n+                let n = self.value_to_primval(n_ptr, usize)?\n+                    .expect_uint(\"Projection::Index expected usize\");\n+                assert!(n < len);\n+                let ptr = base_ptr.offset(n as isize * elem_size as isize);\n+                (ptr, LvalueExtra::None)\n+            }\n+\n+            ConstantIndex { offset, min_length, from_end } => {\n+                let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                let elem_size = self.type_size(elem_ty);\n+                assert!(n >= min_length as u64);\n+\n+                let index = if from_end {\n+                    n as isize - offset as isize\n+                } else {\n+                    offset as isize\n+                };\n+\n+                let ptr = base_ptr.offset(index * elem_size as isize);\n+                (ptr, LvalueExtra::None)\n+            }\n+\n+            Subslice { from, to } => {\n+                let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                let elem_size = self.type_size(elem_ty);\n+                assert!((from as u64) <= n - (to as u64));\n+                let ptr = base_ptr.offset(from as isize * elem_size as isize);\n+                let extra = LvalueExtra::Length(n - to as u64 - from as u64);\n+                (ptr, extra)\n+            }\n         };\n \n-        Ok(Lvalue { ptr: ptr, extra: LvalueExtra::None })\n+        Ok(Lvalue::Ptr { ptr: ptr, extra: extra })\n     }\n \n     fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n@@ -1242,22 +1278,36 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n impl Lvalue {\n     fn from_ptr(ptr: Pointer) -> Self {\n-        Lvalue { ptr: ptr, extra: LvalueExtra::None }\n+        Lvalue::Ptr { ptr: ptr, extra: LvalueExtra::None }\n+    }\n+\n+    fn to_ptr_and_extra(self) -> (Pointer, LvalueExtra) {\n+        if let Lvalue::Ptr { ptr, extra } = self {\n+            (ptr, extra)\n+        } else {\n+            // FIXME(solson): This isn't really a bug, but it's unhandled until I finish\n+            // refactoring.\n+            bug!(\"from_ptr: Not an Lvalue::Ptr\");\n+        }\n     }\n \n     fn to_ptr(self) -> Pointer {\n-        assert_eq!(self.extra, LvalueExtra::None);\n-        self.ptr\n+        let (ptr, extra) = self.to_ptr_and_extra();\n+        assert_eq!(extra, LvalueExtra::None);\n+        ptr\n     }\n \n     fn elem_ty_and_len<'tcx>(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n         match ty.sty {\n             ty::TyArray(elem, n) => (elem, n as u64),\n-            ty::TySlice(elem) => if let LvalueExtra::Length(len) = self.extra {\n-                (elem, len)\n-            } else {\n-                bug!(\"elem_ty_and_len called on a slice given non-slice lvalue: {:?}\", self);\n-            },\n+\n+            ty::TySlice(elem) => {\n+                match self {\n+                    Lvalue::Ptr { extra: LvalueExtra::Length(len), .. } => (elem, len),\n+                    _ => bug!(\"elem_ty_and_len of a TySlice given non-slice lvalue: {:?}\", self),\n+                }\n+            }\n+\n             _ => bug!(\"elem_ty_and_len expected array or slice, got {:?}\", ty),\n         }\n     }"}]}