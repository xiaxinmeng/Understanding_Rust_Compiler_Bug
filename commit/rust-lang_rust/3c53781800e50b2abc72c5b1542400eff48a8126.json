{"sha": "3c53781800e50b2abc72c5b1542400eff48a8126", "node_id": "C_kwDOAAsO6NoAKDNjNTM3ODE4MDBlNTBiMmFiYzcyYzViMTU0MjQwMGVmZjQ4YTgxMjY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-09T01:27:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-11T21:59:27Z"}, "message": "Reinstate `{Early,Late}LintPassObjects`.\n\nI removed these in #105291, and subsequently learned they are necessary\nfor performance.\n\nThis commit reinstates them with the new and more descriptive names\n`RuntimeCombined{Early,Late}LintPass`, similar to the existing passes\nlike `BuiltinCombinedEarlyLintPass`. It also adds some comments,\nparticularly emphasising how we have ways to combine passes at both\ncompile-time and runtime. And it moves some comments around.", "tree": {"sha": "410b33806a1fd57ba771bd3103899a214b415386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410b33806a1fd57ba771bd3103899a214b415386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c53781800e50b2abc72c5b1542400eff48a8126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c53781800e50b2abc72c5b1542400eff48a8126", "html_url": "https://github.com/rust-lang/rust/commit/3c53781800e50b2abc72c5b1542400eff48a8126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c53781800e50b2abc72c5b1542400eff48a8126/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b05f841155c06b61fceb390c3cc3c2c974306a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f841155c06b61fceb390c3cc3c2c974306a0", "html_url": "https://github.com/rust-lang/rust/commit/2b05f841155c06b61fceb390c3cc3c2c974306a0"}], "stats": {"total": 146, "additions": 106, "deletions": 40}, "files": [{"sha": "d6a7a8c65ef0dfe4f1e84254d9d4275fdd5187ef", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 52, "deletions": 22, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=3c53781800e50b2abc72c5b1542400eff48a8126", "patch": "@@ -20,23 +20,23 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self as ast_visit, Visitor};\n use rustc_ast::{self as ast, walk_list, HasAttrs};\n use rustc_middle::ty::RegisteredTools;\n-use rustc_session::lint::{BufferedEarlyLint, LintBuffer};\n+use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n-    for pass in $cx.passes.iter_mut() {\n-        pass.$f(&$cx.context, $($args),*);\n-    }\n+    $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-pub struct EarlyContextAndPasses<'a> {\n+/// Implements the AST traversal for early lint passes. `T` provides the the\n+/// `check_*` methods.\n+pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n     context: EarlyContext<'a>,\n-    passes: Vec<EarlyLintPassObject>,\n+    pass: T,\n }\n \n-impl<'a> EarlyContextAndPasses<'a> {\n+impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     // This always-inlined function is for the hot call site.\n     #[inline(always)]\n     fn inlined_check_id(&mut self, id: ast::NodeId) {\n@@ -78,7 +78,7 @@ impl<'a> EarlyContextAndPasses<'a> {\n     }\n }\n \n-impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n+impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T> {\n     fn visit_param(&mut self, param: &'a ast::Param) {\n         self.with_lint_attrs(param.id, &param.attrs, |cx| {\n             lint_callback!(cx, check_param, param);\n@@ -296,14 +296,43 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n }\n \n+// Combines multiple lint passes into a single pass, at runtime. Each\n+// `check_foo` method in `$methods` within this pass simply calls `check_foo`\n+// once per `$pass`. Compare with `declare_combined_early_lint_pass`, which is\n+// similar, but combines lint passes at compile time.\n+struct RuntimeCombinedEarlyLintPass<'a> {\n+    passes: &'a mut [EarlyLintPassObject],\n+}\n+\n+#[allow(rustc::lint_pass_impl_without_macro)]\n+impl LintPass for RuntimeCombinedEarlyLintPass<'_> {\n+    fn name(&self) -> &'static str {\n+        panic!()\n+    }\n+}\n+\n+macro_rules! impl_early_lint_pass {\n+    ([], [$($(#[$attr:meta])* fn $f:ident($($param:ident: $arg:ty),*);)*]) => (\n+        impl EarlyLintPass for RuntimeCombinedEarlyLintPass<'_> {\n+            $(fn $f(&mut self, context: &EarlyContext<'_>, $($param: $arg),*) {\n+                for pass in self.passes.iter_mut() {\n+                    pass.$f(context, $($param),*);\n+                }\n+            })*\n+        }\n+    )\n+}\n+\n+crate::early_lint_methods!(impl_early_lint_pass, []);\n+\n /// Early lints work on different nodes - either on the crate root, or on freshly loaded modules.\n /// This trait generalizes over those nodes.\n pub trait EarlyCheckNode<'a>: Copy {\n     fn id(self) -> ast::NodeId;\n     fn attrs<'b>(self) -> &'b [ast::Attribute]\n     where\n         'a: 'b;\n-    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n+    fn check<'b, T: EarlyLintPass>(self, cx: &mut EarlyContextAndPass<'b, T>)\n     where\n         'a: 'b;\n }\n@@ -318,7 +347,7 @@ impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n     {\n         &self.attrs\n     }\n-    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n+    fn check<'b, T: EarlyLintPass>(self, cx: &mut EarlyContextAndPass<'b, T>)\n     where\n         'a: 'b,\n     {\n@@ -338,7 +367,7 @@ impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::\n     {\n         self.1\n     }\n-    fn check<'b>(self, cx: &mut EarlyContextAndPasses<'b>)\n+    fn check<'b, T: EarlyLintPass>(self, cx: &mut EarlyContextAndPass<'b, T>)\n     where\n         'a: 'b,\n     {\n@@ -356,21 +385,22 @@ pub fn check_ast_node<'a>(\n     builtin_lints: impl EarlyLintPass + 'static,\n     check_node: impl EarlyCheckNode<'a>,\n ) {\n+    let context = EarlyContext::new(\n+        sess,\n+        !pre_expansion,\n+        lint_store,\n+        registered_tools,\n+        lint_buffer.unwrap_or_default(),\n+    );\n+\n     let passes =\n         if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n-    let mut passes: Vec<EarlyLintPassObject> = passes.iter().map(|p| (p)()).collect();\n+    let mut passes: Vec<EarlyLintPassObject> = passes.iter().map(|mk_pass| (mk_pass)()).collect();\n     passes.push(Box::new(builtin_lints));\n+    let pass = RuntimeCombinedEarlyLintPass { passes: &mut passes[..] };\n+\n+    let mut cx = EarlyContextAndPass { context, pass };\n \n-    let mut cx = EarlyContextAndPasses {\n-        context: EarlyContext::new(\n-            sess,\n-            !pre_expansion,\n-            lint_store,\n-            registered_tools,\n-            lint_buffer.unwrap_or_default(),\n-        ),\n-        passes,\n-    };\n     cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n \n     // All of the buffered lints should have been emitted at this point."}, {"sha": "11cd246c725af6c7dee43465caee4488087becb1", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=3c53781800e50b2abc72c5b1542400eff48a8126", "patch": "@@ -23,6 +23,7 @@ use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::LintPass;\n use rustc_span::Span;\n \n use std::any::Any;\n@@ -36,17 +37,17 @@ pub fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n }\n \n macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n-    for pass in $cx.passes.iter_mut() {\n-        pass.$f(&$cx.context, $($args),*);\n-    }\n+    $cx.pass.$f(&$cx.context, $($args),*);\n }) }\n \n-struct LateContextAndPasses<'tcx> {\n+/// Implements the AST traversal for late lint passes. `T` provides the the\n+/// `check_*` methods.\n+pub struct LateContextAndPass<'tcx, T: LateLintPass<'tcx>> {\n     context: LateContext<'tcx>,\n-    passes: Vec<LateLintPassObject<'tcx>>,\n+    pass: T,\n }\n \n-impl<'tcx> LateContextAndPasses<'tcx> {\n+impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {\n     /// Merge the lints specified by any lint attributes into the\n     /// current lint context, call the provided function, then reset the\n     /// lints in effect to their previous state.\n@@ -82,7 +83,7 @@ impl<'tcx> LateContextAndPasses<'tcx> {\n     }\n }\n \n-impl<'tcx> hir_visit::Visitor<'tcx> for LateContextAndPasses<'tcx> {\n+impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPass<'tcx, T> {\n     type NestedFilter = nested_filter::All;\n \n     /// Because lints are scoped lexically, we want to walk nested\n@@ -302,6 +303,35 @@ impl<'tcx> hir_visit::Visitor<'tcx> for LateContextAndPasses<'tcx> {\n     }\n }\n \n+// Combines multiple lint passes into a single pass, at runtime. Each\n+// `check_foo` method in `$methods` within this pass simply calls `check_foo`\n+// once per `$pass`. Compare with `declare_combined_late_lint_pass`, which is\n+// similar, but combines lint passes at compile time.\n+struct RuntimeCombinedLateLintPass<'a, 'tcx> {\n+    passes: &'a mut [LateLintPassObject<'tcx>],\n+}\n+\n+#[allow(rustc::lint_pass_impl_without_macro)]\n+impl LintPass for RuntimeCombinedLateLintPass<'_, '_> {\n+    fn name(&self) -> &'static str {\n+        panic!()\n+    }\n+}\n+\n+macro_rules! impl_late_lint_pass {\n+    ([], [$($(#[$attr:meta])* fn $f:ident($($param:ident: $arg:ty),*);)*]) => {\n+        impl<'tcx> LateLintPass<'tcx> for RuntimeCombinedLateLintPass<'_, 'tcx> {\n+            $(fn $f(&mut self, context: &LateContext<'tcx>, $($param: $arg),*) {\n+                for pass in self.passes.iter_mut() {\n+                    pass.$f(context, $($param),*);\n+                }\n+            })*\n+        }\n+    };\n+}\n+\n+crate::late_lint_methods!(impl_late_lint_pass, []);\n+\n pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module_def_id: LocalDefId,\n@@ -320,10 +350,11 @@ pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     };\n \n     let mut passes: Vec<_> =\n-        unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)(tcx)).collect();\n+        unerased_lint_store(tcx).late_module_passes.iter().map(|mk_pass| (mk_pass)(tcx)).collect();\n     passes.push(Box::new(builtin_lints));\n+    let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n \n-    let mut cx = LateContextAndPasses { context, passes };\n+    let mut cx = LateContextAndPass { context, pass };\n \n     let (module, _span, hir_id) = tcx.hir().get_module(module_def_id);\n     cx.process_mod(module, hir_id);\n@@ -349,11 +380,12 @@ fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builti\n         only_module: false,\n     };\n \n-    let mut passes =\n-        unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n+    let mut passes: Vec<_> =\n+        unerased_lint_store(tcx).late_passes.iter().map(|mk_pass| (mk_pass)(tcx)).collect();\n     passes.push(Box::new(builtin_lints));\n+    let pass = RuntimeCombinedLateLintPass { passes: &mut passes[..] };\n \n-    let mut cx = LateContextAndPasses { context, passes };\n+    let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {"}, {"sha": "11022eb80ea5ff04bd713ee1ba29c27af2d5cc55", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3c53781800e50b2abc72c5b1542400eff48a8126", "patch": "@@ -127,7 +127,6 @@ fn lint_mod(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     late::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n \n-// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n early_lint_methods!(\n     declare_combined_early_lint_pass,\n     [\n@@ -138,9 +137,6 @@ early_lint_methods!(\n     ]\n );\n \n-// Declare `BuiltinCombinedEarlyLintPass`, a lint pass that combines multiple\n-// lint passes into a single pass for maximum speed. Each `check_foo` method\n-// within this pass simply calls `check_foo` once per listed lint.\n early_lint_methods!(\n     declare_combined_early_lint_pass,\n     [\n@@ -168,7 +164,6 @@ early_lint_methods!(\n \n // FIXME: Make a separate lint type which does not require typeck tables.\n \n-// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n late_lint_methods!(\n     declare_combined_late_lint_pass,\n     [\n@@ -188,7 +183,6 @@ late_lint_methods!(\n     ]\n );\n \n-// See the comment on `BuiltinCombinedEarlyLintPass`, which is similar.\n late_lint_methods!(\n     declare_combined_late_lint_pass,\n     ["}, {"sha": "5558156a4b9ef040a07ff54271328b64f31e2ba4", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c53781800e50b2abc72c5b1542400eff48a8126/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=3c53781800e50b2abc72c5b1542400eff48a8126", "patch": "@@ -95,6 +95,11 @@ macro_rules! expand_combined_late_lint_pass_methods {\n     )\n }\n \n+/// Combines multiple lints passes into a single lint pass, at compile time,\n+/// for maximum speed. Each `check_foo` method in `$methods` within this pass\n+/// simply calls `check_foo` once per `$pass`. Compare with\n+/// `LateLintPassObjects`, which is similar, but combines lint passes at\n+/// runtime.\n #[macro_export]\n macro_rules! declare_combined_late_lint_pass {\n     ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => (\n@@ -198,6 +203,11 @@ macro_rules! expand_combined_early_lint_pass_methods {\n     )\n }\n \n+/// Combines multiple lints passes into a single lint pass, at compile time,\n+/// for maximum speed. Each `check_foo` method in `$methods` within this pass\n+/// simply calls `check_foo` once per `$pass`. Compare with\n+/// `EarlyLintPassObjects`, which is similar, but combines lint passes at\n+/// runtime.\n #[macro_export]\n macro_rules! declare_combined_early_lint_pass {\n     ([$v:vis $name:ident, [$($pass:ident: $constructor:expr,)*]], $methods:tt) => ("}]}