{"sha": "cc53f4e9f48747d44718bb1b51e549437edae916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTNmNGU5ZjQ4NzQ3ZDQ0NzE4YmIxYjUxZTU0OTQzN2VkYWU5MTY=", "commit": {"author": {"name": "Adrian Budau", "email": "budau.adi@gmail.com", "date": "2018-12-19T14:13:43Z"}, "committer": {"name": "Adrian Budau", "email": "budau.adi@gmail.com", "date": "2018-12-20T11:22:31Z"}, "message": "Fix pipe2 and accept4 on static linked executables on linux (like musl).", "tree": {"sha": "cb0894bd5157859ec8cef514fa3178085074b273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0894bd5157859ec8cef514fa3178085074b273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc53f4e9f48747d44718bb1b51e549437edae916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc53f4e9f48747d44718bb1b51e549437edae916", "html_url": "https://github.com/rust-lang/rust/commit/cc53f4e9f48747d44718bb1b51e549437edae916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc53f4e9f48747d44718bb1b51e549437edae916/comments", "author": {"login": "adrian-budau", "id": 1350273, "node_id": "MDQ6VXNlcjEzNTAyNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1350273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian-budau", "html_url": "https://github.com/adrian-budau", "followers_url": "https://api.github.com/users/adrian-budau/followers", "following_url": "https://api.github.com/users/adrian-budau/following{/other_user}", "gists_url": "https://api.github.com/users/adrian-budau/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian-budau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian-budau/subscriptions", "organizations_url": "https://api.github.com/users/adrian-budau/orgs", "repos_url": "https://api.github.com/users/adrian-budau/repos", "events_url": "https://api.github.com/users/adrian-budau/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian-budau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adrian-budau", "id": 1350273, "node_id": "MDQ6VXNlcjEzNTAyNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/1350273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrian-budau", "html_url": "https://github.com/adrian-budau", "followers_url": "https://api.github.com/users/adrian-budau/followers", "following_url": "https://api.github.com/users/adrian-budau/following{/other_user}", "gists_url": "https://api.github.com/users/adrian-budau/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrian-budau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrian-budau/subscriptions", "organizations_url": "https://api.github.com/users/adrian-budau/orgs", "repos_url": "https://api.github.com/users/adrian-budau/repos", "events_url": "https://api.github.com/users/adrian-budau/events{/privacy}", "received_events_url": "https://api.github.com/users/adrian-budau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2", "html_url": "https://github.com/rust-lang/rust/commit/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2"}], "stats": {"total": 108, "additions": 81, "deletions": 27}, "files": [{"sha": "9042cb3c72d6079538b4ccfeec4130d2edb2adc7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cc53f4e9f48747d44718bb1b51e549437edae916", "patch": "@@ -250,6 +250,7 @@\n #![feature(cfg_target_vendor)]\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n+#![feature(concat_idents)]\n #![feature(const_int_ops)]\n #![feature(const_ip)]\n #![feature(const_raw_ptr_deref)]"}, {"sha": "f30817e69ab0e77b84b7696c79a51cb2f96a4560", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=cc53f4e9f48747d44718bb1b51e549437edae916", "patch": "@@ -203,18 +203,21 @@ impl Socket {\n         // Linux. This was added in 2.6.28, however, and because we support\n         // 2.6.18 we must detect this support dynamically.\n         if cfg!(target_os = \"linux\") {\n-            weak! {\n-                fn accept4(c_int, *mut sockaddr, *mut socklen_t, c_int) -> c_int\n+            syscall! {\n+                fn accept4(\n+                    fd: c_int,\n+                    addr: *mut sockaddr,\n+                    addr_len: *mut socklen_t,\n+                    flags: c_int\n+                ) -> c_int\n             }\n-            if let Some(accept) = accept4.get() {\n-                let res = cvt_r(|| unsafe {\n-                    accept(self.0.raw(), storage, len, SOCK_CLOEXEC)\n-                });\n-                match res {\n-                    Ok(fd) => return Ok(Socket(FileDesc::new(fd))),\n-                    Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}\n-                    Err(e) => return Err(e),\n-                }\n+            let res = cvt_r(|| unsafe {\n+                accept4(self.0.raw(), storage, len, SOCK_CLOEXEC)\n+            });\n+            match res {\n+                Ok(fd) => return Ok(Socket(FileDesc::new(fd))),\n+                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}\n+                Err(e) => return Err(e),\n             }\n         }\n "}, {"sha": "24b2959a3fa01576ce26c286078b37fdb0f63f5f", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=cc53f4e9f48747d44718bb1b51e549437edae916", "patch": "@@ -22,7 +22,7 @@ use sys::{cvt, cvt_r};\n pub struct AnonPipe(FileDesc);\n \n pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n-    weak! { fn pipe2(*mut c_int, c_int) -> c_int }\n+    syscall! { fn pipe2(fds: *mut c_int, flags: c_int) -> c_int }\n     static INVALID: AtomicBool = ATOMIC_BOOL_INIT;\n \n     let mut fds = [0; 2];\n@@ -39,22 +39,20 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n        !INVALID.load(Ordering::SeqCst)\n     {\n \n-        if let Some(pipe) = pipe2.get() {\n-            // Note that despite calling a glibc function here we may still\n-            // get ENOSYS. Glibc has `pipe2` since 2.9 and doesn't try to\n-            // emulate on older kernels, so if you happen to be running on\n-            // an older kernel you may see `pipe2` as a symbol but still not\n-            // see the syscall.\n-            match cvt(unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n-                Ok(_) => {\n-                    return Ok((AnonPipe(FileDesc::new(fds[0])),\n-                               AnonPipe(FileDesc::new(fds[1]))));\n-                }\n-                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {\n-                    INVALID.store(true, Ordering::SeqCst);\n-                }\n-                Err(e) => return Err(e),\n+        // Note that despite calling a glibc function here we may still\n+        // get ENOSYS. Glibc has `pipe2` since 2.9 and doesn't try to\n+        // emulate on older kernels, so if you happen to be running on\n+        // an older kernel you may see `pipe2` as a symbol but still not\n+        // see the syscall.\n+        match cvt(unsafe { pipe2(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n+            Ok(_) => {\n+                return Ok((AnonPipe(FileDesc::new(fds[0])),\n+                            AnonPipe(FileDesc::new(fds[1]))));\n+            }\n+            Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {\n+                INVALID.store(true, Ordering::SeqCst);\n             }\n+            Err(e) => return Err(e),\n         }\n     }\n     cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;"}, {"sha": "3b73e3b7c50cc29af32b64730b5e1edcc6882a8d", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc53f4e9f48747d44718bb1b51e549437edae916/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=cc53f4e9f48747d44718bb1b51e549437edae916", "patch": "@@ -77,3 +77,55 @@ unsafe fn fetch(name: &str) -> usize {\n     };\n     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n+\n+#[cfg(not(target_os = \"linux\"))]\n+macro_rules! syscall {\n+    (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n+        unsafe fn $name($($arg_name: $t),*) -> $ret {\n+            use libc;\n+\n+            weak! { fn $name($($t),*) -> $ret }\n+\n+            if let Some(fun) = $name.get() {\n+                fun($($arg_name),*)\n+            } else {\n+                libc::ENOSYS\n+            }\n+        }\n+    )\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+macro_rules! syscall {\n+    (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n+        unsafe fn $name($($arg_name:$t),*) -> $ret {\n+            // This like a hack, but concat_idents only accepts idents\n+            // (not paths).\n+            use libc::*;\n+\n+            syscall(\n+                concat_idents!(SYS_, $name),\n+                $(::sys::weak::SyscallParam::to_param($arg_name)),*\n+            ) as $ret\n+        }\n+    )\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+pub trait SyscallParam {\n+    fn to_param(self) -> libc::c_long;\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+impl SyscallParam for libc::c_int {\n+    fn to_param(self) -> libc::c_long {\n+        self as libc::c_long\n+    }\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+impl<T> SyscallParam for *mut T {\n+    fn to_param(self) -> libc::c_long {\n+        unsafe { mem::transmute(self) }\n+    }\n+}"}]}