{"sha": "2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZjljMDFmZmNkMTYwOTM3ZGRjY2M5MWE2ZjVlOWZhMjRmMjJmZDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T18:49:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-18T18:49:47Z"}, "message": "rustc: Implement \"mutable?\". Add a test case and XFAIL it in rustboot for now.", "tree": {"sha": "2c558d866e94eb0ee42d9d4c608f75dc4e45a4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c558d866e94eb0ee42d9d4c608f75dc4e45a4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "html_url": "https://github.com/rust-lang/rust/commit/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2245d8421ff43832b005375025cd14f56c1ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2245d8421ff43832b005375025cd14f56c1ca9", "html_url": "https://github.com/rust-lang/rust/commit/4c2245d8421ff43832b005375025cd14f56c1ca9"}], "stats": {"total": 112, "additions": 87, "deletions": 25}, "files": [{"sha": "630babf33c6196e4ba75bff6fab5375104894211", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -456,6 +456,7 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/run-pass/iter-ret.rs \\\n                     test/run-pass/leak-tag-copy.rs \\\n                     test/run-pass/lib-io.rs \\\n+                    test/run-pass/maybe-mutable.rs \\\n                     test/run-pass/mlist-cycle.rs \\\n                     test/run-pass/obj-as.rs \\\n                     test/run-pass/seq-compare.rs \\"}, {"sha": "ec93db55c92a1dc7c1f953ece50b1a7ef2d2e76e", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -91,6 +91,7 @@ tag pat_ {\n tag mutability {\n     mut;\n     imm;\n+    maybe_mut;\n }\n \n tag opacity {"}, {"sha": "028b8a3132df2b7169c3862a9302c8198104a0e2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -615,6 +615,10 @@ impure fn parse_path(parser p, greed g) -> ast.path {\n impure fn parse_mutability(parser p) -> ast.mutability {\n     if (p.peek() == token.MUTABLE) {\n         p.bump();\n+        if (p.peek() == token.QUES) {\n+            p.bump();\n+            ret ast.maybe_mut;\n+        }\n         ret ast.mut;\n     }\n     ret ast.imm;"}, {"sha": "5fdb4dc2d2cf74bf50f1a1ba77d4b0040a2eb6d7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 60, "deletions": 23, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -148,8 +148,9 @@ fn ty_to_str(&@t typ) -> str {\n     fn mt_to_str(&mt m) -> str {\n         auto mstr;\n         alt (m.mut) {\n-            case (ast.mut) { mstr = \"mutable \"; }\n-            case (ast.imm) { mstr = \"\";         }\n+            case (ast.mut)       { mstr = \"mutable \"; }\n+            case (ast.imm)       { mstr = \"\";         }\n+            case (ast.maybe_mut) { mstr = \"mutable? \"; }\n         }\n \n         ret mstr + ty_to_str(m.ty);\n@@ -858,6 +859,21 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n         ret ures_err(terr_mismatch, expected, actual);\n     }\n \n+    // Unifies two mutability flags.\n+    fn unify_mut(ast.mutability expected, ast.mutability actual)\n+            -> option.t[ast.mutability] {\n+        if (expected == actual) {\n+            ret some[ast.mutability](expected);\n+        }\n+        if (expected == ast.maybe_mut) {\n+            ret some[ast.mutability](actual);\n+        }\n+        if (actual == ast.maybe_mut) {\n+            ret some[ast.mutability](expected);\n+        }\n+        ret none[ast.mutability];\n+    }\n+\n     tag fn_common_res {\n         fn_common_res_err(unify_result);\n         fn_common_res_ok(vec[arg], @t);\n@@ -1158,9 +1174,13 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n             case (ty.ty_box(?expected_mt)) {\n                 alt (actual.struct) {\n                     case (ty.ty_box(?actual_mt)) {\n-                        if (expected_mt.mut != actual_mt.mut) {\n-                            ret ures_err(terr_box_mutability, expected,\n-                                         actual);\n+                        auto mut;\n+                        alt (unify_mut(expected_mt.mut, actual_mt.mut)) {\n+                            case (none[ast.mutability]) {\n+                                ret ures_err(terr_box_mutability, expected,\n+                                             actual);\n+                            }\n+                            case (some[ast.mutability](?m)) { mut = m; }\n                         }\n \n                         auto result = unify_step(bindings,\n@@ -1169,8 +1189,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                                                  handler);\n                         alt (result) {\n                             case (ures_ok(?result_sub)) {\n-                                auto mt = rec(ty=result_sub,\n-                                              mut=expected_mt.mut);\n+                                auto mt = rec(ty=result_sub, mut=mut);\n                                 ret ures_ok(plain_ty(ty.ty_box(mt)));\n                             }\n                             case (_) {\n@@ -1188,9 +1207,13 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n             case (ty.ty_vec(?expected_mt)) {\n                 alt (actual.struct) {\n                     case (ty.ty_vec(?actual_mt)) {\n-                        if (expected_mt.mut != actual_mt.mut) {\n-                            ret ures_err(terr_vec_mutability, expected,\n-                                         actual);\n+                        auto mut;\n+                        alt (unify_mut(expected_mt.mut, actual_mt.mut)) {\n+                            case (none[ast.mutability]) {\n+                                ret ures_err(terr_vec_mutability, expected,\n+                                             actual);\n+                            }\n+                            case (some[ast.mutability](?m)) { mut = m; }\n                         }\n \n                         auto result = unify_step(bindings,\n@@ -1199,8 +1222,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                                                  handler);\n                         alt (result) {\n                             case (ures_ok(?result_sub)) {\n-                                auto mt = rec(ty=result_sub,\n-                                              mut=expected_mt.mut);\n+                                auto mt = rec(ty=result_sub, mut=mut);\n                                 ret ures_ok(plain_ty(ty.ty_vec(mt)));\n                             }\n                             case (_) {\n@@ -1279,9 +1301,15 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                         while (i < expected_len) {\n                             auto expected_elem = expected_elems.(i);\n                             auto actual_elem = actual_elems.(i);\n-                            if (expected_elem.mut != actual_elem.mut) {\n-                                auto err = terr_tuple_mutability;\n-                                ret ures_err(err, expected, actual);\n+\n+                            auto mut;\n+                            alt (unify_mut(expected_elem.mut,\n+                                           actual_elem.mut)) {\n+                                case (none[ast.mutability]) {\n+                                    auto err = terr_tuple_mutability;\n+                                    ret ures_err(err, expected, actual);\n+                                }\n+                                case (some[ast.mutability](?m)) { mut = m; }\n                             }\n \n                             auto result = unify_step(bindings,\n@@ -1290,8 +1318,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                                                      handler);\n                             alt (result) {\n                                 case (ures_ok(?rty)) {\n-                                    auto mt = rec(ty=rty,\n-                                                  mut=expected_elem.mut);\n+                                    auto mt = rec(ty=rty, mut=mut);\n                                     result_elems += vec(mt);\n                                 }\n                                 case (_) {\n@@ -1329,10 +1356,15 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                         while (i < expected_len) {\n                             auto expected_field = expected_fields.(i);\n                             auto actual_field = actual_fields.(i);\n-                            if (expected_field.mt.mut\n-                                    != actual_field.mt.mut) {\n-                                auto err = terr_record_mutability;\n-                                ret ures_err(err, expected, actual);\n+\n+                            auto mut;\n+                            alt (unify_mut(expected_field.mt.mut,\n+                                           actual_field.mt.mut)) {\n+                                case (none[ast.mutability]) {\n+                                    ret ures_err(terr_record_mutability,\n+                                                 expected, actual);\n+                                }\n+                                case (some[ast.mutability](?m)) { mut = m; }\n                             }\n \n                             if (!_str.eq(expected_field.ident,\n@@ -1349,8 +1381,7 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                                                      handler);\n                             alt (result) {\n                                 case (ures_ok(?rty)) {\n-                                    auto mt = rec(ty=rty,\n-                                                  mut=expected_field.mt.mut);\n+                                    auto mt = rec(ty=rty, mut=mut);\n                                     _vec.push[field]\n                                         (result_fields,\n                                          rec(mt=mt with expected_field));\n@@ -1490,6 +1521,12 @@ fn type_err_to_str(&ty.type_err err) -> str {\n         case (terr_mismatch) {\n             ret \"types differ\";\n         }\n+        case (terr_box_mutability) {\n+            ret \"boxed values differ in mutability\";\n+        }\n+        case (terr_vec_mutability) {\n+            ret \"vectors differ in mutability\";\n+        }\n         case (terr_tuple_size(?e_sz, ?a_sz)) {\n             ret \"expected a tuple with \" + _uint.to_str(e_sz, 10u) +\n                 \" elements but found one with \" + _uint.to_str(a_sz, 10u) +"}, {"sha": "6f5ea096b0573db090066d88d84213ea0a08b36f", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -58,8 +58,10 @@ impure fn commasep[IN](ps s, vec[IN] elts, impure fn (ps, &IN) op) {\n }\n \n impure fn print_mt(ps s, &ast.mt mt) {\n-    if (mt.mut == ast.mut) {\n-        wrd1(s, \"mutable\");\n+    alt (mt.mut) {\n+        case (ast.mut)       { wrd1(s, \"mutable\");  }\n+        case (ast.maybe_mut) { wrd1(s, \"mutable?\"); }\n+        case (ast.imm)       { /* nothing */        }\n     }\n     print_type(s, mt.ty);\n }"}, {"sha": "c0af0867faa5af26e98562ad11a535b28e6772d3", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=2ef9c01ffcd160937ddccc91a6f5e9fa24f22fd4", "patch": "@@ -0,0 +1,17 @@\n+// -*- rust -*-\n+\n+fn len(vec[mutable? int] v) -> uint {\n+    auto i = 0u;\n+    for (int x in v) {\n+        i += 1u;\n+    }\n+    ret i;\n+}\n+\n+fn main() {\n+    auto v0 = vec(1, 2, 3, 4, 5);\n+    log len(v0);\n+    auto v1 = vec(mutable 1, 2, 3, 4, 5);\n+    log len(v1);\n+}\n+"}]}