{"sha": "8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjg2MTlkMjAxMGE2ZjdlZTMzMzUwMmExOWMxMDJiYmJmMTViZDM=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-23T06:08:04Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-25T21:14:31Z"}, "message": "Unrot and re-enable `run-pass-fulldeps/qquote.rs`", "tree": {"sha": "c91cc8c6591d33da064d4fce12b7ea8744021e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91cc8c6591d33da064d4fce12b7ea8744021e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "html_url": "https://github.com/rust-lang/rust/commit/8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab8619d2010a6f7ee333502a19c102bbbf15bd3/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "html_url": "https://github.com/rust-lang/rust/commit/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0"}], "stats": {"total": 92, "additions": 32, "deletions": 60}, "files": [{"sha": "995dd80df65a042ea41f12ddfcb7f8925a9e5da9", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 32, "deletions": 60, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8ab8619d2010a6f7ee333502a19c102bbbf15bd3/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab8619d2010a6f7ee333502a19c102bbbf15bd3/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=8ab8619d2010a6f7ee333502a19c102bbbf15bd3", "patch": "@@ -10,86 +10,58 @@\n \n // ignore-cross-compile\n // ignore-pretty\n-// ignore-test\n \n-#![feature(quote)]\n+#![feature(quote, rustc_private)]\n \n extern crate syntax;\n \n-use std::io::*;\n-\n-use syntax::diagnostic;\n use syntax::ast;\n use syntax::codemap;\n-use syntax::codemap::span;\n use syntax::parse;\n-use syntax::print::*;\n-\n-\n-trait fake_ext_ctxt {\n-    fn cfg() -> ast::CrateConfig;\n-    fn parse_sess() -> parse::parse_sess;\n-    fn call_site() -> span;\n-    fn ident_of(st: &str) -> ast::ident;\n+use syntax::print::pprust;\n+\n+trait FakeExtCtxt {\n+    fn call_site(&self) -> codemap::Span;\n+    fn cfg(&self) -> ast::CrateConfig;\n+    fn ident_of(&self, st: &str) -> ast::Ident;\n+    fn name_of(&self, st: &str) -> ast::Name;\n+    fn parse_sess(&self) -> &parse::ParseSess;\n }\n \n-type fake_session = parse::parse_sess;\n-\n-impl fake_ext_ctxt for fake_session {\n-    fn cfg() -> ast::CrateConfig { Vec::new() }\n-    fn parse_sess() -> parse::parse_sess { self }\n-    fn call_site() -> span {\n-        codemap::span {\n+impl FakeExtCtxt for parse::ParseSess {\n+    fn call_site(&self) -> codemap::Span {\n+        codemap::Span {\n             lo: codemap::BytePos(0),\n             hi: codemap::BytePos(0),\n-            expn_id: codemap::NO_EXPANSION\n+            expn_id: codemap::NO_EXPANSION,\n         }\n     }\n-    fn ident_of(st: &str) -> ast::ident {\n-        self.interner.intern(st)\n+    fn cfg(&self) -> ast::CrateConfig { Vec::new() }\n+    fn ident_of(&self, st: &str) -> ast::Ident {\n+        parse::token::str_to_ident(st)\n     }\n-}\n-\n-fn mk_ctxt() -> fake_ext_ctxt {\n-    parse::new_parse_sess(None) as fake_ext_ctxt\n+    fn name_of(&self, st: &str) -> ast::Name {\n+        parse::token::intern(st)\n+    }\n+    fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n fn main() {\n-    let cx = mk_ctxt();\n+    let cx = parse::new_parse_sess();\n \n-    let abc = quote_expr!(cx, 23);\n-    check_pp(ext_cx, abc,  pprust::print_expr, \"23\".to_string());\n+    assert_eq!(pprust::expr_to_string(&*quote_expr!(&cx, 23)), \"23\");\n+    assert_eq!(pprust::pat_to_string(&*quote_pat!(&cx, Some(_))), \"Some(_)\");\n+    assert_eq!(pprust::ty_to_string(&*quote_ty!(&cx, isize)), \"isize\");\n \n+    let arm = quote_arm!(&cx, (ref x, ref y) => (x, y),);\n+    assert_eq!(pprust::arm_to_string(&arm), \" (ref x, ref y) => (x, y),\");\n \n-    let ty = quote_ty!(cx, isize);\n-    check_pp(ext_cx, ty, pprust::print_type, \"isize\".to_string());\n+    let attr = quote_attr!(&cx, #![cfg(foo = \"bar\")]);\n+    assert_eq!(pprust::attr_to_string(&attr), \"#![cfg(foo = \\\"bar\\\")]\");\n \n-    let item = quote_item!(cx, static x : isize = 10;).get();\n-    check_pp(ext_cx, item, pprust::print_item, \"static x: isize = 10;\".to_string());\n+    let item = quote_item!(&cx, static x : isize = 10;).unwrap();\n+    assert_eq!(pprust::item_to_string(&*item), \"static x: isize = 10;\");\n \n-    let stmt = quote_stmt!(cx, let x = 20;);\n-    check_pp(ext_cx, *stmt, pprust::print_stmt, \"let x = 20;\".to_string());\n-\n-    let pat = quote_pat!(cx, Some(_));\n-    check_pp(ext_cx, pat, pprust::print_pat, \"Some(_)\".to_string());\n-\n-    let arm = quote_arm!(cx, (ref x, ref y) => (x, y));\n-    check_pp(ext_cx, arm, pprust::print_stmt, \"(ref x, ref y) = (x, y)\".to_string());\n-\n-    let attr = quote_attr!(cx, #![cfg(foo = \"bar\")]);\n-    check_pp(ext_cx, attr, pprust::print_attribute, \"#![cfg(foo = \"bar\")]\".to_string());\n-}\n-\n-fn check_pp<T>(cx: fake_ext_ctxt,\n-               expr: T, f: |pprust::ps, T|, expect: String) {\n-    let s = io::with_str_writer(|wr| {\n-        let pp = pprust::rust_printer(wr, cx.parse_sess().interner);\n-        f(pp, expr);\n-        pp::eof(pp.s);\n-    });\n-    stdout().write_line(s);\n-    if expect != \"\".to_string() {\n-        println!(\"expect: '%s', got: '%s'\", expect, s);\n-        assert_eq!(s, expect);\n-    }\n+    let stmt = quote_stmt!(&cx, let x = 20;).unwrap();\n+    assert_eq!(pprust::stmt_to_string(&*stmt), \"let x = 20;\");\n }"}]}