{"sha": "acf257e62cbd2011f987ee67b5c5dc02f60da88c", "node_id": "C_kwDOAAsO6NoAKGFjZjI1N2U2MmNiZDIwMTFmOTg3ZWU2N2I1YzVkYzAyZjYwZGE4OGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-30T19:48:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-08T16:30:05Z"}, "message": "Point at correct exprs for assert_eq type mismatch", "tree": {"sha": "e32428228f026f4cfb892894695098142710486c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32428228f026f4cfb892894695098142710486c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf257e62cbd2011f987ee67b5c5dc02f60da88c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf257e62cbd2011f987ee67b5c5dc02f60da88c", "html_url": "https://github.com/rust-lang/rust/commit/acf257e62cbd2011f987ee67b5c5dc02f60da88c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf257e62cbd2011f987ee67b5c5dc02f60da88c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af54d584b29e6afd7069bfdad071c43c0aa135f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/af54d584b29e6afd7069bfdad071c43c0aa135f5", "html_url": "https://github.com/rust-lang/rust/commit/af54d584b29e6afd7069bfdad071c43c0aa135f5"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "b62f689ec6b89ba40d895b813d6916de93816b82", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/acf257e62cbd2011f987ee67b5c5dc02f60da88c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf257e62cbd2011f987ee67b5c5dc02f60da88c/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=acf257e62cbd2011f987ee67b5c5dc02f60da88c", "patch": "@@ -3,7 +3,7 @@ use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::MultiSpan;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_hir::def::CtorKind;\n+use rustc_hir::def::{CtorKind, Res};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n@@ -91,6 +91,56 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_wrong_return_ty_due_to_generic_arg(err, expr, expr_ty);\n     }\n \n+    /// Really hacky heuristic to remap an `assert_eq!` error to the user\n+    /// expressions provided to the macro.\n+    fn adjust_expr_for_assert_eq_macro(\n+        &self,\n+        found_expr: &mut &'tcx hir::Expr<'tcx>,\n+        expected_expr: &mut Option<&'tcx hir::Expr<'tcx>>,\n+    ) {\n+        let Some(expected_expr) = expected_expr else { return; };\n+\n+        if !found_expr.span.eq_ctxt(expected_expr.span) {\n+            return;\n+        }\n+\n+        if !found_expr\n+            .span\n+            .ctxt()\n+            .outer_expn_data()\n+            .macro_def_id\n+            .is_some_and(|def_id| self.tcx.is_diagnostic_item(sym::assert_eq_macro, def_id))\n+        {\n+            return;\n+        }\n+\n+        let hir::ExprKind::Unary(\n+            hir::UnOp::Deref,\n+            hir::Expr { kind: hir::ExprKind::Path(found_path), .. },\n+        ) = found_expr.kind else { return; };\n+        let hir::ExprKind::Unary(\n+            hir::UnOp::Deref,\n+            hir::Expr { kind: hir::ExprKind::Path(expected_path), .. },\n+        ) = expected_expr.kind else { return; };\n+\n+        for (path, name, idx, var) in [\n+            (expected_path, \"left_val\", 0, expected_expr),\n+            (found_path, \"right_val\", 1, found_expr),\n+        ] {\n+            if let hir::QPath::Resolved(_, path) = path\n+                && let [segment] = path.segments\n+                && segment.ident.name.as_str() == name\n+                && let Res::Local(hir_id) = path.res\n+                && let Some((_, hir::Node::Expr(match_expr))) = self.tcx.hir().parent_iter(hir_id).nth(2)\n+                && let hir::ExprKind::Match(scrutinee, _, _) = match_expr.kind\n+                && let hir::ExprKind::Tup(exprs) = scrutinee.kind\n+                && let hir::ExprKind::AddrOf(_, _, macro_arg) = exprs[idx].kind\n+            {\n+                *var = macro_arg;\n+            }\n+        }\n+    }\n+\n     /// Requires that the two types unify, and prints an error message if\n     /// they don't.\n     pub fn demand_suptype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n@@ -156,7 +206,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn demand_coerce(\n         &self,\n-        expr: &hir::Expr<'tcx>,\n+        expr: &'tcx hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n@@ -177,10 +227,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, expr, expected_ty_expr, allow_two_phase))]\n     pub fn demand_coerce_diag(\n         &self,\n-        expr: &hir::Expr<'tcx>,\n+        mut expr: &'tcx hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n-        expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n+        mut expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n         allow_two_phase: AllowTwoPhase,\n     ) -> (Ty<'tcx>, Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>>) {\n         let expected = self.resolve_vars_with_obligations(expected);\n@@ -190,6 +240,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Err(e) => e,\n         };\n \n+        self.adjust_expr_for_assert_eq_macro(&mut expr, &mut expected_ty_expr);\n+\n         self.set_tainted_by_errors(self.tcx.sess.delay_span_bug(\n             expr.span,\n             \"`TypeError` when attempting coercion but no error emitted\","}, {"sha": "096989db0b4e88fbccb2c89c6f61716134e1944b", "filename": "tests/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acf257e62cbd2011f987ee67b5c5dc02f60da88c/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf257e62cbd2011f987ee67b5c5dc02f60da88c/tests%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fderef-suggestion.stderr?ref=acf257e62cbd2011f987ee67b5c5dc02f60da88c", "patch": "@@ -84,15 +84,16 @@ LL | fn foo3(_: u32) {}\n    |    ^^^^ ------\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:37:5\n+  --> $DIR/deref-suggestion.rs:37:22\n    |\n LL |     assert_eq!(3i32, &3i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     expected `i32`, found `&i32`\n-   |     expected because this is `i32`\n+   |                      ^^^^^ expected `i32`, found `&i32`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     assert_eq!(3i32, &3i32);\n+LL +     assert_eq!(3i32, 3i32);\n    |\n-   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:40:17"}, {"sha": "319d866003ba80f1224e48f8f4d1451dbcf1ab52", "filename": "tests/ui/suggestions/dont-suggest-try_into-in-macros.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acf257e62cbd2011f987ee67b5c5dc02f60da88c/tests%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf257e62cbd2011f987ee67b5c5dc02f60da88c/tests%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr?ref=acf257e62cbd2011f987ee67b5c5dc02f60da88c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-suggest-try_into-in-macros.rs:2:5\n+  --> $DIR/dont-suggest-try_into-in-macros.rs:2:23\n    |\n LL |     assert_eq!(10u64, 10usize);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     expected `u64`, found `usize`\n-   |     expected because this is `u64`\n+   |                       ^^^^^^^ expected `u64`, found `usize`\n    |\n-   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: change the type of the numeric literal from `usize` to `u64`\n+   |\n+LL |     assert_eq!(10u64, 10u64);\n+   |                         ~~~\n \n error: aborting due to previous error\n "}]}