{"sha": "0b9e26f390403aa95620d3b813f046732b371fb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWUyNmYzOTA0MDNhYTk1NjIwZDNiODEzZjA0NjczMmIzNzFmYjE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-17T04:50:46Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-01-17T21:06:45Z"}, "message": "Fix fallout in `rustdoc`.", "tree": {"sha": "d73efcfcf45bc3080f476bf97ebc02dd3c67e2ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73efcfcf45bc3080f476bf97ebc02dd3c67e2ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9e26f390403aa95620d3b813f046732b371fb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e26f390403aa95620d3b813f046732b371fb1", "html_url": "https://github.com/rust-lang/rust/commit/0b9e26f390403aa95620d3b813f046732b371fb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e26f390403aa95620d3b813f046732b371fb1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c98e1bc592841c03b5228787c97c2edf67ccc6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c98e1bc592841c03b5228787c97c2edf67ccc6c", "html_url": "https://github.com/rust-lang/rust/commit/4c98e1bc592841c03b5228787c97c2edf67ccc6c"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "0629e93e7ef5d1f222dea269492fef4d150ad7e7", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e26f390403aa95620d3b813f046732b371fb1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e26f390403aa95620d3b813f046732b371fb1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=0b9e26f390403aa95620d3b813f046732b371fb1", "patch": "@@ -27,7 +27,7 @@ use std::io;\n use std::io::prelude::*;\n \n use syntax::codemap::CodeMap;\n-use syntax::parse::lexer::{self, Reader, TokenAndSpan};\n+use syntax::parse::lexer::{self, TokenAndSpan};\n use syntax::parse::token;\n use syntax::parse;\n use syntax_pos::Span;\n@@ -42,8 +42,7 @@ pub fn render_with_highlighting(src: &str, class: Option<&str>, id: Option<&str>\n     let mut out = Vec::new();\n     write_header(class, id, &mut out).unwrap();\n \n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess.span_diagnostic, fm),\n-                                         sess.codemap());\n+    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());\n     if let Err(_) = classifier.write_source(&mut out) {\n         return format!(\"<pre>{}</pre>\", src);\n     }\n@@ -63,8 +62,7 @@ pub fn render_inner_with_highlighting(src: &str) -> io::Result<String> {\n     let fm = sess.codemap().new_filemap(\"<stdin>\".to_string(), None, src.to_string());\n \n     let mut out = Vec::new();\n-    let mut classifier = Classifier::new(lexer::StringReader::new(&sess.span_diagnostic, fm),\n-                                         sess.codemap());\n+    let mut classifier = Classifier::new(lexer::StringReader::new(&sess, fm), sess.codemap());\n     classifier.write_source(&mut out)?;\n \n     Ok(String::from_utf8_lossy(&out).into_owned())\n@@ -185,10 +183,10 @@ impl<'a> Classifier<'a> {\n                 Ok(tas) => tas,\n                 Err(_) => {\n                     self.lexer.emit_fatal_errors();\n-                    self.lexer.span_diagnostic.struct_warn(\"Backing out of syntax highlighting\")\n-                                              .note(\"You probably did not intend to render this \\\n-                                                     as a rust code-block\")\n-                                              .emit();\n+                    self.lexer.sess.span_diagnostic\n+                        .struct_warn(\"Backing out of syntax highlighting\")\n+                        .note(\"You probably did not intend to render this as a rust code-block\")\n+                        .emit();\n                     return Err(io::Error::new(io::ErrorKind::Other, \"\"));\n                 }\n             };"}, {"sha": "6bc15115b09d3efca57ab6b55100e9c450132996", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e26f390403aa95620d3b813f046732b371fb1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e26f390403aa95620d3b813f046732b371fb1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0b9e26f390403aa95620d3b813f046732b371fb1", "patch": "@@ -111,7 +111,7 @@ impl<'a> StringReader<'a> {\n         }\n     }\n     /// Return the next token. EFFECT: advances the string_reader.\n-    fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n+    pub fn try_next_token(&mut self) -> Result<TokenAndSpan, ()> {\n         assert!(self.fatal_errs.is_empty());\n         let ret_val = TokenAndSpan {\n             tok: replace(&mut self.peek_tok, token::Underscore),\n@@ -123,13 +123,13 @@ impl<'a> StringReader<'a> {\n     fn fatal(&self, m: &str) -> FatalError {\n         self.fatal_span(self.peek_span, m)\n     }\n-    fn emit_fatal_errors(&mut self) {\n+    pub fn emit_fatal_errors(&mut self) {\n         for err in &mut self.fatal_errs {\n             err.emit();\n         }\n         self.fatal_errs.clear();\n     }\n-    fn peek(&self) -> TokenAndSpan {\n+    pub fn peek(&self) -> TokenAndSpan {\n         // FIXME(pcwalton): Bad copy!\n         TokenAndSpan {\n             tok: self.peek_tok.clone(),"}]}