{"sha": "10c3632078b986e1712f40ce5d39801a7e76b511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzM2MzIwNzhiOTg2ZTE3MTJmNDBjZTVkMzk4MDFhN2U3NmI1MTE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-01T03:08:09Z"}, "committer": {"name": "Seiichi Uchida", "email": "topecongiro@localhost.localdomain", "date": "2017-06-01T03:08:25Z"}, "message": "Format source codes", "tree": {"sha": "cc9d56e75e05fe53d16717d7f5acca136b7e26c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc9d56e75e05fe53d16717d7f5acca136b7e26c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c3632078b986e1712f40ce5d39801a7e76b511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c3632078b986e1712f40ce5d39801a7e76b511", "html_url": "https://github.com/rust-lang/rust/commit/10c3632078b986e1712f40ce5d39801a7e76b511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c3632078b986e1712f40ce5d39801a7e76b511/comments", "author": null, "committer": null, "parents": [{"sha": "789abf063d04684cea85c8fe4adb3233249da7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/789abf063d04684cea85c8fe4adb3233249da7e8", "html_url": "https://github.com/rust-lang/rust/commit/789abf063d04684cea85c8fe4adb3233249da7e8"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "8e0a5aca9846fcbab45a26ae2a2797e92d94d088", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=10c3632078b986e1712f40ce5d39801a7e76b511", "patch": "@@ -968,13 +968,15 @@ impl<'a> Rewrite for ControlFlow<'a> {\n         };\n \n         // for event in event\n-        let between_kwd_cond = mk_sp(context.codemap.span_after(self.span, self.keyword.trim()),\n-                                     self.pat\n-                                         .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n-            p.span.lo\n-        } else {\n-            context.codemap.span_before(self.span, self.matcher.trim())\n-        }));\n+        let between_kwd_cond = mk_sp(\n+            context.codemap.span_after(self.span, self.keyword.trim()),\n+            self.pat\n+                .map_or(cond_span.lo, |p| if self.matcher.is_empty() {\n+                    p.span.lo\n+                } else {\n+                    context.codemap.span_before(self.span, self.matcher.trim())\n+                }),\n+        );\n \n         let between_kwd_cond_comment = extract_comment(between_kwd_cond, context, shape);\n "}, {"sha": "e89235631fb33afbae94b35b35b22613f9b23e9f", "filename": "src/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=10c3632078b986e1712f40ce5d39801a7e76b511", "patch": "@@ -610,22 +610,24 @@ pub fn format_input<T: Write>(input: Input,\n \n     let mut report = FormatReport::new();\n \n-    match format_ast(&krate,\n-                     &parse_session,\n-                     &main_file,\n-                     config,\n-                     |file_name, file| {\n-        // For some reason, the codemap does not include terminating\n-        // newlines so we must add one on for each file. This is sad.\n-        filemap::append_newline(file);\n-\n-        format_lines(file, file_name, config, &mut report);\n-\n-        if let Some(ref mut out) = out {\n-            return filemap::write_file(file, file_name, out, config);\n+    match format_ast(\n+        &krate,\n+        &parse_session,\n+        &main_file,\n+        config,\n+        |file_name, file| {\n+            // For some reason, the codemap does not include terminating\n+            // newlines so we must add one on for each file. This is sad.\n+            filemap::append_newline(file);\n+\n+            format_lines(file, file_name, config, &mut report);\n+\n+            if let Some(ref mut out) = out {\n+                return filemap::write_file(file, file_name, out, config);\n+            }\n+            Ok(false)\n         }\n-        Ok(false)\n-    }) {\n+    ) {\n         Ok((file_map, has_diff)) => {\n             if report.has_warnings() {\n                 summary.add_formatting_error();"}, {"sha": "1193e4819eb857e449a730e93a030fb91dadc8d4", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c3632078b986e1712f40ce5d39801a7e76b511/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=10c3632078b986e1712f40ce5d39801a7e76b511", "patch": "@@ -205,10 +205,10 @@ pub fn rewrite_macro(mac: &ast::Mac,\n                         context\n                             .codemap\n                             .span_after(mac.span, original_style.opener()),\n-                        mac.span.hi - BytePos(1)\n+                        mac.span.hi - BytePos(1),\n                     ),\n                     context,\n-                    mac_shape\n+                    mac_shape,\n                 ));\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))"}]}