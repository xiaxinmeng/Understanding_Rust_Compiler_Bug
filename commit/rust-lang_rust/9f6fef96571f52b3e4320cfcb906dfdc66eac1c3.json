{"sha": "9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "node_id": "C_kwDOAAsO6NoAKDlmNmZlZjk2NTcxZjUyYjNlNDMyMGNmY2I5MDZkZmRjNjZlYWMxYzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-16T20:21:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-16T20:21:29Z"}, "message": "Properly pluralize 'generic constants'", "tree": {"sha": "8cb170e0232e2d1d1c99242f9bef1207c886f43c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cb170e0232e2d1d1c99242f9bef1207c886f43c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "html_url": "https://github.com/rust-lang/rust/commit/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf", "html_url": "https://github.com/rust-lang/rust/commit/fdaac4e48ea276a595a7cdd08f4801763dfbb6cf"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "abe65a0e3fef06415599478dad5d702316a7a6df", "filename": "compiler/rustc_error_messages/locales/en-US/ty_utils.ftl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -10,17 +10,17 @@ ty_utils_address_and_deref_not_supported = dereferencing or taking the address i\n \n ty_utils_array_not_supported = array construction is not supported in generic constants\n \n-ty_utils_block_not_supported = blocks are not supported in generic constant\n+ty_utils_block_not_supported = blocks are not supported in generic constants\n \n-ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constant\n+ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constants\n \n ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n \n-ty_utils_index_not_supported = indexing is not supported in generic constant\n+ty_utils_index_not_supported = indexing is not supported in generic constants\n \n-ty_utils_field_not_supported = field access is not supported in generic constant\n+ty_utils_field_not_supported = field access is not supported in generic constants\n \n-ty_utils_const_block_not_supported = const blocks are not supported in generic constant\n+ty_utils_const_block_not_supported = const blocks are not supported in generic constants\n \n ty_utils_adt_not_supported = struct/enum construction is not supported in generic constants\n \n@@ -44,4 +44,4 @@ ty_utils_control_flow_not_supported = control flow is not supported in generic c\n \n ty_utils_inline_asm_not_supported = assembly is not supported in generic constants\n \n-ty_utils_operation_not_supported = unsupported operation in generic constant\n+ty_utils_operation_not_supported = unsupported operation in generic constants"}, {"sha": "1d10dfdf10c6ee1575d212655a3709dc0844a149", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -10,7 +10,7 @@ error: overly complex generic constant\n   --> $DIR/array-size-in-generic-struct-param.rs:19:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |               ^^^^^^^^^^^^ field access is not supported in generic constant\n+   |               ^^^^^^^^^^^^ field access is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "f2625990840152b4ee5e2d394ac32b60e9fb6a1c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/const-block-is-poly.rs:5:19\n    |\n LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ const blocks are not supported in generic constant\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ const blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "823a4f8a185bb8cc7020063d2568921bbdb4dd17", "filename": "tests/ui/const-generics/generic_const_exprs/let-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:35\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "265a3b9d233414912aabdca5085cd03487b76f78", "filename": "tests/ui/const-generics/generic_const_exprs/unused_expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:4:34\n    |\n LL | fn add<const N: usize>() -> [u8; { N + 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:9:34\n    |\n LL | fn div<const N: usize>() -> [u8; { N / 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -20,7 +20,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:16:38\n    |\n LL | fn fn_call<const N: usize>() -> [u8; { foo(N); 5 }] {\n-   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "47429b7612f94095ec5ab8726964b3a76d34c6de", "filename": "tests/ui/const-generics/issues/issue-67945-2.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -8,7 +8,7 @@ LL | |         let x: Option<Box<Self>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "98f9f83976aa79b63f76e9f798ea2cec18bfaeba", "filename": "tests/ui/const-generics/issues/issue-67945-3.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<S> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "c03d40a7bb832d80ee7bb2dbdaeeb2745f41150d", "filename": "tests/ui/const-generics/issues/issue-67945-4.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<Box<S>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "68b35a38b0f8ada52a5a18342d537854369fe012", "filename": "tests/ui/const-generics/issues/issue-77357.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f6fef96571f52b3e4320cfcb906dfdc66eac1c3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=9f6fef96571f52b3e4320cfcb906dfdc66eac1c3", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/issue-77357.rs:6:46\n    |\n LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}]}