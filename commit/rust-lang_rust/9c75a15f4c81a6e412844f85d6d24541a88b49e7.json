{"sha": "9c75a15f4c81a6e412844f85d6d24541a88b49e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzVhMTVmNGM4MWE2ZTQxMjg0NGY4NWQ2ZDI0NTQxYTg4YjQ5ZTc=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-18T20:58:45Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-24T10:11:11Z"}, "message": "Fix handling of code that is annotated with rustfmt::skip.\n\nA rustfmt::skip'ed block is indented although original lines are\nreturned. In order to resolve this, the leading whitespaces are trimmed\non each line while retaining the layout; this leaves the skipped code\nto be indented as necessary by the caller.", "tree": {"sha": "5b19aab420afd7feafad0f8d0c27de2bc29407a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b19aab420afd7feafad0f8d0c27de2bc29407a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c75a15f4c81a6e412844f85d6d24541a88b49e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlvQRT8ACgkQbVYg2Qgh\nATM6Awf+N/Bi3DDvvn/0taluk0IKWyRuecdd1/+etXiQ9YN2r5AV3RjamJ0xTwzL\nmFytWmNswCmsAI6Zi/LtBVjrxDyVVSmKxCV3+pnwE6drN6+otDkLqbCs2O3McsdF\nbrSH7QhCd3YnZPuCDe/Yhd6WTZwIeCF3KgrqkCJoaef+n8qsy9/j+t/UkQFUOVGq\nOZDx9Tk9zLY+BeImXATWYJ6RCS9/HX49U2O83mXQvjAdZBVz8QJG45SeDtkf8rY8\nDO1QgTmSRpR2TTzS+XXDYbkgIJ9f4QwfY2AFcKVeyXVySYlPlV5YU+8hhTGPRtn8\nPHWuirFQcRt1u404a2w9FUS8YuaocQ==\n=ZHJj\n-----END PGP SIGNATURE-----", "payload": "tree 5b19aab420afd7feafad0f8d0c27de2bc29407a0\nparent 4789f65041d428a597f91cea9ad90b548b93cb28\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539896325 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1540375871 +0200\n\nFix handling of code that is annotated with rustfmt::skip.\n\nA rustfmt::skip'ed block is indented although original lines are\nreturned. In order to resolve this, the leading whitespaces are trimmed\non each line while retaining the layout; this leaves the skipped code\nto be indented as necessary by the caller.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c75a15f4c81a6e412844f85d6d24541a88b49e7", "html_url": "https://github.com/rust-lang/rust/commit/9c75a15f4c81a6e412844f85d6d24541a88b49e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c75a15f4c81a6e412844f85d6d24541a88b49e7/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4789f65041d428a597f91cea9ad90b548b93cb28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4789f65041d428a597f91cea9ad90b548b93cb28", "html_url": "https://github.com/rust-lang/rust/commit/4789f65041d428a597f91cea9ad90b548b93cb28"}], "stats": {"total": 167, "additions": 116, "deletions": 51}, "files": [{"sha": "7e06d9a8d60c212c894c6eaaf020dc6a89eb5fa3", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 46, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=9c75a15f4c81a6e412844f85d6d24541a88b49e7", "patch": "@@ -19,7 +19,7 @@ use config::Config;\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n-use utils::{count_newlines, first_line_width, last_line_width};\n+use utils::{count_newlines, first_line_width, last_line_width, trim_left_preserve_layout};\n use {ErrorKind, FormattingError};\n \n fn is_custom_comment(comment: &str) -> bool {\n@@ -332,12 +332,12 @@ fn identify_comment(\n     let (first_group, rest) = orig.split_at(first_group_ending);\n     let rewritten_first_group =\n         if !config.normalize_comments() && has_bare_lines && style.is_block_comment() {\n-            light_rewrite_block_comment_with_bare_lines(first_group, shape, config)?\n+            trim_left_preserve_layout(first_group, &shape.indent, config)\n         } else if !config.normalize_comments()\n             && !config.wrap_comments()\n             && !config.format_doc_comments()\n         {\n-            light_rewrite_comment(first_group, shape.indent, config, is_doc_comment)?\n+            light_rewrite_comment(first_group, shape.indent, config, is_doc_comment)\n         } else {\n             rewrite_comment_inner(\n                 first_group,\n@@ -370,47 +370,6 @@ fn identify_comment(\n     }\n }\n \n-/// Trims a minimum of leading whitespaces so that the content layout is kept and aligns to indent.\n-fn light_rewrite_block_comment_with_bare_lines(\n-    orig: &str,\n-    shape: Shape,\n-    config: &Config,\n-) -> Option<String> {\n-    let prefix_whitespace_min = orig\n-        .lines()\n-        // skip the line with the starting sigil since the leading whitespace is removed\n-        // otherwise, the minimum would always be zero\n-        .skip(1)\n-        .filter(|line| !line.is_empty())\n-        .map(|line| {\n-            let mut width = 0;\n-            for c in line.chars() {\n-                match c {\n-                    ' ' => width += 1,\n-                    '\\t' => width += config.tab_spaces(),\n-                    _ => break,\n-                }\n-            }\n-            width\n-        })\n-        .min()?;\n-\n-    let indent_str = shape.indent.to_string(config);\n-    let mut lines = orig.lines();\n-    let first_line = lines.next()?;\n-    let rest = lines\n-        .map(|line| {\n-            if line.is_empty() {\n-                line\n-            } else {\n-                &line[prefix_whitespace_min..]\n-            }\n-        })\n-        .collect::<Vec<&str>>()\n-        .join(&format!(\"\\n{}\", indent_str));\n-    Some(format!(\"{}\\n{}{}\", first_line, indent_str, rest))\n-}\n-\n /// Attributes for code blocks in rustdoc.\n /// See https://doc.rust-lang.org/rustdoc/print.html#attributes\n enum CodeBlockAttribute {\n@@ -912,7 +871,7 @@ fn light_rewrite_comment(\n     offset: Indent,\n     config: &Config,\n     is_doc_comment: bool,\n-) -> Option<String> {\n+) -> String {\n     let lines: Vec<&str> = orig\n         .lines()\n         .map(|l| {\n@@ -933,7 +892,7 @@ fn light_rewrite_comment(\n             trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n         })\n         .collect();\n-    Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))\n+    lines.join(&format!(\"\\n{}\", offset.to_string(config)))\n }\n \n /// Trims comment characters and possibly a single space from the left of a string."}, {"sha": "a2d15b820eb657d768ab45ca37dd8ed7c14b7ba5", "filename": "src/utils.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9c75a15f4c81a6e412844f85d6d24541a88b49e7", "patch": "@@ -21,8 +21,9 @@ use syntax::ptr;\n use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n \n use comment::{filter_normal_code, CharClasses, FullCodeCharKind};\n+use config::Config;\n use rewrite::RewriteContext;\n-use shape::Shape;\n+use shape::{Indent, Shape};\n \n pub const DEPR_SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n pub const SKIP_ANNOTATION: &str = \"rustfmt::skip\";\n@@ -482,6 +483,44 @@ pub fn remove_trailing_white_spaces(text: &str) -> String {\n     buffer\n }\n \n+/// Trims a minimum of leading whitespaces so that the content layout is kept and aligns to indent.\n+pub fn trim_left_preserve_layout(orig: &str, indent: &Indent, config: &Config) -> String {\n+    let prefix_whitespace_min = orig\n+        .lines()\n+        // skip the line with the starting sigil since the leading whitespace is removed\n+        // otherwise, the minimum would always be zero\n+        .skip(1)\n+        .filter(|line| !line.is_empty())\n+        .map(|line| {\n+            let mut width = 0;\n+            for c in line.chars() {\n+                match c {\n+                    ' ' => width += 1,\n+                    '\\t' => width += config.tab_spaces(),\n+                    _ => break,\n+                }\n+            }\n+            width\n+        })\n+        .min()\n+        .unwrap_or(0);\n+\n+    let indent_str = indent.to_string(config);\n+    let mut lines = orig.lines();\n+    let first_line = lines.next().unwrap();\n+    let rest = lines\n+        .map(|line| {\n+            if line.is_empty() {\n+                String::from(\"\\n\")\n+            } else {\n+                format!(\"\\n{}{}\", indent_str, &line[prefix_whitespace_min..])\n+            }\n+        })\n+        .collect::<Vec<String>>()\n+        .concat();\n+    format!(\"{}{}\", first_line, rest)\n+}\n+\n #[test]\n fn test_remove_trailing_white_spaces() {\n     let s = \"    r#\\\"\\n        test\\n    \\\"#\";"}, {"sha": "036c4990a58f22be3415b1544fba83a0b1ecbefc", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75a15f4c81a6e412844f85d6d24541a88b49e7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=9c75a15f4c81a6e412844f85d6d24541a88b49e7", "patch": "@@ -29,7 +29,7 @@ use source_map::{LineRangeUtils, SpanUtils};\n use spanned::Spanned;\n use utils::{\n     self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec,\n-    rewrite_ident, DEPR_SKIP_ANNOTATION,\n+    rewrite_ident, trim_left_preserve_layout, DEPR_SKIP_ANNOTATION,\n };\n use {ErrorKind, FormatReport, FormattingError};\n \n@@ -574,9 +574,16 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     #[allow(clippy::needless_pass_by_value)]\n-    fn push_rewrite_inner(&mut self, span: Span, rewrite: Option<String>) {\n+    fn push_rewrite_inner(&mut self, span: Span, rewrite: Option<String>, is_skipped: bool) {\n         if let Some(ref s) = rewrite {\n             self.push_str(s);\n+        } else if is_skipped {\n+            // in case the code block (e.g., inside a macro or a doc) is skipped a minimum of\n+            // leading whitespaces is trimmed so that the code layout is kept but allows it to\n+            // be indented as necessary\n+            let snippet =\n+                trim_left_preserve_layout(self.snippet(span), &self.block_indent, self.config);\n+            self.push_str(&snippet);\n         } else {\n             let snippet = self.snippet(span);\n             self.push_str(snippet);\n@@ -586,13 +593,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo());\n-        self.push_rewrite_inner(span, rewrite);\n+        self.push_rewrite_inner(span, rewrite, false);\n     }\n \n     pub fn push_skipped_with_span(&mut self, span: Span) {\n         self.format_missing_with_indent(source!(self, span).lo());\n         let lo = self.line_number + 1;\n-        self.push_rewrite_inner(span, None);\n+        self.push_rewrite_inner(span, None, true);\n         let hi = self.line_number + 1;\n         self.skipped_range.push((lo, hi));\n     }"}, {"sha": "f6331cd6a02c22e4cb03dbd1c169553ef6ab2045", "filename": "tests/source/issue-3105.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c75a15f4c81a6e412844f85d6d24541a88b49e7/tests%2Fsource%2Fissue-3105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75a15f4c81a6e412844f85d6d24541a88b49e7/tests%2Fsource%2Fissue-3105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3105.rs?ref=9c75a15f4c81a6e412844f85d6d24541a88b49e7", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-wrap_comments: true\n+\n+/// ```\n+/// pub unsafe fn _mm256_shufflehi_epi16(a: __m256i, imm8: i32) -> __m256i {\n+///     let imm8 = (imm8 & 0xFF) as u8;\n+///     let a = a.as_i16x16();\n+///     macro_rules! shuffle_done {\n+///         ($x01:expr, $x23:expr, $x45:expr, $x67:expr) => {\n+///             #[cfg_attr(rustfmt, rustfmt_skip)]\n+///       simd_shuffle16(a, a, [\n+///           0, 1, 2, 3, 4+$x01, 4+$x23, 4+$x45, 4+$x67,\n+///           8, 9, 10, 11, 12+$x01, 12+$x23, 12+$x45, 12+$x67\n+///       ]);\n+///         };\n+///     }\n+/// }\n+/// ```\n+pub unsafe fn _mm256_shufflehi_epi16(a: __m256i, imm8: i32) -> __m256i {\n+    let imm8 = (imm8 & 0xFF) as u8;\n+    let a = a.as_i16x16();\n+    macro_rules! shuffle_done {\n+        ($x01:expr, $x23:expr, $x45:expr, $x67:expr) => {\n+            #[cfg_attr(rustfmt, rustfmt_skip)]\n+                         simd_shuffle16(a, a, [\n+                             0, 1, 2, 3, 4+$x01, 4+$x23, 4+$x45, 4+$x67,\n+                             8, 9, 10, 11, 12+$x01, 12+$x23, 12+$x45, 12+$x67\n+                         ]);\n+        };\n+    }\n+}"}, {"sha": "2b9f5ce91dfc4e941f2c51535fa79c1d67b4b3e2", "filename": "tests/target/issue-3105.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c75a15f4c81a6e412844f85d6d24541a88b49e7/tests%2Ftarget%2Fissue-3105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75a15f4c81a6e412844f85d6d24541a88b49e7/tests%2Ftarget%2Fissue-3105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3105.rs?ref=9c75a15f4c81a6e412844f85d6d24541a88b49e7", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-wrap_comments: true\n+\n+/// ```\n+/// pub unsafe fn _mm256_shufflehi_epi16(a: __m256i, imm8: i32) -> __m256i {\n+///     let imm8 = (imm8 & 0xFF) as u8;\n+///     let a = a.as_i16x16();\n+///     macro_rules! shuffle_done {\n+///         ($x01:expr, $x23:expr, $x45:expr, $x67:expr) => {\n+///             #[cfg_attr(rustfmt, rustfmt_skip)]\n+///             simd_shuffle16(a, a, [\n+///                 0, 1, 2, 3, 4+$x01, 4+$x23, 4+$x45, 4+$x67,\n+///                 8, 9, 10, 11, 12+$x01, 12+$x23, 12+$x45, 12+$x67\n+///             ]);\n+///         };\n+///     }\n+/// }\n+/// ```\n+pub unsafe fn _mm256_shufflehi_epi16(a: __m256i, imm8: i32) -> __m256i {\n+    let imm8 = (imm8 & 0xFF) as u8;\n+    let a = a.as_i16x16();\n+    macro_rules! shuffle_done {\n+        ($x01:expr, $x23:expr, $x45:expr, $x67:expr) => {\n+            #[cfg_attr(rustfmt, rustfmt_skip)]\n+            simd_shuffle16(a, a, [\n+                0, 1, 2, 3, 4+$x01, 4+$x23, 4+$x45, 4+$x67,\n+                8, 9, 10, 11, 12+$x01, 12+$x23, 12+$x45, 12+$x67\n+            ]);\n+        };\n+    }\n+}"}]}