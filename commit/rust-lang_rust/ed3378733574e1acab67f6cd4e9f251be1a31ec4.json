{"sha": "ed3378733574e1acab67f6cd4e9f251be1a31ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzM3ODczMzU3NGUxYWNhYjY3ZjZjZDRlOWYyNTFiZTFhMzFlYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-18T04:39:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-18T04:39:01Z"}, "message": "Auto merge of #85284 - eggyal:custom-profiler-runtime, r=jackh726\n\nProvide option for specifying the profiler runtime\n\nCurrently, if `-Zinstrument-coverage` is enabled, the target is linked\nagainst the `library/profiler_builtins` crate (which pulls in LLVM's\ncompiler-rt runtime).\n\nThis option enables backends to specify an alternative runtime crate for\nhandling injected instrumentation calls.", "tree": {"sha": "6293815a5b6f9d569c331c68a4b6e8273c8a25ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6293815a5b6f9d569c331c68a4b6e8273c8a25ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3378733574e1acab67f6cd4e9f251be1a31ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3378733574e1acab67f6cd4e9f251be1a31ec4", "html_url": "https://github.com/rust-lang/rust/commit/ed3378733574e1acab67f6cd4e9f251be1a31ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3378733574e1acab67f6cd4e9f251be1a31ec4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a462831ad4c6966f3baabe5cbf21cb9f330ffc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a462831ad4c6966f3baabe5cbf21cb9f330ffc4", "html_url": "https://github.com/rust-lang/rust/commit/1a462831ad4c6966f3baabe5cbf21cb9f330ffc4"}, {"sha": "872839eb494e2ed6b2e7c9ba28ec3450c399d935", "url": "https://api.github.com/repos/rust-lang/rust/commits/872839eb494e2ed6b2e7c9ba28ec3450c399d935", "html_url": "https://github.com/rust-lang/rust/commit/872839eb494e2ed6b2e7c9ba28ec3450c399d935"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "f486a82ef953ef0d9c09a2742aa5d98c00a75f52", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=ed3378733574e1acab67f6cd4e9f251be1a31ec4", "patch": "@@ -715,7 +715,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(no_codegen, true);\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n-    tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(plt, Some(true));\n@@ -724,6 +723,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(print_fuel, Some(\"abc\".to_string()));\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n+    tracked!(profiler_runtime, None);\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(simulate_remapped_rust_src_base, Some(PathBuf::from(\"/rustc/abc\")));"}, {"sha": "03a46efec3c7c174bd8b56568fdddf495e8eb920", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=ed3378733574e1acab67f6cd4e9f251be1a31ec4", "patch": "@@ -769,28 +769,32 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n-        if (self.sess.instrument_coverage()\n-            || self.sess.opts.debugging_opts.profile\n-            || self.sess.opts.cg.profile_generate.enabled())\n-            && !self.sess.opts.debugging_opts.no_profiler_runtime\n+        let profiler_runtime = &self.sess.opts.debugging_opts.profiler_runtime;\n+\n+        if !(profiler_runtime.is_some()\n+            && (self.sess.instrument_coverage()\n+                || self.sess.opts.debugging_opts.profile\n+                || self.sess.opts.cg.profile_generate.enabled()))\n         {\n-            info!(\"loading profiler\");\n+            return;\n+        }\n \n-            if self.sess.contains_name(&krate.attrs, sym::no_core) {\n-                self.sess.err(\n-                    \"`profiler_builtins` crate (required by compiler options) \\\n-                               is not compatible with crate attribute `#![no_core]`\",\n-                );\n-            }\n+        info!(\"loading profiler\");\n+\n+        let name = Symbol::intern(profiler_runtime.as_ref().unwrap());\n+        if name == sym::profiler_builtins && self.sess.contains_name(&krate.attrs, sym::no_core) {\n+            self.sess.err(\n+                \"`profiler_builtins` crate (required by compiler options) \\\n+                        is not compatible with crate attribute `#![no_core]`\",\n+            );\n+        }\n \n-            let name = sym::profiler_builtins;\n-            let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n-            let data = self.cstore.get_crate_data(cnum);\n+        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n+        let data = self.cstore.get_crate_data(cnum);\n \n-            // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n-            if !data.is_profiler_runtime() {\n-                self.sess.err(\"the crate `profiler_builtins` is not a profiler runtime\");\n-            }\n+        // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n+        if !data.is_profiler_runtime() {\n+            self.sess.err(&format!(\"the crate `{}` is not a profiler runtime\", name));\n         }\n     }\n "}, {"sha": "8570bf30f80787a7c2ac8bb0a3c13207438c8d40", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=ed3378733574e1acab67f6cd4e9f251be1a31ec4", "patch": "@@ -1100,7 +1100,9 @@ impl CrateError {\n                         if sess.is_nightly_build() && std::env::var(\"CARGO\").is_ok() {\n                             err.help(\"consider building the standard library from source with `cargo build -Zbuild-std`\");\n                         }\n-                    } else if crate_name == sym::profiler_builtins {\n+                    } else if Some(crate_name)\n+                        == sess.opts.debugging_opts.profiler_runtime.as_deref().map(Symbol::intern)\n+                    {\n                         err.note(&\"the compiler may have been built without the profiler runtime\");\n                     }\n                     err.span_label(span, \"can't find crate\");"}, {"sha": "ebf59bb4cc6795e499cf05c1527bfeb229222ecf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3378733574e1acab67f6cd4e9f251be1a31ec4/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ed3378733574e1acab67f6cd4e9f251be1a31ec4", "patch": "@@ -1160,8 +1160,6 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n-    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n-        \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],\n         \"normalize associated items in rustdoc when generating documentation\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n@@ -1205,6 +1203,8 @@ options! {\n     profile_emit: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"file path to emit profiling data at runtime when using 'profile' \\\n         (default based on relative source path)\"),\n+    profiler_runtime: Option<String> = (Some(String::from(\"profiler_builtins\")), parse_opt_string, [TRACKED],\n+        \"name of the profiler runtime crate to automatically inject, or None to disable\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],"}]}