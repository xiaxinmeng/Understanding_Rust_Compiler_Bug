{"sha": "a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "node_id": "C_kwDOAAsO6NoAKGEwZTIxZmYxMDUwNmRjODNkZWI1ZWY5MGM4YmYzYjMwOGFlNWIyYjg", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-08-14T21:31:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-09-01T13:54:52Z"}, "message": "rustc_target: Refactor internal linker flavors slightly\n\nRemove one unstable user-facing linker flavor (l4-bender)", "tree": {"sha": "e5127d22bbb9b60480bf1ddba3f970b20e0418ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5127d22bbb9b60480bf1ddba3f970b20e0418ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "html_url": "https://github.com/rust-lang/rust/commit/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc186ff7efd4526316fe48845dad581706ea529", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc186ff7efd4526316fe48845dad581706ea529", "html_url": "https://github.com/rust-lang/rust/commit/7dc186ff7efd4526316fe48845dad581706ea529"}], "stats": {"total": 214, "additions": 93, "deletions": 121}, "files": [{"sha": "1ebe5bac203de79afc27868b9ae9a01fe211006d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -1173,13 +1173,6 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n             // only the linker flavor is known; use the default linker for the selected flavor\n             (None, Some(flavor)) => Some((\n                 PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n                     LinkerFlavor::Gcc => {\n                         if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n@@ -1194,11 +1187,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                         }\n                     }\n                     LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                    LinkerFlavor::L4Bender => \"l4-bender\",\n+                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::EmCc => {\n+                        if cfg!(windows) {\n+                            \"emcc.bat\"\n+                        } else {\n+                            \"emcc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Bpf => \"bpf-linker\",\n+                    LinkerFlavor::Ptx => \"rust-ptx-linker\",\n                 }),\n                 flavor,\n             )),\n@@ -1208,7 +1207,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 });\n \n                 let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n+                    LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"clang\"\n@@ -2114,11 +2113,11 @@ fn add_order_independent_options(\n         });\n     }\n \n-    if flavor == LinkerFlavor::PtxLinker {\n+    if flavor == LinkerFlavor::Ptx {\n         // Provide the linker with fallback to internal `target-cpu`.\n         cmd.arg(\"--fallback-arch\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n-    } else if flavor == LinkerFlavor::BpfLinker {\n+    } else if flavor == LinkerFlavor::Bpf {\n         cmd.arg(\"--cpu\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n         cmd.arg(\"--cpu-features\");"}, {"sha": "8c6f526b054bc5ec213eddf5fac9d8505029d9d5", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -126,29 +126,26 @@ pub fn get_linker<'a>(\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     match flavor {\n-        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::Gcc => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: false })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Ld if sess.target.os == \"l4re\" => {\n+            Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Ld)\n         | LinkerFlavor::Lld(LldFlavor::Ld64)\n         | LinkerFlavor::Ld => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: true })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n+            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Wasm) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n-\n-        LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n+        LinkerFlavor::EmCc => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Bpf => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Ptx => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n     }\n }\n "}, {"sha": "5df5ab3ddc032eb19ec354e3f1bcb012b8b32345", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -21,10 +21,8 @@ use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{\n-    RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel,\n-};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, RelocModel};\n+use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n \n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -552,7 +550,7 @@ fn test_codegen_options_tracking_hash() {\n     untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n     untracked!(link_self_contained, Some(true));\n     untracked!(linker, Some(PathBuf::from(\"linker\")));\n-    untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n+    untracked!(linker_flavor, Some(LinkerFlavorCli::Gcc));\n     untracked!(no_stack_check, true);\n     untracked!(remark, Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]));\n     untracked!(rpath, true);"}, {"sha": "c1c064352d061a64bec641a0245f1905ee4f3741", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -12,8 +12,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{LinkerFlavorCli, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n-use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n+use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n+use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n@@ -2379,16 +2379,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n-    if cg.linker_flavor == Some(LinkerFlavorCli::L4Bender)\n-        && !nightly_options::is_unstable_enabled(matches)\n-    {\n-        early_error(\n-            error_format,\n-            \"`l4-bender` linker flavor is unstable, `-Z unstable-options` \\\n-             flag must also be passed to explicitly use it\",\n-        );\n-    }\n-\n     let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "f492c3451a4182dcb18dbf991980f5089cd27a39", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -2,6 +2,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n-    target.add_post_link_args(LinkerFlavor::Em, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n+    target.add_post_link_args(LinkerFlavor::EmCc, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n     target\n }"}, {"sha": "baf36587147a690d4ecbeba0066468e4f5af6c2f", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -5,7 +5,7 @@ pub fn opts(endian: Endian) -> TargetOptions {\n     TargetOptions {\n         allow_asm: true,\n         endian,\n-        linker_flavor: LinkerFlavor::BpfLinker,\n+        linker_flavor: LinkerFlavor::Bpf,\n         atomic_cas: false,\n         dynamic_linking: true,\n         no_builtins: true,"}, {"sha": "b7bc1072bf3280c0b496ce057c09dabef754f47f", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -4,7 +4,7 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".into(),\n         env: \"uclibc\".into(),\n-        linker_flavor: LinkerFlavor::L4Bender,\n+        linker_flavor: LinkerFlavor::Ld,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,"}, {"sha": "47eb5fc6a1dcbc6d5beac04d65a6fae9d2709b49", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 51, "deletions": 59, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -92,26 +92,24 @@ mod windows_uwp_msvc_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n-    Em,\n     Gcc,\n-    L4Bender,\n     Ld,\n-    Msvc,\n     Lld(LldFlavor),\n-    PtxLinker,\n-    BpfLinker,\n+    Msvc,\n+    EmCc,\n+    Bpf,\n+    Ptx,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavorCli {\n-    Em,\n     Gcc,\n-    L4Bender,\n     Ld,\n-    Msvc,\n     Lld(LldFlavor),\n-    PtxLinker,\n+    Msvc,\n+    Em,\n     BpfLinker,\n+    PtxLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -152,39 +150,37 @@ impl ToJson for LldFlavor {\n impl LinkerFlavor {\n     pub fn from_cli(cli: LinkerFlavorCli) -> LinkerFlavor {\n         match cli {\n-            LinkerFlavorCli::Em => LinkerFlavor::Em,\n             LinkerFlavorCli::Gcc => LinkerFlavor::Gcc,\n-            LinkerFlavorCli::L4Bender => LinkerFlavor::L4Bender,\n             LinkerFlavorCli::Ld => LinkerFlavor::Ld,\n-            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n             LinkerFlavorCli::Lld(lld_flavor) => LinkerFlavor::Lld(lld_flavor),\n-            LinkerFlavorCli::PtxLinker => LinkerFlavor::PtxLinker,\n-            LinkerFlavorCli::BpfLinker => LinkerFlavor::BpfLinker,\n+            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n+            LinkerFlavorCli::Em => LinkerFlavor::EmCc,\n+            LinkerFlavorCli::BpfLinker => LinkerFlavor::Bpf,\n+            LinkerFlavorCli::PtxLinker => LinkerFlavor::Ptx,\n         }\n     }\n \n     fn to_cli(self) -> LinkerFlavorCli {\n         match self {\n-            LinkerFlavor::Em => LinkerFlavorCli::Em,\n             LinkerFlavor::Gcc => LinkerFlavorCli::Gcc,\n-            LinkerFlavor::L4Bender => LinkerFlavorCli::L4Bender,\n             LinkerFlavor::Ld => LinkerFlavorCli::Ld,\n-            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n             LinkerFlavor::Lld(lld_flavor) => LinkerFlavorCli::Lld(lld_flavor),\n-            LinkerFlavor::PtxLinker => LinkerFlavorCli::PtxLinker,\n-            LinkerFlavor::BpfLinker => LinkerFlavorCli::BpfLinker,\n+            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n+            LinkerFlavor::EmCc => LinkerFlavorCli::Em,\n+            LinkerFlavor::Bpf => LinkerFlavorCli::BpfLinker,\n+            LinkerFlavor::Ptx => LinkerFlavorCli::PtxLinker,\n         }\n     }\n }\n \n-macro_rules! flavor_mappings {\n-    ($((($($flavor:tt)*), $string:expr),)*) => (\n+macro_rules! linker_flavor_cli_impls {\n+    ($(($($flavor:tt)*) $string:literal)*) => (\n         impl LinkerFlavorCli {\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n \n-            pub fn from_str(s: &str) -> Option<Self> {\n+            pub fn from_str(s: &str) -> Option<LinkerFlavorCli> {\n                 Some(match s {\n                     $($string => $($flavor)*,)*\n                     _ => return None,\n@@ -200,18 +196,17 @@ macro_rules! flavor_mappings {\n     )\n }\n \n-flavor_mappings! {\n-    ((LinkerFlavorCli::Em), \"em\"),\n-    ((LinkerFlavorCli::Gcc), \"gcc\"),\n-    ((LinkerFlavorCli::L4Bender), \"l4-bender\"),\n-    ((LinkerFlavorCli::Ld), \"ld\"),\n-    ((LinkerFlavorCli::Msvc), \"msvc\"),\n-    ((LinkerFlavorCli::PtxLinker), \"ptx-linker\"),\n-    ((LinkerFlavorCli::BpfLinker), \"bpf-linker\"),\n-    ((LinkerFlavorCli::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n-    ((LinkerFlavorCli::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n-    ((LinkerFlavorCli::Lld(LldFlavor::Ld)), \"ld.lld\"),\n-    ((LinkerFlavorCli::Lld(LldFlavor::Link)), \"lld-link\"),\n+linker_flavor_cli_impls! {\n+    (LinkerFlavorCli::Gcc) \"gcc\"\n+    (LinkerFlavorCli::Ld) \"ld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld)) \"ld.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld64)) \"ld64.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Link)) \"lld-link\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Wasm)) \"wasm-ld\"\n+    (LinkerFlavorCli::Msvc) \"msvc\"\n+    (LinkerFlavorCli::Em) \"em\"\n+    (LinkerFlavorCli::BpfLinker) \"bpf-linker\"\n+    (LinkerFlavorCli::PtxLinker) \"ptx-linker\"\n }\n \n impl ToJson for LinkerFlavorCli {\n@@ -1252,21 +1247,21 @@ pub struct TargetOptions {\n     pub abi: StaticCow<str>,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: StaticCow<str>,\n+\n+    /// Linker to invoke\n+    pub linker: Option<StaticCow<str>>,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n     linker_flavor_json: LinkerFlavorCli,\n-\n-    /// Linker to invoke\n-    pub linker: Option<StaticCow<str>>,\n-\n     /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n     /// without clarifying its flavor in any way.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n     pub lld_flavor: LldFlavor,\n+    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n+    pub linker_is_gnu: bool,\n \n-    /// Linker arguments that are passed *before* any user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n-    pre_link_args_json: LinkArgsCli,\n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n     pub post_link_objects: CrtObjects,\n@@ -1275,6 +1270,9 @@ pub struct TargetOptions {\n     pub post_link_objects_self_contained: CrtObjects,\n     pub link_self_contained: LinkSelfContainedDefault,\n \n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs,\n+    pre_link_args_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post-link objects. Standard platform\n     /// libraries that should be always be linked to, usually go here.\n@@ -1292,11 +1290,11 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n     post_link_args_json: LinkArgsCli,\n+\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n     pub link_script: Option<StaticCow<str>>,\n-\n     /// Environment variables to be set for the linker invocation.\n     pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n@@ -1381,8 +1379,6 @@ pub struct TargetOptions {\n     /// Default supported version of DWARF on this platform.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub default_dwarf_version: u32,\n-    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n-    pub linker_is_gnu: bool,\n     /// The MinGW toolchain has a known issue that prevents it from correctly\n     /// handling COFF object files with more than 2<sup>15</sup> sections. Since each weak\n     /// symbol needs its own COMDAT section, weak linkage implies a large\n@@ -1580,11 +1576,7 @@ fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'stati\n         LinkerFlavor::Lld(lld_flavor) => {\n             panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n         }\n-        LinkerFlavor::Gcc\n-        | LinkerFlavor::Em\n-        | LinkerFlavor::L4Bender\n-        | LinkerFlavor::BpfLinker\n-        | LinkerFlavor::PtxLinker => {}\n+        LinkerFlavor::Gcc | LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => {}\n     }\n }\n \n@@ -1646,14 +1638,11 @@ impl Default for TargetOptions {\n             env: \"\".into(),\n             abi: \"\".into(),\n             vendor: \"unknown\".into(),\n+            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker_flavor_json: LinkerFlavorCli::Gcc,\n-            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n             lld_flavor: LldFlavor::Ld,\n-            pre_link_args: LinkArgs::new(),\n-            pre_link_args_json: LinkArgsCli::new(),\n-            post_link_args: LinkArgs::new(),\n-            post_link_args_json: LinkArgsCli::new(),\n+            linker_is_gnu: true,\n             link_script: None,\n             asm_args: cvs![],\n             cpu: \"generic\".into(),\n@@ -1680,7 +1669,6 @@ impl Default for TargetOptions {\n             is_like_msvc: false,\n             is_like_wasm: false,\n             default_dwarf_version: 4,\n-            linker_is_gnu: true,\n             allows_weak_linkage: true,\n             has_rpath: false,\n             no_default_libraries: true,\n@@ -1693,12 +1681,16 @@ impl Default for TargetOptions {\n             pre_link_objects_self_contained: Default::default(),\n             post_link_objects_self_contained: Default::default(),\n             link_self_contained: LinkSelfContainedDefault::False,\n+            pre_link_args: LinkArgs::new(),\n+            pre_link_args_json: LinkArgsCli::new(),\n             late_link_args: LinkArgs::new(),\n             late_link_args_json: LinkArgsCli::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n             late_link_args_dynamic_json: LinkArgsCli::new(),\n             late_link_args_static: LinkArgs::new(),\n             late_link_args_static_json: LinkArgsCli::new(),\n+            post_link_args: LinkArgs::new(),\n+            post_link_args_json: LinkArgsCli::new(),\n             link_env: cvs![],\n             link_env_remove: cvs![],\n             archive_format: \"gnu\".into(),\n@@ -2283,9 +2275,10 @@ impl Target {\n         key!(env);\n         key!(abi);\n         key!(vendor);\n-        key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n         key!(linker, optional);\n+        key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n         key!(lld_flavor, LldFlavor)?;\n+        key!(linker_is_gnu, bool);\n         key!(pre_link_objects = \"pre-link-objects\", link_objects);\n         key!(post_link_objects = \"post-link-objects\", link_objects);\n         key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n@@ -2323,7 +2316,6 @@ impl Target {\n         key!(is_like_msvc, bool);\n         key!(is_like_wasm, bool);\n         key!(default_dwarf_version, u32);\n-        key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n@@ -2532,9 +2524,10 @@ impl ToJson for Target {\n         target_option_val!(env);\n         target_option_val!(abi);\n         target_option_val!(vendor);\n-        target_option_val!(linker_flavor_json, \"linker-flavor\");\n         target_option_val!(linker);\n+        target_option_val!(linker_flavor_json, \"linker-flavor\");\n         target_option_val!(lld_flavor);\n+        target_option_val!(linker_is_gnu);\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n         target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");\n@@ -2573,7 +2566,6 @@ impl ToJson for Target {\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_wasm);\n         target_option_val!(default_dwarf_version);\n-        target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);"}, {"sha": "6ab3a8b7eb5a06f688bc5505f1f0ddb9e6301bb8", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             os: \"cuda\".into(),\n             vendor: \"nvidia\".into(),\n-            linker_flavor: LinkerFlavor::PtxLinker,\n+            linker_flavor: LinkerFlavor::Ptx,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".into()),\n             linker_is_gnu: false,"}, {"sha": "d03f959076de0c0ab5fe7691c1f70daf5756d2ab", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -24,10 +24,9 @@ impl Target {\n         assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n         assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n         assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n-        assert_eq!(self.os == \"l4re\", matches!(self.linker_flavor, LinkerFlavor::L4Bender));\n-        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::Em));\n-        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::BpfLinker));\n-        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::PtxLinker));\n+        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::EmCc));\n+        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::Bpf));\n+        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::Ptx));\n \n         for args in [\n             &self.pre_link_args,\n@@ -67,17 +66,14 @@ impl Target {\n                             LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n                         )\n                     }\n-                    (LinkerFlavor::L4Bender, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::L4Bender)\n+                    (LinkerFlavor::EmCc, LldFlavor::Wasm) => {\n+                        assert_matches!(flavor, LinkerFlavor::EmCc)\n                     }\n-                    (LinkerFlavor::Em, LldFlavor::Wasm) => {\n-                        assert_matches!(flavor, LinkerFlavor::Em)\n+                    (LinkerFlavor::Bpf, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Bpf)\n                     }\n-                    (LinkerFlavor::BpfLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::BpfLinker)\n-                    }\n-                    (LinkerFlavor::PtxLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::PtxLinker)\n+                    (LinkerFlavor::Ptx, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Ptx)\n                     }\n                     flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n                 }"}, {"sha": "6f77ef98c015df8c38dc5629d23fa5c496982be8", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=a0e21ff10506dc83deb5ef90c8bf3b308ae5b2b8", "patch": "@@ -5,13 +5,13 @@ pub fn target() -> Target {\n     // Reset flags for non-Em flavors back to empty to satisfy sanity checking tests.\n     let pre_link_args = LinkArgs::new();\n     let post_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Em,\n+        LinkerFlavor::EmCc,\n         &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"],\n     );\n \n     let opts = TargetOptions {\n         os: \"emscripten\".into(),\n-        linker_flavor: LinkerFlavor::Em,\n+        linker_flavor: LinkerFlavor::EmCc,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),"}]}