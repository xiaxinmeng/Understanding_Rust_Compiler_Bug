{"sha": "43279b27498c05cc11f08501ad6410397e9e4837", "node_id": "C_kwDOAAsO6NoAKDQzMjc5YjI3NDk4YzA1Y2MxMWYwODUwMWFkNjQxMDM5N2U5ZTQ4Mzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-27T10:46:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-27T10:46:42Z"}, "message": "Rollup merge of #90995 - the8472:hash-portability, r=dtolnay\n\nDocument non-guarantees for Hash\n\nDependence on endianness and type sizes was reported for enum discriminants in #74215 but it is a more general\nissue since for example the default implementation of `Hasher::write_usize` uses native endianness.\nAdditionally the implementations of library types are occasionally changed as their internal fields\nchange or hashing gets optimized.\n\n## Question\n\nShould this go on the module level documentation instead since it also concerns `Hasher` to some extent and not just `Hash`?\n\nresolves #74215", "tree": {"sha": "0c2b9a8a2b5bb95d856c8448731d06733e535ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2b9a8a2b5bb95d856c8448731d06733e535ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43279b27498c05cc11f08501ad6410397e9e4837", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhogySCRBK7hj4Ov3rIwAAAgIIAGTmB3d7wzFRCdij3Gp10OXB\nMf7sBkLh5a4f6uWF+t5ROTij5+yUoXzRA8QdMVujmhyhWBu49q2uj/no4/M/Fkth\n56A9ZXIhdj2Im2mpkQrEZeKTbaIViIG21kcm2Crebx8qp3eRPZSpaoS98JbeM0T0\nDWyEl4l0NTiXmG+z4PLC3uWCEZDL0ugN/CuEdf94Hx2yzqK7SCGZjq0t+82uZLCU\nEvndGKYqjdUq984KdqfDKYNxnsV6a/CpKJ606pVvtN5KtaETqXJm8oCVT/yS7wsS\nGZ9pXkK0vS481vIGcpLWY6voTi6RODxyWJa7zYAVTM/MPikEy97WKsady/lRP0c=\n=a90r\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2b9a8a2b5bb95d856c8448731d06733e535ca5\nparent 14ef447d1237a2534f3acc19a2f986b217ef274d\nparent 53fc69f87c623cf3085127530b3f6a810bfd5a4a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638010002 +0100\ncommitter GitHub <noreply@github.com> 1638010002 +0100\n\nRollup merge of #90995 - the8472:hash-portability, r=dtolnay\n\nDocument non-guarantees for Hash\n\nDependence on endianness and type sizes was reported for enum discriminants in #74215 but it is a more general\nissue since for example the default implementation of `Hasher::write_usize` uses native endianness.\nAdditionally the implementations of library types are occasionally changed as their internal fields\nchange or hashing gets optimized.\n\n## Question\n\nShould this go on the module level documentation instead since it also concerns `Hasher` to some extent and not just `Hash`?\n\nresolves #74215\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43279b27498c05cc11f08501ad6410397e9e4837", "html_url": "https://github.com/rust-lang/rust/commit/43279b27498c05cc11f08501ad6410397e9e4837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43279b27498c05cc11f08501ad6410397e9e4837/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ef447d1237a2534f3acc19a2f986b217ef274d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ef447d1237a2534f3acc19a2f986b217ef274d", "html_url": "https://github.com/rust-lang/rust/commit/14ef447d1237a2534f3acc19a2f986b217ef274d"}, {"sha": "53fc69f87c623cf3085127530b3f6a810bfd5a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fc69f87c623cf3085127530b3f6a810bfd5a4a", "html_url": "https://github.com/rust-lang/rust/commit/53fc69f87c623cf3085127530b3f6a810bfd5a4a"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "3ff84cc9672eb757a3e85d74f2e30d82ce43d617", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43279b27498c05cc11f08501ad6410397e9e4837/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43279b27498c05cc11f08501ad6410397e9e4837/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=43279b27498c05cc11f08501ad6410397e9e4837", "patch": "@@ -164,6 +164,19 @@ mod sip;\n /// `0xFF` byte to the `Hasher` so that the values `(\"ab\", \"c\")` and `(\"a\",\n /// \"bc\")` hash differently.\n ///\n+/// ## Portability\n+///\n+/// Due to differences in endianness and type sizes, data fed by `Hash` to a `Hasher`\n+/// should not be considered portable across platforms. Additionally the data passed by most\n+/// standard library types should not be considered stable between compiler versions.\n+///\n+/// This means tests shouldn't probe hard-coded hash values or data fed to a `Hasher` and\n+/// instead should check consistency with `Eq`.\n+///\n+/// Serialization formats intended to be portable between platforms or compiler versions should\n+/// either avoid encoding hashes or only rely on `Hash` and `Hasher` implementations that\n+/// provide additional guarantees.\n+///\n /// [`HashMap`]: ../../std/collections/struct.HashMap.html\n /// [`HashSet`]: ../../std/collections/struct.HashSet.html\n /// [`hash`]: Hash::hash"}]}