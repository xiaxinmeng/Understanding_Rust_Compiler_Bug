{"sha": "e011939b1af554d2a29947feb66f01e27a2a1524", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTE5MzliMWFmNTU0ZDJhMjk5NDdmZWI2NmYwMWUyN2EyYTE1MjQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-04-11T19:49:31Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-04-11T22:20:15Z"}, "message": "Implement Char::encode_utf16\n\nAnd clean up encode_utf8 a bit.", "tree": {"sha": "8aafae4be0c043f239c04f247ae65473dd348d89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aafae4be0c043f239c04f247ae65473dd348d89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e011939b1af554d2a29947feb66f01e27a2a1524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e011939b1af554d2a29947feb66f01e27a2a1524", "html_url": "https://github.com/rust-lang/rust/commit/e011939b1af554d2a29947feb66f01e27a2a1524", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e011939b1af554d2a29947feb66f01e27a2a1524/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f", "html_url": "https://github.com/rust-lang/rust/commit/8b6091e8f1f5531fe907f84b6a2b27af04a95e8f"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "7137ffadb0922e73798fe818dfc5c4aae32a6fd7", "filename": "src/libstd/char.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e011939b1af554d2a29947feb66f01e27a2a1524/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e011939b1af554d2a29947feb66f01e27a2a1524/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=e011939b1af554d2a29947feb66f01e27a2a1524", "patch": "@@ -560,11 +560,19 @@ pub trait Char {\n \n     /// Encodes this character as UTF-8 into the provided byte buffer.\n     ///\n-    /// The buffer must be at least 4 bytes long or a runtime failure will\n+    /// The buffer must be at least 4 bytes long or a runtime failure may\n     /// occur.\n     ///\n-    /// This will then return the number of characters written to the slice.\n+    /// This will then return the number of bytes written to the slice.\n     fn encode_utf8(&self, dst: &mut [u8]) -> uint;\n+\n+    /// Encodes this character as UTF-16 into the provided `u16` buffer.\n+    ///\n+    /// The buffer must be at least 2 elements long or a runtime failure may\n+    /// occur.\n+    ///\n+    /// This will then return the number of `u16`s written to the slice.\n+    fn encode_utf16(&self, dst: &mut [u16]) -> uint;\n }\n \n impl Char for char {\n@@ -602,7 +610,7 @@ impl Char for char {\n \n     fn len_utf8_bytes(&self) -> uint { len_utf8_bytes(*self) }\n \n-    fn encode_utf8<'a>(&self, dst: &'a mut [u8]) -> uint {\n+    fn encode_utf8(&self, dst: &mut [u8]) -> uint {\n         let code = *self as uint;\n         if code < MAX_ONE_B {\n             dst[0] = code as u8;\n@@ -624,6 +632,24 @@ impl Char for char {\n             return 4;\n         }\n     }\n+\n+    fn encode_utf16(&self, dst: &mut [u16]) -> uint {\n+        let mut ch = *self as uint;\n+        if (ch & 0xFFFF_u) == ch {\n+            // The BMP falls through (assuming non-surrogate, as it\n+            // should)\n+            assert!(ch <= 0xD7FF_u || ch >= 0xE000_u);\n+            dst[0] = ch as u16;\n+            1\n+        } else {\n+            // Supplementary planes break into surrogates.\n+            assert!(ch >= 0x1_0000_u && ch <= 0x10_FFFF_u);\n+            ch -= 0x1_0000_u;\n+            dst[0] = 0xD800_u16 | ((ch >> 10) as u16);\n+            dst[1] = 0xDC00_u16 | ((ch as u16) & 0x3FF_u16);\n+            2\n+        }\n+    }\n }\n \n #[cfg(not(test))]"}, {"sha": "449329ce63aa421a21493a9474bed29879b1c4a0", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e011939b1af554d2a29947feb66f01e27a2a1524/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e011939b1af554d2a29947feb66f01e27a2a1524/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=e011939b1af554d2a29947feb66f01e27a2a1524", "patch": "@@ -2555,22 +2555,9 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn to_utf16(&self) -> ~[u16] {\n         let mut u = ~[];\n         for ch in self.chars() {\n-            // Arithmetic with u32 literals is easier on the eyes than chars.\n-            let mut ch = ch as u32;\n-\n-            if (ch & 0xFFFF_u32) == ch {\n-                // The BMP falls through (assuming non-surrogate, as it\n-                // should)\n-                assert!(ch <= 0xD7FF_u32 || ch >= 0xE000_u32);\n-                u.push(ch as u16)\n-            } else {\n-                // Supplementary planes break into surrogates.\n-                assert!(ch >= 0x1_0000_u32 && ch <= 0x10_FFFF_u32);\n-                ch -= 0x1_0000_u32;\n-                let w1 = 0xD800_u16 | ((ch >> 10) as u16);\n-                let w2 = 0xDC00_u16 | ((ch as u16) & 0x3FF_u16);\n-                u.push_all([w1, w2])\n-            }\n+            let mut buf = [0u16, ..2];\n+            let n = ch.encode_utf16(buf /* as mut slice! */);\n+            u.push_all(buf.slice_to(n));\n         }\n         u\n     }"}]}