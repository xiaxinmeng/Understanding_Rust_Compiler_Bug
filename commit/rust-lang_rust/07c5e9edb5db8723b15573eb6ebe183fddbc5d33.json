{"sha": "07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzVlOWVkYjVkYjg3MjNiMTU1NzNlYjZlYmUxODNmZGRiYzVkMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T23:26:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T23:26:52Z"}, "message": "Auto merge of #5971 - giraffate:fix_fp_in_to_string_in_display, r=ebroto\n\nFix FP in `to_string_in_display`\n\nDon't emit a lint when `.to_string()` on anything that is not `self`\n\nFix #5967\n\nchangelog: Fix FP in `to_string_in_display` when calling `.to_string()` on anything that is not `self`", "tree": {"sha": "5a893e847705d064754f9fe6d3b41ad24359573f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a893e847705d064754f9fe6d3b41ad24359573f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "html_url": "https://github.com/rust-lang/rust/commit/07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c5e9edb5db8723b15573eb6ebe183fddbc5d33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dead45fd5b2fb24d2259e3955a50c51de277a5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead45fd5b2fb24d2259e3955a50c51de277a5ac", "html_url": "https://github.com/rust-lang/rust/commit/dead45fd5b2fb24d2259e3955a50c51de277a5ac"}, {"sha": "04bff17668be1305d9efe235665a32727ff3e0b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/04bff17668be1305d9efe235665a32727ff3e0b5", "html_url": "https://github.com/rust-lang/rust/commit/04bff17668be1305d9efe235665a32727ff3e0b5"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "006d7a3a12d9ae56d06f0774abc75532d97f095f", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07c5e9edb5db8723b15573eb6ebe183fddbc5d33/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c5e9edb5db8723b15573eb6ebe183fddbc5d33/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind, Item, ItemKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind, HirId, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -45,11 +46,15 @@ declare_clippy_lint! {\n #[derive(Default)]\n pub struct ToStringInDisplay {\n     in_display_impl: bool,\n+    self_hir_id: Option<HirId>,\n }\n \n impl ToStringInDisplay {\n     pub fn new() -> Self {\n-        Self { in_display_impl: false }\n+        Self {\n+            in_display_impl: false,\n+            self_hir_id: None,\n+        }\n     }\n }\n \n@@ -65,16 +70,33 @@ impl LateLintPass<'_> for ToStringInDisplay {\n     fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         if is_display_impl(cx, item) {\n             self.in_display_impl = false;\n+            self.self_hir_id = None;\n+        }\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &ImplItem<'_>) {\n+        if_chain! {\n+            if self.in_display_impl;\n+            if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n+            let body = cx.tcx.hir().body(*body_id);\n+            if !body.params.is_empty();\n+            then {\n+                let self_param = &body.params[0];\n+                self.self_hir_id = Some(self_param.pat.hir_id);\n+            }\n         }\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(ref path, _, _, _) = expr.kind;\n+            if let ExprKind::MethodCall(ref path, _, args, _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n             if match_trait_method(cx, expr, &paths::TO_STRING);\n             if self.in_display_impl;\n-\n+            if let ExprKind::Path(ref qpath) = args[0].kind;\n+            if let Res::Local(hir_id) = qpath_res(cx, qpath, args[0].hir_id);\n+            if let Some(self_hir_id) = self.self_hir_id;\n+            if hir_id == self_hir_id;\n             then {\n                 span_lint(\n                     cx,"}, {"sha": "eb8105c6b6da0f28a50ee521f4550e065a96de55", "filename": "tests/ui/to_string_in_display.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07c5e9edb5db8723b15573eb6ebe183fddbc5d33/tests%2Fui%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c5e9edb5db8723b15573eb6ebe183fddbc5d33/tests%2Fui%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_string_in_display.rs?ref=07c5e9edb5db8723b15573eb6ebe183fddbc5d33", "patch": "@@ -44,6 +44,20 @@ impl fmt::Display for C {\n     }\n }\n \n+enum D {\n+    E(String),\n+    F,\n+}\n+\n+impl std::fmt::Display for D {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match &self {\n+            Self::E(string) => write!(f, \"E {}\", string.to_string()),\n+            Self::F => write!(f, \"F\"),\n+        }\n+    }\n+}\n+\n fn main() {\n     let a = A;\n     a.to_string();"}]}