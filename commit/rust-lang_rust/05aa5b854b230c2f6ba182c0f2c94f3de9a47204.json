{"sha": "05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWE1Yjg1NGIyMzBjMmY2YmExODJjMGYyYzk0ZjNkZTlhNDcyMDQ=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-23T08:26:08Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-01-23T08:26:08Z"}, "message": "Remove RWLock from check watcher.\n\n@matklad mentioned this might be a good idea.\n\nSo the general idea is that we don't really need the lock, as we can\njust clone the check watcher state when creating a snapshot. We can then\nuse `Arc::get_mut` to get mutable access to the state from `WorldState`\nwhen needed.\n\nRunning with this it seems to improve responsiveness a bit while cargo\nis running, but I have no hard numbers to prove it. In any case, a\nserialization point less is always better when we're trying to be\nresponsive.", "tree": {"sha": "d12e106a8fe4b2317d47f0ff727d34d4251fd2f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d12e106a8fe4b2317d47f0ff727d34d4251fd2f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "html_url": "https://github.com/rust-lang/rust/commit/05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb8a461225800ca605a9f2e997cd5e82fb37574", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb8a461225800ca605a9f2e997cd5e82fb37574", "html_url": "https://github.com/rust-lang/rust/commit/2fb8a461225800ca605a9f2e997cd5e82fb37574"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "8fba400aee107379e25cf2b379a3dc9b6e8ed214", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "patch": "@@ -117,7 +117,7 @@ fn is_deprecated(rd: &RustDiagnostic) -> bool {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Clone, Debug)]\n pub struct SuggestedFix {\n     pub title: String,\n     pub location: Location,"}, {"sha": "bbe6346038216e3d035ccc489f4ab68b9f629b43", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "patch": "@@ -7,7 +7,6 @@ use lsp_types::{\n     Diagnostic, Url, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n };\n-use parking_lot::RwLock;\n use std::{\n     collections::HashMap,\n     path::PathBuf,\n@@ -38,15 +37,15 @@ pub struct CheckOptions {\n #[derive(Debug)]\n pub struct CheckWatcher {\n     pub task_recv: Receiver<CheckTask>,\n-    pub state: Arc<RwLock<CheckState>>,\n+    pub state: Arc<CheckState>,\n     cmd_send: Option<Sender<CheckCommand>>,\n     handle: Option<JoinHandle<()>>,\n }\n \n impl CheckWatcher {\n     pub fn new(options: &CheckOptions, workspace_root: PathBuf) -> CheckWatcher {\n         let options = options.clone();\n-        let state = Arc::new(RwLock::new(CheckState::new()));\n+        let state = Arc::new(CheckState::new());\n \n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n@@ -59,7 +58,7 @@ impl CheckWatcher {\n \n     /// Returns a CheckWatcher that doesn't actually do anything\n     pub fn dummy() -> CheckWatcher {\n-        let state = Arc::new(RwLock::new(CheckState::new()));\n+        let state = Arc::new(CheckState::new());\n         CheckWatcher { task_recv: never(), cmd_send: None, handle: None, state }\n     }\n \n@@ -87,7 +86,7 @@ impl std::ops::Drop for CheckWatcher {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Clone, Debug)]\n pub struct CheckState {\n     diagnostic_collection: HashMap<Url, Vec<Diagnostic>>,\n     suggested_fix_collection: HashMap<Url, Vec<SuggestedFix>>,"}, {"sha": "746a8fbe92043845c5f3aff18c6ff1e5e5af431d", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "patch": "@@ -586,12 +586,14 @@ fn on_notification(\n \n fn on_check_task(\n     task: CheckTask,\n-    world_state: &WorldState,\n+    world_state: &mut WorldState,\n     task_sender: &Sender<Task>,\n ) -> Result<()> {\n     match task {\n         CheckTask::ClearDiagnostics => {\n-            let cleared_files = world_state.check_watcher.state.write().clear();\n+            let state = Arc::get_mut(&mut world_state.check_watcher.state)\n+                .expect(\"couldn't get check watcher state as mutable\");\n+            let cleared_files = state.clear();\n \n             // Send updated diagnostics for each cleared file\n             for url in cleared_files {\n@@ -600,11 +602,9 @@ fn on_check_task(\n         }\n \n         CheckTask::AddDiagnostic(url, diagnostic) => {\n-            world_state\n-                .check_watcher\n-                .state\n-                .write()\n-                .add_diagnostic_with_fixes(url.clone(), diagnostic);\n+            let state = Arc::get_mut(&mut world_state.check_watcher.state)\n+                .expect(\"couldn't get check watcher state as mutable\");\n+            state.add_diagnostic_with_fixes(url.clone(), diagnostic);\n \n             // We manually send a diagnostic update when the watcher asks\n             // us to, to avoid the issue of having to change the file to"}, {"sha": "666f2ee2987c428c079660d9c1f471c5292ef64b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "patch": "@@ -674,8 +674,7 @@ pub fn handle_code_action(\n         res.push(action.into());\n     }\n \n-    for fix in world.check_watcher.read().fixes_for(&params.text_document.uri).into_iter().flatten()\n-    {\n+    for fix in world.check_watcher.fixes_for(&params.text_document.uri).into_iter().flatten() {\n         let fix_range = fix.location.range.conv_with(&line_index);\n         if fix_range.intersection(&range).is_none() {\n             continue;\n@@ -895,7 +894,7 @@ pub fn publish_diagnostics(\n             tags: None,\n         })\n         .collect();\n-    if let Some(check_diags) = world.check_watcher.read().diagnostics_for(&uri) {\n+    if let Some(check_diags) = world.check_watcher.diagnostics_for(&uri) {\n         diagnostics.extend(check_diags.iter().cloned());\n     }\n     Ok(req::PublishDiagnosticsParams { uri, diagnostics, version: None })"}, {"sha": "3059ef9ec62f4195ac0ae4ffbf25269ebaa5a2e9", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05aa5b854b230c2f6ba182c0f2c94f3de9a47204/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=05aa5b854b230c2f6ba182c0f2c94f3de9a47204", "patch": "@@ -63,7 +63,7 @@ pub struct WorldSnapshot {\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n-    pub check_watcher: Arc<RwLock<CheckState>>,\n+    pub check_watcher: CheckState,\n     vfs: Arc<RwLock<Vfs>>,\n }\n \n@@ -220,7 +220,7 @@ impl WorldState {\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n             latest_requests: Arc::clone(&self.latest_requests),\n-            check_watcher: self.check_watcher.state.clone(),\n+            check_watcher: (*self.check_watcher.state).clone(),\n         }\n     }\n "}]}