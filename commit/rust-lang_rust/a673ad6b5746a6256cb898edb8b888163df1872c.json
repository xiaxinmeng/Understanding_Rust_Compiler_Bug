{"sha": "a673ad6b5746a6256cb898edb8b888163df1872c", "node_id": "C_kwDOAAsO6NoAKGE2NzNhZDZiNTc0NmE2MjU2Y2I4OThlZGI4Yjg4ODE2M2RmMTg3MmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T10:16:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-16T10:16:26Z"}, "message": "Auto merge of #111639 - Nilstrieb:rollup-vg149lm, r=Nilstrieb\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #111428 (refactor(resolve): clean up the early error return caused by non-call)\n - #111449 (Recover `impl<T ?Sized>` correctly)\n - #111572 (Document that `missing_copy_implementations` and `missing_debug_implementations` only apply to public items.)\n - #111602 (Suppress \"erroneous constant used\" for constants tainted by errors)\n - #111605 (fixup version placeholder for `cfi_encoding` feature)\n - #111607 (Add clubby789 to the bootstrap review rotation)\n - #111614 (Add more interesting nonsense to weird-exprs.rs)\n - #111617 (Fixed typo)\n - #111620 (Add eholk back to compiler-contributors reviewers)\n - #111621 (Fix release date of 1.58.1 in release notes.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e62339024c00f878c9df32d7c0a87a524e7d2027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62339024c00f878c9df32d7c0a87a524e7d2027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a673ad6b5746a6256cb898edb8b888163df1872c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a673ad6b5746a6256cb898edb8b888163df1872c", "html_url": "https://github.com/rust-lang/rust/commit/a673ad6b5746a6256cb898edb8b888163df1872c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a673ad6b5746a6256cb898edb8b888163df1872c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b271624623c3bce04ac6faf9b9fae4c89901b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b271624623c3bce04ac6faf9b9fae4c89901b0", "html_url": "https://github.com/rust-lang/rust/commit/72b271624623c3bce04ac6faf9b9fae4c89901b0"}, {"sha": "5c0b8f164ef17f9b83e0bd6b946c160ff1bc3b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0b8f164ef17f9b83e0bd6b946c160ff1bc3b54", "html_url": "https://github.com/rust-lang/rust/commit/5c0b8f164ef17f9b83e0bd6b946c160ff1bc3b54"}], "stats": {"total": 479, "additions": 197, "deletions": 282}, "files": [{"sha": "85266a17550ad45740e556e4683b12021fffbcea", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -1481,7 +1481,7 @@ and related tools.\n [is_power_of_two_usize]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroUsize.html#method.is_power_of_two\n [stdarch/1266]: https://github.com/rust-lang/stdarch/pull/1266\n \n-Version 1.58.1 (2022-01-19)\n+Version 1.58.1 (2022-01-20)\n ===========================\n \n * Fix race condition in `std::fs::remove_dir_all` ([CVE-2022-21658])"}, {"sha": "5037c210e7d285fce92e7e98f2dfc2818bf4de55", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -169,14 +169,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 // See <https://github.com/rust-lang/rust/pull/63152>.\n                 let mut err = struct_error(tcx, &self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n             _ => {\n                 // Report as hard error.\n                 let mut err = struct_error(tcx, message);\n                 err.span_label(self.span, self.error.to_string());\n                 self.decorate(&mut err, decorate);\n-                ErrorHandled::Reported(err.emit())\n+                ErrorHandled::Reported(err.emit().into())\n             }\n         }\n     }"}, {"sha": "58b5755af07f24de39b1b387f3faf24f8b7a950c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -382,7 +382,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(guar));\n+                    throw_inval!(AlreadyReported(guar.into()));\n                 } else {\n                     // `find_mir_or_eval_fn` checks that this is a const fn before even calling us,\n                     // so this should be unreachable."}, {"sha": "2fa63dc8c93ce047a82f21bce8b2f714f4004bf6", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -7,7 +7,7 @@ use either::{Either, Left, Right};\n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::IndexVec;\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{ErrorHandled, InterpError};\n+use rustc_middle::mir::interpret::{ErrorHandled, InterpError, ReportedErrorInfo};\n use rustc_middle::ty::layout::{\n     self, FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOf, LayoutOfHelpers,\n     TyAndLayout,\n@@ -470,7 +470,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         if let Some(err) = body.tainted_by_errors {\n-            throw_inval!(AlreadyReported(err));\n+            throw_inval!(AlreadyReported(ReportedErrorInfo::tainted_by_errors(err)));\n         }\n         Ok(body)\n     }\n@@ -517,7 +517,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ok(None) => throw_inval!(TooGeneric),\n \n             // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.\n-            Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),\n+            Err(error_reported) => throw_inval!(AlreadyReported(error_reported.into())),\n         }\n     }\n \n@@ -905,7 +905,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         query(self.tcx.at(span.unwrap_or_else(|| self.cur_span()))).map_err(|err| {\n             match err {\n                 ErrorHandled::Reported(err) => {\n-                    if let Some(span) = span {\n+                    if !err.is_tainted_by_errors() && let Some(span) = span {\n                         // To make it easier to figure out where this error comes from, also add a note at the current location.\n                         self.tcx.sess.span_note_without_error(span, \"erroneous constant used\");\n                     }"}, {"sha": "e30af165501e5f073c6e48e24df5790ec16de67e", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -595,7 +595,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME(generic_const_exprs): `ConstKind::Expr` should be able to be evaluated\n             ty::ConstKind::Expr(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(reported) => {\n-                throw_inval!(AlreadyReported(reported))\n+                throw_inval!(AlreadyReported(reported.into()))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;"}, {"sha": "57e55752027c7a67e73f0046827395587e0f79a9", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -338,7 +338,7 @@ declare_features! (\n     /// Allow conditional compilation depending on rust version\n     (active, cfg_version, \"1.45.0\", Some(64796), None),\n     /// Allows to use the `#[cfi_encoding = \"\"]` attribute.\n-    (active, cfi_encoding, \"1.69.0\", Some(89653), None),\n+    (active, cfi_encoding, \"CURRENT_RUSTC_VERSION\", Some(89653), None),\n     /// Allows `for<...>` on closures and generators.\n     (active, closure_lifetime_binder, \"1.64.0\", Some(97362), None),\n     /// Allows `#[track_caller]` on closures and generators."}, {"sha": "f8329965c4360ca5ebd52599d2cf99a0c882452e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -1534,7 +1534,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             if let Some(ct) = tcx.thir_abstract_const(unevaluated.def)? {\n                 let ct = tcx.expand_abstract_consts(ct.subst(tcx, substs));\n                 if let Err(e) = ct.error_reported() {\n-                    return Err(ErrorHandled::Reported(e));\n+                    return Err(ErrorHandled::Reported(e.into()));\n                 } else if ct.has_non_region_infer() || ct.has_non_region_param() {\n                     return Err(ErrorHandled::TooGeneric);\n                 } else {"}, {"sha": "6601a80920ba0b7dd940f606f40ffc1883f09f68", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -611,7 +611,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n declare_lint! {\n     /// The `missing_copy_implementations` lint detects potentially-forgotten\n-    /// implementations of [`Copy`].\n+    /// implementations of [`Copy`] for public types.\n     ///\n     /// [`Copy`]: https://doc.rust-lang.org/std/marker/trait.Copy.html\n     ///\n@@ -729,7 +729,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n \n declare_lint! {\n     /// The `missing_debug_implementations` lint detects missing\n-    /// implementations of [`fmt::Debug`].\n+    /// implementations of [`fmt::Debug`] for public types.\n     ///\n     /// [`fmt::Debug`]: https://doc.rust-lang.org/std/fmt/trait.Debug.html\n     ///"}, {"sha": "d65ceef24727a5bf62e6b1ff84c6e4038c54f3b4", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -15,15 +15,49 @@ use std::{any::Any, backtrace::Backtrace, fmt};\n pub enum ErrorHandled {\n     /// Already reported an error for this evaluation, and the compilation is\n     /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n-    Reported(ErrorGuaranteed),\n+    Reported(ReportedErrorInfo),\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n impl From<ErrorGuaranteed> for ErrorHandled {\n-    fn from(err: ErrorGuaranteed) -> ErrorHandled {\n-        ErrorHandled::Reported(err)\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ErrorHandled {\n+        ErrorHandled::Reported(error.into())\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub struct ReportedErrorInfo {\n+    error: ErrorGuaranteed,\n+    is_tainted_by_errors: bool,\n+}\n+\n+impl ReportedErrorInfo {\n+    #[inline]\n+    pub fn tainted_by_errors(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: true, error }\n+    }\n+\n+    /// Returns true if evaluation failed because MIR was tainted by errors.\n+    #[inline]\n+    pub fn is_tainted_by_errors(self) -> bool {\n+        self.is_tainted_by_errors\n+    }\n+}\n+\n+impl From<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn from(error: ErrorGuaranteed) -> ReportedErrorInfo {\n+        ReportedErrorInfo { is_tainted_by_errors: false, error }\n+    }\n+}\n+\n+impl Into<ErrorGuaranteed> for ReportedErrorInfo {\n+    #[inline]\n+    fn into(self) -> ErrorGuaranteed {\n+        self.error\n     }\n }\n \n@@ -89,7 +123,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n \n impl From<ErrorGuaranteed> for InterpErrorInfo<'_> {\n     fn from(err: ErrorGuaranteed) -> Self {\n-        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n+        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err.into())).into()\n     }\n }\n \n@@ -125,7 +159,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context.\n     TooGeneric,\n     /// Abort in case errors are already reported.\n-    AlreadyReported(ErrorGuaranteed),\n+    AlreadyReported(ReportedErrorInfo),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An error occurred during FnAbi computation: the passed --target lacks FFI support\n@@ -144,7 +178,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         use InvalidProgramInfo::*;\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n-            AlreadyReported(ErrorGuaranteed { .. }) => {\n+            AlreadyReported(_) => {\n                 write!(\n                     f,\n                     \"an error has already been reported elsewhere (this should not usually be printed)\""}, {"sha": "3620385fab13494b6d4485d392fe457542b06682", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -120,8 +120,8 @@ use crate::ty::{self, Instance, Ty, TyCtxt};\n pub use self::error::{\n     struct_error, CheckInAllocMsg, ErrorHandled, EvalToAllocationRawResult, EvalToConstValueResult,\n     EvalToValTreeResult, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo,\n-    MachineStopType, ResourceExhaustionInfo, ScalarSizeMismatch, UndefinedBehaviorInfo,\n-    UninitBytesAccess, UnsupportedOpInfo,\n+    MachineStopType, ReportedErrorInfo, ResourceExhaustionInfo, ScalarSizeMismatch,\n+    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstAlloc, ConstValue, Scalar};"}, {"sha": "ce11dabc195d90fc11b200c318473bd4cc58f619", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 self.const_eval_global_id(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n \n@@ -110,7 +110,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 })\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n-            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n+            Err(err) => Err(ErrorHandled::Reported(err.into())),\n         }\n     }\n "}, {"sha": "1da94dd79179c16789b1e20de3b055adbf15d588", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -2342,7 +2342,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 match tcx.const_eval_resolve(param_env, uneval, None) {\n                     Ok(val) => Self::Val(val, ty),\n                     Err(ErrorHandled::TooGeneric) => self,\n-                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar)),\n+                    Err(ErrorHandled::Reported(guar)) => Self::Ty(tcx.const_error(ty, guar.into())),\n                 }\n             }\n         }"}, {"sha": "a108f6c8947a31e5d3cf54c4659007c1d0345ffd", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -245,7 +245,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ValTree(val?))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n                 EvalMode::Mir => {\n@@ -256,7 +256,7 @@ impl<'tcx> ConstKind<'tcx> {\n                         // can leak through `val` into the const we return.\n                         Ok(val) => Some(Ok(EvalResult::ConstVal(val))),\n                         Err(ErrorHandled::TooGeneric) => None,\n-                        Err(ErrorHandled::Reported(e)) => Some(Err(e)),\n+                        Err(ErrorHandled::Reported(e)) => Some(Err(e.into())),\n                     }\n                 }\n             }"}, {"sha": "cd779b0b43ebd59f83d9574896f0084ac9f04bbd", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -453,6 +453,8 @@ impl<'a> Parser<'a> {\n         //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n         //     `<` (LIFETIME|IDENT) `=` - generic parameter with a default\n         //     `<` const                - generic const parameter\n+        //     `<` IDENT `?`            - RECOVERY for `impl<T ?Bound` missing a `:`, meant to\n+        //                                avoid the `T?` to `Option<T>` recovery for types.\n         // The only truly ambiguous case is\n         //     `<` IDENT `>` `::` IDENT ...\n         // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)\n@@ -463,6 +465,9 @@ impl<'a> Parser<'a> {\n                 || self.look_ahead(start + 1, |t| t.is_lifetime() || t.is_ident())\n                     && self.look_ahead(start + 2, |t| {\n                         matches!(t.kind, token::Gt | token::Comma | token::Colon | token::Eq)\n+                        // Recovery-only branch -- this could be removed,\n+                        // since it only affects diagnostics currently.\n+                            || matches!(t.kind, token::Question)\n                     })\n                 || self.is_keyword_ahead(start + 1, &[kw::Const]))\n     }"}, {"sha": "c053ea222a026d6e17c3104edd8fd4b03ab1daaa", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -3543,10 +3543,6 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         //\n         // Similar thing, for types, happens in `report_errors` above.\n         let report_errors_for_call = |this: &mut Self, parent_err: Spanned<ResolutionError<'a>>| {\n-            if !source.is_call() {\n-                return Some(parent_err);\n-            }\n-\n             // Before we start looking for candidates, we have to get our hands\n             // on the type user is trying to perform invocation on; basically:\n             // we're transforming `HashMap::new` into just `HashMap`."}, {"sha": "183c2401fc3ac6ad612faae63230b6c9a83338a3", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -801,7 +801,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                                             span: tcx.def_span(unevaluated.def),\n                                             unevaluated: unevaluated,\n                                         });\n-                                    Err(ErrorHandled::Reported(reported))\n+                                    Err(ErrorHandled::Reported(reported.into()))\n                                 }\n                                 Err(err) => Err(err),\n                             }"}, {"sha": "bd1ea43a78e9237c3bfd16f02918d21afd4abee6", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -79,7 +79,7 @@ pub fn is_const_evaluatable<'tcx>(\n                             \"Missing value for constant, but no error reported?\",\n                         )))\n                     }\n-                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+                    Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n                     Ok(_) => Ok(()),\n                 }\n             }\n@@ -147,7 +147,7 @@ pub fn is_const_evaluatable<'tcx>(\n \n                 Err(err)\n             }\n-            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+            Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e.into())),\n             Ok(_) => Ok(()),\n         }\n     }"}, {"sha": "2f85c32b5750de4c8337f0d63bd3f5f48641e64d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -615,7 +615,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                         (Err(ErrorHandled::Reported(reported)), _)\n                         | (_, Err(ErrorHandled::Reported(reported))) => ProcessResult::Error(\n                             CodeSelectionError(SelectionError::NotConstEvaluatable(\n-                                NotConstEvaluatable::Error(reported),\n+                                NotConstEvaluatable::Error(reported.into()),\n                             )),\n                         ),\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {"}, {"sha": "1f8a1ecba6e6742a0113c67ebb469e422c05ddde", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -3021,7 +3021,7 @@ impl<'a, K, V, A> CursorMut<'a, K, V, A> {\n         })\n     }\n \n-    /// Returns a mutable reference to the of the element that the cursor is\n+    /// Returns a mutable reference to the key of the element that the cursor is\n     /// currently pointing to.\n     ///\n     /// This returns `None` if the cursor is currently pointing to the"}, {"sha": "e3f81a78eeaf68efdcb26dbab70df92b0690f43a", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -289,7 +289,7 @@ pub fn report_error<'tcx, 'mir>(\n                     (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                 ],\n             InvalidProgram(\n-                InvalidProgramInfo::AlreadyReported(rustc_errors::ErrorGuaranteed { .. })\n+                InvalidProgramInfo::AlreadyReported(_)\n             ) => {\n                 // This got already reported. No point in reporting it again.\n                 return None;"}, {"sha": "893a4dbd4c890a7ba8d9f89f470cc95e265090a8", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -47,7 +47,6 @@ extern crate rustc_ast;\n extern crate rustc_middle;\n extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n-extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_index;\n extern crate rustc_session;"}, {"sha": "434b07443044edfb912ba760002cec340d321e8b", "filename": "tests/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -43,62 +43,6 @@ LL |     println!(\"{:?}\", 0);\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:12\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |            ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:2:20\n-   |\n-LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n-   |\n-   = note: this note originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:14\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |              ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-note: erroneous constant used\n-  --> $DIR/format.rs:8:22\n-   |\n-LL |     println!(\"{:?}\", 0);\n-   |                      ^\n-   |\n-   = note: this note originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "35915a7a606a4ddee8e5b93493b1227d97e03d0c", "filename": "tests/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -6,7 +6,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ constant\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +15,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ constant\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +24,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ constant\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +33,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ constant\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ constant\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ constant\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ constant\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ constant\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ constant\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ constant\n \n fn main() {\n     let _ = ARR;"}, {"sha": "4e503e5a5c0a4df39a204d7e5e31c4679f620d8a", "filename": "tests/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 15, "deletions": 75, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -16,156 +16,96 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:8:18\n-   |\n-LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:25\n+  --> $DIR/const-integer-bool-ops.rs:10:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:18:19\n-   |\n-LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:26\n+  --> $DIR/const-integer-bool-ops.rs:19:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n-   |\n-LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:26\n+  --> $DIR/const-integer-bool-ops.rs:28:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n-   |\n-LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:41:18\n+  --> $DIR/const-integer-bool-ops.rs:37:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:44:19\n-   |\n-LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:42:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:50:20\n-   |\n-LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:53:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:56:20\n-   |\n-LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:59:19\n+  --> $DIR/const-integer-bool-ops.rs:52:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:62:20\n-   |\n-LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:65:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:68:20\n-   |\n-LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:71:19\n+  --> $DIR/const-integer-bool-ops.rs:62:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-note: erroneous constant used\n-  --> $DIR/const-integer-bool-ops.rs:74:20\n-   |\n-LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^\n-\n error: aborting due to 18 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.32bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.32bit.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "61b00be345feee4bb0cf3a42aaa397097a8de029", "filename": "tests/ui/consts/const-mut-refs/issue-76510.64bit.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.64bit.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -19,12 +19,6 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n LL | const S: &'static mut str = &mut \" hello \";\n    |                             ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n-note: erroneous constant used\n-  --> $DIR/issue-76510.rs:11:70\n-   |\n-LL |         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-   |                                                                      ^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0596, E0658, E0764."}, {"sha": "143d2fb6b9a3a1a599f36edcc222f4f1d7d34e83", "filename": "tests/ui/consts/const-mut-refs/issue-76510.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-mut-refs%2Fissue-76510.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -9,7 +9,6 @@ const S: &'static mut str = &mut \" hello \";\n \n const fn trigger() -> [(); unsafe {\n         let s = transmute::<(*const u8, usize), &ManuallyDrop<str>>((S.as_ptr(), 3));\n-        //~^ constant\n         0\n     }] {\n     [(); 0]"}, {"sha": "e77d392e6940282029a11554d11c4c0115a3e6b3", "filename": "tests/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -4,7 +4,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected `(usize,)`, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ constant\n \n fn main() {\n }"}, {"sha": "d5df0df9525c50f44c39f37773fafc6228a08334", "filename": "tests/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -11,12 +11,6 @@ help: use a trailing comma to create a tuple with one element\n LL | const TUP: (usize,) = (5usize << 64,);\n    |                       +            ++\n \n-note: erroneous constant used\n-  --> $DIR/const-tup-index-span.rs:6:18\n-   |\n-LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "7bcfa057019952b50c804b79e932d7e87f4a7294", "filename": "tests/ui/consts/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -9,8 +9,6 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-  //~^ constant\n-  //~| constant\n     z\n }\n "}, {"sha": "b0701bab793c53851c3f855cd287208f5f58e245", "filename": "tests/ui/consts/issue-54954.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-54954.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -16,18 +16,6 @@ LL | |         core::mem::size_of::<T>()\n LL | |     }\n    | |_____- `Tt::const_val` defined here\n \n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:15\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-54954.rs:11:34\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0379, E0790."}, {"sha": "e46c649faf0879a79149de1261666d25469c8a3b", "filename": "tests/ui/consts/issue-56164.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-56164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-56164.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -28,18 +28,6 @@ error: function pointer calls are not allowed in constant functions\n LL |     input()\n    |     ^^^^^^^\n \n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-56164.rs:1:18\n-   |\n-LL | const fn foo() { (||{})() }\n-   |                  ^^^^^^\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0015, E0277."}, {"sha": "f4898fd9732f58837bff2e70ebaffb14c4e70430", "filename": "tests/ui/consts/issue-66693.stderr", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-66693.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -22,17 +22,5 @@ LL |     panic!(&1);\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n-note: erroneous constant used\n-  --> $DIR/issue-66693.rs:11:12\n-   |\n-LL |     panic!(&1);\n-   |            ^^\n-\n error: aborting due to 3 previous errors\n "}, {"sha": "06a330813406a9fe0f5a61de534e8e403854181c", "filename": "tests/ui/enum-discriminant/issue-41394.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -5,7 +5,6 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ const\n }\n \n fn main() {}"}, {"sha": "fa95ca9c18a1004a049da6e67152c0e40be605a0", "filename": "tests/ui/enum-discriminant/issue-41394.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-41394.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -6,12 +6,6 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-note: erroneous constant used\n-  --> $DIR/issue-41394.rs:7:9\n-   |\n-LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0369`."}, {"sha": "b21ff30a27da9212546845e2a038b004140b6dff", "filename": "tests/ui/generic-associated-types/equality-bound.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -36,7 +36,10 @@ error[E0433]: failed to resolve: use of undeclared type `I`\n   --> $DIR/equality-bound.rs:9:41\n    |\n LL | fn sum3<J: Iterator>(i: J) -> i32 where I::Item = i32 {\n-   |                                         ^ use of undeclared type `I`\n+   |                                         ^\n+   |                                         |\n+   |                                         use of undeclared type `I`\n+   |                                         help: a type parameter with a similar name exists: `J`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8cd9a63b808934566d5320b8d08180053c6cb9ac", "filename": "tests/ui/macros/builtin-prelude-no-accidents.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fbuiltin-prelude-no-accidents.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -4,18 +4,21 @@ error[E0433]: failed to resolve: use of undeclared crate or module `env`\n LL |     env::current_dir;\n    |     ^^^ use of undeclared crate or module `env`\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n+  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n+   |\n+LL |     type B = vec::Vec<u8>;\n+   |              ^^^\n+   |              |\n+   |              use of undeclared crate or module `vec`\n+   |              help: a struct with a similar name exists (notice the capitalization): `Vec`\n+\n error[E0433]: failed to resolve: use of undeclared crate or module `panic`\n   --> $DIR/builtin-prelude-no-accidents.rs:6:14\n    |\n LL |     type A = panic::PanicInfo;\n    |              ^^^^^ use of undeclared crate or module `panic`\n \n-error[E0433]: failed to resolve: use of undeclared crate or module `vec`\n-  --> $DIR/builtin-prelude-no-accidents.rs:7:14\n-   |\n-LL |     type B = vec::Vec<u8>;\n-   |              ^^^ use of undeclared crate or module `vec`\n-\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "e34d855a9d4f997d21f52a6ed95c581f587c178e", "filename": "tests/ui/parser/dyn-trait-compatibility.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdyn-trait-compatibility.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n-  --> $DIR/dyn-trait-compatibility.rs:3:11\n-   |\n-LL | type A1 = dyn::dyn;\n-   |           ^^^ use of undeclared crate or module `dyn`\n-\n error[E0412]: cannot find type `dyn` in this scope\n   --> $DIR/dyn-trait-compatibility.rs:1:11\n    |\n@@ -46,6 +40,12 @@ error[E0412]: cannot find type `dyn` in this scope\n LL | type A3 = dyn<<dyn as dyn>::dyn>;\n    |                ^^^ not found in this scope\n \n+error[E0433]: failed to resolve: use of undeclared crate or module `dyn`\n+  --> $DIR/dyn-trait-compatibility.rs:3:11\n+   |\n+LL | type A1 = dyn::dyn;\n+   |           ^^^ use of undeclared crate or module `dyn`\n+\n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0405, E0412, E0433."}, {"sha": "e09c0463045ac1f4698bf709150950120ff5d8db", "filename": "tests/ui/parser/impl-on-unsized-typo.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -0,0 +1,6 @@\n+trait Tr {}\n+\n+impl<T ?Sized> Tr for T {}\n+//~^ ERROR expected one of `,`, `:`, `=`, or `>`, found `?`\n+\n+fn main() {}"}, {"sha": "23dcc1efd68b150b8f22578a41f160a1b39e5b1e", "filename": "tests/ui/parser/impl-on-unsized-typo.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fimpl-on-unsized-typo.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `,`, `:`, `=`, or `>`, found `?`\n+  --> $DIR/impl-on-unsized-typo.rs:3:8\n+   |\n+LL | impl<T ?Sized> Tr for T {}\n+   |        ^ expected one of `,`, `:`, `=`, or `>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "10fcccb030162357e4489769e7e601c8ff27226e", "filename": "tests/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `E`\n-  --> $DIR/pattern-error-continue.rs:33:9\n-   |\n-LL |         E::V => {}\n-   |         ^ use of undeclared type `E`\n-\n error[E0532]: expected tuple struct or tuple variant, found unit variant `A::D`\n   --> $DIR/pattern-error-continue.rs:18:9\n    |\n@@ -56,6 +50,15 @@ note: function defined here\n LL | fn f(_c: char) {}\n    |    ^ --------\n \n+error[E0433]: failed to resolve: use of undeclared type `E`\n+  --> $DIR/pattern-error-continue.rs:33:9\n+   |\n+LL |         E::V => {}\n+   |         ^\n+   |         |\n+   |         use of undeclared type `E`\n+   |         help: an enum with a similar name exists: `A`\n+\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0023, E0308, E0433, E0532."}, {"sha": "68e33f693cef1b847cd1ce49196e6ddc7432db9c", "filename": "tests/ui/resolve/issue-109250.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-109250.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-109250.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109250.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {       //~ HELP consider importing\n+    HashMap::new; //~ ERROR failed to resolve: use of undeclared type `HashMap`\n+}"}, {"sha": "d5b8c08ced7d7d63874322b85d06e2fd46086d8a", "filename": "tests/ui/resolve/issue-109250.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-109250.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-109250.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-109250.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: use of undeclared type `HashMap`\n+  --> $DIR/issue-109250.rs:2:5\n+   |\n+LL |     HashMap::new;\n+   |     ^^^^^^^ use of undeclared type `HashMap`\n+   |\n+help: consider importing this struct\n+   |\n+LL + use std::collections::HashMap;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "00588735b9a5932c78fdfb9b3d3b9057d8492541", "filename": "tests/ui/resolve/issue-50599.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ constant\n }"}, {"sha": "d58b6ca5b5c42dab4179734e55359632190cb5f7", "filename": "tests/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -16,12 +16,6 @@ LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n    |\n \n-note: erroneous constant used\n-  --> $DIR/issue-50599.rs:4:29\n-   |\n-LL |     let mut digits = [0u32; M];\n-   |                             ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "ed157197d17e1a199827da271104f2402480c6a6", "filename": "tests/ui/resolve/resolve-variant-assoc-item.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-variant-assoc-item.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -3,12 +3,26 @@ error[E0433]: failed to resolve: `V` is a variant, not a module\n    |\n LL |     E::V::associated_item;\n    |        ^ `V` is a variant, not a module\n+   |\n+help: there is an enum variant `E::V`; try using the variant's enum\n+   |\n+LL |     E;\n+   |     ~\n \n error[E0433]: failed to resolve: `V` is a variant, not a module\n   --> $DIR/resolve-variant-assoc-item.rs:6:5\n    |\n LL |     V::associated_item;\n    |     ^ `V` is a variant, not a module\n+   |\n+help: there is an enum variant `E::V`; try using the variant's enum\n+   |\n+LL |     E;\n+   |     ~\n+help: an enum with a similar name exists\n+   |\n+LL |     E::associated_item;\n+   |     ~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4b6bc6124dbf301e232d640498f539cfde51fbba", "filename": "tests/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ constant\n }"}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "tests/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -6,12 +6,6 @@ LL |     const l: usize = v.count();\n    |     |\n    |     help: consider using `let` instead of `const`: `let l`\n \n-note: erroneous constant used\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^\n-\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "8b12aa1a393b2d229b83631946ffe767c99a8a2e", "filename": "tests/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -1,9 +1,3 @@\n-error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n-  --> $DIR/type-path-err-node-types.rs:15:5\n-   |\n-LL |     NonExistent::Assoc::<u8>;\n-   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n-\n error[E0412]: cannot find type `Nonexistent` in this scope\n   --> $DIR/type-path-err-node-types.rs:7:12\n    |\n@@ -22,6 +16,12 @@ error[E0425]: cannot find value `nonexistent` in this scope\n LL |     nonexistent.nonexistent::<u8>();\n    |     ^^^^^^^^^^^ not found in this scope\n \n+error[E0433]: failed to resolve: use of undeclared type `NonExistent`\n+  --> $DIR/type-path-err-node-types.rs:15:5\n+   |\n+LL |     NonExistent::Assoc::<u8>;\n+   |     ^^^^^^^^^^^ use of undeclared type `NonExistent`\n+\n error[E0282]: type annotations needed\n   --> $DIR/type-path-err-node-types.rs:23:14\n    |"}, {"sha": "c4fa850a4f9d10005f3053e280d7c0384624b732", "filename": "tests/ui/weird-exprs.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/tests%2Fui%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fweird-exprs.rs?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -5,13 +5,16 @@\n \n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n+#![allow(redundant_semicolons)]\n #![allow(unreachable_code)]\n #![allow(unused_braces, unused_must_use, unused_parens)]\n #![allow(uncommon_codepoints, confusable_idents)]\n+#![allow(unused_imports)]\n #![allow(unreachable_patterns)]\n \n #![recursion_limit = \"256\"]\n \n+extern crate core;\n use std::cell::Cell;\n use std::mem::swap;\n \n@@ -204,6 +207,30 @@ fn closure_matching() {\n     assert!(matches!(x(..), |_| Some(4)));\n }\n \n+fn semisemisemisemisemi() {\n+    ;;;;;;; ;;;;;;; ;;;    ;;; ;;\n+    ;;      ;;      ;;;;  ;;;; ;;\n+    ;;;;;;; ;;;;;   ;; ;;;; ;; ;;\n+         ;; ;;      ;;  ;;  ;; ;;\n+    ;;;;;;; ;;;;;;; ;;      ;; ;;\n+}\n+\n+fn useful_syntax() {\n+    use {{std::{{collections::{{HashMap}}}}}};\n+    use ::{{{{core}, {std}}}};\n+    use {{::{{core as core2}}}};\n+}\n+\n+fn infcx() {\n+    pub mod cx {\n+        pub mod cx {\n+            pub use super::cx;\n+            pub struct Cx;\n+        }\n+    }\n+    let _cx: cx::cx::Cx = cx::cx::cx::cx::cx::Cx;\n+}\n+\n pub fn main() {\n     strange();\n     funny();\n@@ -227,4 +254,7 @@ pub fn main() {\n     function();\n     bathroom_stall();\n     closure_matching();\n+    semisemisemisemisemi();\n+    useful_syntax();\n+    infcx();\n }"}, {"sha": "a5152434d89e61cd5d13b11e9b225cb16db79922", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a673ad6b5746a6256cb898edb8b888163df1872c/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a673ad6b5746a6256cb898edb8b888163df1872c/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a673ad6b5746a6256cb898edb8b888163df1872c", "patch": "@@ -512,6 +512,7 @@ compiler-team = [\n ]\n compiler-team-contributors = [\n     \"@compiler-errors\",\n+    \"@eholk\",\n     \"@jackh726\",\n     \"@TaKO8Ki\",\n     \"@WaffleLapkin\",\n@@ -532,6 +533,7 @@ bootstrap = [\n     \"@Mark-Simulacrum\",\n     \"@albertlarsan68\",\n     \"@ozkanonur\",\n+    \"@clubby789\",\n ]\n infra-ci = [\n     \"@Mark-Simulacrum\","}]}