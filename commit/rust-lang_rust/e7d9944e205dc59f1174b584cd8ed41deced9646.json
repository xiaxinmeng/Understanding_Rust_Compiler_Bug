{"sha": "e7d9944e205dc59f1174b584cd8ed41deced9646", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDk5NDRlMjA1ZGM1OWYxMTc0YjU4NGNkOGVkNDFkZWNlZDk2NDY=", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2020-07-01T13:07:23Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2020-07-01T16:14:03Z"}, "message": "Add feature const_option", "tree": {"sha": "6cc71bd500e61cd62d60d6f71f9b9ff4de013b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc71bd500e61cd62d60d6f71f9b9ff4de013b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d9944e205dc59f1174b584cd8ed41deced9646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d9944e205dc59f1174b584cd8ed41deced9646", "html_url": "https://github.com/rust-lang/rust/commit/e7d9944e205dc59f1174b584cd8ed41deced9646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d9944e205dc59f1174b584cd8ed41deced9646/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d462551a8600e57d8b6f87e71ea56868bc5da6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d462551a8600e57d8b6f87e71ea56868bc5da6cf", "html_url": "https://github.com/rust-lang/rust/commit/d462551a8600e57d8b6f87e71ea56868bc5da6cf"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "2aeb105bca2d1b16e6033883b1fcd4c3a8522292", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e7d9944e205dc59f1174b584cd8ed41deced9646", "patch": "@@ -85,6 +85,7 @@\n #![feature(const_panic)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n+#![feature(const_option)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![cfg_attr(not(bootstrap), feature(const_raw_ptr_comparison))]"}, {"sha": "7ba244214ae03a3dfaad8b6341e5a07b38f3cfdd", "filename": "src/libcore/option.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e7d9944e205dc59f1174b584cd8ed41deced9646", "patch": "@@ -179,8 +179,9 @@ impl<T> Option<T> {\n     /// [`Some`]: #variant.Some\n     #[must_use = \"if you intended to assert that this has a value, consider `.unwrap()` instead\"]\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_some(&self) -> bool {\n+    pub const fn is_some(&self) -> bool {\n         matches!(*self, Some(_))\n     }\n \n@@ -200,8 +201,9 @@ impl<T> Option<T> {\n     #[must_use = \"if you intended to assert that this doesn't have a value, consider \\\n                   `.and_then(|| panic!(\\\"`Option` had a value when expected `None`\\\"))` instead\"]\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_none(&self) -> bool {\n+    pub const fn is_none(&self) -> bool {\n         !self.is_some()\n     }\n \n@@ -259,8 +261,9 @@ impl<T> Option<T> {\n     /// println!(\"still can print text: {:?}\", text);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_ref(&self) -> Option<&T> {\n+    pub const fn as_ref(&self) -> Option<&T> {\n         match *self {\n             Some(ref x) => Some(x),\n             None => None,\n@@ -580,8 +583,9 @@ impl<T> Option<T> {\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n     #[inline]\n+    #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn iter(&self) -> Iter<'_, T> {\n+    pub const fn iter(&self) -> Iter<'_, T> {\n         Iter { inner: Item { opt: self.as_ref() } }\n     }\n "}, {"sha": "fbf20b9db67415434e49cdb1313922b870846efe", "filename": "src/test/ui/consts/const-option.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d9944e205dc59f1174b584cd8ed41deced9646/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-option.rs?ref=e7d9944e205dc59f1174b584cd8ed41deced9646", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+\n+#![feature(const_option)]\n+\n+const X: Option<i32> = Some(32);\n+const Y: Option<&i32> = X.as_ref();\n+\n+const IS_SOME: bool = X.is_some();\n+const IS_NONE: bool = Y.is_none();\n+\n+fn main() {\n+    assert!(IS_SOME);\n+    assert!(!IS_NONE)\n+}"}]}