{"sha": "36d8432a6d808dcd9e792679930729c0ab9a0212", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDg0MzJhNmQ4MDhkY2Q5ZTc5MjY3OTkzMDcyOWMwYWI5YTAyMTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-21T19:52:38Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:42:39Z"}, "message": "Refactoring: added `PatternTypeAnnotation` wrapper around `UserTypeAnnotation` to ease future changes.", "tree": {"sha": "92c640f36621b936372db9d3d5ce6e037eee6438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c640f36621b936372db9d3d5ce6e037eee6438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d8432a6d808dcd9e792679930729c0ab9a0212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d8432a6d808dcd9e792679930729c0ab9a0212", "html_url": "https://github.com/rust-lang/rust/commit/36d8432a6d808dcd9e792679930729c0ab9a0212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d8432a6d808dcd9e792679930729c0ab9a0212/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54681b096ec0a676560907594fb5d4b991078e12", "url": "https://api.github.com/repos/rust-lang/rust/commits/54681b096ec0a676560907594fb5d4b991078e12", "html_url": "https://github.com/rust-lang/rust/commit/54681b096ec0a676560907594fb5d4b991078e12"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "0d456a091c2059789857daec9b6c93c379efa68b", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=36d8432a6d808dcd9e792679930729c0ab9a0212", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     },\n                     ..\n                 },\n-                user_ty: ascription_user_ty,\n+                user_ty: pat_ascription_ty,\n                 user_ty_span,\n             } => {\n                 let place =\n@@ -316,7 +316,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         kind: StatementKind::AscribeUserType(\n                             place,\n                             ty::Variance::Invariant,\n-                            box ascription_user_ty,\n+                            box pat_ascription_ty.user_ty(),\n                         ),\n                     },\n                 );\n@@ -491,7 +491,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub(super) fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n+        mut pattern_user_ty: Option<(PatternTypeAnnotation<'tcx>, Span)>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -500,7 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<(UserTypeAnnotation<'tcx>, Span)>,\n+            Option<(PatternTypeAnnotation<'tcx>, Span)>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -626,7 +626,7 @@ struct Binding<'tcx> {\n struct Ascription<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    user_ty: UserTypeAnnotation<'tcx>,\n+    user_ty: PatternTypeAnnotation<'tcx>,\n }\n \n #[derive(Clone, Debug)]\n@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     kind: StatementKind::AscribeUserType(\n                         ascription.source.clone(),\n                         ty::Variance::Covariant,\n-                        box ascription.user_ty,\n+                        box ascription.user_ty.user_ty(),\n                     ),\n                 },\n             );\n@@ -1470,7 +1470,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<(UserTypeAnnotation<'tcx>, Span)>,\n+        user_var_ty: Option<(PatternTypeAnnotation<'tcx>, Span)>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n@@ -1489,7 +1489,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty: user_var_ty,\n+            user_ty: user_var_ty.map(|(pat_ty, span)|(pat_ty.user_ty(), span)),\n             name: Some(name),\n             source_info,\n             visibility_scope,"}, {"sha": "d89f250ef5bca510ae11eaa1709c40726b8a3a28", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=36d8432a6d808dcd9e792679930729c0ab9a0212", "patch": "@@ -91,7 +91,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     ty: pattern.ty,\n                                     span: pattern.span,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n-                                        user_ty: UserTypeAnnotation::Ty(user_ty),\n+                                        user_ty: PatternTypeAnnotation::from_c_ty(user_ty),\n                                         user_ty_span: ty.span,\n                                         subpattern: pattern\n                                     })"}, {"sha": "11f5ce260030023daef09730023eaed8288692bb", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=36d8432a6d808dcd9e792679930729c0ab9a0212", "patch": "@@ -27,7 +27,7 @@ use self::cx::Cx;\n pub mod cx;\n \n pub mod pattern;\n-pub use self::pattern::{BindingMode, Pattern, PatternKind, FieldPattern};\n+pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternTypeAnnotation, FieldPattern};\n \n mod util;\n "}, {"sha": "7d879db4a5203bcd3dc4037ebc9d755d40244ad1", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d8432a6d808dcd9e792679930729c0ab9a0212/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=36d8432a6d808dcd9e792679930729c0ab9a0212", "patch": "@@ -64,12 +64,26 @@ pub struct Pattern<'tcx> {\n     pub kind: Box<PatternKind<'tcx>>,\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct PatternTypeAnnotation<'tcx>(UserTypeAnnotation<'tcx>);\n+\n+impl<'tcx> PatternTypeAnnotation<'tcx> {\n+    pub(crate) fn from_c_ty(c_ty: ty::CanonicalTy<'tcx>) -> Self {\n+        Self::from_u_ty(UserTypeAnnotation::Ty(c_ty))\n+    }\n+    pub(crate) fn from_u_ty(u_ty: UserTypeAnnotation<'tcx>) -> Self {\n+        PatternTypeAnnotation(u_ty)\n+    }\n+\n+    pub(crate) fn user_ty(self) -> UserTypeAnnotation<'tcx> { self.0 }\n+}\n+\n #[derive(Clone, Debug)]\n pub enum PatternKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n-        user_ty: UserTypeAnnotation<'tcx>,\n+        user_ty: PatternTypeAnnotation<'tcx>,\n         subpattern: Pattern<'tcx>,\n         user_ty_span: Span,\n     },\n@@ -690,9 +704,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             debug!(\"pattern user_ty = {:?} for pattern at {:?}\", user_ty, span);\n \n+            let pat_ty = PatternTypeAnnotation::from_u_ty(user_ty);\n             kind = PatternKind::AscribeUserType {\n                 subpattern,\n-                user_ty,\n+                user_ty: pat_ty,\n                 user_ty_span: span,\n             };\n         }\n@@ -980,7 +995,7 @@ macro_rules! CloneImpls {\n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, &'tcx ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n-    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>\n+    &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>, PatternTypeAnnotation<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPattern<'tcx> {"}]}