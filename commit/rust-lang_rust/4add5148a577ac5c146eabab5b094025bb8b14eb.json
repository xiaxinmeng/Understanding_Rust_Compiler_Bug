{"sha": "4add5148a577ac5c146eabab5b094025bb8b14eb", "node_id": "C_kwDOAAsO6NoAKDRhZGQ1MTQ4YTU3N2FjNWMxNDZlYWJhYjViMDk0MDI1YmI4YjE0ZWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T22:00:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T22:00:31Z"}, "message": "Rollup merge of #100256 - camelid:typeck-ctxt-doc, r=compiler-errors\n\nAdd some high-level docs to `FnCtxt` and `ItemCtxt`\n\nI haven't understood the difference between these before, but\n``@compiler-errors`` helped me clear it up. Hopefully this will help other\npeople who've been confused!\n\nr? `@compiler-errors`", "tree": {"sha": "eda4fc5eefffb1ce7ad151b04653b1370d929dd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda4fc5eefffb1ce7ad151b04653b1370d929dd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4add5148a577ac5c146eabab5b094025bb8b14eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8tj/CRBK7hj4Ov3rIwAABzgIAHF/J6iFKPJdL33DtwsddYAx\nO1yonSvSWyBZSU9mgqKSdJMeVegFp2CzcUOipInDrkRTmnaGTv0b9Wkuh2wxFJmz\nLS0DKzKCUeTydktZWCJMZOKVtrULjuRAn9XxNDTLpGom5piVdWRwL5YUC/D+HQ3+\n3/J/zz7587dO52YeBtGqmyvVd6MfJer3sBOv3Ht4hIB6byNdnVi/Ywf2y6ilkp46\ns865g89Zl8OHuLvgtJXfaRytw3NbEgM/kN7tqAyfHXwFKEmPuLW2XuD0tMad7mER\nlXtkQZnb2Jyy8m2+jpJT0yF2ojfh91Tu3yIt6Vfas2hyf9wpTdWCNJowJf1CNS8=\n=5DE4\n-----END PGP SIGNATURE-----\n", "payload": "tree eda4fc5eefffb1ce7ad151b04653b1370d929dd1\nparent b11b8d6939e6982b1c5ae8b9a26ea92bd951e031\nparent 31a051870b8ab18c798cacded7eb8e0d087a8224\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660082431 +0200\ncommitter GitHub <noreply@github.com> 1660082431 +0200\n\nRollup merge of #100256 - camelid:typeck-ctxt-doc, r=compiler-errors\n\nAdd some high-level docs to `FnCtxt` and `ItemCtxt`\n\nI haven't understood the difference between these before, but\n``@compiler-errors`` helped me clear it up. Hopefully this will help other\npeople who've been confused!\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4add5148a577ac5c146eabab5b094025bb8b14eb", "html_url": "https://github.com/rust-lang/rust/commit/4add5148a577ac5c146eabab5b094025bb8b14eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4add5148a577ac5c146eabab5b094025bb8b14eb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b11b8d6939e6982b1c5ae8b9a26ea92bd951e031", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11b8d6939e6982b1c5ae8b9a26ea92bd951e031", "html_url": "https://github.com/rust-lang/rust/commit/b11b8d6939e6982b1c5ae8b9a26ea92bd951e031"}, {"sha": "31a051870b8ab18c798cacded7eb8e0d087a8224", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a051870b8ab18c798cacded7eb8e0d087a8224", "html_url": "https://github.com/rust-lang/rust/commit/31a051870b8ab18c798cacded7eb8e0d087a8224"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "e008d50aa514a44b3eaf892010bb8ea3c6dc0372", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4add5148a577ac5c146eabab5b094025bb8b14eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4add5148a577ac5c146eabab5b094025bb8b14eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=4add5148a577ac5c146eabab5b094025bb8b14eb", "patch": "@@ -26,6 +26,17 @@ use rustc_trait_selection::traits::{ObligationCause, ObligationCauseCode};\n use std::cell::{Cell, RefCell};\n use std::ops::Deref;\n \n+/// The `FnCtxt` stores type-checking context needed to type-check bodies of\n+/// functions, closures, and `const`s, including performing type inference\n+/// with [`InferCtxt`].\n+///\n+/// This is in contrast to [`ItemCtxt`], which is used to type-check item *signatures*\n+/// and thus does not perform type inference.\n+///\n+/// See [`ItemCtxt`]'s docs for more.\n+///\n+/// [`ItemCtxt`]: crate::collect::ItemCtxt\n+/// [`InferCtxt`]: infer::InferCtxt\n pub struct FnCtxt<'a, 'tcx> {\n     pub(super) body_id: hir::HirId,\n "}, {"sha": "e7c5ecc60ec78c7a01cafd3cee3d8aad1f38839c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4add5148a577ac5c146eabab5b094025bb8b14eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4add5148a577ac5c146eabab5b094025bb8b14eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4add5148a577ac5c146eabab5b094025bb8b14eb", "patch": "@@ -94,7 +94,27 @@ pub fn provide(providers: &mut Providers) {\n ///////////////////////////////////////////////////////////////////////////\n \n /// Context specific to some particular item. This is what implements\n-/// `AstConv`. It has information about the predicates that are defined\n+/// [`AstConv`].\n+///\n+/// # `ItemCtxt` vs `FnCtxt`\n+///\n+/// `ItemCtxt` is primarily used to type-check item signatures and lower them\n+/// from HIR to their [`ty::Ty`] representation, which is exposed using [`AstConv`].\n+/// It's also used for the bodies of items like structs where the body (the fields)\n+/// are just signatures.\n+///\n+/// This is in contrast to [`FnCtxt`], which is used to type-check bodies of\n+/// functions, closures, and `const`s -- anywhere that expressions and statements show up.\n+///\n+/// An important thing to note is that `ItemCtxt` does no inference -- it has no [`InferCtxt`] --\n+/// while `FnCtxt` does do inference.\n+///\n+/// [`FnCtxt`]: crate::check::FnCtxt\n+/// [`InferCtxt`]: rustc_infer::infer::InferCtxt\n+///\n+/// # Trait predicates\n+///\n+/// `ItemCtxt` has information about the predicates that are defined\n /// on the trait. Unfortunately, this predicate information is\n /// available in various different forms at various points in the\n /// process. So we can't just store a pointer to e.g., the AST or the"}]}