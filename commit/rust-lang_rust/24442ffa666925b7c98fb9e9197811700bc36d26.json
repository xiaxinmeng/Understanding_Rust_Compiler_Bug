{"sha": "24442ffa666925b7c98fb9e9197811700bc36d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDQyZmZhNjY2OTI1YjdjOThmYjllOTE5NzgxMTcwMGJjMzZkMjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-24T22:28:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:39Z"}, "message": "add subregion between borrow region and resulting reference", "tree": {"sha": "555eaac91cd6b64f81cbaa64b0a1392f5a21c042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/555eaac91cd6b64f81cbaa64b0a1392f5a21c042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24442ffa666925b7c98fb9e9197811700bc36d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24442ffa666925b7c98fb9e9197811700bc36d26", "html_url": "https://github.com/rust-lang/rust/commit/24442ffa666925b7c98fb9e9197811700bc36d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24442ffa666925b7c98fb9e9197811700bc36d26/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af09f720d60c1226b5d42aaee3cc0c0e67ebe5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/af09f720d60c1226b5d42aaee3cc0c0e67ebe5cc", "html_url": "https://github.com/rust-lang/rust/commit/af09f720d60c1226b5d42aaee3cc0c0e67ebe5cc"}], "stats": {"total": 121, "additions": 113, "deletions": 8}, "files": [{"sha": "307637b2f1d6469108ffc25e3f076460542d828f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=24442ffa666925b7c98fb9e9197811700bc36d26", "patch": "@@ -1637,6 +1637,14 @@ impl fmt::Debug for Location {\n }\n \n impl Location {\n+    /// Returns the location immediately after this one within the enclosing block.\n+    ///\n+    /// Note that if this location represents a terminator, then the\n+    /// resulting location would be out of bounds and invalid.\n+    pub fn successor_within_block(&self) -> Location {\n+        Location { block: self.block, statement_index: self.statement_index + 1 }\n+    }\n+\n     pub fn dominates(&self, other: &Location, dominators: &Dominators<BasicBlock>) -> bool {\n         if self.block == other.block {\n             self.statement_index <= other.statement_index"}, {"sha": "1acbd72a47df77958221441b5cb4dd590fe7ac2c", "filename": "src/librustc_mir/transform/nll/constraint_generation.rs", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs?ref=24442ffa666925b7c98fb9e9197811700bc36d26", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::{Location, Mir};\n+use rustc::mir::{BasicBlock, BorrowKind, Location, Lvalue, Mir, Rvalue, Statement, StatementKind};\n use rustc::mir::transform::MirSource;\n+use rustc::mir::visit::Visitor;\n use rustc::infer::InferCtxt;\n use rustc::traits::{self, ObligationCause};\n use rustc::ty::{self, Ty};\n@@ -38,18 +39,18 @@ pub(super) fn generate_constraints<'a, 'gcx, 'tcx>(\n     }.add_constraints();\n }\n \n-struct ConstraintGeneration<'constrain, 'gcx: 'tcx, 'tcx: 'constrain> {\n-    infcx: &'constrain InferCtxt<'constrain, 'gcx, 'tcx>,\n-    regioncx: &'constrain mut RegionInferenceContext,\n-    mir: &'constrain Mir<'tcx>,\n-    liveness: &'constrain LivenessResults,\n+struct ConstraintGeneration<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n+    infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n+    regioncx: &'cx mut RegionInferenceContext,\n+    mir: &'cx Mir<'tcx>,\n+    liveness: &'cx LivenessResults,\n     mir_source: MirSource,\n }\n \n-impl<'constrain, 'gcx, 'tcx> ConstraintGeneration<'constrain, 'gcx, 'tcx> {\n+impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n     fn add_constraints(&mut self) {\n-        // To start, add the liveness constraints.\n         self.add_liveness_constraints();\n+        self.add_borrow_constraints();\n     }\n \n     /// Liveness constraints:\n@@ -172,4 +173,50 @@ impl<'constrain, 'gcx, 'tcx> ConstraintGeneration<'constrain, 'gcx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn add_borrow_constraints(&mut self) {\n+        self.visit_mir(self.mir);\n+    }\n+\n+    fn add_borrow_constraint(\n+        &mut self,\n+        location: Location,\n+        destination_lv: &Lvalue<'tcx>,\n+        borrow_region: ty::Region<'tcx>,\n+        _borrow_kind: BorrowKind,\n+        _borrowed_lv: &Lvalue<'tcx>,\n+    ) {\n+        let tcx = self.infcx.tcx;\n+        let destination_ty = destination_lv.ty(self.mir, tcx).to_ty(tcx);\n+\n+        let destination_region = match destination_ty.sty {\n+            ty::TyRef(r, _) => r,\n+            _ => bug!()\n+        };\n+\n+        self.regioncx.add_outlives(borrow_region.to_region_index(),\n+                                   destination_region.to_region_index(),\n+                                   location.successor_within_block());\n+    }\n+}\n+\n+impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cx, 'gcx, 'tcx> {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &Statement<'tcx>,\n+                       location: Location) {\n+        // Look for a statement like:\n+        //\n+        //     D = & L\n+        //\n+        // where D is the path to which we are assigning, and\n+        // L is the path that is borrowed.\n+        if let StatementKind::Assign(ref destination_lv, ref rv) = statement.kind {\n+            if let Rvalue::Ref(region, bk, ref borrowed_lv) = *rv {\n+                self.add_borrow_constraint(location, destination_lv, region, bk, borrowed_lv);\n+            }\n+        }\n+\n+        self.super_statement(block, statement, location);\n+    }\n }"}, {"sha": "3ab83a8eec32c4107bbf2070fd01bdc54c914c70", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=24442ffa666925b7c98fb9e9197811700bc36d26", "patch": "@@ -31,6 +31,7 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.node12.nll.0.mir\n+// | R0: {bb1[1], bb2[0], bb2[1]}\n // | R1: {bb1[1], bb2[0], bb2[1]}\n // ...\n //             let _2: &'_#1r usize;"}, {"sha": "eb904af39ac06545cb4614707f275d5a4c3f16cd", "filename": "src/test/mir-opt/nll/region-liveness-two-disjoint-uses.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24442ffa666925b7c98fb9e9197811700bc36d26/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs?ref=24442ffa666925b7c98fb9e9197811700bc36d26", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for the subregion constraints. In this case, the region R3 on\n+// `p` includes two disjoint regions of the control-flow graph. The\n+// borrows in `&v[0]` and `&v[1]` each (in theory) have to outlive R3,\n+// but only at a particular point, and hence they wind up including\n+// distinct regions.\n+\n+// compile-flags:-Znll -Zverbose\n+//                     ^^^^^^^^^ force compiler to dump more region information\n+\n+#![allow(warnings)]\n+\n+fn use_x(_: usize) -> bool { true }\n+\n+fn main() {\n+    let mut v = [1, 2, 3];\n+    let mut p = &v[0];\n+    if true {\n+        use_x(*p);\n+    } else {\n+        use_x(22);\n+    }\n+\n+    p = &v[1];\n+    use_x(*p);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node12.nll.0.mir\n+// | R0: {bb1[1], bb2[0], bb2[1]}\n+// ...\n+// | R2: {bb7[2], bb7[3], bb7[4]}\n+// | R3: {bb1[1], bb2[0], bb2[1], bb7[2], bb7[3], bb7[4]}\n+// ...\n+// let mut _2: &'_#3r usize;\n+// ...\n+// _2 = &'_#0r _1[_3];\n+// ...\n+// _2 = &'_#2r (*_10);\n+// END rustc.node12.nll.0.mir"}]}