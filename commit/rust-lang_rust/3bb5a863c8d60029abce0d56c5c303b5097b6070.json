{"sha": "3bb5a863c8d60029abce0d56c5c303b5097b6070", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYjVhODYzYzhkNjAwMjlhYmNlMGQ1NmM1YzMwM2I1MDk3YjYwNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T23:50:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T23:50:39Z"}, "message": "Auto merge of #74005 - estebank:type-ascription-redux, r=petrochenkov\n\nClean up errors in typeck and resolve\n\n* Tweak ordering of suggestions\n* Do not suggest similarly named enclosing item\n* Point at item definition in foreign crates\n* Add missing primary label\n\nCC #34255.", "tree": {"sha": "418f0b6ca67a6218cf1beb10ebdf04cdd3b958b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418f0b6ca67a6218cf1beb10ebdf04cdd3b958b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bb5a863c8d60029abce0d56c5c303b5097b6070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bb5a863c8d60029abce0d56c5c303b5097b6070", "html_url": "https://github.com/rust-lang/rust/commit/3bb5a863c8d60029abce0d56c5c303b5097b6070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bb5a863c8d60029abce0d56c5c303b5097b6070/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84", "html_url": "https://github.com/rust-lang/rust/commit/770bd3d1d03f0de2e27b1ae6a0604597d0e26f84"}, {"sha": "54f1b4313013ef6993e070aeb6d71ac0cb269113", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f1b4313013ef6993e070aeb6d71ac0cb269113", "html_url": "https://github.com/rust-lang/rust/commit/54f1b4313013ef6993e070aeb6d71ac0cb269113"}], "stats": {"total": 371, "additions": 225, "deletions": 146}, "files": [{"sha": "de92204a7c2f07e33b875a264e12e33ce351f321", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -942,17 +942,6 @@ impl<'a> Resolver<'a> {\n             Some(suggestion) if suggestion.candidate == kw::Underscore => return false,\n             Some(suggestion) => suggestion,\n         };\n-        let msg = format!(\n-            \"{} {} with a similar name exists\",\n-            suggestion.res.article(),\n-            suggestion.res.descr()\n-        );\n-        err.span_suggestion(\n-            span,\n-            &msg,\n-            suggestion.candidate.to_string(),\n-            Applicability::MaybeIncorrect,\n-        );\n         let def_span = suggestion.res.opt_def_id().and_then(|def_id| match def_id.krate {\n             LOCAL_CRATE => self.opt_span(def_id),\n             _ => Some(\n@@ -961,16 +950,48 @@ impl<'a> Resolver<'a> {\n                     .guess_head_span(self.cstore().get_span_untracked(def_id, self.session)),\n             ),\n         });\n-        if let Some(span) = def_span {\n+        if let Some(def_span) = def_span {\n+            if span.overlaps(def_span) {\n+                // Don't suggest typo suggestion for itself like in the followoing:\n+                // error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n+                //   --> $DIR/issue-64792-bad-unicode-ctor.rs:3:14\n+                //    |\n+                // LL | struct X {}\n+                //    | ----------- `X` defined here\n+                // LL |\n+                // LL | const Y: X = X(\"\u00f6\");\n+                //    | -------------^^^^^^- similarly named constant `Y` defined here\n+                //    |\n+                // help: use struct literal syntax instead\n+                //    |\n+                // LL | const Y: X = X {};\n+                //    |              ^^^^\n+                // help: a constant with a similar name exists\n+                //    |\n+                // LL | const Y: X = Y(\"\u00f6\");\n+                //    |              ^\n+                return false;\n+            }\n             err.span_label(\n-                self.session.source_map().guess_head_span(span),\n+                self.session.source_map().guess_head_span(def_span),\n                 &format!(\n                     \"similarly named {} `{}` defined here\",\n                     suggestion.res.descr(),\n                     suggestion.candidate.as_str(),\n                 ),\n             );\n         }\n+        let msg = format!(\n+            \"{} {} with a similar name exists\",\n+            suggestion.res.article(),\n+            suggestion.res.descr()\n+        );\n+        err.span_suggestion(\n+            span,\n+            &msg,\n+            suggestion.candidate.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n         true\n     }\n "}, {"sha": "dcab0858a75aeb86d38d3f1e52e1b01bea1d5963", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -12,7 +12,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder}\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n@@ -88,6 +88,18 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n }\n \n impl<'a> LateResolutionVisitor<'a, '_, '_> {\n+    fn def_span(&self, def_id: DefId) -> Option<Span> {\n+        match def_id.krate {\n+            LOCAL_CRATE => self.r.opt_span(def_id),\n+            _ => Some(\n+                self.r\n+                    .session\n+                    .source_map()\n+                    .guess_head_span(self.r.cstore().get_span_untracked(def_id, self.r.session)),\n+            ),\n+        }\n+    }\n+\n     /// Handles error reporting for `smart_resolve_path_fragment` function.\n     /// Creates base error and amends it with one short label and possibly some longer helps/notes.\n     pub(crate) fn smart_resolve_report_errors(\n@@ -339,8 +351,6 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         // Try Levenshtein algorithm.\n         let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected, span);\n-        let levenshtein_worked = self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n-\n         // Try context-dependent help if relaxed lookup didn't work.\n         if let Some(res) = res {\n             if self.smart_resolve_context_dependent_help(\n@@ -351,14 +361,18 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 &path_str,\n                 &fallback_label,\n             ) {\n+                // We do this to avoid losing a secondary span when we override the main error span.\n+                self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n                 return (err, candidates);\n             }\n         }\n \n-        // Fallback label.\n-        if !levenshtein_worked {\n+        if !self.type_ascription_suggestion(&mut err, base_span)\n+            && !self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span)\n+        {\n+            // Fallback label.\n             err.span_label(base_span, fallback_label);\n-            self.type_ascription_suggestion(&mut err, base_span);\n+\n             match self.diagnostic_metadata.current_let_binding {\n                 Some((pat_sp, Some(ty_sp), None)) if ty_sp.contains(base_span) && could_be_expr => {\n                     err.span_suggestion_short(\n@@ -518,6 +532,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     }),\n                 ) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n+                        err.span_label(span, fallback_label);\n                         err.multipart_suggestion(\n                             \"surround the struct literal with parentheses\",\n                             vec![\n@@ -550,7 +565,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         }\n                         _ => span,\n                     };\n-                    if let Some(span) = self.r.opt_span(def_id) {\n+                    if let Some(span) = self.def_span(def_id) {\n                         err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                     }\n                     let (tail, descr, applicability) = match source {\n@@ -581,12 +596,15 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                         applicability,\n                     );\n                 }\n-                _ => {}\n+                _ => {\n+                    err.span_label(span, fallback_label);\n+                }\n             }\n         };\n \n         match (res, source) {\n             (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n+                err.span_label(span, fallback_label);\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n@@ -602,7 +620,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 if nightly_options::is_nightly_build() {\n                     let msg = \"you might have meant to use `#![feature(trait_alias)]` instead of a \\\n                                `type` alias\";\n-                    if let Some(span) = self.r.opt_span(def_id) {\n+                    if let Some(span) = self.def_span(def_id) {\n                         err.span_help(span, msg);\n                     } else {\n                         err.help(msg);\n@@ -680,7 +698,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 bad_struct_syntax_suggestion(def_id);\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n-                if let Some(span) = self.r.opt_span(def_id) {\n+                if let Some(span) = self.def_span(def_id) {\n                     err.span_label(span, &format!(\"`{}` defined here\", path_str));\n                 }\n                 err.span_label(span, format!(\"did you mean `{}( /* fields */ )`?\", path_str));\n@@ -869,7 +887,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         start.to(sm.next_point(start))\n     }\n \n-    fn type_ascription_suggestion(&self, err: &mut DiagnosticBuilder<'_>, base_span: Span) {\n+    fn type_ascription_suggestion(&self, err: &mut DiagnosticBuilder<'_>, base_span: Span) -> bool {\n         let sm = self.r.session.source_map();\n         let base_snippet = sm.span_to_snippet(base_span);\n         if let Some(&sp) = self.diagnostic_metadata.current_type_ascription.last() {\n@@ -939,9 +957,11 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             \"expecting a type here because of type ascription\",\n                         );\n                     }\n+                    return show_label;\n                 }\n             }\n         }\n+        false\n     }\n \n     fn find_module(&mut self, def_id: DefId) -> Option<(Module<'a>, ImportSuggestion)> {"}, {"sha": "47617c7849f4a3d4e8a774208ea4fe910924bfbf", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -2,10 +2,7 @@ error[E0573]: expected type, found const parameter `C`\n   --> $DIR/struct-with-invalid-const-param.rs:4:23\n    |\n LL | struct S<const C: u8>(C);\n-   | ----------------------^--\n-   | |                     |\n-   | |                     help: a struct with a similar name exists: `S`\n-   | similarly named struct `S` defined here\n+   |                       ^ not a type\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/struct-with-invalid-const-param.rs:1:12"}, {"sha": "6292ed446978deed996fcd7e7ff972f51659b14e", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -12,14 +12,14 @@ LL |     let e1 = Empty1;\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n    |\n-help: a unit struct with a similar name exists\n-   |\n-LL |     let e1 = XEmpty2;\n-   |              ^^^^^^^\n help: use struct literal syntax instead\n    |\n LL |     let e1 = Empty1 {};\n    |              ^^^^^^^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2;\n+   |              ^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n@@ -29,15 +29,20 @@ LL | struct Empty1 {}\n ...\n LL |     let e1 = Empty1();\n    |              ^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n-help: a unit struct with a similar name exists\n+LL | pub struct XEmpty2;\n+   | ------------------- similarly named unit struct `XEmpty2` defined here\n    |\n-LL |     let e1 = XEmpty2();\n-   |              ^^^^^^^\n help: use struct literal syntax instead\n    |\n LL |     let e1 = Empty1 {};\n    |              ^^^^^^^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2();\n+   |              ^^^^^^^\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n@@ -63,34 +68,43 @@ error[E0423]: expected value, found struct `XEmpty1`\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n    |\n-help: a unit struct with a similar name exists\n-   |\n-LL |     let xe1 = XEmpty2;\n-   |               ^^^^^^^\n help: use struct literal syntax instead\n    |\n LL |     let xe1 = XEmpty1 {};\n    |               ^^^^^^^^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2;\n+   |               ^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n    |\n LL |     let xe1 = XEmpty1();\n    |               ^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n-help: a unit struct with a similar name exists\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n+LL | pub struct XEmpty2;\n+   | ------------------- similarly named unit struct `XEmpty2` defined here\n    |\n-LL |     let xe1 = XEmpty2();\n-   |               ^^^^^^^\n help: use struct literal syntax instead\n    |\n LL |     let xe1 = XEmpty1 {};\n    |               ^^^^^^^^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2();\n+   |               ^^^^^^^\n \n error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19"}, {"sha": "3570012fc37523583ff27b0b8670805f3d2f3d2c", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -13,19 +13,21 @@ error[E0532]: expected unit struct, unit variant or constant, found struct varia\n LL |         XE::XEmpty3 => ()\n    |         ^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/empty-struct.rs:7:5\n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n    |\n-help: a unit variant with a similar name exists\n-   |\n-LL |         XE::XEmpty4 => ()\n-   |             ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: a unit variant with a similar name exists\n+   |\n+LL |         XE::XEmpty4 => ()\n+   |             ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3bd3f6a9644a12f02c3252564df7beb5a5fe67a2", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -6,30 +6,43 @@ LL | struct Empty1 {}\n ...\n LL |         Empty1() => ()\n    |         ^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n-help: a tuple struct with a similar name exists\n+LL | pub struct XEmpty6();\n+   | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |\n-LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         Empty1 {} => ()\n    |         ^^^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n    |\n LL |         XEmpty1() => ()\n    |         ^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n-help: a tuple struct with a similar name exists\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n+LL | pub struct XEmpty2;\n+LL | pub struct XEmpty6();\n+   | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |\n-LL |         XEmpty6() => ()\n-   |         ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         XEmpty1 {} => ()\n    |         ^^^^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n@@ -39,30 +52,43 @@ LL | struct Empty1 {}\n ...\n LL |         Empty1(..) => ()\n    |         ^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:3:1\n    |\n-help: a tuple struct with a similar name exists\n+LL | pub struct XEmpty6();\n+   | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |\n-LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         Empty1 {} => ()\n    |         ^^^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n    |\n LL |         XEmpty1(..) => ()\n    |         ^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:1:1\n    |\n-help: a tuple struct with a similar name exists\n+LL | pub struct XEmpty1 {}\n+   | ------------------ `XEmpty1` defined here\n+LL | pub struct XEmpty2;\n+LL | pub struct XEmpty6();\n+   | --------------------- similarly named tuple struct `XEmpty6` defined here\n    |\n-LL |         XEmpty6(..) => ()\n-   |         ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         XEmpty1 {} => ()\n    |         ^^^^^^^^^^\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aac872ba0eccafe48bcd27fd123d479373b7ce10", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -12,15 +12,23 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n    |\n LL |         XE::XEmpty3() => ()\n    |         ^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n-help: a tuple variant with a similar name exists\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n+LL |     XEmpty4,\n+LL |     XEmpty5(),\n+   |     --------- similarly named tuple variant `XEmpty5` defined here\n    |\n-LL |         XE::XEmpty5() => ()\n-   |             ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5() => ()\n+   |             ^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n@@ -36,15 +44,23 @@ error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::\n    |\n LL |         XE::XEmpty3(..) => ()\n    |         ^^^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/empty-struct.rs:6:5\n    |\n-help: a tuple variant with a similar name exists\n+LL |     XEmpty3 {},\n+   |     ------- `XE::XEmpty3` defined here\n+LL |     XEmpty4,\n+LL |     XEmpty5(),\n+   |     --------- similarly named tuple variant `XEmpty5` defined here\n    |\n-LL |         XE::XEmpty5(..) => ()\n-   |             ^^^^^^^\n help: use struct pattern syntax instead\n    |\n LL |         XE::XEmpty3 { /* fields */ } => ()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5(..) => ()\n+   |             ^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7b21d31635cf1239014fa4e7c0582db920306dbd", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -38,6 +38,8 @@ LL |         XE::XEmpty5 => (),\n    |\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n+LL |     XEmpty5(),\n+   |     --------- `XE::XEmpty5` defined here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a9aecb520b228da49c07ebc4fbfddc0bb16aee0d", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -34,21 +34,24 @@ LL |     struct Foo { a: bool };\n LL | \n LL |     let f = Foo();\n    |             ^^^^^\n+...\n+LL | fn foo() {\n+   | -------- similarly named function `foo` defined here\n    |\n-help: a function with a similar name exists\n-   |\n-LL |     let f = foo();\n-   |             ^^^\n help: use struct literal syntax instead\n    |\n LL |     let f = Foo { a: val };\n    |             ^^^^^^^^^^^^^^\n+help: a function with a similar name exists\n+   |\n+LL |     let f = foo();\n+   |             ^^^\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8\n    |\n LL |     if T {} == T {} { println!(\"Ok\"); }\n-   |        ^\n+   |        ^ not a value\n    |\n help: surround the struct literal with parentheses\n    |"}, {"sha": "94256b2eb79aba41502ed85ec3b18c1807556ba3", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -8,7 +8,7 @@ error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n LL |     semitransparent;\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |\n@@ -19,7 +19,7 @@ error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n LL |     opaque;\n-   |     ^^^^^^\n+   |     ^^^^^^ not a value\n    |\n help: use `!` to invoke the macro\n    |"}, {"sha": "56281938559d0fc7dbe0411da859b7a07ffc5fe9", "filename": "src/test/ui/issues/issue-31845.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -1,10 +1,8 @@\n error[E0425]: cannot find function `g` in this scope\n   --> $DIR/issue-31845.rs:7:12\n    |\n-LL |         fn h() {\n-   |         ------ similarly named function `h` defined here\n LL |            g();\n-   |            ^ help: a function with a similar name exists: `h`\n+   |            ^ not found in this scope\n \n error: aborting due to previous error\n "}, {"sha": "c3dda704b0e9363e168db1c0acd48e8dd9b9760b", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -5,16 +5,7 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | \n LL | const Y: X = X(\"\u00f6\");\n-   |              ^^^^^^\n-   |\n-help: a constant with a similar name exists\n-   |\n-LL | const Y: X = Y(\"\u00f6\");\n-   |              ^\n-help: use struct literal syntax instead\n-   |\n-LL | const Y: X = X {};\n-   |              ^^^^\n+   |              ^^^^^^ help: use struct literal syntax instead: `X {}`\n \n error: aborting due to previous error\n "}, {"sha": "ded3173f45b2e1c380e44a751cb9a5ab47f54833", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -53,14 +53,14 @@ LL |         TV(),\n LL |     check(m7::V);\n    |           ^^^^^\n    |\n-help: a tuple variant with a similar name exists\n-   |\n-LL |     check(m7::TV);\n-   |               ^^\n help: use struct literal syntax instead\n    |\n LL |     check(m7::V {});\n    |           ^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     check(m7::TV);\n+   |               ^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;\n@@ -74,19 +74,21 @@ error[E0423]: expected value, found struct variant `xm7::V`\n LL |     check(xm7::V);\n    |           ^^^^^^\n    | \n-  ::: $DIR/auxiliary/namespace-mix.rs:7:9\n+  ::: $DIR/auxiliary/namespace-mix.rs:6:9\n    |\n+LL |         V {},\n+   |         - `xm7::V` defined here\n LL |         TV(),\n    |         ---- similarly named tuple variant `TV` defined here\n    |\n-help: a tuple variant with a similar name exists\n-   |\n-LL |     check(xm7::TV);\n-   |                ^^\n help: use struct literal syntax instead\n    |\n LL |     check(xm7::V { /* fields */ });\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     check(xm7::TV);\n+   |                ^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;"}, {"sha": "c8057d85ed1d07a062f99ea2562c425097cdb65d", "filename": "src/test/ui/privacy/legacy-ctor-visibility.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Flegacy-ctor-visibility.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -1,10 +1,8 @@\n error[E0423]: expected function, tuple struct or tuple variant, found struct `S`\n   --> $DIR/legacy-ctor-visibility.rs:9:13\n    |\n-LL |         fn f() {\n-   |         ------ similarly named function `f` defined here\n LL |             S(10);\n-   |             ^ help: a function with a similar name exists: `f`\n+   |             ^\n \n error: aborting due to previous error\n "}, {"sha": "97b2f22e161ec28d287333680dbeb5de8712466a", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -44,12 +44,8 @@ error[E0412]: cannot find type `Y` in this scope\n   --> $DIR/attributes-on-modules-fail.rs:10:14\n    |\n LL |     type A = Y;\n-   |     ---------^- similarly named type alias `A` defined here\n+   |              ^ not found in this scope\n    |\n-help: a type alias with a similar name exists\n-   |\n-LL |     type A = A;\n-   |              ^\n help: consider importing this struct\n    |\n LL |     use Y;\n@@ -59,12 +55,8 @@ error[E0412]: cannot find type `X` in this scope\n   --> $DIR/attributes-on-modules-fail.rs:14:10\n    |\n LL | type A = X;\n-   | ---------^- similarly named type alias `A` defined here\n-   |\n-help: a type alias with a similar name exists\n+   |          ^ not found in this scope\n    |\n-LL | type A = A;\n-   |          ^\n help: consider importing this struct\n    |\n LL | use m::X;"}, {"sha": "6c519d73480252dda6b224ffa7e111beb5c87219", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -12,6 +12,11 @@ error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Mad\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n+   | \n+  ::: $DIR/auxiliary/issue-19452-aux.rs:2:5\n+   |\n+LL |     Madoka { age: u32 }\n+   |     ------ `issue_19452_aux::Homura::Madoka` defined here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72d66b0f6a2a16e4947f6140c33daebf71e40d19", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -7,14 +7,14 @@ LL | struct Handle {}\n LL |         handle: Handle\n    |                 ^^^^^^\n    |\n-help: a local variable with a similar name exists\n-   |\n-LL |         handle: handle\n-   |                 ^^^^^^\n help: use struct literal syntax instead\n    |\n LL |         handle: Handle {}\n    |                 ^^^^^^^^^\n+help: a local variable with a similar name exists\n+   |\n+LL |         handle: handle\n+   |                 ^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f1ed7aaa86779ee9617eb3819d2ee104c2c40256", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -16,16 +16,9 @@ LL |         m::Z::Unit;\n error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n-LL |     fn f() {\n-   |     ------ similarly named function `f` defined here\n-...\n LL |         Z;\n    |         ^\n    |\n-help: a function with a similar name exists\n-   |\n-LL |         f;\n-   |         ^\n help: try using one of the enum's variants\n    |\n LL |         m::Z::Fn;\n@@ -55,10 +48,6 @@ LL |     fn f() {\n LL |     let _: E = m::E;\n    |                ^^^^\n    |\n-help: a function with a similar name exists\n-   |\n-LL |     let _: E = m::f;\n-   |                   ^\n help: try using one of the enum's variants\n    |\n LL |     let _: E = E::Fn;\n@@ -67,6 +56,10 @@ LL |     let _: E = E::Struct;\n    |                ^^^^^^^^^\n LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n+help: a function with a similar name exists\n+   |\n+LL |     let _: E = m::f;\n+   |                   ^\n help: consider importing one of these items instead\n    |\n LL | use std::f32::consts::E;"}, {"sha": "7d35ce7e65e5879e1bfedd3b0a3c7ade8d9f6cdf", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -2,7 +2,7 @@ error[E0423]: expected function, found macro `assert`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n LL |     assert(true);\n-   |     ^^^^^^\n+   |     ^^^^^^ not a function\n    |\n help: use `!` to invoke the macro\n    |"}, {"sha": "2d35159ec9a22b3afda928a98bac6842f8e86259", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -31,14 +31,14 @@ LL |     pub const I: i32 = 1;\n LL |     a::b.J\n    |     ^^^^\n    |\n-help: a constant with a similar name exists\n-   |\n-LL |     a::I.J\n-   |        ^\n help: use the path separator to refer to an item\n    |\n LL |     a::b::J\n    |\n+help: a constant with a similar name exists\n+   |\n+LL |     a::I.J\n+   |        ^\n \n error[E0423]: expected value, found module `a`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:37:5\n@@ -68,14 +68,14 @@ LL |     pub const I: i32 = 1;\n LL |     a::b.f()\n    |     ^^^^\n    |\n-help: a constant with a similar name exists\n-   |\n-LL |     a::I.f()\n-   |        ^\n help: use the path separator to refer to an item\n    |\n LL |     a::b::f()\n    |     ^^^^^^^\n+help: a constant with a similar name exists\n+   |\n+LL |     a::I.f()\n+   |        ^\n \n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:50:5"}, {"sha": "a2252d4e4d2822943a42d3e28d5b2366f8ff1d23", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -46,7 +46,7 @@ error[E0423]: expected value, found struct variant `E::V`\n   --> $DIR/struct-literal-variant-in-if.rs:10:13\n    |\n LL |     if x == E::V { field } {}\n-   |             ^^^^\n+   |             ^^^^ not a value\n    |\n help: surround the struct literal with parentheses\n    |"}, {"sha": "9b2febb1393e13524f4f1538c0551037a146a894", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -9,14 +9,14 @@ LL |     B { a: usize },\n LL |     let _: E = E::B;\n    |                ^^^^\n    |\n-help: a tuple variant with a similar name exists\n-   |\n-LL |     let _: E = E::A;\n-   |                   ^\n help: use struct literal syntax instead\n    |\n LL |     let _: E = E::B { a: val };\n    |                ^^^^^^^^^^^^^^^\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     let _: E = E::A;\n+   |                   ^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:29:20"}, {"sha": "78cdfb2cc7f0467c5c361e4edc316f4232941c23", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -11,7 +11,7 @@ error[E0574]: expected struct, variant or union type, found macro `try`\n   --> $DIR/try-block-in-edition2015.rs:4:33\n    |\n LL |     let try_result: Option<_> = try {\n-   |                                 ^^^\n+   |                                 ^^^ not a struct, variant or union type\n    |\n    = note: if you want the `try` keyword, you need to be in the 2018 edition\n help: use `!` to invoke the macro"}, {"sha": "d78fd08fd606559bd2c4ea44da72d9d06977747f", "filename": "src/test/ui/type/type-ascription-with-fn-call.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-with-fn-call.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -4,10 +4,7 @@ error[E0573]: expected type, found function `f`\n LL |     f()  :\n    |          - help: maybe you meant to write `;` here\n LL |     f();\n-   |     ^^^\n-   |     |\n-   |     not a type\n-   |     expecting a type here because of type ascription\n+   |     ^^^ expecting a type here because of type ascription\n \n error: aborting due to previous error\n "}, {"sha": "652c472c0bcfe54c21756cd8fc522cfb1aa25bcb", "filename": "src/test/ui/ui-testing-optout.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -2,10 +2,7 @@ error[E0412]: cannot find type `B` in this scope\n  --> $DIR/ui-testing-optout.rs:4:10\n   |\n 4 | type A = B;\n-  | ---------^-\n-  | |        |\n-  | |        help: a type alias with a similar name exists: `A`\n-  | similarly named type alias `A` defined here\n+  |          ^ not found in this scope\n \n error[E0412]: cannot find type `D` in this scope\n  --> $DIR/ui-testing-optout.rs:7:10"}, {"sha": "3dc8b90795c4d5522738c88fa891bd4a2af273a1", "filename": "src/test/ui/xcrate/xcrate-unit-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bb5a863c8d60029abce0d56c5c303b5097b6070/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr?ref=3bb5a863c8d60029abce0d56c5c303b5097b6070", "patch": "@@ -3,6 +3,11 @@ error[E0423]: expected value, found struct `xcrate_unit_struct::StructWithFields\n    |\n LL |     let _ = xcrate_unit_struct::StructWithFields;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `xcrate_unit_struct::StructWithFields { foo: val }`\n+   | \n+  ::: $DIR/auxiliary/xcrate_unit_struct.rs:20:1\n+   |\n+LL | pub struct StructWithFields {\n+   | --------------------------- `xcrate_unit_struct::StructWithFields` defined here\n \n error: aborting due to previous error\n "}]}