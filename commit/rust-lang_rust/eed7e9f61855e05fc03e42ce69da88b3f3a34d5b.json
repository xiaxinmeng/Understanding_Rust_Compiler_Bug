{"sha": "eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "node_id": "C_kwDOAAsO6NoAKGVlZDdlOWY2MTg1NWUwNWZjMDNlNDJjZTY5ZGE4OGIzZjNhMzRkNWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-13T21:54:33Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-13T22:36:33Z"}, "message": "Merge cargo lints", "tree": {"sha": "e646def18f4a86c0b3b95be5f1e05a4e4cba1dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e646def18f4a86c0b3b95be5f1e05a4e4cba1dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "html_url": "https://github.com/rust-lang/rust/commit/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37d6eed067eb6fb4c126b4ac3c09499483071ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37d6eed067eb6fb4c126b4ac3c09499483071ec", "html_url": "https://github.com/rust-lang/rust/commit/c37d6eed067eb6fb4c126b4ac3c09499483071ec"}], "stats": {"total": 953, "additions": 474, "deletions": 479}, "files": [{"sha": "e0442dda479d75c89023dde50eb2ca669a955356", "filename": "clippy_lints/src/cargo/common_metadata.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fcommon_metadata.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -0,0 +1,54 @@\n+//! lint on missing cargo common metadata\n+\n+use cargo_metadata::Metadata;\n+use clippy_utils::diagnostics::span_lint;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::DUMMY_SP;\n+\n+use super::CARGO_COMMON_METADATA;\n+\n+pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata, ignore_publish: bool) {\n+    for package in &metadata.packages {\n+        // only run the lint if publish is `None` (`publish = true` or skipped entirely)\n+        // or if the vector isn't empty (`publish = [\"something\"]`)\n+        if package.publish.as_ref().filter(|publish| publish.is_empty()).is_none() || ignore_publish {\n+            if is_empty_str(&package.description) {\n+                missing_warning(cx, package, \"package.description\");\n+            }\n+\n+            if is_empty_str(&package.license) && is_empty_str(&package.license_file) {\n+                missing_warning(cx, package, \"either package.license or package.license_file\");\n+            }\n+\n+            if is_empty_str(&package.repository) {\n+                missing_warning(cx, package, \"package.repository\");\n+            }\n+\n+            if is_empty_str(&package.readme) {\n+                missing_warning(cx, package, \"package.readme\");\n+            }\n+\n+            if is_empty_vec(&package.keywords) {\n+                missing_warning(cx, package, \"package.keywords\");\n+            }\n+\n+            if is_empty_vec(&package.categories) {\n+                missing_warning(cx, package, \"package.categories\");\n+            }\n+        }\n+    }\n+}\n+\n+fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, field: &str) {\n+    let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n+    span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n+}\n+\n+fn is_empty_str<T: AsRef<std::ffi::OsStr>>(value: &Option<T>) -> bool {\n+    value.as_ref().map_or(true, |s| s.as_ref().is_empty())\n+}\n+\n+fn is_empty_vec(value: &[String]) -> bool {\n+    // This works because empty iterators return true\n+    value.iter().all(String::is_empty)\n+}"}, {"sha": "79a469a4258bbcc4643153e2d84eb64a814becfc", "filename": "clippy_lints/src/cargo/feature_name.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Ffeature_name.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -0,0 +1,92 @@\n+use cargo_metadata::Metadata;\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::DUMMY_SP;\n+\n+use super::{NEGATIVE_FEATURE_NAMES, REDUNDANT_FEATURE_NAMES};\n+\n+static PREFIXES: [&str; 8] = [\"no-\", \"no_\", \"not-\", \"not_\", \"use-\", \"use_\", \"with-\", \"with_\"];\n+static SUFFIXES: [&str; 2] = [\"-support\", \"_support\"];\n+\n+pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata) {\n+    for package in &metadata.packages {\n+        let mut features: Vec<&String> = package.features.keys().collect();\n+        features.sort();\n+        for feature in features {\n+            let prefix_opt = {\n+                let i = PREFIXES.partition_point(|prefix| prefix < &feature.as_str());\n+                if i > 0 && feature.starts_with(PREFIXES[i - 1]) {\n+                    Some(PREFIXES[i - 1])\n+                } else {\n+                    None\n+                }\n+            };\n+            if let Some(prefix) = prefix_opt {\n+                lint(cx, feature, prefix, true);\n+            }\n+\n+            let suffix_opt: Option<&str> = {\n+                let i = SUFFIXES.partition_point(|suffix| {\n+                    suffix.bytes().rev().cmp(feature.bytes().rev()) == std::cmp::Ordering::Less\n+                });\n+                if i > 0 && feature.ends_with(SUFFIXES[i - 1]) {\n+                    Some(SUFFIXES[i - 1])\n+                } else {\n+                    None\n+                }\n+            };\n+            if let Some(suffix) = suffix_opt {\n+                lint(cx, feature, suffix, false);\n+            }\n+        }\n+    }\n+}\n+\n+fn is_negative_prefix(s: &str) -> bool {\n+    s.starts_with(\"no\")\n+}\n+\n+fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n+    let is_negative = is_prefix && is_negative_prefix(substring);\n+    span_lint_and_help(\n+        cx,\n+        if is_negative {\n+            NEGATIVE_FEATURE_NAMES\n+        } else {\n+            REDUNDANT_FEATURE_NAMES\n+        },\n+        DUMMY_SP,\n+        &format!(\n+            \"the \\\"{}\\\" {} in the feature name \\\"{}\\\" is {}\",\n+            substring,\n+            if is_prefix { \"prefix\" } else { \"suffix\" },\n+            feature,\n+            if is_negative { \"negative\" } else { \"redundant\" }\n+        ),\n+        None,\n+        &format!(\n+            \"consider renaming the feature to \\\"{}\\\"{}\",\n+            if is_prefix {\n+                feature.strip_prefix(substring)\n+            } else {\n+                feature.strip_suffix(substring)\n+            }\n+            .unwrap(),\n+            if is_negative {\n+                \", but make sure the feature adds functionality\"\n+            } else {\n+                \"\"\n+            }\n+        ),\n+    );\n+}\n+\n+#[test]\n+fn test_prefixes_sorted() {\n+    let mut sorted_prefixes = PREFIXES;\n+    sorted_prefixes.sort_unstable();\n+    assert_eq!(PREFIXES, sorted_prefixes);\n+    let mut sorted_suffixes = SUFFIXES;\n+    sorted_suffixes.sort_by(|a, b| a.bytes().rev().cmp(b.bytes().rev()));\n+    assert_eq!(SUFFIXES, sorted_suffixes);\n+}"}, {"sha": "abe95c6663f70eb6a614c4335fc96dfbeec2f356", "filename": "clippy_lints/src/cargo/mod.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -0,0 +1,221 @@\n+use cargo_metadata::MetadataCommand;\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_lint_allowed;\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n+use rustc_lint::{LateContext, LateLintPass, Lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::DUMMY_SP;\n+\n+mod common_metadata;\n+mod feature_name;\n+mod multiple_crate_versions;\n+mod wildcard_dependencies;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks to see if all common metadata is defined in\n+    /// `Cargo.toml`. See: https://rust-lang-nursery.github.io/api-guidelines/documentation.html#cargotoml-includes-all-common-metadata-c-metadata\n+    ///\n+    /// ### Why is this bad?\n+    /// It will be more difficult for users to discover the\n+    /// purpose of the crate, and key information related to it.\n+    ///\n+    /// ### Example\n+    /// ```toml\n+    /// # This `Cargo.toml` is missing a description field:\n+    /// [package]\n+    /// name = \"clippy\"\n+    /// version = \"0.0.212\"\n+    /// repository = \"https://github.com/rust-lang/rust-clippy\"\n+    /// readme = \"README.md\"\n+    /// license = \"MIT OR Apache-2.0\"\n+    /// keywords = [\"clippy\", \"lint\", \"plugin\"]\n+    /// categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n+    /// ```\n+    ///\n+    /// Should include a description field like:\n+    ///\n+    /// ```toml\n+    /// # This `Cargo.toml` includes all common metadata\n+    /// [package]\n+    /// name = \"clippy\"\n+    /// version = \"0.0.212\"\n+    /// description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n+    /// repository = \"https://github.com/rust-lang/rust-clippy\"\n+    /// readme = \"README.md\"\n+    /// license = \"MIT OR Apache-2.0\"\n+    /// keywords = [\"clippy\", \"lint\", \"plugin\"]\n+    /// categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n+    /// ```\n+    #[clippy::version = \"1.32.0\"]\n+    pub CARGO_COMMON_METADATA,\n+    cargo,\n+    \"common metadata is defined in `Cargo.toml`\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for feature names with prefix `use-`, `with-` or suffix `-support`\n+    ///\n+    /// ### Why is this bad?\n+    /// These prefixes and suffixes have no significant meaning.\n+    ///\n+    /// ### Example\n+    /// ```toml\n+    /// # The `Cargo.toml` with feature name redundancy\n+    /// [features]\n+    /// default = [\"use-abc\", \"with-def\", \"ghi-support\"]\n+    /// use-abc = []  // redundant\n+    /// with-def = []   // redundant\n+    /// ghi-support = []   // redundant\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```toml\n+    /// [features]\n+    /// default = [\"abc\", \"def\", \"ghi\"]\n+    /// abc = []\n+    /// def = []\n+    /// ghi = []\n+    /// ```\n+    ///\n+    #[clippy::version = \"1.57.0\"]\n+    pub REDUNDANT_FEATURE_NAMES,\n+    cargo,\n+    \"usage of a redundant feature name\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for negative feature names with prefix `no-` or `not-`\n+    ///\n+    /// ### Why is this bad?\n+    /// Features are supposed to be additive, and negatively-named features violate it.\n+    ///\n+    /// ### Example\n+    /// ```toml\n+    /// # The `Cargo.toml` with negative feature names\n+    /// [features]\n+    /// default = []\n+    /// no-abc = []\n+    /// not-def = []\n+    ///\n+    /// ```\n+    /// Use instead:\n+    /// ```toml\n+    /// [features]\n+    /// default = [\"abc\", \"def\"]\n+    /// abc = []\n+    /// def = []\n+    ///\n+    /// ```\n+    #[clippy::version = \"1.57.0\"]\n+    pub NEGATIVE_FEATURE_NAMES,\n+    cargo,\n+    \"usage of a negative feature name\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks to see if multiple versions of a crate are being\n+    /// used.\n+    ///\n+    /// ### Why is this bad?\n+    /// This bloats the size of targets, and can lead to\n+    /// confusing error messages when structs or traits are used interchangeably\n+    /// between different versions of a crate.\n+    ///\n+    /// ### Known problems\n+    /// Because this can be caused purely by the dependencies\n+    /// themselves, it's not always possible to fix this issue.\n+    ///\n+    /// ### Example\n+    /// ```toml\n+    /// # This will pull in both winapi v0.3.x and v0.2.x, triggering a warning.\n+    /// [dependencies]\n+    /// ctrlc = \"=3.1.0\"\n+    /// ansi_term = \"=0.11.0\"\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub MULTIPLE_CRATE_VERSIONS,\n+    cargo,\n+    \"multiple versions of the same crate being used\"\n+}\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for wildcard dependencies in the `Cargo.toml`.\n+    ///\n+    /// ### Why is this bad?\n+    /// [As the edition guide says](https://rust-lang-nursery.github.io/edition-guide/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html),\n+    /// it is highly unlikely that you work with any possible version of your dependency,\n+    /// and wildcard dependencies would cause unnecessary breakage in the ecosystem.\n+    ///\n+    /// ### Example\n+    /// ```toml\n+    /// [dependencies]\n+    /// regex = \"*\"\n+    /// ```\n+    #[clippy::version = \"1.32.0\"]\n+    pub WILDCARD_DEPENDENCIES,\n+    cargo,\n+    \"wildcard dependencies being used\"\n+}\n+\n+pub struct Cargo {\n+    pub ignore_publish: bool,\n+}\n+\n+impl_lint_pass!(Cargo => [\n+    CARGO_COMMON_METADATA,\n+    REDUNDANT_FEATURE_NAMES,\n+    NEGATIVE_FEATURE_NAMES,\n+    MULTIPLE_CRATE_VERSIONS,\n+    WILDCARD_DEPENDENCIES\n+]);\n+\n+impl LateLintPass<'_> for Cargo {\n+    fn check_crate(&mut self, cx: &LateContext<'_>) {\n+        static NO_DEPS_LINTS: &[&Lint] = &[\n+            CARGO_COMMON_METADATA,\n+            REDUNDANT_FEATURE_NAMES,\n+            NEGATIVE_FEATURE_NAMES,\n+            WILDCARD_DEPENDENCIES,\n+        ];\n+        static WITH_DEPS_LINTS: &[&Lint] = &[MULTIPLE_CRATE_VERSIONS];\n+\n+        if !NO_DEPS_LINTS\n+            .iter()\n+            .all(|&lint| is_lint_allowed(cx, lint, CRATE_HIR_ID))\n+        {\n+            match MetadataCommand::new().no_deps().exec() {\n+                Ok(metadata) => {\n+                    common_metadata::check(cx, &metadata, self.ignore_publish);\n+                    feature_name::check(cx, &metadata);\n+                    wildcard_dependencies::check(cx, &metadata);\n+                },\n+                Err(e) => {\n+                    for lint in NO_DEPS_LINTS {\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                    }\n+                },\n+            }\n+        }\n+\n+        if !WITH_DEPS_LINTS\n+            .iter()\n+            .all(|&lint| is_lint_allowed(cx, lint, CRATE_HIR_ID))\n+        {\n+            match MetadataCommand::new().exec() {\n+                Ok(metadata) => {\n+                    multiple_crate_versions::check(cx, &metadata);\n+                },\n+                Err(e) => {\n+                    for lint in WITH_DEPS_LINTS {\n+                        span_lint(cx, lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", e));\n+                    }\n+                },\n+            }\n+        }\n+    }\n+}"}, {"sha": "76fd0819a39a5f5225e7b7b44feb0dfa1a1f203e", "filename": "clippy_lints/src/cargo/multiple_crate_versions.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmultiple_crate_versions.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -0,0 +1,63 @@\n+//! lint on multiple versions of a crate being used\n+\n+use cargo_metadata::{DependencyKind, Metadata, Node, Package, PackageId};\n+use clippy_utils::diagnostics::span_lint;\n+use if_chain::if_chain;\n+use itertools::Itertools;\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::DUMMY_SP;\n+\n+use super::MULTIPLE_CRATE_VERSIONS;\n+\n+pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata) {\n+    let local_name = cx.tcx.crate_name(LOCAL_CRATE);\n+    let mut packages = metadata.packages.clone();\n+    packages.sort_by(|a, b| a.name.cmp(&b.name));\n+\n+    if_chain! {\n+        if let Some(resolve) = &metadata.resolve;\n+        if let Some(local_id) = packages\n+            .iter()\n+            .find_map(|p| if p.name == local_name.as_str() { Some(&p.id) } else { None });\n+        then {\n+            for (name, group) in &packages.iter().group_by(|p| p.name.clone()) {\n+                let group: Vec<&Package> = group.collect();\n+\n+                if group.len() <= 1 {\n+                    continue;\n+                }\n+\n+                if group.iter().all(|p| is_normal_dep(&resolve.nodes, local_id, &p.id)) {\n+                    let mut versions: Vec<_> = group.into_iter().map(|p| &p.version).collect();\n+                    versions.sort();\n+                    let versions = versions.iter().join(\", \");\n+\n+                    span_lint(\n+                        cx,\n+                        MULTIPLE_CRATE_VERSIONS,\n+                        DUMMY_SP,\n+                        &format!(\"multiple versions for dependency `{}`: {}\", name, versions),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn is_normal_dep(nodes: &[Node], local_id: &PackageId, dep_id: &PackageId) -> bool {\n+    fn depends_on(node: &Node, dep_id: &PackageId) -> bool {\n+        node.deps.iter().any(|dep| {\n+            dep.pkg == *dep_id\n+                && dep\n+                    .dep_kinds\n+                    .iter()\n+                    .any(|info| matches!(info.kind, DependencyKind::Normal))\n+        })\n+    }\n+\n+    nodes\n+        .iter()\n+        .filter(|node| depends_on(node, dep_id))\n+        .any(|node| node.id == *local_id || is_normal_dep(nodes, local_id, &node.id))\n+}"}, {"sha": "7fa6acbf557b1efb7f293a9ee1947df122ee88bc", "filename": "clippy_lints/src/cargo/wildcard_dependencies.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Fcargo%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fwildcard_dependencies.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -0,0 +1,27 @@\n+use cargo_metadata::Metadata;\n+use clippy_utils::diagnostics::span_lint;\n+use if_chain::if_chain;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::DUMMY_SP;\n+\n+use super::WILDCARD_DEPENDENCIES;\n+\n+pub(super) fn check(cx: &LateContext<'_>, metadata: &Metadata) {\n+    for dep in &metadata.packages[0].dependencies {\n+        // VersionReq::any() does not work\n+        if_chain! {\n+            if let Ok(wildcard_ver) = semver::VersionReq::parse(\"*\");\n+            if let Some(ref source) = dep.source;\n+            if !source.starts_with(\"git\");\n+            if dep.req == wildcard_ver;\n+            then {\n+                span_lint(\n+                    cx,\n+                    WILDCARD_DEPENDENCIES,\n+                    DUMMY_SP,\n+                    &format!(\"wildcard dependency for `{}`\", dep.name),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "23f79fdc68238ec24ecb1fe5dd2c6e7c08dd3279", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=c37d6eed067eb6fb4c126b4ac3c09499483071ec", "patch": "@@ -1,118 +0,0 @@\n-//! lint on missing cargo common metadata\n-\n-use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::hir_id::CRATE_HIR_ID;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::source_map::DUMMY_SP;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks to see if all common metadata is defined in\n-    /// `Cargo.toml`. See: https://rust-lang-nursery.github.io/api-guidelines/documentation.html#cargotoml-includes-all-common-metadata-c-metadata\n-    ///\n-    /// ### Why is this bad?\n-    /// It will be more difficult for users to discover the\n-    /// purpose of the crate, and key information related to it.\n-    ///\n-    /// ### Example\n-    /// ```toml\n-    /// # This `Cargo.toml` is missing a description field:\n-    /// [package]\n-    /// name = \"clippy\"\n-    /// version = \"0.0.212\"\n-    /// repository = \"https://github.com/rust-lang/rust-clippy\"\n-    /// readme = \"README.md\"\n-    /// license = \"MIT OR Apache-2.0\"\n-    /// keywords = [\"clippy\", \"lint\", \"plugin\"]\n-    /// categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n-    /// ```\n-    ///\n-    /// Should include a description field like:\n-    ///\n-    /// ```toml\n-    /// # This `Cargo.toml` includes all common metadata\n-    /// [package]\n-    /// name = \"clippy\"\n-    /// version = \"0.0.212\"\n-    /// description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n-    /// repository = \"https://github.com/rust-lang/rust-clippy\"\n-    /// readme = \"README.md\"\n-    /// license = \"MIT OR Apache-2.0\"\n-    /// keywords = [\"clippy\", \"lint\", \"plugin\"]\n-    /// categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n-    /// ```\n-    #[clippy::version = \"1.32.0\"]\n-    pub CARGO_COMMON_METADATA,\n-    cargo,\n-    \"common metadata is defined in `Cargo.toml`\"\n-}\n-\n-#[derive(Copy, Clone, Debug)]\n-pub struct CargoCommonMetadata {\n-    ignore_publish: bool,\n-}\n-\n-impl CargoCommonMetadata {\n-    pub fn new(ignore_publish: bool) -> Self {\n-        Self { ignore_publish }\n-    }\n-}\n-\n-impl_lint_pass!(CargoCommonMetadata => [\n-    CARGO_COMMON_METADATA\n-]);\n-\n-fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, field: &str) {\n-    let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n-    span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n-}\n-\n-fn is_empty_str<T: AsRef<std::ffi::OsStr>>(value: &Option<T>) -> bool {\n-    value.as_ref().map_or(true, |s| s.as_ref().is_empty())\n-}\n-\n-fn is_empty_vec(value: &[String]) -> bool {\n-    // This works because empty iterators return true\n-    value.iter().all(String::is_empty)\n-}\n-\n-impl LateLintPass<'_> for CargoCommonMetadata {\n-    fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        if is_lint_allowed(cx, CARGO_COMMON_METADATA, CRATE_HIR_ID) {\n-            return;\n-        }\n-\n-        let metadata = unwrap_cargo_metadata!(cx, CARGO_COMMON_METADATA, false);\n-\n-        for package in metadata.packages {\n-            // only run the lint if publish is `None` (`publish = true` or skipped entirely)\n-            // or if the vector isn't empty (`publish = [\"something\"]`)\n-            if package.publish.as_ref().filter(|publish| publish.is_empty()).is_none() || self.ignore_publish {\n-                if is_empty_str(&package.description) {\n-                    missing_warning(cx, &package, \"package.description\");\n-                }\n-\n-                if is_empty_str(&package.license) && is_empty_str(&package.license_file) {\n-                    missing_warning(cx, &package, \"either package.license or package.license_file\");\n-                }\n-\n-                if is_empty_str(&package.repository) {\n-                    missing_warning(cx, &package, \"package.repository\");\n-                }\n-\n-                if is_empty_str(&package.readme) {\n-                    missing_warning(cx, &package, \"package.readme\");\n-                }\n-\n-                if is_empty_vec(&package.keywords) {\n-                    missing_warning(cx, &package, \"package.keywords\");\n-                }\n-\n-                if is_empty_vec(&package.categories) {\n-                    missing_warning(cx, &package, \"package.categories\");\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "dc6bef52ddd9fb3256168e3cec80fd9a2bfb0af1", "filename": "clippy_lints/src/feature_name.rs", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Ffeature_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Ffeature_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffeature_name.rs?ref=c37d6eed067eb6fb4c126b4ac3c09499483071ec", "patch": "@@ -1,166 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::CRATE_HIR_ID;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::DUMMY_SP;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for feature names with prefix `use-`, `with-` or suffix `-support`\n-    ///\n-    /// ### Why is this bad?\n-    /// These prefixes and suffixes have no significant meaning.\n-    ///\n-    /// ### Example\n-    /// ```toml\n-    /// # The `Cargo.toml` with feature name redundancy\n-    /// [features]\n-    /// default = [\"use-abc\", \"with-def\", \"ghi-support\"]\n-    /// use-abc = []  // redundant\n-    /// with-def = []   // redundant\n-    /// ghi-support = []   // redundant\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```toml\n-    /// [features]\n-    /// default = [\"abc\", \"def\", \"ghi\"]\n-    /// abc = []\n-    /// def = []\n-    /// ghi = []\n-    /// ```\n-    ///\n-    #[clippy::version = \"1.57.0\"]\n-    pub REDUNDANT_FEATURE_NAMES,\n-    cargo,\n-    \"usage of a redundant feature name\"\n-}\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for negative feature names with prefix `no-` or `not-`\n-    ///\n-    /// ### Why is this bad?\n-    /// Features are supposed to be additive, and negatively-named features violate it.\n-    ///\n-    /// ### Example\n-    /// ```toml\n-    /// # The `Cargo.toml` with negative feature names\n-    /// [features]\n-    /// default = []\n-    /// no-abc = []\n-    /// not-def = []\n-    ///\n-    /// ```\n-    /// Use instead:\n-    /// ```toml\n-    /// [features]\n-    /// default = [\"abc\", \"def\"]\n-    /// abc = []\n-    /// def = []\n-    ///\n-    /// ```\n-    #[clippy::version = \"1.57.0\"]\n-    pub NEGATIVE_FEATURE_NAMES,\n-    cargo,\n-    \"usage of a negative feature name\"\n-}\n-\n-declare_lint_pass!(FeatureName => [REDUNDANT_FEATURE_NAMES, NEGATIVE_FEATURE_NAMES]);\n-\n-static PREFIXES: [&str; 8] = [\"no-\", \"no_\", \"not-\", \"not_\", \"use-\", \"use_\", \"with-\", \"with_\"];\n-static SUFFIXES: [&str; 2] = [\"-support\", \"_support\"];\n-\n-fn is_negative_prefix(s: &str) -> bool {\n-    s.starts_with(\"no\")\n-}\n-\n-fn lint(cx: &LateContext<'_>, feature: &str, substring: &str, is_prefix: bool) {\n-    let is_negative = is_prefix && is_negative_prefix(substring);\n-    span_lint_and_help(\n-        cx,\n-        if is_negative {\n-            NEGATIVE_FEATURE_NAMES\n-        } else {\n-            REDUNDANT_FEATURE_NAMES\n-        },\n-        DUMMY_SP,\n-        &format!(\n-            \"the \\\"{}\\\" {} in the feature name \\\"{}\\\" is {}\",\n-            substring,\n-            if is_prefix { \"prefix\" } else { \"suffix\" },\n-            feature,\n-            if is_negative { \"negative\" } else { \"redundant\" }\n-        ),\n-        None,\n-        &format!(\n-            \"consider renaming the feature to \\\"{}\\\"{}\",\n-            if is_prefix {\n-                feature.strip_prefix(substring)\n-            } else {\n-                feature.strip_suffix(substring)\n-            }\n-            .unwrap(),\n-            if is_negative {\n-                \", but make sure the feature adds functionality\"\n-            } else {\n-                \"\"\n-            }\n-        ),\n-    );\n-}\n-\n-impl LateLintPass<'_> for FeatureName {\n-    fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        if is_lint_allowed(cx, REDUNDANT_FEATURE_NAMES, CRATE_HIR_ID)\n-            && is_lint_allowed(cx, NEGATIVE_FEATURE_NAMES, CRATE_HIR_ID)\n-        {\n-            return;\n-        }\n-\n-        let metadata = unwrap_cargo_metadata!(cx, REDUNDANT_FEATURE_NAMES, false);\n-\n-        for package in metadata.packages {\n-            let mut features: Vec<&String> = package.features.keys().collect();\n-            features.sort();\n-            for feature in features {\n-                let prefix_opt = {\n-                    let i = PREFIXES.partition_point(|prefix| prefix < &feature.as_str());\n-                    if i > 0 && feature.starts_with(PREFIXES[i - 1]) {\n-                        Some(PREFIXES[i - 1])\n-                    } else {\n-                        None\n-                    }\n-                };\n-                if let Some(prefix) = prefix_opt {\n-                    lint(cx, feature, prefix, true);\n-                }\n-\n-                let suffix_opt: Option<&str> = {\n-                    let i = SUFFIXES.partition_point(|suffix| {\n-                        suffix.bytes().rev().cmp(feature.bytes().rev()) == std::cmp::Ordering::Less\n-                    });\n-                    if i > 0 && feature.ends_with(SUFFIXES[i - 1]) {\n-                        Some(SUFFIXES[i - 1])\n-                    } else {\n-                        None\n-                    }\n-                };\n-                if let Some(suffix) = suffix_opt {\n-                    lint(cx, feature, suffix, false);\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_prefixes_sorted() {\n-    let mut sorted_prefixes = PREFIXES;\n-    sorted_prefixes.sort_unstable();\n-    assert_eq!(PREFIXES, sorted_prefixes);\n-    let mut sorted_suffixes = SUFFIXES;\n-    sorted_suffixes.sort_by(|a, b| a.bytes().rev().cmp(b.bytes().rev()));\n-    assert_eq!(SUFFIXES, sorted_suffixes);\n-}"}, {"sha": "c890523fe5aebc1808dba4de08d1d4956f2fca28", "filename": "clippy_lints/src/lib.register_cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.register_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_cargo.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -3,9 +3,9 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::cargo\", Some(\"clippy_cargo\"), vec![\n-    LintId::of(cargo_common_metadata::CARGO_COMMON_METADATA),\n-    LintId::of(feature_name::NEGATIVE_FEATURE_NAMES),\n-    LintId::of(feature_name::REDUNDANT_FEATURE_NAMES),\n-    LintId::of(multiple_crate_versions::MULTIPLE_CRATE_VERSIONS),\n-    LintId::of(wildcard_dependencies::WILDCARD_DEPENDENCIES),\n+    LintId::of(cargo::CARGO_COMMON_METADATA),\n+    LintId::of(cargo::MULTIPLE_CRATE_VERSIONS),\n+    LintId::of(cargo::NEGATIVE_FEATURE_NAMES),\n+    LintId::of(cargo::REDUNDANT_FEATURE_NAMES),\n+    LintId::of(cargo::WILDCARD_DEPENDENCIES),\n ])"}, {"sha": "7a62a99f5ffb99f543607cd9aaa9b9da4d1b9acb", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -61,7 +61,11 @@ store.register_lints(&[\n     booleans::NONMINIMAL_BOOL,\n     borrow_as_ptr::BORROW_AS_PTR,\n     bytecount::NAIVE_BYTECOUNT,\n-    cargo_common_metadata::CARGO_COMMON_METADATA,\n+    cargo::CARGO_COMMON_METADATA,\n+    cargo::MULTIPLE_CRATE_VERSIONS,\n+    cargo::NEGATIVE_FEATURE_NAMES,\n+    cargo::REDUNDANT_FEATURE_NAMES,\n+    cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n     casts::CAST_LOSSLESS,\n     casts::CAST_POSSIBLE_TRUNCATION,\n@@ -139,8 +143,6 @@ store.register_lints(&[\n     exit::EXIT,\n     explicit_write::EXPLICIT_WRITE,\n     fallible_impl_from::FALLIBLE_IMPL_FROM,\n-    feature_name::NEGATIVE_FEATURE_NAMES,\n-    feature_name::REDUNDANT_FEATURE_NAMES,\n     float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n     float_literal::EXCESSIVE_PRECISION,\n     float_literal::LOSSY_FLOAT_LITERAL,\n@@ -353,7 +355,6 @@ store.register_lints(&[\n     module_style::MOD_MODULE_FILES,\n     module_style::SELF_NAMED_MODULE_FILES,\n     modulo_arithmetic::MODULO_ARITHMETIC,\n-    multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n     mut_key::MUTABLE_KEY_TYPE,\n     mut_mut::MUT_MUT,\n     mut_mutex_lock::MUT_MUTEX_LOCK,\n@@ -520,7 +521,6 @@ store.register_lints(&[\n     vec_init_then_push::VEC_INIT_THEN_PUSH,\n     vec_resize_to_zero::VEC_RESIZE_TO_ZERO,\n     verbose_file_reads::VERBOSE_FILE_READS,\n-    wildcard_dependencies::WILDCARD_DEPENDENCIES,\n     wildcard_imports::ENUM_GLOB_USE,\n     wildcard_imports::WILDCARD_IMPORTS,\n     write::PRINTLN_EMPTY_STRING,"}, {"sha": "e78f6187359307f9bf512eebde676e4eaf0308fd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -178,7 +178,7 @@ mod bool_assert_comparison;\n mod booleans;\n mod borrow_as_ptr;\n mod bytecount;\n-mod cargo_common_metadata;\n+mod cargo;\n mod case_sensitive_file_extension_comparisons;\n mod casts;\n mod checked_conversions;\n@@ -220,7 +220,6 @@ mod exhaustive_items;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n-mod feature_name;\n mod float_equality_without_abs;\n mod float_literal;\n mod floating_point_arithmetic;\n@@ -290,7 +289,6 @@ mod missing_enforced_import_rename;\n mod missing_inline;\n mod module_style;\n mod modulo_arithmetic;\n-mod multiple_crate_versions;\n mod mut_key;\n mod mut_mut;\n mod mut_mutex_lock;\n@@ -399,7 +397,6 @@ mod vec;\n mod vec_init_then_push;\n mod vec_resize_to_zero;\n mod verbose_file_reads;\n-mod wildcard_dependencies;\n mod wildcard_imports;\n mod write;\n mod zero_div_zero;\n@@ -724,10 +721,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(redundant_else::RedundantElse));\n     store.register_late_pass(|| Box::new(create_dir::CreateDir));\n     store.register_early_pass(|| Box::new(needless_arbitrary_self_type::NeedlessArbitrarySelfType));\n-    let cargo_ignore_publish = conf.cargo_ignore_publish;\n-    store.register_late_pass(move || Box::new(cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish)));\n-    store.register_late_pass(|| Box::new(multiple_crate_versions::MultipleCrateVersions));\n-    store.register_late_pass(|| Box::new(wildcard_dependencies::WildcardDependencies));\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n     store.register_early_pass(move || {\n         Box::new(literal_representation::LiteralDigitGrouping::new(\n@@ -842,7 +835,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(move || Box::new(disallowed_script_idents::DisallowedScriptIdents::new(&scripts)));\n     store.register_late_pass(|| Box::new(strlen_on_c_strings::StrlenOnCStrings));\n     store.register_late_pass(move || Box::new(self_named_constructors::SelfNamedConstructors));\n-    store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(manual_assert::ManualAssert));\n     let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n@@ -864,6 +856,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_late_pass(|| Box::new(dbg_macro::DbgMacro));\n+    let cargo_ignore_publish = conf.cargo_ignore_publish;\n+    store.register_late_pass(move || {\n+        Box::new(cargo::Cargo {\n+            ignore_publish: cargo_ignore_publish,\n+        })\n+    });\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1f9db39cf8ca6a7e9742a2761d4bb89b466614f6", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=c37d6eed067eb6fb4c126b4ac3c09499483071ec", "patch": "@@ -1,101 +0,0 @@\n-//! lint on multiple versions of a crate being used\n-\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_lint_allowed;\n-use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::CRATE_HIR_ID;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::DUMMY_SP;\n-\n-use cargo_metadata::{DependencyKind, Node, Package, PackageId};\n-use if_chain::if_chain;\n-use itertools::Itertools;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks to see if multiple versions of a crate are being\n-    /// used.\n-    ///\n-    /// ### Why is this bad?\n-    /// This bloats the size of targets, and can lead to\n-    /// confusing error messages when structs or traits are used interchangeably\n-    /// between different versions of a crate.\n-    ///\n-    /// ### Known problems\n-    /// Because this can be caused purely by the dependencies\n-    /// themselves, it's not always possible to fix this issue.\n-    ///\n-    /// ### Example\n-    /// ```toml\n-    /// # This will pull in both winapi v0.3.x and v0.2.x, triggering a warning.\n-    /// [dependencies]\n-    /// ctrlc = \"=3.1.0\"\n-    /// ansi_term = \"=0.11.0\"\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub MULTIPLE_CRATE_VERSIONS,\n-    cargo,\n-    \"multiple versions of the same crate being used\"\n-}\n-\n-declare_lint_pass!(MultipleCrateVersions => [MULTIPLE_CRATE_VERSIONS]);\n-\n-impl LateLintPass<'_> for MultipleCrateVersions {\n-    fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        if is_lint_allowed(cx, MULTIPLE_CRATE_VERSIONS, CRATE_HIR_ID) {\n-            return;\n-        }\n-\n-        let metadata = unwrap_cargo_metadata!(cx, MULTIPLE_CRATE_VERSIONS, true);\n-        let local_name = cx.tcx.crate_name(LOCAL_CRATE);\n-        let mut packages = metadata.packages;\n-        packages.sort_by(|a, b| a.name.cmp(&b.name));\n-\n-        if_chain! {\n-            if let Some(resolve) = &metadata.resolve;\n-            if let Some(local_id) = packages\n-                .iter()\n-                .find_map(|p| if p.name == local_name.as_str() { Some(&p.id) } else { None });\n-            then {\n-                for (name, group) in &packages.iter().group_by(|p| p.name.clone()) {\n-                    let group: Vec<&Package> = group.collect();\n-\n-                    if group.len() <= 1 {\n-                        continue;\n-                    }\n-\n-                    if group.iter().all(|p| is_normal_dep(&resolve.nodes, local_id, &p.id)) {\n-                        let mut versions: Vec<_> = group.into_iter().map(|p| &p.version).collect();\n-                        versions.sort();\n-                        let versions = versions.iter().join(\", \");\n-\n-                        span_lint(\n-                            cx,\n-                            MULTIPLE_CRATE_VERSIONS,\n-                            DUMMY_SP,\n-                            &format!(\"multiple versions for dependency `{}`: {}\", name, versions),\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-fn is_normal_dep(nodes: &[Node], local_id: &PackageId, dep_id: &PackageId) -> bool {\n-    fn depends_on(node: &Node, dep_id: &PackageId) -> bool {\n-        node.deps.iter().any(|dep| {\n-            dep.pkg == *dep_id\n-                && dep\n-                    .dep_kinds\n-                    .iter()\n-                    .any(|info| matches!(info.kind, DependencyKind::Normal))\n-        })\n-    }\n-\n-    nodes\n-        .iter()\n-        .filter(|node| depends_on(node, dep_id))\n-        .any(|node| node.id == *local_id || is_normal_dep(nodes, local_id, &node.id))\n-}"}, {"sha": "80d7b8a1b6df559820863c39c0199f9abb88615c", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d6eed067eb6fb4c126b4ac3c09499483071ec/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=c37d6eed067eb6fb4c126b4ac3c09499483071ec", "patch": "@@ -1,57 +0,0 @@\n-use clippy_utils::{diagnostics::span_lint, is_lint_allowed};\n-use rustc_hir::hir_id::CRATE_HIR_ID;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::DUMMY_SP;\n-\n-use if_chain::if_chain;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for wildcard dependencies in the `Cargo.toml`.\n-    ///\n-    /// ### Why is this bad?\n-    /// [As the edition guide says](https://rust-lang-nursery.github.io/edition-guide/rust-2018/cargo-and-crates-io/crates-io-disallows-wildcard-dependencies.html),\n-    /// it is highly unlikely that you work with any possible version of your dependency,\n-    /// and wildcard dependencies would cause unnecessary breakage in the ecosystem.\n-    ///\n-    /// ### Example\n-    /// ```toml\n-    /// [dependencies]\n-    /// regex = \"*\"\n-    /// ```\n-    #[clippy::version = \"1.32.0\"]\n-    pub WILDCARD_DEPENDENCIES,\n-    cargo,\n-    \"wildcard dependencies being used\"\n-}\n-\n-declare_lint_pass!(WildcardDependencies => [WILDCARD_DEPENDENCIES]);\n-\n-impl LateLintPass<'_> for WildcardDependencies {\n-    fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        if is_lint_allowed(cx, WILDCARD_DEPENDENCIES, CRATE_HIR_ID) {\n-            return;\n-        }\n-\n-        let metadata = unwrap_cargo_metadata!(cx, WILDCARD_DEPENDENCIES, false);\n-\n-        for dep in &metadata.packages[0].dependencies {\n-            // VersionReq::any() does not work\n-            if_chain! {\n-                if let Ok(wildcard_ver) = semver::VersionReq::parse(\"*\");\n-                if let Some(ref source) = dep.source;\n-                if !source.starts_with(\"git\");\n-                if dep.req == wildcard_ver;\n-                then {\n-                    span_lint(\n-                        cx,\n-                        WILDCARD_DEPENDENCIES,\n-                        DUMMY_SP,\n-                        &format!(\"wildcard dependency for `{}`\", dep.name),\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "73d91550693de44986707c0b1b80378305e2ae00", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eed7e9f61855e05fc03e42ce69da88b3f3a34d5b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=eed7e9f61855e05fc03e42ce69da88b3f3a34d5b", "patch": "@@ -2042,24 +2042,6 @@ pub fn peel_ref_operators<'hir>(cx: &LateContext<'_>, mut expr: &'hir Expr<'hir>\n     expr\n }\n \n-#[macro_export]\n-macro_rules! unwrap_cargo_metadata {\n-    ($cx: ident, $lint: ident, $deps: expr) => {{\n-        let mut command = cargo_metadata::MetadataCommand::new();\n-        if !$deps {\n-            command.no_deps();\n-        }\n-\n-        match command.exec() {\n-            Ok(metadata) => metadata,\n-            Err(err) => {\n-                span_lint($cx, $lint, DUMMY_SP, &format!(\"could not read cargo metadata: {}\", err));\n-                return;\n-            },\n-        }\n-    }};\n-}\n-\n pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n         if let Res::Def(_, def_id) = path.res {"}]}