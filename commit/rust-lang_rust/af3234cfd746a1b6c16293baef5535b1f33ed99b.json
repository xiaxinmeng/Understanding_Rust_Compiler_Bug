{"sha": "af3234cfd746a1b6c16293baef5535b1f33ed99b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzIzNGNmZDc0NmExYjZjMTYyOTNiYWVmNTUzNWIxZjMzZWQ5OWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-16T13:13:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-16T13:13:37Z"}, "message": "[WIP] Add arbitrary constant support", "tree": {"sha": "d4e413eb78a0d8a8b4eed0d8a76b066f89bbf9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4e413eb78a0d8a8b4eed0d8a76b066f89bbf9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3234cfd746a1b6c16293baef5535b1f33ed99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3234cfd746a1b6c16293baef5535b1f33ed99b", "html_url": "https://github.com/rust-lang/rust/commit/af3234cfd746a1b6c16293baef5535b1f33ed99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3234cfd746a1b6c16293baef5535b1f33ed99b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee45f7d6bc938feeeebb66166d87d18ba3e280e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee45f7d6bc938feeeebb66166d87d18ba3e280e5", "html_url": "https://github.com/rust-lang/rust/commit/ee45f7d6bc938feeeebb66166d87d18ba3e280e5"}], "stats": {"total": 94, "additions": 86, "deletions": 8}, "files": [{"sha": "5301656cf2418a63d81c8b0cc027822495127d6a", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=af3234cfd746a1b6c16293baef5535b1f33ed99b", "patch": "@@ -85,6 +85,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend>, f: &\n         ebb_map,\n         local_map: HashMap::new(),\n         comments: HashMap::new(),\n+        constants: &mut cx.constants,\n     };\n     let fx = &mut fx;\n \n@@ -458,6 +459,8 @@ fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, l\n         (BinOp::Shl, _) => fx.bcx.ins().ishl(lhs, rhs),\n         (BinOp::Shr, false) => fx.bcx.ins().ushr(lhs, rhs),\n         (BinOp::Shr, true) => fx.bcx.ins().sshr(lhs, rhs),\n+\n+        // TODO: cast b1 to u8\n         (BinOp::Eq, _) => fx.bcx.ins().icmp(IntCC::Equal , lhs, rhs),\n         (BinOp::Lt, false) => fx.bcx.ins().icmp(IntCC::UnsignedLessThan , lhs, rhs),\n         (BinOp::Lt, true) => fx.bcx.ins().icmp(IntCC::SignedLessThan , lhs, rhs),\n@@ -468,6 +471,7 @@ fn trans_int_binop<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, bin_op: BinOp, l\n         (BinOp::Ge, true) => fx.bcx.ins().icmp(IntCC::SignedGreaterThanOrEqual , lhs, rhs),\n         (BinOp::Gt, false) => fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan , lhs, rhs),\n         (BinOp::Gt, true) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan , lhs, rhs),\n+\n         (BinOp::Offset, _) => bug!(\"bin op Offset on non ptr lhs: {:?} rhs: {:?}\", lhs, rhs),\n     };\n     // TODO: return correct value for checked binops"}, {"sha": "5e3433410ee2dcdf17169cba656baf63cfa80d2b", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=af3234cfd746a1b6c16293baef5535b1f33ed99b", "patch": "@@ -6,7 +6,7 @@ use std::fmt;\n use syntax::ast::{IntTy, UintTy};\n use self::rustc_target::spec::{HasTargetSpec, Target};\n \n-use cranelift_module::{Module, Linkage, FuncId};\n+use cranelift_module::{Module, Linkage, FuncId, DataId};\n \n use prelude::*;\n \n@@ -56,7 +56,7 @@ fn cton_type_from_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) ->\n                 return None;\n             }\n         }\n-        TypeVariants::TyParam(_)  => bug!(\"{:?}\", ty),\n+        TypeVariants::TyParam(_)  => bug!(\"{:?}: {:?}\", ty, ty.sty),\n         _ => return None,\n     })\n }\n@@ -288,6 +288,7 @@ pub fn cton_sig_from_instance<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, inst: I\n \n pub fn cton_sig_from_mono_fn_sig<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sig: PolyFnSig<'tcx>) -> Signature {\n     // TODO: monomorphize signature\n+    // TODO: this should likely not use skip_binder()\n \n     let sig = sig.skip_binder();\n     let inputs = sig.inputs();\n@@ -334,6 +335,7 @@ pub struct FunctionCx<'a, 'tcx: 'a> {\n     pub ebb_map: HashMap<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n     pub comments: HashMap<Inst, String>,\n+    pub constants: &'a mut HashMap<AllocId, DataId>,\n }\n \n impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {"}, {"sha": "a4f5032fb322fe439fad33d1f30e06197aa8e750", "filename": "src/constant.rs", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=af3234cfd746a1b6c16293baef5535b1f33ed99b", "patch": "@@ -1,8 +1,9 @@\n use prelude::*;\n+use rustc::mir::interpret::{GlobalId, AllocId, read_target_uint};\n+use rustc_mir::interpret::{CompileTimeEvaluator, Memory, MemoryKind};\n+use cranelift_module::*;\n \n pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Constant<'tcx>) -> CValue<'tcx> {\n-    use rustc::mir::interpret::{Scalar, ConstValue, GlobalId};\n-\n     let value = match const_.literal {\n         Literal::Value { value } => value,\n         Literal::Promoted { index } => fx\n@@ -32,6 +33,74 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n             let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n             CValue::Func(func_ref, fx.layout_of(const_.ty))\n         }\n-        _ => unimplemented!(\"value {:?} ty {:?}\", value, const_.ty),\n+        _ => {\n+            let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());\n+            let alloc = fx.tcx.const_value_to_allocation(value);\n+            //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n+            let alloc_id = memory.allocate_value(alloc.clone(), MemoryKind::Stack).unwrap();\n+            let data_id = get_global_for_alloc_id(fx, &memory, alloc_id);\n+            let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+            // TODO: does global_value return a ptr of a val?\n+            let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n+            CValue::ByRef(global_ptr, layout)\n+        }\n+    }\n+}\n+\n+// If ret.1 is true, then the global didn't exist before\n+fn define_global_for_alloc_id(fx: &mut FunctionCx, alloc_id: AllocId, todo: &mut HashMap<AllocId, DataId>) -> (DataId, bool) {\n+    use std::collections::hash_map::Entry;\n+    match fx.constants.entry(alloc_id) {\n+        Entry::Occupied(mut occ) => {\n+            (*occ.get_mut(), false)\n+        }\n+        Entry::Vacant(vac) => {\n+            let data_id = fx.module.declare_data(&alloc_id.0.to_string(), Linkage::Local, false).unwrap();\n+            todo.insert(alloc_id, data_id);\n+            vac.insert(data_id);\n+            (data_id, true)\n+        }\n+    }\n+}\n+\n+fn get_global_for_alloc_id(fx: &mut FunctionCx, memory: &Memory<CompileTimeEvaluator>, alloc_id: AllocId) -> DataId {\n+    if let Some(data_id) = fx.constants.get(&alloc_id) {\n+        return *data_id;\n+    }\n+\n+    let mut todo = HashMap::new();\n+    let mut done = HashSet::new();\n+    define_global_for_alloc_id(fx, alloc_id, &mut todo);\n+\n+    while let Some((alloc_id, data_id)) = { let next = todo.drain().next(); next } {\n+        println!(\"cur: {:?}:{:?} todo: {:?} done: {:?}\", alloc_id, data_id, todo, done);\n+\n+        let alloc = memory.get(alloc_id).unwrap();\n+        let mut data_ctx = DataContext::new();\n+\n+        data_ctx.define(alloc.bytes.to_vec().into_boxed_slice(), Writability::Readonly);\n+\n+        for &(offset, reloc) in alloc.relocations.iter() {\n+            let data_id = define_global_for_alloc_id(fx, reloc, &mut todo).0;\n+\n+            let reloc_offset = {\n+                let endianness = memory.endianness();\n+                let offset = offset.bytes() as usize;\n+                let ptr_size = fx.tcx.data_layout.pointer_size;\n+                let bytes = &alloc.bytes[offset..offset + ptr_size.bytes() as usize];\n+                read_target_uint(endianness, bytes).unwrap()\n+            };\n+\n+            // TODO: is this a correct usage of the api\n+            let global_value = fx.module.declare_data_in_data(data_id, &mut data_ctx);\n+            data_ctx.write_data_addr(reloc_offset as u32, global_value, 0);\n+        }\n+\n+        fx.module.define_data(data_id, &data_ctx).unwrap();\n+        done.insert(data_id);\n+    }\n+    for data_id in done.drain() {\n+        fx.module.finalize_data(data_id);\n     }\n-}\n\\ No newline at end of file\n+    *fx.constants.get(&alloc_id).unwrap()\n+}"}, {"sha": "dc640838b6b846d58066e55efb87d18b5b534428", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3234cfd746a1b6c16293baef5535b1f33ed99b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=af3234cfd746a1b6c16293baef5535b1f33ed99b", "patch": "@@ -40,12 +40,13 @@ mod pretty_clif;\n \n mod prelude {\n     pub use std::any::Any;\n-    pub use std::collections::HashMap;\n+    pub use std::collections::{HashMap, HashSet};\n \n     pub use syntax::codemap::DUMMY_SP;\n     pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n     pub use rustc::mir;\n     pub use rustc::mir::*;\n+    pub use rustc::mir::interpret::AllocId;\n     pub use rustc::session::Session;\n     pub use rustc::ty::layout::{self, LayoutOf, TyLayout, Size};\n     pub use rustc::ty::{\n@@ -60,7 +61,7 @@ mod prelude {\n     };\n     pub use cranelift::codegen::Context;\n     pub use cranelift::prelude::*;\n-    pub use cranelift_module::{Module, Backend, FuncId, Linkage};\n+    pub use cranelift_module::{Module, Backend, FuncId, DataId, Linkage};\n     pub use cranelift_simplejit::{SimpleJITBuilder, SimpleJITBackend};\n \n     pub use common::Variable;\n@@ -75,6 +76,7 @@ pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n     pub def_id_fn_id_map: &'a mut HashMap<Instance<'tcx>, FuncId>,\n+    pub constants: HashMap<AllocId, DataId>,\n }\n \n struct CraneliftCodegenBackend(());\n@@ -176,6 +178,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 tcx,\n                 module: &mut module,\n                 def_id_fn_id_map: &mut def_id_fn_id_map,\n+                constants: HashMap::new(),\n             };\n \n             for mono_item in"}]}