{"sha": "373f904c92b59efc599a4f54eeb7f203e34779b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3M2Y5MDRjOTJiNTllZmM1OTlhNGY1NGVlYjdmMjAzZTM0Nzc5Yjg=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-15T01:32:44Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-15T19:30:46Z"}, "message": "Explicitly provide an optional closure/obj pointer to trans_call_glue so that it can push one in the right position when calling glue, instead of always pushing a null.  As far as I can tell this only affects calls to obj drop glue, since only that makes use of an object binding passed as closure/obj, so pass the binding there as needed.", "tree": {"sha": "2ddfa0ff959d610b9eb72d7ed83fadb904947f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddfa0ff959d610b9eb72d7ed83fadb904947f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/373f904c92b59efc599a4f54eeb7f203e34779b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/373f904c92b59efc599a4f54eeb7f203e34779b8", "html_url": "https://github.com/rust-lang/rust/commit/373f904c92b59efc599a4f54eeb7f203e34779b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/373f904c92b59efc599a4f54eeb7f203e34779b8/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df75165cf4ed8dc06576f12b5867ac8672cde3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/df75165cf4ed8dc06576f12b5867ac8672cde3c6", "html_url": "https://github.com/rust-lang/rust/commit/df75165cf4ed8dc06576f12b5867ac8672cde3c6"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "5de1148c4044b52bbb28c88c5b15084270edf831", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 81, "deletions": 38, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/373f904c92b59efc599a4f54eeb7f203e34779b8/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/373f904c92b59efc599a4f54eeb7f203e34779b8/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=373f904c92b59efc599a4f54eeb7f203e34779b8", "patch": "@@ -1228,8 +1228,8 @@ let trans_visitor\n                  (sorted_htab_keys fns))\n         end\n \n-    and trans_init_str (dst:Ast.lval) (s:string) : unit =\n-      (* Include null byte. *)\n+  and trans_init_str (dst:Ast.lval) (s:string) : unit =\n+    (* Include null byte. *)\n     let init_sz = Int64.of_int ((String.length s) + 1) in\n     let static = trans_static_string s in\n     let (dst, _) = trans_lval_init dst in\n@@ -1715,51 +1715,63 @@ let trans_visitor\n       (code:Il.code)\n       (dst:Il.cell option)\n       (args:Il.cell array)\n+      (clo:Il.cell option)\n       : unit =\n-    let inner dst =\n+    let inner dst cloptr =\n       let scratch = next_vreg_cell Il.voidptr_t in\n       let pop _ = emit (Il.Pop scratch) in\n         for i = ((Array.length args) - 1) downto 0\n         do\n           emit (Il.Push (Il.Cell args.(i)))\n         done;\n-        emit (Il.Push zero);\n+        emit (Il.Push cloptr);\n         emit (Il.Push (Il.Cell abi.Abi.abi_tp_cell));\n         emit (Il.Push dst);\n         call_code code;\n         pop ();\n         pop ();\n         pop ();\n         Array.iter (fun _ -> pop()) args;\n+    in\n+    let cloptr =\n+      match clo with\n+          None -> zero\n+        | Some cloptr -> Il.Cell cloptr\n     in\n       match dst with\n-          None -> inner zero\n-        | Some dst -> aliasing true dst (fun dst -> inner (Il.Cell dst))\n+          None -> inner zero cloptr\n+        | Some dst ->\n+            aliasing true dst (fun dst -> inner (Il.Cell dst) cloptr)\n \n   and trans_call_static_glue\n       (callee:Il.operand)\n       (dst:Il.cell option)\n       (args:Il.cell array)\n+      (clo:Il.cell option)\n       : unit =\n-    trans_call_glue (code_of_operand callee) dst args\n+    trans_call_glue (code_of_operand callee) dst args clo\n \n   and trans_call_dynamic_glue\n       (tydesc:Il.cell)\n       (idx:int)\n       (dst:Il.cell option)\n       (args:Il.cell array)\n+      (clo:Il.cell option)\n       : unit =\n     let fptr = get_vtbl_entry_idx tydesc idx in\n-      trans_call_glue (code_of_operand (Il.Cell fptr)) dst args\n+      trans_call_glue (code_of_operand (Il.Cell fptr)) dst args clo\n \n   and trans_call_simple_static_glue\n       (fix:fixup)\n       (ty_params:Il.cell)\n-      (arg:Il.cell)\n+      (args:Il.cell array)\n+      (clo:Il.cell option)\n       : unit =\n     trans_call_static_glue\n       (code_fixup_to_ptr_operand fix)\n-      None [| alias ty_params; arg |]\n+      None\n+      (Array.append [| alias ty_params |] args)\n+      clo\n \n   and get_tydesc_params\n       (outer_ty_params:Il.cell)\n@@ -1781,16 +1793,20 @@ let trans_visitor\n       (ty_param:int)\n       (vtbl_idx:int)\n       (ty_params:Il.cell)\n-      (arg:Il.cell)\n+      (args:Il.cell array)\n+      (clo:Il.cell option)\n       : unit =\n     iflog (fun _ ->\n              annotate (Printf.sprintf \"calling tydesc[%d].glue[%d]\"\n                          ty_param vtbl_idx));\n     let td = get_ty_param ty_params ty_param in\n     let ty_params_ptr = get_tydesc_params ty_params td in\n       trans_call_dynamic_glue\n-        td vtbl_idx\n-        None [| ty_params_ptr; arg; |]\n+        td\n+        vtbl_idx\n+        None\n+        (Array.append [| ty_params_ptr |] args)\n+        clo\n \n   (* trans_compare returns a quad number of the cjmp, which the caller\n      patches to the cjmp destination.  *)\n@@ -2467,23 +2483,31 @@ let trans_visitor\n             in\n             let null_dtor_jmp = null_check dtor in\n               (* Call any dtor, if present. *)\n-            note_drop_step ty \"drop_ty: calling obj dtor\";\n-            trans_call_dynamic_glue tydesc\n-              Abi.tydesc_field_obj_drop_glue None [| binding |];\n-            patch null_dtor_jmp;\n-            (* Drop the body. *)\n-            note_drop_step ty \"drop_ty: dropping obj body\";\n-            trans_call_dynamic_glue tydesc\n-              Abi.tydesc_field_drop_glue None [| ty_params; alias body |];\n-            (* FIXME: this will fail if the user has lied about the\n-             * state-ness of their obj. We need to store state-ness in the\n-             * captured tydesc, and use that.  *)\n-            note_drop_step ty \"drop_ty: freeing obj body\";\n-            trans_free binding (type_has_state ty);\n-            mov binding zero;\n-            patch rc_jmp;\n-            patch null_jmp;\n-            note_drop_step ty \"drop_ty: done obj path\";\n+              note_drop_step ty \"drop_ty: calling obj dtor\";\n+              trans_call_dynamic_glue\n+                tydesc\n+                Abi.tydesc_field_obj_drop_glue\n+                None\n+                [| binding |]\n+                (Some binding);\n+              patch null_dtor_jmp;\n+              (* Drop the body. *)\n+              note_drop_step ty \"drop_ty: dropping obj body\";\n+              trans_call_dynamic_glue\n+                tydesc\n+                Abi.tydesc_field_drop_glue\n+                None\n+                [| ty_params; alias body |]\n+                None;\n+              (* FIXME: this will fail if the user has lied about the\n+               * state-ness of their obj. We need to store state-ness in the\n+               * captured tydesc, and use that.  *)\n+              note_drop_step ty \"drop_ty: freeing obj body\";\n+              trans_free binding (type_has_state ty);\n+              mov binding zero;\n+              patch rc_jmp;\n+              patch null_jmp;\n+              note_drop_step ty \"drop_ty: done obj path\";\n \n \n       | Ast.TY_param (i, _) ->\n@@ -2492,7 +2516,11 @@ let trans_visitor\n             begin\n               fun cell ->\n                 trans_call_simple_dynamic_glue\n-                  i Abi.tydesc_field_drop_glue ty_params cell\n+                  i\n+                  Abi.tydesc_field_drop_glue\n+                  ty_params\n+                  [| cell |]\n+                  None\n             end;\n           note_drop_step ty \"drop_ty: done parametric-ty path\";\n \n@@ -2514,7 +2542,9 @@ let trans_visitor\n \n                   trans_call_simple_static_glue\n                     (get_free_glue ty (mctrl = MEM_gc) curr_iso)\n-                    ty_params cell;\n+                    ty_params\n+                    [| cell |]\n+                    None;\n \n                   (* Null the slot out to prevent double-free if the frame\n                    * unwinds.\n@@ -2603,7 +2633,7 @@ let trans_visitor\n               trans_call_static_glue\n                 (code_fixup_to_ptr_operand glue_fix)\n                 (Some dst)\n-                [| alias ty_params; src; clone_task |]\n+                [| alias ty_params; src; clone_task |] None\n         | _ ->\n             iter_ty_parts_full ty_params dst src ty\n               (clone_ty ty_params clone_task) curr_iso\n@@ -2640,7 +2670,10 @@ let trans_visitor\n             lea vr body_mem;\n             trace_word cx.ctxt_sess.Session.sess_trace_drop vr;\n             trans_call_simple_static_glue\n-              (get_drop_glue body_ty curr_iso) ty_params vr;\n+              (get_drop_glue body_ty curr_iso)\n+              ty_params\n+              [| vr |]\n+              None;\n             note_drop_step ty \"in free-ty, calling free\";\n             trans_free cell is_gc;\n     end;\n@@ -2700,7 +2733,9 @@ let trans_visitor\n               lea tmp body_mem;\n               trans_call_simple_static_glue\n                 (get_mark_glue ty curr_iso)\n-                ty_params tmp;\n+                ty_params\n+                [| tmp |]\n+                None;\n               List.iter patch marked_jump;\n \n         | MEM_interior when type_is_structured ty ->\n@@ -2714,7 +2749,9 @@ let trans_visitor\n               lea tmp mem;\n               trans_call_simple_static_glue\n                 (get_mark_glue ty curr_iso)\n-                ty_params tmp\n+                ty_params\n+                [| tmp |]\n+                None\n \n         | _ -> ()\n \n@@ -3033,7 +3070,9 @@ let trans_visitor\n                     let ty_params_ptr = get_tydesc_params ty_params td in\n                       trans_call_dynamic_glue\n                         td Abi.tydesc_field_copy_glue\n-                        (Some dst) [| ty_params_ptr; src; |]\n+                        (Some dst)\n+                        [| ty_params_ptr; src; |]\n+                        None\n                 end\n \n           | Ast.TY_fn _\n@@ -4090,7 +4129,11 @@ let trans_visitor\n     let fp = get_iter_outer_frame_ptr_for_current_frame () in\n     let vr = next_vreg_cell Il.voidptr_t in\n       mov vr zero;\n-      trans_call_glue (code_of_operand block_fptr) None [| vr; fp |]\n+      trans_call_glue\n+        (code_of_operand block_fptr)\n+        None\n+        [| vr; fp |]\n+        None\n \n   and trans_vec_append dst_cell dst_ty src_oper src_ty =\n     let elt_ty = seq_unit_ty dst_ty in"}]}