{"sha": "58c0df2af6559f460e4dc58a45473f47d07b8431", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YzBkZjJhZjY1NTlmNDYwZTRkYzU4YTQ1NDczZjQ3ZDA3Yjg0MzE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-05T17:48:32Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-05T19:36:26Z"}, "message": "add #[non_owned] and #[mutable] attributes", "tree": {"sha": "8a0c40f4697820cd3162c80164cee500604d1ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0c40f4697820cd3162c80164cee500604d1ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c0df2af6559f460e4dc58a45473f47d07b8431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c0df2af6559f460e4dc58a45473f47d07b8431", "html_url": "https://github.com/rust-lang/rust/commit/58c0df2af6559f460e4dc58a45473f47d07b8431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c0df2af6559f460e4dc58a45473f47d07b8431/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063851ffa1b8388a0b70446c0209af16264e8181", "url": "https://api.github.com/repos/rust-lang/rust/commits/063851ffa1b8388a0b70446c0209af16264e8181", "html_url": "https://github.com/rust-lang/rust/commit/063851ffa1b8388a0b70446c0209af16264e8181"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "a4e5849e3c6bef10c1e78d536e970a34d093cac2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/58c0df2af6559f460e4dc58a45473f47d07b8431/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c0df2af6559f460e4dc58a45473f47d07b8431/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=58c0df2af6559f460e4dc58a45473f47d07b8431", "patch": "@@ -1784,7 +1784,7 @@ pub impl TypeContents {\n     }\n \n     fn nonowned(_cx: ctxt) -> TypeContents {\n-        TC_MANAGED + TC_BORROWED_POINTER\n+        TC_MANAGED + TC_BORROWED_POINTER + TC_NON_OWNED\n     }\n \n     fn contains_managed(&self) -> bool {\n@@ -1838,40 +1838,43 @@ impl ToStr for TypeContents {\n }\n \n /// Constant for a type containing nothing of interest.\n-static TC_NONE: TypeContents =             TypeContents{bits:0b0000_00000000};\n+static TC_NONE: TypeContents =             TypeContents{bits: 0b0000_0000_0000};\n \n /// Contains a borrowed value with a lifetime other than static\n-static TC_BORROWED_POINTER: TypeContents = TypeContents{bits:0b0000_00000001};\n+static TC_BORROWED_POINTER: TypeContents = TypeContents{bits: 0b0000_0000_0001};\n \n /// Contains an owned pointer (~T) but not slice of some kind\n-static TC_OWNED_POINTER: TypeContents =    TypeContents{bits:0b000000000010};\n+static TC_OWNED_POINTER: TypeContents =    TypeContents{bits: 0b0000_0000_0010};\n \n /// Contains an owned vector ~[] or owned string ~str\n-static TC_OWNED_VEC: TypeContents =        TypeContents{bits:0b000000000100};\n+static TC_OWNED_VEC: TypeContents =        TypeContents{bits: 0b0000_0000_0100};\n \n /// Contains a ~fn() or a ~Trait, which is non-copyable.\n-static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits:0b000000001000};\n+static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits: 0b0000_0000_1000};\n \n /// Type with a destructor\n-static TC_DTOR: TypeContents =             TypeContents{bits:0b000000010000};\n+static TC_DTOR: TypeContents =             TypeContents{bits: 0b0000_0001_0000};\n \n /// Contains a managed value\n-static TC_MANAGED: TypeContents =          TypeContents{bits:0b000000100000};\n+static TC_MANAGED: TypeContents =          TypeContents{bits: 0b0000_0010_0000};\n \n /// &mut with any region\n-static TC_BORROWED_MUT: TypeContents =     TypeContents{bits:0b000001000000};\n+static TC_BORROWED_MUT: TypeContents =     TypeContents{bits: 0b0000_0100_0000};\n \n /// Mutable content, whether owned or by ref\n-static TC_MUTABLE: TypeContents =          TypeContents{bits:0b000010000000};\n+static TC_MUTABLE: TypeContents =          TypeContents{bits: 0b0000_1000_0000};\n \n-/// Mutable content, whether owned or by ref\n-static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits:0b000100000000};\n+/// One-shot closure\n+static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits: 0b0001_0000_0000};\n \n /// An enum with no variants.\n-static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits:0b010000000000};\n+static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits: 0b0010_0000_0000};\n+\n+/// Contains a type marked with `#[non_owned]`\n+static TC_NON_OWNED: TypeContents =        TypeContents{bits: 0b0100_0000_0000};\n \n /// All possible contents.\n-static TC_ALL: TypeContents =              TypeContents{bits:0b011111111111};\n+static TC_ALL: TypeContents =              TypeContents{bits: 0b0111_1111_1111};\n \n pub fn type_is_copyable(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_copy(cx)\n@@ -1939,7 +1942,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n         let _i = indenter();\n \n-        let mut result = match get(ty).sty {\n+        let result = match get(ty).sty {\n             // Scalar and unique types are sendable, constant, and owned\n             ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n             ty_bare_fn(_) | ty_ptr(_) => {\n@@ -2013,14 +2016,19 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_struct(did, ref substs) => {\n                 let flds = struct_fields(cx, did, substs);\n-                let flds_tc = flds.foldl(\n+                let mut res = flds.foldl(\n                     TC_NONE,\n                     |tc, f| tc + tc_mt(cx, f.mt, cache));\n                 if ty::has_dtor(cx, did) {\n-                    flds_tc + TC_DTOR\n-                } else {\n-                    flds_tc\n+                    res += TC_DTOR;\n+                }\n+                if has_attr(cx, did, \"mutable\") {\n+                    res += TC_MUTABLE;\n                 }\n+                if has_attr(cx, did, \"non_owned\") {\n+                    res += TC_NON_OWNED;\n+                }\n+                res\n             }\n \n             ty_tup(ref tys) => {\n@@ -2029,7 +2037,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_enum(did, ref substs) => {\n                 let variants = substd_enum_variants(cx, did, substs);\n-                if variants.is_empty() {\n+                let mut res = if variants.is_empty() {\n                     // we somewhat arbitrary declare that empty enums\n                     // are non-copyable\n                     TC_EMPTY_ENUM\n@@ -2039,7 +2047,14 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                             *tc,\n                             |tc, arg_ty| *tc + tc_ty(cx, *arg_ty, cache))\n                     })\n+                };\n+                if has_attr(cx, did, \"mutable\") {\n+                    res += TC_MUTABLE;\n+                }\n+                if has_attr(cx, did, \"non_owned\") {\n+                    res += TC_NON_OWNED;\n                 }\n+                res\n             }\n \n             ty_param(p) => {\n@@ -3841,28 +3856,32 @@ pub fn lookup_trait_def(cx: ctxt, did: ast::def_id) -> @ty::TraitDef {\n     }\n }\n \n-// Determine whether an item is annotated with #[packed] or not\n-pub fn lookup_packed(tcx: ctxt,\n-                  did: def_id) -> bool {\n+/// Determine whether an item is annotated with an attribute\n+pub fn has_attr(tcx: ctxt, did: def_id, attr: &str) -> bool {\n     if is_local(did) {\n         match tcx.items.find(&did.node) {\n             Some(\n                 &ast_map::node_item(@ast::item {\n                     attrs: ref attrs,\n                     _\n-                }, _)) => attr::attrs_contains_name(*attrs, \"packed\"),\n+                }, _)) => attr::attrs_contains_name(*attrs, attr),\n             _ => tcx.sess.bug(fmt!(\"lookup_packed: %? is not an item\",\n                                    did))\n         }\n     } else {\n         let mut ret = false;\n         do csearch::get_item_attrs(tcx.cstore, did) |meta_items| {\n-            ret = attr::contains_name(meta_items, \"packed\");\n+            ret = attr::contains_name(meta_items, attr);\n         }\n         ret\n     }\n }\n \n+/// Determine whether an item is annotated with `#[packed]` or not\n+pub fn lookup_packed(tcx: ctxt, did: def_id) -> bool {\n+    has_attr(tcx, did, \"packed\")\n+}\n+\n // Look up a field ID, whether or not it's local\n // Takes a list of type substs in case the struct is generic\n pub fn lookup_field_type(tcx: ctxt,"}]}