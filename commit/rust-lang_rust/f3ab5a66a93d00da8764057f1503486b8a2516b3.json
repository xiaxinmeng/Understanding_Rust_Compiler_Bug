{"sha": "f3ab5a66a93d00da8764057f1503486b8a2516b3", "node_id": "C_kwDOAAsO6NoAKGYzYWI1YTY2YTkzZDAwZGE4NzY0MDU3ZjE1MDM0ODZiOGEyNTE2YjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-02T15:12:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-02T15:12:21Z"}, "message": "Rollup merge of #102538 - cjgillot:def-span-ctxt, r=fee1-dead\n\nGive `def_span` the same SyntaxContext as `span_with_body`.\n\nhttps://github.com/rust-lang/rust/issues/102217\n\nI'm not sure how to add a test, since the erroneous span was crafted using a proc macro.\nThe debug assertion in `def_span` will ensure we have the correct behaviour.", "tree": {"sha": "ec0fa413a8739eed066c27334e5a024c0409087f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0fa413a8739eed066c27334e5a024c0409087f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ab5a66a93d00da8764057f1503486b8a2516b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOapVCRBK7hj4Ov3rIwAAHNsIADF4ki0b6sYtB+qvqO7zlJqg\n3Xh3V/INgd/w/pQ996gpTs+nDO34k0G0uT2qcVVncz68LEREhfyB0JMHr2B5f84w\n4+cO5PP0ftdXG9JrS/viya7HfAMTbwCRmbt5DLA1W6fSPipBIHt/+yfOq8E5dSpN\nDNLxV/qS6xomhE08YpDBX06N2OcvI5RJUgz3D+ZbFz3vI/Uvn/dyUe8RPMjz6LSN\nsSLoopx4XvkOllgc4imWhzx6TT163+O+BWzSGub/Z7N2qq929i+xkh3aGXwrnWb8\nMmEFWrpTKm7jR32PVbGieCAvKiZAahPqyci+Uyb1x5XSEzuFIGGVtokoQY8NGXY=\n=XPdx\n-----END PGP SIGNATURE-----\n", "payload": "tree ec0fa413a8739eed066c27334e5a024c0409087f\nparent ed9740846b8fc813a763778e792589c17b359b45\nparent c321933e22952ec712f770340c674b1f5ccc03ed\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1664723541 +0530\ncommitter GitHub <noreply@github.com> 1664723541 +0530\n\nRollup merge of #102538 - cjgillot:def-span-ctxt, r=fee1-dead\n\nGive `def_span` the same SyntaxContext as `span_with_body`.\n\nhttps://github.com/rust-lang/rust/issues/102217\n\nI'm not sure how to add a test, since the erroneous span was crafted using a proc macro.\nThe debug assertion in `def_span` will ensure we have the correct behaviour.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab5a66a93d00da8764057f1503486b8a2516b3", "html_url": "https://github.com/rust-lang/rust/commit/f3ab5a66a93d00da8764057f1503486b8a2516b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab5a66a93d00da8764057f1503486b8a2516b3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9740846b8fc813a763778e792589c17b359b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9740846b8fc813a763778e792589c17b359b45", "html_url": "https://github.com/rust-lang/rust/commit/ed9740846b8fc813a763778e792589c17b359b45"}, {"sha": "c321933e22952ec712f770340c674b1f5ccc03ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c321933e22952ec712f770340c674b1f5ccc03ed", "html_url": "https://github.com/rust-lang/rust/commit/c321933e22952ec712f770340c674b1f5ccc03ed"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "b78c3f85596c0c9df6592542be23da928100ce9d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f3ab5a66a93d00da8764057f1503486b8a2516b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ab5a66a93d00da8764057f1503486b8a2516b3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f3ab5a66a93d00da8764057f1503486b8a2516b3", "patch": "@@ -941,9 +941,19 @@ impl<'hir> Map<'hir> {\n \n         let span = match self.find(hir_id)? {\n             // Function-like.\n-            Node::Item(Item { kind: ItemKind::Fn(sig, ..), .. })\n-            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, ..), .. })\n-            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, ..), .. }) => sig.span,\n+            Node::Item(Item { kind: ItemKind::Fn(sig, ..), span: outer_span, .. })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(sig, ..),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(sig, ..), span: outer_span, ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext, and not the\n+                // SyntaxContext of the visibility.\n+                sig.span.find_ancestor_in_same_ctxt(*outer_span).unwrap_or(*outer_span)\n+            }\n             // Constants and Statics.\n             Node::Item(Item {\n                 kind:\n@@ -985,7 +995,11 @@ impl<'hir> Map<'hir> {\n             }\n             // Other cases.\n             Node::Item(item) => match &item.kind {\n-                ItemKind::Use(path, _) => path.span,\n+                ItemKind::Use(path, _) => {\n+                    // Ensure that the returned span has the item's SyntaxContext, and not the\n+                    // SyntaxContext of the path.\n+                    path.span.find_ancestor_in_same_ctxt(item.span).unwrap_or(item.span)\n+                }\n                 _ => named_span(item.span, item.ident, item.kind.generics()),\n             },\n             Node::Variant(variant) => named_span(variant.span, variant.ident, None),\n@@ -995,11 +1009,17 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n-            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl_span, .. }), .. }) => {\n-                *fn_decl_span\n+            Node::Expr(Expr {\n+                kind: ExprKind::Closure(Closure { fn_decl_span, .. }),\n+                span,\n+                ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext.\n+                fn_decl_span.find_ancestor_in_same_ctxt(*span).unwrap_or(*span)\n             }\n             _ => self.span_with_body(hir_id),\n         };\n+        debug_assert_eq!(span.ctxt(), self.span_with_body(hir_id).ctxt());\n         Some(span)\n     }\n "}]}