{"sha": "36883186ab88e7b39ea2cb0f47c2c8999840663e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ODgzMTg2YWI4OGU3YjM5ZWEyY2IwZjQ3YzJjODk5OTg0MDY2M2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T02:06:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-14T02:08:02Z"}, "message": "De-mode core::future.", "tree": {"sha": "fd27a1819bd110cc11977286adb7b033197470e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd27a1819bd110cc11977286adb7b033197470e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36883186ab88e7b39ea2cb0f47c2c8999840663e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36883186ab88e7b39ea2cb0f47c2c8999840663e", "html_url": "https://github.com/rust-lang/rust/commit/36883186ab88e7b39ea2cb0f47c2c8999840663e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36883186ab88e7b39ea2cb0f47c2c8999840663e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6eaf2acba7f71422e0540b0abbb7828f00b68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6eaf2acba7f71422e0540b0abbb7828f00b68f", "html_url": "https://github.com/rust-lang/rust/commit/bc6eaf2acba7f71422e0540b0abbb7828f00b68f"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "79259c785fec2d4a817e4c4660a981c5d11474fa", "filename": "src/libcore/future.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=36883186ab88e7b39ea2cb0f47c2c8999840663e", "patch": "@@ -1,3 +1,7 @@\n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /*!\n  * A type representing values that may be computed concurrently and\n  * operations for working with them.\n@@ -37,13 +41,13 @@ impl<A:copy send> future<A> {\n     fn get() -> A {\n         //! Get the value of the future\n \n-        get(self)\n+        get(&self)\n     }\n \n-    fn with<B>(blk: fn(A) -> B) -> B {\n+    fn with<B>(blk: fn((&A)) -> B) -> B {\n         //! Work with the value without copying it\n \n-        with(self, blk)\n+        with(&self, blk)\n     }\n }\n \n@@ -64,7 +68,7 @@ macro_rules! move_it {\n     {$x:expr} => { unsafe { let y <- *ptr::addr_of($x); y } }\n }\n \n-fn from_port<A:send>(-port: future_pipe::client::waiting<A>) -> future<A> {\n+fn from_port<A:send>(+port: future_pipe::client::waiting<A>) -> future<A> {\n     #[doc = \"\n     Create a future from a port\n \n@@ -110,13 +114,13 @@ fn spawn<A:send>(+blk: fn~() -> A) -> future<A> {\n     }))\n }\n \n-fn get<A:copy>(future: future<A>) -> A {\n+fn get<A:copy>(future: &future<A>) -> A {\n     //! Get the value of the future\n \n-    do with(future) |v| { v }\n+    do with(future) |v| { *v }\n }\n \n-fn with<A,B>(future: future<A>, blk: fn(A) -> B) -> B {\n+fn with<A,B>(future: &future<A>, blk: fn((&A)) -> B) -> B {\n     //! Work with the value without copying it\n \n     let v = match copy future.v {\n@@ -127,7 +131,7 @@ fn with<A,B>(future: future<A>, blk: fn(A) -> B) -> B {\n         v\n       }\n     };\n-    blk(*v)\n+    blk(v)\n }\n \n proto! future_pipe {\n@@ -139,22 +143,22 @@ proto! future_pipe {\n #[test]\n fn test_from_value() {\n     let f = from_value(~\"snail\");\n-    assert get(f) == ~\"snail\";\n+    assert get(&f) == ~\"snail\";\n }\n \n #[test]\n fn test_from_port() {\n     let (po, ch) = future_pipe::init();\n     future_pipe::server::completed(ch, ~\"whale\");\n     let f = from_port(po);\n-    assert get(f) == ~\"whale\";\n+    assert get(&f) == ~\"whale\";\n }\n \n #[test]\n fn test_from_fn() {\n     let f = fn@() -> ~str { ~\"brail\" };\n     let f = from_fn(f);\n-    assert get(f) == ~\"brail\";\n+    assert get(&f) == ~\"brail\";\n }\n \n #[test]\n@@ -166,25 +170,25 @@ fn test_interface_get() {\n #[test]\n fn test_with() {\n     let f = from_value(~\"nail\");\n-    assert with(f, |v| v) == ~\"nail\";\n+    assert with(&f, |v| *v) == ~\"nail\";\n }\n \n #[test]\n fn test_interface_with() {\n     let f = from_value(~\"kale\");\n-    assert f.with(|v| v) == ~\"kale\";\n+    assert f.with(|v| *v) == ~\"kale\";\n }\n \n #[test]\n fn test_spawn() {\n     let f = spawn(|| ~\"bale\");\n-    assert get(f) == ~\"bale\";\n+    assert get(&f) == ~\"bale\";\n }\n \n #[test]\n #[should_fail]\n #[ignore(cfg(target_os = \"win32\"))]\n fn test_futurefail() {\n     let f = spawn(|| fail);\n-    let _x: ~str = get(f);\n+    let _x: ~str = get(&f);\n }"}, {"sha": "230e9173dcb1cebc25105875c496149b51f739da", "filename": "src/libcore/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=36883186ab88e7b39ea2cb0f47c2c8999840663e", "patch": "@@ -409,7 +409,7 @@ impl task_builder {\n         do self.future_result(|+r| { result = some(r); }).spawn {\n             comm::send(ch, f());\n         }\n-        match future::get(option::unwrap(result)) {\n+        match future::get(&option::unwrap(result)) {\n             success => result::ok(comm::recv(po)),\n             failure => result::err(())\n         }\n@@ -1704,13 +1704,13 @@ fn test_add_wrapper() {\n fn test_future_result() {\n     let mut result = none;\n     do task().future_result(|+r| { result = some(r); }).spawn { }\n-    assert future::get(option::unwrap(result)) == success;\n+    assert future::get(&option::unwrap(result)) == success;\n \n     result = none;\n     do task().future_result(|+r| { result = some(r); }).unlinked().spawn {\n         fail;\n     }\n-    assert future::get(option::unwrap(result)) == failure;\n+    assert future::get(&option::unwrap(result)) == failure;\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "847e08083ef4665e259def04f3de89595b21f745", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=36883186ab88e7b39ea2cb0f47c2c8999840663e", "patch": "@@ -429,7 +429,7 @@ mod tests {\n             }\n         }\n         // Wait for children to pass their asserts\n-        for vec::each(children) |r| { future::get(r); }\n+        for vec::each(children) |r| { future::get(&r); }\n         // Wait for writer to finish\n         p.recv();\n         do arc.read |num| { assert *num == 10; }"}, {"sha": "104826afbac317a0b22e8ea2be20aa864fbceeb5", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=36883186ab88e7b39ea2cb0f47c2c8999840663e", "patch": "@@ -391,7 +391,7 @@ fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n         task::task().unlinked().future_result(|+r| {\n             result_future = some(r);\n         }).spawn(testfn);\n-        let task_result = future::get(option::unwrap(result_future));\n+        let task_result = future::get(&option::unwrap(result_future));\n         let test_result = calc_result(test, task_result == task::success);\n         comm::send(monitor_ch, (copy test, test_result));\n     };"}, {"sha": "3f33780ed2f267cb6dc67cda599a7df2d714f700", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36883186ab88e7b39ea2cb0f47c2c8999840663e/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=36883186ab88e7b39ea2cb0f47c2c8999840663e", "patch": "@@ -274,7 +274,7 @@ fn future_writer_factory(\n         do task::spawn {\n             let (writer, future) = future_writer();\n             comm::send(writer_ch, writer);\n-            let s = future::get(future);\n+            let s = future::get(&future);\n             comm::send(markdown_ch, (page, s));\n         }\n         comm::recv(writer_po)"}]}