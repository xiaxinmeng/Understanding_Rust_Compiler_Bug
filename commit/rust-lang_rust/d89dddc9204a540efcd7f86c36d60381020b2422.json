{"sha": "d89dddc9204a540efcd7f86c36d60381020b2422", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OWRkZGM5MjA0YTU0MGVmY2Q3Zjg2YzM2ZDYwMzgxMDIwYjI0MjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-14T15:42:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:51Z"}, "message": "rustc_metadata: address some review comments.", "tree": {"sha": "7df9cf210cbd704d29f46b69e17f9d015a34929b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df9cf210cbd704d29f46b69e17f9d015a34929b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d89dddc9204a540efcd7f86c36d60381020b2422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d89dddc9204a540efcd7f86c36d60381020b2422", "html_url": "https://github.com/rust-lang/rust/commit/d89dddc9204a540efcd7f86c36d60381020b2422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d89dddc9204a540efcd7f86c36d60381020b2422/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34066d60c38b8e1049a60e1eaf26cd84a67e7655", "url": "https://api.github.com/repos/rust-lang/rust/commits/34066d60c38b8e1049a60e1eaf26cd84a67e7655", "html_url": "https://github.com/rust-lang/rust/commit/34066d60c38b8e1049a60e1eaf26cd84a67e7655"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "e164c28c953bc8b7d76f2fc46f44834a52404e65", "filename": "src/librustc_metadata/table.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d89dddc9204a540efcd7f86c36d60381020b2422/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d89dddc9204a540efcd7f86c36d60381020b2422/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=d89dddc9204a540efcd7f86c36d60381020b2422", "patch": "@@ -23,7 +23,13 @@ crate trait FixedSizeEncoding: Default {\n     // FIXME(eddyb) make these generic functions, or at least defaults here.\n     // (same problem as above, needs `[u8; Self::BYTE_LEN]`)\n     // For now, a macro (`fixed_size_encoding_byte_len_and_defaults`) is used.\n+\n+    /// Read a `Self` value (encoded as `Self::BYTE_LEN` bytes),\n+    /// from `&b[i * Self::BYTE_LEN..]`, returning `None` if `i`\n+    /// is not in bounds, or `Some(Self::from_bytes(...))` otherwise.\n     fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self>;\n+    /// Write a `Self` value (encoded as `Self::BYTE_LEN` bytes),\n+    /// at `&mut b[i * Self::BYTE_LEN..]`, using `Self::write_to_bytes`.\n     fn write_to_bytes_at(self, b: &mut [u8], i: usize);\n }\n \n@@ -112,8 +118,11 @@ impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n     }\n }\n \n-/// Random-access table, similar to `Vec<Option<T>>`, but without requiring\n-/// encoding or decoding all the values eagerly and in-order.\n+/// Random-access table (i.e. offeringconstant-time `get`/`set`), similar to\n+/// `Vec<Option<T>>`, but without requiring encoding or decoding all the values\n+/// eagerly and in-order.\n+/// A total of `(max_idx + 1) * <Option<T> as FixedSizeEncoding>::BYTE_LEN` bytes\n+/// are used for a table, where `max_idx` is the largest index passed to `set`.\n // FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n // when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n // (not sure if that is possible given that the `Vec` is being resized now)\n@@ -135,10 +144,16 @@ impl<T> Default for Table<T> where Option<T>: FixedSizeEncoding {\n \n impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n     crate fn set(&mut self, i: usize, value: T) {\n+        // FIXME(eddyb) investigate more compact encodings for sparse tables.\n+        // On the PR @michaelwoerister mentioned:\n+        // > Space requirements could perhaps be optimized by using the HAMT `popcnt`\n+        // > trick (i.e. divide things into buckets of 32 or 64 items and then\n+        // > store bit-masks of which item in each bucket is actually serialized).\n         let needed = (i + 1) * <Option<T>>::BYTE_LEN;\n         if self.bytes.len() < needed {\n             self.bytes.resize(needed, 0);\n         }\n+\n         Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n@@ -170,12 +185,13 @@ impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n     ) -> Option<T> {\n         debug!(\"Table::lookup: index={:?} len={:?}\", i, self.meta);\n \n-        let bytes = &metadata.raw_bytes()[self.position.get()..][..self.meta];\n+        let start = self.position.get();\n+        let bytes = &metadata.raw_bytes()[start..start + self.meta];\n         <Option<T>>::maybe_read_from_bytes_at(bytes, i)?\n     }\n }\n \n-/// Per-definition table, similar to `Table` but keyed on `DefIndex`.\n+/// Like a `Table` but using `DefIndex` instead of `usize` as keys.\n // FIXME(eddyb) replace by making `Table` behave like `IndexVec`,\n // and by using `newtype_index!` to define `DefIndex`.\n crate struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;"}]}