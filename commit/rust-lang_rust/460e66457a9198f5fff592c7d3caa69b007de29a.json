{"sha": "460e66457a9198f5fff592c7d3caa69b007de29a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGU2NjQ1N2E5MTk4ZjVmZmY1OTJjN2QzY2FhNjliMDA3ZGUyOWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-10T19:30:52Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T20:48:07Z"}, "message": "mir: Store immediates used for indirect arguments in an alloca.", "tree": {"sha": "8a0fd9ef2fa26e8c3755aadf75d81e702bfa1089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a0fd9ef2fa26e8c3755aadf75d81e702bfa1089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460e66457a9198f5fff592c7d3caa69b007de29a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460e66457a9198f5fff592c7d3caa69b007de29a", "html_url": "https://github.com/rust-lang/rust/commit/460e66457a9198f5fff592c7d3caa69b007de29a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460e66457a9198f5fff592c7d3caa69b007de29a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473f804491772fe9a31f4096c3ec8da121fc8294", "url": "https://api.github.com/repos/rust-lang/rust/commits/473f804491772fe9a31f4096c3ec8da121fc8294", "html_url": "https://github.com/rust-lang/rust/commit/473f804491772fe9a31f4096c3ec8da121fc8294"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "080547952a5ceae34b0891990e9d67a3ccb40bf9", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/460e66457a9198f5fff592c7d3caa69b007de29a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e66457a9198f5fff592c7d3caa69b007de29a/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=460e66457a9198f5fff592c7d3caa69b007de29a", "patch": "@@ -410,7 +410,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n         // Force by-ref if we have to load through a cast pointer.\n         let (mut llval, by_ref) = match val {\n-            Immediate(llval) if arg.cast.is_some() => {\n+            Immediate(llval) if arg.is_indirect() || arg.cast.is_some() => {\n                 let llscratch = build::AllocaFcx(bcx.fcx(), arg.original_ty, \"arg\");\n                 bcx.store(llval, llscratch);\n                 (llscratch, true)"}]}