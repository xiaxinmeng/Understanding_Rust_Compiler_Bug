{"sha": "51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxY2U0YTI1ODRmNzM1NjcwMmY4ZTRmYWExMzQzZTJjZTQ3ZGI1Zjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-06T09:51:32Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-06T09:51:32Z"}, "message": "use byteorder's write_f{32,64} instead of transmuting", "tree": {"sha": "f819744aac264648fa75ac16ff95bde62e1b8a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f819744aac264648fa75ac16ff95bde62e1b8a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXfNSkAAoJEFbW7qD8Z6xG+9AQAIZ6SEmeBjEvomn+ab+Tbk9d\nOuEuiNTy5JoytO3beaDpewmiTxszFGnLC+JrUUcMhj0oTAmcUPxUsyupySk4p+yR\nGQul9ejeKpeDhS+dbmox80RkaebR/rJ0+SQQTuPnyIxEKbonWtOeLPrWPWhFvTTc\nELrRcMx48S5fuaayXSQAxKWkfOc0F+ONK8sXilJmR3GwjLU9n49RbHbe+yKKjGTE\naJyu1sp/rmBlEGkIinYp3ij+Sd6TQp13zoOkgMCL5NHD7jh9ahrv+Fh1XG91OTA7\nqT27bV/mDPM2eK3bTFu1SKVvXeoASCOchp5ZrnDHRFrfFsmDvtbVxaCACsy6X8iL\n37b9VWkdU0S6rsSGkSFli/Q5gQgF/IzlKj132xTj8wjSBJp86TbRbtEc4vBs00Rl\nV9sX/5XveD4Qp1D7y3UlYZEo0bbbnM2wEwNz5+mMoC/88MLl5ILBEN/D3XTbP5bT\nBtJNCJhARKTJAge1Ir58fYtlQEXFDaMDZ/3tfFePF45f6qK43U1y6zhmxTwlrq47\nKeup3Ygf0SyV8cZYMn39IA5z5JA0cbUsARFGgOzWAAVk5ZZN64UqittkyLqKNA4o\ntL1VZAXw1m/RWLZMfBls37pVw1pVz27qIk4M5Q5JBxElSBEF5PN7LrbraV0SSFmx\nhfGdYwDCz3FRA61at+G5\n=dcih\n-----END PGP SIGNATURE-----", "payload": "tree f819744aac264648fa75ac16ff95bde62e1b8a6a\nparent 4b831569f67a8e8bd5131f92966cd186784b495f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467798692 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467798692 +0200\n\nuse byteorder's write_f{32,64} instead of transmuting"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "html_url": "https://github.com/rust-lang/rust/commit/51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b831569f67a8e8bd5131f92966cd186784b495f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b831569f67a8e8bd5131f92966cd186784b495f", "html_url": "https://github.com/rust-lang/rust/commit/4b831569f67a8e8bd5131f92966cd186784b495f"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "9ef51a04145261b8cbedfaa7aa4cc2659ffa32e9", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "patch": "@@ -170,7 +170,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn const_to_ptr(&mut self, const_val: &const_val::ConstVal) -> EvalResult<'tcx, Pointer> {\n         use rustc::middle::const_val::ConstVal::*;\n         use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstFloat};\n-        use std::mem::transmute;\n         macro_rules! i2p {\n             ($i:ident, $n:expr) => {{\n                 let ptr = self.memory.allocate($n);\n@@ -180,12 +179,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n         match *const_val {\n             Float(ConstFloat::F32(f)) => {\n-                let i = unsafe { transmute::<_, u32>(f) };\n-                i2p!(i, 4)\n+                let ptr = self.memory.allocate(4);\n+                self.memory.write_f32(ptr, f)?;\n+                Ok(ptr)\n             },\n             Float(ConstFloat::F64(f)) => {\n-                let i = unsafe { transmute::<_, u64>(f) };\n-                i2p!(i, 8)\n+                let ptr = self.memory.allocate(8);\n+                self.memory.write_f64(ptr, f)?;\n+                Ok(ptr)\n             },\n             Float(ConstFloat::FInfer{..}) => unreachable!(),\n             Integral(ConstInt::Infer(_)) => unreachable!(),\n@@ -834,7 +835,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use syntax::ast::{IntTy, UintTy, FloatTy};\n-        use std::mem::transmute;\n         let val = match (self.memory.pointer_size(), &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n             (_, &ty::TyChar)              => {\n@@ -858,14 +858,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             (_, &ty::TyUint(UintTy::U32)) => PrimVal::U32(self.memory.read_uint(ptr, 4)? as u32),\n             (8, &ty::TyUint(UintTy::Us)) |\n             (_, &ty::TyUint(UintTy::U64)) => PrimVal::U64(self.memory.read_uint(ptr, 8)? as u64),\n-            (_, &ty::TyFloat(FloatTy::F32)) => {\n-                let i = self.memory.read_uint(ptr, 4)? as u32;\n-                PrimVal::F32(unsafe { transmute(i) })\n-            },\n-            (_, &ty::TyFloat(FloatTy::F64)) => {\n-                let i = self.memory.read_uint(ptr, 8)?;\n-                PrimVal::F64(unsafe { transmute(i) })\n-            },\n+\n+            (_, &ty::TyFloat(FloatTy::F32)) => PrimVal::F32(self.memory.read_f32(ptr)?),\n+            (_, &ty::TyFloat(FloatTy::F64)) => PrimVal::F64(self.memory.read_f64(ptr)?),\n \n             (_, &ty::TyFnDef(def_id, substs, fn_ty)) => {\n                 PrimVal::FnPtr(self.memory.create_fn_ptr(def_id, substs, fn_ty))"}, {"sha": "293887ba8625584bf2f6b788d81a6001e530e23f", "filename": "src/memory.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "patch": "@@ -394,7 +394,6 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<'tcx, ()> {\n-        use std::mem::transmute;\n         let pointer_size = self.pointer_size();\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n@@ -408,8 +407,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n             PrimVal::Char(c) => self.write_uint(ptr, c as u64, 4),\n             PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n-            PrimVal::F32(f) => self.write_uint(ptr, unsafe { transmute::<_, u32>(f) } as u64, 4),\n-            PrimVal::F64(f) => self.write_uint(ptr, unsafe { transmute::<_, u64>(f) }, 8),\n+            PrimVal::F32(f) => self.write_f32(ptr, f),\n+            PrimVal::F64(f) => self.write_f64(ptr, f),\n             PrimVal::FnPtr(_p) |\n             PrimVal::AbstractPtr(_p) => unimplemented!(),\n         }\n@@ -467,6 +466,28 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size();\n         self.write_uint(ptr, n, size)\n     }\n+\n+    pub fn write_f32(&mut self, ptr: Pointer, f: f32) -> EvalResult<'tcx, ()> {\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, 4)?;\n+        write_target_f32(endianess, b, f).unwrap();\n+        Ok(())\n+    }\n+\n+    pub fn write_f64(&mut self, ptr: Pointer, f: f64) -> EvalResult<'tcx, ()> {\n+        let endianess = self.endianess();\n+        let b = self.get_bytes_mut(ptr, 8)?;\n+        write_target_f64(endianess, b, f).unwrap();\n+        Ok(())\n+    }\n+\n+    pub fn read_f32(&self, ptr: Pointer) -> EvalResult<'tcx, f32> {\n+        self.get_bytes(ptr, 4).map(|b| read_target_f32(self.endianess(), b).unwrap())\n+    }\n+\n+    pub fn read_f64(&self, ptr: Pointer) -> EvalResult<'tcx, f64> {\n+        self.get_bytes(ptr, 8).map(|b| read_target_f64(self.endianess(), b).unwrap())\n+    }\n }\n \n /// Relocations\n@@ -589,6 +610,36 @@ fn read_target_int(endianess: layout::Endian, mut source: &[u8]) -> Result<i64,\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Methods to access floats in the target endianess\n+////////////////////////////////////////////////////////////////////////////////\n+\n+fn write_target_f32(endianess: layout::Endian, mut target: &mut [u8], data: f32) -> Result<(), byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => target.write_f32::<LittleEndian>(data),\n+        layout::Endian::Big => target.write_f32::<BigEndian>(data),\n+    }\n+}\n+fn write_target_f64(endianess: layout::Endian, mut target: &mut [u8], data: f64) -> Result<(), byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => target.write_f64::<LittleEndian>(data),\n+        layout::Endian::Big => target.write_f64::<BigEndian>(data),\n+    }\n+}\n+\n+fn read_target_f32(endianess: layout::Endian, mut source: &[u8]) -> Result<f32, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_f32::<LittleEndian>(),\n+        layout::Endian::Big => source.read_f32::<BigEndian>(),\n+    }\n+}\n+fn read_target_f64(endianess: layout::Endian, mut source: &[u8]) -> Result<f64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_f64::<LittleEndian>(),\n+        layout::Endian::Big => source.read_f64::<BigEndian>(),\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Undefined byte tracking\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "9c4d0594d1c9916dac909bcdd5087008a2b79e6c", "filename": "tests/run-pass/floats.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/tests%2Frun-pass%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ce4a2584f7356702f8e4faa1343e2ce47db5f8/tests%2Frun-pass%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloats.rs?ref=51ce4a2584f7356702f8e4faa1343e2ce47db5f8", "patch": "@@ -5,4 +5,7 @@ fn main() {\n     assert_eq!(-{5.0_f32}, -5.0_f32);\n     assert!((5.0_f32/0.0).is_infinite());\n     assert!((-5.0_f32).sqrt().is_nan());\n+    let x: u64 = unsafe { std::mem::transmute(42.0_f64) };\n+    let y: f64 = unsafe { std::mem::transmute(x) };\n+    assert_eq!(y, 42.0_f64);\n }"}]}