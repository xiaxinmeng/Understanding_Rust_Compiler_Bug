{"sha": "6fe7aa4aff1f179562869dae611560efcc2b29b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTdhYTRhZmYxZjE3OTU2Mjg2OWRhZTYxMTU2MGVmY2MyYjI5Yjg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T14:41:56Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-28T14:41:56Z"}, "message": "Move to blocks, rather than fn@s, in parser.rs", "tree": {"sha": "3c6b302633db87c3e91f0c89ddcf84e3cef77732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c6b302633db87c3e91f0c89ddcf84e3cef77732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe7aa4aff1f179562869dae611560efcc2b29b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe7aa4aff1f179562869dae611560efcc2b29b8", "html_url": "https://github.com/rust-lang/rust/commit/6fe7aa4aff1f179562869dae611560efcc2b29b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe7aa4aff1f179562869dae611560efcc2b29b8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0aee74bf15446a235830c0ea7a32ac1ea765a4", "html_url": "https://github.com/rust-lang/rust/commit/7a0aee74bf15446a235830c0ea7a32ac1ea765a4"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "551e6260cc8e4b60b239445dff2627d4b53eab42", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6fe7aa4aff1f179562869dae611560efcc2b29b8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe7aa4aff1f179562869dae611560efcc2b29b8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6fe7aa4aff1f179562869dae611560efcc2b29b8", "patch": "@@ -367,9 +367,9 @@ fn parse_constr_arg(args: [ast::arg], p: parser) -> @ast::constr_arg {\n fn parse_ty_constr(fn_args: [ast::arg], p: parser) -> @ast::constr {\n     let lo = p.get_lo_pos();\n     let path = parse_path(p);\n-    let pf = bind parse_constr_arg(fn_args, _);\n     let args: {node: [@ast::constr_arg], span: span} =\n-        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA), pf, p);\n+        parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n+                  {|p| parse_constr_arg(fn_args, p)}, p);\n     ret @spanned(lo, args.span.hi,\n                  {path: path, args: args.node, id: p.get_id()});\n }\n@@ -386,7 +386,7 @@ fn parse_constr_in_type(p: parser) -> @ast::ty_constr {\n }\n \n \n-fn parse_constrs<T>(pser: fn@(parser) -> @ast::constr_general<T>,\n+fn parse_constrs<T>(pser: block(parser) -> @ast::constr_general<T>,\n                     p: parser) ->\n    [@ast::constr_general<T>] {\n     let constrs: [@ast::constr_general<T>] = [];\n@@ -414,7 +414,8 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: parser, colons_before_params: bool)\n     } else { ret @spanned(lo, p.get_lo_pos(), orig_t); }\n \n     // If we're here, we have explicit type parameter instantiation.\n-    let seq = parse_seq_to_gt(some(token::COMMA), bind parse_ty(_, false), p);\n+    let seq = parse_seq_to_gt(some(token::COMMA), {|p| parse_ty(p, false)},\n+                              p);\n \n     alt orig_t {\n       ast::ty_path(pth, ann) {\n@@ -596,7 +597,7 @@ fn parse_fn_block_arg(p: parser) -> ast::arg {\n }\n \n fn parse_seq_to_before_gt<T>(sep: option::t<token::token>,\n-                              f: fn@(parser) -> T,\n+                              f: block(parser) -> T,\n                               p: parser) -> [T] {\n     let first = true;\n     let v = [];\n@@ -612,15 +613,15 @@ fn parse_seq_to_before_gt<T>(sep: option::t<token::token>,\n     ret v;\n }\n \n-fn parse_seq_to_gt<T>(sep: option::t<token::token>, f: fn@(parser) -> T,\n+fn parse_seq_to_gt<T>(sep: option::t<token::token>, f: block(parser) -> T,\n                       p: parser) -> [T] {\n     let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n-fn parse_seq_lt_gt<T>(sep: option::t<token::token>, f: fn@(parser) -> T,\n+fn parse_seq_lt_gt<T>(sep: option::t<token::token>, f: block(parser) -> T,\n                       p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, token::LT);\n@@ -631,15 +632,15 @@ fn parse_seq_lt_gt<T>(sep: option::t<token::token>, f: fn@(parser) -> T,\n }\n \n fn parse_seq_to_end<T>(ket: token::token, sep: option::t<token::token>,\n-                       f: fn(parser) -> T, p: parser) -> [T] {\n+                       f: block(parser) -> T, p: parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n     p.bump();\n     ret val;\n }\n \n fn parse_seq_to_before_end<T>(ket: token::token,\n                                sep: option::t<token::token>,\n-                               f: fn@(parser) -> T, p: parser) -> [T] {\n+                               f: block(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n     let v: [T] = [];\n     while p.peek() != ket {\n@@ -654,8 +655,8 @@ fn parse_seq_to_before_end<T>(ket: token::token,\n \n \n fn parse_seq<T>(bra: token::token, ket: token::token,\n-                sep: option::t<token::token>, f: fn@(parser) -> T, p: parser)\n-   -> spanned<[T]> {\n+                sep: option::t<token::token>, f: block(parser) -> T,\n+                p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, bra);\n     let result = parse_seq_to_before_end::<T>(ket, sep, f, p);\n@@ -736,7 +737,7 @@ fn parse_path_and_ty_param_substs(p: parser) -> ast::path {\n         p.bump();\n \n         let seq =\n-            parse_seq_lt_gt(some(token::COMMA), bind parse_ty(_, false), p);\n+            parse_seq_lt_gt(some(token::COMMA), {|p| parse_ty(p, false)}, p);\n         let hi = seq.span.hi;\n         path =\n             spanned(lo, hi,\n@@ -1768,7 +1769,7 @@ fn parse_fn_decl(p: parser, purity: ast::purity, il: ast::inlineness) ->\n     let constrs = [];\n     if p.peek() == token::COLON {\n         p.bump();\n-        constrs = parse_constrs(bind parse_ty_constr(inputs.node, _), p);\n+        constrs = parse_constrs({|x| parse_ty_constr(inputs.node, x) }, p);\n     }\n     let (ret_style, ret_ty) = parse_ret_ty(p, vec::len(inputs.node));\n     ret {inputs: inputs.node,\n@@ -2092,9 +2093,9 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n             let vhi = p.get_hi_pos();\n             alt p.peek() {\n               token::LPAREN. {\n-                let arg_tys =\n-                    parse_seq(token::LPAREN, token::RPAREN,\n-                              some(token::COMMA), bind parse_ty(_, false), p);\n+                let arg_tys = parse_seq(token::LPAREN, token::RPAREN,\n+                                        some(token::COMMA),\n+                                        {|p| parse_ty(p, false)}, p);\n                 for ty: @ast::ty in arg_tys.node {\n                     args += [{ty: ty, id: p.get_id()}];\n                 }"}]}