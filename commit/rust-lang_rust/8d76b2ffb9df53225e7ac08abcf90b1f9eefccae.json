{"sha": "8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "node_id": "C_kwDOAAsO6NoAKDhkNzZiMmZmYjlkZjUzMjI1ZTdhYzA4YWJjZjkwYjFmOWVlZmNjYWU", "commit": {"author": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-18T02:13:37Z"}, "committer": {"name": "Dezhi Wu", "email": "wu543065657@163.com", "date": "2022-08-31T10:24:55Z"}, "message": "Fix a bunch of typo\n\nThis PR will fix some typos detected by [typos].\n\nI only picked the ones I was sure were spelling errors to fix, mostly in\nthe comments.\n\n[typos]: https://github.com/crate-ci/typos", "tree": {"sha": "5fa0342cb870ebff0fff70b7526275ce13cbd4a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa0342cb870ebff0fff70b7526275ce13cbd4a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "html_url": "https://github.com/rust-lang/rust/commit/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/comments", "author": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dzvon", "id": 3402811, "node_id": "MDQ6VXNlcjM0MDI4MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3402811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dzvon", "html_url": "https://github.com/dzvon", "followers_url": "https://api.github.com/users/dzvon/followers", "following_url": "https://api.github.com/users/dzvon/following{/other_user}", "gists_url": "https://api.github.com/users/dzvon/gists{/gist_id}", "starred_url": "https://api.github.com/users/dzvon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dzvon/subscriptions", "organizations_url": "https://api.github.com/users/dzvon/orgs", "repos_url": "https://api.github.com/users/dzvon/repos", "events_url": "https://api.github.com/users/dzvon/events{/privacy}", "received_events_url": "https://api.github.com/users/dzvon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e494b424380fdf8d38c3887e1ba7343123ad30e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e494b424380fdf8d38c3887e1ba7343123ad30e", "html_url": "https://github.com/rust-lang/rust/commit/5e494b424380fdf8d38c3887e1ba7343123ad30e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0497c2570e6228b3984b639805ebbdef0bd6d07b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "patch": "@@ -342,7 +342,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     let ret_place = codegen_place(fx, destination);\n \n-    // Handle special calls like instrinsics and empty drop glue.\n+    // Handle special calls like intrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n         let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n             .unwrap()"}, {"sha": "9224f499339cbd8e14cf6d5d75e8adaf608362a0", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                         ErrorHandled::TooGeneric => {\n                             span_bug!(\n                                 constant.span,\n-                                \"codgen encountered polymorphic constant: {:?}\",\n+                                \"codegen encountered polymorphic constant: {:?}\",\n                                 err\n                             );\n                         }"}, {"sha": "4aeb1e3aab95334f97c33398923ab7b57e43c44f", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d76b2ffb9df53225e7ac08abcf90b1f9eefccae/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=8d76b2ffb9df53225e7ac08abcf90b1f9eefccae", "patch": "@@ -203,7 +203,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             sym::transmute => {\n                 crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n             }\n-            _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+            _ => unimplemented!(\"unsupported intrinsics {}\", intrinsic),\n         }\n         return;\n     };"}]}