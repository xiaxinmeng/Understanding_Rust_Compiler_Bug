{"sha": "86572d455be34b4df8a81e5daac9b51539277963", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NTcyZDQ1NWJlMzRiNGRmOGE4MWU1ZGFhYzliNTE1MzkyNzc5NjM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-02-01T04:55:30Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-02-01T04:55:30Z"}, "message": "Merge pull request #793 from kamalmarhubi/expect-formatting\n\ntests: Use Result::expect() throughout", "tree": {"sha": "0341537e277bccd54fcea5c6829ff017f021a57a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0341537e277bccd54fcea5c6829ff017f021a57a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86572d455be34b4df8a81e5daac9b51539277963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86572d455be34b4df8a81e5daac9b51539277963", "html_url": "https://github.com/rust-lang/rust/commit/86572d455be34b4df8a81e5daac9b51539277963", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86572d455be34b4df8a81e5daac9b51539277963/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edcc4ec6c078fbe2cb734b014d830236900414f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/edcc4ec6c078fbe2cb734b014d830236900414f1", "html_url": "https://github.com/rust-lang/rust/commit/edcc4ec6c078fbe2cb734b014d830236900414f1"}, {"sha": "2b991bc260d539b4cfa186495cec9555ba323cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b991bc260d539b4cfa186495cec9555ba323cd8", "html_url": "https://github.com/rust-lang/rust/commit/2b991bc260d539b4cfa186495cec9555ba323cd8"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "29f34e88c01842dad3f4a0d6db2509acbe8052b0", "filename": "tests/system.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/86572d455be34b4df8a81e5daac9b51539277963/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86572d455be34b4df8a81e5daac9b51539277963/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=86572d455be34b4df8a81e5daac9b51539277963", "patch": "@@ -26,9 +26,9 @@ use rustfmt::rustfmt_diff::*;\n static DIFF_CONTEXT_SIZE: usize = 3;\n \n fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n-    let path = dir_entry.ok().expect(\"Couldn't get DirEntry.\").path();\n+    let path = dir_entry.expect(\"Couldn't get DirEntry\").path();\n \n-    path.to_str().expect(\"Couldn't stringify path.\").to_owned()\n+    path.to_str().expect(\"Couldn't stringify path\").to_owned()\n }\n \n // Integration tests. The files in the tests/source are formatted and compared\n@@ -40,7 +40,7 @@ fn get_path_string(dir_entry: io::Result<fs::DirEntry>) -> String {\n #[test]\n fn system_tests() {\n     // Get all files in the tests/source directory.\n-    let files = fs::read_dir(\"tests/source\").ok().expect(\"Couldn't read source dir.\");\n+    let files = fs::read_dir(\"tests/source\").expect(\"Couldn't read source dir\");\n     // Turn a DirEntry into a String that represents the relative path to the\n     // file.\n     let files = files.map(get_path_string);\n@@ -55,7 +55,7 @@ fn system_tests() {\n // the only difference is the coverage mode\n #[test]\n fn coverage_tests() {\n-    let files = fs::read_dir(\"tests/coverage-source\").ok().expect(\"Couldn't read source dir.\");\n+    let files = fs::read_dir(\"tests/coverage-source\").expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n     let (_reports, count, fails) = check_files(files, WriteMode::Coverage);\n \n@@ -82,13 +82,10 @@ fn assert_output(source: &str, expected_filename: &str, write_mode: WriteMode) {\n     let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n     let output = String::from_utf8(out).unwrap();\n \n-    let mut expected_file = fs::File::open(&expected_filename)\n-                                .ok()\n-                                .expect(\"Couldn't open target.\");\n+    let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n     let mut expected_text = String::new();\n     expected_file.read_to_string(&mut expected_text)\n-                 .ok()\n-                 .expect(\"Failed reading target.\");\n+                 .expect(\"Failed reading target\");\n \n     let compare = make_diff(&expected_text, &output, DIFF_CONTEXT_SIZE);\n     if compare.len() > 0 {\n@@ -105,8 +102,7 @@ fn assert_output(source: &str, expected_filename: &str, write_mode: WriteMode) {\n fn idempotence_tests() {\n     // Get all files in the tests/target directory.\n     let files = fs::read_dir(\"tests/target\")\n-                    .ok()\n-                    .expect(\"Couldn't read target dir.\")\n+                    .expect(\"Couldn't read target dir\")\n                     .map(get_path_string);\n     let (_reports, count, fails) = check_files(files, WriteMode::Default);\n \n@@ -120,9 +116,8 @@ fn idempotence_tests() {\n #[test]\n fn self_tests() {\n     let files = fs::read_dir(\"src/bin\")\n-                    .ok()\n-                    .expect(\"Couldn't read src dir.\")\n-                    .chain(fs::read_dir(\"tests\").ok().expect(\"Couldn't read tests dir.\"))\n+                    .expect(\"Couldn't read src dir\")\n+                    .chain(fs::read_dir(\"tests\").expect(\"Couldn't read tests dir\"))\n                     .map(get_path_string);\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n@@ -236,37 +231,32 @@ fn get_config(config_file: Option<&str>) -> Config {\n         }\n     };\n \n-    let mut def_config_file = fs::File::open(config_file_name)\n-                                  .ok()\n-                                  .expect(\"Couldn't open config.\");\n+    let mut def_config_file = fs::File::open(config_file_name).expect(\"Couldn't open config\");\n     let mut def_config = String::new();\n-    def_config_file.read_to_string(&mut def_config).ok().expect(\"Couldn't read config.\");\n+    def_config_file.read_to_string(&mut def_config).expect(\"Couldn't read config\");\n \n     Config::from_toml(&def_config)\n }\n \n // Reads significant comments of the form: // rustfmt-key: value\n // into a hash map.\n fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n-    let file = fs::File::open(file_name)\n-                   .ok()\n-                   .expect(&format!(\"Couldn't read file {}.\", file_name));\n+    let file = fs::File::open(file_name).expect(&format!(\"Couldn't read file {}\", file_name));\n     let reader = BufReader::new(file);\n     let pattern = r\"^\\s*//\\s*rustfmt-([^:]+):\\s*(\\S+)\";\n-    let regex = regex::Regex::new(&pattern).ok().expect(\"Failed creating pattern 1.\");\n+    let regex = regex::Regex::new(&pattern).expect(\"Failed creating pattern 1\");\n \n     // Matches lines containing significant comments or whitespace.\n     let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\")\n-                         .ok()\n-                         .expect(\"Failed creating pattern 2.\");\n+                         .expect(\"Failed creating pattern 2\");\n \n     reader.lines()\n-          .map(|line| line.ok().expect(\"Failed getting line.\"))\n+          .map(|line| line.expect(\"Failed getting line\"))\n           .take_while(|line| line_regex.is_match(&line))\n           .filter_map(|line| {\n               regex.captures_iter(&line).next().map(|capture| {\n-                  (capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned(),\n-                   capture.at(2).expect(\"Couldn't unwrap capture.\").to_owned())\n+                  (capture.at(1).expect(\"Couldn't unwrap capture\").to_owned(),\n+                   capture.at(2).expect(\"Couldn't unwrap capture\").to_owned())\n               })\n           })\n           .collect()\n@@ -283,10 +273,10 @@ fn handle_result(result: HashMap<String, String>,\n     for (file_name, fmt_text) in result {\n         // If file is in tests/source, compare to file with same name in tests/target.\n         let target = get_target(&file_name, target, write_mode);\n-        let mut f = fs::File::open(&target).ok().expect(\"Couldn't open target.\");\n+        let mut f = fs::File::open(&target).expect(\"Couldn't open target\");\n \n         let mut text = String::new();\n-        f.read_to_string(&mut text).ok().expect(\"Failed reading target.\");\n+        f.read_to_string(&mut text).expect(\"Failed reading target\");\n \n         if fmt_text != text {\n             let diff = make_diff(&text, &fmt_text, DIFF_CONTEXT_SIZE);"}, {"sha": "815620234b51437a906fed0399c02aba79c9f087", "filename": "tests/target/chains-no-overlow-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86572d455be34b4df8a81e5daac9b51539277963/tests%2Ftarget%2Fchains-no-overlow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86572d455be34b4df8a81e5daac9b51539277963/tests%2Ftarget%2Fchains-no-overlow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-no-overlow-2.rs?ref=86572d455be34b4df8a81e5daac9b51539277963", "patch": "@@ -2,14 +2,14 @@\n \n fn main() {\n     reader.lines()\n-          .map(|line| line.ok().expect(\"Failed getting line.\"))\n+          .map(|line| line.expect(\"Failed getting line\"))\n           .take_while(|line| line_regex.is_match(&line))\n           .filter_map(|line| {\n               regex.captures_iter(&line)\n                    .next()\n                    .map(|capture| {\n-                       (capture.at(1).expect(\"Couldn\\'t unwrap capture.\").to_owned(),\n-                        capture.at(2).expect(\"Couldn\\'t unwrap capture.\").to_owned())\n+                       (capture.at(1).expect(\"Couldn\\'t unwrap capture\").to_owned(),\n+                        capture.at(2).expect(\"Couldn\\'t unwrap capture\").to_owned())\n                    })\n           })\n           .collect();"}]}