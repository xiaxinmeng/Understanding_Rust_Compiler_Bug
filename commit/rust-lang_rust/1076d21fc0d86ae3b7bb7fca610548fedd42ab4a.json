{"sha": "1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzZkMjFmYzBkODZhZTNiN2JiN2ZjYTYxMDU0OGZlZGQ0MmFiNGE=", "commit": {"author": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-06T12:17:22Z"}, "committer": {"name": "Daniel McNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2021-03-06T12:17:22Z"}, "message": "Implement opt-in (and opt-out) rustc_private", "tree": {"sha": "f44c650f634f6ab6198551fb4debae3c9915eaa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f44c650f634f6ab6198551fb4debae3c9915eaa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "html_url": "https://github.com/rust-lang/rust/commit/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd60c4f76ce21bac16ca90d94b29096739c9c551", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd60c4f76ce21bac16ca90d94b29096739c9c551", "html_url": "https://github.com/rust-lang/rust/commit/cd60c4f76ce21bac16ca90d94b29096739c9c551"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "beda2f61fa4b305baf912e413ec806b084d1e99a", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "patch": "@@ -9,6 +9,8 @@ use cargo_metadata::{CargoOpt, MetadataCommand};\n use la_arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n+use serde::Deserialize;\n+use serde_json::from_value;\n \n use crate::build_data::BuildDataConfig;\n use crate::utf8_stdout;\n@@ -104,6 +106,13 @@ pub struct PackageData {\n     pub active_features: Vec<String>,\n     // String representation of package id\n     pub id: String,\n+    // The contents of [package.metadata.rust-analyzer]\n+    pub metadata: RustAnalyzerPackageMetaData,\n+}\n+\n+#[derive(Deserialize, Default, Debug, Clone, Eq, PartialEq)]\n+pub struct RustAnalyzerPackageMetaData {\n+    pub rustc_private: Option<bool>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -161,6 +170,13 @@ impl PackageData {\n     }\n }\n \n+#[derive(Deserialize, Default)]\n+// Deserialise helper for the cargo metadata\n+struct PackageMetadata {\n+    #[serde(rename = \"rust-analyzer\")]\n+    rust_analyzer: Option<RustAnalyzerPackageMetaData>,\n+}\n+\n impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &AbsPath,\n@@ -244,8 +260,10 @@ impl CargoWorkspace {\n \n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in &meta.packages {\n-            let cargo_metadata::Package { id, edition, name, manifest_path, version, .. } =\n-                meta_pkg;\n+            let cargo_metadata::Package {\n+                id, edition, name, manifest_path, version, metadata, ..\n+            } = meta_pkg;\n+            let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n             let is_member = ws_members.contains(&id);\n             let edition = edition\n                 .parse::<Edition>()\n@@ -262,6 +280,7 @@ impl CargoWorkspace {\n                 dependencies: Vec::new(),\n                 features: meta_pkg.features.clone().into_iter().collect(),\n                 active_features: Vec::new(),\n+                metadata: meta.rust_analyzer.unwrap_or_default(),\n             });\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);"}, {"sha": "10e6085479573acebf9854572044f2faa55ad8cb", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1076d21fc0d86ae3b7bb7fca610548fedd42ab4a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=1076d21fc0d86ae3b7bb7fca610548fedd42ab4a", "patch": "@@ -499,7 +499,11 @@ fn cargo_to_crate_graph(\n \n             if let Some(&to) = pkg_to_lib_crate.get(&dep) {\n                 for pkg in cargo.packages() {\n-                    if !cargo[pkg].is_member {\n+                    let package = &cargo[pkg];\n+                    if matches!(\n+                        (package.is_member, package.metadata.rustc_private),\n+                        (true, Some(false)) | (false, Some(false)) | (false, None)\n+                    ) {\n                         continue;\n                     }\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {"}]}