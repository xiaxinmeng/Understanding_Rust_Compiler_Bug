{"sha": "7661c08496b0dc9ce55657246f8e5e42051c812e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjFjMDg0OTZiMGRjOWNlNTU2NTcyNDZmOGU1ZTQyMDUxYzgxMmU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-06T14:46:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-06T14:46:17Z"}, "message": "Remove temporary stdlib placeholders, use actual stdlib functions\n\n(Possible now that a snapshot took place.)", "tree": {"sha": "125d9f3fe0dbd0eb90d93a6de31e08452cb13ae8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125d9f3fe0dbd0eb90d93a6de31e08452cb13ae8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7661c08496b0dc9ce55657246f8e5e42051c812e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7661c08496b0dc9ce55657246f8e5e42051c812e", "html_url": "https://github.com/rust-lang/rust/commit/7661c08496b0dc9ce55657246f8e5e42051c812e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7661c08496b0dc9ce55657246f8e5e42051c812e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c315666dd7c2ac2d207b00ad2b5b5ca309a627f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c315666dd7c2ac2d207b00ad2b5b5ca309a627f", "html_url": "https://github.com/rust-lang/rust/commit/4c315666dd7c2ac2d207b00ad2b5b5ca309a627f"}], "stats": {"total": 140, "additions": 53, "deletions": 87}, "files": [{"sha": "018ae876ea60b125ffa5b48e81c006e5d5ccac89", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -4,7 +4,6 @@ import lib::llvm::llvm::ModuleRef;\n import std::str;\n import std::vec;\n import std::os::target_os;\n-import syntax::_std::istr;\n \n fn get_module_asm() -> str { ret \"\"; }\n "}, {"sha": "80b94be4c533687235701091fc946236d01f8de3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -343,7 +343,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n \n fn build_session(@session::options sopts) -> session::session {\n     auto target_cfg = build_target_config();\n-    auto crate_cache = syntax::_std::new_int_hash[session::crate_metadata]();\n+    auto crate_cache = std::map::new_int_hash[session::crate_metadata]();\n     ret session::session(target_cfg, sopts, crate_cache, [],\n                          [], [], codemap::new_codemap(), 0u);\n }"}, {"sha": "0674d3a2463b2a0099dc39c6842a956d7857718d", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -1457,7 +1457,7 @@ state obj type_names(std::map::hashmap[TypeRef, str] type_names,\n }\n \n fn mk_type_names() -> type_names {\n-    auto nt = syntax::_std::new_str_hash[TypeRef]();\n+    auto nt = std::map::new_str_hash[TypeRef]();\n \n     fn hash(&TypeRef t) -> uint {\n         ret t as uint;\n@@ -1519,8 +1519,7 @@ fn type_to_str_inner(type_names names,\n         case (6) { ret \"Label\"; }\n \n         case (7) {\n-            ret \"i\" + syntax::_std::istr(llvm::LLVMGetIntTypeWidth(ty)\n-                                         as int);\n+            ret \"i\" + std::int::str(llvm::LLVMGetIntTypeWidth(ty) as int);\n         }\n \n         case (8) {\n@@ -1558,7 +1557,7 @@ fn type_to_str_inner(type_names names,\n                 i += 1u;\n                 if (tout as int == ty as int) {\n                     let uint n = vec::len[TypeRef](outer0) - i;\n-                    ret \"*\\\\\" + syntax::_std::istr(n as int);\n+                    ret \"*\\\\\" + std::int::str(n as int);\n                 }\n             }\n             ret \"*\" + type_to_str_inner(names, outer,"}, {"sha": "7ef50e2b418e0d4415ed23b3f168d7862f3fbb0a", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -201,7 +201,7 @@ fn read_crates(session::session sess, resolve::crate_map crate_map,\n     auto e =\n         @rec(sess=sess,\n              crate_map=crate_map,\n-             crate_cache=@syntax::_std::new_str_hash[int](),\n+             crate_cache=@std::map::new_str_hash[int](),\n              library_search_paths=sess.get_opts().library_search_paths,\n              mutable next_crate_num=1);\n     auto v ="}, {"sha": "f6ea1a89719860cb5ef675268dcbc0a4ceb1cfd5", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -4,6 +4,7 @@ import std::io;\n import std::map::hashmap;\n import std::option::some;\n import std::option::none;\n+import std::int;\n import std::uint;\n import syntax::ast::*;\n import middle::ty;\n@@ -182,7 +183,7 @@ fn enc_sty(&io::writer w, &@ctxt cx, &ty::sty st) {\n         }\n         case (ty::ty_var(?id)) {\n             w.write_char('X');\n-            w.write_str(syntax::_std::istr(id));\n+            w.write_str(int::str(id));\n         }\n         case (ty::ty_native(?def)) {\n             w.write_char('E');\n@@ -191,7 +192,7 @@ fn enc_sty(&io::writer w, &@ctxt cx, &ty::sty st) {\n         }\n         case (ty::ty_param(?id)) {\n             w.write_char('p');\n-            w.write_str(syntax::_std::uistr(id));\n+            w.write_str(uint::str(id));\n         }\n         case (ty::ty_type) { w.write_char('Y'); }\n         case (ty::ty_task) { w.write_char('a'); }"}, {"sha": "0c2200d977188aa5ca03fc7e8e1d08c1a544afc8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -45,7 +45,7 @@ fn check_crate(@ty::ctxt tcx, &@ast::crate crate) {\n \n              // Stores information about object fields and function\n              // arguments that's otherwise not easily available.\n-             local_map=syntax::_std::new_int_hash());\n+             local_map=std::map::new_int_hash());\n     auto v =\n         @rec(visit_fn=bind visit_fn(cx, _, _, _, _, _, _, _),\n              visit_item=bind visit_item(cx, _, _, _),"}, {"sha": "9bab6e6e067ff9a7a4b6752038f0265a8d3c0eb1", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -11,8 +11,8 @@ import metadata::creader;\n import metadata::decoder;\n import driver::session::session;\n import util::common::new_def_hash;\n-import syntax::_std::new_int_hash;\n-import syntax::_std::new_str_hash;\n+import std::map::new_int_hash;\n+import std::map::new_str_hash;\n import syntax::codemap::span;\n import syntax::ast::respan;\n import middle::ty::constr_table;"}, {"sha": "7647ccd23fedd1344d721d25f16c17dc1468dc55", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -36,10 +36,9 @@ import middle::ty::pat_ty;\n import syntax::visit;\n import visit::vt;\n import util::common;\n-import syntax::_std::istr;\n import util::common::new_def_hash;\n-import syntax::_std::new_int_hash;\n-import syntax::_std::new_str_hash;\n+import std::map::new_int_hash;\n+import std::map::new_str_hash;\n import util::common::local_rhs_span;\n import syntax::codemap::span;\n import lib::llvm::llvm;\n@@ -73,7 +72,7 @@ import syntax::print::pprust::expr_to_str;\n import syntax::print::pprust::path_to_str;\n \n obj namegen(mutable int i) {\n-    fn next(str prefix) -> str { i += 1; ret prefix + istr(i); }\n+    fn next(str prefix) -> str { i += 1; ret prefix + int::str(i); }\n }\n \n type derived_tydesc_info = rec(ValueRef lltydesc, bool escapes);\n@@ -4432,7 +4431,8 @@ fn build_environment(&@block_ctxt cx, &vec[ast::node_id] upvars) ->\n                                 case (some(?x)) { llbinding = x; }\n                                 case (_) {\n                                     cx.fcx.lcx.ccx.sess.bug(\"unbound var \\\n-                                      in build_environment \" + istr(nid)); }\n+                                      in build_environment \" + int::str(nid));\n+                                }\n                             }\n                         }\n                         case (some(?llval)) { llbinding = llval; }"}, {"sha": "6f3b29716ecd491bb9d296910feb653ecd8fece3", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -3,12 +3,12 @@ import std::vec;\n import std::option;\n import std::option::some;\n import std::option::none;\n+import std::int;\n+import std::uint;\n import syntax::ast::*;\n import syntax::walk;\n import syntax::codemap::span;\n-import syntax::_std::istr;\n-import syntax::_std::uistr;\n-import syntax::_std::new_str_hash;\n+import std::map::new_str_hash;\n import util::common::log_expr_err;\n import util::common::log_block_err;\n import util::common::log_item_err;\n@@ -35,12 +35,12 @@ fn collect_ids_block(&block b, @mutable vec[node_id] rs) {\n fn collect_ids_stmt(&@stmt s, @mutable vec[node_id] rs) {\n     alt (s.node) {\n         case (stmt_decl(_, ?id)) {\n-            log \"node_id \" + istr(id);\n+            log \"node_id \" + int::str(id);\n             log_stmt(*s);\n             vec::push(*rs, id);\n         }\n         case (stmt_expr(_, ?id)) {\n-            log \"node_id \" + istr(id);\n+            log \"node_id \" + int::str(id);\n             log_stmt(*s);\n             vec::push(*rs, id);\n         }\n@@ -65,7 +65,7 @@ fn node_ids_in_fn(&_fn f, &vec[ty_param] tps, &span sp, &fn_ident i,\n \n fn init_vecs(&crate_ctxt ccx, &vec[node_id] node_ids, uint len) {\n     for (node_id i in node_ids) {\n-        log istr(i) + \" |-> \" + uistr(len);\n+        log int::str(i) + \" |-> \" + uint::str(len);\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "0bc1ceb39517117f6628e7e1450a36575a3f8f2b", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -7,15 +7,15 @@ import std::option;\n import std::option::none;\n import std::option::some;\n import std::option::maybe;\n+import std::int;\n+import std::uint;\n import syntax::ast::*;\n import syntax::codemap::span;\n import util::common;\n import util::common::log_block;\n-import syntax::_std::new_int_hash;\n-import syntax::_std::new_uint_hash;\n+import std::map::new_int_hash;\n+import std::map::new_uint_hash;\n import util::common::log_expr_err;\n-import syntax::_std::istr;\n-import syntax::_std::uistr;\n import util::common::lit_eq;\n import syntax::print::pprust::path_to_str;\n import tstate::ann::pre_and_post;\n@@ -44,7 +44,9 @@ import syntax::print::pprust::lit_to_str;\n \n \n /* logging funs */\n-fn def_id_to_str(def_id d) -> str { ret istr(d._0) + \",\" + istr(d._1); }\n+fn def_id_to_str(def_id d) -> str {\n+    ret int::str(d._0) + \",\" + int::str(d._1);\n+}\n \n fn comma_str(vec[@constr_arg_use] args) -> str {\n     auto rslt = \"\";\n@@ -259,7 +261,8 @@ fn get_ts_ann(&crate_ctxt ccx, node_id i) -> option::t[ts_ann] {\n fn node_id_to_ts_ann(&crate_ctxt ccx, node_id id) -> ts_ann {\n     alt (get_ts_ann(ccx, id)) {\n         case (none) {\n-            log_err \"node_id_to_ts_ann: no ts_ann for node_id \" + istr(id);\n+            log_err \"node_id_to_ts_ann: no ts_ann for node_id \" +\n+                int::str(id);\n             fail;\n         }\n         case (some(?t)) { ret t; }\n@@ -460,7 +463,7 @@ fn constraints_expr(&ty::ctxt cx, @expr e) -> vec[@ty::constr_def] {\n fn node_id_to_def_strict(&ty::ctxt cx, node_id id) -> def {\n     alt (cx.def_map.find(id)) {\n         case (none) {\n-            log_err \"node_id_to_def: node_id \" + istr(id) + \" has no def\";\n+            log_err \"node_id_to_def: node_id \" + int::str(id) + \" has no def\";\n             fail;\n         }\n         case (some(?d)) { ret d; }\n@@ -518,7 +521,7 @@ fn match_args(&fn_ctxt fcx, vec[pred_desc] occs, vec[@constr_arg_use] occ) ->\n fn node_id_for_constr(ty::ctxt tcx, node_id t) -> node_id {\n     alt (tcx.def_map.find(t)) {\n         case (none) {\n-            tcx.sess.bug(\"node_id_for_constr: bad node_id \" + istr(t));\n+            tcx.sess.bug(\"node_id_for_constr: bad node_id \" + int::str(t));\n         }\n         case (some(def_fn(?i,_))) { ret i._1; }\n         case (_) {\n@@ -590,7 +593,7 @@ fn expr_to_constr(ty::ctxt tcx, &@expr e) -> constr {\n }\n \n fn pred_desc_to_str(&pred_desc p) -> str {\n-    ret \"<\" + uistr(p.node.bit_num) + \", \" +\n+    ret \"<\" + uint::str(p.node.bit_num) + \", \" +\n         constr_args_to_str(std::util::fst[ident, def_id], p.node.args) + \">\";\n }\n "}, {"sha": "764c66e52a06320446264f874fe4b9f28c5221af", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -21,9 +21,8 @@ import aux::constr_map;\n import aux::expr_to_constr;\n import aux::constraints_expr;\n import aux::node_id_to_def_strict;\n-import syntax::_std::new_int_hash;\n+import std::map::new_int_hash;\n import util::common::new_def_hash;\n-import syntax::_std::uistr;\n import syntax::codemap::span;\n import syntax::ast::respan;\n \n@@ -82,7 +81,7 @@ fn find_locals(&ty::ctxt tcx, &_fn f, &vec[ty_param] tps,\n \n fn add_constraint(&ty::ctxt tcx, aux::constr c, uint next, constr_map tbl) ->\n    uint {\n-    log aux::constraint_to_str(tcx, c) + \" |-> \" + uistr(next);\n+    log aux::constraint_to_str(tcx, c) + \" |-> \" + std::uint::str(next);\n     alt (c.node.c) {\n         case (ninit(?i)) { tbl.insert(c.node.id, cinit(next, c.span, i)); }\n         case (npred(?p, ?args)) {\n@@ -142,7 +141,8 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &vec[ty_param] tp,\n             cf=f.decl.cf,\n             used_vars=v);\n     ccx.fm.insert(id, rslt);\n-    log name + \" has \" + uistr(num_constraints(rslt)) + \" constraints\";\n+    log name + \" has \" + std::uint::str(num_constraints(rslt)) +\n+        \" constraints\";\n }\n \n "}, {"sha": "d183ef28a73eca3418294d4eaa5f4113b2e3a6d6", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -66,10 +66,8 @@ import bitvectors::gen_poststate;\n import bitvectors::relax_precond_block;\n import bitvectors::gen;\n import syntax::ast::*;\n-import syntax::_std::new_int_hash;\n+import std::map::new_int_hash;\n import util::common::new_def_hash;\n-import syntax::_std::istr;\n-import syntax::_std::uistr;\n import util::common::log_expr;\n import util::common::log_fn;\n import util::common::elt_exprs;"}, {"sha": "d75c5a43f2edef3f60cc71e063f4a041ff0cbf87", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -80,7 +80,6 @@ import middle::ty::expr_ty;\n import middle::ty::type_is_nil;\n import middle::ty::type_is_bot;\n import util::common::new_def_hash;\n-import syntax::_std::uistr;\n import util::common::log_expr;\n import util::common::log_block;\n import util::common::log_block_err;"}, {"sha": "aa950769863d92379f6d19e6cbaf670506550b33", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -9,7 +9,7 @@ import metadata::decoder;\n import driver::session;\n import util::common;\n import syntax::codemap::span;\n-import syntax::_std::new_int_hash;\n+import std::map::new_int_hash;\n import util::common::new_def_hash;\n import util::common::log_expr_err;\n import middle::ty;\n@@ -537,7 +537,7 @@ mod collect {\n             }\n             case (_) {\n                 cx.tcx.sess.fatal(\"internal error \" +\n-                                  syntax::_std::istr(id._1));\n+                                  std::int::str(id._1));\n             }\n         }\n         ret tpt;"}, {"sha": "fe97761cf8c1ba6d43ee4bd6016e97561cf7cdd3", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -37,7 +37,6 @@ mod middle {\n \n \n mod syntax {\n-    mod _std; // FIXME remove\n     mod ast;\n     mod fold;\n     mod walk;"}, {"sha": "fb4d1449a99d7454c7ef5eaa0e118029474e60ca", "filename": "src/comp/syntax/_std.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c315666dd7c2ac2d207b00ad2b5b5ca309a627f/src%2Fcomp%2Fsyntax%2F_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c315666dd7c2ac2d207b00ad2b5b5ca309a627f/src%2Fcomp%2Fsyntax%2F_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2F_std.rs?ref=4c315666dd7c2ac2d207b00ad2b5b5ca309a627f", "patch": "@@ -1,29 +0,0 @@\n-// FIXME all this stuff should be in the standard lib, and in fact is,\n-// but due to the way our snapshots currently work, rustc can't use it\n-// until after the next snapshot.\n-\n-fn new_str_hash[V]() -> std::map::hashmap[str, V] {\n-    let std::map::hashfn[str] hasher = std::str::hash;\n-    let std::map::eqfn[str] eqer = std::str::eq;\n-    ret std::map::mk_hashmap[str, V](hasher, eqer);\n-}\n-\n-fn new_int_hash[V]() -> std::map::hashmap[int, V] {\n-    fn hash_int(&int x) -> uint { ret x as uint; }\n-    fn eq_int(&int a, &int b) -> bool { ret a == b; }\n-    auto hasher = hash_int;\n-    auto eqer = eq_int;\n-    ret std::map::mk_hashmap[int, V](hasher, eqer);\n-}\n-\n-fn new_uint_hash[V]() -> std::map::hashmap[uint, V] {\n-    fn hash_uint(&uint x) -> uint { ret x; }\n-    fn eq_uint(&uint a, &uint b) -> bool { ret a == b; }\n-    auto hasher = hash_uint;\n-    auto eqer = eq_uint;\n-    ret std::map::mk_hashmap[uint, V](hasher, eqer);\n-}\n-\n-fn istr(int i) -> str { ret std::int::to_str(i, 10u); }\n-\n-fn uistr(uint i) -> str { ret std::uint::to_str(i, 10u); }"}, {"sha": "a0ba306edfa5287bef6ee236cf240a7b0fa991fa", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -3,7 +3,7 @@ import std::option;\n import std::map::hashmap;\n import parse::parser::parse_sess;\n import codemap::span;\n-import syntax::_std::new_str_hash;\n+import std::map::new_str_hash;\n import codemap;\n \n type syntax_expander = "}, {"sha": "dc19a507db5ddcf61a21d25acaedfac98e42e783", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -12,7 +12,7 @@ import std::map::hashmap;\n import token::can_begin_expr;\n import ex=ext::base;\n import codemap::span;\n-import _std::new_str_hash;\n+import std::map::new_str_hash;\n import util::interner;\n \n tag restriction { UNRESTRICTED; RESTRICT_NO_CALL_EXPRS; }"}, {"sha": "2ce5d9e6cb4f94a85d6cf929c5e59d02dbad0bf2", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -1,7 +1,7 @@\n \n import ast::ty_mach;\n import ast::ty_mach_to_str;\n-import _std::new_str_hash;\n+import std::map::new_str_hash;\n import util::interner;\n import std::int;\n import std::uint;"}, {"sha": "86ae4cbd2955e9170e8e9ff5efc001678daf60b0", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -8,8 +8,6 @@ import std::option;\n import parse::lexer;\n import syntax::codemap::codemap;\n import ast;\n-import _std::istr;\n-import _std::uistr;\n import option::some;\n import option::none;\n import pp::printer;\n@@ -1294,11 +1292,11 @@ fn print_literal(&ps s, &@ast::lit lit) {\n             word(s.s,\n                  \"'\" + escape_str(str::from_bytes([ch as u8]), '\\'') + \"'\");\n         }\n-        case (ast::lit_int(?val)) { word(s.s, istr(val)); }\n-        case (ast::lit_uint(?val)) { word(s.s, uistr(val) + \"u\"); }\n+        case (ast::lit_int(?val)) { word(s.s, int::str(val)); }\n+        case (ast::lit_uint(?val)) { word(s.s, uint::str(val) + \"u\"); }\n         case (ast::lit_float(?fstr)) { word(s.s, fstr); }\n         case (ast::lit_mach_int(?mach, ?val)) {\n-            word(s.s, istr(val as int));\n+            word(s.s, int::str(val as int));\n             word(s.s, ast::ty_mach_to_str(mach));\n         }\n         case (ast::lit_mach_float(?mach, ?val)) {\n@@ -1446,7 +1444,7 @@ fn constr_arg_to_str[T](fn(&T) -> str  f, &ast::constr_arg_general_[T] c) ->\n // needed b/c constr_args_to_str needs\n // something that takes an alias\n // (argh)\n-fn uint_to_str(&uint i) -> str { ret uistr(i); }\n+fn uint_to_str(&uint i) -> str { ret uint::str(i); }\n \n fn ast_constr_to_str(&@ast::constr c) -> str {\n     ret ast::path_to_str(c.node.path) +"}, {"sha": "e3eb707dbf5fa1d784a3a73b1344ff224940ae92", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7661c08496b0dc9ce55657246f8e5e42051c812e/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=7661c08496b0dc9ce55657246f8e5e42051c812e", "patch": "@@ -1,6 +1,7 @@\n import std::io;\n import std::vec;\n import std::str;\n+import std::int;\n import std::option;\n import std::option::none;\n import std::option::some;\n@@ -12,8 +13,6 @@ import pp::word;\n import pp::eof;\n import pp::zerobreak;\n import pp::hardbreak;\n-import syntax::_std::istr;\n-import syntax::_std::uistr;\n import ast::ty_mach_to_str;\n import syntax::ast;\n \n@@ -34,7 +33,7 @@ fn mode_str_1(&ty::mode m) -> str {\n \n fn fn_ident_to_string(ast::node_id id, &ast::fn_ident i) -> str {\n     ret alt (i) {\n-        case (none) { \"anon\" + istr(id) }\n+        case (none) { \"anon\" + int::str(id) }\n         case (some(?s)) { s }\n     };\n }\n@@ -118,7 +117,7 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n         case (ty_tag(?id, ?tps)) {\n             // The user should never see this if the cname is set properly!\n \n-            s += \"<tag#\" + istr(id._0) + \":\" + istr(id._1) + \">\";\n+            s += \"<tag#\" + int::str(id._0) + \":\" + int::str(id._1) + \">\";\n             if (vec::len[t](tps) > 0u) {\n                 auto f = bind ty_to_str(cx, _);\n                 auto strs = vec::map[t, str](f, tps);\n@@ -138,9 +137,9 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n             s += \"obj {\\n\\t\" + str::connect(m, \"\\n\\t\") + \"\\n}\";\n         }\n         case (ty_res(?id, _, _)) {\n-            s += \"<resource#\" + istr(id._0) + \":\" + istr(id._1) + \">\";\n+            s += \"<resource#\" + int::str(id._0) + \":\" + int::str(id._1) + \">\";\n         }\n-        case (ty_var(?v)) { s += \"<T\" + istr(v) + \">\"; }\n+        case (ty_var(?v)) { s += \"<T\" + int::str(v) + \">\"; }\n         case (ty_param(?id)) {\n             s += \"'\" + str::unsafe_from_bytes([('a' as u8) + (id as u8)]);\n         }"}]}