{"sha": "8d7e6ef7725f8a11de940892a74398fc1911dfc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkN2U2ZWY3NzI1ZjhhMTFkZTk0MDg5MmE3NDM5OGZjMTkxMWRmYzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T19:32:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T17:40:15Z"}, "message": "libsyntax: Forbid `~mut` and `~const`. rs=demuting", "tree": {"sha": "44e7cd64fac348be5c823db76cdd9a0738c3074d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e7cd64fac348be5c823db76cdd9a0738c3074d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7e6ef7725f8a11de940892a74398fc1911dfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e6ef7725f8a11de940892a74398fc1911dfc7", "html_url": "https://github.com/rust-lang/rust/commit/8d7e6ef7725f8a11de940892a74398fc1911dfc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e6ef7725f8a11de940892a74398fc1911dfc7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061a2237230d3abcdb30ecb8987e5de17e67a58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/061a2237230d3abcdb30ecb8987e5de17e67a58e", "html_url": "https://github.com/rust-lang/rust/commit/061a2237230d3abcdb30ecb8987e5de17e67a58e"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "f94087618778835f8baa157ccdd37ffa74b9746e", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -1126,7 +1126,7 @@ points to.\n \n ~~~\n let managed = @mut 10;\n-let owned = ~mut 20;\n+let mut owned = ~20;\n \n let mut value = 30;\n let borrowed = &mut value;"}, {"sha": "3b839e5a9e008008dc8fb476c2085bebb0061d5f", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -13,22 +13,22 @@\n use cmp::{Eq, Ord};\n \n #[cfg(notest)]\n-impl<T:Eq> Eq for ~const T {\n+impl<T:Eq> Eq for ~T {\n     #[inline(always)]\n-    pure fn eq(&self, other: &~const T) -> bool { *(*self) == *(*other) }\n+    pure fn eq(&self, other: &~T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n-    pure fn ne(&self, other: &~const T) -> bool { *(*self) != *(*other) }\n+    pure fn ne(&self, other: &~T) -> bool { *(*self) != *(*other) }\n }\n \n #[cfg(notest)]\n-impl<T:Ord> Ord for ~const T {\n+impl<T:Ord> Ord for ~T {\n     #[inline(always)]\n-    pure fn lt(&self, other: &~const T) -> bool { *(*self) < *(*other) }\n+    pure fn lt(&self, other: &~T) -> bool { *(*self) < *(*other) }\n     #[inline(always)]\n-    pure fn le(&self, other: &~const T) -> bool { *(*self) <= *(*other) }\n+    pure fn le(&self, other: &~T) -> bool { *(*self) <= *(*other) }\n     #[inline(always)]\n-    pure fn ge(&self, other: &~const T) -> bool { *(*self) >= *(*other) }\n+    pure fn ge(&self, other: &~T) -> bool { *(*self) >= *(*other) }\n     #[inline(always)]\n-    pure fn gt(&self, other: &~const T) -> bool { *(*self) > *(*other) }\n+    pure fn gt(&self, other: &~T) -> bool { *(*self) > *(*other) }\n }\n "}, {"sha": "f258e649122bdb17a8d778b3d5e9432bee1a9c73", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -17,6 +17,7 @@ use sync;\n use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n \n use core::cast;\n+use core::cell::Cell;\n use core::pipes;\n use core::prelude::*;\n use core::private::{SharedMutableState, shared_mutable_state};\n@@ -532,17 +533,17 @@ mod tests {\n         let arc = ~MutexARC(false);\n         let arc2 = ~arc.clone();\n         let (p,c) = comm::oneshot();\n-        let (c,p) = (~mut Some(c), ~mut Some(p));\n+        let (c,p) = (Cell(c), Cell(p));\n         do task::spawn || {\n             // wait until parent gets in\n-            comm::recv_one(option::swap_unwrap(p));\n+            comm::recv_one(p.take());\n             do arc2.access_cond |state, cond| {\n                 *state = true;\n                 cond.signal();\n             }\n         }\n         do arc.access_cond |state, cond| {\n-            comm::send_one(option::swap_unwrap(c), ());\n+            comm::send_one(c.take(), ());\n             assert !*state;\n             while !*state {\n                 cond.wait();"}, {"sha": "7f48466ed0a87a556f36db459aee11a2c868baef", "filename": "src/libstd/future.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -23,6 +23,7 @@\n \n use core::cast::copy_lifetime;\n use core::cast;\n+use core::cell::Cell;\n use core::either::Either;\n use core::option;\n use core::comm::{oneshot, ChanOne, PortOne, send_one, recv_one};\n@@ -103,11 +104,9 @@ pub fn from_port<A:Owned>(port: PortOne<A>) ->\n      * waiting for the result to be received on the port.\n      */\n \n-    let port = ~mut Some(port);\n+    let port = Cell(port);\n     do from_fn || {\n-        let mut port_ = None;\n-        port_ <-> *port;\n-        let port = option::unwrap(port_);\n+        let port = port.take();\n         match recv(port) {\n             oneshot::send(data) => data\n         }\n@@ -136,9 +135,9 @@ pub fn spawn<A:Owned>(blk: fn~() -> A) -> Future<A> {\n \n     let (chan, port) = oneshot::init();\n \n-    let chan = ~mut Some(chan);\n+    let chan = Cell(chan);\n     do task::spawn || {\n-        let chan = option::swap_unwrap(&mut *chan);\n+        let chan = chan.take();\n         send_one(chan, blk());\n     }\n "}, {"sha": "1ff51e8bff0307d09a9f5f94cf71467fa16e1dde", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -15,6 +15,7 @@\n  * in std.\n  */\n \n+use core::cell::Cell;\n use core::option;\n use core::pipes;\n use core::prelude::*;\n@@ -799,9 +800,9 @@ mod tests {\n             let s = ~semaphore(1);\n             let s2 = ~s.clone();\n             let (p,c) = comm::stream();\n-            let child_data = ~mut Some((s2, c));\n+            let child_data = Cell((s2, c));\n             do s.access {\n-                let (s2,c) = option::swap_unwrap(child_data);\n+                let (s2, c) = child_data.take();\n                 do task::spawn || {\n                     c.send(());\n                     do s2.access { }\n@@ -976,13 +977,13 @@ mod tests {\n             let mut sibling_convos = ~[];\n             for 2.times {\n                 let (p,c) = comm::stream();\n-                let c = ~mut Some(c);\n+                let c = Cell(c);\n                 sibling_convos.push(p);\n                 let mi = ~m2.clone();\n                 // spawn sibling task\n-                do task::spawn || { // linked\n+                do task::spawn { // linked\n                     do mi.lock_cond |cond| {\n-                        let c = option::swap_unwrap(c);\n+                        let c = c.take();\n                         c.send(()); // tell sibling to go ahead\n                         let _z = SendOnFailure(c);\n                         cond.wait(); // block forever"}, {"sha": "d7ca766f183a9c53a46a9c879a90971ad6fe60d0", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -15,6 +15,7 @@ use sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sort;\n \n+use core::cell::Cell;\n use core::cmp;\n use core::either::{Either, Left, Right};\n use core::io;\n@@ -339,11 +340,11 @@ impl TPrep for @Mut<Prep> {\n                     let mut blk = None;\n                     blk <-> bo;\n                     let blk = blk.unwrap();\n-                    let chan = ~mut Some(chan);\n+                    let chan = Cell(chan);\n                     do task::spawn || {\n                         let exe = Exec{discovered_inputs: LinearMap::new(),\n                                        discovered_outputs: LinearMap::new()};\n-                        let chan = option::swap_unwrap(&mut *chan);\n+                        let chan = chan.take();\n                         let v = blk(&exe);\n                         send_one(chan, (exe, v));\n                     }"}, {"sha": "0c5c0f3d5138c6b6fb3a6f7f14e9da012b4d3bff", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -128,7 +128,7 @@ pub impl Parser {\n                 \"write `+` between trait bounds\"\n             ),\n             ObsoleteMutOwnedPointer => (\n-                \"mutable owned pointer\",\n+                \"const or mutable owned pointer\",\n                 \"mutability inherits through `~` pointers; place the `~` box\n                  in a mutable location, like a mutable local variable or an \\\n                  `@mut` box\""}, {"sha": "c9102cbb86b4b2452192f68e57b334ceea1c9b47", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e6ef7725f8a11de940892a74398fc1911dfc7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8d7e6ef7725f8a11de940892a74398fc1911dfc7", "patch": "@@ -678,7 +678,7 @@ pub impl Parser {\n         // reflected in the AST type.\n         let mt = self.parse_mt();\n \n-        if mt.mutbl == m_mutbl && sigil == OwnedSigil {\n+        if mt.mutbl != m_imm && sigil == OwnedSigil {\n             self.obsolete(*self.last_span, ObsoleteMutOwnedPointer);\n         }\n \n@@ -1574,6 +1574,10 @@ pub impl Parser {\n           token::TILDE => {\n             self.bump();\n             let m = self.parse_mutability();\n+            if m != m_imm {\n+                self.obsolete(*self.last_span, ObsoleteMutOwnedPointer);\n+            }\n+\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n             // HACK: turn ~[...] into a ~-evec"}, {"sha": "8b59879acd979a807deaa8b7317b514e9463de34", "filename": "src/test/compile-fail/mutable-huh-unique-assign.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/061a2237230d3abcdb30ecb8987e5de17e67a58e/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061a2237230d3abcdb30ecb8987e5de17e67a58e/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-unique-assign.rs?ref=061a2237230d3abcdb30ecb8987e5de17e67a58e", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    fn f(&&v: ~const int) {\n-        *v = 1 //~ ERROR assigning to dereference of const ~ pointer\n-    }\n-\n-    let v = ~0;\n-\n-    f(v);\n-}"}]}