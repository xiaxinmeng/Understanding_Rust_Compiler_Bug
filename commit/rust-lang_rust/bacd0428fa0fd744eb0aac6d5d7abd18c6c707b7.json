{"sha": "bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhY2QwNDI4ZmEwZmQ3NDRlYjBhYWM2ZDVkN2FiZDE4YzZjNzA3Yjc=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-03T16:39:01Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-06-03T16:39:01Z"}, "message": "Fix review comments", "tree": {"sha": "54ceaaeec17255753cf886da1fffc640e50df254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ceaaeec17255753cf886da1fffc640e50df254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "html_url": "https://github.com/rust-lang/rust/commit/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb482e6351c4005f29bb89d38c64c4e3f93d7a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb482e6351c4005f29bb89d38c64c4e3f93d7a6d", "html_url": "https://github.com/rust-lang/rust/commit/cb482e6351c4005f29bb89d38c64c4e3f93d7a6d"}], "stats": {"total": 65, "additions": 24, "deletions": 41}, "files": [{"sha": "3b957534ddd0bd4b5b0bf86c94740b6ada7dff9b", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "patch": "@@ -111,7 +111,6 @@ impl Request for ResolveCodeActionRequest {\n pub struct ResolveCodeActionParams {\n     pub code_action_params: lsp_types::CodeActionParams,\n     pub id: String,\n-    pub label: String,\n }\n \n pub enum OnEnter {}"}, {"sha": "fab82ff7ead03dc6d1f38405912730c0d02eb471", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "patch": "@@ -756,9 +756,13 @@ pub fn handle_code_action(\n     handle_fixes(&world, &params, &mut res)?;\n \n     if world.config.client_caps.resolve_code_action {\n-        for assist in world.analysis().unresolved_assists(&world.config.assist, frange)?.into_iter()\n+        for (index, assist) in world\n+            .analysis()\n+            .unresolved_assists(&world.config.assist, frange)?\n+            .into_iter()\n+            .enumerate()\n         {\n-            res.push(to_proto::unresolved_code_action(&world, assist)?);\n+            res.push(to_proto::unresolved_code_action(&world, assist, index)?);\n         }\n     } else {\n         for assist in world.analysis().resolved_assists(&world.config.assist, frange)?.into_iter() {\n@@ -773,24 +777,19 @@ pub fn handle_resolve_code_action(\n     world: WorldSnapshot,\n     params: lsp_ext::ResolveCodeActionParams,\n ) -> Result<Option<lsp_ext::SnippetWorkspaceEdit>> {\n-    if !world.config.client_caps.resolve_code_action {\n-        return Ok(None);\n-    }\n-\n     let _p = profile(\"handle_resolve_code_action\");\n     let file_id = from_proto::file_id(&world, &params.code_action_params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let range = from_proto::text_range(&line_index, params.code_action_params.range);\n     let frange = FileRange { file_id, range };\n-    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n \n-    for assist in world.analysis().resolved_assists(&world.config.assist, frange)?.into_iter() {\n-        res.push(to_proto::resolved_code_action(&world, assist)?);\n-    }\n-    Ok(res\n-        .into_iter()\n-        .find(|action| action.id.clone().unwrap() == params.id && action.title == params.label)\n-        .and_then(|action| action.edit))\n+    let assists = world.analysis().resolved_assists(&world.config.assist, frange)?;\n+    let id_components = params.id.split(\":\").collect::<Vec<&str>>();\n+    let index = id_components.last().unwrap().parse::<usize>().unwrap();\n+    let id_string = id_components.first().unwrap();\n+    let assist = &assists[index];\n+    assert!(assist.assist.id.0 == *id_string);\n+    Ok(to_proto::resolved_code_action(&world, assist.clone())?.edit)\n }\n \n pub fn handle_code_lens("}, {"sha": "fb33bdd5f69d452f85276cdeff78f81cb5637b1d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "patch": "@@ -622,17 +622,12 @@ fn main() <fold>{\n pub(crate) fn unresolved_code_action(\n     world: &WorldSnapshot,\n     assist: Assist,\n+    index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n         title: assist.label,\n-        id: Some(assist.id.0.to_owned()),\n-        group: assist.group.and_then(|it| {\n-            if world.config.client_caps.code_action_group {\n-                None\n-            } else {\n-                Some(it.0)\n-            }\n-        }),\n+        id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n+        group: assist.group.filter(|_| world.config.client_caps.code_action_group).map(|gr| gr.0),\n         kind: Some(String::new()),\n         edit: None,\n         command: None,\n@@ -644,21 +639,14 @@ pub(crate) fn resolved_code_action(\n     world: &WorldSnapshot,\n     assist: ResolvedAssist,\n ) -> Result<lsp_ext::CodeAction> {\n-    let res = lsp_ext::CodeAction {\n-        title: assist.assist.label,\n-        id: Some(assist.assist.id.0.to_owned()),\n-        group: assist.assist.group.and_then(|it| {\n-            if world.config.client_caps.code_action_group {\n-                None\n-            } else {\n-                Some(it.0)\n-            }\n-        }),\n-        kind: Some(String::new()),\n-        edit: Some(snippet_workspace_edit(world, assist.source_change)?),\n-        command: None,\n-    };\n-    Ok(res)\n+    let change = assist.source_change;\n+    unresolved_code_action(world, assist.assist, 0).and_then(|it| {\n+        Ok(lsp_ext::CodeAction {\n+            id: None,\n+            edit: Some(snippet_workspace_edit(world, change)?),\n+            ..it\n+        })\n+    })\n }\n \n pub(crate) fn runnable("}, {"sha": "40ad1e3cd84780fb77558b356d425317e6ecf33c", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "patch": "@@ -61,8 +61,6 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                         const id = (item as any).id;\n                         const resolveParams: ra.ResolveCodeActionParams = {\n                             id: id,\n-                            // TODO: delete after discussions if needed\n-                            label: item.title,\n                             codeActionParams: params\n                         };\n                         action.command = {"}, {"sha": "9793b926c26e2863b5f88f119589da96fe3c46fa", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=bacd0428fa0fd744eb0aac6d5d7abd18c6c707b7", "patch": "@@ -35,7 +35,6 @@ export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc\n \n export interface ResolveCodeActionParams {\n     id: string;\n-    label: string;\n     codeActionParams: lc.CodeActionParams;\n }\n export const resolveCodeAction = new lc.RequestType<ResolveCodeActionParams, lc.WorkspaceEdit, unknown>('experimental/resolveCodeAction');"}]}