{"sha": "0b5204f55efd9e25425055264d44f28501c0439b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNTIwNGY1NWVmZDllMjU0MjUwNTUyNjRkNDRmMjg1MDFjMDQzOWI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-08-11T23:39:34Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-08-12T20:07:12Z"}, "message": "Enable deprecation lint on crate-local items\n\nPreviously the lint considered cross-crate items only. That's\nappropriate for unstable and experimental levels, but not for\ndeprecation.\n\nCloses #16409\n\nDue to deny(deprecation), this is a:\n\n[breaking-change]", "tree": {"sha": "bebd32c37cd8f210d44e9fef0b72d30b876fc205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebd32c37cd8f210d44e9fef0b72d30b876fc205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5204f55efd9e25425055264d44f28501c0439b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5204f55efd9e25425055264d44f28501c0439b", "html_url": "https://github.com/rust-lang/rust/commit/0b5204f55efd9e25425055264d44f28501c0439b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5204f55efd9e25425055264d44f28501c0439b/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2273d945640442224a09e532865e4a58257a851", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2273d945640442224a09e532865e4a58257a851", "html_url": "https://github.com/rust-lang/rust/commit/e2273d945640442224a09e532865e4a58257a851"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "f929860c6864bedd969ec832027a7eba64dca114", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b5204f55efd9e25425055264d44f28501c0439b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5204f55efd9e25425055264d44f28501c0439b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0b5204f55efd9e25425055264d44f28501c0439b", "patch": "@@ -1479,20 +1479,20 @@ impl LintPass for Stability {\n             _ => return\n         };\n \n-        // stability attributes are promises made across crates; do not\n-        // check anything for crate-local usage.\n-        if ast_util::is_local(id) { return }\n-\n         let stability = stability::lookup(cx.tcx, id);\n+        let cross_crate = !ast_util::is_local(id);\n+\n+        // stability attributes are promises made across crates; only\n+        // check DEPRECATED for crate-local usage.\n         let (lint, label) = match stability {\n             // no stability attributes == Unstable\n-            None => (UNSTABLE, \"unmarked\"),\n-            Some(attr::Stability { level: attr::Unstable, .. }) =>\n-                    (UNSTABLE, \"unstable\"),\n-            Some(attr::Stability { level: attr::Experimental, .. }) =>\n-                    (EXPERIMENTAL, \"experimental\"),\n+            None if cross_crate => (UNSTABLE, \"unmarked\"),\n+            Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n+                (UNSTABLE, \"unstable\"),\n+            Some(attr::Stability { level: attr::Experimental, .. }) if cross_crate =>\n+                (EXPERIMENTAL, \"experimental\"),\n             Some(attr::Stability { level: attr::Deprecated, .. }) =>\n-                    (DEPRECATED, \"deprecated\"),\n+                (DEPRECATED, \"deprecated\"),\n             _ => return\n         };\n "}, {"sha": "f5cee22ac2c050c74f1939c26fa2f0d609eef186", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b5204f55efd9e25425055264d44f28501c0439b/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b5204f55efd9e25425055264d44f28501c0439b/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=0b5204f55efd9e25425055264d44f28501c0439b", "patch": "@@ -329,19 +329,19 @@ mod this_crate {\n     pub struct LockedTupleStruct(int);\n \n     fn test() {\n-        // None of the following should generate errors, because\n-        // stability attributes now have meaning only *across* crates,\n-        // not within a single crate.\n+        // Only the deprecated cases of the following should generate\n+        // errors, because other stability attributes now have meaning\n+        // only *across* crates, not within a single crate.\n \n         let foo = MethodTester;\n \n-        deprecated();\n-        foo.method_deprecated();\n-        foo.trait_deprecated();\n+        deprecated(); //~ ERROR use of deprecated item\n+        foo.method_deprecated(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n \n-        deprecated_text();\n-        foo.method_deprecated_text();\n-        foo.trait_deprecated_text();\n+        deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n \n         experimental();\n         foo.method_experimental();\n@@ -387,32 +387,31 @@ mod this_crate {\n         foo.method_locked_text();\n         foo.trait_locked_text();\n \n-\n-        let _ = DeprecatedStruct { i: 0 };\n+        let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n         let _ = ExperimentalStruct { i: 0 };\n         let _ = UnstableStruct { i: 0 };\n         let _ = UnmarkedStruct { i: 0 };\n         let _ = StableStruct { i: 0 };\n         let _ = FrozenStruct { i: 0 };\n         let _ = LockedStruct { i: 0 };\n \n-        let _ = DeprecatedUnitStruct;\n+        let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n         let _ = ExperimentalUnitStruct;\n         let _ = UnstableUnitStruct;\n         let _ = UnmarkedUnitStruct;\n         let _ = StableUnitStruct;\n         let _ = FrozenUnitStruct;\n         let _ = LockedUnitStruct;\n \n-        let _ = DeprecatedVariant;\n+        let _ = DeprecatedVariant; //~ ERROR use of deprecated item\n         let _ = ExperimentalVariant;\n         let _ = UnstableVariant;\n         let _ = UnmarkedVariant;\n         let _ = StableVariant;\n         let _ = FrozenVariant;\n         let _ = LockedVariant;\n \n-        let _ = DeprecatedTupleStruct (1);\n+        let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n         let _ = ExperimentalTupleStruct (1);\n         let _ = UnstableTupleStruct (1);\n         let _ = UnmarkedTupleStruct (1);\n@@ -422,8 +421,8 @@ mod this_crate {\n     }\n \n     fn test_method_param<F: Trait>(foo: F) {\n-        foo.trait_deprecated();\n-        foo.trait_deprecated_text();\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_experimental();\n         foo.trait_experimental_text();\n         foo.trait_unstable();\n@@ -433,8 +432,8 @@ mod this_crate {\n     }\n \n     fn test_method_object(foo: &Trait) {\n-        foo.trait_deprecated();\n-        foo.trait_deprecated_text();\n+        foo.trait_deprecated(); //~ ERROR use of deprecated item\n+        foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_experimental();\n         foo.trait_experimental_text();\n         foo.trait_unstable();"}]}