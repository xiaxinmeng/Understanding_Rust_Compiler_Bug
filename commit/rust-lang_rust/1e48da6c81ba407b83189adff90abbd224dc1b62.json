{"sha": "1e48da6c81ba407b83189adff90abbd224dc1b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNDhkYTZjODFiYTQwN2I4MzE4OWFkZmY5MGFiYmQyMjRkYzFiNjI=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-13T23:14:44Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-13T23:14:44Z"}, "message": "Escape &str in convert docs", "tree": {"sha": "027d9571cc9348060ee42540731d8c627f0540b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/027d9571cc9348060ee42540731d8c627f0540b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e48da6c81ba407b83189adff90abbd224dc1b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e48da6c81ba407b83189adff90abbd224dc1b62", "html_url": "https://github.com/rust-lang/rust/commit/1e48da6c81ba407b83189adff90abbd224dc1b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e48da6c81ba407b83189adff90abbd224dc1b62/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ff5360ab661a3c20ab7256529aeb61b4e2b215", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ff5360ab661a3c20ab7256529aeb61b4e2b215", "html_url": "https://github.com/rust-lang/rust/commit/27ff5360ab661a3c20ab7256529aeb61b4e2b215"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "df178e0ff0a61d77ba3470f7651f2b8719db8e3a", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e48da6c81ba407b83189adff90abbd224dc1b62/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e48da6c81ba407b83189adff90abbd224dc1b62/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=1e48da6c81ba407b83189adff90abbd224dc1b62", "patch": "@@ -132,7 +132,7 @@ pub const fn identity<T>(x: T) -> T { x }\n /// converted a the specified type `T`.\n ///\n /// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n-/// want to accept all references that can be converted to &str as an argument.\n+/// want to accept all references that can be converted to `&str` as an argument.\n /// Since both [`String`] and `&str` implement `AsRef<str>` we can accept both as input argument.\n ///\n /// [`String`]: ../../std/string/struct.String.html\n@@ -312,7 +312,8 @@ pub trait Into<T>: Sized {\n ///\n /// [`String`] implements `From<&str>`:\n ///\n-/// An explicit conversion from a &str to a String is done as follows:\n+/// An explicit conversion from a `&str` to a String is done as follows:\n+///\n /// ```\n /// let string = \"hello\".to_string();\n /// let other_string = String::from(\"hello\");"}]}