{"sha": "2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTBiNGY2MGI2ZmQyZDNiNTRlN2FlZWYzMjliY2I3ZjkyYWVjNzY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-08T01:19:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-08T01:19:29Z"}, "message": "resolve: Reduce some clutter in import ambiguity errors", "tree": {"sha": "4464f24c9021e64df99f86ae6acf58457f835434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4464f24c9021e64df99f86ae6acf58457f835434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "html_url": "https://github.com/rust-lang/rust/commit/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a45578bc58ff262864f72680cc02e83f5d2f5b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a45578bc58ff262864f72680cc02e83f5d2f5b3", "html_url": "https://github.com/rust-lang/rust/commit/4a45578bc58ff262864f72680cc02e83f5d2f5b3"}], "stats": {"total": 70, "additions": 30, "deletions": 40}, "files": [{"sha": "ff03a986e9e25a4c895362eaaeedc5a7cb4746b9", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "patch": "@@ -843,14 +843,16 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n         self.current_module = directive.parent_scope.module;\n \n         let orig_vis = directive.vis.replace(ty::Visibility::Invisible);\n+        let prev_ambiguity_errors_len = self.ambiguity_errors.len();\n         let path_res = self.resolve_path(&directive.module_path, None, &directive.parent_scope,\n                                          true, directive.span, directive.crate_lint());\n+        let no_ambiguity = self.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         directive.vis.set(orig_vis);\n         let module = match path_res {\n             PathResult::Module(module) => {\n                 // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n                 if let Some(initial_module) = directive.imported_module.get() {\n-                    if module != initial_module && self.ambiguity_errors.is_empty() {\n+                    if module != initial_module && no_ambiguity {\n                         span_bug!(directive.span, \"inconsistent resolution for an import\");\n                     }\n                 } else {\n@@ -864,30 +866,32 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 module\n             }\n             PathResult::Failed(span, msg, false) => {\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n-                resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                    resolve_error(self, span, ResolutionError::FailedToResolve(&msg));\n+                }\n                 return None;\n             }\n             PathResult::Failed(span, msg, true) => {\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n-                return if let Some((suggested_path, note)) = self.make_path_suggestion(\n-                    span, directive.module_path.clone(), &directive.parent_scope\n-                ) {\n-                    Some((\n-                        span,\n-                        format!(\"did you mean `{}`?\", Segment::names_to_string(&suggested_path)),\n-                        note,\n-                    ))\n-                } else {\n-                    Some((span, msg, None))\n-                };\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                    return Some(match self.make_path_suggestion(span, directive.module_path.clone(),\n+                                                                &directive.parent_scope) {\n+                        Some((suggestion, note)) => (\n+                            span,\n+                            format!(\"did you mean `{}`?\", Segment::names_to_string(&suggestion)),\n+                            note,\n+                        ),\n+                        None => (span, msg, None),\n+                    });\n+                }\n+                return None;\n             }\n             PathResult::NonModule(path_res) if path_res.base_def() == Def::Err => {\n+                if no_ambiguity {\n+                    assert!(directive.imported_module.get().is_none());\n+                }\n                 // The error was already reported earlier.\n-                assert!(!self.ambiguity_errors.is_empty() ||\n-                        directive.imported_module.get().is_none());\n                 return None;\n             }\n             PathResult::Indeterminate | PathResult::NonModule(..) => unreachable!(),"}, {"sha": "0327522e4b8d60760f6c3259ca885cf2a0972b79", "filename": "src/test/ui/imports/issue-56125.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.rs?ref=2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "patch": "@@ -7,13 +7,11 @@\n mod m1 {\n     use issue_56125::last_segment::*;\n     //~^ ERROR `issue_56125` is ambiguous\n-    //~| ERROR unresolved import `issue_56125::last_segment`\n }\n \n mod m2 {\n     use issue_56125::non_last_segment::non_last_segment::*;\n     //~^ ERROR `issue_56125` is ambiguous\n-    //~| ERROR failed to resolve: could not find `non_last_segment` in `issue_56125`\n }\n \n mod m3 {"}, {"sha": "559979e5d51c308e544fcfa71df97857e9532456", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=2010b4f60b6fd2d3b54e7aeef329bcb7f92aec76", "patch": "@@ -1,17 +1,5 @@\n-error[E0433]: failed to resolve: could not find `non_last_segment` in `issue_56125`\n-  --> $DIR/issue-56125.rs:14:22\n-   |\n-LL |     use issue_56125::non_last_segment::non_last_segment::*;\n-   |                      ^^^^^^^^^^^^^^^^ could not find `non_last_segment` in `issue_56125`\n-\n-error[E0432]: unresolved import `issue_56125::last_segment`\n-  --> $DIR/issue-56125.rs:8:22\n-   |\n-LL |     use issue_56125::last_segment::*;\n-   |                      ^^^^^^^^^^^^ could not find `last_segment` in `issue_56125`\n-\n error[E0432]: unresolved import `empty::issue_56125`\n-  --> $DIR/issue-56125.rs:21:9\n+  --> $DIR/issue-56125.rs:19:9\n    |\n LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n    |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n@@ -32,36 +20,36 @@ LL |     use issue_56125::last_segment::*;\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:14:9\n+  --> $DIR/issue-56125.rs:13:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the module imported here\n-  --> $DIR/issue-56125.rs:14:9\n+  --> $DIR/issue-56125.rs:13:9\n    |\n LL |     use issue_56125::non_last_segment::non_last_segment::*;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this module unambiguously\n \n error[E0659]: `issue_56125` is ambiguous (name vs any other name during import resolution)\n-  --> $DIR/issue-56125.rs:22:9\n+  --> $DIR/issue-56125.rs:20:9\n    |\n LL |     use issue_56125::*; //~ ERROR `issue_56125` is ambiguous\n    |         ^^^^^^^^^^^ ambiguous name\n    |\n    = note: `issue_56125` could refer to an extern crate passed with `--extern`\n    = help: use `::issue_56125` to refer to this extern crate unambiguously\n note: `issue_56125` could also refer to the unresolved item imported here\n-  --> $DIR/issue-56125.rs:21:9\n+  --> $DIR/issue-56125.rs:19:9\n    |\n LL |     use empty::issue_56125; //~ ERROR unresolved import `empty::issue_56125`\n    |         ^^^^^^^^^^^^^^^^^^\n    = help: use `self::issue_56125` to refer to this unresolved item unambiguously\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0432, E0433, E0659.\n+Some errors occurred: E0432, E0659.\n For more information about an error, try `rustc --explain E0432`."}]}