{"sha": "d9bba11344d93cec729c77ab37a22527bf0e34de", "node_id": "C_kwDOAAsO6NoAKGQ5YmJhMTEzNDRkOTNjZWM3MjljNzdhYjM3YTIyNTI3YmYwZTM0ZGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-04T16:55:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-04T16:55:48Z"}, "message": "Rollup merge of #101401 - mx00s:expand-const, r=fee1-dead\n\nMake `char::is_lowercase` and `char::is_uppercase` const\n\nImplements #101400.", "tree": {"sha": "e91a68734dc0e789b55529eb5d7b2c270af475df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e91a68734dc0e789b55529eb5d7b2c270af475df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bba11344d93cec729c77ab37a22527bf0e34de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFNiUCRBK7hj4Ov3rIwAA0JcIAFMcYxJf6G3GtdIKPAQ28+4Q\n/XnB11JUPwjZTntkeN7GgalevU0vZJzfc6jGvbhtJxMB2enuKPmUxcBmP3p1azq3\n/AI497/AWdQ4SF3MGbbJMaGn3ttLDfe0/h1yR+xOJ/cOy2IGduKIFNS0zCisfmgo\nba9kuoCz2ZGB0IgyJ5Zobh8SdrE3K6sqeeHT3fiJPKx3Tn7SciPi8pE40cIKekZc\n9ILtQRVMdS1SFGd+pCWtL6mftLSqTRx7T1Cc8NxbKHI7kyelz4R6TnWViZ+C/iXm\nq+u8G5QT+E05AWZ9G26n5OT8tmMo+7K9ea8GAujpNwpiZH/x6nnzU53GAfnS/C0=\n=aLkS\n-----END PGP SIGNATURE-----\n", "payload": "tree e91a68734dc0e789b55529eb5d7b2c270af475df\nparent 43a7438e27b77a0784eacf1adc5c4bbcb75119eb\nparent 2b328ea5ee537078abd72f309934f8e6bf004764\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662310548 +0200\ncommitter GitHub <noreply@github.com> 1662310548 +0200\n\nRollup merge of #101401 - mx00s:expand-const, r=fee1-dead\n\nMake `char::is_lowercase` and `char::is_uppercase` const\n\nImplements #101400.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bba11344d93cec729c77ab37a22527bf0e34de", "html_url": "https://github.com/rust-lang/rust/commit/d9bba11344d93cec729c77ab37a22527bf0e34de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bba11344d93cec729c77ab37a22527bf0e34de/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a7438e27b77a0784eacf1adc5c4bbcb75119eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a7438e27b77a0784eacf1adc5c4bbcb75119eb", "html_url": "https://github.com/rust-lang/rust/commit/43a7438e27b77a0784eacf1adc5c4bbcb75119eb"}, {"sha": "2b328ea5ee537078abd72f309934f8e6bf004764", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b328ea5ee537078abd72f309934f8e6bf004764", "html_url": "https://github.com/rust-lang/rust/commit/2b328ea5ee537078abd72f309934f8e6bf004764"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "b7a63b7c675666d627f4ac9c504b89955390a56c", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=d9bba11344d93cec729c77ab37a22527bf0e34de", "patch": "@@ -746,10 +746,19 @@ impl char {\n     /// assert!(!'\u4e2d'.is_lowercase());\n     /// assert!(!' '.is_lowercase());\n     /// ```\n+    ///\n+    /// In a const context:\n+    ///\n+    /// ```\n+    /// #![feature(const_unicode_case_lookup)]\n+    /// const CAPITAL_DELTA_IS_LOWERCASE: bool = '\u0394'.is_lowercase();\n+    /// assert!(!CAPITAL_DELTA_IS_LOWERCASE);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n     #[inline]\n-    pub fn is_lowercase(self) -> bool {\n+    pub const fn is_lowercase(self) -> bool {\n         match self {\n             'a'..='z' => true,\n             c => c > '\\x7f' && unicode::Lowercase(c),\n@@ -779,10 +788,19 @@ impl char {\n     /// assert!(!'\u4e2d'.is_uppercase());\n     /// assert!(!' '.is_uppercase());\n     /// ```\n+    ///\n+    /// In a const context:\n+    ///\n+    /// ```\n+    /// #![feature(const_unicode_case_lookup)]\n+    /// const CAPITAL_DELTA_IS_UPPERCASE: bool = '\u0394'.is_uppercase();\n+    /// assert!(CAPITAL_DELTA_IS_UPPERCASE);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n     #[inline]\n-    pub fn is_uppercase(self) -> bool {\n+    pub const fn is_uppercase(self) -> bool {\n         match self {\n             'A'..='Z' => true,\n             c => c > '\\x7f' && unicode::Uppercase(c),"}, {"sha": "5b1e2045fff63e07df043843dfdd1872b635abdf", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d9bba11344d93cec729c77ab37a22527bf0e34de", "patch": "@@ -143,6 +143,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(const_unicode_case_lookup)]\n #![feature(const_unsafecell_get_mut)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]"}, {"sha": "7301da2afec466e59140835acbd166859d0cca78", "filename": "library/core/src/unicode/unicode_data.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bba11344d93cec729c77ab37a22527bf0e34de/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Funicode%2Funicode_data.rs?ref=d9bba11344d93cec729c77ab37a22527bf0e34de", "patch": "@@ -1,7 +1,8 @@\n ///! This file is generated by src/tools/unicode-table-generator; do not edit manually!\n \n+#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n #[inline(always)]\n-fn bitset_search<\n+const fn bitset_search<\n     const N: usize,\n     const CHUNK_SIZE: usize,\n     const N1: usize,\n@@ -17,14 +18,18 @@ fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n-        v\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n+        chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n-    let word = if let Some(word) = bitset_canonical.get(idx) {\n-        *word\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let word = if idx < bitset_canonical.len() {\n+        bitset_canonical[idx]\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];\n@@ -318,14 +323,14 @@ pub mod grapheme_extend {\n \n #[rustfmt::skip]\n pub mod lowercase {\n-    static BITSET_CHUNKS_MAP: [u8; 123] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 123] = &[\n         14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0,\n         3, 0, 0, 7,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 19] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 19] = &[\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 55, 0],\n@@ -346,7 +351,7 @@ pub mod lowercase {\n         [16, 49, 2, 20, 66, 9, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n         [63, 39, 54, 12, 73, 61, 18, 1, 6, 62, 71, 19, 68, 69, 3, 44],\n     ];\n-    static BITSET_CANONICAL: [u64; 55] = [\n+    const BITSET_CANONICAL: &'static [u64; 55] = &[\n         0b0000000000000000000000000000000000000000000000000000000000000000,\n         0b1111111111111111110000000000000000000000000011111111111111111111,\n         0b1010101010101010101010101010101010101010101010101010100000000010,\n@@ -403,13 +408,14 @@ pub mod lowercase {\n         0b1110011111111111111111111111111111111111111111110000000000000000,\n         0b1110101111000000000000000000000000001111111111111111111111111100,\n     ];\n-    static BITSET_MAPPING: [(u8, u8); 20] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 20] = &[\n         (0, 64), (1, 188), (1, 183), (1, 176), (1, 109), (1, 124), (1, 126), (1, 66), (1, 70),\n         (1, 77), (2, 146), (2, 144), (2, 83), (3, 12), (3, 6), (4, 156), (4, 78), (5, 187),\n         (6, 132), (7, 93),\n     ];\n \n-    pub fn lookup(c: char) -> bool {\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n+    pub const fn lookup(c: char) -> bool {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,\n@@ -454,14 +460,14 @@ pub mod n {\n \n #[rustfmt::skip]\n pub mod uppercase {\n-    static BITSET_CHUNKS_MAP: [u8; 125] = [\n+    const BITSET_CHUNKS_MAP: &'static [u8; 125] = &[\n         12, 15, 6, 6, 0, 6, 6, 2, 4, 11, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 6, 6, 5, 6, 14, 6, 10, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n         6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 6, 6,\n         6, 6, 9, 6, 3,\n     ];\n-    static BITSET_INDEX_CHUNKS: [[u8; 16]; 17] = [\n+    const BITSET_INDEX_CHUNKS: &'static [[u8; 16]; 17] = &[\n         [43, 43, 5, 34, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 5, 1],\n         [43, 43, 5, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [43, 43, 39, 43, 43, 43, 43, 43, 17, 17, 62, 17, 42, 29, 24, 23],\n@@ -480,7 +486,7 @@ pub mod uppercase {\n         [57, 19, 2, 18, 10, 47, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n         [57, 37, 17, 27, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43],\n     ];\n-    static BITSET_CANONICAL: [u64; 43] = [\n+    const BITSET_CANONICAL: &'static [u64; 43] = &[\n         0b0000011111111111111111111111111000000000000000000000000000000000,\n         0b0000000000111111111111111111111111111111111111111111111111111111,\n         0b0101010101010101010101010101010101010101010101010101010000000001,\n@@ -525,13 +531,14 @@ pub mod uppercase {\n         0b1111011111111111000000000000000000000000000000000000000000000000,\n         0b1111111100000000111111110000000000111111000000001111111100000000,\n     ];\n-    static BITSET_MAPPING: [(u8, u8); 25] = [\n+    const BITSET_MAPPING: &'static [(u8, u8); 25] = &[\n         (0, 187), (0, 177), (0, 171), (0, 167), (0, 164), (0, 32), (0, 47), (0, 51), (0, 121),\n         (0, 117), (0, 109), (1, 150), (1, 148), (1, 142), (1, 134), (1, 131), (1, 64), (2, 164),\n         (2, 146), (2, 20), (3, 146), (3, 140), (3, 134), (4, 178), (4, 171),\n     ];\n \n-    pub fn lookup(c: char) -> bool {\n+    #[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n+    pub const fn lookup(c: char) -> bool {\n         super::bitset_search(\n             c as u32,\n             &BITSET_CHUNKS_MAP,"}, {"sha": "3a5b869f72f76d05beb08d12f96c29e2bce4e6b8", "filename": "src/tools/unicode-table-generator/src/range_search.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9bba11344d93cec729c77ab37a22527bf0e34de/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bba11344d93cec729c77ab37a22527bf0e34de/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Frange_search.rs?ref=d9bba11344d93cec729c77ab37a22527bf0e34de", "patch": "@@ -1,5 +1,6 @@\n+#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\n #[inline(always)]\n-fn bitset_search<\n+const fn bitset_search<\n     const N: usize,\n     const CHUNK_SIZE: usize,\n     const N1: usize,\n@@ -15,14 +16,18 @@ fn bitset_search<\n     let bucket_idx = (needle / 64) as usize;\n     let chunk_map_idx = bucket_idx / CHUNK_SIZE;\n     let chunk_piece = bucket_idx % CHUNK_SIZE;\n-    let chunk_idx = if let Some(&v) = chunk_idx_map.get(chunk_map_idx) {\n-        v\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let chunk_idx = if chunk_map_idx < chunk_idx_map.len() {\n+        chunk_idx_map[chunk_map_idx]\n     } else {\n         return false;\n     };\n     let idx = bitset_chunk_idx[chunk_idx as usize][chunk_piece] as usize;\n-    let word = if let Some(word) = bitset_canonical.get(idx) {\n-        *word\n+    // FIXME: const-hack: Revert to `slice::get` after `const_slice_index`\n+    // feature stabilizes.\n+    let word = if idx < bitset_canonical.len() {\n+        bitset_canonical[idx]\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - bitset_canonical.len()];\n         let mut word = bitset_canonical[real_idx as usize];"}, {"sha": "890ff986c2be05c6178b0c79fd637c88e17e1b28", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9bba11344d93cec729c77ab37a22527bf0e34de/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bba11344d93cec729c77ab37a22527bf0e34de/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=d9bba11344d93cec729c77ab37a22527bf0e34de", "patch": "@@ -76,15 +76,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"static BITSET_CANONICAL: [u64; {}] = [{}];\",\n+            \"const BITSET_CANONICAL: &'static [u64; {}] = &[{}];\",\n             canonicalized.canonical_words.len(),\n             fmt_list(canonicalized.canonical_words.iter().map(|v| Bits(*v))),\n         )\n         .unwrap();\n         self.bytes_used += 8 * canonicalized.canonical_words.len();\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_MAPPING: [(u8, u8); {}] = [{}];\",\n+            \"const BITSET_MAPPING: &'static [(u8, u8); {}] = &[{}];\",\n             canonicalized.canonicalized_words.len(),\n             fmt_list(&canonicalized.canonicalized_words),\n         )\n@@ -96,7 +96,12 @@ impl RawEmitter {\n \n         self.blank_line();\n \n-        writeln!(&mut self.file, \"pub fn lookup(c: char) -> bool {{\").unwrap();\n+        writeln!(\n+            &mut self.file,\n+            r#\"#[rustc_const_unstable(feature = \"const_unicode_case_lookup\", issue = \"101400\")]\"#\n+        )\n+        .unwrap();\n+        writeln!(&mut self.file, \"pub const fn lookup(c: char) -> bool {{\").unwrap();\n         writeln!(&mut self.file, \"    super::bitset_search(\",).unwrap();\n         writeln!(&mut self.file, \"        c as u32,\").unwrap();\n         writeln!(&mut self.file, \"        &BITSET_CHUNKS_MAP,\").unwrap();\n@@ -130,15 +135,15 @@ impl RawEmitter {\n \n         writeln!(\n             &mut self.file,\n-            \"static BITSET_CHUNKS_MAP: [u8; {}] = [{}];\",\n+            \"const BITSET_CHUNKS_MAP: &'static [u8; {}] = &[{}];\",\n             chunk_indices.len(),\n             fmt_list(&chunk_indices),\n         )\n         .unwrap();\n         self.bytes_used += chunk_indices.len();\n         writeln!(\n             &mut self.file,\n-            \"static BITSET_INDEX_CHUNKS: [[u8; {}]; {}] = [{}];\",\n+            \"const BITSET_INDEX_CHUNKS: &'static [[u8; {}]; {}] = &[{}];\",\n             chunk_length,\n             chunks.len(),\n             fmt_list(chunks.iter()),"}]}