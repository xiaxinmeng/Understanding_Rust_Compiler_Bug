{"sha": "813c994a754b963660b2030699ee1b77c5886ed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxM2M5OTRhNzU0Yjk2MzY2MGIyMDMwNjk5ZWUxYjc3YzU4ODZlZDU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-06-12T07:26:16Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-07-07T18:51:31Z"}, "message": "rustc_mir: Re-use `report_selection_error`.\n\nThis commit replaces the new error that was being emitted in NLL type\ncheck with a call to `report_selection_error` so that the same trait\nerror as before this PR is emitted.", "tree": {"sha": "18f60e26326ee7a54c80f8fe4e217ece6a3f644f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f60e26326ee7a54c80f8fe4e217ece6a3f644f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/813c994a754b963660b2030699ee1b77c5886ed5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl0iPzQACgkQJZLnbIc4\nH9mNGRAAuVyer2GvmFZk8xUu0+Insq1o13nVBNNhDDt2U3lavO5yGhcEqjq9TpDl\n76f7c6nghDu3IwhwRw5p6DlerxNMfx3F1BEHeTnZLt6lo8IQOD6REdFXLorJzc2Y\nGL7Zp3JReDl/6Dx1mZpncQJoPTCawaBJhHqnQ4l6ELzEGxItpkVfOH6vjfnCmL+K\nDSHZKbPtUy3WZ5Uw8m8mWCcP98OBfhSmQ320UTRYnZY2mLTIfiIzPgT1v6AO5eaC\nv96YnKALrT1RyhqktDvyvTpK69CRcgfX98eyZnl2WGutd8MnAQvOwekY8CAITP9g\nq+7hKc3QNL5qeM3Opj4tiF5hQEb6BJ+c0MT0mWgYa+v+u1SNEGIrXgc92RckuwLA\nh1uPSSMk0Ts+wMpbIzYUGoe+2xXD42JgbMGFV18C6pjQ1mHYA6vWM0Ya/1NxwfK0\ndV9VzSHIBgcvUKkDftwQ5AZjVOG+S87OTOR65U7b6dFEilce1DPkKiSO3vzQaumP\nfZnBGNLA1SE1NgThcbxx/R9jNfS9tWYsUQ965QEYkhyOwRPmmcrUU66zxYTwLATa\n6hOgO4jNpA0boM/CGMa4sIT/eZLXkKEapJXxP6g5kCaGg8a/lxeuL8CC5OYQe3xr\nM0va/JVg4P81TGtiTMTRu4MldIPES2QZZitAXSDvmXGMGzqE9b8=\n=rdp/\n-----END PGP SIGNATURE-----", "payload": "tree 18f60e26326ee7a54c80f8fe4e217ece6a3f644f\nparent 3cca4ceed833493b7ce18c825f14ddd927920e10\nauthor David Wood <david@davidtw.co> 1560324376 +0100\ncommitter David Wood <david@davidtw.co> 1562525491 +0100\n\nrustc_mir: Re-use `report_selection_error`.\n\nThis commit replaces the new error that was being emitted in NLL type\ncheck with a call to `report_selection_error` so that the same trait\nerror as before this PR is emitted.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/813c994a754b963660b2030699ee1b77c5886ed5", "html_url": "https://github.com/rust-lang/rust/commit/813c994a754b963660b2030699ee1b77c5886ed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/813c994a754b963660b2030699ee1b77c5886ed5/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cca4ceed833493b7ce18c825f14ddd927920e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cca4ceed833493b7ce18c825f14ddd927920e10", "html_url": "https://github.com/rust-lang/rust/commit/3cca4ceed833493b7ce18c825f14ddd927920e10"}], "stats": {"total": 88, "additions": 53, "deletions": 35}, "files": [{"sha": "d6cc68bcdab468c19c68a709bbcf5fb4457a47ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -1564,6 +1564,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\"required for the cast to the object type `{}`\",\n                                   self.ty_to_string(object_ty)));\n             }\n+            ObligationCauseCode::RepeatVec => {\n+                err.note(\"the `Copy` trait is required because the \\\n+                          repeated element will be copied\");\n+            }\n             ObligationCauseCode::VariableType(_) => {\n                 err.note(\"all local variables must have a statically known size\");\n                 if !self.tcx.features().unsized_locals {"}, {"sha": "1ca92d79fa5f66bc5293cfd6dd2b7fd89e9e1fe9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -195,6 +195,8 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be Sized\n     SizedYieldType,\n+    /// [T,..n] --> T must be Copy\n+    RepeatVec,\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized { adt_kind: AdtKind, last: bool },"}, {"sha": "129a400d28f4cb8fe3dab7e2bf30c584afaad0c8", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -488,6 +488,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedArgumentType => Some(super::SizedArgumentType),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n+            super::RepeatVec => Some(super::RepeatVec),\n             super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n             super::ConstSized => Some(super::ConstSized),\n             super::SharedStatic => Some(super::SharedStatic),"}, {"sha": "dbb5a52e0aaa8d6040a4b44438045f9c704045c9", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -35,7 +35,7 @@ use rustc::mir::*;\n use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n-use rustc::traits::{ObligationCause, PredicateObligations};\n+use rustc::traits::{self, ObligationCause, PredicateObligations};\n use rustc::ty::adjustment::{PointerCast};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n@@ -1968,25 +1968,25 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // a required check to make sure that repeated elements implement `Copy`.\n                     let span = body.source_info(location).span;\n                     let ty = operand.ty(body, tcx);\n-                    let is_copy = self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span);\n-                    if !is_copy {\n-                        let copy_path = self.tcx().def_path_str(\n-                            self.tcx().lang_items().copy_trait().unwrap());\n-                        self.tcx().sess\n-                            .struct_span_err(\n-                                span,\n-                                &format!(\"repeated expression does not implement `{}`\", copy_path),\n-                            )\n-                            .span_label(span, &format!(\n-                                \"the trait `{}` is not implemented for `{}`\",\n-                                copy_path, ty,\n-                            ))\n-                            .note(&format!(\n-                                \"the `{}` trait is required because the repeated element will be \\\n-                                 copied\",\n-                                 copy_path,\n-                            ))\n-                            .emit();\n+                    if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n+                        self.infcx.report_selection_error(\n+                            &traits::Obligation::new(\n+                                ObligationCause::new(\n+                                    span,\n+                                    self.tcx().hir().def_index_to_hir_id(self.mir_def_id.index),\n+                                    traits::ObligationCauseCode::RepeatVec,\n+                                ),\n+                                self.param_env,\n+                                ty::Predicate::Trait(ty::Binder::bind(ty::TraitPredicate {\n+                                    trait_ref: ty::TraitRef::new(\n+                                        self.tcx().lang_items().copy_trait().unwrap(),\n+                                        tcx.mk_substs_trait(ty, &[]),\n+                                    ),\n+                                })),\n+                            ),\n+                            &traits::SelectionError::Unimplemented,\n+                            false,\n+                        );\n                     }\n                 }\n             },"}, {"sha": "5e7f11799c8a04a994cc62de001c4d6926c50877", "filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/migrate-borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -86,7 +86,7 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR repeated expression does not implement `std::marker::Copy`\n+        //~^ ERROR the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_no_elements() {\n@@ -102,7 +102,7 @@ mod non_constants {\n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR repeated expression does not implement `std::marker::Copy`\n+        //~^ ERROR the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied [E0277]\n     }\n \n     fn impl_copy_empty_value_no_elements() {"}, {"sha": "71f5a8ccaa2244cfefede3b91dd243cb3ba7a331", "filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/migrate-borrowck.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fmigrate-borrowck.stderr?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -1,18 +1,23 @@\n-error: repeated expression does not implement `std::marker::Copy`\n+error[E0277]: the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied\n   --> $DIR/migrate-borrowck.rs:88:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<Bar>`\n    |\n-   = note: the `std::marker::Copy` trait is required because the repeated element will be copied\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n \n-error: repeated expression does not implement `std::marker::Copy`\n+error[E0277]: the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied\n   --> $DIR/migrate-borrowck.rs:104:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<Bar>`\n    |\n-   = note: the `std::marker::Copy` trait is required because the repeated element will be copied\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "804aa6b7c6d716712e6778eec366568097260a15", "filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/nll-borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -85,7 +85,7 @@ mod non_constants {\n     fn no_impl_copy_empty_value_multiple_elements() {\n         let x = None;\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR repeated expression does not implement `std::marker::Copy`\n+        //~^ ERROR the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied [E0277]\n     }\n \n     fn no_impl_copy_value_no_elements() {\n@@ -101,7 +101,7 @@ mod non_constants {\n     fn no_impl_copy_value_multiple_elements() {\n         let x = Some(Bar);\n         let arr: [Option<Bar>; 2] = [x; 2];\n-        //~^ ERROR repeated expression does not implement `std::marker::Copy`\n+        //~^ ERROR the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied [E0277]\n     }\n \n     fn impl_copy_empty_value_no_elements() {"}, {"sha": "0b2da5933a1c7741cb125899958de9deda9c95a8", "filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/nll-borrowck.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frfc-2203-const-array-repeat-exprs%2Fnll-borrowck.stderr?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -1,18 +1,23 @@\n-error: repeated expression does not implement `std::marker::Copy`\n+error[E0277]: the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied\n   --> $DIR/nll-borrowck.rs:87:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<Bar>`\n    |\n-   = note: the `std::marker::Copy` trait is required because the repeated element will be copied\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n \n-error: repeated expression does not implement `std::marker::Copy`\n+error[E0277]: the trait bound `std::option::Option<Bar>: std::marker::Copy` is not satisfied\n   --> $DIR/nll-borrowck.rs:103:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::option::Option<Bar>`\n    |\n-   = note: the `std::marker::Copy` trait is required because the repeated element will be copied\n+   = help: the following implementations were found:\n+             <std::option::Option<T> as std::marker::Copy>\n+   = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d857178166a88e1f724ab0a58e5583109605e7bd", "filename": "src/test/ui/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.rs?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -15,5 +15,5 @@ impl Drop for Foo {\n fn main() {\n     let a = Foo { x: 3 };\n     let _ = [ a; 5 ];\n-    //~^ ERROR repeated expression does not implement `std::marker::Copy`\n+    //~^ ERROR the trait bound `Foo: std::marker::Copy` is not satisfied [E0277]\n }"}, {"sha": "5434f6cef544f7169299d576b27233dc725a6ae8", "filename": "src/test/ui/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/813c994a754b963660b2030699ee1b77c5886ed5/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-to-run-dtor-twice.stderr?ref=813c994a754b963660b2030699ee1b77c5886ed5", "patch": "@@ -1,10 +1,11 @@\n-error: repeated expression does not implement `std::marker::Copy`\n+error[E0277]: the trait bound `Foo: std::marker::Copy` is not satisfied\n   --> $DIR/repeat-to-run-dtor-twice.rs:17:13\n    |\n LL |     let _ = [ a; 5 ];\n    |             ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `Foo`\n    |\n-   = note: the `std::marker::Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because the repeated element will be copied\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}]}