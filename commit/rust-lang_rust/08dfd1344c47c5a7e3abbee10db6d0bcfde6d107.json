{"sha": "08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGZkMTM0NGM0N2M1YTdlM2FiYmVlMTBkYjZkMGJjZmRlNmQxMDc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T03:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T03:26:10Z"}, "message": "Rollup merge of #70236 - petrochenkov:globimpice, r=ecstatic-morse\n\nresolve: Avoid \"self-confirming\" import resolutions in one more case\n\nSo the idea behind \"blacklisted bindings\" is that we must ignore some name definitions during resolution because otherwise they cause infinite cycles.\nE.g. import\n```rust\nuse my_crate;\n```\nwould refer to itself (on 2018 edition) without this blacklisting, because `use my_crate;` is the first name in scope when we are resolving `my_crate` here.\n\nIn this PR we are doing this blacklisting for the case\n```rust\nuse same::same;\n```\n, namely blacklisting the second `same` when resolving the first `same`.\nThis was previously forgotten.\n\nFixes https://github.com/rust-lang/rust/issues/62767", "tree": {"sha": "ec6e5dcc55e49994a51a7701edc0f2cfc004620f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec6e5dcc55e49994a51a7701edc0f2cfc004620f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeCxSCRBK7hj4Ov3rIwAAdHIIADuM12tRKnxOTz9ru7GFyW0k\nKBa0Fst8ATXPuoni3z+iVfpJ7r+zAnDCeQioAXJOTz/qXOTA4jkDRUmXhLUM9Iea\nGCHlYFatQVOtG6I8tv4KUQVscRS0xfuD0twV8WlM81kmJNftCVoXPuK4Xb0k8+Ay\nsrPcQDuamreGBbtQJLRbR4uo/utTx2+MxqC5V6mXNxbABH8fvmzksAnXy4KutWFm\nSx06Gg1bOPKDvUa+WhHqY4kGYYa4jbD/oEY4EUU5dRvuUgKshN25xQTSZeV4uf8j\n+sGSQPvtDlZDsJPTI8/fVbRNnoG7GP6Ecn8IqAoC7JmXGzBMQDpo9bClqHtTUvQ=\n=VW7N\n-----END PGP SIGNATURE-----\n", "payload": "tree ec6e5dcc55e49994a51a7701edc0f2cfc004620f\nparent 11f5309858db86d0419e53fbb5eb622c87664e3b\nparent e543e3187c7d82149819c0044515336524086078\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584933970 +0100\ncommitter GitHub <noreply@github.com> 1584933970 +0100\n\nRollup merge of #70236 - petrochenkov:globimpice, r=ecstatic-morse\n\nresolve: Avoid \"self-confirming\" import resolutions in one more case\n\nSo the idea behind \"blacklisted bindings\" is that we must ignore some name definitions during resolution because otherwise they cause infinite cycles.\nE.g. import\n```rust\nuse my_crate;\n```\nwould refer to itself (on 2018 edition) without this blacklisting, because `use my_crate;` is the first name in scope when we are resolving `my_crate` here.\n\nIn this PR we are doing this blacklisting for the case\n```rust\nuse same::same;\n```\n, namely blacklisting the second `same` when resolving the first `same`.\nThis was previously forgotten.\n\nFixes https://github.com/rust-lang/rust/issues/62767\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "html_url": "https://github.com/rust-lang/rust/commit/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11f5309858db86d0419e53fbb5eb622c87664e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/11f5309858db86d0419e53fbb5eb622c87664e3b", "html_url": "https://github.com/rust-lang/rust/commit/11f5309858db86d0419e53fbb5eb622c87664e3b"}, {"sha": "e543e3187c7d82149819c0044515336524086078", "url": "https://api.github.com/repos/rust-lang/rust/commits/e543e3187c7d82149819c0044515336524086078", "html_url": "https://github.com/rust-lang/rust/commit/e543e3187c7d82149819c0044515336524086078"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "d375ae4a447a3801e09bbb8d7ebf258d65b0f2a6", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "patch": "@@ -874,6 +874,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n         let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+        let orig_blacklisted_binding = match &import.kind {\n+            ImportKind::Single { target_bindings, .. } => {\n+                Some(mem::replace(&mut self.r.blacklisted_binding, target_bindings[TypeNS].get()))\n+            }\n+            _ => None,\n+        };\n         let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();\n         let path_res = self.r.resolve_path(\n             &import.module_path,\n@@ -884,6 +890,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             import.crate_lint(),\n         );\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n+        if let Some(orig_blacklisted_binding) = orig_blacklisted_binding {\n+            self.r.blacklisted_binding = orig_blacklisted_binding;\n+        }\n         import.vis.set(orig_vis);\n         if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {\n             // Consider erroneous imports used to avoid duplicate diagnostics."}, {"sha": "984d3f0ca92f4a9fac073acc37eab85fe426609d", "filename": "src/test/ui/imports/issue-62767.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08dfd1344c47c5a7e3abbee10db6d0bcfde6d107/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-62767.rs?ref=08dfd1344c47c5a7e3abbee10db6d0bcfde6d107", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+mod m {\n+    pub enum Same {\n+        Same,\n+    }\n+}\n+\n+use m::*;\n+\n+// The variant `Same` introduced by this import is not considered when resolving the prefix\n+// `Same::` during import validation (issue #62767).\n+use Same::Same;\n+\n+fn main() {}"}]}