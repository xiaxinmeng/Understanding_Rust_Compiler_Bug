{"sha": "227490c06935d7f901b027621ef77d85aa7cac8a", "node_id": "C_kwDOAAsO6NoAKDIyNzQ5MGMwNjkzNWQ3ZjkwMWIwMjc2MjFlZjc3ZDg1YWE3Y2FjOGE", "commit": {"author": {"name": "vi_mi", "email": "fenil.jain2018@vitstudent.ac.in", "date": "2021-10-12T06:00:15Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-10-16T10:36:06Z"}, "message": "fix: arbitary noop of assist and same file double writes", "tree": {"sha": "42d3eb66f43a96c5a4628de5d0d66049275540aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d3eb66f43a96c5a4628de5d0d66049275540aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227490c06935d7f901b027621ef77d85aa7cac8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227490c06935d7f901b027621ef77d85aa7cac8a", "html_url": "https://github.com/rust-lang/rust/commit/227490c06935d7f901b027621ef77d85aa7cac8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227490c06935d7f901b027621ef77d85aa7cac8a/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b95ea3100d34e87e50ec2d2d42786b2927de9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b95ea3100d34e87e50ec2d2d42786b2927de9c", "html_url": "https://github.com/rust-lang/rust/commit/32b95ea3100d34e87e50ec2d2d42786b2927de9c"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "fbc66d1bf4b52e4ee7d1b480a5dca446b385d678", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 50, "deletions": 44, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/227490c06935d7f901b027621ef77d85aa7cac8a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227490c06935d7f901b027621ef77d85aa7cac8a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=227490c06935d7f901b027621ef77d85aa7cac8a", "patch": "@@ -73,63 +73,69 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n     let old_item_indent = module.body_items[0].indent_level();\n \n+    //This takes place in three steps:\n+    //\n+    //- Firstly, we will update the references(usages) e.g. converting a\n+    //  function call bar() to modname::bar(), and similarly for other items\n+    //\n+    //- Secondly, changing the visibility of each item inside the newly selected module\n+    //  i.e. making a fn a() {} to pub(crate) fn a() {}\n+    //\n+    //- Thirdly, resolving all the imports this includes removing paths from imports\n+    //  outside the module, shifting/cloning them inside new module, or shifting the imports, or making\n+    //  new import statemnts\n+\n+    //We are getting item usages and record_fields together, record_fields\n+    //for change_visibility and usages for first point mentioned above in the process\n+    let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n+\n+    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, &ctx);\n+    module.body_items = module.change_visibility(record_fields)?;\n+    if module.body_items.len() == 0 {\n+        return None;\n+    }\n+\n     acc.add(\n         AssistId(\"extract_module\", AssistKind::RefactorExtract),\n         \"Extract Module\",\n         module.text_range,\n         |builder| {\n-            //This takes place in three steps:\n-            //\n-            //- Firstly, we will update the references(usages) e.g. converting a\n-            //  function call bar() to modname::bar(), and similarly for other items\n-            //\n-            //- Secondly, changing the visibility of each item inside the newly selected module\n-            //  i.e. making a fn a() {} to pub(crate) fn a() {}\n-            //\n-            //- Thirdly, resolving all the imports this includes removing paths from imports\n-            //  outside the module, shifting/cloning them inside new module, or shifting the imports, or making\n-            //  new import statemnts\n+            let mut body_items = Vec::new();\n+            let new_item_indent = old_item_indent + 1;\n+            for item in module.body_items {\n+                let item = item.indent(IndentLevel(1));\n+                let mut indented_item = String::new();\n+                format_to!(indented_item, \"{}{}\", new_item_indent, item.to_string());\n+                body_items.push(indented_item);\n+            }\n \n-            //We are getting item usages and record_fields together, record_fields\n-            //for change_visibility and usages for first point mentioned above in the process\n-            let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n+            let body = body_items.join(\"\\n\\n\");\n \n-            let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, &ctx);\n+            let mut module_def = String::new();\n \n-            if let Some(block_items) = module.change_visibility(record_fields) {\n-                module.body_items = block_items;\n-                if module.body_items.len() == 0 {\n-                    return;\n-                }\n+            format_to!(module_def, \"mod {} {{\\n{}\\n{}}}\", module.name, body, old_item_indent);\n \n-                let mut body_items = Vec::new();\n-                let new_item_indent = old_item_indent + 1;\n-                for item in module.body_items {\n-                    let item = item.indent(IndentLevel(1));\n-                    let mut indented_item = String::new();\n-                    format_to!(indented_item, \"{}{}\", new_item_indent, item.to_string());\n-                    body_items.push(indented_item);\n+            let mut usages_to_be_updated_for_curr_file = vec![];\n+            for usages_to_be_updated_for_file in usages_to_be_processed {\n+                if usages_to_be_updated_for_file.0 == ctx.frange.file_id {\n+                    usages_to_be_updated_for_curr_file = usages_to_be_updated_for_file.1;\n+                    continue;\n                 }\n-\n-                let body = body_items.join(\"\\n\\n\");\n-\n-                let mut module_def = String::new();\n-\n-                format_to!(module_def, \"mod {} {{\\n{}\\n{}}}\", module.name, body, old_item_indent);\n-\n-                for usages_to_be_updated_for_file in usages_to_be_processed {\n-                    builder.edit_file(usages_to_be_updated_for_file.0);\n-                    for usage_to_be_processed in usages_to_be_updated_for_file.1 {\n-                        builder.replace(usage_to_be_processed.0, usage_to_be_processed.1)\n-                    }\n+                builder.edit_file(usages_to_be_updated_for_file.0);\n+                for usage_to_be_processed in usages_to_be_updated_for_file.1 {\n+                    builder.replace(usage_to_be_processed.0, usage_to_be_processed.1)\n                 }\n+            }\n \n-                builder.edit_file(ctx.frange.file_id);\n-                for import_path_text_range in import_paths_to_be_removed {\n-                    builder.delete(import_path_text_range);\n-                }\n-                builder.replace(module.text_range, module_def)\n+            builder.edit_file(ctx.frange.file_id);\n+            for usage_to_be_processed in usages_to_be_updated_for_curr_file {\n+                builder.replace(usage_to_be_processed.0, usage_to_be_processed.1)\n+            }\n+\n+            for import_path_text_range in import_paths_to_be_removed {\n+                builder.delete(import_path_text_range);\n             }\n+            builder.replace(module.text_range, module_def)\n         },\n     )\n }"}]}