{"sha": "ee0ce64d9db10aebc491454b6595d6edf69fe513", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMGNlNjRkOWRiMTBhZWJjNDkxNDU0YjY1OTVkNmVkZjY5ZmU1MTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-12T21:35:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-14T21:52:07Z"}, "message": "core::rt: Wait for handles to close", "tree": {"sha": "562b2b6b4d4e292842c37830d531c680a802d335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/562b2b6b4d4e292842c37830d531c680a802d335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0ce64d9db10aebc491454b6595d6edf69fe513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ce64d9db10aebc491454b6595d6edf69fe513", "html_url": "https://github.com/rust-lang/rust/commit/ee0ce64d9db10aebc491454b6595d6edf69fe513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ce64d9db10aebc491454b6595d6edf69fe513/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "204e3d82ccf5015e39f847aafea148d5180ab951", "url": "https://api.github.com/repos/rust-lang/rust/commits/204e3d82ccf5015e39f847aafea148d5180ab951", "html_url": "https://github.com/rust-lang/rust/commit/204e3d82ccf5015e39f847aafea148d5180ab951"}], "stats": {"total": 84, "additions": 60, "deletions": 24}, "files": [{"sha": "fecb9391caa54cc7c62fd744f4ce7bf2a97c7f82", "filename": "src/libcore/rt/uv/idle.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fidle.rs?ref=ee0ce64d9db10aebc491454b6595d6edf69fe513", "patch": "@@ -11,7 +11,7 @@\n use libc::c_int;\n use option::Some;\n use rt::uv::uvll;\n-use rt::uv::{Watcher, Loop, NativeHandle, IdleCallback};\n+use rt::uv::{Watcher, Loop, NativeHandle, IdleCallback, NullCallback};\n use rt::uv::status_to_maybe_uv_error;\n \n pub struct IdleWatcher(*uvll::uv_idle_t);\n@@ -57,12 +57,23 @@ pub impl IdleWatcher {\n         }\n     }\n \n-    fn close(self) {\n+    fn close(self, cb: NullCallback) {\n+        {\n+            let mut this = self;\n+            let data = this.get_watcher_data();\n+            assert!(data.close_cb.is_none());\n+            data.close_cb = Some(cb);\n+        }\n+\n         unsafe { uvll::close(self.native_handle(), close_cb) };\n \n         extern fn close_cb(handle: *uvll::uv_idle_t) {\n             unsafe {\n                 let mut idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n+                {\n+                    let mut data = idle_watcher.get_watcher_data();\n+                    data.close_cb.swap_unwrap()();\n+                }\n                 idle_watcher.drop_watcher_data();\n                 uvll::idle_delete(handle);\n             }"}, {"sha": "684099d7fd11fa2ace8f236cb46c357b953e7493", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=ee0ce64d9db10aebc491454b6595d6edf69fe513", "patch": "@@ -356,7 +356,7 @@ fn idle_new_then_close() {\n     do run_in_bare_thread {\n         let mut loop_ = Loop::new();\n         let idle_watcher = { IdleWatcher::new(&mut loop_) };\n-        idle_watcher.close();\n+        idle_watcher.close(||());\n     }\n }\n \n@@ -372,7 +372,7 @@ fn idle_smoke_test() {\n             assert!(status.is_none());\n             if unsafe { *count_ptr == 10 } {\n                 idle_watcher.stop();\n-                idle_watcher.close();\n+                idle_watcher.close(||());\n             } else {\n                 unsafe { *count_ptr = *count_ptr + 1; }\n             }\n@@ -396,7 +396,7 @@ fn idle_start_stop_start() {\n                 assert!(status.is_none());\n                 let mut idle_watcher = idle_watcher;\n                 idle_watcher.stop();\n-                idle_watcher.close();\n+                idle_watcher.close(||());\n             }\n         }\n         loop_.run();"}, {"sha": "c031d7a1a6961257b3402c887d08f5c2a879cb34", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0ce64d9db10aebc491454b6595d6edf69fe513/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=ee0ce64d9db10aebc491454b6595d6edf69fe513", "patch": "@@ -66,7 +66,7 @@ impl EventLoop for UvEventLoop {\n             assert!(status.is_none());\n             let mut idle_watcher = idle_watcher;\n             idle_watcher.stop();\n-            idle_watcher.close();\n+            idle_watcher.close(||());\n             f();\n         }\n     }\n@@ -124,22 +124,26 @@ impl IoFactory for UvIoFactory {\n             // Wait for a connection\n             do tcp_watcher.connect(addr) |stream_watcher, status| {\n                 rtdebug!(\"connect: in connect callback\");\n-                let maybe_stream = if status.is_none() {\n+                if status.is_none() {\n                     rtdebug!(\"status is none\");\n-                    Ok(~UvTcpStream { watcher: stream_watcher })\n+                    let res = Ok(~UvTcpStream { watcher: stream_watcher });\n+\n+                    // Store the stream in the task's stack\n+                    unsafe { (*result_cell_ptr).put_back(res); }\n+\n+                    // Context switch\n+                    let scheduler = local_sched::take();\n+                    scheduler.resume_task_immediately(task_cell.take());\n                 } else {\n                     rtdebug!(\"status is some\");\n-                    // XXX: Wait for close\n-                    stream_watcher.close(||());\n-                    Err(uv_error_to_io_error(status.get()))\n+                    let task_cell = Cell(task_cell.take());\n+                    do stream_watcher.close {\n+                        let res = Err(uv_error_to_io_error(status.get()));\n+                        unsafe { (*result_cell_ptr).put_back(res); }\n+                        let scheduler = local_sched::take();\n+                        scheduler.resume_task_immediately(task_cell.take());\n+                    }\n                 };\n-\n-                // Store the stream in the task's stack\n-                unsafe { (*result_cell_ptr).put_back(maybe_stream); }\n-\n-                // Context switch\n-                let scheduler = local_sched::take();\n-                scheduler.resume_task_immediately(task_cell.take());\n             }\n         }\n \n@@ -152,8 +156,14 @@ impl IoFactory for UvIoFactory {\n         match watcher.bind(addr) {\n             Ok(_) => Ok(~UvTcpListener::new(watcher)),\n             Err(uverr) => {\n-                // XXX: Should we wait until close completes?\n-                watcher.as_stream().close(||());\n+                let scheduler = local_sched::take();\n+                do scheduler.deschedule_running_task_and_then |task| {\n+                    let task_cell = Cell(task);\n+                    do watcher.as_stream().close {\n+                        let scheduler = local_sched::take();\n+                        scheduler.resume_task_immediately(task_cell.take());\n+                    }\n+                }\n                 Err(uv_error_to_io_error(uverr))\n             }\n         }\n@@ -181,8 +191,15 @@ impl UvTcpListener {\n \n impl Drop for UvTcpListener {\n     fn finalize(&self) {\n-        // XXX: Need to wait until close finishes before returning\n-        self.watcher().as_stream().close(||());\n+        let watcher = self.watcher();\n+        let scheduler = local_sched::take();\n+        do scheduler.deschedule_running_task_and_then |task| {\n+            let task_cell = Cell(task);\n+            do watcher.as_stream().close {\n+                let scheduler = local_sched::take();\n+                scheduler.resume_task_immediately(task_cell.take());\n+            }\n+        }\n     }\n }\n \n@@ -235,8 +252,16 @@ impl UvTcpStream {\n \n impl Drop for UvTcpStream {\n     fn finalize(&self) {\n-        rtdebug!(\"closing stream\");\n-        self.watcher().close(||());\n+        rtdebug!(\"closing tcp stream\");\n+        let watcher = self.watcher();\n+        let scheduler = local_sched::take();\n+        do scheduler.deschedule_running_task_and_then |task| {\n+            let task_cell = Cell(task);\n+            do watcher.close {\n+                let scheduler = local_sched::take();\n+                scheduler.resume_task_immediately(task_cell.take());\n+            }\n+        }\n     }\n }\n "}]}