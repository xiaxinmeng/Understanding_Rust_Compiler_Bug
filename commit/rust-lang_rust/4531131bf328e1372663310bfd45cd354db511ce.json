{"sha": "4531131bf328e1372663310bfd45cd354db511ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzExMzFiZjMyOGUxMzcyNjYzMzEwYmZkNDVjZDM1NGRiNTExY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-05T17:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-05T17:14:12Z"}, "message": "Auto merge of #44878 - Nashenas88:master, r=nikomatsakis\n\nStore a new Region value every time we create a new region variable\n\nPaired with @spastorino to walk through this and implement #44870.", "tree": {"sha": "9eaaf2b4a62b92ba8c8f6aa531dd7cc1831984f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eaaf2b4a62b92ba8c8f6aa531dd7cc1831984f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4531131bf328e1372663310bfd45cd354db511ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4531131bf328e1372663310bfd45cd354db511ce", "html_url": "https://github.com/rust-lang/rust/commit/4531131bf328e1372663310bfd45cd354db511ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4531131bf328e1372663310bfd45cd354db511ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db1144277abbf1ffc14d4e9a143cf87d1ef6d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db1144277abbf1ffc14d4e9a143cf87d1ef6d41", "html_url": "https://github.com/rust-lang/rust/commit/1db1144277abbf1ffc14d4e9a143cf87d1ef6d41"}, {"sha": "271a492cb2028090c0198e893c18024c19bb6fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/271a492cb2028090c0198e893c18024c19bb6fc7", "html_url": "https://github.com/rust-lang/rust/commit/271a492cb2028090c0198e893c18024c19bb6fc7"}], "stats": {"total": 121, "additions": 62, "deletions": 59}, "files": [{"sha": "77e33855f23444acb767b17b12322125b5b15039", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -1668,6 +1668,7 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "cb4126245afaefad9d7b5164e21be2ba40b0370c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -406,7 +406,7 @@ impl DepGraph {\n         for (current_dep_node_index, edges) in current_dep_graph.edges.iter_enumerated() {\n             let start = edge_list_data.len() as u32;\n             // This should really just be a memcpy :/\n-            edge_list_data.extend(edges.iter().map(|i| SerializedDepNodeIndex(i.index)));\n+            edge_list_data.extend(edges.iter().map(|i| SerializedDepNodeIndex::new(i.index())));\n             let end = edge_list_data.len() as u32;\n \n             debug_assert_eq!(current_dep_node_index.index(), edge_list_indices.len());"}, {"sha": "c96040ab9b6e3eab996aafdb875c90fc6d3217a4", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -14,23 +14,7 @@ use dep_graph::DepNode;\n use ich::Fingerprint;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n \n-/// The index of a DepNode in the SerializedDepGraph::nodes array.\n-#[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd, Debug,\n-         RustcEncodable, RustcDecodable)]\n-pub struct SerializedDepNodeIndex(pub u32);\n-\n-impl Idx for SerializedDepNodeIndex {\n-    #[inline]\n-    fn new(idx: usize) -> Self {\n-        assert!(idx <= ::std::u32::MAX as usize);\n-        SerializedDepNodeIndex(idx as u32)\n-    }\n-\n-    #[inline]\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n+newtype_index!(SerializedDepNodeIndex);\n \n /// Data for use when recompiling the **current crate**.\n #[derive(Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "015dbbb7affa952e6dd5be9e706d6a397876881f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -43,6 +43,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n+#![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![cfg_attr(windows, feature(libc))]\n@@ -71,7 +72,7 @@ extern crate graphviz;\n extern crate libc;\n extern crate owning_ref;\n extern crate rustc_back;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n extern crate serialize;\n extern crate rustc_const_math;\n extern crate rustc_errors as errors;"}, {"sha": "b909269e1538e554f4a1479584ad98b4d4d1eb26", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -43,30 +43,6 @@ pub mod visit;\n pub mod transform;\n pub mod traversal;\n \n-macro_rules! newtype_index {\n-    ($name:ident, $debug_name:expr) => (\n-        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-         RustcEncodable, RustcDecodable)]\n-        pub struct $name(u32);\n-\n-        impl Idx for $name {\n-            fn new(value: usize) -> Self {\n-                assert!(value < (u32::MAX) as usize);\n-                $name(value as u32)\n-            }\n-            fn index(self) -> usize {\n-                self.0 as usize\n-            }\n-        }\n-\n-        impl Debug for $name {\n-            fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n-                write!(fmt, \"{}{}\", $debug_name, self.0)\n-            }\n-        }\n-    )\n-}\n-\n /// Types for locals\n type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n "}, {"sha": "4b7f55eba06bec1ced8564273b7f5d3e7c3cfad5", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -38,6 +38,43 @@ impl Idx for u32 {\n     fn index(self) -> usize { self as usize }\n }\n \n+#[macro_export]\n+macro_rules! newtype_index {\n+    ($name:ident) => (\n+        newtype_index!($name, unsafe { ::std::intrinsics::type_name::<$name>() });\n+    );\n+\n+    ($name:ident, $debug_name:expr) => (\n+        #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n+         RustcEncodable, RustcDecodable)]\n+        pub struct $name(u32);\n+\n+        impl $name {\n+            // HACK use for constants\n+            #[allow(unused)]\n+            const fn const_new(x: u32) -> Self {\n+                $name(x)\n+            }\n+        }\n+\n+        impl Idx for $name {\n+            fn new(value: usize) -> Self {\n+                assert!(value < (::std::u32::MAX) as usize);\n+                $name(value as u32)\n+            }\n+            fn index(self) -> usize {\n+                self.0 as usize\n+            }\n+        }\n+\n+        impl ::std::fmt::Debug for $name {\n+            fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+                write!(fmt, \"{}{}\", $debug_name, self.0)\n+            }\n+        }\n+    )\n+}\n+\n #[derive(Clone, PartialEq, Eq)]\n pub struct IndexVec<I: Idx, T> {\n     pub raw: Vec<T>,"}, {"sha": "b7a576babeb677c6f35f976e1dfc5eb3f9222746", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -17,5 +17,6 @@ rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "46a5e5abbddfbd11246ca81e45a58e13601eb2d4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -311,19 +311,7 @@ struct CFG<'tcx> {\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub struct ScopeId(u32);\n-\n-impl Idx for ScopeId {\n-    fn new(index: usize) -> ScopeId {\n-        assert!(index < (u32::MAX as usize));\n-        ScopeId(index as u32)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n+newtype_index!(ScopeId);\n \n ///////////////////////////////////////////////////////////////////////////\n /// The `BlockAnd` \"monad\" packages up the new basic block along with a"}, {"sha": "7e4206e14c56141fcac3e87299d775c751192ff8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -18,6 +18,8 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(const_fn)]\n+#![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(placement_in_syntax)]\n@@ -30,7 +32,8 @@ extern crate bitflags;\n extern crate graphviz as dot;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_data_structures;\n+#[macro_use] extern crate rustc_data_structures;\n+extern crate serialize as rustc_serialize;\n extern crate rustc_errors;\n #[macro_use]\n extern crate syntax;"}, {"sha": "d4a5354c78f0ea28dd1752a2bb514ed03067a087", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4531131bf328e1372663310bfd45cd354db511ce/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=4531131bf328e1372663310bfd45cd354db511ce", "patch": "@@ -15,12 +15,15 @@ use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::infer::{self, InferCtxt};\n+use rustc::util::nodemap::FxHashSet;\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use syntax_pos::DUMMY_SP;\n use std::collections::HashMap;\n \n #[allow(dead_code)]\n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     lookup_map: HashMap<RegionVid, Lookup>,\n+    regions: IndexVec<RegionIndex, Region>,\n     infcx: InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n@@ -29,15 +32,17 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n         NLLVisitor {\n             infcx,\n             lookup_map: HashMap::new(),\n+            regions: IndexVec::new(),\n         }\n     }\n \n     pub fn into_results(self) -> HashMap<RegionVid, Lookup> {\n         self.lookup_map\n     }\n \n-    fn renumber_regions<T>(&self, value: &T) -> T where T: TypeFoldable<'tcx> {\n+    fn renumber_regions<T>(&mut self, value: &T) -> T where T: TypeFoldable<'tcx> {\n         self.infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+            self.regions.push(Region::default());\n             self.infcx.next_region_var(infer::MiscVariable(DUMMY_SP))\n         })\n     }\n@@ -143,4 +148,11 @@ impl MirPass for NLL {\n             let _results = visitor.into_results();\n         })\n     }\n-}\n\\ No newline at end of file\n+}\n+\n+#[derive(Clone, Debug, Default, PartialEq, Eq)]\n+struct Region {\n+    points: FxHashSet<Location>,\n+}\n+\n+newtype_index!(RegionIndex);"}]}