{"sha": "72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "node_id": "C_kwDOAAsO6NoAKDcyMTE3YWIyYzdjMzI4MDVlOTYzYmJmNWYwZDFiZGM3Y2Q3MjI3NGM", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-19T21:11:17Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-01-23T22:20:58Z"}, "message": "Print PID holding bootstrap build lock on Linux", "tree": {"sha": "bd8d40d2e9fb716819fe80cb70da655001d3a2a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd8d40d2e9fb716819fe80cb70da655001d3a2a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "html_url": "https://github.com/rust-lang/rust/commit/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c83bd03a9d94af35c97a6b8b595d40e291af84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c83bd03a9d94af35c97a6b8b595d40e291af84a", "html_url": "https://github.com/rust-lang/rust/commit/4c83bd03a9d94af35c97a6b8b595d40e291af84a"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "3856bb64fb310331f44899dcd940708335e4e24c", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117ab2c7c32805e963bbf5f0d1bdc7cd72274c/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=72117ab2c7c32805e963bbf5f0d1bdc7cd72274c", "patch": "@@ -16,12 +16,17 @@ fn main() {\n     let mut build_lock;\n     let _build_lock_guard;\n     if cfg!(any(unix, windows)) {\n-        build_lock = fd_lock::RwLock::new(t!(std::fs::File::create(config.out.join(\"lock\"))));\n+        let path = config.out.join(\"lock\");\n+        build_lock = fd_lock::RwLock::new(t!(std::fs::File::create(&path)));\n         _build_lock_guard = match build_lock.try_write() {\n             Ok(lock) => lock,\n             err => {\n-                println!(\"warning: build directory locked, waiting for lock\");\n                 drop(err);\n+                if let Some(pid) = get_lock_owner(&path) {\n+                    println!(\"warning: build directory locked by process {pid}, waiting for lock\");\n+                } else {\n+                    println!(\"warning: build directory locked, waiting for lock\");\n+                }\n                 t!(build_lock.write())\n             }\n         };\n@@ -98,3 +103,30 @@ fn check_version(config: &Config) -> Option<String> {\n \n     Some(msg)\n }\n+\n+/// Get the PID of the process which took the write lock by\n+/// parsing `/proc/locks`.\n+#[cfg(target_os = \"linux\")]\n+fn get_lock_owner(f: &std::path::Path) -> Option<u64> {\n+    use std::fs::File;\n+    use std::io::{BufRead, BufReader};\n+    use std::os::unix::fs::MetadataExt;\n+\n+    let lock_inode = std::fs::metadata(f).ok()?.ino();\n+    let lockfile = File::open(\"/proc/locks\").ok()?;\n+    BufReader::new(lockfile).lines().find_map(|line| {\n+        //                       pid--vvvvvv       vvvvvvv--- inode\n+        // 21: FLOCK  ADVISORY  WRITE 359238 08:02:3719774 0 EOF\n+        let line = line.ok()?;\n+        let parts = line.split_whitespace().collect::<Vec<_>>();\n+        let (pid, inode) = (parts[4].parse::<u64>().ok()?, &parts[5]);\n+        let inode = inode.rsplit_once(':')?.1.parse::<u64>().ok()?;\n+        if inode == lock_inode { Some(pid) } else { None }\n+    })\n+}\n+\n+#[cfg(not(target_os = \"linux\"))]\n+fn get_lock_owner(_: &std::path::Path) -> Option<u64> {\n+    // FIXME: Implement on other OS's\n+    None\n+}"}]}