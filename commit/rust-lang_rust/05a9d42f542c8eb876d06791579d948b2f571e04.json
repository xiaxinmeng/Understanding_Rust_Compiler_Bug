{"sha": "05a9d42f542c8eb876d06791579d948b2f571e04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTlkNDJmNTQyYzhlYjg3NmQwNjc5MTU3OWQ5NDhiMmY1NzFlMDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T11:52:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-31T11:52:29Z"}, "message": "tweak extend selection", "tree": {"sha": "33b5962641f57d65b8545b477885fcfadbbe801c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b5962641f57d65b8545b477885fcfadbbe801c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a9d42f542c8eb876d06791579d948b2f571e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a9d42f542c8eb876d06791579d948b2f571e04", "html_url": "https://github.com/rust-lang/rust/commit/05a9d42f542c8eb876d06791579d948b2f571e04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a9d42f542c8eb876d06791579d948b2f571e04/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc7f438c4347e027deda5cda4bcd5e560610bb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc7f438c4347e027deda5cda4bcd5e560610bb7", "html_url": "https://github.com/rust-lang/rust/commit/8fc7f438c4347e027deda5cda4bcd5e560610bb7"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "3adb1e45ee8bff852feadacfd780cfe7b504f422", "filename": "crates/libeditor/src/extend_selection.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs?ref=05a9d42f542c8eb876d06791579d948b2f571e04", "patch": "@@ -1,5 +1,5 @@\n use libsyntax2::{\n-    File, TextRange, SyntaxNodeRef,\n+    File, TextRange, SyntaxNodeRef, TextUnit,\n     SyntaxKind::*,\n     algo::{find_leaf_at_offset, find_covering_node, ancestors, Direction, siblings},\n };\n@@ -18,11 +18,22 @@ pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange>\n         }\n         let ws = leaves.next()?;\n         let ws_text = ws.leaf_text().unwrap();\n-        let range = TextRange::from_to(offset, ws.range().end()) - ws.range().start();\n-        let ws_suffix = &ws_text.as_str()[range];\n+        let suffix = TextRange::from_to(offset, ws.range().end()) - ws.range().start();\n+        let prefix = TextRange::from_to(ws.range().start(), offset) - ws.range().start();\n+        let ws_suffix = &ws_text.as_str()[suffix];\n+        let ws_prefix = &ws_text.as_str()[prefix];\n         if ws_text.contains(\"\\n\") && !ws_suffix.contains(\"\\n\") {\n             if let Some(node) = ws.next_sibling() {\n-                return Some(node.range());\n+                let start = match ws_prefix.rfind('\\n') {\n+                    Some(idx) => ws.range().start() + TextUnit::from((idx + 1) as u32),\n+                    None => node.range().start()\n+                };\n+                let end = if root.text().char_at(node.range().end()) == Some('\\n') {\n+                    node.range().end() + TextUnit::of_char('\\n')\n+                } else {\n+                    node.range().end()\n+                };\n+                return Some(TextRange::from_to(start, end));\n             }\n         }\n         return Some(ws.range());\n@@ -99,7 +110,7 @@ impl S {\n \n     }\n }\"#,\n-            &[\"fn foo() {\\n\\n    }\"]\n+            &[\"    fn foo() {\\n\\n    }\\n\"]\n         );\n     }\n "}, {"sha": "5c04e2f9bc82b23240ffbfd514cc19d954456904", "filename": "crates/libeditor/src/scope/fn_scope.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fscope%2Ffn_scope.rs?ref=05a9d42f542c8eb876d06791579d948b2f571e04", "patch": "@@ -140,18 +140,23 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 compute_block_scopes(block, scopes, scope);\n             }\n         },\n+        ast::Expr::BlockExpr(e) => {\n+            if let Some(block) = e.block() {\n+                compute_block_scopes(block, scopes, scope);\n+            }\n+        }\n+        ast::Expr::LoopExpr(e) => {\n+            if let Some(block) = e.loop_body() {\n+                compute_block_scopes(block, scopes, scope);\n+            }\n+        }\n         ast::Expr::WhileExpr(e) => {\n             let cond_scope = e.condition().and_then(|cond| {\n                 compute_cond_scopes(cond, scopes, scope)\n             });\n             if let Some(block) = e.loop_body() {\n                 compute_block_scopes(block, scopes, cond_scope.unwrap_or(scope));\n             }\n-        },\n-        ast::Expr::BlockExpr(e) => {\n-            if let Some(block) = e.block() {\n-                compute_block_scopes(block, scopes, scope);\n-            }\n         }\n         ast::Expr::ForExpr(e) => {\n             if let Some(expr) = e.iterable() {\n@@ -165,7 +170,7 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n             if let Some(block) = e.loop_body() {\n                 compute_block_scopes(block, scopes, scope);\n             }\n-        },\n+        }\n         ast::Expr::LambdaExpr(e) => {\n             let mut scope = scopes.new_scope(scope);\n             scopes.add_params_bindings(scope, e.param_list());\n@@ -180,11 +185,7 @@ fn compute_expr_scopes(expr: ast::Expr, scopes: &mut FnScopes, scope: ScopeId) {\n                 .chain(e.expr())\n                 .for_each(|expr| compute_expr_scopes(expr, scopes, scope));\n         }\n-        ast::Expr::LoopExpr(e) => {\n-            if let Some(block) = e.loop_body() {\n-                compute_block_scopes(block, scopes, scope);\n-            }\n-        }\n+\n         _ => {\n             expr.syntax().children()\n                 .filter_map(ast::Expr::cast)\n@@ -273,4 +274,18 @@ mod tests {\n             &[\"x\"],\n         );\n     }\n+\n+    // #[test]\n+    // fn test_match() {\n+    //     do_check(r\"\n+    //         fn quux() {\n+    //             match () {\n+    //                 Some(x) => {\n+    //                     <|>\n+    //                 }\n+    //             };\n+    //         }\",\n+    //         &[\"x\"],\n+    //     );\n+    // }\n }"}, {"sha": "280bedd786efd6038fc8ac2e3d2fa7b2d4bced12", "filename": "crates/libsyntax2/src/yellow/syntax_text.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a9d42f542c8eb876d06791579d948b2f571e04/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax_text.rs?ref=05a9d42f542c8eb876d06791579d948b2f571e04", "patch": "@@ -61,6 +61,18 @@ impl<'a> SyntaxText<'a> {\n             });\n         SyntaxText { node: self.node, range }\n     }\n+    pub fn char_at(&self, offset: TextUnit) -> Option<char> {\n+        let mut start: TextUnit = 0.into();\n+        for chunk in self.chunks() {\n+            let end = start + TextUnit::of_str(chunk);\n+            if start <= offset && offset < end {\n+                let off: usize = u32::from(offset - start) as usize;\n+                return Some(chunk[off..].chars().next().unwrap());\n+            }\n+            start = end;\n+        }\n+        None\n+    }\n }\n \n impl<'a> fmt::Debug for SyntaxText<'a> {"}]}