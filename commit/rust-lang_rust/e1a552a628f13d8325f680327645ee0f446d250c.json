{"sha": "e1a552a628f13d8325f680327645ee0f446d250c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTU1MmE2MjhmMTNkODMyNWY2ODAzMjc2NDVlZTBmNDQ2ZDI1MGM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-11-18T03:43:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:39:30Z"}, "message": "libstd: fix warnings in sort", "tree": {"sha": "63f3b48864656e34fda9522e316fd19fd86bd454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f3b48864656e34fda9522e316fd19fd86bd454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a552a628f13d8325f680327645ee0f446d250c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a552a628f13d8325f680327645ee0f446d250c", "html_url": "https://github.com/rust-lang/rust/commit/e1a552a628f13d8325f680327645ee0f446d250c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a552a628f13d8325f680327645ee0f446d250c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70b4818032176d266be5f8030a7abb26c375228", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70b4818032176d266be5f8030a7abb26c375228", "html_url": "https://github.com/rust-lang/rust/commit/e70b4818032176d266be5f8030a7abb26c375228"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "73529fd2a93f16bc1608ce75152ae40bae490cae", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1a552a628f13d8325f680327645ee0f446d250c/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a552a628f13d8325f680327645ee0f446d250c/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=e1a552a628f13d8325f680327645ee0f446d250c", "patch": "@@ -45,9 +45,9 @@ pub pure fn merge_sort<T: Copy>(v: &[const T], le: Le<T>) -> ~[T] {\n                 a_ix += 1;\n             } else { rs.push(b[b_ix]); b_ix += 1; }\n         }\n-        rs = vec::append(rs, vec::slice(a, a_ix, a_len));\n-        rs = vec::append(rs, vec::slice(b, b_ix, b_len));\n-        return rs;\n+        rs.push_all(vec::slice(a, a_ix, a_len));\n+        rs.push_all(vec::slice(b, b_ix, b_len));\n+        move rs\n     }\n }\n \n@@ -786,11 +786,11 @@ mod test_qsort {\n \n         let expected = ~[1, 2, 3];\n \n-        do sort::quick_sort(names) |x, y| { int::le(*x, *y) };\n+        do quick_sort(names) |x, y| { int::le(*x, *y) };\n \n         let immut_names = vec::from_mut(move names);\n \n-        let pairs = vec::zip(expected, immut_names);\n+        let pairs = vec::zip_slice(expected, immut_names);\n         for vec::each(pairs) |p| {\n             let (a, b) = *p;\n             debug!(\"%d %d\", a, b);\n@@ -867,7 +867,7 @@ mod tests {\n #[cfg(test)]\n mod test_tim_sort {\n     struct CVal {\n-        val: ~float,\n+        val: float,\n     }\n \n     impl CVal: Ord {\n@@ -948,14 +948,14 @@ mod test_tim_sort {\n         let rng = rand::Rng();\n         let mut arr = do vec::from_fn(1000) |_i| {\n             let randVal = rng.gen_float();\n-            CVal { val: ~randVal }\n+            CVal { val: randVal }\n         };\n \n         tim_sort(arr);\n         fail ~\"Guarantee the fail\";\n     }\n \n-    struct DVal { val: ~uint }\n+    struct DVal { val: uint }\n \n     #[cfg(stage0)]\n     impl DVal: Ord {\n@@ -979,7 +979,7 @@ mod test_tim_sort {\n         let rng = rand::Rng();\n         let mut arr = do vec::from_fn(500) |_i| {\n             let randVal = rng.gen_uint();\n-            DVal { val: ~randVal }\n+            DVal { val: randVal }\n         };\n \n         tim_sort(arr);\n@@ -1032,7 +1032,7 @@ mod big_tests {\n         for uint::range(lo, hi) |i| {\n             let n = 1 << i;\n             let arr = do vec::from_fn(n) |_i| {\n-                ~rng.gen_float()\n+                rng.gen_float()\n             };\n             let arr = vec::to_mut(move arr);\n \n@@ -1058,7 +1058,7 @@ mod big_tests {\n                 let size = arr.len();\n                 let mut idx = 1;\n                 while idx <= 10 {\n-                    arr[size-idx] = ~rng.gen_float();\n+                    arr[size-idx] = rng.gen_float();\n                     idx += 1;\n                 }\n             }\n@@ -1067,7 +1067,7 @@ mod big_tests {\n \n             for (n/100).times {\n                 let idx = rng.gen_uint_range(0, n);\n-                arr[idx] = ~rng.gen_float();\n+                arr[idx] = rng.gen_float();\n             }\n             tim_sort(arr);\n             isSorted(arr);\n@@ -1079,12 +1079,12 @@ mod big_tests {\n             tim_sort(arr); // ~sort\n             isSorted(arr);\n \n-            let mut arr = vec::from_elem(n, ~(-0.5));\n+            let mut arr = vec::from_elem(n, -0.5);\n             tim_sort(arr); // =sort\n             isSorted(arr);\n \n             let half = n / 2;\n-            let mut arr = makeRange(half).map(|i| ~(*i as float));\n+            let mut arr = makeRange(half).map(|i| *i as float);\n             tim_sort(arr); // !sort\n             isSorted(arr);\n         }"}]}