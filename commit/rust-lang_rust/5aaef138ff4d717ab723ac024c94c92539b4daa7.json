{"sha": "5aaef138ff4d717ab723ac024c94c92539b4daa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYWVmMTM4ZmY0ZDcxN2FiNzIzYWMwMjRjOTRjOTI1MzliNGRhYTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-10T03:30:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-22T23:40:06Z"}, "message": "std::rand: Add RandSample for Sample-ing Rand types directly.", "tree": {"sha": "bbf1d4b61374d5d5b0b0e39eebc7d84774669835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbf1d4b61374d5d5b0b0e39eebc7d84774669835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aaef138ff4d717ab723ac024c94c92539b4daa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aaef138ff4d717ab723ac024c94c92539b4daa7", "html_url": "https://github.com/rust-lang/rust/commit/5aaef138ff4d717ab723ac024c94c92539b4daa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aaef138ff4d717ab723ac024c94c92539b4daa7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cd772bdba10ac5b8449595cc218419c33b9bcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd772bdba10ac5b8449595cc218419c33b9bcf4", "html_url": "https://github.com/rust-lang/rust/commit/2cd772bdba10ac5b8449595cc218419c33b9bcf4"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "0ee073a926bd02c9800d6368105b216351374ba5", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5aaef138ff4d717ab723ac024c94c92539b4daa7/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aaef138ff4d717ab723ac024c94c92539b4daa7/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=5aaef138ff4d717ab723ac024c94c92539b4daa7", "patch": "@@ -41,6 +41,20 @@ pub trait IndependentSample<Support>: Sample<Support> {\n     fn ind_sample<R: Rng>(&self, &mut R) -> Support;\n }\n \n+/// A wrapper for generating types that implement `Rand` via the\n+/// `Sample` & `IndependentSample` traits.\n+pub struct RandSample<Sup>;\n+\n+impl<Sup: Rand> Sample<Sup> for RandSample<Sup> {\n+    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup { self.ind_sample(rng) }\n+}\n+\n+impl<Sup: Rand> IndependentSample<Sup> for RandSample<Sup> {\n+    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup {\n+        rng.gen()\n+    }\n+}\n+\n mod ziggurat_tables;\n \n // inlining should mean there is no performance penalty for this\n@@ -166,3 +180,24 @@ impl Rand for Exp1 {\n                       pdf, zero_case))\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use rand::*;\n+    use super::*;\n+\n+    struct ConstRand(uint);\n+    impl Rand for ConstRand {\n+        fn rand<R: Rng>(_: &mut R) -> ConstRand {\n+            ConstRand(0)\n+        }\n+    }\n+\n+    #[test]\n+    fn test_rand_sample() {\n+        let mut rand_sample = RandSample::<ConstRand>;\n+\n+        assert_eq!(*rand_sample.sample(task_rng()), 0);\n+        assert_eq!(*rand_sample.ind_sample(task_rng()), 0);\n+    }\n+}"}]}