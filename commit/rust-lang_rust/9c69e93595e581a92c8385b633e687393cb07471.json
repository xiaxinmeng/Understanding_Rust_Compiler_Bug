{"sha": "9c69e93595e581a92c8385b633e687393cb07471", "node_id": "C_kwDOAAsO6NoAKDljNjllOTM1OTVlNTgxYTkyYzgzODViNjMzZTY4NzM5M2NiMDc0NzE", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-28T12:54:59Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-07T18:49:43Z"}, "message": "Rewrite `ExcessiveBools` to be a `LateLintPass` lint\n\nchangelog: [`fn_params_excessive_bools`] Make it possible to allow the lint at the method level", "tree": {"sha": "66d62bb1dfbcde5cd36c0937af262b41973e0e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d62bb1dfbcde5cd36c0937af262b41973e0e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c69e93595e581a92c8385b633e687393cb07471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c69e93595e581a92c8385b633e687393cb07471", "html_url": "https://github.com/rust-lang/rust/commit/9c69e93595e581a92c8385b633e687393cb07471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c69e93595e581a92c8385b633e687393cb07471/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "586bd3f735a7ec8c0ee03ab3515dfd8a89a31ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/586bd3f735a7ec8c0ee03ab3515dfd8a89a31ff4", "html_url": "https://github.com/rust-lang/rust/commit/586bd3f735a7ec8c0ee03ab3515dfd8a89a31ff4"}], "stats": {"total": 174, "additions": 90, "deletions": 84}, "files": [{"sha": "08164955c6a34c5fe0ce2ecff5bd17cf1fff33b5", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -1,8 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_ast::ast::{AssocItemKind, Extern, Fn, FnSig, Impl, Item, ItemKind, Trait, Ty, TyKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use clippy_utils::{get_parent_node, is_bool};\n+use rustc_hir::intravisit::FnKind;\n+use rustc_hir::{Body, FnDecl, HirId, Item, ItemKind, Node, Ty};\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n+use rustc_target::spec::abi::Abi;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -83,6 +86,12 @@ pub struct ExcessiveBools {\n     max_fn_params_bools: u64,\n }\n \n+#[derive(Eq, PartialEq, Debug)]\n+enum Kind {\n+    Struct,\n+    Fn,\n+}\n+\n impl ExcessiveBools {\n     #[must_use]\n     pub fn new(max_struct_bools: u64, max_fn_params_bools: u64) -> Self {\n@@ -92,21 +101,20 @@ impl ExcessiveBools {\n         }\n     }\n \n-    fn check_fn_sig(&self, cx: &EarlyContext<'_>, fn_sig: &FnSig, span: Span) {\n-        match fn_sig.header.ext {\n-            Extern::Implicit(_) | Extern::Explicit(_, _) => return,\n-            Extern::None => (),\n+    fn too_many_bools<'tcx>(&self, tys: impl Iterator<Item = &'tcx Ty<'tcx>>, kind: Kind) -> bool {\n+        if let Ok(bools) = tys.filter(|ty| is_bool(ty)).count().try_into() {\n+            (if Kind::Fn == kind {\n+                self.max_fn_params_bools\n+            } else {\n+                self.max_struct_bools\n+            }) < bools\n+        } else {\n+            false\n         }\n+    }\n \n-        let fn_sig_bools = fn_sig\n-            .decl\n-            .inputs\n-            .iter()\n-            .filter(|param| is_bool_ty(&param.ty))\n-            .count()\n-            .try_into()\n-            .unwrap();\n-        if self.max_fn_params_bools < fn_sig_bools {\n+    fn check_fn_sig(&self, cx: &LateContext<'_>, fn_decl: &FnDecl<'_>, span: Span) {\n+        if self.too_many_bools(fn_decl.inputs.iter(), Kind::Fn) {\n             span_lint_and_help(\n                 cx,\n                 FN_PARAMS_EXCESSIVE_BOOLS,\n@@ -121,55 +129,53 @@ impl ExcessiveBools {\n \n impl_lint_pass!(ExcessiveBools => [STRUCT_EXCESSIVE_BOOLS, FN_PARAMS_EXCESSIVE_BOOLS]);\n \n-fn is_bool_ty(ty: &Ty) -> bool {\n-    if let TyKind::Path(None, path) = &ty.kind {\n-        if let [name] = path.segments.as_slice() {\n-            return name.ident.name == sym::bool;\n-        }\n-    }\n-    false\n-}\n-\n-impl EarlyLintPass for ExcessiveBools {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+impl<'tcx> LateLintPass<'tcx> for ExcessiveBools {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if item.span.from_expansion() {\n             return;\n         }\n-        match &item.kind {\n-            ItemKind::Struct(variant_data, _) => {\n-                if item.attrs.iter().any(|attr| attr.has_name(sym::repr)) {\n-                    return;\n-                }\n+        if let ItemKind::Struct(variant_data, _) = &item.kind {\n+            if cx\n+                .tcx\n+                .hir()\n+                .attrs(item.hir_id())\n+                .iter()\n+                .any(|attr| attr.has_name(sym::repr))\n+            {\n+                return;\n+            }\n+\n+            if self.too_many_bools(variant_data.fields().iter().map(|field| field.ty), Kind::Struct) {\n+                span_lint_and_help(\n+                    cx,\n+                    STRUCT_EXCESSIVE_BOOLS,\n+                    item.span,\n+                    &format!(\"more than {} bools in a struct\", self.max_struct_bools),\n+                    None,\n+                    \"consider using a state machine or refactoring bools into two-variant enums\",\n+                )\n+            }\n+        }\n+    }\n \n-                if let Ok(struct_bools) = variant_data\n-                    .fields()\n-                    .iter()\n-                    .filter(|field| is_bool_ty(&field.ty))\n-                    .count()\n-                    .try_into() && self.max_struct_bools < struct_bools\n-                    {\n-                    span_lint_and_help(\n-                        cx,\n-                        STRUCT_EXCESSIVE_BOOLS,\n-                        item.span,\n-                        &format!(\"more than {} bools in a struct\", self.max_struct_bools),\n-                        None,\n-                        \"consider using a state machine or refactoring bools into two-variant enums\",\n-                    )\n-                    }\n-            },\n-            ItemKind::Impl(box Impl {\n-                of_trait: None, items, ..\n-            })\n-            | ItemKind::Trait(box Trait { items, .. }) => {\n-                for item in items {\n-                    if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n-                        self.check_fn_sig(cx, sig, item.span);\n-                    }\n-                }\n-            },\n-            ItemKind::Fn(box Fn { sig, .. }) => self.check_fn_sig(cx, sig, item.span),\n-            _ => (),\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &'tcx FnDecl<'tcx>,\n+        _: &'tcx Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if let Some(fn_header) = fn_kind.header()\n+            && fn_header.abi == Abi::Rust\n+            && if let Some(Node::Item(item)) = get_parent_node(cx.tcx, hir_id) {\n+                !matches!(item.kind, ItemKind::ExternCrate(..))\n+                } else {\n+                    true\n+            }\n+            && !span.from_expansion() {\n+            self.check_fn_sig(cx, fn_decl, span)\n         }\n     }\n }"}, {"sha": "e96075a2673f172275c377f60822911f3e49dec5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -793,7 +793,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(single_component_path_imports::SingleComponentPathImports));\n     let max_fn_params_bools = conf.max_fn_params_bools;\n     let max_struct_bools = conf.max_struct_bools;\n-    store.register_early_pass(move || {\n+    store.register_late_pass(move |_| {\n         Box::new(excessive_bools::ExcessiveBools::new(\n             max_struct_bools,\n             max_fn_params_bools,"}, {"sha": "996d4cb412344ae7e9ea01154ec3791cf6ffc0c7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -104,11 +104,10 @@ use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::ty::{contains_ty_adt_constructor_opaque, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{contains_return, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n+use clippy_utils::{contains_return, is_bool, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PrimTy, QPath, TraitItem, TraitItemKind};\n+use rustc_hir::{Expr, ExprKind, TraitItem, TraitItemKind};\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -3966,14 +3965,6 @@ impl OutType {\n     }\n }\n \n-fn is_bool(ty: &hir::Ty<'_>) -> bool {\n-    if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n-        matches!(path.res, Res::PrimTy(PrimTy::Bool))\n-    } else {\n-        false\n-    }\n-}\n-\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "da8c976c952c9d7b258f4eb11c7efc918b0f4e8b", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirIdMap;\n use rustc_hir::{\n     ArrayLen, BinOpKind, BindingAnnotation, Block, BodyId, Closure, Expr, ExprField, ExprKind, FnRetTy, GenericArg,\n     GenericArgs, Guard, HirId, InlineAsmOperand, Let, Lifetime, LifetimeName, ParamName, Pat, PatField, PatKind, Path,\n-    PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n+    PathSegment, PrimTy, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n@@ -1030,6 +1030,14 @@ pub fn hash_stmt(cx: &LateContext<'_>, s: &Stmt<'_>) -> u64 {\n     h.finish()\n }\n \n+pub fn is_bool(ty: &Ty<'_>) -> bool {\n+    if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+        matches!(path.res, Res::PrimTy(PrimTy::Bool))\n+    } else {\n+        false\n+    }\n+}\n+\n pub fn hash_expr(cx: &LateContext<'_>, e: &Expr<'_>) -> u64 {\n     let mut h = SpanlessHash::new(cx);\n     h.hash_expr(e);"}, {"sha": "0000896fdb6525d3492a2a828c478be9d4e5b677", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -66,7 +66,7 @@ pub mod visitors;\n pub use self::attrs::*;\n pub use self::check_proc_macro::{is_from_proc_macro, is_span_if, is_span_match};\n pub use self::hir_utils::{\n-    both, count_eq, eq_expr_value, hash_expr, hash_stmt, over, HirEqInterExpr, SpanlessEq, SpanlessHash,\n+    both, count_eq, eq_expr_value, hash_expr, hash_stmt, is_bool, over, HirEqInterExpr, SpanlessEq, SpanlessHash,\n };\n \n use core::ops::ControlFlow;"}, {"sha": "4fcd4d54ce628ea8361e180e2fb4e3f2c3e9794c", "filename": "tests/ui/fn_params_excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/tests%2Fui%2Ffn_params_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/tests%2Fui%2Ffn_params_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.rs?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -2,6 +2,7 @@\n #![allow(clippy::too_many_arguments)]\n \n extern \"C\" {\n+    // Should not lint, most of the time users have no control over extern function signatures\n     fn f(_: bool, _: bool, _: bool, _: bool);\n }\n "}, {"sha": "9d22d3851d2fdcba6d576954d61860501efb2816", "filename": "tests/ui/fn_params_excessive_bools.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c69e93595e581a92c8385b633e687393cb07471/tests%2Fui%2Ffn_params_excessive_bools.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c69e93595e581a92c8385b633e687393cb07471/tests%2Fui%2Ffn_params_excessive_bools.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.stderr?ref=9c69e93595e581a92c8385b633e687393cb07471", "patch": "@@ -1,5 +1,5 @@\n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:18:1\n+  --> $DIR/fn_params_excessive_bools.rs:19:1\n    |\n LL | fn g(_: bool, _: bool, _: bool, _: bool) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,31 +8,31 @@ LL | fn g(_: bool, _: bool, _: bool, _: bool) {}\n    = note: `-D clippy::fn-params-excessive-bools` implied by `-D warnings`\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:21:1\n+  --> $DIR/fn_params_excessive_bools.rs:22:1\n    |\n LL | fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:25:5\n+  --> $DIR/fn_params_excessive_bools.rs:31:5\n    |\n-LL |     fn f(_: bool, _: bool, _: bool, _: bool);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:30:5\n+  --> $DIR/fn_params_excessive_bools.rs:38:5\n    |\n-LL |     fn f(&self, _: bool, _: bool, _: bool, _: bool) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn f(_: bool, _: bool, _: bool, _: bool) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:42:5\n+  --> $DIR/fn_params_excessive_bools.rs:43:5\n    |\n LL | /     fn n(_: bool, _: u32, _: bool, _: Box<u32>, _: bool, _: bool) {\n LL | |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n@@ -42,7 +42,7 @@ LL | |     }\n    = help: consider refactoring bools into two-variant enums\n \n error: more than 3 bools in function parameters\n-  --> $DIR/fn_params_excessive_bools.rs:43:9\n+  --> $DIR/fn_params_excessive_bools.rs:44:9\n    |\n LL |         fn nn(_: bool, _: bool, _: bool, _: bool) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}