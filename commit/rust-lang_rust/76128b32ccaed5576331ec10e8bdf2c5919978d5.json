{"sha": "76128b32ccaed5576331ec10e8bdf2c5919978d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MTI4YjMyY2NhZWQ1NTc2MzMxZWMxMGU4YmRmMmM1OTE5OTc4ZDU=", "commit": {"author": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-07T04:05:47Z"}, "committer": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-07T04:05:47Z"}, "message": "Update documentation in windows::fs", "tree": {"sha": "faa33f4301b30206fd73604c91da457f91016cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faa33f4301b30206fd73604c91da457f91016cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76128b32ccaed5576331ec10e8bdf2c5919978d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76128b32ccaed5576331ec10e8bdf2c5919978d5", "html_url": "https://github.com/rust-lang/rust/commit/76128b32ccaed5576331ec10e8bdf2c5919978d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76128b32ccaed5576331ec10e8bdf2c5919978d5/comments", "author": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7df6dcd7399e0c49b6008ab3b82c979dba835a6", "html_url": "https://github.com/rust-lang/rust/commit/d7df6dcd7399e0c49b6008ab3b82c979dba835a6"}], "stats": {"total": 137, "additions": 127, "deletions": 10}, "files": [{"sha": "d49c884cb9f8ad341c20fd3213b82777580b1c4e", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 127, "deletions": 10, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/76128b32ccaed5576331ec10e8bdf2c5919978d5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76128b32ccaed5576331ec10e8bdf2c5919978d5/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=76128b32ccaed5576331ec10e8bdf2c5919978d5", "patch": "@@ -18,7 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{AsInnerMut, AsInner};\n \n-/// Windows-specific extensions to `File`\n+/// Windows-specific extensions to [`File`].\n+///\n+/// [`File`]: ../../../fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Seeks to a given position and reads a number of bytes.\n@@ -103,7 +105,9 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Windows-specific extensions to `OpenOptions`\n+/// Windows-specific extensions to [`OpenOptions`].\n+///\n+/// [`OpenOptions`]: ../../../fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n@@ -267,42 +271,155 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-/// Extension methods for `fs::Metadata` to access the raw fields contained\n+/// Extension methods for [`fs::Metadata`] to access the raw fields contained\n /// within.\n+///\n+/// The data members that this trait exposes correspond to the members\n+/// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n+///\n+/// [`fs::Metadata`]: ../../../fs/struct.Metadata.html\n+/// [`BY_HANDLE_FILE_INFORMATION`]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the value of the `dwFileAttributes` field of this metadata.\n     ///\n     /// This field contains the file system attribute information for a file\n-    /// or directory.\n+    /// or directory. For possible values and their descriptions, see\n+    /// [File Attribute Constants] in the Windows Dev Center.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let attributes = file.file_attributes();\n+    /// # }\n+    /// ```\n+    ///\n+    /// [File Attribute Constants]: https://msdn.microsoft.com/en-us/library/windows/desktop/gg258117.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_attributes(&self) -> u32;\n \n     /// Returns the value of the `ftCreationTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// If the underlying filesystem does not support creation time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let creation_time = file.creation_time();\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn creation_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastAccessTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was read\n+    /// from or written to. For a directory, the value specifies when\n+    /// the directory was created. For both files and directories, the\n+    /// specified date is correct, but the time of day is always set to\n+    /// midnight.\n+    ///\n+    /// If the underlying filesystem does not support last access time, the\n+    /// returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let last_access_time = file.last_access_time();\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_access_time(&self) -> u64;\n \n     /// Returns the value of the `ftLastWriteTime` field of this metadata.\n     ///\n-    /// The returned 64-bit value represents the number of 100-nanosecond\n-    /// intervals since January 1, 1601 (UTC).\n+    /// The returned 64-bit value is equivalent to a [`FILETIME`] struct,\n+    /// which represents the number of 100-nanosecond intervals since\n+    /// January 1, 1601 (UTC). The struct is automatically\n+    /// converted to a `u64` value, as that is the recommended way\n+    /// to use it.\n+    ///\n+    /// For a file, the value specifies the last time that a file was written\n+    /// to. For a directory, the structure specifies when the directory was\n+    /// created.\n+    ///\n+    /// If the underlying filesystem does not support the last write time\n+    /// time, the returned value is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let last_write_time = file.last_write_time();\n+    /// # }\n+    /// ```\n+    ///\n+    /// [`FILETIME`]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284.aspx\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn last_write_time(&self) -> u64;\n \n     /// Returns the value of the `nFileSize{High,Low}` fields of this\n     /// metadata.\n     ///\n     /// The returned value does not have meaning for directories.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut file = File::open(\"foo.txt\")?;\n+    /// let file_size = file.file_size();\n+    /// # }\n+    /// ```\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n     fn file_size(&self) -> u64;\n }"}]}