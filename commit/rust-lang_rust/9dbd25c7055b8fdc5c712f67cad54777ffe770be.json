{"sha": "9dbd25c7055b8fdc5c712f67cad54777ffe770be", "node_id": "C_kwDOAAsO6NoAKDlkYmQyNWM3MDU1YjhmZGM1YzcxMmY2N2NhZDU0Nzc3ZmZlNzcwYmU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-20T08:03:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-20T08:03:24Z"}, "message": "Rollup merge of #110448 - ripytide:master, r=cuviper\n\ncmp doc examples improvements\n\nMost changes are for stylistic consistency, with some changes to provide more clarity.", "tree": {"sha": "4d7c46188644b1ef4c97dab4c694e7eceea735fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7c46188644b1ef4c97dab4c694e7eceea735fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbd25c7055b8fdc5c712f67cad54777ffe770be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQPHMCRBK7hj4Ov3rIwAAbZMIAKI3qAs2YiQhSD3rQcMvLl6R\nh6p2YIMTHrsFCKzr2UHv+x6W3BmCC1DStNV2ZOT4dtflbZr3VyJ1uFomv/XE99hU\nkJJqwbdKLMLYOo8Y+dmgc9WkXm9QxwwpfOREVQFNr22+ucF24zYyB0An9BRVQszL\niVEc3UsPJAsUAItiUn9KawmOKTiJ8Y9Mi9WHoalQAac1u1gFJcPMhH2GHv8Wg3J6\nwI3W1R+xJpDp8oC6S6XzxmYw6oUq2mrrxphAUhgUhjrh1gvk3Y7Nifohc2U05pU+\nqHTaUEfBEm0isroZyMxj9T47QAScA40mglf2ApNMMBiiuXE2ah6M1f1y0Vmhg/E=\n=ZXNI\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d7c46188644b1ef4c97dab4c694e7eceea735fb\nparent 41a2fb251c4a8076dd4473de6db146080561be39\nparent f540548fa11854072c449cce937bf5d1200c4bac\nauthor Yuki Okushi <jtitor@2k36.org> 1681977804 +0900\ncommitter GitHub <noreply@github.com> 1681977804 +0900\n\nRollup merge of #110448 - ripytide:master, r=cuviper\n\ncmp doc examples improvements\n\nMost changes are for stylistic consistency, with some changes to provide more clarity.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbd25c7055b8fdc5c712f67cad54777ffe770be", "html_url": "https://github.com/rust-lang/rust/commit/9dbd25c7055b8fdc5c712f67cad54777ffe770be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbd25c7055b8fdc5c712f67cad54777ffe770be/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a2fb251c4a8076dd4473de6db146080561be39", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a2fb251c4a8076dd4473de6db146080561be39", "html_url": "https://github.com/rust-lang/rust/commit/41a2fb251c4a8076dd4473de6db146080561be39"}, {"sha": "f540548fa11854072c449cce937bf5d1200c4bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f540548fa11854072c449cce937bf5d1200c4bac", "html_url": "https://github.com/rust-lang/rust/commit/f540548fa11854072c449cce937bf5d1200c4bac"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "87ec35c040fbf4cd6eb192447a346806f346b40d", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9dbd25c7055b8fdc5c712f67cad54777ffe770be/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbd25c7055b8fdc5c712f67cad54777ffe770be/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=9dbd25c7055b8fdc5c712f67cad54777ffe770be", "patch": "@@ -321,14 +321,11 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// ```\n /// use std::cmp::Ordering;\n ///\n-/// let result = 1.cmp(&2);\n-/// assert_eq!(Ordering::Less, result);\n+/// assert_eq!(1.cmp(&2), Ordering::Less);\n ///\n-/// let result = 1.cmp(&1);\n-/// assert_eq!(Ordering::Equal, result);\n+/// assert_eq!(1.cmp(&1), Ordering::Equal);\n ///\n-/// let result = 2.cmp(&1);\n-/// assert_eq!(Ordering::Greater, result);\n+/// assert_eq!(2.cmp(&1), Ordering::Greater);\n /// ```\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -784,8 +781,8 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert_eq!(2, 1.max(2));\n-    /// assert_eq!(2, 2.max(2));\n+    /// assert_eq!(1.max(2), 2);\n+    /// assert_eq!(2.max(2), 2);\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n@@ -804,8 +801,8 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert_eq!(1, 1.min(2));\n-    /// assert_eq!(2, 2.min(2));\n+    /// assert_eq!(1.min(2), 1);\n+    /// assert_eq!(2.min(2), 2);\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n@@ -829,9 +826,9 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// # Examples\n     ///\n     /// ```\n-    /// assert!((-3).clamp(-2, 1) == -2);\n-    /// assert!(0.clamp(-2, 1) == 0);\n-    /// assert!(2.clamp(-2, 1) == 1);\n+    /// assert_eq!((-3).clamp(-2, 1), -2);\n+    /// assert_eq!(0.clamp(-2, 1), 0);\n+    /// assert_eq!(2.clamp(-2, 1), 1);\n     /// ```\n     #[must_use]\n     #[stable(feature = \"clamp\", since = \"1.50.0\")]\n@@ -1060,11 +1057,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 < 2.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 < 1.0;\n-    /// assert_eq!(result, false);\n+    /// assert_eq!(1.0 < 1.0, false);\n+    /// assert_eq!(1.0 < 2.0, true);\n+    /// assert_eq!(2.0 < 1.0, false);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1079,11 +1074,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 <= 2.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 <= 2.0;\n-    /// assert_eq!(result, true);\n+    /// assert_eq!(1.0 <= 1.0, true);\n+    /// assert_eq!(1.0 <= 2.0, true);\n+    /// assert_eq!(2.0 <= 1.0, false);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1097,11 +1090,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 1.0 > 2.0;\n-    /// assert_eq!(result, false);\n-    ///\n-    /// let result = 2.0 > 2.0;\n-    /// assert_eq!(result, false);\n+    /// assert_eq!(1.0 > 1.0, false);\n+    /// assert_eq!(1.0 > 2.0, false);\n+    /// assert_eq!(2.0 > 1.0, true);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1116,11 +1107,9 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let result = 2.0 >= 1.0;\n-    /// assert_eq!(result, true);\n-    ///\n-    /// let result = 2.0 >= 2.0;\n-    /// assert_eq!(result, true);\n+    /// assert_eq!(1.0 >= 1.0, true);\n+    /// assert_eq!(1.0 >= 2.0, false);\n+    /// assert_eq!(2.0 >= 1.0, true);\n     /// ```\n     #[inline]\n     #[must_use]\n@@ -1150,8 +1139,8 @@ pub macro PartialOrd($item:item) {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(1, cmp::min(1, 2));\n-/// assert_eq!(2, cmp::min(2, 2));\n+/// assert_eq!(cmp::min(1, 2), 1);\n+/// assert_eq!(cmp::min(2, 2), 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1170,8 +1159,11 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);\n-/// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n+/// let result = cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, 1);\n+///\n+/// let result = cmp::min_by(-2, 3, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, -2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1192,8 +1184,11 @@ pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);\n-/// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n+/// let result = cmp::min_by_key(-2, 1, |x: &i32| x.abs());\n+/// assert_eq!(result, 1);\n+///\n+/// let result = cmp::min_by_key(-2, 2, |x: &i32| x.abs());\n+/// assert_eq!(result, -2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1213,8 +1208,8 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(2, cmp::max(1, 2));\n-/// assert_eq!(2, cmp::max(2, 2));\n+/// assert_eq!(cmp::max(1, 2), 2);\n+/// assert_eq!(cmp::max(2, 2), 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1233,8 +1228,11 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n-/// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n+/// let result = cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs()));\n+/// assert_eq!(result, -2);\n+///\n+/// let result = cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())) ;\n+/// assert_eq!(result, 2);\n /// ```\n #[inline]\n #[must_use]\n@@ -1255,8 +1253,11 @@ pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// ```\n /// use std::cmp;\n ///\n-/// assert_eq!(cmp::max_by_key(-2, 1, |x: &i32| x.abs()), -2);\n-/// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n+/// let result = cmp::max_by_key(-2, 1, |x: &i32| x.abs());\n+/// assert_eq!(result, -2);\n+///\n+/// let result = cmp::max_by_key(-2, 2, |x: &i32| x.abs());\n+/// assert_eq!(result, 2);\n /// ```\n #[inline]\n #[must_use]"}]}