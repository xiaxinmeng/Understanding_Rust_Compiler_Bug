{"sha": "639377ed737b25830ec44dc6acf93467c980316a", "node_id": "C_kwDOAAsO6NoAKDYzOTM3N2VkNzM3YjI1ODMwZWM0NGRjNmFjZjkzNDY3Yzk4MDMxNmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T03:44:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-16T03:44:37Z"}, "message": "Auto merge of #107449 - saethlin:enable-copyprop, r=oli-obk\n\nEnable CopyProp\n\nr? `@tmiasko`\n\n`@rustbot` label +A-mir-opt", "tree": {"sha": "502140cda058f8f6875e8dee432bb81628fab7ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/502140cda058f8f6875e8dee432bb81628fab7ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/639377ed737b25830ec44dc6acf93467c980316a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/639377ed737b25830ec44dc6acf93467c980316a", "html_url": "https://github.com/rust-lang/rust/commit/639377ed737b25830ec44dc6acf93467c980316a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/639377ed737b25830ec44dc6acf93467c980316a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc7a676778706bde3b50ff6d4fe81e2955bd4847", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7a676778706bde3b50ff6d4fe81e2955bd4847", "html_url": "https://github.com/rust-lang/rust/commit/dc7a676778706bde3b50ff6d4fe81e2955bd4847"}, {"sha": "37a875cbdb5e111df378517bb0e45265af8879e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37a875cbdb5e111df378517bb0e45265af8879e3", "html_url": "https://github.com/rust-lang/rust/commit/37a875cbdb5e111df378517bb0e45265af8879e3"}], "stats": {"total": 609, "additions": 342, "deletions": 267}, "files": [{"sha": "f127b6275a21d881e056555d6c15b7fa17390e26", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -406,6 +406,7 @@ impl<'tcx> AdtDef<'tcx> {\n     }\n \n     /// Return the index of `VariantDef` given a variant id.\n+    #[inline]\n     pub fn variant_index_with_id(self, vid: DefId) -> VariantIdx {\n         self.variants()\n             .iter_enumerated()"}, {"sha": "c57ec137d4b778fafaa889e1a678f9c37834c26f", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -22,7 +22,7 @@ pub struct CopyProp;\n \n impl<'tcx> MirPass<'tcx> for CopyProp {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 4\n+        sess.mir_opt_level() >= 1\n     }\n \n     #[instrument(level = \"trace\", skip(self, tcx, body))]\n@@ -96,7 +96,7 @@ fn fully_moved_locals(ssa: &SsaLocals, body: &Body<'_>) -> BitSet<Local> {\n     fully_moved\n }\n \n-/// Utility to help performing subtitution of `*pattern` by `target`.\n+/// Utility to help performing substitution of `*pattern` by `target`.\n struct Replacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fully_moved: BitSet<Local>,"}, {"sha": "65c15d9c67497b2fc06414f6a9a88a64c82abe7b", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -19,6 +19,33 @@ pub struct SsaLocals {\n     copy_classes: IndexVec<Local, Local>,\n }\n \n+/// We often encounter MIR bodies with 1 or 2 basic blocks. In those cases, it's unnecessary to\n+/// actually compute dominators, we can just compare block indices because bb0 is always the first\n+/// block, and in any body all other blocks are always always dominated by bb0.\n+struct SmallDominators {\n+    inner: Option<Dominators<BasicBlock>>,\n+}\n+\n+trait DomExt {\n+    fn dominates(self, _other: Self, dominators: &SmallDominators) -> bool;\n+}\n+\n+impl DomExt for Location {\n+    fn dominates(self, other: Location, dominators: &SmallDominators) -> bool {\n+        if self.block == other.block {\n+            self.statement_index <= other.statement_index\n+        } else {\n+            dominators.dominates(self.block, other.block)\n+        }\n+    }\n+}\n+\n+impl SmallDominators {\n+    fn dominates(&self, dom: BasicBlock, node: BasicBlock) -> bool {\n+        if let Some(inner) = &self.inner { inner.dominates(dom, node) } else { dom < node }\n+    }\n+}\n+\n impl SsaLocals {\n     pub fn new<'tcx>(\n         tcx: TyCtxt<'tcx>,\n@@ -29,7 +56,9 @@ impl SsaLocals {\n         let assignment_order = Vec::new();\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n-        let dominators = body.basic_blocks.dominators();\n+        let dominators =\n+            if body.basic_blocks.len() > 2 { Some(body.basic_blocks.dominators()) } else { None };\n+        let dominators = SmallDominators { inner: dominators };\n         let mut visitor = SsaVisitor { assignments, assignment_order, dominators };\n \n         for (local, decl) in body.local_decls.iter_enumerated() {\n@@ -41,8 +70,14 @@ impl SsaLocals {\n             }\n         }\n \n-        for (bb, data) in traversal::reverse_postorder(body) {\n-            visitor.visit_basic_block_data(bb, data);\n+        if body.basic_blocks.len() > 2 {\n+            for (bb, data) in traversal::reverse_postorder(body) {\n+                visitor.visit_basic_block_data(bb, data);\n+            }\n+        } else {\n+            for (bb, data) in body.basic_blocks.iter_enumerated() {\n+                visitor.visit_basic_block_data(bb, data);\n+            }\n         }\n \n         for var_debug_info in &body.var_debug_info {\n@@ -139,7 +174,7 @@ enum LocationExtended {\n }\n \n struct SsaVisitor {\n-    dominators: Dominators<BasicBlock>,\n+    dominators: SmallDominators,\n     assignments: IndexVec<Local, Set1<LocationExtended>>,\n     assignment_order: Vec<Local>,\n }"}, {"sha": "1d8209e8ea54e64f83d98694727d7c6d8f7e3c14", "filename": "tests/codegen/move-operands.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fmove-operands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fmove-operands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmove-operands.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes -Zmir-enable-passes=+DestinationPropagation\n+// compile-flags: -C no-prepopulate-passes -Zmir-enable-passes=+DestinationPropagation,-CopyProp\n \n #![crate_type = \"lib\"]\n "}, {"sha": "faac7566a0c493e2be45b9115fd1450cb35709ce", "filename": "tests/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 83, "deletions": 83, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -116,150 +116,150 @@ extern \"platform-intrinsic\" {\n     fn simd_saturating_sub<T>(x: T, y: T) -> T;\n }\n \n-// NOTE(eddyb) `%{{x|_3}}` is used because on some targets (e.g. WASM)\n+// NOTE(eddyb) `%{{x|1}}` is used because on some targets (e.g. WASM)\n // SIMD vectors are passed directly, resulting in `%x` being a vector,\n // while on others they're passed indirectly, resulting in `%x` being\n-// a pointer to a vector, and `%_3` a vector loaded from that pointer.\n+// a pointer to a vector, and `%1` a vector loaded from that pointer.\n // This is controlled by the target spec option `simd_types_indirect`.\n-// The same applies to `%{{y|_4}}` as well.\n+// The same applies to `%{{y|2}}` as well.\n \n // CHECK-LABEL: @sadd_i8x2\n #[no_mangle]\n pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{x|_3}}, <2 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{x|1}}, <2 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x4\n #[no_mangle]\n pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{x|_3}}, <4 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{x|1}}, <4 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x8\n #[no_mangle]\n pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{x|_3}}, <8 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{x|1}}, <8 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x16\n #[no_mangle]\n pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{x|_3}}, <16 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{x|1}}, <16 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x32\n #[no_mangle]\n pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{x|_3}}, <32 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{x|1}}, <32 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x64\n #[no_mangle]\n pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{x|_3}}, <64 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{x|1}}, <64 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x2\n #[no_mangle]\n pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{x|_3}}, <2 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{x|1}}, <2 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x4\n #[no_mangle]\n pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{x|_3}}, <4 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{x|1}}, <4 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x8\n #[no_mangle]\n pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{x|_3}}, <8 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{x|1}}, <8 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x16\n #[no_mangle]\n pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{x|_3}}, <16 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{x|1}}, <16 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x32\n #[no_mangle]\n pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{x|_3}}, <32 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{x|1}}, <32 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x2\n #[no_mangle]\n pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{x|_3}}, <2 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{x|1}}, <2 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x4\n #[no_mangle]\n pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{x|_3}}, <4 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{x|1}}, <4 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x8\n #[no_mangle]\n pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{x|_3}}, <8 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{x|1}}, <8 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x16\n #[no_mangle]\n pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{x|_3}}, <16 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{x|1}}, <16 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x2\n #[no_mangle]\n pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{x|_3}}, <2 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{x|1}}, <2 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x4\n #[no_mangle]\n pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{x|_3}}, <4 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{x|1}}, <4 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x8\n #[no_mangle]\n pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{x|_3}}, <8 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{x|1}}, <8 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x2\n #[no_mangle]\n pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{x|_3}}, <2 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{x|1}}, <2 x i128> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x4\n #[no_mangle]\n pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{x|_3}}, <4 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{x|1}}, <4 x i128> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n@@ -268,140 +268,140 @@ pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @uadd_u8x2\n #[no_mangle]\n pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{x|_3}}, <2 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{x|1}}, <2 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x4\n #[no_mangle]\n pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{x|_3}}, <4 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{x|1}}, <4 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x8\n #[no_mangle]\n pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{x|_3}}, <8 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{x|1}}, <8 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x16\n #[no_mangle]\n pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{x|_3}}, <16 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{x|1}}, <16 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x32\n #[no_mangle]\n pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{x|_3}}, <32 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{x|1}}, <32 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x64\n #[no_mangle]\n pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{x|_3}}, <64 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{x|1}}, <64 x i8> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x2\n #[no_mangle]\n pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{x|_3}}, <2 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{x|1}}, <2 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x4\n #[no_mangle]\n pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{x|_3}}, <4 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{x|1}}, <4 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x8\n #[no_mangle]\n pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{x|_3}}, <8 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{x|1}}, <8 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x16\n #[no_mangle]\n pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{x|_3}}, <16 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{x|1}}, <16 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x32\n #[no_mangle]\n pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{x|_3}}, <32 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{x|1}}, <32 x i16> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x2\n #[no_mangle]\n pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{x|_3}}, <2 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{x|1}}, <2 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x4\n #[no_mangle]\n pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{x|_3}}, <4 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{x|1}}, <4 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x8\n #[no_mangle]\n pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{x|_3}}, <8 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{x|1}}, <8 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x16\n #[no_mangle]\n pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{x|_3}}, <16 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{x|1}}, <16 x i32> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x2\n #[no_mangle]\n pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{x|_3}}, <2 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{x|1}}, <2 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x4\n #[no_mangle]\n pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{x|_3}}, <4 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{x|1}}, <4 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x8\n #[no_mangle]\n pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{x|_3}}, <8 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{x|1}}, <8 x i64> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x2\n #[no_mangle]\n pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{x|_3}}, <2 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{x|1}}, <2 x i128> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x4\n #[no_mangle]\n pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{x|_3}}, <4 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{x|1}}, <4 x i128> %{{y|2}})\n     simd_saturating_add(x, y)\n }\n \n@@ -412,140 +412,140 @@ pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n // CHECK-LABEL: @ssub_i8x2\n #[no_mangle]\n pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{x|_3}}, <2 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{x|1}}, <2 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x4\n #[no_mangle]\n pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{x|_3}}, <4 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{x|1}}, <4 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x8\n #[no_mangle]\n pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{x|_3}}, <8 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{x|1}}, <8 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x16\n #[no_mangle]\n pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{x|_3}}, <16 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{x|1}}, <16 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x32\n #[no_mangle]\n pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{x|_3}}, <32 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{x|1}}, <32 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x64\n #[no_mangle]\n pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{x|_3}}, <64 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{x|1}}, <64 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x2\n #[no_mangle]\n pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{x|_3}}, <2 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{x|1}}, <2 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x4\n #[no_mangle]\n pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{x|_3}}, <4 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{x|1}}, <4 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x8\n #[no_mangle]\n pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{x|_3}}, <8 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{x|1}}, <8 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x16\n #[no_mangle]\n pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{x|_3}}, <16 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{x|1}}, <16 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x32\n #[no_mangle]\n pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{x|_3}}, <32 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{x|1}}, <32 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x2\n #[no_mangle]\n pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{x|_3}}, <2 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{x|1}}, <2 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x4\n #[no_mangle]\n pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{x|_3}}, <4 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{x|1}}, <4 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x8\n #[no_mangle]\n pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{x|_3}}, <8 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{x|1}}, <8 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x16\n #[no_mangle]\n pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{x|_3}}, <16 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{x|1}}, <16 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x2\n #[no_mangle]\n pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{x|_3}}, <2 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{x|1}}, <2 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x4\n #[no_mangle]\n pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{x|_3}}, <4 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{x|1}}, <4 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x8\n #[no_mangle]\n pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{x|_3}}, <8 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{x|1}}, <8 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x2\n #[no_mangle]\n pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{x|_3}}, <2 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{x|1}}, <2 x i128> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x4\n #[no_mangle]\n pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{x|_3}}, <4 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{x|1}}, <4 x i128> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n@@ -554,139 +554,139 @@ pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @usub_u8x2\n #[no_mangle]\n pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{x|_3}}, <2 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{x|1}}, <2 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x4\n #[no_mangle]\n pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{x|_3}}, <4 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{x|1}}, <4 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x8\n #[no_mangle]\n pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{x|_3}}, <8 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{x|1}}, <8 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x16\n #[no_mangle]\n pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{x|_3}}, <16 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{x|1}}, <16 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x32\n #[no_mangle]\n pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{x|_3}}, <32 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{x|1}}, <32 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x64\n #[no_mangle]\n pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{x|_3}}, <64 x i8> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{x|1}}, <64 x i8> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x2\n #[no_mangle]\n pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{x|_3}}, <2 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{x|1}}, <2 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x4\n #[no_mangle]\n pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{x|_3}}, <4 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{x|1}}, <4 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x8\n #[no_mangle]\n pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{x|_3}}, <8 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{x|1}}, <8 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x16\n #[no_mangle]\n pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{x|_3}}, <16 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{x|1}}, <16 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x32\n #[no_mangle]\n pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{x|_3}}, <32 x i16> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{x|1}}, <32 x i16> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x2\n #[no_mangle]\n pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{x|_3}}, <2 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{x|1}}, <2 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x4\n #[no_mangle]\n pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{x|_3}}, <4 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{x|1}}, <4 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x8\n #[no_mangle]\n pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{x|_3}}, <8 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{x|1}}, <8 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x16\n #[no_mangle]\n pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{x|_3}}, <16 x i32> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{x|1}}, <16 x i32> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x2\n #[no_mangle]\n pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{x|_3}}, <2 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{x|1}}, <2 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x4\n #[no_mangle]\n pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{x|_3}}, <4 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{x|1}}, <4 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x8\n #[no_mangle]\n pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{x|_3}}, <8 x i64> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{x|1}}, <8 x i64> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x2\n #[no_mangle]\n pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{x|_3}}, <2 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{x|1}}, <2 x i128> %{{y|2}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x4\n #[no_mangle]\n pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{x|_3}}, <4 x i128> %{{y|_4}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{x|1}}, <4 x i128> %{{y|2}})\n     simd_saturating_sub(x, y)\n }"}, {"sha": "ea24569bd10c16698fe4a62ffa3d76266c5eb0ec", "filename": "tests/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -26,16 +26,16 @@ extern \"platform-intrinsic\" {\n     fn simd_bitmask<T, U>(x: T) -> U;\n }\n \n-// NOTE(eddyb) `%{{x|_2}}` is used because on some targets (e.g. WASM)\n+// NOTE(eddyb) `%{{x|1}}` is used because on some targets (e.g. WASM)\n // SIMD vectors are passed directly, resulting in `%x` being a vector,\n // while on others they're passed indirectly, resulting in `%x` being\n-// a pointer to a vector, and `%_2` a vector loaded from that pointer.\n+// a pointer to a vector, and `%1` a vector loaded from that pointer.\n // This is controlled by the target spec option `simd_types_indirect`.\n \n // CHECK-LABEL: @bitmask_int\n #[no_mangle]\n pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{x|_2}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{x|1}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -45,7 +45,7 @@ pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n // CHECK-LABEL: @bitmask_uint\n #[no_mangle]\n pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{x|_2}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{x|1}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -55,7 +55,7 @@ pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n // CHECK-LABEL: @bitmask_int16\n #[no_mangle]\n pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{x|_2}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{x|1|2}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n     // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n     // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n     // CHECK-NOT: zext"}, {"sha": "80583dec195243723c7a8541859df2324d3cadd8", "filename": "tests/codegen/simd-intrinsic/simd-intrinsic-generic-extract-insert.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-extract-insert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-extract-insert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-extract-insert.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -21,27 +21,27 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @extract_m\n #[no_mangle]\n pub unsafe fn extract_m(v: M, i: u32) -> f32  {\n-    // CHECK: extractelement <4 x float> %{{v|_3}}, i32 %i\n+    // CHECK: extractelement <4 x float> %{{v|1|2}}, i32 %i\n     simd_extract(v, i)\n }\n \n // CHECK-LABEL: @extract_s\n #[no_mangle]\n pub unsafe fn extract_s(v: S<4>, i: u32) -> f32  {\n-    // CHECK: extractelement <4 x float> %{{v|_3}}, i32 %i\n+    // CHECK: extractelement <4 x float> %{{v|1|2}}, i32 %i\n     simd_extract(v, i)\n }\n \n // CHECK-LABEL: @insert_m\n #[no_mangle]\n pub unsafe fn insert_m(v: M, i: u32, j: f32) -> M  {\n-    // CHECK: insertelement <4 x float> %{{v|_4}}, float %j, i32 %i\n+    // CHECK: insertelement <4 x float> %{{v|1|2}}, float %j, i32 %i\n     simd_insert(v, i, j)\n }\n \n // CHECK-LABEL: @insert_s\n #[no_mangle]\n pub unsafe fn insert_s(v: S<4>, i: u32, j: f32) -> S<4>  {\n-    // CHECK: insertelement <4 x float> %{{v|_4}}, float %j, i32 %i\n+    // CHECK: insertelement <4 x float> %{{v|1|2}}, float %j, i32 %i\n     simd_insert(v, i, j)\n }"}, {"sha": "7c77398dfcce5f02bc992434be8cb2554fefc174", "filename": "tests/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-transmute-array.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -21,23 +21,20 @@ pub struct U(f32, f32, f32, f32);\n // CHECK-LABEL: @build_array_s\n #[no_mangle]\n pub fn build_array_s(x: [f32; 4]) -> S<4> {\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     S::<4>(x)\n }\n \n // CHECK-LABEL: @build_array_t\n #[no_mangle]\n pub fn build_array_t(x: [f32; 4]) -> T {\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     T(x)\n }\n \n // CHECK-LABEL: @build_array_u\n #[no_mangle]\n pub fn build_array_u(x: [f32; 4]) -> U {\n-    // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     // CHECK: call void @llvm.memcpy.{{.+}}({{.*}}, i{{[0-9]+}} 16, i1 false)\n     unsafe { std::mem::transmute(x) }\n }"}, {"sha": "f2333777391f1e87f821072c501167b400bf44eb", "filename": "tests/codegen/simd_arith_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd_arith_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fcodegen%2Fsimd_arith_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsimd_arith_offset.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -21,6 +21,6 @@ pub struct Simd<T, const LANES: usize>([T; LANES]);\n // CHECK-LABEL: smoke\n #[no_mangle]\n pub fn smoke(ptrs: SimdConstPtr<u8, 8>, offsets: Simd<usize, 8>) -> SimdConstPtr<u8, 8> {\n-    // CHECK: getelementptr i8, <8 x {{i8\\*|ptr}}> %_3, <8 x i64> %_4\n+    // CHECK: getelementptr i8, <8 x {{i8\\*|ptr}}> %1, <8 x i64> %2\n     unsafe { simd_arith_offset(ptrs, offsets) }\n }"}, {"sha": "6ca73ffdde280fd1200a3159a1af98dc3a80273c", "filename": "tests/mir-opt/copy-prop/custom_move_arg.f.CopyProp.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.f.CopyProp.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: NotCopy) -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/custom_move_arg.rs:+0:19: +0:19\n+      let mut _2: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: NotCopy;                 // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<NotCopy>(move _1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n++         _0 = opaque::<NotCopy>(_1) -> bb1; // scope 0 at $DIR/custom_move_arg.rs:+3:9: +3:41\n+                                           // mir::Constant\n+                                           // + span: $DIR/custom_move_arg.rs:15:24: 15:30\n+                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<NotCopy>(_3) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n++         _0 = opaque::<NotCopy>(_1) -> bb2; // scope 0 at $DIR/custom_move_arg.rs:+7:9: +7:35\n+                                           // mir::Constant\n+                                           // + span: $DIR/custom_move_arg.rs:19:24: 19:30\n+                                           // + literal: Const { ty: fn(NotCopy) {opaque::<NotCopy>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/custom_move_arg.rs:+10:9: +10:17\n+      }\n+  }\n+  "}, {"sha": "4a591146e619f950ea5c7f2dd6de55fe0c18873b", "filename": "tests/mir-opt/copy-prop/custom_move_arg.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcustom_move_arg.rs?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -0,0 +1,32 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+struct NotCopy(bool);\n+\n+// EMIT_MIR custom_move_arg.f.CopyProp.diff\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(_1: NotCopy) {\n+    mir!({\n+        let _2 = _1;\n+        Call(RET, bb1, opaque(Move(_1)))\n+    }\n+    bb1 = {\n+        let _3 = Move(_2);\n+        Call(RET, bb2, opaque(_3))\n+    }\n+    bb2 = {\n+        Return()\n+    })\n+}\n+\n+#[inline(never)]\n+fn opaque<T>(_t: T) {}\n+\n+fn main() {\n+    f(NotCopy(true));\n+    println!(\"hi\");\n+}"}, {"sha": "33122f465fe4df3d47a3966db6e7da5dc8dc3b0e", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -10,19 +10,21 @@\n       scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow.rs:7:13: 7:47\n           debug self => _1;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           debug other => _2;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _3: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _4: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          let mut _5: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _3: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n-          assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _3 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n       }\n   \n       bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           return;                          // scope 0 at $DIR/inherit_overflow.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "01f5052b6528702ff4b99e127b6222a8f5c978c3", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -7,29 +7,27 @@\n       let mut _2: std::pin::Pin<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>; // in scope 0 at $DIR/inline_generator.rs:+1:14: +1:32\n       let mut _3: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:23: +1:31\n       let mut _4: [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 0 at $DIR/inline_generator.rs:+1:28: +1:31\n-+     let mut _7: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++     let mut _5: bool;                    // in scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n       scope 1 {\n           debug _r => _1;                  // in scope 1 at $DIR/inline_generator.rs:+1:9: +1:11\n       }\n +     scope 2 (inlined g) {                // at $DIR/inline_generator.rs:9:28: 9:31\n +     }\n +     scope 3 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new) { // at $DIR/inline_generator.rs:9:14: 9:32\n +         debug pointer => _3;             // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         let mut _5: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 3 at $SRC_DIR/core/src/pin.rs:LL:COL\n +         scope 4 {\n +             scope 5 (inlined Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>::new_unchecked) { // at $SRC_DIR/core/src/pin.rs:LL:COL\n-+                 debug pointer => _5;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+                 let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n++                 debug pointer => _3;     // in scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n +             }\n +         }\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:33: 9:46\n-+         debug a => _7;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n-+         let mut _8: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         let mut _9: u32;                 // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         debug a => _5;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n++         let mut _6: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         let mut _7: u32;                 // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _8: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _9: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         let mut _10: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         let mut _11: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         let mut _12: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +     }\n   \n       bb0: {\n@@ -64,28 +62,22 @@\n -     }\n - \n -     bb2: {\n-+         StorageLive(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         _5 = move _3;                    // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         _6 = move _5;                    // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _6 }; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n-+         StorageDead(_5);                 // scope 4 at $SRC_DIR/core/src/pin.rs:LL:COL\n++         _2 = Pin::<&mut [generator@$DIR/inline_generator.rs:15:5: 15:8]> { pointer: move _3 }; // scope 5 at $SRC_DIR/core/src/pin.rs:LL:COL\n           StorageDead(_3);                 // scope 0 at $DIR/inline_generator.rs:+1:31: +1:32\n -         _1 = <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume(move _2, const false) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline_generator.rs:+1:14: +1:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_generator.rs:9:33: 9:39\n -                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n-+         _7 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n-+         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         _9 = discriminant((*_10));       // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         switchInt(move _9) -> [0: bb3, 1: bb8, 3: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageLive(_5);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         _5 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         _8 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _7 = discriminant((*_8));        // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         switchInt(move _7) -> [0: bb3, 1: bb8, 3: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n +     bb1: {\n-+         StorageDead(_7);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n++         StorageDead(_5);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n           StorageDead(_2);                 // scope 0 at $DIR/inline_generator.rs:+1:45: +1:46\n           StorageDead(_4);                 // scope 0 at $DIR/inline_generator.rs:+1:46: +1:47\n           _0 = const ();                   // scope 0 at $DIR/inline_generator.rs:+0:11: +2:2\n@@ -99,33 +91,33 @@\n +     }\n + \n +     bb3: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         switchInt(_7) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         StorageLive(_6);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         switchInt(_5) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _8 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n++         _6 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n +         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb5: {\n-+         _8 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n++         _6 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n +         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb6: {\n-+         _1 = GeneratorState::<i32, bool>::Yielded(move _8); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         _11 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n-+         discriminant((*_11)) = 3;        // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _1 = GeneratorState::<i32, bool>::Yielded(move _6); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         discriminant((*_9)) = 3;         // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n-+         _1 = GeneratorState::<i32, bool>::Complete(_7); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         _12 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n-+         discriminant((*_12)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         StorageLive(_6);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageDead(_6);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n++         _1 = GeneratorState::<i32, bool>::Complete(_5); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n++         discriminant((*_10)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41\n +     }\n + "}, {"sha": "6db8e4d2664723cb08ef05acb1e33e088a974641", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -26,13 +26,12 @@\n       scope 3 (inlined core::num::<impl u32>::rotate_right) { // at $DIR/issue_101973.rs:14:18: 14:58\n           debug self => _4;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           debug n => _6;                   // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          let mut _15: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-          let mut _16: u32;                // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n       }\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n           StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n           StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n           _14 = CheckedShr(_1, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n@@ -62,13 +61,16 @@\n           StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n           _4 = BitOr(const 0_u32, move _12); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n           StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           _10 = CheckedShr(_1, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           assert(!move (_10.1: bool), \"attempt to shift right by `{}`, which would overflow\", const 8_i32) -> bb1; // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n       }\n   \n       bb4: {\n+          StorageDead(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n+          StorageDead(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:57: +1:58\n           _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageDead(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:64: +1:65\n           _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue_101973.rs:+1:5: +1:72"}, {"sha": "291fc5063d28ce75a16988ec82e9c4c02fd9f429", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -5,15 +5,14 @@ fn num_to_digit(_1: char) -> u32 {\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n     let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n     let mut _3: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n-    let mut _9: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:12: 14:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => _3;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _4: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let _5: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let mut _6: char;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         scope 2 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n             debug self => _4;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _6: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:42: 14:50\n@@ -29,17 +28,15 @@ fn num_to_digit(_1: char) -> u32 {\n         StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n         StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _6 = _1;                         // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _5 = char::methods::<impl char>::to_digit(move _6, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _5 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n-        _2 = char::methods::<impl char>::to_digit(move _1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+        _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n                                          // mir::Constant\n                                          // + span: $DIR/issue_59352.rs:14:30: 14:38\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n@@ -61,12 +58,11 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb5: {\n         _4 = &_5;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _9 = discriminant((*_4));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        _6 = discriminant((*_4));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23\n-        switchInt(move _9) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n+        switchInt(move _6) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n \n     bb6: {"}, {"sha": "cfcd43093c079c9dd1c62f933802ad14daed2aaf", "filename": "tests/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 28, "deletions": 36, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -12,18 +12,18 @@\n       let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n       let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n       let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+      let mut _16: i32;                    // in scope 0 at $SRC_DIR/core/src/result.rs:LL:COL\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           scope 2 {\n               scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:25:8: 25:10\n                   debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                  let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n-                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n                       scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                          debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -38,15 +38,13 @@\n           debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let _12: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          let mut _13: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           scope 6 {\n               debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n           scope 7 {\n-              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+              debug e => _12;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           }\n       }\n   \n@@ -55,11 +53,15 @@\n           StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n           _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n+          StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          StorageLive(_12);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n       bb1: {\n+          StorageDead(_12);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n@@ -85,16 +87,16 @@\n           _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _0 = Result::<i32, i32>::Err(move _17); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10\n+          _14 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _0 = Result::<i32, i32>::Err(move _15); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n@@ -103,16 +105,11 @@\n       }\n   \n       bb5: {\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _14 = Result::<Infallible, i32>::Err(move _15); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _14); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _12 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _13 = Result::<Infallible, i32>::Err(move _12); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Break(move _13); // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n           goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   \n@@ -121,13 +118,8 @@\n       }\n   \n       bb7: {\n-          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _12); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _3 = ControlFlow::<Result<Infallible, i32>, i32>::Continue(move _11); // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n           goto -> bb1;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   }"}, {"sha": "f908e8dd0c1f83ea66cb186e8cfd4cbea9590896", "filename": "tests/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals-final.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -34,15 +34,10 @@\n       }\n   \n       bb2: {\n-          StorageLive(_6);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n           _6 = (((_1.0: std::option::Option<u8>) as Some).0: u8); // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+1:18: +1:19\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n--         StorageLive(_8);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:13\n--         _8 = _6;                         // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:13\n--         _7 = Gt(move _8, const 42_u8);   // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n--         StorageDead(_8);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:19: +2:20\n+-         _7 = Gt(_6, const 42_u8);        // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+2:12: +2:20\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify_locals_fixedpoint.rs:+4:9: +4:10\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+5:5: +5:6\n           goto -> bb3;                     // scope 0 at $DIR/simplify_locals_fixedpoint.rs:+1:5: +5:6\n       }\n   "}, {"sha": "3bb0358ffe3e610569151c8294af15a727e2c89e", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/639377ed737b25830ec44dc6acf93467c980316a/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=639377ed737b25830ec44dc6acf93467c980316a", "patch": "@@ -29,6 +29,14 @@\n       let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _31: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _32: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _37: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _38: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _43: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _44: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _49: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+      let mut _50: &usize;                 // in scope 0 at $SRC_DIR/core/src/cmp.rs:LL:COL\n       scope 1 {\n           debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n           debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n@@ -39,13 +47,11 @@\n               debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _31: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _32: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _31;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _32;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _33: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _34: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n@@ -55,13 +61,11 @@\n               debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _35: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _36: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _37;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _38;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _35;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _36;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _39: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _40: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n@@ -71,13 +75,11 @@\n               debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _41: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _42: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _43: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _44: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _43;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _44;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _41;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _42;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _45: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _46: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n@@ -87,13 +89,11 @@\n               debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _47: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               let mut _48: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _49: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _50: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug self => _49;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-                 debug other => _50;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug self => _47;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++                 debug other => _48;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _51: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                   let mut _52: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n@@ -121,23 +121,23 @@\n           StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _29 = _31;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _30 = _32;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_31);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _31 = _29;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_32);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _32 = _30;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _33 = (*_31);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _33 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _34 = (*_32);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _34 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _8 = Le(move _33, move _34);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_34);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_32);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_31);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n@@ -158,23 +158,23 @@\n           StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _37 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _35 = _37;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _36 = _38;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _35 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _36 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_37);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _37 = _35;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_38);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _38 = _36;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _39 = (*_37);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _39 = (*_35);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _40 = (*_38);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _40 = (*_36);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _17 = Le(move _39, move _40);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_40);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_38);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_37);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n@@ -206,23 +206,23 @@\n           StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _43 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _41 = _43;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _44 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _42 = _44;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _41 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _42 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_43);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _43 = _41;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_44);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _44 = _42;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _45 = (*_43);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _45 = (*_41);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _46 = (*_44);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _46 = (*_42);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _12 = Le(move _45, move _46);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_46);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_44);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_43);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n@@ -245,23 +245,23 @@\n           StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _49 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _47 = _49;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _50 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _48 = _50;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _47 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _48 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_49);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _49 = _47;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageLive(_50);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _50 = _48;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _51 = (*_49);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _51 = (*_47);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageLive(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _52 = (*_50);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _52 = (*_48);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           _21 = Le(move _51, move _52);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_52);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_50);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         StorageDead(_49);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n           StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76"}]}