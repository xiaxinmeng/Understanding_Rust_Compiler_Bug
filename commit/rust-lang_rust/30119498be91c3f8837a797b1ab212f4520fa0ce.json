{"sha": "30119498be91c3f8837a797b1ab212f4520fa0ce", "node_id": "C_kwDOAAsO6NoAKDMwMTE5NDk4YmU5MWMzZjg4MzdhNzk3YjFhYjIxMmY0NTIwZmEwY2U", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2023-05-01T13:46:31Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2023-05-01T16:20:45Z"}, "message": "Make x.py work again in most (all?) cases\n\nWrap all of x.py in `if __name__ == '__main__':` to avoid problems with `multiprocessing`\nMake the pool sizing better", "tree": {"sha": "c0a89111a5d9d5c61cb3a6aa0c94e7c8fe202740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a89111a5d9d5c61cb3a6aa0c94e7c8fe202740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30119498be91c3f8837a797b1ab212f4520fa0ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEECtuvMkQcAKCG3qpZknCbiLuPE+oFAmRP5uAACgkQknCbiLuP\nE+owMw//Th5Mg1LzTbp3Y8Sdn5xMZRpZBZYGiX2zKlKJmuSnRpaMRw1bNf+vaEAG\nnS3pFeXxtKPe9jNbHW2dV06YPMMjD5TSLGEAVrjtGv+OkJwXHaKzoZCRN8yCk86M\nDe8Riosc3/PkfZhDLZ5Wsh8ZaKl5C0iKg/ctuX+4Yguf2xDEXDwCQ841noXmWHqG\nr+3OMTvg8ig1Fn4Si05SEMbr1Tif7aNP38rurMMU5NTemOlUzGqsnoQuer1LcfmE\nJWQIjt42fQuENI5J24MVwJnYD8nPDiH+irnopA97cu6Wti0MifI1HQQ0mAgLm/xp\nGV9e3nXqbMNi3Q0txUmIJ7+K8L1PTHGU5K8MK+4F88AgUo5MBJpD5mgRUN8KO0xH\nA9wRSLKEUSxIyJ10c2uHoBCYI44/obLU8ade35WFwtnfbXzFfFjpU1Pz1VLLb3ZL\nXxirrXeyzXrvR6VHZqSyww06XOUamY4IDonBkMcG3BqTIHJFUrscl7h0532d/2ua\nCS2qA6bJ2LWq3L6z9ZX/1c1y6hZ3aofs7N/XJ33P8ki+NOSGA1MBnEb1an0bVpw7\nBE3k4fScovgEfwxPDEq0J0166WvaCQ+EZ4K4ppp6KqbyvawZtINKA20TbmbOE+TT\nW7RztiHudROMWHJDPtZaG+VRVcH8tZqhEjyjcYK4fpvc8fLvb9U=\n=Ku5F\n-----END PGP SIGNATURE-----", "payload": "tree c0a89111a5d9d5c61cb3a6aa0c94e7c8fe202740\nparent 4b87ed9d0f18166a26aadb5289bac004e058b90f\nauthor Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1682948791 +0000\ncommitter Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1682958045 +0000\n\nMake x.py work again in most (all?) cases\n\nWrap all of x.py in `if __name__ == '__main__':` to avoid problems with `multiprocessing`\nMake the pool sizing better\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30119498be91c3f8837a797b1ab212f4520fa0ce", "html_url": "https://github.com/rust-lang/rust/commit/30119498be91c3f8837a797b1ab212f4520fa0ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30119498be91c3f8837a797b1ab212f4520fa0ce/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b87ed9d0f18166a26aadb5289bac004e058b90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b87ed9d0f18166a26aadb5289bac004e058b90f", "html_url": "https://github.com/rust-lang/rust/commit/4b87ed9d0f18166a26aadb5289bac004e058b90f"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "f22cdad7df411adba3e5a5686658334d46513f7b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30119498be91c3f8837a797b1ab212f4520fa0ce/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/30119498be91c3f8837a797b1ab212f4520fa0ce/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=30119498be91c3f8837a797b1ab212f4520fa0ce", "patch": "@@ -28,6 +28,20 @@ def platform_is_win32():\n else:\n     EXE_SUFFIX = \"\"\n \n+def get_cpus():\n+    if hasattr(os, \"sched_getaffinity\"):\n+        return len(os.sched_getaffinity(0))\n+    if hasattr(os, \"cpu_count\"):\n+        cpus = os.cpu_count()\n+        if cpus is not None:\n+            return cpus\n+    try:\n+        return cpu_count()\n+    except NotImplementedError:\n+        return 1\n+\n+\n+\n def get(base, url, path, checksums, verbose=False):\n     with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n         temp_path = temp_file.name\n@@ -540,11 +554,15 @@ def download_toolchain(self):\n \n             # Unpack the tarballs in parallle.\n             # In Python 2.7, Pool cannot be used as a context manager.\n-            p = Pool(min(len(tarballs_download_info), cpu_count()))\n+            pool_size = min(len(tarballs_download_info), get_cpus())\n+            if self.verbose:\n+                print('Choosing a pool size of', pool_size, 'for the unpacking of the tarballs')\n+            p = Pool(pool_size)\n             try:\n                 p.map(unpack_component, tarballs_download_info)\n             finally:\n                 p.close()\n+            p.join()\n \n             if self.should_fix_bins_and_dylibs():\n                 self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))"}, {"sha": "b8cdf67712c43e573272028a6a08805020844dac", "filename": "x.py", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/30119498be91c3f8837a797b1ab212f4520fa0ce/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/30119498be91c3f8837a797b1ab212f4520fa0ce/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=30119498be91c3f8837a797b1ab212f4520fa0ce", "patch": "@@ -4,26 +4,29 @@\n \n # This file is only a \"symlink\" to bootstrap.py, all logic should go there.\n \n-import os\n-import sys\n+# Parts of `bootstrap.py` use the `multiprocessing` module, so this entry point\n+# must use the normal `if __name__ == '__main__':` convention to avoid problems.\n+if __name__ == '__main__':\n+    import os\n+    import sys\n \n-# If this is python2, check if python3 is available and re-execute with that\n-# interpreter. Only python3 allows downloading CI LLVM.\n-#\n-# This matters if someone's system `python` is python2.\n-if sys.version_info.major < 3:\n-    try:\n-        os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n-    except OSError:\n+    # If this is python2, check if python3 is available and re-execute with that\n+    # interpreter. Only python3 allows downloading CI LLVM.\n+    #\n+    # This matters if someone's system `python` is python2.\n+    if sys.version_info.major < 3:\n         try:\n-            os.execvp(\"python3\", [\"python3\"] + sys.argv)\n+            os.execvp(\"py\", [\"py\", \"-3\"] + sys.argv)\n         except OSError:\n-            # Python 3 isn't available, fall back to python 2\n-            pass\n+            try:\n+                os.execvp(\"python3\", [\"python3\"] + sys.argv)\n+            except OSError:\n+                # Python 3 isn't available, fall back to python 2\n+                pass\n \n-rust_dir = os.path.dirname(os.path.abspath(__file__))\n-# For the import below, have Python search in src/bootstrap first.\n-sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n+    rust_dir = os.path.dirname(os.path.abspath(__file__))\n+    # For the import below, have Python search in src/bootstrap first.\n+    sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n \n-import bootstrap\n-bootstrap.main()\n+    import bootstrap\n+    bootstrap.main()"}]}