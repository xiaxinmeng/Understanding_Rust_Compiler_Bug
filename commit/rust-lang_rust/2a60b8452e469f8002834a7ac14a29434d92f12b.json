{"sha": "2a60b8452e469f8002834a7ac14a29434d92f12b", "node_id": "C_kwDOAAsO6NoAKDJhNjBiODQ1MmU0NjlmODAwMjgzNGE3YWMxNGEyOTQzNGQ5MmYxMmI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T14:33:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T14:33:37Z"}, "message": "Deduplicate", "tree": {"sha": "3a741b0d2a964fb78babd4e1b5f069d5ac30409f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a741b0d2a964fb78babd4e1b5f069d5ac30409f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a60b8452e469f8002834a7ac14a29434d92f12b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a60b8452e469f8002834a7ac14a29434d92f12b", "html_url": "https://github.com/rust-lang/rust/commit/2a60b8452e469f8002834a7ac14a29434d92f12b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a60b8452e469f8002834a7ac14a29434d92f12b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522f66545ffe709527dc2102aefe738ffe9ecc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/522f66545ffe709527dc2102aefe738ffe9ecc17", "html_url": "https://github.com/rust-lang/rust/commit/522f66545ffe709527dc2102aefe738ffe9ecc17"}], "stats": {"total": 97, "additions": 27, "deletions": 70}, "files": [{"sha": "b6358d4f40c05aae445fafc48a447fa1f0c9be5e", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=2a60b8452e469f8002834a7ac14a29434d92f12b", "patch": "@@ -111,6 +111,26 @@ impl Completions {\n         [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n     }\n \n+    pub(crate) fn add_keyword_snippet(&mut self, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+        let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                if snippet.ends_with('}') && ctx.incomplete_let {\n+                    // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n+                    cov_mark::hit!(let_semi);\n+                    item.insert_snippet(cap, format!(\"{};\", snippet));\n+                } else {\n+                    item.insert_snippet(cap, snippet);\n+                }\n+            }\n+            None => {\n+                item.insert_text(if snippet.contains('$') { kw } else { snippet });\n+            }\n+        };\n+        item.add_to(self);\n+    }\n+\n     pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n         ctx.process_all_names(&mut |name, res| match res {\n             ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {"}, {"sha": "23f47523d663d398c56f0a773913efb43ea2e473", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=2a60b8452e469f8002834a7ac14a29434d92f12b", "patch": "@@ -178,8 +178,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n             });\n \n             if !is_func_update {\n-                let mut add_keyword =\n-                    |kw, snippet| super::keyword::add_keyword(acc, ctx, kw, snippet);\n+                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n                 if ctx.expects_expression() {\n                     if !in_block_expr {"}, {"sha": "17395279178c26d69475dd42662111fac0fe4af8", "filename": "crates/ide-completion/src/completions/field.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=2a60b8452e469f8002834a7ac14a29434d92f12b", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     context::{IdentContext, NameContext, NameKind, NameRefContext, PathCompletionCtx, PathKind},\n-    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    CompletionContext, Completions,\n };\n \n pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -22,7 +22,7 @@ pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext\n             ..\n         }) => {\n             if ctx.qualifier_ctx.vis_node.is_none() {\n-                let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n+                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n                 add_keyword(\"pub(crate)\", \"pub(crate)\");\n                 add_keyword(\"pub(super)\", \"pub(super)\");\n                 add_keyword(\"pub\", \"pub\");\n@@ -31,23 +31,3 @@ pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext\n         _ => return,\n     }\n }\n-\n-pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n-    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n-\n-    match ctx.config.snippet_cap {\n-        Some(cap) => {\n-            if snippet.ends_with('}') && ctx.incomplete_let {\n-                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n-                cov_mark::hit!(let_semi);\n-                item.insert_snippet(cap, format!(\"{};\", snippet));\n-            } else {\n-                item.insert_snippet(cap, snippet);\n-            }\n-        }\n-        None => {\n-            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n-        }\n-    };\n-    item.add_to(acc);\n-}"}, {"sha": "287cf46f2e3bf4405dd54bfbb541df2fd17ef0b9", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=2a60b8452e469f8002834a7ac14a29434d92f12b", "patch": "@@ -3,7 +3,7 @@\n use crate::{\n     completions::module_or_fn_macro,\n     context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n-    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    CompletionContext, Completions,\n };\n \n pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -24,7 +24,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         }) => (is_absolute_path, qualifier, None),\n         _ => return,\n     };\n-    let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n+    let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n     let in_item_list = matches!(kind, Some(ItemListKind::SourceFile | ItemListKind::Module) | None);\n     let in_assoc_non_trait_impl = matches!(kind, Some(ItemListKind::Impl | ItemListKind::Trait));\n@@ -121,23 +121,3 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         None => {}\n     }\n }\n-\n-pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n-    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n-\n-    match ctx.config.snippet_cap {\n-        Some(cap) => {\n-            if snippet.ends_with('}') && ctx.incomplete_let {\n-                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n-                cov_mark::hit!(let_semi);\n-                item.insert_snippet(cap, format!(\"{};\", snippet));\n-            } else {\n-                item.insert_snippet(cap, snippet);\n-            }\n-        }\n-        None => {\n-            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n-        }\n-    };\n-    item.add_to(acc);\n-}"}, {"sha": "e870ecc22958ec5e90dd0de4a5f46f4b086cc4de", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a60b8452e469f8002834a7ac14a29434d92f12b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=2a60b8452e469f8002834a7ac14a29434d92f12b", "patch": "@@ -4,9 +4,7 @@\n \n use syntax::ast::Item;\n \n-use crate::{\n-    context::NameRefContext, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n-};\n+use crate::{context::NameRefContext, CompletionContext, Completions};\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     let item = match ctx.nameref_ctx() {\n@@ -18,7 +16,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         _ => return,\n     };\n \n-    let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n+    let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n     match item {\n         Item::Impl(it) => {\n@@ -39,26 +37,6 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n }\n \n-pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n-    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n-\n-    match ctx.config.snippet_cap {\n-        Some(cap) => {\n-            if snippet.ends_with('}') && ctx.incomplete_let {\n-                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n-                cov_mark::hit!(let_semi);\n-                item.insert_snippet(cap, format!(\"{};\", snippet));\n-            } else {\n-                item.insert_snippet(cap, snippet);\n-            }\n-        }\n-        None => {\n-            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n-        }\n-    };\n-    item.add_to(acc);\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}]}