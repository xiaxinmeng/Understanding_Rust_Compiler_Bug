{"sha": "259ea4e4b49cfe00efdb39e0226211a71807ec76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OWVhNGU0YjQ5Y2ZlMDBlZmRiMzllMDIyNjIxMWE3MTgwN2VjNzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T01:31:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T05:04:52Z"}, "message": "rustdoc: Parse enum doc attributes", "tree": {"sha": "ee87bbc1e24b98b3d0f277f7c7b8711b5d68efe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee87bbc1e24b98b3d0f277f7c7b8711b5d68efe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259ea4e4b49cfe00efdb39e0226211a71807ec76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259ea4e4b49cfe00efdb39e0226211a71807ec76", "html_url": "https://github.com/rust-lang/rust/commit/259ea4e4b49cfe00efdb39e0226211a71807ec76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259ea4e4b49cfe00efdb39e0226211a71807ec76/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5166cc29e9fd051845fe68d6c16226b20e0cd105", "url": "https://api.github.com/repos/rust-lang/rust/commits/5166cc29e9fd051845fe68d6c16226b20e0cd105", "html_url": "https://github.com/rust-lang/rust/commit/5166cc29e9fd051845fe68d6c16226b20e0cd105"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "52fdb40d3954a34f00b7186598d2dface8e7c025", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 72, "deletions": 22, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/259ea4e4b49cfe00efdb39e0226211a71807ec76/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259ea4e4b49cfe00efdb39e0226211a71807ec76/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=259ea4e4b49cfe00efdb39e0226211a71807ec76", "patch": "@@ -9,8 +9,8 @@ import rustc::syntax::ast;\n import rustc::front::attr;\n import core::tuple;\n \n-export crate_attrs, mod_attrs, fn_attrs, arg_attrs, const_attrs;\n-export parse_crate, parse_mod, parse_fn, parse_const;\n+export crate_attrs, mod_attrs, fn_attrs, arg_attrs, const_attrs, enum_attrs;\n+export parse_crate, parse_mod, parse_fn, parse_const, parse_enum;\n \n type crate_attrs = {\n     name: option<str>\n@@ -39,6 +39,40 @@ type const_attrs = {\n     desc: option<str>\n };\n \n+type enum_attrs = {\n+    brief: option<str>,\n+    desc: option<str>\n+};\n+\n+type variant_attrs = {\n+    desc: option<str>\n+};\n+\n+#[cfg(test)]\n+mod test {\n+\n+    fn parse_attributes(source: str) -> [ast::attribute] {\n+        import rustc::syntax::parse::parser;\n+        // FIXME: Uncommenting this results in rustc bugs\n+        //import rustc::syntax::codemap;\n+        import rustc::driver::diagnostic;\n+\n+        let cm = rustc::syntax::codemap::new_codemap();\n+        let handler = diagnostic::mk_handler(none);\n+        let parse_sess = @{\n+            cm: cm,\n+            mutable next_id: 0,\n+            span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n+            mutable chpos: 0u,\n+            mutable byte_pos: 0u\n+        };\n+        let parser = parser::new_parser_from_source_str(\n+            parse_sess, [], \"-\", @source);\n+\n+        parser::parse_outer_attributes(parser)\n+    }\n+}\n+\n fn doc_meta(\n     attrs: [ast::attribute]\n ) -> option<@ast::meta_item> {\n@@ -333,27 +367,43 @@ fn should_parse_const_long_doc() {\n     assert attrs.desc == some(\"b\");\n }\n \n-#[cfg(test)]\n-mod test {\n+fn parse_enum(attrs: [ast::attribute]) -> enum_attrs {\n+    parse_short_doc_or(\n+        attrs,\n+        {|desc|\n+            {\n+                brief: none,\n+                desc: desc\n+            }\n+        },\n+        parse_enum_long_doc\n+    )\n+}\n \n-    fn parse_attributes(source: str) -> [ast::attribute] {\n-        import rustc::syntax::parse::parser;\n-        // FIXME: Uncommenting this results in rustc bugs\n-        //import rustc::syntax::codemap;\n-        import rustc::driver::diagnostic;\n+fn parse_enum_long_doc(\n+    _items: [@ast::meta_item],\n+    brief: option<str>,\n+    desc: option<str>\n+) -> enum_attrs {\n+    {\n+        brief: brief,\n+        desc: desc\n+    }\n+}\n \n-        let cm = rustc::syntax::codemap::new_codemap();\n-        let handler = diagnostic::mk_handler(none);\n-        let parse_sess = @{\n-            cm: cm,\n-            mutable next_id: 0,\n-            span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n-            mutable chpos: 0u,\n-            mutable byte_pos: 0u\n-        };\n-        let parser = parser::new_parser_from_source_str(\n-            parse_sess, [], \"-\", @source);\n+#[test]\n+fn should_parse_enum_short_doc() {\n+    let source = \"#[doc = \\\"description\\\"]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_enum(attrs);\n+    assert attrs.desc == some(\"description\");\n+}\n \n-        parser::parse_outer_attributes(parser)\n-    }\n+#[test]\n+fn should_parse_enum_long_doc() {\n+    let source = \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_enum(attrs);\n+    assert attrs.brief == some(\"a\");\n+    assert attrs.desc == some(\"b\");\n }"}]}