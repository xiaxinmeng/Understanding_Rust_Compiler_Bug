{"sha": "82fd71137a87ad4568eee24142d22bf87a4d2e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmQ3MTEzN2E4N2FkNDU2OGVlZTI0MTQyZDIyYmY4N2E0ZDJlMmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-04T02:24:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-04T02:40:25Z"}, "message": "libcore: De-export core.rc and core.rs", "tree": {"sha": "cf4f9d20367ebb6ca607a122bab874870d5dd77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf4f9d20367ebb6ca607a122bab874870d5dd77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82fd71137a87ad4568eee24142d22bf87a4d2e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82fd71137a87ad4568eee24142d22bf87a4d2e2b", "html_url": "https://github.com/rust-lang/rust/commit/82fd71137a87ad4568eee24142d22bf87a4d2e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82fd71137a87ad4568eee24142d22bf87a4d2e2b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ccf6f5932d8223fd6c5cbf7c6ac429ca9e8912a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ccf6f5932d8223fd6c5cbf7c6ac429ca9e8912a", "html_url": "https://github.com/rust-lang/rust/commit/3ccf6f5932d8223fd6c5cbf7c6ac429ca9e8912a"}], "stats": {"total": 250, "additions": 113, "deletions": 137}, "files": [{"sha": "0a8641b4a1b03dd08903175a7846767973e1a346", "filename": "src/libcore/core.rc", "status": "modified", "additions": 79, "deletions": 78, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/82fd71137a87ad4568eee24142d22bf87a4d2e2b/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/82fd71137a87ad4568eee24142d22bf87a4d2e2b/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=82fd71137a87ad4568eee24142d22bf87a4d2e2b", "patch": "@@ -36,14 +36,15 @@ Implicitly, all crates behave as if they included the following prologue:\n // Don't link to core. We are core.\n #[no_core];\n \n-#[legacy_exports];\n+//#[legacy_exports];\n \n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n #[warn(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n \n+/*\n export int, i8, i16, i32, i64;\n export uint, u8, u16, u32, u64;\n export float, f32, f64;\n@@ -81,182 +82,182 @@ export option_iter;\n // This creates some APIs that I do not want to commit to, but it must be\n // exported from core in order for uv to remain in std (see #2648).\n export private;\n-\n+*/\n \n // Built-in-type support modules\n \n /// Operations and constants for `int`\n #[path = \"int-template\"]\n-mod int {\n+pub mod int {\n     pub use inst::{ pow };\n     #[path = \"int.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `i8`\n #[path = \"int-template\"]\n-mod i8 {\n+pub mod i8 {\n     #[path = \"i8.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `i16`\n #[path = \"int-template\"]\n-mod i16 {\n+pub mod i16 {\n     #[path = \"i16.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `i32`\n #[path = \"int-template\"]\n-mod i32 {\n+pub mod i32 {\n     #[path = \"i32.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `i64`\n #[path = \"int-template\"]\n-mod i64 {\n+pub mod i64 {\n     #[path = \"i64.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `uint`\n #[path = \"uint-template\"]\n-mod uint {\n+pub mod uint {\n     pub use inst::{\n         div_ceil, div_round, div_floor, iterate,\n         next_power_of_two\n     };\n     #[path = \"uint.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `u8`\n #[path = \"uint-template\"]\n-mod u8 {\n+pub mod u8 {\n     pub use inst::is_ascii;\n     #[path = \"u8.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `u16`\n #[path = \"uint-template\"]\n-mod u16 {\n+pub mod u16 {\n     #[path = \"u16.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `u32`\n #[path = \"uint-template\"]\n-mod u32 {\n+pub mod u32 {\n     #[path = \"u32.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n /// Operations and constants for `u64`\n #[path = \"uint-template\"]\n-mod u64 {\n+pub mod u64 {\n     #[path = \"u64.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n \n \n-mod box;\n-mod char;\n-mod float;\n-mod f32;\n-mod f64;\n-mod str;\n-mod ptr;\n-mod vec;\n-mod at_vec;\n-mod bool;\n-mod tuple;\n-mod unit;\n-mod uniq;\n+pub mod box;\n+pub mod char;\n+pub mod float;\n+pub mod f32;\n+pub mod f64;\n+pub mod str;\n+pub mod ptr;\n+pub mod vec;\n+pub mod at_vec;\n+pub mod bool;\n+pub mod tuple;\n+pub mod unit;\n+pub mod uniq;\n \n // Ubiquitous-utility-type modules\n \n #[cfg(notest)]\n-mod ops;\n-mod cmp;\n-mod num;\n-mod hash;\n-mod either;\n-mod iter;\n-mod logging;\n-mod option;\n+pub mod ops;\n+pub mod cmp;\n+pub mod num;\n+pub mod hash;\n+pub mod either;\n+pub mod iter;\n+pub mod logging;\n+pub mod option;\n #[path=\"iter-trait\"]\n-mod option_iter {\n+pub mod option_iter {\n     #[path = \"option.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n-mod result;\n-mod to_str;\n-mod to_bytes;\n-mod from_str;\n-mod util;\n+pub mod result;\n+pub mod to_str;\n+pub mod to_bytes;\n+pub mod from_str;\n+pub mod util;\n \n // Data structure modules\n \n-mod dvec;\n+pub mod dvec;\n #[path=\"iter-trait\"]\n-mod dvec_iter {\n+pub mod dvec_iter {\n     #[path = \"dvec.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n-mod dlist;\n+pub mod dlist;\n #[path=\"iter-trait\"]\n-mod dlist_iter {\n+pub mod dlist_iter {\n     #[path =\"dlist.rs\"]\n-    mod inst;\n+    pub mod inst;\n }\n-mod send_map;\n+pub mod send_map;\n \n // Concurrency\n-mod comm;\n-mod task {\n+pub mod comm;\n+pub mod task {\n     pub mod local_data;\n     mod local_data_priv;\n     pub mod spawn;\n     pub mod rt;\n }\n-mod future;\n-mod pipes;\n+pub mod future;\n+pub mod pipes;\n \n // Runtime and language-primitive support\n \n-mod gc;\n-mod io;\n-mod libc;\n-mod os;\n-mod path;\n-mod rand;\n-mod run;\n-mod sys;\n-mod cast;\n-mod mutable;\n-mod flate;\n-mod repr;\n-mod cleanup;\n-mod reflect;\n+pub mod gc;\n+pub mod io;\n+pub mod libc;\n+pub mod os;\n+pub mod path;\n+pub mod rand;\n+pub mod run;\n+pub mod sys;\n+pub mod cast;\n+pub mod mutable;\n+pub mod flate;\n+pub mod repr;\n+pub mod cleanup;\n+pub mod reflect;\n \n // Modules supporting compiler-generated code\n // Exported but not part of the public interface\n \n #[legacy_exports]\n-mod extfmt;\n+pub mod extfmt;\n // The test harness links against core, so don't include runtime in tests.\n #[cfg(notest)]\n #[legacy_exports]\n-mod rt;\n+pub mod rt;\n \n \n // For internal use, not exported\n \n+pub mod private;\n mod unicode;\n-mod private;\n mod cmath;\n mod stackwalk;\n "}, {"sha": "a14b67b40f13d899123eb10b76139f0437a23c0b", "filename": "src/libcore/core.rs", "status": "modified", "additions": 34, "deletions": 59, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/82fd71137a87ad4568eee24142d22bf87a4d2e2b/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fd71137a87ad4568eee24142d22bf87a4d2e2b/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=82fd71137a87ad4568eee24142d22bf87a4d2e2b", "patch": "@@ -2,101 +2,76 @@\n \n // Export various ubiquitous types, constructors, methods.\n \n-use option::{Some, None};\n-use Option = option::Option;\n-use result::{Result, Ok, Err};\n+pub use option::{Some, None};\n+pub use Option = option::Option;\n+pub use result::{Result, Ok, Err};\n \n-use Path = path::Path;\n-use GenericPath = path::GenericPath;\n-use WindowsPath = path::WindowsPath;\n-use PosixPath = path::PosixPath;\n+pub use Path = path::Path;\n+pub use GenericPath = path::GenericPath;\n+pub use WindowsPath = path::WindowsPath;\n+pub use PosixPath = path::PosixPath;\n \n-use tuple::{TupleOps, ExtendedTupleOps};\n-use str::{StrSlice, UniqueStr};\n-use vec::{ConstVector, CopyableVector, ImmutableVector};\n-use vec::{ImmutableEqVector, ImmutableCopyableVector};\n-use vec::{MutableVector, MutableCopyableVector};\n-use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n-use iter::{CopyableOrderedIter, Times, TimesIx};\n-use num::Num;\n-use ptr::Ptr;\n-use to_str::ToStr;\n-\n-export Path, WindowsPath, PosixPath, GenericPath;\n-export Option, Some, None;\n-export Result, Ok, Err;\n-export extensions;\n-// The following exports are the extension impls for numeric types\n-export Num, Times, TimesIx;\n-// The following exports are the common traits\n-export StrSlice, UniqueStr;\n-export ConstVector, CopyableVector, ImmutableVector;\n-export ImmutableEqVector, ImmutableCopyableVector, IterTraitExtensions;\n-export MutableVector, MutableCopyableVector;\n-export BaseIter, CopyableIter, CopyableOrderedIter, ExtendedIter, EqIter;\n-export TupleOps, ExtendedTupleOps;\n-export Ptr;\n-export ToStr;\n+pub use tuple::{TupleOps, ExtendedTupleOps};\n+pub use str::{StrSlice, UniqueStr};\n+pub use vec::{ConstVector, CopyableVector, ImmutableVector};\n+pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n+pub use vec::{MutableVector, MutableCopyableVector};\n+pub use iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n+pub use iter::{CopyableOrderedIter, Times, TimesIx};\n+pub use num::Num;\n+pub use ptr::Ptr;\n+pub use to_str::ToStr;\n \n // The following exports are the core operators and kinds\n // The compiler has special knowlege of these so we must not duplicate them\n // when compiling for testing\n #[cfg(notest)]\n-use ops::{Const, Copy, Send, Owned};\n+pub use ops::{Const, Copy, Send, Owned};\n #[cfg(notest)]\n-use ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n+pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(notest)]\n-use ops::{Shl, Shr, Index};\n-\n-#[cfg(notest)]\n-export Const, Copy, Send, Owned;\n-#[cfg(notest)]\n-export Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor;\n-#[cfg(notest)]\n-export Shl, Shr, Index;\n+pub use ops::{Shl, Shr, Index};\n \n #[cfg(test)]\n extern mod coreops(name = \"core\", vers = \"0.4\");\n \n #[cfg(test)]\n-use coreops::ops::{Const, Copy, Send, Owned};\n+pub use coreops::ops::{Const, Copy, Send, Owned};\n+#[cfg(test)]\n+pub use coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr};\n #[cfg(test)]\n-use coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n+pub use coreops::ops::{BitXor};\n #[cfg(test)]\n-use coreops::ops::{Shl, Shr, Index};\n+pub use coreops::ops::{Shl, Shr, Index};\n \n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is\n // warn-and-below.\n \n-export error, warn, info, debug;\n-\n /// The error log level\n-const error : u32 = 0_u32;\n+pub const error : u32 = 0_u32;\n /// The warning log level\n-const warn : u32 = 1_u32;\n+pub const warn : u32 = 1_u32;\n /// The info log level\n-const info : u32 = 2_u32;\n+pub const info : u32 = 2_u32;\n /// The debug log level\n-const debug : u32 = 3_u32;\n+pub const debug : u32 = 3_u32;\n \n // A curious inner-module that's not exported that contains the binding\n // 'core' so that macro-expanded references to core::error and such\n // can be resolved within libcore.\n #[doc(hidden)] // FIXME #3538\n mod core {\n-    #[legacy_exports];\n-    const error : u32 = 0_u32;\n-    const warn : u32 = 1_u32;\n-    const info : u32 = 2_u32;\n-    const debug : u32 = 3_u32;\n+    pub const error : u32 = 0_u32;\n+    pub const warn : u32 = 1_u32;\n+    pub const info : u32 = 2_u32;\n+    pub const debug : u32 = 3_u32;\n }\n \n // Similar to above. Some magic to make core testable.\n #[cfg(test)]\n mod std {\n-    #[legacy_exports];\n     extern mod std(vers = \"0.4\");\n-    use std::test;\n+    pub use std::test;\n }"}]}