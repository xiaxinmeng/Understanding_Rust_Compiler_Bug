{"sha": "b4afb38f2f506e9f4d558449e2e303340d4fdb35", "node_id": "C_kwDOAAsO6NoAKGI0YWZiMzhmMmY1MDZlOWY0ZDU1ODQ0OWUyZTMwMzM0MGQ0ZmRiMzU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-14T21:32:21Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2021-12-15T02:30:26Z"}, "message": "Remove `SymbolStr`.\n\nBy changing `as_str()` to take `&self` instead of `self`, we can just\nreturn `&str`. We're still lying about lifetimes, but it's a smaller lie\nthan before, where `SymbolStr` contained a (fake) `&'static str`!", "tree": {"sha": "bfe83cb5041b17c091435c989e12fbd90e354811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe83cb5041b17c091435c989e12fbd90e354811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4afb38f2f506e9f4d558449e2e303340d4fdb35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4afb38f2f506e9f4d558449e2e303340d4fdb35", "html_url": "https://github.com/rust-lang/rust/commit/b4afb38f2f506e9f4d558449e2e303340d4fdb35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4afb38f2f506e9f4d558449e2e303340d4fdb35/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0167c5303f681eacef0e15aa3315ab601438a3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0167c5303f681eacef0e15aa3315ab601438a3e5", "html_url": "https://github.com/rust-lang/rust/commit/0167c5303f681eacef0e15aa3315ab601438a3e5"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "fe8e5c6b61e16ba5417f68d1b2b4d7c6b5072c26", "filename": "src/reorder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4afb38f2f506e9f4d558449e2e303340d4fdb35/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4afb38f2f506e9f4d558449e2e303340d4fdb35/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=b4afb38f2f506e9f4d558449e2e303340d4fdb35", "patch": "@@ -31,9 +31,9 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), rustc_span::Symbol::as_str);\n-            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), rustc_span::Symbol::as_str);\n-            let result = a_orig_name.cmp(&b_orig_name);\n+            let a_orig_name = a_name.unwrap_or(a.ident.name);\n+            let b_orig_name = b_name.unwrap_or(b.ident.name);\n+            let result = a_orig_name.as_str().cmp(b_orig_name.as_str());\n             if result != Ordering::Equal {\n                 return result;\n             }"}, {"sha": "23d065c9cc95ae3113ddf12a53e5a12f8fc3cd03", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4afb38f2f506e9f4d558449e2e303340d4fdb35/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4afb38f2f506e9f4d558449e2e303340d4fdb35/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=b4afb38f2f506e9f4d558449e2e303340d4fdb35", "patch": "@@ -95,15 +95,17 @@ pub(crate) enum ParserError {\n \n impl<'a> Parser<'a> {\n     pub(crate) fn submod_path_from_attr(attrs: &[ast::Attribute], path: &Path) -> Option<PathBuf> {\n-        let path_string = first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n+        let path_sym = first_attr_value_str_by_name(attrs, sym::path)?;\n+        let path_str = path_sym.as_str();\n+\n         // On windows, the base path might have the form\n         // `\\\\?\\foo\\bar` in which case it does not tolerate\n         // mixed `/` and `\\` separators, so canonicalize\n         // `/` to `\\`.\n         #[cfg(windows)]\n-        let path_string = path_string.replace(\"/\", \"\\\\\");\n+        let path_str = path_str.replace(\"/\", \"\\\\\");\n \n-        Some(path.join(&*path_string))\n+        Some(path.join(path_str))\n     }\n \n     pub(crate) fn parse_file_as_module("}]}