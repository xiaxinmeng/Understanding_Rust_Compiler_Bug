{"sha": "9f24c126249990f337f7e940b586a1424081d9c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjRjMTI2MjQ5OTkwZjMzN2Y3ZTk0MGI1ODZhMTQyNDA4MWQ5YzY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-08T20:06:14Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:38:22Z"}, "message": "Add helper function to write structs", "tree": {"sha": "63b438ada68576c030966e5eeda540c1bfec066b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b438ada68576c030966e5eeda540c1bfec066b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f24c126249990f337f7e940b586a1424081d9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f24c126249990f337f7e940b586a1424081d9c6", "html_url": "https://github.com/rust-lang/rust/commit/9f24c126249990f337f7e940b586a1424081d9c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f24c126249990f337f7e940b586a1424081d9c6/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7863f2509eed16f2ce79ffb52a21de5bd536a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7863f2509eed16f2ce79ffb52a21de5bd536a48", "html_url": "https://github.com/rust-lang/rust/commit/b7863f2509eed16f2ce79ffb52a21de5bd536a48"}], "stats": {"total": 94, "additions": 45, "deletions": 49}, "files": [{"sha": "eeada36ca83354e5d2bcb8e9bc0c175f52f11b31", "filename": "src/helpers.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f24c126249990f337f7e940b586a1424081d9c6/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24c126249990f337f7e940b586a1424081d9c6/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9f24c126249990f337f7e940b586a1424081d9c6", "patch": "@@ -1,8 +1,11 @@\n use std::mem;\n \n-use rustc::ty::{self, layout::{self, Size, Align}};\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n+use rustc::ty::{\n+    self,\n+    layout::{self, Align, Size, LayoutOf},\n+};\n \n use rand::RngCore;\n \n@@ -304,4 +307,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n         self.eval_libc(name)?.to_i32()\n     }\n+\n+    fn write_c_ints(\n+        &mut self,\n+        ptr: &Pointer<Tag>,\n+        bits: &[i128],\n+        ty_names: &[&str],\n+    ) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        let tcx = &{ this.tcx.tcx };\n+\n+        let mut sizes = Vec::new();\n+\n+        for name in ty_names {\n+            let ty = this.resolve_path(&[\"libc\", name])?.ty(*tcx);\n+            sizes.push(this.layout_of(ty)?.size);\n+        }\n+\n+        let allocation = this.memory_mut().get_mut(ptr.alloc_id)?;\n+        let mut offset = Size::from_bytes(0);\n+\n+        for (value, size) in bits.iter().zip(sizes) {\n+            allocation.write_scalar(\n+                tcx,\n+                ptr.offset(offset, tcx)?,\n+                Scalar::from_int(*value, size).into(),\n+                size,\n+            )?;\n+            offset += size;\n+        }\n+\n+        Ok(())\n+    }\n }"}, {"sha": "edf151f44ef6a2a6ce0de070d6b52ab43dcc0130", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9f24c126249990f337f7e940b586a1424081d9c6/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f24c126249990f337f7e940b586a1424081d9c6/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=9f24c126249990f337f7e940b586a1424081d9c6", "patch": "@@ -511,8 +511,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !this.machine.communicate {\n                     throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n                 } else {\n-                    let tcx = &{ this.tcx.tcx };\n-\n                     let clk_id = this.read_scalar(args[0])?.to_i32()?;\n \n                     if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n@@ -522,14 +520,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         let tp = this.force_ptr(this.read_scalar(args[1])?.not_undef()?)?;\n \n-                        let long = this.resolve_path(&[\"libc\", \"c_long\"])?.ty(*tcx);\n-                        let time_t = this.resolve_path(&[\"libc\", \"time_t\"])?.ty(*tcx);\n-\n-                        let tv_sec_size = this.layout_of(time_t)?.size;\n-                        let tv_nsec_size = this.layout_of(long)?.size;\n-\n-                        let allocation = this.memory_mut().get_mut(tp.alloc_id)?;\n-\n                         let mut sign = 1;\n \n                         let duration = std::time::SystemTime::now()\n@@ -539,20 +529,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 e.duration()\n                             });\n \n-                        allocation.write_scalar(\n-                            tcx,\n-                            tp,\n-                            Scalar::from_int(sign * (duration.as_secs() as i64), tv_sec_size)\n-                                .into(),\n-                            tv_sec_size,\n-                        )?;\n-\n-                        allocation.write_scalar(\n-                            tcx,\n-                            tp.offset(tv_sec_size, tcx)?,\n-                            Scalar::from_int(duration.subsec_nanos() as i64, tv_nsec_size).into(),\n-                            tv_nsec_size,\n-                        )?;\n+                        let tv_sec = sign * (duration.as_secs() as i128);\n+                        let tv_nsec = duration.subsec_nanos() as i128;\n+\n+                        this.write_c_ints(&tp, &[tv_sec, tv_nsec], &[\"time_t\", \"c_long\"])?;\n \n                         this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n                     }\n@@ -563,8 +543,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if !this.machine.communicate {\n                     throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n                 } else {\n-                    let tcx = &{ this.tcx.tcx };\n-\n                     let tz = this.read_scalar(args[1])?.not_undef()?;\n                     // Using tz is obsolete and should always be null\n                     if !this.is_null(tz)? {\n@@ -574,14 +552,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         let tv = this.force_ptr(this.read_scalar(args[0])?.not_undef()?)?;\n \n-                        let time_t = this.resolve_path(&[\"libc\", \"time_t\"])?.ty(*tcx);\n-                        let suseconds_t = this.resolve_path(&[\"libc\", \"suseconds_t\"])?.ty(*tcx);\n-\n-                        let tv_sec_size = this.layout_of(time_t)?.size;\n-                        let tv_usec_size = this.layout_of(suseconds_t)?.size;\n-\n-                        let allocation = this.memory_mut().get_mut(tv.alloc_id)?;\n-\n                         let mut sign = 1;\n \n                         let duration = std::time::SystemTime::now()\n@@ -591,20 +561,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 e.duration()\n                             });\n \n-                        allocation.write_scalar(\n-                            tcx,\n-                            tv,\n-                            Scalar::from_int(sign * (duration.as_secs() as i64), tv_sec_size)\n-                                .into(),\n-                            tv_sec_size,\n-                        )?;\n-\n-                        allocation.write_scalar(\n-                            tcx,\n-                            tv.offset(tv_sec_size, tcx)?,\n-                            Scalar::from_int(duration.subsec_micros() as i64, tv_usec_size).into(),\n-                            tv_usec_size,\n-                        )?;\n+                        let tv_sec = sign * (duration.as_secs() as i128);\n+                        let tv_usec = duration.subsec_micros() as i128;\n+\n+                        this.write_c_ints(&tv, &[tv_sec, tv_usec], &[\"time_t\", \"suseconds_t\"])?;\n \n                         this.write_scalar(Scalar::from_int(0i32, dest.layout.size), dest)?;\n                     }"}]}