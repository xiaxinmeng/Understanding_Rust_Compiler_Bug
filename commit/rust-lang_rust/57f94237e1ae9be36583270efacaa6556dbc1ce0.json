{"sha": "57f94237e1ae9be36583270efacaa6556dbc1ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3Zjk0MjM3ZTFhZTliZTM2NTgzMjcwZWZhY2FhNjU1NmRiYzFjZTA=", "commit": {"author": {"name": "gnzlbg", "email": "gnzlbg@users.noreply.github.com", "date": "2019-08-02T11:39:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T11:39:07Z"}, "message": "Clarify semantics of mem::zeroed", "tree": {"sha": "4a4033585a0b2292c14c1c05a300b010162987e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4033585a0b2292c14c1c05a300b010162987e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57f94237e1ae9be36583270efacaa6556dbc1ce0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRCDbCRBK7hj4Ov3rIwAAdHIIACUgiBcuPhumQx74dv5DoDMR\npBi8Y2mZIwWl8bbFW5cxIIel/x4fpegHJ2ZXU5uX4HYgfsReo6dtnCN2LiDcsJhj\nyz6cBulIlqRkpzidCtyfk0WnwZRVyD4cpvMC9dJ3wdnrzYXCV+be0LzoZgTlJ3cs\ni55s7fbm6Ae4rrnQlVXhE1Mj79jsyhbpkn14RZT9army2LKqCHqyhLmZyO8Ig7ww\nFba/kl6eLzveB3EAYfbhDpJIn2UUE4A7nY55xkLi70hPYZVezI1raU0jQ/sc4OGW\nQnYr5jPrgOjKblDoWe2vvRyLAYIsuHft4dVSl9MQ/783yzkzac2RQpyuZqSBT5Q=\n=M9o5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a4033585a0b2292c14c1c05a300b010162987e0\nparent fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5\nauthor gnzlbg <gnzlbg@users.noreply.github.com> 1564745947 +0200\ncommitter GitHub <noreply@github.com> 1564745947 +0200\n\nClarify semantics of mem::zeroed"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57f94237e1ae9be36583270efacaa6556dbc1ce0", "html_url": "https://github.com/rust-lang/rust/commit/57f94237e1ae9be36583270efacaa6556dbc1ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57f94237e1ae9be36583270efacaa6556dbc1ce0/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5", "html_url": "https://github.com/rust-lang/rust/commit/fc3ef9698fa80aa2f4da6208b8295bc8fa48eec5"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "56aa145c56cc90a6d1483e823715399674507ef7", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57f94237e1ae9be36583270efacaa6556dbc1ce0/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57f94237e1ae9be36583270efacaa6556dbc1ce0/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=57f94237e1ae9be36583270efacaa6556dbc1ce0", "patch": "@@ -414,17 +414,20 @@ pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }\n \n-/// Creates a value whose bytes are all zero.\n+/// Returns the value of type `T` represented by the all-zeros bit-pattern.\n ///\n-/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n-/// It is useful for FFI sometimes, but should generally be avoided.\n+/// This means that, for example, the padding byte in `(u8, u16)` is not\n+/// necessarily zeroed. \n ///\n /// There is no guarantee that an all-zero byte-pattern represents a valid value of\n /// some type `T`. For example, the all-zero byte-pattern is not a valid value\n /// for reference types (`&T` and `&mut T`). Using `zeroed` on such types\n /// causes immediate [undefined behavior][ub] because [the Rust compiler assumes][inv]\n /// that there always is a valid value in a variable it considers initialized.\n ///\n+/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n+/// It is useful for FFI sometimes, but should generally be avoided.\n+///\n /// [zeroed]: union.MaybeUninit.html#method.zeroed\n /// [ub]: ../../reference/behavior-considered-undefined.html\n /// [inv]: union.MaybeUninit.html#initialization-invariant"}]}