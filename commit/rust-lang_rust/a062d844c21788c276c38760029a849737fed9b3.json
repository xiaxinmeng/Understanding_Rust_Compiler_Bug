{"sha": "a062d844c21788c276c38760029a849737fed9b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNjJkODQ0YzIxNzg4YzI3NmMzODc2MDAyOWE4NDk3MzdmZWQ5YjM=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-09T14:50:56Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-09T14:50:56Z"}, "message": "use \\b as word boundary", "tree": {"sha": "65eda8ea06c9ab8228b7f98c66e57a33cb5e533c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65eda8ea06c9ab8228b7f98c66e57a33cb5e533c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a062d844c21788c276c38760029a849737fed9b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a062d844c21788c276c38760029a849737fed9b3", "html_url": "https://github.com/rust-lang/rust/commit/a062d844c21788c276c38760029a849737fed9b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a062d844c21788c276c38760029a849737fed9b3/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3725276554fe63fdd9b63a10b86e794b3eb73158", "url": "https://api.github.com/repos/rust-lang/rust/commits/3725276554fe63fdd9b63a10b86e794b3eb73158", "html_url": "https://github.com/rust-lang/rust/commit/3725276554fe63fdd9b63a10b86e794b3eb73158"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "4665a336abc983df7a11a04546e76ddc6a2e1d6b", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a062d844c21788c276c38760029a849737fed9b3/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a062d844c21788c276c38760029a849737fed9b3/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=a062d844c21788c276c38760029a849737fed9b3", "patch": "@@ -48,8 +48,13 @@ fn extend_single_word_in_comment(leaf: SyntaxNodeRef, offset: TextUnit) -> Optio\n     let cursor_position: u32 = (offset - leaf.range().start()).into();\n \n     let (before, after) = text.split_at(cursor_position as usize);\n-    let start_idx = before.rfind(char::is_whitespace).unwrap_or(0) as u32;\n-    let end_idx = after.find(char::is_whitespace).unwrap_or(after.len()) as u32;\n+\n+    fn non_word_char(c: char) -> bool {\n+        !(c.is_alphanumeric() || c == '_')\n+    }\n+\n+    let start_idx = before.rfind(non_word_char)? as u32;\n+    let end_idx = after.find(non_word_char).unwrap_or(after.len()) as u32;\n \n     let from: TextUnit = (start_idx + 1).into();\n     let to: TextUnit = (cursor_position + end_idx).into();\n@@ -200,6 +205,29 @@ fn bar(){}\n                 \"// #[derive(Debug, Clone, Copy, PartialEq, Eq)]\\n// pub enum Direction {\\n//     Next,\\n//     Prev\\n// }\",\n             ],\n         );\n+\n+        do_check(\n+            r#\"\n+/*\n+foo\n+_bar1<|>*/\n+    \"#,\n+            &[\"_bar1\", \"/*\\nfoo\\n_bar1*/\"],\n+        );\n+\n+        do_check(\n+            r#\"\n+//!<|>foo_2 bar\n+    \"#,\n+            &[\"foo_2\", \"//!foo_2 bar\"],\n+        );\n+\n+        do_check(\n+            r#\"\n+/<|>/foo bar\n+    \"#,\n+            &[\"//foo bar\"],\n+        );\n     }\n \n     #[test]"}]}