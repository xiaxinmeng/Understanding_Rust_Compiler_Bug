{"sha": "2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOWQ5ZDQ4ZDViOTNmZGI4MDBlZWFkMTVmNjU4ZjQ3MTAwZTJkM2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-01T15:51:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-01T20:05:53Z"}, "message": "rustc: More stable hashes of command line arguments\n\nCurrently rustc isn't always the best at producing deterministic builds of a\ncrate when the source directory of a crate is changed. This is happening due to\nwhat appears two different sources:\n\n* First the `-L` paths passed to rustc are hashed into the crate hash. These\n  paths through Cargo are typically absolute paths that can vary if the build\n  directory changes.\n\n* Next the paths passed to `--extern` are also hashed which like `-L` can change\n  if the build directory changes.\n\nThis commit fixes these two sources of nondeterminism by ensuring that avoiding\ntracking the hashes of these arguments on the command line. For `-L` paths\nthey're either related to loading crates (whose hashes are tracked elsewhere) or\nnative librarise used in the linking phase (which isn't incremental). The\n`--extern` paths are similar in that they're related to crate resolution which\nis already tracked independently of the command line arguments.\n\nCloses #48019", "tree": {"sha": "3d489fb7832c10c76077e9e328d352c41b3d0ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d489fb7832c10c76077e9e328d352c41b3d0ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "html_url": "https://github.com/rust-lang/rust/commit/2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85417f5938023d1491b44d94da705f539bb8b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85417f5938023d1491b44d94da705f539bb8b17", "html_url": "https://github.com/rust-lang/rust/commit/a85417f5938023d1491b44d94da705f539bb8b17"}], "stats": {"total": 201, "additions": 71, "deletions": 130}, "files": [{"sha": "4d094f8b3a3f3c23ad04cd59fe76256338b7a417", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 120, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "patch": "@@ -420,10 +420,7 @@ top_level_options!(\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n-        // FIXME(mw): We track this for now but it actually doesn't make too\n-        //            much sense: The search path can stay the same while the\n-        //            things discovered there might have changed on disk.\n-        search_paths: SearchPaths [TRACKED],\n+        search_paths: SearchPaths [UNTRACKED],\n         libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n@@ -442,10 +439,7 @@ top_level_options!(\n         // version of `debugging_opts.borrowck`, which is just a plain string.\n         borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [TRACKED],\n-        // FIXME(mw): We track this for now but it actually doesn't make too\n-        //            much sense: The value of this option can stay the same\n-        //            while the files they refer to might have changed on disk.\n-        externs: Externs [TRACKED],\n+        externs: Externs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n         // An optional name to use as the crate for std during std injection,\n         // written `extern crate std = \"name\"`. Default to \"std\". Used by\n@@ -2141,13 +2135,12 @@ impl fmt::Display for CrateType {\n mod dep_tracking {\n     use lint;\n     use middle::cstore;\n-    use session::search_paths::{PathKind, SearchPaths};\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel, Lto,\n-                OutputTypes, Externs, ErrorOutputType, Sanitizer, Epoch};\n+                OutputTypes, ErrorOutputType, Sanitizer, Epoch};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n \n@@ -2204,7 +2197,6 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Lto);\n     impl_dep_tracking_hash_via_hash!(DebugInfoLevel);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n-    impl_dep_tracking_hash_via_hash!(Externs);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n@@ -2218,15 +2210,6 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n                                                  Option<cstore::NativeLibraryKind>));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n-    impl DepTrackingHash for SearchPaths {\n-        fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n-            let mut elems: Vec<_> = self\n-                .iter(PathKind::All)\n-                .collect();\n-            elems.sort();\n-            Hash::hash(&elems, hasher);\n-        }\n-    }\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n         where T1: DepTrackingHash,\n@@ -2413,43 +2396,6 @@ mod tests {\n         assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n     }\n \n-    #[test]\n-    fn test_externs_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-\n-        v1.externs = Externs::new(mk_map(vec![\n-            (String::from(\"a\"), mk_set(vec![String::from(\"b\"),\n-                                            String::from(\"c\")])),\n-            (String::from(\"d\"), mk_set(vec![String::from(\"e\"),\n-                                            String::from(\"f\")])),\n-        ]));\n-\n-        v2.externs = Externs::new(mk_map(vec![\n-            (String::from(\"a\"), mk_set(vec![String::from(\"b\"),\n-                                            String::from(\"c\")])),\n-            (String::from(\"X\"), mk_set(vec![String::from(\"e\"),\n-                                            String::from(\"f\")])),\n-        ]));\n-\n-        v3.externs = Externs::new(mk_map(vec![\n-            (String::from(\"a\"), mk_set(vec![String::from(\"b\"),\n-                                            String::from(\"c\")])),\n-            (String::from(\"d\"), mk_set(vec![String::from(\"X\"),\n-                                            String::from(\"f\")])),\n-        ]));\n-\n-        assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n-        assert!(v2.dep_tracking_hash() != v3.dep_tracking_hash());\n-\n-        // Check clone\n-        assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n-        assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n-        assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n-    }\n-\n     #[test]\n     fn test_externs_tracking_hash_different_construction_order() {\n         let mut v1 = super::basic_options();\n@@ -2540,69 +2486,6 @@ mod tests {\n         assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n     }\n \n-    #[test]\n-    fn test_search_paths_tracking_hash_different_values() {\n-        let mut v1 = super::basic_options();\n-        let mut v2 = super::basic_options();\n-        let mut v3 = super::basic_options();\n-        let mut v4 = super::basic_options();\n-        let mut v5 = super::basic_options();\n-\n-        // Reference\n-        v1.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n-        v1.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n-        v1.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n-        v1.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n-        v1.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n-\n-        // Native changed\n-        v2.search_paths.add_path(\"native=XXX\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n-\n-        // Crate changed\n-        v2.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"crate=XXX\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n-        v2.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n-\n-        // Dependency changed\n-        v3.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n-        v3.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n-        v3.search_paths.add_path(\"dependency=XXX\", super::ErrorOutputType::Json(false));\n-        v3.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n-        v3.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n-\n-        // Framework changed\n-        v4.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n-        v4.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n-        v4.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n-        v4.search_paths.add_path(\"framework=XXX\", super::ErrorOutputType::Json(false));\n-        v4.search_paths.add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n-\n-        // All changed\n-        v5.search_paths.add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n-        v5.search_paths.add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n-        v5.search_paths.add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n-        v5.search_paths.add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n-        v5.search_paths.add_path(\"all=XXX\", super::ErrorOutputType::Json(false));\n-\n-        assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v4.dep_tracking_hash());\n-        assert!(v1.dep_tracking_hash() != v5.dep_tracking_hash());\n-\n-        // Check clone\n-        assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n-        assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n-        assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n-        assert_eq!(v4.dep_tracking_hash(), v4.clone().dep_tracking_hash());\n-        assert_eq!(v5.dep_tracking_hash(), v5.clone().dep_tracking_hash());\n-    }\n-\n     #[test]\n     fn test_search_paths_tracking_hash_different_order() {\n         let mut v1 = super::basic_options();"}, {"sha": "629e618505129fb85c40d59eaf612dc0c5827e96", "filename": "src/test/run-make/reproducible-build/Makefile", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2FMakefile?ref=2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "patch": "@@ -1,20 +1,78 @@\n -include ../tools.mk\n-all:\n+all:  \\\n+\tsmoke \\\n+\tdebug \\\n+\topt \\\n+\tlink_paths \\\n+\tremap_paths \\\n+\tdifferent_source_dirs \\\n+\textern_flags\n+\n+smoke:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n \t$(RUSTC) reproducible-build-aux.rs\n \t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build1\"\n \t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build2\"\n+\t$(B2)\n \tnm \"$(TMPDIR)/reproducible-build1\" | sort > \"$(TMPDIR)/reproducible-build1.nm\"\n \tnm \"$(TMPDIR)/reproducible-build2\" | sort > \"$(TMPDIR)/reproducible-build2.nm\"\n \tcmp \"$(TMPDIR)/reproducible-build1.nm\" \"$(TMPDIR)/reproducible-build2.nm\" || exit 1\n+\n+debug:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n \t$(RUSTC) reproducible-build-aux.rs -g\n-\t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build1-debug\"\n-\t$(RUSTC) reproducible-build.rs -g -o\"$(TMPDIR)/reproducible-build2-debug\"\n-\tnm \"$(TMPDIR)/reproducible-build1-debug\" | sort > \"$(TMPDIR)/reproducible-build1-debug.nm\"\n-\tnm \"$(TMPDIR)/reproducible-build2-debug\" | sort > \"$(TMPDIR)/reproducible-build2-debug.nm\"\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build1\" -g\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build2\" -g\n+\tnm \"$(TMPDIR)/reproducible-build1\" | sort > \"$(TMPDIR)/reproducible-build1-debug.nm\"\n+\tnm \"$(TMPDIR)/reproducible-build2\" | sort > \"$(TMPDIR)/reproducible-build2-debug.nm\"\n \tcmp \"$(TMPDIR)/reproducible-build1-debug.nm\" \"$(TMPDIR)/reproducible-build2-debug.nm\" || exit 1\n+\n+opt:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n \t$(RUSTC) reproducible-build-aux.rs -O\n-\t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build1-opt\"\n-\t$(RUSTC) reproducible-build.rs -O -o\"$(TMPDIR)/reproducible-build2-opt\"\n-\tnm \"$(TMPDIR)/reproducible-build1-opt\" | sort > \"$(TMPDIR)/reproducible-build1-opt.nm\"\n-\tnm \"$(TMPDIR)/reproducible-build2-opt\" | sort > \"$(TMPDIR)/reproducible-build2-opt.nm\"\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build1\" -O\n+\t$(RUSTC) reproducible-build.rs -o\"$(TMPDIR)/reproducible-build2\" -O\n+\tnm \"$(TMPDIR)/reproducible-build1\" | sort > \"$(TMPDIR)/reproducible-build1-opt.nm\"\n+\tnm \"$(TMPDIR)/reproducible-build2\" | sort > \"$(TMPDIR)/reproducible-build2-opt.nm\"\n \tcmp \"$(TMPDIR)/reproducible-build1-opt.nm\" \"$(TMPDIR)/reproducible-build2-opt.nm\" || exit 1\n+\n+link_paths:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib -L /b\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib -L /a\n+\tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1\n+\n+remap_paths:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib --remap-path-prefix=/a=/c\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib --remap-path-prefix=/b=/c\n+\tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1\n+\n+different_source_dirs:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\tmkdir $(TMPDIR)/test\n+\tcp reproducible-build.rs $(TMPDIR)/test\n+\t$(RUSTC) reproducible-build.rs --crate-type rlib --remap-path-prefix=$$PWD=/b\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfoo.rlib\n+\t(cd $(TMPDIR)/test && $(RUSTC) reproducible-build.rs \\\n+\t\t--remap-path-prefix=$(TMPDIR)/test=/b \\\n+\t\t--crate-type rlib)\n+\tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1\n+\n+extern_flags:\n+\trm -rf $(TMPDIR) && mkdir $(TMPDIR)\n+\t$(RUSTC) reproducible-build-aux.rs\n+\t$(RUSTC) reproducible-build.rs \\\n+\t\t--extern reproducible_build_aux=$(TMPDIR)/libreproducible_build_aux.rlib \\\n+\t\t--crate-type rlib\n+\tcp $(TMPDIR)/libreproducible_build_aux.rlib $(TMPDIR)/libbar.rlib\n+\tcp $(TMPDIR)/libreproducible_build.rlib $(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) reproducible-build.rs \\\n+\t\t--extern reproducible_build_aux=$(TMPDIR)/libbar.rlib \\\n+\t\t--crate-type rlib\n+\tcmp \"$(TMPDIR)/libreproducible_build.rlib\" \"$(TMPDIR)/libfoo.rlib\" || exit 1"}, {"sha": "a040c0f858d78d85a566c3c2d03a749240fd4023", "filename": "src/test/run-make/reproducible-build/reproducible-build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9d9d48d5b93fdb800eead15f658f47100e2d3c/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Freproducible-build%2Freproducible-build.rs?ref=2e9d9d48d5b93fdb800eead15f658f47100e2d3c", "patch": "@@ -28,7 +28,7 @@\n // - Trait object shims\n // - Fn Pointer shims\n \n-#![allow(dead_code)]\n+#![allow(dead_code, warnings)]\n \n extern crate reproducible_build_aux;\n "}]}