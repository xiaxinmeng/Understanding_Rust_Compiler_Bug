{"sha": "12515608cb6345e3a845288dfa552ed03e3b940d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNTE1NjA4Y2I2MzQ1ZTNhODQ1Mjg4ZGZhNTUyZWQwM2UzYjk0MGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:26Z"}, "message": "Rollup merge of #48380 - nikomatsakis:issue-48251-master, r=acrichto\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "cbcfa7bf061200520a14915668df56b60b6c2006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcfa7bf061200520a14915668df56b60b6c2006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12515608cb6345e3a845288dfa552ed03e3b940d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqXNqYACgkQO79NPi73\nn5g+sRAAyON4bjr8Zc7aULJr4ic8DVpeAiGOwQDH0EeKYBWIn0OwF3Vr1hx2VKth\nvkgESsd0ku8YjOPcAK9xOauYlX1decOz0gGHg580IV52wDKupHfpxsaXU5ZuXtmW\n+77u9jrcM5p0ThVKNT1lUEuPJI8PcvFT0F84pyU/Tm96GAQXp6E/UmL0HghXsczG\nVi4j/2bkpDNa34uCmID+aZHrKSREqFQShG8KHdAQmVOijhRGXsNP1E65rotTq5iD\nmVwSggw1g8Qeo3F5M5xt548wx3Wwq0k2dxJrGrDtkK067foxPAvyNzx/uOnkADG+\nxU7Ld4A33jF5k0kHm7s08TIdvHIdOcRQawFEkapg101Bx+UFL51cR5FSE51nyo/k\n1+o1r6bW07duFQL/vWAyAhKS9SRMvjdytu8rnLK7frBTJaQANequZAFCcuaYXjXg\nkwMet4bMdaYI7Yn59/yEgzX67aycvjp+hlvV+hPRtMVtU5eTxksbasdT4q/moewg\niCI3zYutTz5PzJjsNcIo55282BGY1LDn5IkBz3vKAtE7vkC1S1rfMNDA5+OUgGNG\nDwm06vQ7Tw3BCKJmWVI9FG+6DMt43WyaLNKnhsgpgpumqcT49/U41DMpZkkakoaQ\nE0NDzDTM6Ocj7DnLbkIxprHwgJjGXgd1+x5DjIPR59YISH+rRf0=\n=/9s8\n-----END PGP SIGNATURE-----", "payload": "tree cbcfa7bf061200520a14915668df56b60b6c2006\nparent fac7d7cfb2388b01a27f2165cff78c252726260c\nparent 566c6ac6bac479d4977339fc91bb497cb96342c6\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519859366 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1519859366 -0800\n\nRollup merge of #48380 - nikomatsakis:issue-48251-master, r=acrichto\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12515608cb6345e3a845288dfa552ed03e3b940d", "html_url": "https://github.com/rust-lang/rust/commit/12515608cb6345e3a845288dfa552ed03e3b940d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12515608cb6345e3a845288dfa552ed03e3b940d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac7d7cfb2388b01a27f2165cff78c252726260c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac7d7cfb2388b01a27f2165cff78c252726260c", "html_url": "https://github.com/rust-lang/rust/commit/fac7d7cfb2388b01a27f2165cff78c252726260c"}, {"sha": "566c6ac6bac479d4977339fc91bb497cb96342c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/566c6ac6bac479d4977339fc91bb497cb96342c6", "html_url": "https://github.com/rust-lang/rust/commit/566c6ac6bac479d4977339fc91bb497cb96342c6"}], "stats": {"total": 134, "additions": 115, "deletions": 19}, "files": [{"sha": "94db0baa3f95f883f9eb73855ce0c0ff24b939fa", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -64,7 +64,8 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32))\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n-        #[unwind]\n+        #[cfg_attr(stage0, unwind)]\n+        #[cfg_attr(not(stage0), unwind(allowed))]\n         fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32, col: u32) -> !;\n     }\n     let (file, line, col) = *file_line_col;"}, {"sha": "ca2fd561cadcfcc75d9bb719cc5937fee4227b31", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -286,7 +286,8 @@ unsafe fn find_eh_action(context: *mut uw::_Unwind_Context)\n // See docs in the `unwind` module.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n #[lang = \"eh_unwind_resume\"]\n-#[unwind]\n+#[cfg_attr(stage0, unwind)]\n+#[cfg_attr(not(stage0), unwind(allowed))]\n unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n     uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n }"}, {"sha": "a5cebc3e4d04b6eee6b74854f82d1146508878d9", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -112,7 +112,8 @@ pub unsafe extern \"C\" fn __rust_maybe_catch_panic(f: fn(*mut u8),\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[no_mangle]\n-#[unwind]\n+#[cfg_attr(stage0, unwind)]\n+#[cfg_attr(not(stage0), unwind(allowed))]\n pub unsafe extern \"C\" fn __rust_start_panic(data: usize, vtable: usize) -> u32 {\n     imp::panic(mem::transmute(raw::TraitObject {\n         data: data as *mut (),"}, {"sha": "090cd095380ee8dfcaffdaeb3600e664130105b3", "filename": "src/libpanic_unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh64_gnu.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -108,7 +108,8 @@ unsafe extern \"C\" fn rust_eh_personality(exceptionRecord: *mut c::EXCEPTION_RECO\n }\n \n #[lang = \"eh_unwind_resume\"]\n-#[unwind]\n+#[cfg_attr(stage0, unwind)]\n+#[cfg_attr(not(stage0), unwind(allowed))]\n unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: c::LPVOID) -> ! {\n     let params = [panic_ctx as c::ULONG_PTR];\n     c::RaiseException(RUST_PANIC,"}, {"sha": "50fba5faee747facb0f1309ebd900411f912982e", "filename": "src/libpanic_unwind/windows.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibpanic_unwind%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fwindows.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -79,18 +79,21 @@ pub enum EXCEPTION_DISPOSITION {\n pub use self::EXCEPTION_DISPOSITION::*;\n \n extern \"system\" {\n-    #[unwind]\n+    #[cfg_attr(stage0, unwind)]\n+    #[cfg_attr(not(stage0), unwind(allowed))]\n     pub fn RaiseException(dwExceptionCode: DWORD,\n                           dwExceptionFlags: DWORD,\n                           nNumberOfArguments: DWORD,\n                           lpArguments: *const ULONG_PTR);\n-    #[unwind]\n+    #[cfg_attr(stage0, unwind)]\n+    #[cfg_attr(not(stage0), unwind(allowed))]\n     pub fn RtlUnwindEx(TargetFrame: LPVOID,\n                        TargetIp: LPVOID,\n                        ExceptionRecord: *const EXCEPTION_RECORD,\n                        ReturnValue: LPVOID,\n                        OriginalContext: *const CONTEXT,\n                        HistoryTable: *const UNWIND_HISTORY_TABLE);\n-    #[unwind]\n+    #[cfg_attr(stage0, unwind)]\n+    #[cfg_attr(not(stage0), unwind(allowed))]\n     pub fn _CxxThrowException(pExceptionObject: *mut c_void, pThrowInfo: *mut u8);\n }"}, {"sha": "a325cfe3eaae33cab4a84971cc58eadcab21502b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -28,6 +28,7 @@ use std::mem;\n use std::u32;\n use syntax::abi::Abi;\n use syntax::ast;\n+use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use transform::MirSource;\n@@ -355,10 +356,9 @@ macro_rules! unpack {\n }\n \n fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                         fn_id: ast::NodeId,\n+                                         fn_def_id: DefId,\n                                          abi: Abi)\n                                          -> bool {\n-\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n \n@@ -370,9 +370,17 @@ fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n     // This is a special case: some functions have a C abi but are meant to\n     // unwind anyway. Don't stop them.\n-    if tcx.has_attr(tcx.hir.local_def_id(fn_id), \"unwind\") { return false; }\n+    let attrs = &tcx.get_attrs(fn_def_id);\n+    match attr::find_unwind_attr(Some(tcx.sess.diagnostic()), attrs) {\n+        None => {\n+            // FIXME(rust-lang/rust#48251) -- Had to disable\n+            // abort-on-panic for backwards compatibility reasons.\n+            false\n+        }\n \n-    return true;\n+        Some(UnwindAttr::Allowed) => false,\n+        Some(UnwindAttr::Aborts) => true,\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -399,13 +407,14 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         safety,\n         return_ty);\n \n+    let fn_def_id = tcx.hir.local_def_id(fn_id);\n     let call_site_scope = region::Scope::CallSite(body.value.hir_id.local_id);\n     let arg_scope = region::Scope::Arguments(body.value.hir_id.local_id);\n     let mut block = START_BLOCK;\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n     unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, block, |builder| {\n-        if should_abort_on_panic(tcx, fn_id, abi) {\n+        if should_abort_on_panic(tcx, fn_def_id, abi) {\n             builder.schedule_abort();\n         }\n "}, {"sha": "454ac64735c67900e37f40cf5212da99e247d7fe", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -55,7 +55,8 @@ extern {\n                                 data: *mut u8,\n                                 data_ptr: *mut usize,\n                                 vtable_ptr: *mut usize) -> u32;\n-    #[unwind]\n+    #[cfg_attr(stage0, unwind)]\n+    #[cfg_attr(not(stage0), unwind(allowed))]\n     fn __rust_start_panic(data: usize, vtable: usize) -> u32;\n }\n \n@@ -315,7 +316,8 @@ pub fn panicking() -> bool {\n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n #[lang = \"panic_fmt\"]\n-#[unwind]\n+#[cfg_attr(stage0, unwind)]\n+#[cfg_attr(not(stage0), unwind(allowed))]\n pub extern fn rust_begin_panic(msg: fmt::Arguments,\n                                file: &'static str,\n                                line: u32,"}, {"sha": "d0822b69aa692d079bc926331595db5ed2f2cc67", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -565,6 +565,51 @@ pub fn find_inline_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> In\n     })\n }\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub enum UnwindAttr {\n+    Allowed,\n+    Aborts,\n+}\n+\n+/// Determine what `#[unwind]` attribute is present in `attrs`, if any.\n+pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Option<UnwindAttr> {\n+    let syntax_error = |attr: &Attribute| {\n+        mark_used(attr);\n+        diagnostic.map(|d| {\n+            span_err!(d, attr.span, E0633, \"malformed `#[unwind]` attribute\");\n+        });\n+        None\n+    };\n+\n+    attrs.iter().fold(None, |ia, attr| {\n+        if attr.path != \"unwind\" {\n+            return ia;\n+        }\n+        let meta = match attr.meta() {\n+            Some(meta) => meta.node,\n+            None => return ia,\n+        };\n+        match meta {\n+            MetaItemKind::Word => {\n+                syntax_error(attr)\n+            }\n+            MetaItemKind::List(ref items) => {\n+                mark_used(attr);\n+                if items.len() != 1 {\n+                    syntax_error(attr)\n+                } else if list_contains_name(&items[..], \"allowed\") {\n+                    Some(UnwindAttr::Allowed)\n+                } else if list_contains_name(&items[..], \"aborts\") {\n+                    Some(UnwindAttr::Aborts)\n+                } else {\n+                    syntax_error(attr)\n+                }\n+            }\n+            _ => ia,\n+        }\n+    })\n+}\n+\n /// True if `#[inline]` or `#[inline(always)]` is present in `attrs`.\n pub fn requests_inline(attrs: &[Attribute]) -> bool {\n     match find_inline_attr(None, attrs) {"}, {"sha": "84ab0336f1671ceb5ac88a31008ad3be9eb2f9bc", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -342,6 +342,33 @@ fn main() {\n ```\n \"##,\n \n+E0633: r##\"\n+The `unwind` attribute was malformed.\n+\n+Erroneous code example:\n+\n+```ignore (compile_fail not working here; see Issue #43707)\n+#[unwind()] // error: expected one argument\n+pub extern fn something() {}\n+\n+fn main() {}\n+```\n+\n+The `#[unwind]` attribute should be used as follows:\n+\n+- `#[unwind(aborts)]` -- specifies that if a non-Rust ABI function\n+  should abort the process if it attempts to unwind. This is the safer\n+  and preferred option.\n+\n+- `#[unwind(allowed)]` -- specifies that a non-Rust ABI function\n+  should be allowed to unwind. This can easily result in Undefined\n+  Behavior (UB), so be careful.\n+\n+NB. The default behavior here is \"allowed\", but this is unspecified\n+and likely to change in the future.\n+\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "6444c846a8b2ed1107f1cd98a2eef26f1c7aa8ab", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -233,7 +233,7 @@ declare_features! (\n     // allow `extern \"platform-intrinsic\" { ... }`\n     (active, platform_intrinsics, \"1.4.0\", Some(27731)),\n \n-    // allow `#[unwind]`\n+    // allow `#[unwind(..)]`\n     // rust runtime internal\n     (active, unwind_attributes, \"1.4.0\", None),\n "}, {"sha": "aa73b11fb3813683534bc7286c502c13d36bfd54", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -83,7 +83,8 @@ pub enum _Unwind_Context {}\n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n extern \"C\" {\n-    #[unwind]\n+    #[cfg_attr(stage0, unwind)]\n+    #[cfg_attr(not(stage0), unwind(allowed))]\n     pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n     pub fn _Unwind_GetLanguageSpecificData(ctx: *mut _Unwind_Context) -> *mut c_void;\n@@ -220,7 +221,8 @@ if #[cfg(all(any(target_os = \"ios\", not(target_arch = \"arm\"))))] {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n     extern \"C\" {\n-        #[unwind]\n+        #[cfg_attr(stage0, unwind)]\n+        #[cfg_attr(not(stage0), unwind(allowed))]\n         pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n         pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                                  trace_argument: *mut c_void)\n@@ -229,7 +231,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n     extern \"C\" {\n-        #[unwind]\n+        #[cfg_attr(stage0, unwind)]\n+        #[cfg_attr(not(stage0), unwind(allowed))]\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n     }\n "}, {"sha": "90ee0c75680dce81eea4e1b04ec8eb8271199f7b", "filename": "src/test/codegen/extern-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -19,7 +19,7 @@ extern {\n     fn extern_fn();\n // CHECK-NOT: Function Attrs: nounwind\n // CHECK: declare void @unwinding_extern_fn\n-    #[unwind]\n+    #[unwind(allowed)]\n     fn unwinding_extern_fn();\n }\n "}, {"sha": "ef368ed604bea810890c7df702b1336b9c4e7214", "filename": "src/test/run-pass/abort-on-c-abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12515608cb6345e3a845288dfa552ed03e3b940d/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs?ref=12515608cb6345e3a845288dfa552ed03e3b940d", "patch": "@@ -14,11 +14,14 @@\n // ignore-cloudabi no env and process\n // ignore-emscripten no processes\n \n+#![feature(unwind_attributes)]\n+\n use std::{env, panic};\n use std::io::prelude::*;\n use std::io;\n use std::process::{Command, Stdio};\n \n+#[unwind(aborts)]\n extern \"C\" fn panic_in_ffi() {\n     panic!(\"Test\");\n }"}]}