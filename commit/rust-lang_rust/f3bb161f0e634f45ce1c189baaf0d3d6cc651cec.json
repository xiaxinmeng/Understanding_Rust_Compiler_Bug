{"sha": "f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYmIxNjFmMGU2MzRmNDVjZTFjMTg5YmFhZjBkM2Q2Y2M2NTFjZWM=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-08-01T20:48:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-08-29T18:08:29Z"}, "message": "Adapt codebase to the tool_lints", "tree": {"sha": "eb76c2258d0f32fcb6e503fe2f3f5a6250afaa42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb76c2258d0f32fcb6e503fe2f3f5a6250afaa42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "html_url": "https://github.com/rust-lang/rust/commit/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd4c538d462f640013a6bb6b7f1663e82447e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd4c538d462f640013a6bb6b7f1663e82447e1f", "html_url": "https://github.com/rust-lang/rust/commit/cfd4c538d462f640013a6bb6b7f1663e82447e1f"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "9a1808345a5949656d4aa9e9d69eec6e23d812c8", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n             },\n             hir::ExprKind::Assign(ref assignee, ref e) => {\n                 if let hir::ExprKind::Binary(op, ref l, ref r) = e.node {\n-                    #[allow(cyclomatic_complexity)]\n+                    #[allow(clippy::cyclomatic_complexity)]\n                     let lint = |assignee: &hir::Expr, rhs: &hir::Expr| {\n                         let ty = cx.tables.expr_ty(assignee);\n                         let rty = cx.tables.expr_ty(rhs);"}, {"sha": "3d3fa7b5e738e54fe3d78cc988c1b512ac1b3d5e", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         }\n         for (n, expr) in self.terminals.iter().enumerate() {\n             if SpanlessEq::new(self.cx).ignore_fn().eq_expr(e, expr) {\n-                #[allow(cast_possible_truncation)]\n+                #[allow(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Term(n as u8));\n             }\n             let negated = match e.node {\n@@ -150,14 +150,14 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                 _ => continue,\n             };\n             if SpanlessEq::new(self.cx).ignore_fn().eq_expr(&negated, expr) {\n-                #[allow(cast_possible_truncation)]\n+                #[allow(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Not(Box::new(Bool::Term(n as u8))));\n             }\n         }\n         let n = self.terminals.len();\n         self.terminals.push(e);\n         if n < 32 {\n-            #[allow(cast_possible_truncation)]\n+            #[allow(clippy::cast_possible_truncation)]\n             Ok(Bool::Term(n as u8))\n         } else {\n             Err(\"too many literals\".to_owned())"}, {"sha": "b126215c049ed8d0038bdf6cf6c7818b7217bad7", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,5 +1,4 @@\n-#![allow(cast_possible_truncation)]\n-#![allow(float_cmp)]\n+#![allow(clippy::float_cmp)]\n \n use rustc::lint::LateContext;\n use rustc::{span_bug, bug};"}, {"sha": "c975e31cec92cb534f02f3eab7fcb596a89e4dde", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n }\n \n #[cfg(feature = \"debugging\")]\n-#[allow(too_many_arguments)]\n+#[allow(clippy::too_many_arguments)]\n fn report_cc_bug(_: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, _: NodeId) {\n     span_bug!(\n         span,\n@@ -200,7 +200,7 @@ fn report_cc_bug(_: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts:\n     );\n }\n #[cfg(not(feature = \"debugging\"))]\n-#[allow(too_many_arguments)]\n+#[allow(clippy::too_many_arguments)]\n fn report_cc_bug(cx: &LateContext<'_, '_>, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, id: NodeId) {\n     if !is_allowed(cx, CYCLOMATIC_COMPLEXITY, id) {\n         cx.sess().span_note_without_error("}, {"sha": "4d603570ebed0b1c987048b798837037cdbec551", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -86,7 +86,7 @@ impl<'a> Iterator for Parser<'a> {\n /// `syntax::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n-#[allow(cast_possible_truncation)]\n+#[allow(clippy::cast_possible_truncation)]\n pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n     const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];"}, {"sha": "0271fee8a3c9d7f882b27db15967f779ecfa05ff", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -43,7 +43,7 @@ impl LintPass for UnportableVariant {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n-    #[allow(cast_possible_truncation, cast_sign_loss)]\n+    #[allow(clippy::cast_possible_truncation, clippy::cast_sign_loss)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;"}, {"sha": "56b99aa9449b77d81931ad6667beeaa8ddc56d7a", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -147,7 +147,7 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n }\n \n // FIXME: #600\n-#[allow(while_let_on_iterator)]\n+#[allow(clippy::while_let_on_iterator)]\n fn check_variant(\n     cx: &EarlyContext<'_>,\n     threshold: u64,"}, {"sha": "b6b342044806f5f66686617d9c917029693abaef", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ge | BinOpKind::Gt => (cx.tcx.lang_items().ord_trait(), true),\n             };\n             if let Some(trait_id) = trait_id {\n-                #[allow(match_same_arms)]\n+                #[allow(clippy::match_same_arms)]\n                 match (&left.node, &right.node) {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},"}, {"sha": "052275d7a4533e3cf2160e570dff320009028a2f", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n     }\n }\n \n-#[allow(cast_possible_wrap)]\n+#[allow(clippy::cast_possible_wrap)]\n fn check(cx: &LateContext<'_, '_>, e: &Expr, m: i8, span: Span, arg: Span) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, cx.tables, e) {\n         let check = match cx.tables.expr_ty(e).sty {"}, {"sha": "f94461b75a587324869158f86b3864e4f7d2d723", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -53,7 +53,7 @@ enum Side {\n }\n \n impl IntPlusOne {\n-    #[allow(cast_sign_loss)]\n+    #[allow(clippy::cast_sign_loss)]\n     fn check_lit(&self, lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.node {\n             return value == (target_value as u128);"}, {"sha": "f1a89c3d46bd8745316a327180948f9692b78676", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -5,9 +5,10 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(range_contains)]\n-#![allow(unknown_lints, shadow_reuse, missing_docs_in_private_items)]\n+#![allow(unknown_lints, clippy::shadow_reuse, clippy::missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![feature(macro_at_most_once_rep)]\n+#![feature(tool_lints)]\n #![warn(rust_2018_idioms)]\n \n use toml;\n@@ -933,7 +934,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n // only exists to let the dogfood integration test works.\n // Don't run clippy as an executable directly\n-#[allow(dead_code, print_stdout)]\n+#[allow(dead_code, clippy::print_stdout)]\n fn main() {\n     panic!(\"Please use the cargo-clippy executable\");\n }"}, {"sha": "f428a498b4dab8658b61a007f8bd40783dbbe50e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -714,7 +714,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    #[allow(cyclomatic_complexity)]\n+    #[allow(clippy::cyclomatic_complexity)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         if in_macro(expr.span) {\n             return;\n@@ -922,7 +922,7 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n     }\n \n     /// Check for `*or(foo())`.\n-    #[allow(too_many_arguments)]\n+    #[allow(clippy::too_many_arguments)]\n     fn check_general_case(\n         cx: &LateContext<'_, '_>,\n         name: &str,"}, {"sha": "93a83fe97ba78963348516cab49299ae1e9d1cc2", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -32,7 +32,7 @@ impl LintPass for NegMultiply {\n     }\n }\n \n-#[allow(match_same_arms)]\n+#[allow(clippy::match_same_arms)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref l, ref r) = e.node {"}, {"sha": "400a06c061e368c6ced977b9763f1191362a0e87", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1525,7 +1525,7 @@ enum FullInt {\n }\n \n impl FullInt {\n-    #[allow(cast_sign_loss)]\n+    #[allow(clippy::cast_sign_loss)]\n     fn cmp_s_u(s: i128, u: u128) -> Ordering {\n         if s < 0 {\n             Ordering::Less\n@@ -1744,7 +1744,7 @@ impl LintPass for ImplicitHasher {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n-    #[allow(cast_possible_truncation)]\n+    #[allow(clippy::cast_possible_truncation)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         use syntax_pos::BytePos;\n "}, {"sha": "fb131b9086a73178d23d6ca770ad87f19ef3917f", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-#![allow(print_stdout, use_debug)]\n+#![allow(clippy::print_stdout, clippy::use_debug)]\n \n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};"}, {"sha": "31e20f37e20dfab2df53f26d9dfcdbd5157d4c50", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,6 +1,6 @@\n //! Utility functions about comparison operators.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use rustc::hir::{BinOpKind, Expr};\n "}, {"sha": "47b71ae524f8a820e021d75255a7efdbec98c9b9", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,6 +1,6 @@\n //! Read configurations files.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use lazy_static::lazy_static;\n use std::{env, fmt, fs, io, path};"}, {"sha": "b63be9b86c8fb9bb31f50c56f9cfcb1fb6fe2977", "filename": "clippy_lints/src/utils/constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconstants.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,6 +1,6 @@\n //! This module contains some useful constants.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n /// List of the built-in types names.\n ///"}, {"sha": "42b37568a99bccaf0a5168f19e55679b223d85d6", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,7 +1,7 @@\n //! This module contains functions for retrieve the original AST from lowered\n //! `hir`.\n \n-#![deny(missing_docs_in_private_items)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use if_chain::if_chain;\n use rustc::{hir, ty};"}, {"sha": "93d73ca707e661c35c584aedb47e7658960ee390", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n         }.hash(&mut self.s);\n     }\n \n-    #[allow(many_single_char_names)]\n+    #[allow(clippy::many_single_char_names)]\n     pub fn hash_expr(&mut self, e: &Expr) {\n         if let Some(e) = constant_simple(self.cx, self.tables, e) {\n             return e.hash(&mut self.s);"}, {"sha": "b9a0435eb35b2660773319b8987993e273637c9d", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,4 +1,4 @@\n-#![allow(print_stdout, use_debug)]\n+#![allow(clippy::print_stdout, clippy::use_debug)]\n \n //! checks for attributes\n "}, {"sha": "4239b24d8172643f65c145c727c92db9a9dad84c", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,7 +1,5 @@\n //! Contains utility functions to generate suggestions.\n-#![deny(missing_docs_in_private_items)]\n-// currently ignores lifetimes and generics\n-#![allow(use_self)]\n+#![deny(clippy::missing_docs_in_private_items)]\n \n use matches::matches;\n use rustc::hir;\n@@ -40,7 +38,7 @@ impl Display for Sugg<'_> {\n     }\n }\n \n-#[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n+#[allow(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext<'_, '_>, expr: &hir::Expr) -> Option<Self> {"}, {"sha": "6885c2aed2b3589d9aaf76a014da84993c2343b6", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,13 +1,14 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![allow(unknown_lints, missing_docs_in_private_items)]\n+#![feature(tool_lints)]\n+#![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n use rustc_driver::{self, driver::CompileController, Compilation};\n use rustc_plugin;\n use std::process::{exit, Command};\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }"}, {"sha": "a7167ac10de4f4a599c28adef05934570d96e056", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,8 +1,9 @@\n // error-pattern:cargo-clippy\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n+#![feature(tool_lints)]\n #![allow(unknown_lints)]\n-#![allow(missing_docs_in_private_items)]\n+#![allow(clippy::missing_docs_in_private_items)]\n #![warn(rust_2018_idioms)]\n \n use rustc_plugin::Registry;"}, {"sha": "12c07f60a11c1eff59b57a6621644da5d37795c2", "filename": "src/main.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3bb161f0e634f45ce1c189baaf0d3d6cc651cec/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=f3bb161f0e634f45ce1c189baaf0d3d6cc651cec", "patch": "@@ -1,7 +1,8 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-#![allow(unknown_lints, missing_docs_in_private_items)]\n+#![feature(tool_lints)]\n+#![allow(unknown_lints, clippy::missing_docs_in_private_items)]\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code.\n \n@@ -28,12 +29,12 @@ it to allow or deny lints from the code, eg.:\n     #[cfg_attr(feature = \"cargo-clippy\", allow(needless_lifetimes))]\n \"#;\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_help() {\n     println!(\"{}\", CARGO_CLIPPY_HELP);\n }\n \n-#[allow(print_stdout)]\n+#[allow(clippy::print_stdout)]\n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n }"}]}