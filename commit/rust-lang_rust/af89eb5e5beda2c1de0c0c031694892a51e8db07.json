{"sha": "af89eb5e5beda2c1de0c0c031694892a51e8db07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODllYjVlNWJlZGEyYzFkZTBjMGMwMzE2OTQ4OTJhNTFlOGRiMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-06T02:25:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-06T02:25:08Z"}, "message": "Auto merge of #70832 - Centril:rollup-ixc09ve, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #70519 (Tweak output of type params and constraints in the wrong order)\n - #70704 (Make panic unwind the default for aarch64-*-windows-msvc targets)\n - #70713 (Prefer sysroot from rustc in same directory as rust-gdb)\n - #70739 (def_collector, visit_fn: account for no body)\n - #70827 (Use smaller span for suggestion restricting lifetime)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3c84417fe48d024af8cb27fcb27343b332536d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c84417fe48d024af8cb27fcb27343b332536d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07", "html_url": "https://github.com/rust-lang/rust/commit/af89eb5e5beda2c1de0c0c031694892a51e8db07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af89eb5e5beda2c1de0c0c031694892a51e8db07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f", "html_url": "https://github.com/rust-lang/rust/commit/83f8c02eb92b0dfc46ae27cb71421d7bbcd7f30f"}, {"sha": "3faec69865f8d2b9abab76c7c2f0371361e167a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3faec69865f8d2b9abab76c7c2f0371361e167a3", "html_url": "https://github.com/rust-lang/rust/commit/3faec69865f8d2b9abab76c7c2f0371361e167a3"}], "stats": {"total": 381, "additions": 273, "deletions": 108}, "files": [{"sha": "908bfa355571ba1a33d6b01554cafbce58739d42", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -3564,6 +3564,7 @@ dependencies = [\n name = \"rustc_ast_passes\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools 0.8.0\",\n  \"log\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "b950cea79edfeaef99761ae1ab76d5cee09cf974", "filename": "src/etc/rust-gdb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Fetc%2Frust-gdb", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Fetc%2Frust-gdb", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdb?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -2,8 +2,16 @@\n # Exit if anything fails\n set -e\n \n+# Prefer rustc in the same directory as this script\n+DIR=\"$(dirname \"$0\")\"\n+if [ -x \"$DIR/rustc\" ]; then\n+  RUSTC=\"$DIR/rustc\"\n+else\n+  RUSTC=\"rustc\"\n+fi\n+\n # Find out where the pretty printer Python module is\n-RUSTC_SYSROOT=`rustc --print=sysroot`\n+RUSTC_SYSROOT=\"$(\"$RUSTC\" --print=sysroot)\"\n GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n \n # Run GDB with the additional arguments that load the pretty printers"}, {"sha": "9744913b686501d83f864bd1c5b2d8674f9cd913", "filename": "src/etc/rust-gdbgui", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Fetc%2Frust-gdbgui", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Fetc%2Frust-gdbgui", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-gdbgui?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -31,8 +31,16 @@ icon to start your program running.\n     exit 0\n fi\n \n+# Prefer rustc in the same directory as this script\n+DIR=\"$(dirname \"$0\")\"\n+if [ -x \"$DIR/rustc\" ]; then\n+  RUSTC=\"$DIR/rustc\"\n+else\n+  RUSTC=\"rustc\"\n+fi\n+\n # Find out where the pretty printer Python module is\n-RUSTC_SYSROOT=`rustc --print=sysroot`\n+RUSTC_SYSROOT=\"$(\"$RUSTC\" --print=sysroot)\"\n GDB_PYTHON_MODULE_DIRECTORY=\"$RUSTC_SYSROOT/lib/rustlib/etc\"\n \n # Set the environment variable `RUST_GDB` to overwrite the call to a"}, {"sha": "f791fe82a27e7dcf7182111f50f0eda14ee53a8f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -47,9 +47,6 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n-    } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {\n-        #[path = \"dummy.rs\"]\n-        mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;"}, {"sha": "9eff37f17663a4fbcaa470a9883c44dbdccaa6d8", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -117,7 +117,7 @@ mod imp {\n     }\n }\n \n-#[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n+#[cfg(not(target_arch = \"x86\"))]\n #[macro_use]\n mod imp {\n     pub type ptr_t = u32;"}, {"sha": "f91cbe51d85d184094fdac9e63d0b363b45181c7", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -300,8 +300,8 @@ pub enum GenericBound {\n impl GenericBound {\n     pub fn span(&self) -> Span {\n         match self {\n-            &GenericBound::Trait(ref t, ..) => t.span,\n-            &GenericBound::Outlives(ref l) => l.ident.span,\n+            GenericBound::Trait(ref t, ..) => t.span,\n+            GenericBound::Outlives(ref l) => l.ident.span,\n         }\n     }\n }"}, {"sha": "e4d1d79abb2d6aecaa7834c1b19850db4417226e", "filename": "src/librustc_ast_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2FCargo.toml?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -9,6 +9,7 @@ name = \"rustc_ast_passes\"\n path = \"lib.rs\"\n \n [dependencies]\n+itertools = \"0.8\"\n log = \"0.4\"\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }"}, {"sha": "9563325fe329e8af41be1145bebb285ca0d9be20", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -6,6 +6,7 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n+use itertools::{Either, Itertools};\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::expand::is_proc_macro_attr;\n@@ -14,7 +15,7 @@ use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, struct_span_err, Applicability};\n+use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_session::lint::LintBuffer;\n@@ -640,31 +641,70 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn correct_generic_order_suggestion(&self, data: &AngleBracketedArgs) -> String {\n+        // Lifetimes always come first.\n+        let lt_sugg = data.args.iter().filter_map(|arg| match arg {\n+            AngleBracketedArg::Arg(lt @ GenericArg::Lifetime(_)) => {\n+                Some(pprust::to_string(|s| s.print_generic_arg(lt)))\n+            }\n+            _ => None,\n+        });\n+        let args_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(GenericArg::Lifetime(_)) | AngleBracketedArg::Constraint(_) => {\n+                None\n+            }\n+            AngleBracketedArg::Arg(arg) => Some(pprust::to_string(|s| s.print_generic_arg(arg))),\n+        });\n+        // Constraints always come last.\n+        let constraint_sugg = data.args.iter().filter_map(|a| match a {\n+            AngleBracketedArg::Arg(_) => None,\n+            AngleBracketedArg::Constraint(c) => {\n+                Some(pprust::to_string(|s| s.print_assoc_constraint(c)))\n+            }\n+        });\n+        format!(\n+            \"<{}>\",\n+            lt_sugg.chain(args_sugg).chain(constraint_sugg).collect::<Vec<String>>().join(\", \")\n+        )\n+    }\n+\n     /// Enforce generic args coming before constraints in `<...>` of a path segment.\n     fn check_generic_args_before_constraints(&self, data: &AngleBracketedArgs) {\n         // Early exit in case it's partitioned as it should be.\n         if data.args.iter().is_partitioned(|arg| matches!(arg, AngleBracketedArg::Arg(_))) {\n             return;\n         }\n         // Find all generic argument coming after the first constraint...\n-        let mut misplaced_args = Vec::new();\n-        let mut first = None;\n-        for arg in &data.args {\n-            match (arg, first) {\n-                (AngleBracketedArg::Arg(a), Some(_)) => misplaced_args.push(a.span()),\n-                (AngleBracketedArg::Constraint(c), None) => first = Some(c.span),\n-                (AngleBracketedArg::Arg(_), None) | (AngleBracketedArg::Constraint(_), Some(_)) => {\n-                }\n-            }\n-        }\n+        let (constraint_spans, arg_spans): (Vec<Span>, Vec<Span>) =\n+            data.args.iter().partition_map(|arg| match arg {\n+                AngleBracketedArg::Constraint(c) => Either::Left(c.span),\n+                AngleBracketedArg::Arg(a) => Either::Right(a.span()),\n+            });\n+        let args_len = arg_spans.len();\n+        let constraint_len = constraint_spans.len();\n         // ...and then error:\n         self.err_handler()\n             .struct_span_err(\n-                misplaced_args.clone(),\n+                arg_spans.clone(),\n                 \"generic arguments must come before the first constraint\",\n             )\n-            .span_label(first.unwrap(), \"the first constraint is provided here\")\n-            .span_labels(misplaced_args, \"generic argument\")\n+            .span_label(constraint_spans[0], &format!(\"constraint{}\", pluralize!(constraint_len)))\n+            .span_label(\n+                *arg_spans.iter().last().unwrap(),\n+                &format!(\"generic argument{}\", pluralize!(args_len)),\n+            )\n+            .span_labels(constraint_spans, \"\")\n+            .span_labels(arg_spans, \"\")\n+            .span_suggestion_verbose(\n+                data.span,\n+                &format!(\n+                    \"move the constraint{} after the generic argument{}\",\n+                    pluralize!(constraint_len),\n+                    pluralize!(args_len)\n+                ),\n+                self.correct_generic_order_suggestion(&data),\n+                Applicability::MachineApplicable,\n+            )\n             .emit();\n     }\n }"}, {"sha": "f68868633f148c4e8997de48a8ffc63fab3aefa3", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -869,7 +869,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n+    pub fn print_assoc_constraint(&mut self, constraint: &ast::AssocTyConstraint) {\n         self.print_ident(constraint.ident);\n         self.s.space();\n         match &constraint.kind {\n@@ -883,7 +883,7 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) {\n         match generic_arg {\n             GenericArg::Lifetime(lt) => self.print_lifetime(*lt),\n             GenericArg::Type(ty) => self.print_type(ty),"}, {"sha": "2dbd9f4e52fad36f5633d7faf18fc224771b51d6", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -315,6 +315,20 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.span_suggestion_verbose(sp, msg, suggestion, applicability);\n+        self\n+    }\n+\n     pub fn span_suggestion_hidden(\n         &mut self,\n         sp: Span,"}, {"sha": "7645182ad1fb33a39809bd08cef6ea354343e83e", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -208,45 +208,34 @@ impl BorrowExplanation {\n                     );\n                 };\n \n-                self.add_lifetime_bound_suggestion_to_diagnostic(\n-                    tcx,\n-                    err,\n-                    &category,\n-                    span,\n-                    region_name,\n-                );\n+                self.add_lifetime_bound_suggestion_to_diagnostic(err, &category, span, region_name);\n             }\n             _ => {}\n         }\n     }\n-    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic<'tcx>(\n+    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n         category: &ConstraintCategory,\n         span: Span,\n         region_name: &RegionName,\n     ) {\n         if let ConstraintCategory::OpaqueType = category {\n-            if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n-                let suggestable_name = if region_name.was_named() {\n-                    region_name.to_string()\n-                } else {\n-                    \"'_\".to_string()\n-                };\n+            let suggestable_name =\n+                if region_name.was_named() { region_name.to_string() } else { \"'_\".to_string() };\n \n-                err.span_suggestion(\n-                    span,\n-                    &format!(\n-                        \"you can add a bound to the {}to make it last less than \\\n-                             `'static` and match `{}`\",\n-                        category.description(),\n-                        region_name,\n-                    ),\n-                    format!(\"{} + {}\", snippet, suggestable_name),\n-                    Applicability::Unspecified,\n-                );\n-            }\n+            let msg = format!(\n+                \"you can add a bound to the {}to make it last less than `'static` and match `{}`\",\n+                category.description(),\n+                region_name,\n+            );\n+\n+            err.span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                &msg,\n+                format!(\" + {}\", suggestable_name),\n+                Applicability::Unspecified,\n+            );\n         }\n     }\n }"}, {"sha": "71cedb208fcf283edd49328fb6be8016c891bf54", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -2,6 +2,7 @@ use log::debug;\n use rustc_ast::ast::*;\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, FnKind};\n+use rustc_ast::walk_list;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions::*;\n@@ -117,10 +118,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 // we must mirror everything that `visit::walk_fn` below does.\n                 self.visit_fn_header(&sig.header);\n                 visit::walk_fn_decl(self, &sig.decl);\n-                if let Some(body) = body {\n-                    let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n-                    self.with_parent(closure_def, |this| this.visit_block(body));\n-                }\n+                let closure_def = self.create_def(closure_id, DefPathData::ClosureExpr, span);\n+                self.with_parent(closure_def, |this| walk_list!(this, visit_block, body));\n                 return;\n             }\n         }"}, {"sha": "8c03f1e8a7eab9f6ae5d8950b7cc88ae23dbacc4", "filename": "src/librustc_target/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -1,14 +1,11 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n     base.features = \"+neon,+fp-armv8\".to_string();\n \n-    // FIXME: this shouldn't be panic=abort, it should be panic=unwind\n-    base.panic_strategy = PanicStrategy::Abort;\n-\n     Ok(Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "6a8d148259ac3603fdf333f440d2598aaa11b4b1", "filename": "src/librustc_target/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -1,13 +1,10 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetResult};\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n \n-    // FIXME: this shouldn't be panic=abort, it should be panic=unwind\n-    base.panic_strategy = PanicStrategy::Abort;\n-\n     Ok(Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "027e428197f3702599cfbb632883768175f49173", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -1 +1 @@\n-Subproject commit 130721d6f4e6cba3b910ccdf5e0aa62b9dffc95f\n+Subproject commit 027e428197f3702599cfbb632883768175f49173"}, {"sha": "9cff4bcd8b579df62d664c6f3b3f9cdc17d0833c", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -14,7 +14,7 @@ LL |     }\n help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n    |\n LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                                                                   ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bc61b3b74e2175598aadd89cfe0b4dd49688b0d1", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -4,7 +4,12 @@ error: generic arguments must come before the first constraint\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                         -------  ^ generic argument\n    |                         |\n-   |                         the first constraint is provided here\n+   |                         constraint\n+   |\n+help: move the constraint after the generic argument\n+   |\n+LL | pub fn test<W, I: Trait<W, Item = ()> >() {}\n+   |                        ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cc36f054bc3a0c3ca9b2a4f170d708537d9c8e0d", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+async fn free(); //~ ERROR without a body\n+\n+struct A;\n+impl A {\n+    async fn inherent(); //~ ERROR without body\n+}\n+\n+trait B {\n+    async fn associated();\n+    //~^ ERROR cannot be declared `async`\n+}\n+impl B for A {\n+    async fn associated(); //~ ERROR without body\n+    //~^ ERROR cannot be declared `async`\n+    //~| ERROR incompatible type for trait\n+}\n+\n+fn main() {}"}, {"sha": "a324d04d394cfe708dbc03876d3465a77325ef74", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -0,0 +1,65 @@\n+error: free function without a body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:3:1\n+   |\n+LL | async fn free();\n+   | ^^^^^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the function: `{ <body> }`\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:7:5\n+   |\n+LL |     async fn inherent();\n+   |     ^^^^^^^^^^^^^^^^^^^-\n+   |                        |\n+   |                        help: provide a definition for the function: `{ <body> }`\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n+   |\n+LL |     async fn associated();\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+   |\n+LL |     async fn associated();\n+   |     ^^^^^^^^^^^^^^^^^^^^^-\n+   |                          |\n+   |                          help: provide a definition for the function: `{ <body> }`\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+   |\n+LL |     async fn associated();\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error[E0053]: method `associated` has an incompatible type for trait\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:26\n+   |\n+LL |     async fn associated();\n+   |                          - type in trait\n+...\n+LL |     async fn associated();\n+   |                          ^\n+   |                          |\n+   |                          the `Output` of this `async fn`'s found opaque type\n+   |                          expected `()`, found opaque type\n+   |\n+   = note: expected fn pointer `fn()`\n+              found fn pointer `fn() -> impl std::future::Future`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0053, E0706.\n+For more information about an error, try `rustc --explain E0053`."}, {"sha": "3bb6fd6e4f423587337a3b60fb28cb1169da9320", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af89eb5e5beda2c1de0c0c031694892a51e8db07/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=af89eb5e5beda2c1de0c0c031694892a51e8db07", "patch": "@@ -4,79 +4,103 @@ error: generic arguments must come before the first constraint\n LL | struct A<T, M: One<A=(), T>> {\n    |                    ----  ^ generic argument\n    |                    |\n-   |                    the first constraint is provided here\n+   |                    constraint\n+   |\n+help: move the constraint after the generic argument\n+   |\n+LL | struct A<T, M: One<T, A = ()>> {\n+   |                   ^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:33:43\n    |\n LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n-   |                                     ----  ^  ^^ generic argument\n-   |                                     |     |\n-   |                                     |     generic argument\n-   |                                     the first constraint is provided here\n+   |                                     ----  ^  ^^ generic arguments\n+   |                                     |\n+   |                                     constraint\n+   |\n+help: move the constraint after the generic arguments\n+   |\n+LL | struct Al<'a, T, M: OneWithLifetime<'a, T, A = ()>> {\n+   |                                    ^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:40:46\n    |\n LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> {\n-   |                            ----              ^  ^  ^ generic argument\n-   |                            |                 |  |\n-   |                            |                 |  generic argument\n-   |                            |                 generic argument\n-   |                            the first constraint is provided here\n+   |                            ----  ----  ----  ^  ^  ^ generic arguments\n+   |                            |\n+   |                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct B<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n   --> $DIR/suggest-move-types.rs:48:71\n    |\n LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n-   |                                                     ----              ^  ^  ^  ^^  ^^  ^^ generic argument\n-   |                                                     |                 |  |  |  |   |\n-   |                                                     |                 |  |  |  |   generic argument\n-   |                                                     |                 |  |  |  generic argument\n-   |                                                     |                 |  |  generic argument\n-   |                                                     |                 |  generic argument\n-   |                                                     |                 generic argument\n-   |                                                     the first constraint is provided here\n+   |                                                     ----  ----  ----  ^  ^  ^  ^^  ^^  ^^ generic arguments\n+   |                                                     |\n+   |                                                     constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:57:49\n+  --> $DIR/suggest-move-types.rs:57:28\n    |\n LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> {\n-   |                               ----              ^  ^ generic argument\n-   |                               |                 |\n-   |                               |                 generic argument\n-   |                               the first constraint is provided here\n+   |                            ^  ----  ----  ----  ^  ^ generic arguments\n+   |                               |\n+   |                               constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct C<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:65:78\n+  --> $DIR/suggest-move-types.rs:65:53\n    |\n LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n-   |                                                            ----              ^  ^^  ^  ^^ generic argument\n-   |                                                            |                 |  |   |\n-   |                                                            |                 |  |   generic argument\n-   |                                                            |                 |  generic argument\n-   |                                                            |                 generic argument\n-   |                                                            the first constraint is provided here\n+   |                                                     ^  ^^  ----  ----  ----  ^  ^^  ^  ^^ generic arguments\n+   |                                                            |\n+   |                                                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:74:43\n+  --> $DIR/suggest-move-types.rs:74:28\n    |\n LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> {\n-   |                               ----        ^        ^ generic argument\n-   |                               |           |\n-   |                               |           generic argument\n-   |                               the first constraint is provided here\n+   |                            ^  ----  ----  ^  ----  ^ generic arguments\n+   |                               |\n+   |                               constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct D<T, U, V, M: Three<T, U, V, A = (), B = (), C = ()>> {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: generic arguments must come before the first constraint\n-  --> $DIR/suggest-move-types.rs:82:72\n+  --> $DIR/suggest-move-types.rs:82:53\n    |\n LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n-   |                                                            ----        ^  ^^        ^  ^^ generic argument\n-   |                                                            |           |  |         |\n-   |                                                            |           |  |         generic argument\n-   |                                                            |           |  generic argument\n-   |                                                            |           generic argument\n-   |                                                            the first constraint is provided here\n+   |                                                     ^  ^^  ----  ----  ^  ^^  ----  ^  ^^ generic arguments\n+   |                                                            |\n+   |                                                            constraints\n+   |\n+help: move the constraints after the generic arguments\n+   |\n+LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<'a, 'b, 'c, T, U, V, A = (), B = (), C = ()>> {\n+   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0747]: type provided when a lifetime was expected\n   --> $DIR/suggest-move-types.rs:33:43"}]}