{"sha": "69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "node_id": "C_kwDOAAsO6NoAKDY5YTc0OTU1ZmQ5ZGZkMjg2NDdiOGE0YzE4YWJjM2RjZWNiNTY5NmQ", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-02T05:25:08Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-10-27T17:16:15Z"}, "message": "Use `PkgType` to determine which packages to add to the manifest\n\nPreviously, these had to be hard-coded (i.e. specified in both `PkgType` and `fn package`). Now they only have to be specified in `PkgType`.", "tree": {"sha": "3157c110590bb7b77291ce081f910247d7e839c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3157c110590bb7b77291ce081f910247d7e839c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "html_url": "https://github.com/rust-lang/rust/commit/69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a74955fd9dfd28647b8a4c18abc3dcecb5696d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494cb47852ef7bb2cc14f1f440d77722bf0f759b", "url": "https://api.github.com/repos/rust-lang/rust/commits/494cb47852ef7bb2cc14f1f440d77722bf0f759b", "html_url": "https://github.com/rust-lang/rust/commit/494cb47852ef7bb2cc14f1f440d77722bf0f759b"}], "stats": {"total": 105, "additions": 84, "deletions": 21}, "files": [{"sha": "726275988e095bd0ce3724083e02f45a5438e0fa", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/69a74955fd9dfd28647b8a4c18abc3dcecb5696d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a74955fd9dfd28647b8a4c18abc3dcecb5696d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "patch": "@@ -283,28 +283,15 @@ impl Builder {\n     }\n \n     fn add_packages_to(&mut self, manifest: &mut Manifest) {\n-        macro_rules! package {\n-            ($name:expr, $targets:expr) => {\n-                self.package($name, &mut manifest.pkg, $targets, &[])\n-            };\n+        for pkg in PkgType::all() {\n+            let fallback = if pkg.use_docs_fallback() { DOCS_FALLBACK } else { &[] };\n+            self.package(\n+                &pkg.manifest_component_name(),\n+                &mut manifest.pkg,\n+                pkg.targets(),\n+                fallback,\n+            );\n         }\n-        package!(\"rustc\", HOSTS);\n-        package!(\"rustc-dev\", HOSTS);\n-        package!(\"reproducible-artifacts\", HOSTS);\n-        package!(\"rustc-docs\", HOSTS);\n-        package!(\"cargo\", HOSTS);\n-        package!(\"rust-mingw\", MINGW);\n-        package!(\"rust-std\", TARGETS);\n-        self.package(\"rust-docs\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n-        self.package(\"rust-docs-json-preview\", &mut manifest.pkg, HOSTS, DOCS_FALLBACK);\n-        package!(\"rust-src\", &[\"*\"]);\n-        package!(\"rls-preview\", HOSTS);\n-        package!(\"rust-analyzer-preview\", HOSTS);\n-        package!(\"clippy-preview\", HOSTS);\n-        package!(\"miri-preview\", HOSTS);\n-        package!(\"rustfmt-preview\", HOSTS);\n-        package!(\"rust-analysis\", TARGETS);\n-        package!(\"llvm-tools-preview\", TARGETS);\n     }\n \n     fn add_artifacts_to(&mut self, manifest: &mut Manifest) {\n@@ -500,6 +487,12 @@ impl Builder {\n         targets: &[&str],\n         fallback: &[(&str, &str)],\n     ) {\n+        if pkgname == \"rust\" {\n+            // This is handled specially by `rust_package` later.\n+            // Order is important, so don't call `rust_package` here.\n+            return;\n+        }\n+\n         let version_info = self\n             .versions\n             .version(&PkgType::from_component(pkgname))"}, {"sha": "5aef232d7abf4a22ed288a5ab0793a772ff5bd68", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/69a74955fd9dfd28647b8a4c18abc3dcecb5696d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a74955fd9dfd28647b8a4c18abc3dcecb5696d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=69a74955fd9dfd28647b8a4c18abc3dcecb5696d", "patch": "@@ -17,6 +17,13 @@ macro_rules! pkg_type {\n         }\n \n         impl PkgType {\n+            fn is_preview(&self) -> bool {\n+                match self {\n+                    $( $( $($is_preview)? PkgType::$variant => true, )? )+\n+                    _ => false,\n+                }\n+            }\n+\n             pub(crate) fn from_component(component: &str) -> Self {\n                 match component {\n                     $( $component  $( | concat!($($is_preview)? $component, \"-preview\") )? => PkgType::$variant,)+\n@@ -31,6 +38,11 @@ macro_rules! pkg_type {\n                     PkgType::Other(component) => component,\n                 }\n             }\n+\n+            /// Component name in the manifest. In particular, this includes the `-preview` suffix where appropriate.\n+            pub(crate) fn all() -> &'static [PkgType] {\n+                &[ $(PkgType::$variant),+ ]\n+            }\n         }\n     }\n }\n@@ -39,7 +51,14 @@ pkg_type! {\n     Rust = \"rust\",\n     RustSrc = \"rust-src\",\n     Rustc = \"rustc\",\n+    RustcDev = \"rustc-dev\",\n+    RustcDocs = \"rustc-docs\",\n+    ReproducibleArtifacts = \"reproducible-artifacts\",\n+    RustMingw = \"rust-mingw\",\n+    RustStd = \"rust-std\",\n     Cargo = \"cargo\",\n+    HtmlDocs = \"rust-docs\",\n+    RustAnalysis = \"rust-analysis\",\n     Rls = \"rls\"; preview = true,\n     RustAnalyzer = \"rust-analyzer\"; preview = true,\n     Clippy = \"clippy\"; preview = true,\n@@ -50,6 +69,15 @@ pkg_type! {\n }\n \n impl PkgType {\n+    // / Component name in the manifest. In particular, this includes the `-preview` suffix where appropriate.\n+    pub(crate) fn manifest_component_name(&self) -> String {\n+        if self.is_preview() {\n+            format!(\"{}-preview\", self.tarball_component_name())\n+        } else {\n+            self.tarball_component_name().to_string()\n+        }\n+    }\n+\n     /// Whether this package has the same version as Rust itself, or has its own `version` and\n     /// `git-commit-hash` files inside the tarball.\n     fn should_use_rust_version(&self) -> bool {\n@@ -63,17 +91,59 @@ impl PkgType {\n             PkgType::Miri => false,\n \n             PkgType::Rust => true,\n+            PkgType::RustStd => true,\n             PkgType::RustSrc => true,\n             PkgType::Rustc => true,\n             PkgType::JsonDocs => true,\n+            PkgType::HtmlDocs => true,\n+            PkgType::RustcDev => true,\n+            PkgType::RustcDocs => true,\n+            PkgType::ReproducibleArtifacts => true,\n+            PkgType::RustMingw => true,\n+            PkgType::RustAnalysis => true,\n             PkgType::Other(_) => true,\n         }\n     }\n \n+    pub(crate) fn targets(&self) -> &[&str] {\n+        use crate::{HOSTS, MINGW, TARGETS};\n+        use PkgType::*;\n+\n+        match self {\n+            Rust => HOSTS, // doesn't matter in practice, but return something to avoid panicking\n+            Rustc => HOSTS,\n+            RustcDev => HOSTS,\n+            ReproducibleArtifacts => HOSTS,\n+            RustcDocs => HOSTS,\n+            Cargo => HOSTS,\n+            RustMingw => MINGW,\n+            RustStd => TARGETS,\n+            HtmlDocs => HOSTS,\n+            JsonDocs => HOSTS,\n+            RustSrc => &[\"*\"],\n+            Rls => HOSTS,\n+            RustAnalyzer => HOSTS,\n+            Clippy => HOSTS,\n+            Miri => HOSTS,\n+            Rustfmt => HOSTS,\n+            RustAnalysis => TARGETS,\n+            LlvmTools => TARGETS,\n+            Other(pkg) => panic!(\"add {pkg} to the list of known `PkgType`s\"),\n+        }\n+    }\n+\n     /// Whether this package is target-independent or not.\n     fn target_independent(&self) -> bool {\n         *self == PkgType::RustSrc\n     }\n+\n+    /// Whether to package these target-specific docs for another similar target.\n+    pub(crate) fn use_docs_fallback(&self) -> bool {\n+        match self {\n+            PkgType::JsonDocs | PkgType::HtmlDocs => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Debug, Default, Clone)]"}]}