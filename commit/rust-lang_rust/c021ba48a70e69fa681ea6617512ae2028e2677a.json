{"sha": "c021ba48a70e69fa681ea6617512ae2028e2677a", "node_id": "C_kwDOAAsO6NoAKGMwMjFiYTQ4YTcwZTY5ZmE2ODFlYTY2MTc1MTJhZTIwMjhlMjY3N2E", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-09T22:20:43Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T23:58:22Z"}, "message": "Delete Decoder::read_struct", "tree": {"sha": "a559aec34a2ed348bcd169d2a18021812213e1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a559aec34a2ed348bcd169d2a18021812213e1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c021ba48a70e69fa681ea6617512ae2028e2677a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c021ba48a70e69fa681ea6617512ae2028e2677a", "html_url": "https://github.com/rust-lang/rust/commit/c021ba48a70e69fa681ea6617512ae2028e2677a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c021ba48a70e69fa681ea6617512ae2028e2677a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a421b631ba0af42878250174e57ee25b8f7dbf03", "url": "https://api.github.com/repos/rust-lang/rust/commits/a421b631ba0af42878250174e57ee25b8f7dbf03", "html_url": "https://github.com/rust-lang/rust/commit/a421b631ba0af42878250174e57ee25b8f7dbf03"}], "stats": {"total": 178, "additions": 77, "deletions": 101}, "files": [{"sha": "af8b85f25fdcc551034b2c87bfa276bc9e79a97f", "filename": "compiler/rustc_macros/src/serialize.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fserialize.rs?ref=c021ba48a70e69fa681ea6617512ae2028e2677a", "patch": "@@ -42,15 +42,7 @@ fn decodable_body(\n     }\n     let ty_name = s.ast().ident.to_string();\n     let decode_body = match s.variants() {\n-        [vi] => {\n-            let construct = vi.construct(|field, index| decode_field(field, index, true));\n-            quote! {\n-                ::rustc_serialize::Decoder::read_struct(\n-                    __decoder,\n-                    |__decoder| { #construct },\n-                )\n-            }\n-        }\n+        [vi] => vi.construct(|field, index| decode_field(field, index, true)),\n         variants => {\n             let match_inner: TokenStream = variants\n                 .iter()"}, {"sha": "8c85605c0301304e2dc4c85d6ef8d0d4e144ea9c", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=c021ba48a70e69fa681ea6617512ae2028e2677a", "patch": "@@ -122,29 +122,26 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n         let mut edge_list_data = Vec::with_capacity(edge_count);\n \n         for _index in 0..node_count {\n-            d.read_struct(|d| {\n-                let dep_node: DepNode<K> = d.read_struct_field(\"node\", Decodable::decode);\n-                let _i: SerializedDepNodeIndex = nodes.push(dep_node);\n-                debug_assert_eq!(_i.index(), _index);\n-\n-                let fingerprint: Fingerprint =\n-                    d.read_struct_field(\"fingerprint\", Decodable::decode);\n-                let _i: SerializedDepNodeIndex = fingerprints.push(fingerprint);\n-                debug_assert_eq!(_i.index(), _index);\n-\n-                d.read_struct_field(\"edges\", |d| {\n-                    d.read_seq(|d, len| {\n-                        let start = edge_list_data.len().try_into().unwrap();\n-                        for _ in 0..len {\n-                            let edge = d.read_seq_elt(Decodable::decode);\n-                            edge_list_data.push(edge);\n-                        }\n-                        let end = edge_list_data.len().try_into().unwrap();\n-                        let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n-                        debug_assert_eq!(_i.index(), _index);\n-                    })\n+            let dep_node: DepNode<K> = d.read_struct_field(\"node\", Decodable::decode);\n+            let _i: SerializedDepNodeIndex = nodes.push(dep_node);\n+            debug_assert_eq!(_i.index(), _index);\n+\n+            let fingerprint: Fingerprint = d.read_struct_field(\"fingerprint\", Decodable::decode);\n+            let _i: SerializedDepNodeIndex = fingerprints.push(fingerprint);\n+            debug_assert_eq!(_i.index(), _index);\n+\n+            d.read_struct_field(\"edges\", |d| {\n+                d.read_seq(|d, len| {\n+                    let start = edge_list_data.len().try_into().unwrap();\n+                    for _ in 0..len {\n+                        let edge = d.read_seq_elt(Decodable::decode);\n+                        edge_list_data.push(edge);\n+                    }\n+                    let end = edge_list_data.len().try_into().unwrap();\n+                    let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n+                    debug_assert_eq!(_i.index(), _index);\n                 })\n-            });\n+            })\n         }\n \n         let index: FxHashMap<_, _> ="}, {"sha": "1ce62d1224b0dc79f974b4a510ba8adfe945020d", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=c021ba48a70e69fa681ea6617512ae2028e2677a", "patch": "@@ -210,14 +210,6 @@ pub trait Decoder {\n         f(self, disr)\n     }\n \n-    #[inline]\n-    fn read_struct<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n-        f(self)\n-    }\n-\n     #[inline]\n     fn read_struct_field<T, F>(&mut self, _f_name: &str, f: F) -> T\n     where"}, {"sha": "5b6f110413a1b89f21c0371a9288abf53d5544a3", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=c021ba48a70e69fa681ea6617512ae2028e2677a", "patch": "@@ -299,10 +299,10 @@ impl<E: Encoder> Encodable<E> for DefId {\n \n impl<D: Decoder> Decodable<D> for DefId {\n     default fn decode(d: &mut D) -> DefId {\n-        d.read_struct(|d| DefId {\n+        DefId {\n             krate: d.read_struct_field(\"krate\", Decodable::decode),\n             index: d.read_struct_field(\"index\", Decodable::decode),\n-        })\n+        }\n     }\n }\n "}, {"sha": "93f45985a7c3e53ff33c9cb7eb1b5abf49bdd9bd", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 55, "deletions": 60, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c021ba48a70e69fa681ea6617512ae2028e2677a/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=c021ba48a70e69fa681ea6617512ae2028e2677a", "patch": "@@ -979,12 +979,10 @@ impl<E: Encoder> Encodable<E> for Span {\n }\n impl<D: Decoder> Decodable<D> for Span {\n     default fn decode(s: &mut D) -> Span {\n-        s.read_struct(|d| {\n-            let lo = d.read_struct_field(\"lo\", Decodable::decode);\n-            let hi = d.read_struct_field(\"hi\", Decodable::decode);\n+        let lo = s.read_struct_field(\"lo\", Decodable::decode);\n+        let hi = s.read_struct_field(\"hi\", Decodable::decode);\n \n-            Span::new(lo, hi, SyntaxContext::root(), None)\n-        })\n+        Span::new(lo, hi, SyntaxContext::root(), None)\n     }\n }\n \n@@ -1440,65 +1438,62 @@ impl<S: Encoder> Encodable<S> for SourceFile {\n \n impl<D: Decoder> Decodable<D> for SourceFile {\n     fn decode(d: &mut D) -> SourceFile {\n-        d.read_struct(|d| {\n-            let name: FileName = d.read_struct_field(\"name\", |d| Decodable::decode(d));\n-            let src_hash: SourceFileHash =\n-                d.read_struct_field(\"src_hash\", |d| Decodable::decode(d));\n-            let start_pos: BytePos = d.read_struct_field(\"start_pos\", |d| Decodable::decode(d));\n-            let end_pos: BytePos = d.read_struct_field(\"end_pos\", |d| Decodable::decode(d));\n-            let lines: Vec<BytePos> = d.read_struct_field(\"lines\", |d| {\n-                let num_lines: u32 = Decodable::decode(d);\n-                let mut lines = Vec::with_capacity(num_lines as usize);\n-\n-                if num_lines > 0 {\n-                    // Read the number of bytes used per diff.\n-                    let bytes_per_diff: u8 = Decodable::decode(d);\n-\n-                    // Read the first element.\n-                    let mut line_start: BytePos = Decodable::decode(d);\n-                    lines.push(line_start);\n-\n-                    for _ in 1..num_lines {\n-                        let diff = match bytes_per_diff {\n-                            1 => d.read_u8() as u32,\n-                            2 => d.read_u16() as u32,\n-                            4 => d.read_u32(),\n-                            _ => unreachable!(),\n-                        };\n+        let name: FileName = d.read_struct_field(\"name\", |d| Decodable::decode(d));\n+        let src_hash: SourceFileHash = d.read_struct_field(\"src_hash\", |d| Decodable::decode(d));\n+        let start_pos: BytePos = d.read_struct_field(\"start_pos\", |d| Decodable::decode(d));\n+        let end_pos: BytePos = d.read_struct_field(\"end_pos\", |d| Decodable::decode(d));\n+        let lines: Vec<BytePos> = d.read_struct_field(\"lines\", |d| {\n+            let num_lines: u32 = Decodable::decode(d);\n+            let mut lines = Vec::with_capacity(num_lines as usize);\n+\n+            if num_lines > 0 {\n+                // Read the number of bytes used per diff.\n+                let bytes_per_diff: u8 = Decodable::decode(d);\n+\n+                // Read the first element.\n+                let mut line_start: BytePos = Decodable::decode(d);\n+                lines.push(line_start);\n+\n+                for _ in 1..num_lines {\n+                    let diff = match bytes_per_diff {\n+                        1 => d.read_u8() as u32,\n+                        2 => d.read_u16() as u32,\n+                        4 => d.read_u32(),\n+                        _ => unreachable!(),\n+                    };\n \n-                        line_start = line_start + BytePos(diff);\n+                    line_start = line_start + BytePos(diff);\n \n-                        lines.push(line_start);\n-                    }\n+                    lines.push(line_start);\n                 }\n-\n-                lines\n-            });\n-            let multibyte_chars: Vec<MultiByteChar> =\n-                d.read_struct_field(\"multibyte_chars\", |d| Decodable::decode(d));\n-            let non_narrow_chars: Vec<NonNarrowChar> =\n-                d.read_struct_field(\"non_narrow_chars\", |d| Decodable::decode(d));\n-            let name_hash: u128 = d.read_struct_field(\"name_hash\", |d| Decodable::decode(d));\n-            let normalized_pos: Vec<NormalizedPos> =\n-                d.read_struct_field(\"normalized_pos\", |d| Decodable::decode(d));\n-            let cnum: CrateNum = d.read_struct_field(\"cnum\", |d| Decodable::decode(d));\n-            SourceFile {\n-                name,\n-                start_pos,\n-                end_pos,\n-                src: None,\n-                src_hash,\n-                // Unused - the metadata decoder will construct\n-                // a new SourceFile, filling in `external_src` properly\n-                external_src: Lock::new(ExternalSource::Unneeded),\n-                lines,\n-                multibyte_chars,\n-                non_narrow_chars,\n-                normalized_pos,\n-                name_hash,\n-                cnum,\n             }\n-        })\n+\n+            lines\n+        });\n+        let multibyte_chars: Vec<MultiByteChar> =\n+            d.read_struct_field(\"multibyte_chars\", |d| Decodable::decode(d));\n+        let non_narrow_chars: Vec<NonNarrowChar> =\n+            d.read_struct_field(\"non_narrow_chars\", |d| Decodable::decode(d));\n+        let name_hash: u128 = d.read_struct_field(\"name_hash\", |d| Decodable::decode(d));\n+        let normalized_pos: Vec<NormalizedPos> =\n+            d.read_struct_field(\"normalized_pos\", |d| Decodable::decode(d));\n+        let cnum: CrateNum = d.read_struct_field(\"cnum\", |d| Decodable::decode(d));\n+        SourceFile {\n+            name,\n+            start_pos,\n+            end_pos,\n+            src: None,\n+            src_hash,\n+            // Unused - the metadata decoder will construct\n+            // a new SourceFile, filling in `external_src` properly\n+            external_src: Lock::new(ExternalSource::Unneeded),\n+            lines,\n+            multibyte_chars,\n+            non_narrow_chars,\n+            normalized_pos,\n+            name_hash,\n+            cnum,\n+        }\n     }\n }\n "}]}