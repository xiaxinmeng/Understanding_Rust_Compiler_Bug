{"sha": "8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzZjZmU3MWRiOWEzZjBjNmI2ZDhmNDRmZDE4YjRkNjYxMjYyN2E=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-10-15T20:14:50Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2020-10-16T18:46:41Z"}, "message": "instrument-coverage: try our best to not ICE\n\ninstrument-coverage was ICEing for me on some code, in particular code\nthat had devirtualized paths from standard library. Instrument coverage\nprobably has no bussiness dictating which paths are valid and which\naren't so just feed it everything and whatever and let tooling deal with\nother stuff.\n\nFor example, with this commit we can generate coverage hitpoints for\nthese interesting paths:\n\n* `/rustc/.../library/core/lib.rs` \u2013 non-devirtualized path for libcore\n* `/home/.../src/library/core/lib.rs` \u2013 devirtualized version of above\n* `<inline asm>`, `<anon>` and many similar synthetic paths\n\nEven if those paths somehow get to the instrumentation pass, I'd much\nrather get hits for these weird paths and hope some of them work (as\nwould be the case for devirtualized path to libcore), rather than have\ncompilation fail entirely.", "tree": {"sha": "fb4a8b0f91f7502d51ff2b1161b06603d587a3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4a8b0f91f7502d51ff2b1161b06603d587a3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a", "html_url": "https://github.com/rust-lang/rust/commit/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f587168102498a488abf608a86c7fdfa62fb7bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f587168102498a488abf608a86c7fdfa62fb7bb", "html_url": "https://github.com/rust-lang/rust/commit/7f587168102498a488abf608a86c7fdfa62fb7bb"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "6824c73ab60a05f69ffa00f1813b6c709469890c", "filename": "compiler/rustc_mir/src/transform/instrument_coverage.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs?ref=8436cfe71db9a3f0c6b6d8f44fd18b4d6612627a", "patch": "@@ -22,9 +22,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::DefId;\n use rustc_span::source_map::original_sp;\n-use rustc_span::{\n-    BytePos, CharPos, FileName, Pos, RealFileName, SourceFile, Span, Symbol, SyntaxContext,\n-};\n+use rustc_span::{BytePos, CharPos, Pos, SourceFile, Span, Symbol, SyntaxContext};\n \n use std::cmp::Ordering;\n \n@@ -549,13 +547,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let mir_body = &self.mir_body;\n         let body_span = self.body_span();\n         let source_file = source_map.lookup_source_file(body_span.lo());\n-        let file_name = match &source_file.name {\n-            FileName::Real(RealFileName::Named(path)) => Symbol::intern(&path.to_string_lossy()),\n-            _ => bug!(\n-                \"source_file.name should be a RealFileName, but it was: {:?}\",\n-                source_file.name\n-            ),\n-        };\n+        let file_name = Symbol::intern(&source_file.name.to_string());\n \n         debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n "}]}