{"sha": "251c3b64dab8982be5d0d002fe695f693ec4a5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MWMzYjY0ZGFiODk4MmJlNWQwZDAwMmZlNjk1ZjY5M2VjNGE1YWI=", "commit": {"author": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-06-11T12:57:11Z"}, "committer": {"name": "lyj", "email": "sjtu5140809011@gmail.com", "date": "2021-07-14T02:57:47Z"}, "message": "fix 5707", "tree": {"sha": "4e445e0e7d87c234bb30bc73b135ecf44b356465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e445e0e7d87c234bb30bc73b135ecf44b356465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/251c3b64dab8982be5d0d002fe695f693ec4a5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/251c3b64dab8982be5d0d002fe695f693ec4a5ab", "html_url": "https://github.com/rust-lang/rust/commit/251c3b64dab8982be5d0d002fe695f693ec4a5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/251c3b64dab8982be5d0d002fe695f693ec4a5ab/comments", "author": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lengyijun", "id": 14830596, "node_id": "MDQ6VXNlcjE0ODMwNTk2", "avatar_url": "https://avatars.githubusercontent.com/u/14830596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lengyijun", "html_url": "https://github.com/lengyijun", "followers_url": "https://api.github.com/users/lengyijun/followers", "following_url": "https://api.github.com/users/lengyijun/following{/other_user}", "gists_url": "https://api.github.com/users/lengyijun/gists{/gist_id}", "starred_url": "https://api.github.com/users/lengyijun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lengyijun/subscriptions", "organizations_url": "https://api.github.com/users/lengyijun/orgs", "repos_url": "https://api.github.com/users/lengyijun/repos", "events_url": "https://api.github.com/users/lengyijun/events{/privacy}", "received_events_url": "https://api.github.com/users/lengyijun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8131445e536869b4b73b07d1be1b2e03f7493898", "url": "https://api.github.com/repos/rust-lang/rust/commits/8131445e536869b4b73b07d1be1b2e03f7493898", "html_url": "https://github.com/rust-lang/rust/commit/8131445e536869b4b73b07d1be1b2e03f7493898"}], "stats": {"total": 187, "additions": 171, "deletions": 16}, "files": [{"sha": "8253397160a91b60b03f35aff40e890b43306f84", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 105, "deletions": 6, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/251c3b64dab8982be5d0d002fe695f693ec4a5ab/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c3b64dab8982be5d0d002fe695f693ec4a5ab/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=251c3b64dab8982be5d0d002fe695f693ec4a5ab", "patch": "@@ -12,6 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::{\n     self, traversal,\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n+    Mutability,\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n@@ -87,13 +88,18 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n \n         let mir = cx.tcx.optimized_mir(def_id.to_def_id());\n \n+        let possible_borrowed = {\n+            let mut vis = PossibleBorrowedVisitor::new(mir);\n+            vis.visit_body(mir);\n+            vis.into_map(cx)\n+        };\n         let maybe_storage_live_result = MaybeStorageLive\n             .into_engine(cx.tcx, mir)\n             .pass_name(\"redundant_clone\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n         let mut possible_borrower = {\n-            let mut vis = PossibleBorrowerVisitor::new(cx, mir);\n+            let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_borrowed);\n             vis.visit_body(mir);\n             vis.into_map(cx, maybe_storage_live_result)\n         };\n@@ -509,14 +515,20 @@ struct PossibleBorrowerVisitor<'a, 'tcx> {\n     possible_borrower: TransitiveRelation<mir::Local>,\n     body: &'a mir::Body<'tcx>,\n     cx: &'a LateContext<'tcx>,\n+    possible_borrowed: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n }\n \n impl<'a, 'tcx> PossibleBorrowerVisitor<'a, 'tcx> {\n-    fn new(cx: &'a LateContext<'tcx>, body: &'a mir::Body<'tcx>) -> Self {\n+    fn new(\n+        cx: &'a LateContext<'tcx>,\n+        body: &'a mir::Body<'tcx>,\n+        possible_borrowed: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    ) -> Self {\n         Self {\n             possible_borrower: TransitiveRelation::default(),\n             cx,\n             body,\n+            possible_borrowed,\n         }\n     }\n \n@@ -585,21 +597,108 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n             ..\n         } = &terminator.kind\n         {\n+            // TODO add doc\n             // If the call returns something with lifetimes,\n             // let's conservatively assume the returned value contains lifetime of all the arguments.\n             // For example, given `let y: Foo<'a> = foo(x)`, `y` is considered to be a possible borrower of `x`.\n-            if ContainsRegion.visit_ty(self.body.local_decls[*dest].ty).is_continue() {\n-                return;\n-            }\n+\n+            let mut immutable_borrowers = vec![];\n+            let mut mutable_borrowers = vec![];\n \n             for op in args {\n                 match op {\n                     mir::Operand::Copy(p) | mir::Operand::Move(p) => {\n-                        self.possible_borrower.add(p.local, *dest);\n+                        if let ty::Ref(_, _, Mutability::Mut) = self.body.local_decls[p.local].ty.kind() {\n+                            mutable_borrowers.push(p.local);\n+                        } else {\n+                            immutable_borrowers.push(p.local);\n+                        }\n                     },\n                     mir::Operand::Constant(..) => (),\n                 }\n             }\n+\n+            let mut mutable_variables: Vec<mir::Local> = mutable_borrowers\n+                .iter()\n+                .filter_map(|r| self.possible_borrowed.get(r))\n+                .flat_map(|r| r.iter())\n+                .collect();\n+\n+            if ContainsRegion.visit_ty(self.body.local_decls[*dest].ty).is_break() {\n+                mutable_variables.push(*dest);\n+            }\n+\n+            for y in mutable_variables {\n+                for x in &immutable_borrowers {\n+                    self.possible_borrower.add(*x, y);\n+                }\n+                for x in &mutable_borrowers {\n+                    self.possible_borrower.add(*x, y);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Collect possible borrowed for every `&mut` local.\n+/// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n+/// Known Problems: not sure all borrowed are tracked\n+struct PossibleBorrowedVisitor<'a, 'tcx> {\n+    possible_borrowed: TransitiveRelation<mir::Local>,\n+    body: &'a mir::Body<'tcx>,\n+}\n+\n+impl<'a, 'tcx> PossibleBorrowedVisitor<'a, 'tcx> {\n+    fn new(body: &'a mir::Body<'tcx>) -> Self {\n+        Self {\n+            possible_borrowed: TransitiveRelation::default(),\n+            body,\n+        }\n+    }\n+\n+    fn into_map(self, cx: &LateContext<'tcx>) -> FxHashMap<mir::Local, HybridBitSet<mir::Local>> {\n+        let mut map = FxHashMap::default();\n+        for row in (1..self.body.local_decls.len()).map(mir::Local::from_usize) {\n+            if is_copy(cx, self.body.local_decls[row].ty) {\n+                continue;\n+            }\n+\n+            let borrowers = self.possible_borrowed.reachable_from(&row);\n+            if !borrowers.is_empty() {\n+                let mut bs = HybridBitSet::new_empty(self.body.local_decls.len());\n+                for &c in borrowers {\n+                    if c != mir::Local::from_usize(0) {\n+                        bs.insert(c);\n+                    }\n+                }\n+\n+                if !bs.is_empty() {\n+                    map.insert(row, bs);\n+                }\n+            }\n+        }\n+        map\n+    }\n+}\n+\n+impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowedVisitor<'a, 'tcx> {\n+    fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n+        let lhs = place.local;\n+        match rvalue {\n+            // Only consider `&mut`, which can modify origin place\n+            mir::Rvalue::Ref(_, rustc_middle::mir::BorrowKind::Mut { .. }, borrowed) => {\n+                self.possible_borrowed.add(lhs, borrowed.local);\n+            },\n+            // _2: &mut _;\n+            // _3 = move _2\n+            mir::Rvalue::Use(mir::Operand::Move(borrowed)) => {\n+                self.possible_borrowed.add(lhs, borrowed.local);\n+            },\n+            // _3 = move _2 as &mut _;\n+            mir::Rvalue::Cast(_, mir::Operand::Move(borrowed), _) => {\n+                self.possible_borrowed.add(lhs, borrowed.local);\n+            },\n+            _ => {},\n         }\n     }\n }"}, {"sha": "2d711082746e73aab40867f0bcc2285137e5aca2", "filename": "tests/ui/redundant_clone.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.fixed?ref=251c3b64dab8982be5d0d002fe695f693ec4a5ab", "patch": "@@ -55,6 +55,8 @@ fn main() {\n     issue_5405();\n     manually_drop();\n     clone_then_move_cloned();\n+    hashmap_neg();\n+    false_negative_5707();\n }\n \n #[derive(Clone)]\n@@ -206,3 +208,29 @@ fn clone_then_move_cloned() {\n     let mut x = S(String::new());\n     x.0.clone().chars().for_each(|_| x.m());\n }\n+\n+fn hashmap_neg() {\n+    // issue 5707\n+    use std::collections::HashMap;\n+    use std::path::PathBuf;\n+\n+    let p = PathBuf::from(\"/\");\n+\n+    let mut h: HashMap<&str, &str> = HashMap::new();\n+    h.insert(\"orig-p\", p.to_str().unwrap());\n+\n+    let mut q = p.clone();\n+    q.push(\"foo\");\n+\n+    println!(\"{:?} {}\", h, q.display());\n+}\n+\n+fn false_negative_5707() {\n+    fn foo(_x: &Alpha, _y: &mut Alpha) {}\n+\n+    let x = Alpha;\n+    let mut y = Alpha;\n+    foo(&x, &mut y);\n+    let _z = x.clone(); // pr 7346 can't lint on `x`\n+    drop(y);\n+}"}, {"sha": "bd3d7365229fb83ccd13ca555e53d9941f867c43", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=251c3b64dab8982be5d0d002fe695f693ec4a5ab", "patch": "@@ -55,6 +55,8 @@ fn main() {\n     issue_5405();\n     manually_drop();\n     clone_then_move_cloned();\n+    hashmap_neg();\n+    false_negative_5707();\n }\n \n #[derive(Clone)]\n@@ -206,3 +208,29 @@ fn clone_then_move_cloned() {\n     let mut x = S(String::new());\n     x.0.clone().chars().for_each(|_| x.m());\n }\n+\n+fn hashmap_neg() {\n+    // issue 5707\n+    use std::collections::HashMap;\n+    use std::path::PathBuf;\n+\n+    let p = PathBuf::from(\"/\");\n+\n+    let mut h: HashMap<&str, &str> = HashMap::new();\n+    h.insert(\"orig-p\", p.to_str().unwrap());\n+\n+    let mut q = p.clone();\n+    q.push(\"foo\");\n+\n+    println!(\"{:?} {}\", h, q.display());\n+}\n+\n+fn false_negative_5707() {\n+    fn foo(_x: &Alpha, _y: &mut Alpha) {}\n+\n+    let x = Alpha;\n+    let mut y = Alpha;\n+    foo(&x, &mut y);\n+    let _z = x.clone(); // pr 7346 can't lint on `x`\n+    drop(y);\n+}"}, {"sha": "fbc90493ae94b85986e8381ef82e395fbc202e9e", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/251c3b64dab8982be5d0d002fe695f693ec4a5ab/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=251c3b64dab8982be5d0d002fe695f693ec4a5ab", "patch": "@@ -108,61 +108,61 @@ LL |     let _t = tup.0.clone();\n    |              ^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:63:25\n+  --> $DIR/redundant_clone.rs:65:25\n    |\n LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n    |                         ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:63:24\n+  --> $DIR/redundant_clone.rs:65:24\n    |\n LL |     if b { (a.clone(), a.clone()) } else { (Alpha, a) }\n    |                        ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:120:15\n+  --> $DIR/redundant_clone.rs:122:15\n    |\n LL |     let _s = s.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:120:14\n+  --> $DIR/redundant_clone.rs:122:14\n    |\n LL |     let _s = s.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:121:15\n+  --> $DIR/redundant_clone.rs:123:15\n    |\n LL |     let _t = t.clone();\n    |               ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:121:14\n+  --> $DIR/redundant_clone.rs:123:14\n    |\n LL |     let _t = t.clone();\n    |              ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:131:19\n+  --> $DIR/redundant_clone.rs:133:19\n    |\n LL |         let _f = f.clone();\n    |                   ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:131:18\n+  --> $DIR/redundant_clone.rs:133:18\n    |\n LL |         let _f = f.clone();\n    |                  ^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:143:14\n+  --> $DIR/redundant_clone.rs:145:14\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |              ^^^^^^^^ help: remove this\n    |\n note: cloned value is neither consumed nor mutated\n-  --> $DIR/redundant_clone.rs:143:13\n+  --> $DIR/redundant_clone.rs:145:13\n    |\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^"}]}