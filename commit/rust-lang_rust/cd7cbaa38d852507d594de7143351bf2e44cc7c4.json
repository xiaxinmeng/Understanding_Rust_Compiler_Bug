{"sha": "cd7cbaa38d852507d594de7143351bf2e44cc7c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkN2NiYWEzOGQ4NTI1MDdkNTk0ZGU3MTQzMzUxYmYyZTQ0Y2M3YzQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-09T20:17:56Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T08:17:25Z"}, "message": "rustc_metadata: replace predicates_defined_on with explicit_predicates_of and inferred_outlives_of.", "tree": {"sha": "baeafe977f1febcd5df8e8bca5f8650368e48353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baeafe977f1febcd5df8e8bca5f8650368e48353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd7cbaa38d852507d594de7143351bf2e44cc7c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd7cbaa38d852507d594de7143351bf2e44cc7c4", "html_url": "https://github.com/rust-lang/rust/commit/cd7cbaa38d852507d594de7143351bf2e44cc7c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd7cbaa38d852507d594de7143351bf2e44cc7c4/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71eacef414d076380287dbade8d6cc62e49ff270", "url": "https://api.github.com/repos/rust-lang/rust/commits/71eacef414d076380287dbade8d6cc62e49ff270", "html_url": "https://github.com/rust-lang/rust/commit/71eacef414d076380287dbade8d6cc62e49ff270"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "87885e40222f4db5f2547f89fcb1df502e6c0fb6", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=cd7cbaa38d852507d594de7143351bf2e44cc7c4", "patch": "@@ -95,7 +95,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n+    explicit_predicates_of => { cdata.get_explicit_predicates(def_id.index, tcx) }\n+    inferred_outlives_of => { cdata.get_inferred_outlives(def_id.index, tcx) }\n     super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {\n         tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))"}, {"sha": "4880937774485f8cdd91e0d01f58fd09fca12cd0", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cd7cbaa38d852507d594de7143351bf2e44cc7c4", "patch": "@@ -658,12 +658,20 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_adt_def(did, adt_kind, variants, repr)\n     }\n \n-    crate fn get_predicates_defined_on(\n+    crate fn get_explicit_predicates(\n         &self,\n         item_id: DefIndex,\n         tcx: TyCtxt<'tcx>,\n     ) -> ty::GenericPredicates<'tcx> {\n-        self.root.per_def.predicates_defined_on.get(self, item_id).unwrap().decode((self, tcx))\n+        self.root.per_def.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))\n+    }\n+\n+    crate fn get_inferred_outlives(\n+        &self,\n+        item_id: DefIndex,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n+        self.root.per_def.inferred_outlives.get(self, item_id).unwrap().decode((self, tcx))\n     }\n \n     crate fn get_super_predicates("}, {"sha": "db00095b929ec9bb9d0e17e368fa50d82a02828c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cd7cbaa38d852507d594de7143351bf2e44cc7c4", "patch": "@@ -76,7 +76,8 @@ struct PerDefTables<'tcx> {\n     inherent_impls: PerDefTable<Lazy<[DefIndex]>>,\n     variances: PerDefTable<Lazy<[ty::Variance]>>,\n     generics: PerDefTable<Lazy<ty::Generics>>,\n-    predicates_defined_on: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n+    explicit_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n+    inferred_outlives: PerDefTable<Lazy<&'tcx [(ty::Predicate<'tcx>, Span)]>>,\n     super_predicates: PerDefTable<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     mir: PerDefTable<Lazy<mir::Body<'tcx>>>,\n@@ -523,7 +524,8 @@ impl<'tcx> EncodeContext<'tcx> {\n             inherent_impls: self.per_def.inherent_impls.encode(&mut self.opaque),\n             variances: self.per_def.variances.encode(&mut self.opaque),\n             generics: self.per_def.generics.encode(&mut self.opaque),\n-            predicates_defined_on: self.per_def.predicates_defined_on.encode(&mut self.opaque),\n+            explicit_predicates: self.per_def.explicit_predicates.encode(&mut self.opaque),\n+            inferred_outlives: self.per_def.inferred_outlives.encode(&mut self.opaque),\n             super_predicates: self.per_def.super_predicates.encode(&mut self.opaque),\n \n             mir: self.per_def.mir.encode(&mut self.opaque),\n@@ -674,7 +676,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -717,7 +720,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -775,7 +779,8 @@ impl EncodeContext<'tcx> {\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_struct_ctor(&mut self, adt_def_id: DefId, def_id: DefId) {\n@@ -818,7 +823,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -828,10 +834,16 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.generics[def_id] <- self.tcx.generics_of(def_id));\n     }\n \n-    fn encode_predicates_defined_on(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_predicates_defined_on({:?})\", def_id);\n-        record!(self.per_def.predicates_defined_on[def_id] <-\n-            self.tcx.predicates_defined_on(def_id))\n+    fn encode_explicit_predicates(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_explicit_predicates({:?})\", def_id);\n+        record!(self.per_def.explicit_predicates[def_id] <-\n+            self.tcx.explicit_predicates_of(def_id));\n+    }\n+\n+    fn encode_inferred_outlives(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_inferred_outlives({:?})\", def_id);\n+        record!(self.per_def.inferred_outlives[def_id] <-\n+            self.tcx.inferred_outlives_of(def_id));\n     }\n \n     fn encode_super_predicates(&mut self, def_id: DefId) {\n@@ -913,7 +925,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -980,7 +993,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n             hir::ImplItemKind::Method(ref sig, _) => {\n@@ -1254,7 +1268,8 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::Trait(..) |\n             hir::ItemKind::TraitAlias(..) => {\n                 self.encode_generics(def_id);\n-                self.encode_predicates_defined_on(def_id);\n+                self.encode_explicit_predicates(def_id);\n+                self.encode_inferred_outlives(def_id);\n             }\n             _ => {}\n         }\n@@ -1359,7 +1374,8 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.span[def_id] <- self.tcx.def_span(def_id));\n         self.encode_item_type(def_id);\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -1570,7 +1586,8 @@ impl EncodeContext<'tcx> {\n             self.encode_variances_of(def_id);\n         }\n         self.encode_generics(def_id);\n-        self.encode_predicates_defined_on(def_id);\n+        self.encode_explicit_predicates(def_id);\n+        self.encode_inferred_outlives(def_id);\n     }\n }\n "}, {"sha": "b459d53eb51c7070eaec587898d799479e7a03c6", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd7cbaa38d852507d594de7143351bf2e44cc7c4/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=cd7cbaa38d852507d594de7143351bf2e44cc7c4", "patch": "@@ -244,7 +244,12 @@ crate struct LazyPerDefTables<'tcx> {\n     pub inherent_impls: Lazy!(PerDefTable<Lazy<[DefIndex]>>),\n     pub variances: Lazy!(PerDefTable<Lazy<[ty::Variance]>>),\n     pub generics: Lazy!(PerDefTable<Lazy<ty::Generics>>),\n-    pub predicates_defined_on: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+    pub explicit_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n+    // FIXME(eddyb) this would ideally be `Lazy<[...]>` but `ty::Predicate`\n+    // doesn't handle shorthands in its own (de)serialization impls,\n+    // as it's an `enum` for which we want to derive (de)serialization,\n+    // so the `ty::codec` APIs handle the whole `&'tcx [...]` at once.\n+    pub inferred_outlives: Lazy!(PerDefTable<Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>),\n     pub super_predicates: Lazy!(PerDefTable<Lazy!(ty::GenericPredicates<'tcx>)>),\n \n     pub mir: Lazy!(PerDefTable<Lazy!(mir::Body<'tcx>)>),"}]}