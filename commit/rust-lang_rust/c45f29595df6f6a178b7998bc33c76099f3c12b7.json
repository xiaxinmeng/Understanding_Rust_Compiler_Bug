{"sha": "c45f29595df6f6a178b7998bc33c76099f3c12b7", "node_id": "C_kwDOAAsO6NoAKGM0NWYyOTU5NWRmNmY2YTE3OGI3OTk4YmMzM2M3NjA5OWYzYzEyYjc", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-24T02:03:04Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:00Z"}, "message": "span: move `MultiSpan`\n\n`MultiSpan` contains labels, which are more complicated with the\nintroduction of diagnostic translation and will use types from\n`rustc_errors` - however, `rustc_errors` depends on `rustc_span` so\n`rustc_span` cannot use types like `DiagnosticMessage` without\ndependency cycles. Introduce a new `rustc_error_messages` crate that can\ncontain `DiagnosticMessage` and `MultiSpan`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "0f54f00c31b0d2ec11408f843e6b9ec726ce8a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f54f00c31b0d2ec11408f843e6b9ec726ce8a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45f29595df6f6a178b7998bc33c76099f3c12b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45f29595df6f6a178b7998bc33c76099f3c12b7", "html_url": "https://github.com/rust-lang/rust/commit/c45f29595df6f6a178b7998bc33c76099f3c12b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45f29595df6f6a178b7998bc33c76099f3c12b7/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c684563a59900d96a4fcadd41e5e92074c13df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c684563a59900d96a4fcadd41e5e92074c13df1", "html_url": "https://github.com/rust-lang/rust/commit/8c684563a59900d96a4fcadd41e5e92074c13df1"}], "stats": {"total": 647, "additions": 354, "deletions": 293}, "files": [{"sha": "34b200af5227221ea2c6372f9abe25063cbbd145", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3645,13 +3645,23 @@ dependencies = [\n name = \"rustc_error_codes\"\n version = \"0.0.0\"\n \n+[[package]]\n+name = \"rustc_error_messages\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc_macros\",\n+ \"rustc_serialize\",\n+ \"rustc_span\",\n+]\n+\n [[package]]\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n  \"annotate-snippets\",\n  \"atty\",\n  \"rustc_data_structures\",\n+ \"rustc_error_messages\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n@@ -3708,6 +3718,7 @@ dependencies = [\n  \"odht\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_error_messages\",\n  \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -3864,6 +3875,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_error_messages\",\n  \"rustc_hir\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "70f7f1e493e07055316c1aeae9aaa3df971b80bb", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,6 +1,6 @@\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed, MultiSpan};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     crate fn cannot_move_when_borrowed("}, {"sha": "aa2ddada3502a5a6e147ccf171cb756ddc267353", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_const_eval::util::CallKind;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n@@ -15,7 +15,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::{self, subst::Subst, suggest_constraining_type_params, PredicateKind, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::symbol::sym;\n-use rustc_span::{BytePos, MultiSpan, Span};\n+use rustc_span::{BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::TraitEngineExt as _;\n "}, {"sha": "138e1fa0176033ed2b121f76b46565c7968c9a10", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,11 +7,11 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{token, BlockCheckMode, UnsafeSource};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, Applicability, PResult};\n+use rustc_errors::{pluralize, Applicability, MultiSpan, PResult};\n use rustc_expand::base::{self, *};\n use rustc_parse_format as parse;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{InnerSpan, MultiSpan, Span};\n+use rustc_span::{InnerSpan, Span};\n use smallvec::SmallVec;\n \n use std::borrow::Cow;\n@@ -446,7 +446,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 .iter()\n                                 .filter(|fmt| fmt.precision_span.is_some())\n                                 .count();\n-                        e.span_label(span, &format!(\n+                        e.span_label(\n+                            span,\n+                            &format!(\n                             \"this precision flag adds an extra required argument at position {}, \\\n                              which is why there {} expected\",\n                             pos,\n@@ -455,7 +457,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                             } else {\n                                 format!(\"are {} arguments\", count)\n                             },\n-                        ));\n+                        ),\n+                        );\n                         if let Some(arg) = self.args.get(pos) {\n                             e.span_label(\n                                 arg.span,"}, {"sha": "194a11dd3ea0f7c3e5af515c00d57ac71eb05b3d", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -0,0 +1,12 @@\n+[package]\n+name = \"rustc_error_messages\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_span = { path = \"../rustc_span\" }\n+rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "57d4a4c1f5e6d9bcf994824566d9b93d8ab20252", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -0,0 +1,171 @@\n+use rustc_macros::{Decodable, Encodable};\n+use rustc_span::Span;\n+\n+/// Abstraction over a message in a diagnostic to support both translatable and non-translatable\n+/// diagnostic messages.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n+pub enum DiagnosticMessage {\n+    /// Non-translatable diagnostic message.\n+    Str(String),\n+    /// Identifier for a Fluent message corresponding to the diagnostic message.\n+    FluentIdentifier(String),\n+}\n+\n+impl DiagnosticMessage {\n+    /// Convert `DiagnosticMessage` to a `&str`.\n+    pub fn as_str(&self) -> &str {\n+        match self {\n+            DiagnosticMessage::Str(msg) => msg,\n+            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n+        }\n+    }\n+\n+    /// Convert `DiagnosticMessage` to an owned `String`.\n+    pub fn to_string(self) -> String {\n+        match self {\n+            DiagnosticMessage::Str(msg) => msg,\n+            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n+        }\n+    }\n+}\n+\n+/// A span together with some additional data.\n+#[derive(Clone, Debug)]\n+pub struct SpanLabel {\n+    /// The span we are going to include in the final snippet.\n+    pub span: Span,\n+\n+    /// Is this a primary span? This is the \"locus\" of the message,\n+    /// and is indicated with a `^^^^` underline, versus `----`.\n+    pub is_primary: bool,\n+\n+    /// What label should we attach to this span (if any)?\n+    pub label: Option<DiagnosticMessage>,\n+}\n+\n+/// A collection of `Span`s.\n+///\n+/// Spans have two orthogonal attributes:\n+///\n+/// - They can be *primary spans*. In this case they are the locus of\n+///   the error, and would be rendered with `^^^`.\n+/// - They can have a *label*. In this case, the label is written next\n+///   to the mark in the snippet when we render.\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]\n+pub struct MultiSpan {\n+    primary_spans: Vec<Span>,\n+    span_labels: Vec<(Span, DiagnosticMessage)>,\n+}\n+\n+impl MultiSpan {\n+    #[inline]\n+    pub fn new() -> MultiSpan {\n+        MultiSpan { primary_spans: vec![], span_labels: vec![] }\n+    }\n+\n+    pub fn from_span(primary_span: Span) -> MultiSpan {\n+        MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }\n+    }\n+\n+    pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {\n+        vec.sort();\n+        MultiSpan { primary_spans: vec, span_labels: vec![] }\n+    }\n+\n+    pub fn push_span_label(&mut self, span: Span, label: String) {\n+        self.span_labels.push((span, DiagnosticMessage::Str(label)));\n+    }\n+\n+    pub fn push_span_message(&mut self, span: Span, message: DiagnosticMessage) {\n+        self.span_labels.push((span, message));\n+    }\n+\n+    /// Selects the first primary span (if any).\n+    pub fn primary_span(&self) -> Option<Span> {\n+        self.primary_spans.first().cloned()\n+    }\n+\n+    /// Returns all primary spans.\n+    pub fn primary_spans(&self) -> &[Span] {\n+        &self.primary_spans\n+    }\n+\n+    /// Returns `true` if any of the primary spans are displayable.\n+    pub fn has_primary_spans(&self) -> bool {\n+        self.primary_spans.iter().any(|sp| !sp.is_dummy())\n+    }\n+\n+    /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n+    pub fn is_dummy(&self) -> bool {\n+        let mut is_dummy = true;\n+        for span in &self.primary_spans {\n+            if !span.is_dummy() {\n+                is_dummy = false;\n+            }\n+        }\n+        is_dummy\n+    }\n+\n+    /// Replaces all occurrences of one Span with another. Used to move `Span`s in areas that don't\n+    /// display well (like std macros). Returns whether replacements occurred.\n+    pub fn replace(&mut self, before: Span, after: Span) -> bool {\n+        let mut replacements_occurred = false;\n+        for primary_span in &mut self.primary_spans {\n+            if *primary_span == before {\n+                *primary_span = after;\n+                replacements_occurred = true;\n+            }\n+        }\n+        for span_label in &mut self.span_labels {\n+            if span_label.0 == before {\n+                span_label.0 = after;\n+                replacements_occurred = true;\n+            }\n+        }\n+        replacements_occurred\n+    }\n+\n+    /// Returns the strings to highlight. We always ensure that there\n+    /// is an entry for each of the primary spans -- for each primary\n+    /// span `P`, if there is at least one label with span `P`, we return\n+    /// those labels (marked as primary). But otherwise we return\n+    /// `SpanLabel` instances with empty labels.\n+    pub fn span_labels(&self) -> Vec<SpanLabel> {\n+        let is_primary = |span| self.primary_spans.contains(&span);\n+\n+        let mut span_labels = self\n+            .span_labels\n+            .iter()\n+            .map(|&(span, ref label)| SpanLabel {\n+                span,\n+                is_primary: is_primary(span),\n+                label: Some(label.clone()),\n+            })\n+            .collect::<Vec<_>>();\n+\n+        for &span in &self.primary_spans {\n+            if !span_labels.iter().any(|sl| sl.span == span) {\n+                span_labels.push(SpanLabel { span, is_primary: true, label: None });\n+            }\n+        }\n+\n+        span_labels\n+    }\n+\n+    /// Returns `true` if any of the span labels is displayable.\n+    pub fn has_span_labels(&self) -> bool {\n+        self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())\n+    }\n+}\n+\n+impl From<Span> for MultiSpan {\n+    fn from(span: Span) -> MultiSpan {\n+        MultiSpan::from_span(span)\n+    }\n+}\n+\n+impl From<Vec<Span>> for MultiSpan {\n+    fn from(spans: Vec<Span>) -> MultiSpan {\n+        MultiSpan::from_spans(spans)\n+    }\n+}"}, {"sha": "5f919982890e0305d7f75bd9170011870dbe0cb3", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -8,6 +8,7 @@ doctest = false\n \n [dependencies]\n tracing = \"0.1\"\n+rustc_error_messages = { path = \"../rustc_error_messages\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "330c3d218fc5a959c63339cacb9fb8c386ee0f3c", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,12 +7,12 @@\n \n use crate::emitter::FileWithAnnotatedLines;\n use crate::snippet::Line;\n-use crate::{CodeSuggestion, Diagnostic, DiagnosticId, Emitter, Level, SubDiagnostic};\n+use crate::{CodeSuggestion, Diagnostic, DiagnosticId, Emitter, Level, MultiSpan, SubDiagnostic};\n use annotate_snippets::display_list::{DisplayList, FormatOptions};\n use annotate_snippets::snippet::*;\n use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{MultiSpan, SourceFile};\n+use rustc_span::SourceFile;\n \n /// Generates diagnostics using annotate-snippet\n pub struct AnnotateSnippetEmitterWriter {"}, {"sha": "f2c0e2701b3c260011250bcca3104c4006dcf848", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,15 +1,13 @@\n use crate::snippet::Style;\n-use crate::CodeSuggestion;\n-use crate::Level;\n-use crate::Substitution;\n-use crate::SubstitutionPart;\n-use crate::SuggestionStyle;\n-use crate::ToolMetadata;\n+use crate::{\n+    CodeSuggestion, DiagnosticMessage, Level, MultiSpan, Substitution, SubstitutionPart,\n+    SuggestionStyle, ToolMetadata,\n+};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n \n@@ -18,34 +16,6 @@ use std::hash::{Hash, Hasher};\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n pub struct SuggestionsDisabled;\n \n-/// Abstraction over a message in a diagnostic to support both translatable and non-translatable\n-/// diagnostic messages.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n-pub enum DiagnosticMessage {\n-    /// Non-translatable diagnostic message.\n-    Str(String),\n-    /// Identifier for a Fluent message corresponding to the diagnostic message.\n-    FluentIdentifier(String),\n-}\n-\n-impl DiagnosticMessage {\n-    /// Convert `DiagnosticMessage` to a `&str`.\n-    pub fn as_str(&self) -> &str {\n-        match self {\n-            DiagnosticMessage::Str(msg) => msg,\n-            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n-        }\n-    }\n-\n-    /// Convert `DiagnosticMessage` to an owned `String`.\n-    pub fn to_string(self) -> String {\n-        match self {\n-            DiagnosticMessage::Str(msg) => msg,\n-            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n-        }\n-    }\n-}\n-\n #[must_use]\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct Diagnostic {\n@@ -262,7 +232,7 @@ impl Diagnostic {\n         self.set_span(after);\n         for span_label in before.span_labels() {\n             if let Some(label) = span_label.label {\n-                self.span_label(after, label);\n+                self.span.push_span_message(after, label);\n             }\n         }\n         self"}, {"sha": "4a7e252edb24ca5b30eb5aaf63c9b615b3b081bd", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,8 +1,8 @@\n use crate::{Diagnostic, DiagnosticId, DiagnosticStyledString, ErrorGuaranteed};\n-use crate::{Handler, Level, StashKey};\n+use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n \n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};"}, {"sha": "881938ec85f0b41add6c01242a1a3a712dbcb6c4", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -10,13 +10,13 @@\n use Destination::*;\n \n use rustc_span::source_map::SourceMap;\n-use rustc_span::{MultiSpan, SourceFile, Span};\n+use rustc_span::{SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Handler, Level, SubDiagnostic,\n-    SubstitutionHighlight, SuggestionStyle,\n+    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Handler, Level, MultiSpan,\n+    SubDiagnostic, SubstitutionHighlight, SuggestionStyle,\n };\n \n use rustc_lint_defs::pluralize;\n@@ -2003,7 +2003,7 @@ impl FileWithAnnotatedLines {\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n-                        label: span_label.label,\n+                        label: span_label.label.map(|m| m.to_string()),\n                         overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file, ml));\n@@ -2012,7 +2012,7 @@ impl FileWithAnnotatedLines {\n                         start_col: lo.col_display,\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n-                        label: span_label.label,\n+                        label: span_label.label.map(|m| m.to_string()),\n                         annotation_type: AnnotationType::Singleline,\n                     };\n                     add_annotation_to_file(&mut output, lo.file, lo.line, ann);"}, {"sha": "b93ab70e1f32ce1ddd99c2aa8ac42eb16c11e3c3", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -15,12 +15,12 @@ use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::DiagnosticId;\n use crate::ToolMetadata;\n-use crate::{CodeSuggestion, SubDiagnostic};\n+use crate::{CodeSuggestion, MultiSpan, SpanLabel, SubDiagnostic};\n use rustc_lint_defs::Applicability;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::ExpnData;\n-use rustc_span::{MultiSpan, Span, SpanLabel};\n+use rustc_span::Span;\n use std::io::{self, Write};\n use std::path::Path;\n use std::sync::{Arc, Mutex};\n@@ -423,7 +423,13 @@ impl DiagnosticSpan {\n         suggestion: Option<(&String, Applicability)>,\n         je: &JsonEmitter,\n     ) -> DiagnosticSpan {\n-        Self::from_span_etc(span.span, span.is_primary, span.label, suggestion, je)\n+        Self::from_span_etc(\n+            span.span,\n+            span.is_primary,\n+            span.label.map(|m| m.to_string()),\n+            suggestion,\n+            je,\n+        )\n     }\n \n     fn from_span_etc("}, {"sha": "5e770f7d5aeb0b0eadb9e33df0afac0e8830adc5", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -31,11 +31,12 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n+pub use rustc_error_messages::{DiagnosticMessage, MultiSpan, SpanLabel};\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_serialize::json::Json;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::SourceMap;\n-use rustc_span::{Loc, MultiSpan, Span};\n+use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n use std::hash::{Hash, Hasher};\n@@ -55,6 +56,7 @@ mod lock;\n pub mod registry;\n mod snippet;\n mod styled_buffer;\n+\n pub use snippet::Style;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n@@ -400,9 +402,7 @@ impl fmt::Display for ExplicitBug {\n \n impl error::Error for ExplicitBug {}\n \n-pub use diagnostic::{\n-    Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, SubDiagnostic,\n-};\n+pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n "}, {"sha": "556b2c6fbf3685b283e87592617e081112e59d90", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n@@ -20,7 +20,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n use std::default::Default;"}, {"sha": "1f90b24a8cccd1048dacb05a186ddf0d71ca2096", "filename": "compiler/rustc_expand/src/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_check.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -109,10 +109,11 @@ use crate::mbe::{KleeneToken, TokenTree};\n use rustc_ast::token::{DelimToken, Token, TokenKind};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::MultiSpan;\n use rustc_session::lint::builtin::META_VARIABLE_MISUSE;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::kw;\n-use rustc_span::{symbol::MacroRulesNormalizedIdent, MultiSpan, Span};\n+use rustc_span::{symbol::MacroRulesNormalizedIdent, Span};\n \n use smallvec::SmallVec;\n "}, {"sha": "bd6f0b77ebf6b8f864a639146549e578ee7cb264", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,13 +7,13 @@ use rustc_ast::tokenstream::{DelimSpan, Spacing::*, TokenStream, TreeAndSpacing}\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Diagnostic, PResult};\n+use rustc_errors::{Diagnostic, MultiSpan, PResult};\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n use rustc_span::def_id::CrateNum;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n+use rustc_span::{BytePos, FileName, Pos, SourceFile, Span};\n \n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};"}, {"sha": "d9b00f8f3ecefbc08a08ef84514213b13eeead4c", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -4,11 +4,11 @@ use rustc_parse::{new_parser_from_source_str, parser::Parser, source_file_to_str\n use rustc_session::parse::ParseSess;\n use rustc_span::create_default_session_if_not_set_then;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::{BytePos, MultiSpan, Span};\n+use rustc_span::{BytePos, Span};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Handler, PResult};\n+use rustc_errors::{Handler, MultiSpan, PResult};\n \n use std::io;\n use std::io::prelude::*;"}, {"sha": "34d366f40133287dda2d2c5637a82d4bef3ebdd2", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -11,6 +11,7 @@ rustc_target = { path = \"../rustc_target\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_error_messages = { path = \"../rustc_error_messages\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }"}, {"sha": "15118073b3343020fd508aeba320040e3a069760", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -13,12 +13,13 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n+use rustc_error_messages::MultiSpan;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{def_id::LocalDefId, BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{def_id::LocalDefId, BytePos, Span, DUMMY_SP};\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n "}, {"sha": "5793aedef1eb8a3b344f440cfb02aac087b36612", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -59,7 +59,7 @@ use crate::traits::{\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n@@ -72,7 +72,7 @@ use rustc_middle::ty::{\n     subst::{GenericArgKind, Subst, SubstsRef},\n     Binder, List, Region, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n+use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter};"}, {"sha": "cd20cb3db99c92c5e9a8fea621bfd2a7d4f5c32f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,11 +7,10 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::ObligationCauseCode;\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{Applicability, ErrorGuaranteed};\n+use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::ty::TypeVisitor;\n-use rustc_span::MultiSpan;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     pub(super) fn try_report_mismatched_static_lifetime(&self) -> Option<ErrorGuaranteed> {"}, {"sha": "a4c46d5cf0ba26632aa4dca79de1d0633b8b1986", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -5,15 +5,15 @@ use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n use rustc_hir::{self as hir, GenericBound, Item, ItemKind, Lifetime, LifetimeName, Node, TyKind};\n use rustc_middle::ty::{\n     self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n };\n use rustc_span::symbol::Ident;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n use std::ops::ControlFlow;\n "}, {"sha": "1788eb8628a0af8089f188f1cc41603b674c5a00", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -4,16 +4,15 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, Subtype};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n-use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::{ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n-\n-use rustc_span::{MultiSpan, Span, Symbol};\n+use rustc_span::{Span, Symbol};\n \n use std::ops::ControlFlow;\n "}, {"sha": "d297640c1402730895d897742b6f9627b127c6b6", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -2,11 +2,11 @@ use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n use std::fmt;\n use std::iter;\n "}, {"sha": "eac6a33cf22981fbd9cf92e9436786ad409c7657", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::{Applicability, ErrorGuaranteed, PResult};\n+use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n@@ -35,7 +35,7 @@ use rustc_session::output::{filename_for_input, filename_for_metadata};\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{FileName, MultiSpan};\n+use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tempfile::Builder as TempFileBuilder;"}, {"sha": "fd414dd5bc7ea05293a9f71402dc4f444dad3383", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -31,7 +31,7 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticStyledString};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticStyledString, MultiSpan};\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -49,7 +49,7 @@ use rustc_session::lint::{BuiltinLintDiagnostics, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, InnerSpan, MultiSpan, Span};\n+use rustc_span::{BytePos, InnerSpan, Span};\n use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n "}, {"sha": "3600b6ad212036da44e05b0625f6e7859695b8b4", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -21,7 +21,7 @@ use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{struct_span_err, Applicability, SuggestionStyle};\n+use rustc_errors::{struct_span_err, Applicability, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId};\n@@ -38,7 +38,7 @@ use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintI\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n use rustc_target::abi;\n use tracing::debug;\n "}, {"sha": "01f1d1e79ac6c17d113cb14678a2996ee09dda32", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3,7 +3,7 @@ use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n@@ -20,7 +20,7 @@ use rustc_session::lint::{\n use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n use tracing::debug;\n \n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {"}, {"sha": "494bdaa1e2b9cf3640912d89c80744ecb50a3004", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3,15 +3,15 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_ast::util::{classify, parser};\n use rustc_ast::{ExprKind, StmtKind};\n-use rustc_errors::{pluralize, Applicability};\n+use rustc_errors::{pluralize, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n \n declare_lint! {\n     /// The `unused_must_use` lint detects unused result of a type flagged as"}, {"sha": "fcd8c37d6774ab78722f348f2f148781f18dae23", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [dependencies]\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_error_messages = { path = \"../rustc_error_messages\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "031b01af5dd95e44056b25920d7d3e3b5960d67f", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,10 +7,11 @@ pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_error_messages::MultiSpan;\n use rustc_hir::HirId;\n use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n-use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+use rustc_span::{sym, symbol::Ident, Span, Symbol};\n use rustc_target::spec::abi::Abi;\n \n pub mod builtin;"}, {"sha": "e55b0454eefc7c4d3309e3ee6b6f0c1fa6d6091f", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{\n-    Diagnostic, DiagnosticBuilder, DiagnosticId, EmissionGuarantee, ErrorGuaranteed,\n+    Diagnostic, DiagnosticBuilder, DiagnosticId, EmissionGuarantee, ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n@@ -14,7 +14,7 @@ use rustc_session::lint::{\n };\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n-use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n+use rustc_span::source_map::{DesugaringKind, ExpnKind};\n use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set."}, {"sha": "6ca8f8b1309fafdd0b40b2256b7624a1c7ed68f7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -34,7 +34,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::{ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n@@ -54,7 +54,7 @@ use rustc_session::lint::{Level, Lint};\n use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n-use rustc_span::source_map::{MultiSpan, SourceMap};\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};"}, {"sha": "d93c9a79c6556c9e8812529301badc4ccfbe9d3e", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3,11 +3,11 @@ use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n-use rustc_errors::{pluralize, Diagnostic};\n+use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span};\n+use rustc_span::{BytePos, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;"}, {"sha": "fd7045d6a03f210da9ebfd54ab975d3ff700e179", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,7 +1,8 @@\n // These functions are used by macro expansion for bug! and span_bug!\n \n use crate::ty::{tls, TyCtxt};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_errors::MultiSpan;\n+use rustc_span::Span;\n use std::fmt;\n use std::panic::{panic_any, Location};\n "}, {"sha": "44caa2ac076f23f9de6bf3e5451284d08a982208", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -8,7 +8,7 @@ use rustc_arena::TypedArena;\n use rustc_ast::Mutability;\n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed,\n+    ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::*;\n@@ -21,7 +21,7 @@ use rustc_session::lint::builtin::{\n };\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n-use rustc_span::{BytePos, DesugaringKind, ExpnKind, MultiSpan, Span};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span};\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = match def_id.as_local() {"}, {"sha": "2999db7978556e5d7c5cad634a2ed031d549aa86", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -18,10 +18,10 @@ use rustc_ast::{\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, ErrorGuaranteed};\n-use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, Handler, MultiSpan, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n+use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n@@ -1752,7 +1752,7 @@ impl<'a> Parser<'a> {\n                     let mut primary_span: MultiSpan = primary_span.into();\n                     for span_label in err.span.span_labels() {\n                         if let Some(label) = span_label.label {\n-                            primary_span.push_span_label(span_label.span, label);\n+                            primary_span.push_span_message(span_label.span, label);\n                         }\n                     }\n                     err.set_span(primary_span);"}, {"sha": "792f9d9ccce56476cf602177f83a45d9f46f61f4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -33,10 +33,10 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::PResult;\n use rustc_errors::{\n-    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError,\n+    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, FatalError, MultiSpan,\n };\n use rustc_session::parse::ParseSess;\n-use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use tracing::debug;\n "}, {"sha": "1f12f99efb3d5b21a04a304f7580bc772dfe53cb", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -6,7 +6,7 @@\n \n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -21,7 +21,7 @@ use rustc_session::lint::builtin::{\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n \n pub(crate) fn target_from_impl_item<'tcx>("}, {"sha": "6503b97a1d31fbc8d57e1d298d4f42381387ca82", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -32,10 +32,10 @@ use rustc_ast::node_id::NodeMap;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::pluralize;\n+use rustc_errors::{pluralize, MultiSpan};\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::{MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n     use_tree: &'a ast::UseTree,"}, {"sha": "c9a6bb542c07ce280382b2a9d759e5fc07a32c81", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::{self as ast, Path};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n-    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n@@ -18,7 +18,7 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span};\n+use rustc_span::{BytePos, Span};\n use tracing::debug;\n \n use crate::imports::{Import, ImportKind, ImportResolver};"}, {"sha": "add499701afc2b9855f7d970b7624f2aa377a077", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -12,7 +12,7 @@ use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBindin\n use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::{pluralize, struct_span_err, Applicability};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n use rustc_middle::metadata::ModChild;\n@@ -23,7 +23,7 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::hygiene::LocalExpnId;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n use tracing::*;\n "}, {"sha": "920605a7463ee31eed1eecd68764a5afd98d28bc", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -14,6 +14,7 @@ use rustc_ast_pretty::pprust::path_segment_to_string;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::Namespace::{self, *};\n@@ -25,7 +26,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use std::iter;\n use std::ops::Deref;\n@@ -1106,7 +1107,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .collect();\n \n                     if non_visible_spans.len() > 0 {\n-                        let mut m: rustc_span::MultiSpan = non_visible_spans.clone().into();\n+                        let mut m: MultiSpan = non_visible_spans.clone().into();\n                         non_visible_spans\n                             .into_iter()\n                             .for_each(|s| m.push_span_label(s, \"private field\".to_string()));"}, {"sha": "5a93303ad559ba2f46145189b746ee7c43bcbe6a", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -7,12 +7,14 @@ use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n-use rustc_errors::{error_code, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    error_code, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::{MultiSpan, Span, Symbol};\n+use rustc_span::{Span, Symbol};\n \n use std::str;\n "}, {"sha": "321ab6af6e5a13b6d85afc65822ad3eaa046658e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -19,11 +19,11 @@ use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n-use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed, MultiSpan};\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n+use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap, Span};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};"}, {"sha": "5232c8d7006bdb88ab54fd7fddaad7b3fae5e6e9", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -520,20 +520,6 @@ impl Ord for Span {\n     }\n }\n \n-/// A collection of `Span`s.\n-///\n-/// Spans have two orthogonal attributes:\n-///\n-/// - They can be *primary spans*. In this case they are the locus of\n-///   the error, and would be rendered with `^^^`.\n-/// - They can have a *label*. In this case, the label is written next\n-///   to the mark in the snippet when we render.\n-#[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]\n-pub struct MultiSpan {\n-    primary_spans: Vec<Span>,\n-    span_labels: Vec<(Span, String)>,\n-}\n-\n impl Span {\n     #[inline]\n     pub fn lo(self) -> BytePos {\n@@ -949,20 +935,6 @@ impl Span {\n     }\n }\n \n-/// A span together with some additional data.\n-#[derive(Clone, Debug)]\n-pub struct SpanLabel {\n-    /// The span we are going to include in the final snippet.\n-    pub span: Span,\n-\n-    /// Is this a primary span? This is the \"locus\" of the message,\n-    /// and is indicated with a `^^^^` underline, versus `----`.\n-    pub is_primary: bool,\n-\n-    /// What label should we attach to this span (if any)?\n-    pub label: Option<String>,\n-}\n-\n impl Default for Span {\n     fn default() -> Self {\n         DUMMY_SP\n@@ -1035,115 +1007,6 @@ impl fmt::Debug for SpanData {\n     }\n }\n \n-impl MultiSpan {\n-    #[inline]\n-    pub fn new() -> MultiSpan {\n-        MultiSpan { primary_spans: vec![], span_labels: vec![] }\n-    }\n-\n-    pub fn from_span(primary_span: Span) -> MultiSpan {\n-        MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }\n-    }\n-\n-    pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {\n-        vec.sort();\n-        MultiSpan { primary_spans: vec, span_labels: vec![] }\n-    }\n-\n-    pub fn push_span_label(&mut self, span: Span, label: String) {\n-        self.span_labels.push((span, label));\n-    }\n-\n-    /// Selects the first primary span (if any).\n-    pub fn primary_span(&self) -> Option<Span> {\n-        self.primary_spans.first().cloned()\n-    }\n-\n-    /// Returns all primary spans.\n-    pub fn primary_spans(&self) -> &[Span] {\n-        &self.primary_spans\n-    }\n-\n-    /// Returns `true` if any of the primary spans are displayable.\n-    pub fn has_primary_spans(&self) -> bool {\n-        self.primary_spans.iter().any(|sp| !sp.is_dummy())\n-    }\n-\n-    /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n-    pub fn is_dummy(&self) -> bool {\n-        let mut is_dummy = true;\n-        for span in &self.primary_spans {\n-            if !span.is_dummy() {\n-                is_dummy = false;\n-            }\n-        }\n-        is_dummy\n-    }\n-\n-    /// Replaces all occurrences of one Span with another. Used to move `Span`s in areas that don't\n-    /// display well (like std macros). Returns whether replacements occurred.\n-    pub fn replace(&mut self, before: Span, after: Span) -> bool {\n-        let mut replacements_occurred = false;\n-        for primary_span in &mut self.primary_spans {\n-            if *primary_span == before {\n-                *primary_span = after;\n-                replacements_occurred = true;\n-            }\n-        }\n-        for span_label in &mut self.span_labels {\n-            if span_label.0 == before {\n-                span_label.0 = after;\n-                replacements_occurred = true;\n-            }\n-        }\n-        replacements_occurred\n-    }\n-\n-    /// Returns the strings to highlight. We always ensure that there\n-    /// is an entry for each of the primary spans -- for each primary\n-    /// span `P`, if there is at least one label with span `P`, we return\n-    /// those labels (marked as primary). But otherwise we return\n-    /// `SpanLabel` instances with empty labels.\n-    pub fn span_labels(&self) -> Vec<SpanLabel> {\n-        let is_primary = |span| self.primary_spans.contains(&span);\n-\n-        let mut span_labels = self\n-            .span_labels\n-            .iter()\n-            .map(|&(span, ref label)| SpanLabel {\n-                span,\n-                is_primary: is_primary(span),\n-                label: Some(label.clone()),\n-            })\n-            .collect::<Vec<_>>();\n-\n-        for &span in &self.primary_spans {\n-            if !span_labels.iter().any(|sl| sl.span == span) {\n-                span_labels.push(SpanLabel { span, is_primary: true, label: None });\n-            }\n-        }\n-\n-        span_labels\n-    }\n-\n-    /// Returns `true` if any of the span labels is displayable.\n-    pub fn has_span_labels(&self) -> bool {\n-        self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())\n-    }\n-}\n-\n-impl From<Span> for MultiSpan {\n-    fn from(span: Span) -> MultiSpan {\n-        MultiSpan::from_span(span)\n-    }\n-}\n-\n-impl From<Vec<Span>> for MultiSpan {\n-    fn from(spans: Vec<Span>) -> MultiSpan {\n-        MultiSpan::from_spans(spans)\n-    }\n-}\n-\n /// Identifies an offset of a multi-byte character in a `SourceFile`.\n #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]\n pub struct MultiByteChar {"}, {"sha": "ff3488b7b769d3b29b59551a51d1361f692b24f0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -15,7 +15,7 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n-    Style,\n+    MultiSpan, Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -33,7 +33,7 @@ use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{ExpnKind, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;\n use std::iter;\n "}, {"sha": "e4ccd21246e9c23ef37050b80b115aaa296e14f8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     error_code, pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, Style,\n+    ErrorGuaranteed, MultiSpan, Style,\n };\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -27,7 +27,7 @@ use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, DesugaringKind, ExpnKind, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::fmt;\n "}, {"sha": "a31ae25aea0dcf05e2fa82d1b36fee9d9dd53e23", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -14,15 +14,15 @@ use crate::infer::TyCtxtInferExt;\n use crate::traits::const_evaluatable::{self, AbstractConst};\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::{self, Obligation, ObligationCause};\n-use rustc_errors::FatalError;\n+use rustc_errors::{FatalError, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n use smallvec::SmallVec;\n \n use std::iter;"}, {"sha": "a50301dbc87f0e2b9612ef013fe1809335561eab", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -16,7 +16,7 @@ use rustc_middle::ty::{\n     self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, Ty, TyCtxt,\n };\n use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n-use rustc_span::{symbol::kw, MultiSpan, Span};\n+use rustc_span::{symbol::kw, Span};\n use smallvec::SmallVec;\n \n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {"}, {"sha": "26f7c267ed1c4622e678a388710e987bc0dd8e75", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,11 +1,11 @@\n use crate::check::coercion::{AsCoercionSite, CoerceMany};\n use crate::check::{Diverges, Expectation, FnCtxt, Needs};\n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir::{self as hir, ExprKind};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::traits::Obligation;\n use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,"}, {"sha": "9ebafc26f61fdda25db65258c8bb9e7677d10f87", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -4,7 +4,7 @@ use super::compare_method::{compare_const_impl, compare_impl_method, compare_ty_\n use super::*;\n \n use rustc_attr as attr;\n-use rustc_errors::{Applicability, ErrorGuaranteed};\n+use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n@@ -20,7 +20,7 @@ use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n-use rustc_span::{self, MultiSpan, Span};\n+use rustc_span::{self, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;"}, {"sha": "d403d6e3f33828ccd16d4021e994b6df18dc9e55", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -8,7 +8,7 @@ use crate::check::{BreakableCtxt, Diverges, Expectation, FnCtxt, LocalTy};\n \n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -30,7 +30,7 @@ use rustc_session::lint;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{self, BytePos, MultiSpan, Span};\n+use rustc_span::{self, BytePos, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{"}, {"sha": "1cc1460750a2334881ad2df934229cfbb3721b77", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -11,7 +11,7 @@ use crate::check::{\n \n use rustc_ast as ast;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticId};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticId, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -21,7 +21,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n-use rustc_span::{self, MultiSpan, Span};\n+use rustc_span::{self, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, StatementAsExpression};\n \n use crate::structured_errors::StructuredDiagnostic;"}, {"sha": "1ccdbb0aa500be1bafaf147c62ec163f3bbb5548", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -2,9 +2,9 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_span::{self, MultiSpan, Span};\n+use rustc_span::{self, Span};\n \n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;"}, {"sha": "ecc2996593704a85e15cf76a3c163b32d9688a99", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -5,6 +5,7 @@ use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -17,7 +18,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, MultiSpan, Span};\n+use rustc_span::{lev_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::InferCtxtExt as _;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_trait_selection::traits::{"}, {"sha": "19d52f430fcd56214531951c1362416eb7b142de", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -103,7 +103,7 @@ pub use inherited::{Inherited, InheritedBuilder};\n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -121,7 +121,7 @@ use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, BytePos, MultiSpan, Span};\n+use rustc_span::{self, BytePos, Span};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;"}, {"sha": "0baca9048b4cd56f22d4e3f1dc3e526facec0797", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -4,6 +4,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -18,7 +19,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n+use rustc_span::{BytePos, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;"}, {"sha": "1118e967707357de5e65fa70a9eec53d318ab454", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -33,7 +33,7 @@\n use super::FnCtxt;\n \n use crate::expr_use_visitor as euv;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n@@ -46,7 +46,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::sym;\n-use rustc_span::{BytePos, MultiSpan, Pos, Span, Symbol};\n+use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use rustc_data_structures::stable_map::FxHashMap;"}, {"sha": "24b6639d7f2758373959b4d2115612f9b9a1a0e3", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -1,13 +1,14 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{\n     pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed,\n+    MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::Session;\n-use rustc_span::{def_id::DefId, MultiSpan};\n+use rustc_span::def_id::DefId;\n \n use GenericArgsInfo::*;\n "}, {"sha": "acb3c917d6243119cf91cf0c6b8f72e3abc76b37", "filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -3,11 +3,12 @@ use clippy_utils::higher::IfLetOrMatch;\n use clippy_utils::visitors::is_local_used;\n use clippy_utils::{is_lang_ctor, is_unit_expr, path_to_local, peel_blocks_with_stmt, peel_ref_operators, SpanlessEq};\n use if_chain::if_chain;\n+use rustc_errors::MultiSpan;\n use rustc_hir::LangItem::OptionNone;\n use rustc_hir::{Arm, Expr, Guard, HirId, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "d67c03714e3891b7a51ec8a60b4b051930e384df", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -11,7 +11,7 @@ use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Applicability, Handler, SuggestionStyle};\n+use rustc_errors::{Applicability, Handler, MultiSpan, SuggestionStyle};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AnonConst, Expr};\n@@ -25,7 +25,7 @@ use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n+use rustc_span::source_map::{BytePos, FilePathMapping, SourceMap, Span};\n use rustc_span::{sym, FileName, Pos};\n use std::io;\n use std::ops::Range;"}, {"sha": "c7772e483adbd43880371a2b04b22c30f737cf43", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -6,15 +6,15 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{can_move_expr_to_closure, is_trait_method, path_to_local, path_to_local_id, CaptureKind};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId, HirIdSet, Local, Mutability, Node, PatKind, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::sym;\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::Span;\n \n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n "}, {"sha": "5f453dc16555874f783fd6de9d8d54e462b8edb3", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::expr_sig;\n use clippy_utils::{get_expr_use_or_unification_node, is_lint_allowed, path_def_id, path_to_local, paths};\n use if_chain::if_chain;\n-use rustc_errors::Applicability;\n+use rustc_errors::{Applicability, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdMap;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n@@ -19,8 +19,8 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{sym, MultiSpan};\n use std::fmt;\n use std::iter;\n "}, {"sha": "b142397f71b9c101b6dde6564dbbe93d512624d6", "filename": "src/tools/clippy/clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -8,10 +8,10 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic};\n+use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic, MultiSpan};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n-use rustc_span::source_map::{MultiSpan, Span};\n+use rustc_span::source_map::Span;\n use std::env;\n \n fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n@@ -155,7 +155,13 @@ where\n     });\n }\n \n-pub fn span_lint_hir(cx: &LateContext<'_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n+pub fn span_lint_hir(\n+    cx: &LateContext<'_>,\n+    lint: &'static Lint,\n+    hir_id: HirId,\n+    sp: Span,\n+    msg: &str,\n+) {\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n         let mut diag = diag.build(msg);\n         docs_link(&mut diag, lint);\n@@ -272,9 +278,14 @@ pub fn span_lint_and_sugg_for_edges(\n         let sugg_lines_count = sugg.lines().count();\n         if sugg_lines_count > MAX_SUGGESTION_HIGHLIGHT_LINES {\n             let sm = cx.sess().source_map();\n-            if let (Ok(line_upper), Ok(line_bottom)) = (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi())) {\n+            if let (Ok(line_upper), Ok(line_bottom)) =\n+                (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi()))\n+            {\n                 let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n-                let span_upper = sm.span_until_char(sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]), '\\n');\n+                let span_upper = sm.span_until_char(\n+                    sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]),\n+                    '\\n',\n+                );\n                 let span_bottom = sp.with_lo(line_bottom.sf.lines[line_bottom.line - split_idx]);\n \n                 let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();"}, {"sha": "7f11cddd882c741de634804a058772b5e770c236", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f29595df6f6a178b7998bc33c76099f3c12b7/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=c45f29595df6f6a178b7998bc33c76099f3c12b7", "patch": "@@ -313,7 +313,8 @@ mod tests {\n         use super::*;\n         use crate::config::IgnoreList;\n         use crate::utils::mk_sp;\n-        use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName};\n+        use rustc_errors::MultiSpan;\n+        use rustc_span::{FileName as SourceMapFileName, RealFileName};\n         use std::path::PathBuf;\n         use std::sync::atomic::AtomicU32;\n "}]}