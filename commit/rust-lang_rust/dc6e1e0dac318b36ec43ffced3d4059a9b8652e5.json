{"sha": "dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNmUxZTBkYWMzMThiMzZlYzQzZmZjZWQzZDQwNTlhOWI4NjUyZTU=", "commit": {"author": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T02:55:26Z"}, "committer": {"name": "JmPotato", "email": "ghzpotato@gmail.com", "date": "2020-08-11T02:55:26Z"}, "message": "Address some FIXMEs\n\nSigned-off-by: JmPotato <ghzpotato@gmail.com>", "tree": {"sha": "40fb2c25df0596b2fed4167458fe848132df1410", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fb2c25df0596b2fed4167458fe848132df1410"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "html_url": "https://github.com/rust-lang/rust/commit/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/comments", "author": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JmPotato", "id": 1446531, "node_id": "MDQ6VXNlcjE0NDY1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1446531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JmPotato", "html_url": "https://github.com/JmPotato", "followers_url": "https://api.github.com/users/JmPotato/followers", "following_url": "https://api.github.com/users/JmPotato/following{/other_user}", "gists_url": "https://api.github.com/users/JmPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/JmPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JmPotato/subscriptions", "organizations_url": "https://api.github.com/users/JmPotato/orgs", "repos_url": "https://api.github.com/users/JmPotato/repos", "events_url": "https://api.github.com/users/JmPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/JmPotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b050937c1071e68a4ade69375f1f17b703cafb02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b050937c1071e68a4ade69375f1f17b703cafb02", "html_url": "https://github.com/rust-lang/rust/commit/b050937c1071e68a4ade69375f1f17b703cafb02"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "936e863f52f8799eee732962e4815efe49608923", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -912,6 +912,7 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n+ \"ra_hir_expand\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\","}, {"sha": "a436e861d7ec7a15258b4b7cef36868c025f4275", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -22,4 +22,5 @@ ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "02c4a4baeb0c7d27d7045bd7b49f2e06c42058c7", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -2,6 +2,7 @@\n use rustc_hash::FxHashMap;\n \n use hir::{HirDisplay, PathResolution, SemanticsScope};\n+use hir_expand::hygiene::Hygiene;\n use ra_syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n@@ -51,7 +52,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             // this is a trait impl, so we need to skip the first type parameter -- this is a bit hacky\n             .skip(1)\n             // The actual list of trait type parameters may be longer than the one\n-            // used in the `impl` block due to trailing default type parametrs.\n+            // used in the `impl` block due to trailing default type parameters.\n             // For that case we extend the `substs` with an empty iterator so we\n             // can still hit those trailing values and check if they actually have\n             // a default type. If they do, go for that type from `hir` to `ast` so\n@@ -110,9 +111,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             ast::Type::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n-        // FIXME: use `hir::Path::from_src` instead.\n-        #[allow(deprecated)]\n-        let path = hir::Path::from_ast(path)?;\n+        let path = hir::Path::from_src(path, &Hygiene::new_unhygienic())?;\n         let resolution = self.source_scope.resolve_hir_path(&path)?;\n         match resolution {\n             hir::PathResolution::TypeParam(tp) => Some(self.substs.get(&tp)?.syntax().clone()),\n@@ -152,10 +151,8 @@ impl<'a> QualifyPaths<'a> {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n             return None;\n         }\n-        // FIXME: use `hir::Path::from_src` instead.\n-        #[allow(deprecated)]\n-        let hir_path = hir::Path::from_ast(p.clone());\n-        let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n+        let hir_path = hir::Path::from_src(p.clone(), &Hygiene::new_unhygienic())?;\n+        let resolution = self.source_scope.resolve_hir_path(&hir_path)?;\n         match resolution {\n             PathResolution::Def(def) => {\n                 let found_path = from.find_use_path(self.source_scope.db.upcast(), def)?;"}, {"sha": "890996a68d9bd347f2da0c092c287c1d418b13e5", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -66,13 +66,13 @@ pub struct GroupLabel(pub String);\n \n #[derive(Debug, Clone)]\n pub struct Assist {\n-    pub id: AssistId,\n+    id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n-    pub label: String,\n-    pub group: Option<GroupLabel>,\n+    label: String,\n+    group: Option<GroupLabel>,\n     /// Target ranges are used to sort assists: the smaller the target range,\n     /// the more specific assist is, and so it should be sorted first.\n-    pub target: TextRange,\n+    target: TextRange,\n }\n \n #[derive(Debug, Clone)]\n@@ -120,10 +120,25 @@ impl Assist {\n         group: Option<GroupLabel>,\n         target: TextRange,\n     ) -> Assist {\n-        // FIXME: make fields private, so that this invariant can't be broken\n         assert!(label.starts_with(|c: char| c.is_uppercase()));\n         Assist { id, label, group, target }\n     }\n+\n+    pub fn id(&self) -> AssistId {\n+        self.id\n+    }\n+\n+    pub fn label(&self) -> String {\n+        self.label.clone()\n+    }\n+\n+    pub fn group(&self) -> Option<GroupLabel> {\n+        self.group.clone()\n+    }\n+\n+    pub fn target(&self) -> TextRange {\n+        self.target\n+    }\n }\n \n mod handlers {"}, {"sha": "c2afcf192dedbc0c3040b0d41fc6700e70f27435", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -864,7 +864,7 @@ pub(crate) fn handle_resolve_code_action(\n     let (id_string, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n-    assert!(assist.assist.id.0 == id_string);\n+    assert!(assist.assist.id().0 == id_string);\n     Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n }\n "}, {"sha": "62fda8a1f20cffd0e23a65726d2bcc36cc2f2dcb", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6e1e0dac318b36ec43ffced3d4059a9b8652e5/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=dc6e1e0dac318b36ec43ffced3d4059a9b8652e5", "patch": "@@ -704,10 +704,10 @@ pub(crate) fn unresolved_code_action(\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n-        title: assist.label,\n-        id: Some(format!(\"{}:{}\", assist.id.0.to_owned(), index.to_string())),\n-        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.id.1)),\n+        title: assist.label(),\n+        id: Some(format!(\"{}:{}\", assist.id().0.to_owned(), index.to_string())),\n+        group: assist.group().filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        kind: Some(code_action_kind(assist.id().1)),\n         edit: None,\n         is_preferred: None,\n     };"}]}