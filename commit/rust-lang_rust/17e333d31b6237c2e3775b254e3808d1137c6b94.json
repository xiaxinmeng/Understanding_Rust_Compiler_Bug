{"sha": "17e333d31b6237c2e3775b254e3808d1137c6b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZTMzM2QzMWI2MjM3YzJlMzc3NWIyNTRlMzgwOGQxMTM3YzZiOTQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-17T06:56:27Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:32:46Z"}, "message": "Move AST Repr impls to Debug impls in libsyntax.", "tree": {"sha": "8a31c6de6dc3625f7e31f18de8122a662801c5f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a31c6de6dc3625f7e31f18de8122a662801c5f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e333d31b6237c2e3775b254e3808d1137c6b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e333d31b6237c2e3775b254e3808d1137c6b94", "html_url": "https://github.com/rust-lang/rust/commit/17e333d31b6237c2e3775b254e3808d1137c6b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e333d31b6237c2e3775b254e3808d1137c6b94/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7daa0daff91f8a58708f2d98f94d49acc28c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7daa0daff91f8a58708f2d98f94d49acc28c6a", "html_url": "https://github.com/rust-lang/rust/commit/af7daa0daff91f8a58708f2d98f94d49acc28c6a"}], "stats": {"total": 213, "additions": 150, "deletions": 63}, "files": [{"sha": "8af6946d3c3b13981348069d19c9375274bb47aa", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -33,7 +33,6 @@ use middle::mem_categorization as mc;\n use middle::traits;\n use middle::ty::{self, Ty};\n use util::nodemap::NodeMap;\n-use util::ppaux::Repr;\n \n use syntax::ast;\n use syntax::codemap::Span;\n@@ -300,7 +299,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n-        debug!(\"visit_item(item={})\", i.repr());\n+        debug!(\"visit_item(item={})\", self.tcx.map.node_to_string(i.id));\n         match i.node {\n             ast::ItemStatic(_, ast::MutImmutable, ref expr) => {\n                 self.check_static_type(&**expr);"}, {"sha": "293043af53979db33301c8e18b555c4c80ad1eb6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -927,20 +927,64 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Binder<T> {\n }\n \n pub mod tls {\n+    use ast_map;\n     use middle::ty;\n     use session::Session;\n \n+    use std::fmt;\n+    use syntax::ast;\n+    use syntax::codemap;\n+\n     /// Marker type used for the scoped TLS slot.\n     /// The type context cannot be used directly because the scoped TLS\n     /// in libstd doesn't allow types generic over lifetimes.\n     struct ThreadLocalTyCx;\n \n     scoped_thread_local!(static TLS_TCX: ThreadLocalTyCx);\n \n+    fn def_id_debug(def_id: ast::DefId, f: &mut fmt::Formatter) -> fmt::Result {\n+        // Unfortunately, there seems to be no way to attempt to print\n+        // a path for a def-id, so I'll just make a best effort for now\n+        // and otherwise fallback to just printing the crate/node pair\n+        with(|tcx| {\n+            if def_id.krate == ast::LOCAL_CRATE {\n+                match tcx.map.find(def_id.node) {\n+                    Some(ast_map::NodeItem(..)) |\n+                    Some(ast_map::NodeForeignItem(..)) |\n+                    Some(ast_map::NodeImplItem(..)) |\n+                    Some(ast_map::NodeTraitItem(..)) |\n+                    Some(ast_map::NodeVariant(..)) |\n+                    Some(ast_map::NodeStructCtor(..)) => {\n+                        return write!(f, \"{}\", ty::item_path_str(tcx, def_id));\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            Ok(())\n+        })\n+    }\n+\n+    fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result {\n+        with(|tcx| {\n+            write!(f, \"{}\", tcx.sess.codemap().span_to_string(span))\n+        })\n+    }\n+\n     pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F)\n                                                            -> (Session, R) {\n-        let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n-        let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n+        let result = ast::DEF_ID_DEBUG.with(|def_id_dbg| {\n+            codemap::SPAN_DEBUG.with(|span_dbg| {\n+                let original_def_id_debug = def_id_dbg.get();\n+                def_id_dbg.set(def_id_debug);\n+                let original_span_debug = span_dbg.get();\n+                span_dbg.set(span_debug);\n+                let tls_ptr = &tcx as *const _ as *const ThreadLocalTyCx;\n+                let result = TLS_TCX.set(unsafe { &*tls_ptr }, || f(&tcx));\n+                def_id_dbg.set(original_def_id_debug);\n+                span_dbg.set(original_span_debug);\n+                result\n+            })\n+        });\n         (tcx.sess, result)\n     }\n "}, {"sha": "3851eb6573ba11deb690f4b4400c1708ac74588c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 12, "deletions": 42, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use ast_map;\n use middle::def;\n use middle::region;\n use middle::subst::{VecPerParamSpace,Subst};\n@@ -34,7 +33,6 @@ use std::rc::Rc;\n use syntax::abi;\n use syntax::codemap::Span;\n use syntax::parse::token;\n-use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::{ast, ast_util};\n use syntax::owned_slice::OwnedSlice;\n@@ -469,51 +467,43 @@ impl<'tcx> Repr for ty::TraitDef<'tcx> {\n \n impl Repr for ast::Expr {\n     fn repr(&self) -> String {\n-        format!(\"expr({}: {})\", self.id, pprust::expr_to_string(self))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ast::Path {\n     fn repr(&self) -> String {\n-        format!(\"path({})\", pprust::path_to_string(self))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl UserString for ast::Path {\n     fn user_string(&self) -> String {\n-        pprust::path_to_string(self)\n+        format!(\"{}\", *self)\n     }\n }\n \n impl Repr for ast::Ty {\n     fn repr(&self) -> String {\n-        format!(\"type({})\", pprust::ty_to_string(self))\n-    }\n-}\n-\n-impl Repr for ast::Item {\n-    fn repr(&self) -> String {\n-        format!(\"item({})\", ty::tls::with(|tcx| tcx.map.node_to_string(self.id)))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ast::Lifetime {\n     fn repr(&self) -> String {\n-        format!(\"lifetime({}: {})\", self.id, pprust::lifetime_to_string(self))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ast::Stmt {\n     fn repr(&self) -> String {\n-        format!(\"stmt({}: {})\",\n-                ast_util::stmt_id(self),\n-                pprust::stmt_to_string(self))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl Repr for ast::Pat {\n     fn repr(&self) -> String {\n-        format!(\"pat({}: {})\", self.id, pprust::pat_to_string(self))\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -646,27 +636,7 @@ impl Repr for region::DestructionScopeData {\n \n impl Repr for ast::DefId {\n     fn repr(&self) -> String {\n-        // Unfortunately, there seems to be no way to attempt to print\n-        // a path for a def-id, so I'll just make a best effort for now\n-        // and otherwise fallback to just printing the crate/node pair\n-        ty::tls::with(|tcx| {\n-            if self.krate == ast::LOCAL_CRATE {\n-                match tcx.map.find(self.node) {\n-                    Some(ast_map::NodeItem(..)) |\n-                    Some(ast_map::NodeForeignItem(..)) |\n-                    Some(ast_map::NodeImplItem(..)) |\n-                    Some(ast_map::NodeTraitItem(..)) |\n-                    Some(ast_map::NodeVariant(..)) |\n-                    Some(ast_map::NodeStructCtor(..)) => {\n-                        return format!(\"{:?}:{}\",\n-                                       *self,\n-                                       ty::item_path_str(tcx, *self));\n-                    }\n-                    _ => {}\n-                }\n-            }\n-            format!(\"{:?}\", *self)\n-        })\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -765,13 +735,13 @@ impl<'tcx> Repr for ty::Method<'tcx> {\n \n impl Repr for ast::Name {\n     fn repr(&self) -> String {\n-        token::get_name(*self).to_string()\n+        format!(\"{:?}\", *self)\n     }\n }\n \n impl UserString for ast::Name {\n     fn user_string(&self) -> String {\n-        token::get_name(*self).to_string()\n+        format!(\"{}\", *self)\n     }\n }\n \n@@ -878,7 +848,7 @@ impl UserString for ty::BuiltinBound {\n \n impl Repr for Span {\n     fn repr(&self) -> String {\n-        ty::tls::with(|tcx| tcx.sess.codemap().span_to_string(*self).to_string())\n+        format!(\"{:?}\", *self)\n     }\n }\n \n@@ -1163,7 +1133,7 @@ impl<'tcx> UserString for ty::TyS<'tcx> {\n \n impl UserString for ast::Ident {\n     fn user_string(&self) -> String {\n-        token::get_name(self.name).to_string()\n+        format!(\"{}\", *self)\n     }\n }\n "}, {"sha": "3068bb9923dd0ded573ea33a069cb46f0b0155b0", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -66,7 +66,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n             ast::ItemImpl(_, _, _, None, _, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n-                debug!(\"coherence2::orphan check: inherent impl {}\", item.repr());\n+                debug!(\"coherence2::orphan check: inherent impl {}\",\n+                       self.tcx.map.node_to_string(item.id));\n                 let self_ty = ty::lookup_item_type(self.tcx, def_id).ty;\n                 match self_ty.sty {\n                     ty::TyEnum(def_id, _) |\n@@ -208,7 +209,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n             }\n             ast::ItemImpl(_, _, _, Some(_), _, _) => {\n                 // \"Trait\" impl\n-                debug!(\"coherence2::orphan check: trait impl {}\", item.repr());\n+                debug!(\"coherence2::orphan check: trait impl {}\",\n+                       self.tcx.map.node_to_string(item.id));\n                 let trait_ref = ty::impl_trait_ref(self.tcx, def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;\n                 match traits::orphan_check(self.tcx, def_id) {\n@@ -329,7 +331,8 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n             }\n             ast::ItemDefaultImpl(..) => {\n                 // \"Trait\" impl\n-                debug!(\"coherence2::orphan check: default trait impl {}\", item.repr());\n+                debug!(\"coherence2::orphan check: default trait impl {}\",\n+                       self.tcx.map.node_to_string(item.id));\n                 let trait_ref = ty::impl_trait_ref(self.tcx, def_id).unwrap();\n                 if trait_ref.def_id.krate != ast::LOCAL_CRATE {\n                     span_err!(self.tcx.sess, item.span, E0318,"}, {"sha": "91ec676c09521b2934e26c9bae3eadebe81586b5", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -518,7 +518,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        debug!(\"add_inferreds for item {}\", item.repr());\n+        debug!(\"add_inferreds for item {}\", self.tcx.map.node_to_string(item.id));\n \n         match item.node {\n             ast::ItemEnum(_, ref generics) |\n@@ -600,8 +600,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n         let did = ast_util::local_def(item.id);\n         let tcx = self.terms_cx.tcx;\n \n-        debug!(\"visit_item item={}\",\n-               item.repr());\n+        debug!(\"visit_item item={}\", tcx.map.node_to_string(item.id));\n \n         match item.node {\n             ast::ItemEnum(ref enum_definition, _) => {"}, {"sha": "e844b206cc0a0c0937802d45fda711c9b98dbb47", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 67, "deletions": 9, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -63,8 +63,10 @@ use owned_slice::OwnedSlice;\n use parse::token::{InternedString, str_to_ident};\n use parse::token;\n use parse::lexer;\n+use print::pprust;\n use ptr::P;\n \n+use std::cell::Cell;\n use std::fmt;\n use std::rc::Rc;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -200,14 +202,19 @@ impl Decodable for Ident {\n /// Function name (not all functions have names)\n pub type FnIdent = Option<Ident>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,\n-           Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n+impl fmt::Debug for Lifetime {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"lifetime({}: {})\", self.id, pprust::lifetime_to_string(self))\n+    }\n+}\n+\n /// A lifetime definition, eg `'a: 'b+'c+'d`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n@@ -218,7 +225,7 @@ pub struct LifetimeDef {\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Path {\n     pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n@@ -228,6 +235,18 @@ pub struct Path {\n     pub segments: Vec<PathSegment>,\n }\n \n+impl fmt::Debug for Path {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"path({})\", pprust::path_to_string(self))\n+    }\n+}\n+\n+impl fmt::Display for Path {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", pprust::path_to_string(self))\n+    }\n+}\n+\n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -358,12 +377,25 @@ pub type CrateNum = u32;\n pub type NodeId = u32;\n \n #[derive(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n-           RustcDecodable, Hash, Debug, Copy)]\n+           RustcDecodable, Hash, Copy)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub node: NodeId,\n }\n \n+fn default_def_id_debug(_: DefId, _: &mut fmt::Formatter) -> fmt::Result { Ok(()) }\n+\n+thread_local!(pub static DEF_ID_DEBUG: Cell<fn(DefId, &mut fmt::Formatter) -> fmt::Result> =\n+                Cell::new(default_def_id_debug));\n+\n+impl fmt::Debug for DefId {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, \"DefId {{ krate: {}, node: {} }}\",\n+                    self.krate, self.node));\n+        DEF_ID_DEBUG.with(|def_id_debug| def_id_debug.get()(*self, f))\n+    }\n+}\n+\n impl DefId {\n     /// Read the node id, asserting that this def-id is krate-local.\n     pub fn local_id(&self) -> NodeId {\n@@ -539,13 +571,19 @@ pub struct Block {\n     pub span: Span,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Pat {\n     pub id: NodeId,\n     pub node: Pat_,\n     pub span: Span,\n }\n \n+impl fmt::Debug for Pat {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"pat({}: {})\", self.id, pprust::pat_to_string(self))\n+    }\n+}\n+\n /// A single field in a struct pattern\n ///\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n@@ -682,7 +720,16 @@ pub enum UnOp {\n /// A statement\n pub type Stmt = Spanned<Stmt_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+impl fmt::Debug for Stmt {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"stmt({}: {})\",\n+               ast_util::stmt_id(self),\n+               pprust::stmt_to_string(self))\n+    }\n+}\n+\n+\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum Stmt_ {\n     /// Could be an item or a local (let) binding:\n     StmtDecl(P<Decl>, NodeId),\n@@ -695,7 +742,6 @@ pub enum Stmt_ {\n \n     StmtMac(P<Mac>, MacStmtStyle),\n }\n-\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n@@ -772,13 +818,19 @@ pub enum UnsafeSource {\n }\n \n /// An expression\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,)]\n pub struct Expr {\n     pub id: NodeId,\n     pub node: Expr_,\n     pub span: Span,\n }\n \n+impl fmt::Debug for Expr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"expr({}: {})\", self.id, pprust::expr_to_string(self))\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n@@ -1357,13 +1409,19 @@ pub struct TypeBinding {\n \n \n // NB PartialEq method appears below.\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n     pub span: Span,\n }\n \n+impl fmt::Debug for Ty {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"type({})\", pprust::ty_to_string(self))\n+    }\n+}\n+\n /// Not represented directly in the AST, referred to by name through a ty_path.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum PrimTy {"}, {"sha": "5ddcfaef9ea286e5261faa12f21e045eef7e72b8", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e333d31b6237c2e3775b254e3808d1137c6b94/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=17e333d31b6237c2e3775b254e3808d1137c6b94", "patch": "@@ -19,7 +19,7 @@\n \n pub use self::ExpnFormat::*;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::ops::{Add, Sub};\n use std::path::Path;\n use std::rc::Rc;\n@@ -115,7 +115,7 @@ impl Sub for CharPos {\n /// are *absolute* positions from the beginning of the codemap, not positions\n /// relative to FileMaps. Methods on the CodeMap can be used to relate spans back\n /// to the original source.\n-#[derive(Clone, Copy, Debug, Hash)]\n+#[derive(Clone, Copy, Hash)]\n pub struct Span {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -164,6 +164,20 @@ impl Decodable for Span {\n     }\n }\n \n+fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n+    write!(f, \"Span {{ lo: {:?}, hi: {:?}, expn_id: {:?} }}\",\n+           span.lo, span.hi, span.expn_id)\n+}\n+\n+thread_local!(pub static SPAN_DEBUG: Cell<fn(Span, &mut fmt::Formatter) -> fmt::Result> =\n+                Cell::new(default_span_debug));\n+\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        SPAN_DEBUG.with(|span_debug| span_debug.get()(*self, f))\n+    }\n+}\n+\n pub fn spanned<T>(lo: BytePos, hi: BytePos, t: T) -> Spanned<T> {\n     respan(mk_sp(lo, hi), t)\n }"}]}