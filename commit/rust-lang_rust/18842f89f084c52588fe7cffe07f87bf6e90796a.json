{"sha": "18842f89f084c52588fe7cffe07f87bf6e90796a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODQyZjg5ZjA4NGM1MjU4OGZlN2NmZmUwN2Y4N2JmNmU5MDc5NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-27T04:41:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-27T04:41:53Z"}, "message": "auto merge of #20143 : csouth3/rust/vecmap-reserve, r=Gankro\n\nImplement `reserve_len` and `reserve_len_exact` for `VecMap` in accordance with rust-lang/rfcs#509.", "tree": {"sha": "e1f0dbd9292f20f1ec689828a8218ca24d50e16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f0dbd9292f20f1ec689828a8218ca24d50e16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18842f89f084c52588fe7cffe07f87bf6e90796a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18842f89f084c52588fe7cffe07f87bf6e90796a", "html_url": "https://github.com/rust-lang/rust/commit/18842f89f084c52588fe7cffe07f87bf6e90796a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18842f89f084c52588fe7cffe07f87bf6e90796a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c60bc02ce6de2823d0b837f90d5db0077fce6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c60bc02ce6de2823d0b837f90d5db0077fce6f7", "html_url": "https://github.com/rust-lang/rust/commit/3c60bc02ce6de2823d0b837f90d5db0077fce6f7"}, {"sha": "868acdf7f33c1c0123231a07200fb002cc7509d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/868acdf7f33c1c0123231a07200fb002cc7509d2", "html_url": "https://github.com/rust-lang/rust/commit/868acdf7f33c1c0123231a07200fb002cc7509d2"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "5ebcc736624f6f95a7a6c3c158a5dfbb8a28e845", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/18842f89f084c52588fe7cffe07f87bf6e90796a/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18842f89f084c52588fe7cffe07f87bf6e90796a/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=18842f89f084c52588fe7cffe07f87bf6e90796a", "patch": "@@ -138,6 +138,52 @@ impl<V> VecMap<V> {\n         self.v.capacity()\n     }\n \n+    /// Reserves capacity for the given `VecMap` to contain `len` distinct keys.\n+    /// In the case of `VecMap` this means reallocations will not occur as long\n+    /// as all inserted keys are less than `len`.\n+    ///\n+    /// The collection may reserve more space to avoid frequent reallocations.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecMap;\n+    /// let mut map: VecMap<&str> = VecMap::new();\n+    /// map.reserve_len(10);\n+    /// assert!(map.capacity() >= 10);\n+    /// ```\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn reserve_len(&mut self, len: uint) {\n+        let cur_len = self.v.len();\n+        if len >= cur_len {\n+            self.v.reserve(len - cur_len);\n+        }\n+    }\n+\n+    /// Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\n+    /// In the case of `VecMap` this means reallocations will not occur as long as all inserted\n+    /// keys are less than `len`.\n+    ///\n+    /// Note that the allocator may give the collection more space than it requests.\n+    /// Therefore capacity cannot be relied upon to be precisely minimal.  Prefer\n+    /// `reserve_len` if future insertions are expected.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::VecMap;\n+    /// let mut map: VecMap<&str> = VecMap::new();\n+    /// map.reserve_len_exact(10);\n+    /// assert!(map.capacity() >= 10);\n+    /// ```\n+    #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n+    pub fn reserve_len_exact(&mut self, len: uint) {\n+        let cur_len = self.v.len();\n+        if len >= cur_len {\n+            self.v.reserve_exact(len - cur_len);\n+        }\n+    }\n+\n     /// Returns an iterator visiting all keys in ascending order by the keys.\n     /// The iterator's element type is `uint`.\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]"}]}