{"sha": "c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTkyOTFiNTVmMmExNGEyYjBlMTNmYmQzZDU0YTk2OTJmMTA2NmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T11:02:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T11:26:28Z"}, "message": "get_size_and_align: fix handling of function pointers", "tree": {"sha": "088eafcd2c09adcaf8a45217c920e266351ac848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088eafcd2c09adcaf8a45217c920e266351ac848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "html_url": "https://github.com/rust-lang/rust/commit/c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c119291b55f2a14a2b0e13fbd3d54a9692f1066f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828e7b685ade9d53a8f72f3509a98f2255787136", "url": "https://api.github.com/repos/rust-lang/rust/commits/828e7b685ade9d53a8f72f3509a98f2255787136", "html_url": "https://github.com/rust-lang/rust/commit/828e7b685ade9d53a8f72f3509a98f2255787136"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "87dd7738410ee8f4d054c51d3bc9c60be9de6ba0", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c119291b55f2a14a2b0e13fbd3d54a9692f1066f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c119291b55f2a14a2b0e13fbd3d54a9692f1066f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=c119291b55f2a14a2b0e13fbd3d54a9692f1066f", "patch": "@@ -535,14 +535,26 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n+        // # Regular allocations\n         // Don't use `self.get` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a static's allocation in miri\n         if let Some((_, alloc)) = self.alloc_map.get(id) {\n             return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n         }\n-        // Not a local allocation, check the global `tcx.alloc_map`.\n \n+        // # Function pointers\n+        // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n+        if let Ok(_) = self.get_fn_alloc(id) {\n+            return if let AllocCheck::Dereferencable = liveness {\n+                // The caller requested no function pointers.\n+                err!(DerefFunctionPointer)\n+            } else {\n+                Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+            };\n+        }\n+\n+        // # Statics\n         // Can't do this in the match argument, we may get cycle errors since the lock would\n         // be held throughout the match.\n         let alloc = self.tcx.alloc_map.lock().get(id);\n@@ -557,14 +569,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n                 Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-            Some(GlobalAlloc::Function(_)) => {\n-                if let AllocCheck::Dereferencable = liveness {\n-                    // The caller requested no function pointers.\n-                    err!(DerefFunctionPointer)\n-                } else {\n-                    Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n-                }\n-            },\n+            Some(GlobalAlloc::Function(_)) =>\n+                bug!(\"We already checked function pointers above\"),\n             // The rest must be dead.\n             None => if let AllocCheck::MaybeDead = liveness {\n                 // Deallocated pointers are allowed, we should be able to find"}]}