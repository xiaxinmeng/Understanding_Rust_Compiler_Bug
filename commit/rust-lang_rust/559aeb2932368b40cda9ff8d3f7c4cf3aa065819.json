{"sha": "559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OWFlYjI5MzIzNjhiNDBjZGE5ZmY4ZDNmN2M0Y2YzYWEwNjU4MTk=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-23T00:01:07Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-23T00:01:07Z"}, "message": "ra_hir: add more privacy for Type", "tree": {"sha": "b6bcdc9ff9d75cf80c6c958f09cb1964565a7ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6bcdc9ff9d75cf80c6c958f09cb1964565a7ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "html_url": "https://github.com/rust-lang/rust/commit/559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/559aeb2932368b40cda9ff8d3f7c4cf3aa065819/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1fbef9858cd65fbb8f7dc9c9dd6a036a2dc6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1fbef9858cd65fbb8f7dc9c9dd6a036a2dc6c7", "html_url": "https://github.com/rust-lang/rust/commit/dc1fbef9858cd65fbb8f7dc9c9dd6a036a2dc6c7"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "e91abf6f58617d588bc605f33ec0272b56a41629", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/559aeb2932368b40cda9ff8d3f7c4cf3aa065819/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559aeb2932368b40cda9ff8d3f7c4cf3aa065819/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     docs::Documentation,\n     expr::{BindingAnnotation, Pat, PatId},\n     per_ns::PerNs,\n-    resolver::HasResolver,\n+    resolver::{HasResolver, Resolver},\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n     ImplId, LocalEnumVariantId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId,\n@@ -912,10 +912,8 @@ impl Local {\n         let def = DefWithBodyId::from(self.parent);\n         let infer = db.infer(def);\n         let ty = infer[self.pat_id].clone();\n-        let resolver = def.resolver(db.upcast());\n         let krate = def.module(db.upcast()).krate;\n-        let environment = TraitEnvironment::lower(db, &resolver);\n-        Type { krate, ty: InEnvironment { value: ty, environment } }\n+        Type::new(db, krate, def, ty)\n     }\n \n     pub fn source(self, db: &dyn HirDatabase) -> InFile<Either<ast::BindPat, ast::SelfParam>> {\n@@ -1020,11 +1018,21 @@ impl ImplDef {\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct Type {\n-    pub(crate) krate: CrateId,\n-    pub(crate) ty: InEnvironment<Ty>,\n+    krate: CrateId,\n+    ty: InEnvironment<Ty>,\n }\n \n impl Type {\n+    pub(crate) fn new_with_resolver(\n+        db: &dyn HirDatabase,\n+        resolver: &Resolver,\n+        ty: Ty,\n+    ) -> Option<Type> {\n+        let krate = resolver.krate()?;\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        Some(Type { krate, ty: InEnvironment { value: ty, environment } })\n+    }\n+\n     fn new(db: &dyn HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n         let resolver = lexical_env.resolver(db.upcast());\n         let environment = TraitEnvironment::lower(db, &resolver);"}, {"sha": "10c12c910fae7c6f8eccfb526a678e08665ad3e0", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/559aeb2932368b40cda9ff8d3f7c4cf3aa065819/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559aeb2932368b40cda9ff8d3f7c4cf3aa065819/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=559aeb2932368b40cda9ff8d3f7c4cf3aa065819", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n     AsMacroCall, DefWithBodyId,\n };\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n-use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n+use hir_ty::InferenceResult;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode, SyntaxNodePtr, TextUnit,\n@@ -103,10 +103,6 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n-    fn trait_env(&self, db: &dyn HirDatabase) -> Arc<TraitEnvironment> {\n-        TraitEnvironment::lower(db, &self.resolver)\n-    }\n-\n     pub(crate) fn type_of(&self, db: &dyn HirDatabase, expr: &ast::Expr) -> Option<Type> {\n         let expr_id = match expr {\n             ast::Expr::MacroCall(call) => {\n@@ -117,15 +113,13 @@ impl SourceAnalyzer {\n         }?;\n \n         let ty = self.infer.as_ref()?[expr_id].clone();\n-        let environment = self.trait_env(db);\n-        Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })\n+        Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n     pub(crate) fn type_of_pat(&self, db: &dyn HirDatabase, pat: &ast::Pat) -> Option<Type> {\n         let pat_id = self.pat_id(pat)?;\n         let ty = self.infer.as_ref()?[pat_id].clone();\n-        let environment = self.trait_env(db);\n-        Some(Type { krate: self.resolver.krate()?, ty: InEnvironment { value: ty, environment } })\n+        Type::new_with_resolver(db, &self.resolver, ty)\n     }\n \n     pub(crate) fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<Function> {"}]}