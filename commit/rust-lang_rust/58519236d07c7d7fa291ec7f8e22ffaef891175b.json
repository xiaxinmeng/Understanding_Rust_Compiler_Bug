{"sha": "58519236d07c7d7fa291ec7f8e22ffaef891175b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NTE5MjM2ZDA3YzdkN2ZhMjkxZWM3ZjhlMjJmZmFlZjg5MTE3NWI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-08T20:43:22Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-06-08T20:43:22Z"}, "message": "Merge pull request #98 from cassiersg/misc\n\nUse impl_enum_decodable for SeparatorTactic", "tree": {"sha": "786a6477b112664fdad6355fd51a4545d1059be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/786a6477b112664fdad6355fd51a4545d1059be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58519236d07c7d7fa291ec7f8e22ffaef891175b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58519236d07c7d7fa291ec7f8e22ffaef891175b", "html_url": "https://github.com/rust-lang/rust/commit/58519236d07c7d7fa291ec7f8e22ffaef891175b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58519236d07c7d7fa291ec7f8e22ffaef891175b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c581ee5c832058b0bbbecbe22ed0ea3e0daa26", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c581ee5c832058b0bbbecbe22ed0ea3e0daa26", "html_url": "https://github.com/rust-lang/rust/commit/81c581ee5c832058b0bbbecbe22ed0ea3e0daa26"}, {"sha": "4d6d0b81a79a2edbaeb052d80005a71694dfadcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6d0b81a79a2edbaeb052d80005a71694dfadcf", "html_url": "https://github.com/rust-lang/rust/commit/4d6d0b81a79a2edbaeb052d80005a71694dfadcf"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "9d80f259ebdc7d95dd38e55a56687ab20ed7532d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=58519236d07c7d7fa291ec7f8e22ffaef891175b", "patch": "@@ -48,12 +48,13 @@ use visitor::FmtVisitor;\n \n #[macro_use]\n mod config;\n+#[macro_use]\n+mod utils;\n mod changes;\n mod visitor;\n mod items;\n mod missed_spans;\n mod lists;\n-mod utils;\n mod types;\n mod expr;\n mod imports;\n@@ -64,23 +65,6 @@ const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n static mut CONFIG: Option<config::Config> = None;\n \n-// Macro for deriving implementations of Decodable for enums\n-macro_rules! impl_enum_decodable {\n-    ( $e:ident, $( $x:ident ),* ) => {\n-        impl Decodable for $e {\n-            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-                let s = try!(d.read_str());\n-                match &*s {\n-                    $(\n-                        stringify!($x) => Ok($e::$x),\n-                    )*\n-                    _ => Err(d.error(\"Bad variant\")),\n-                }\n-            }\n-        }\n-    };\n-}\n-\n #[derive(Copy, Clone)]\n pub enum WriteMode {\n     Overwrite,"}, {"sha": "f31458fcc57736cb0e2a02cddf272d973ab552de", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=58519236d07c7d7fa291ec7f8e22ffaef891175b", "patch": "@@ -30,18 +30,7 @@ pub enum SeparatorTactic {\n     Vertical,\n }\n \n-// TODO could use a macro for all these Decodable impls.\n-impl Decodable for SeparatorTactic {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n-        let s = try!(d.read_str());\n-        match &*s {\n-            \"Always\" => Ok(SeparatorTactic::Always),\n-            \"Never\" => Ok(SeparatorTactic::Never),\n-            \"Vertical\" => Ok(SeparatorTactic::Vertical),\n-            _ => Err(d.error(\"Bad variant\")),\n-        }\n-    }\n-}\n+impl_enum_decodable!(SeparatorTactic, Always, Never, Vertical);\n \n // TODO having some helpful ctors for ListFormatting would be nice.\n pub struct ListFormatting<'a> {"}, {"sha": "0e992e9f7da4cddf787b792fa95afd75d789b1b9", "filename": "src/utils.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58519236d07c7d7fa291ec7f8e22ffaef891175b/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=58519236d07c7d7fa291ec7f8e22ffaef891175b", "patch": "@@ -47,3 +47,21 @@ pub fn format_visibility(vis: Visibility) -> &'static str {\n         Visibility::Inherited => \"\"\n     }\n }\n+\n+// Macro for deriving implementations of Decodable for enums\n+#[macro_export]\n+macro_rules! impl_enum_decodable {\n+    ( $e:ident, $( $x:ident ),* ) => {\n+        impl Decodable for $e {\n+            fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+                let s = try!(d.read_str());\n+                match &*s {\n+                    $(\n+                        stringify!($x) => Ok($e::$x),\n+                    )*\n+                    _ => Err(d.error(\"Bad variant\")),\n+                }\n+            }\n+        }\n+    };\n+}"}]}