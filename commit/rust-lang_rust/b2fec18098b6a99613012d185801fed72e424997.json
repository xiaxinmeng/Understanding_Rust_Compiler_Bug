{"sha": "b2fec18098b6a99613012d185801fed72e424997", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZmVjMTgwOThiNmE5OTYxMzAxMmQxODU4MDFmZWQ3MmU0MjQ5OTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T15:11:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-01T19:15:35Z"}, "message": "move more macros to hir", "tree": {"sha": "5ee6cde2ebd31d18f8fda189ca3709a01fa65dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee6cde2ebd31d18f8fda189ca3709a01fa65dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2fec18098b6a99613012d185801fed72e424997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2fec18098b6a99613012d185801fed72e424997", "html_url": "https://github.com/rust-lang/rust/commit/b2fec18098b6a99613012d185801fed72e424997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2fec18098b6a99613012d185801fed72e424997/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "html_url": "https://github.com/rust-lang/rust/commit/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3"}], "stats": {"total": 212, "additions": 127, "deletions": 85}, "files": [{"sha": "2a71cc2b65b1dec47dae46d62e3a902313804f4f", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -1,7 +1,6 @@\n use std::{fmt, sync::Arc};\n use salsa::{self, Database};\n use ra_db::{LocationIntener, BaseDatabase};\n-use hir::{self, DefId, DefLoc};\n \n use crate::{\n     symbol_index,\n@@ -15,7 +14,8 @@ pub(crate) struct RootDatabase {\n \n #[derive(Default)]\n struct IdMaps {\n-    defs: LocationIntener<DefLoc, DefId>,\n+    defs: LocationIntener<hir::DefLoc, hir::DefId>,\n+    macros: LocationIntener<hir::MacroInvocationLoc, hir::MacroInvocationId>,\n }\n \n impl fmt::Debug for IdMaps {\n@@ -59,12 +59,18 @@ impl salsa::ParallelDatabase for RootDatabase {\n \n impl BaseDatabase for RootDatabase {}\n \n-impl AsRef<LocationIntener<DefLoc, DefId>> for RootDatabase {\n-    fn as_ref(&self) -> &LocationIntener<DefLoc, DefId> {\n+impl AsRef<LocationIntener<hir::DefLoc, hir::DefId>> for RootDatabase {\n+    fn as_ref(&self) -> &LocationIntener<hir::DefLoc, hir::DefId> {\n         &self.id_maps.defs\n     }\n }\n \n+impl AsRef<LocationIntener<hir::MacroInvocationLoc, hir::MacroInvocationId>> for RootDatabase {\n+    fn as_ref(&self) -> &LocationIntener<hir::MacroInvocationLoc, hir::MacroInvocationId> {\n+        &self.id_maps.macros\n+    }\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl ra_db::FilesDatabase {\n@@ -85,6 +91,7 @@ salsa::database_storage! {\n             fn library_symbols() for symbol_index::LibrarySymbolsQuery;\n         }\n         impl hir::db::HirDatabase {\n+            fn expand_macro_invocation() for hir::db::ExpandMacroInvocationQuery;\n             fn module_tree() for hir::db::ModuleTreeQuery;\n             fn fn_scopes() for hir::db::FnScopesQuery;\n             fn file_items() for hir::db::SourceFileItemsQuery;\n@@ -98,8 +105,5 @@ salsa::database_storage! {\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n         }\n-        impl hir::MacroDatabase {\n-            fn expand_macro() for hir::ExpandMacroQuery;\n-        }\n     }\n }"}, {"sha": "f1b77f9819a093e57f9ba3db98c7a03c1e70ba36", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -18,12 +18,12 @@ pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRang\n }\n \n fn extend_selection_in_macro(\n-    db: &RootDatabase,\n+    _db: &RootDatabase,\n     source_file: &SourceFileNode,\n     frange: FileRange,\n ) -> Option<TextRange> {\n     let macro_call = find_macro_call(source_file.syntax(), frange.range)?;\n-    let (off, exp) = crate::macros::expand(db, frange.file_id, macro_call)?;\n+    let (off, exp) = hir::MacroDef::ast_expand(macro_call)?;\n     let dst_range = exp.map_range_forward(frange.range - off)?;\n     let dst_range = ra_editor::extend_selection(exp.syntax().borrowed(), dst_range)?;\n     let src_range = exp.map_range_back(dst_range)? + off;"}, {"sha": "08ecb125a362a20d825f0cb3afb5964c6481a734", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -19,7 +19,6 @@ mod runnables;\n \n mod extend_selection;\n mod syntax_highlighting;\n-mod macros;\n \n use std::{fmt, sync::Arc};\n "}, {"sha": "21ec36cd67c57fa9588d15088ca76127d80f06fb", "filename": "crates/ra_analysis/src/macros.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmacros.rs?ref=57030f587bb0bbe4dea9a97016b4e0f49a7ef5f3", "patch": "@@ -1,32 +0,0 @@\n-/// Begining of macro expansion.\n-///\n-/// This code should be moved out of ra_analysis into hir (?) ideally.\n-use std::sync::Arc;\n-\n-use ra_syntax::{ast, AstNode, TextUnit};\n-use hir::MacroDatabase;\n-\n-use crate::{db::RootDatabase, FileId};\n-\n-pub(crate) fn expand(\n-    db: &RootDatabase,\n-    _file_id: FileId,\n-    macro_call: ast::MacroCall,\n-) -> Option<(TextUnit, Arc<hir::MacroExpansion>)> {\n-    let path = macro_call.path()?;\n-    if path.qualifier().is_some() {\n-        return None;\n-    }\n-    let name_ref = path.segment()?.name_ref()?;\n-    if name_ref.text() != \"ctry\" {\n-        return None;\n-    }\n-    let arg = macro_call.token_tree()?.syntax();\n-\n-    let def = hir::MacroDef::CTry;\n-    let input = hir::MacroInput {\n-        text: arg.text().to_string(),\n-    };\n-    let exp = db.expand_macro(def, input)?;\n-    Some((arg.range().start(), exp))\n-}"}, {"sha": "a644b3fe0d89e9ed61078f8a4a94aa74e4fadd15", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<Hi\n         .descendants()\n         .filter_map(ast::MacroCall::cast)\n     {\n-        if let Some((off, exp)) = crate::macros::expand(db, file_id, macro_call) {\n+        if let Some((off, exp)) = hir::MacroDef::ast_expand(macro_call) {\n             let mapped_ranges = ra_editor::highlight(exp.syntax().borrowed())\n                 .into_iter()\n                 .filter_map(|r| {"}, {"sha": "242d0549dbd38d9cd9a7ad602072c71777689f6d", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n+    macros::{MacroInvocationLoc, MacroInvocationId, MacroInput, MacroDef, MacroExpansion},\n     module::{ModuleId, ModuleTree, ModuleSource,\n     nameres::{ItemMap, InputModuleItems}},\n     ty::{InferenceResult, Ty},\n@@ -18,7 +19,13 @@ salsa::query_group! {\n \n pub trait HirDatabase: SyntaxDatabase\n     + AsRef<LocationIntener<DefLoc, DefId>>\n+    + AsRef<LocationIntener<MacroInvocationLoc, MacroInvocationId>>\n {\n+    fn expand_macro_invocation(invoc: MacroInvocationId) -> Option<Arc<MacroExpansion>> {\n+        type ExpandMacroInvocationQuery;\n+        use fn crate::macros::expand_macro_invocation;\n+    }\n+\n     fn fn_scopes(def_id: DefId) -> Arc<FnScopes> {\n         type FnScopesQuery;\n         use fn query_definitions::fn_scopes;"}, {"sha": "1bafb1c4deb236124ec90e6dcbe99ece857efc07", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -46,7 +46,7 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     krate::Crate,\n-    macros::{MacroDef, MacroInput, MacroExpansion, MacroDatabase, ExpandMacroQuery},\n+    macros::{MacroDef, MacroInput, MacroExpansion, MacroInvocationId, MacroInvocationLoc},\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n     adt::{Struct, Enum},"}, {"sha": "f0b99cc1a83f928b6b94ddf14ea11eac8ca2ea34", "filename": "crates/ra_hir/src/macros.rs", "status": "modified", "additions": 105, "deletions": 41, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2fec18098b6a99613012d185801fed72e424997/crates%2Fra_hir%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmacros.rs?ref=b2fec18098b6a99613012d185801fed72e424997", "patch": "@@ -1,17 +1,108 @@\n use std::sync::Arc;\n \n-use ra_db::{SyntaxDatabase, LocalSyntaxPtr};\n+use ra_db::{LocalSyntaxPtr, LocationIntener};\n use ra_syntax::{\n     TextRange, TextUnit, SourceFileNode, AstNode, SyntaxNode,\n     ast,\n };\n \n+use crate::{SourceRootId, module::ModuleId, SourceItemId, HirDatabase};\n+\n+/// Def's are a core concept of hir. A `Def` is an Item (function, module, etc)\n+/// in a specific module.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroInvocationId(u32);\n+ra_db::impl_numeric_id!(MacroInvocationId);\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct MacroInvocationLoc {\n+    source_root_id: SourceRootId,\n+    module_id: ModuleId,\n+    source_item_id: SourceItemId,\n+}\n+\n+impl MacroInvocationId {\n+    pub(crate) fn loc(\n+        self,\n+        db: &impl AsRef<LocationIntener<MacroInvocationLoc, MacroInvocationId>>,\n+    ) -> MacroInvocationLoc {\n+        db.as_ref().id2loc(self)\n+    }\n+}\n+\n+impl MacroInvocationLoc {\n+    #[allow(unused)]\n+    pub(crate) fn id(\n+        &self,\n+        db: &impl AsRef<LocationIntener<MacroInvocationLoc, MacroInvocationId>>,\n+    ) -> MacroInvocationId {\n+        db.as_ref().loc2id(&self)\n+    }\n+}\n+\n // Hard-coded defs for now :-(\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroDef {\n     CTry,\n }\n \n+impl MacroDef {\n+    pub fn ast_expand(macro_call: ast::MacroCall) -> Option<(TextUnit, MacroExpansion)> {\n+        let (def, input) = MacroDef::from_call(macro_call)?;\n+        let exp = def.expand(input)?;\n+        let off = macro_call.token_tree()?.syntax().range().start();\n+        Some((off, exp))\n+    }\n+\n+    fn from_call(macro_call: ast::MacroCall) -> Option<(MacroDef, MacroInput)> {\n+        let def = {\n+            let path = macro_call.path()?;\n+            if path.qualifier().is_some() {\n+                return None;\n+            }\n+            let name_ref = path.segment()?.name_ref()?;\n+            if name_ref.text() != \"ctry\" {\n+                return None;\n+            }\n+            MacroDef::CTry\n+        };\n+\n+        let input = {\n+            let arg = macro_call.token_tree()?.syntax();\n+            MacroInput {\n+                text: arg.text().to_string(),\n+            }\n+        };\n+        Some((def, input))\n+    }\n+\n+    fn expand(self, input: MacroInput) -> Option<MacroExpansion> {\n+        let MacroDef::CTry = self;\n+        let text = format!(\n+            r\"\n+                fn dummy() {{\n+                    match {} {{\n+                        None => return Ok(None),\n+                        Some(it) => it,\n+                    }}\n+                }}\",\n+            input.text\n+        );\n+        let file = SourceFileNode::parse(&text);\n+        let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n+        let match_arg = match_expr.expr()?;\n+        let ptr = LocalSyntaxPtr::new(match_arg.syntax());\n+        let src_range = TextRange::offset_len(0.into(), TextUnit::of_str(&input.text));\n+        let ranges_map = vec![(src_range, match_arg.syntax().range())];\n+        let res = MacroExpansion {\n+            text,\n+            ranges_map,\n+            ptr,\n+        };\n+        Some(res)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroInput {\n     // Should be token trees\n@@ -25,46 +116,6 @@ pub struct MacroExpansion {\n     ptr: LocalSyntaxPtr,\n }\n \n-salsa::query_group! {\n-\n-pub trait MacroDatabase: SyntaxDatabase {\n-    fn expand_macro(def: MacroDef, input: MacroInput) -> Option<Arc<MacroExpansion>> {\n-        type ExpandMacroQuery;\n-    }\n-}\n-\n-}\n-\n-fn expand_macro(\n-    _db: &impl MacroDatabase,\n-    def: MacroDef,\n-    input: MacroInput,\n-) -> Option<Arc<MacroExpansion>> {\n-    let MacroDef::CTry = def;\n-    let text = format!(\n-        r\"\n-        fn dummy() {{\n-            match {} {{\n-                None => return Ok(None),\n-                Some(it) => it,\n-            }}\n-        }}\",\n-        input.text\n-    );\n-    let file = SourceFileNode::parse(&text);\n-    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n-    let match_arg = match_expr.expr()?;\n-    let ptr = LocalSyntaxPtr::new(match_arg.syntax());\n-    let src_range = TextRange::offset_len(0.into(), TextUnit::of_str(&input.text));\n-    let ranges_map = vec![(src_range, match_arg.syntax().range())];\n-    let res = MacroExpansion {\n-        text,\n-        ranges_map,\n-        ptr,\n-    };\n-    Some(Arc::new(res))\n-}\n-\n impl MacroExpansion {\n     pub fn file(&self) -> SourceFileNode {\n         SourceFileNode::parse(&self.text)\n@@ -96,3 +147,16 @@ impl MacroExpansion {\n         None\n     }\n }\n+\n+pub(crate) fn expand_macro_invocation(\n+    db: &impl HirDatabase,\n+    invoc: MacroInvocationId,\n+) -> Option<Arc<MacroExpansion>> {\n+    let loc = invoc.loc(db);\n+    let syntax = db.file_item(loc.source_item_id);\n+    let syntax = syntax.borrowed();\n+    let macro_call = ast::MacroCall::cast(syntax).unwrap();\n+\n+    let (def, input) = MacroDef::from_call(macro_call)?;\n+    def.expand(input).map(Arc::new)\n+}"}]}