{"sha": "bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2Y3N2YyNmNkNTA0ZGUxNGY3ZDdkMDNmOWYyYTg1ZDBmYWJiM2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:00:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T17:01:01Z"}, "message": "internal: refactor missing unsafe diagnostic", "tree": {"sha": "2d38ea6fb04b05a44467bd9614253b8621848f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d38ea6fb04b05a44467bd9614253b8621848f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "html_url": "https://github.com/rust-lang/rust/commit/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "url": "https://api.github.com/repos/rust-lang/rust/commits/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "html_url": "https://github.com/rust-lang/rust/commit/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a"}], "stats": {"total": 213, "additions": 106, "deletions": 107}, "files": [{"sha": "f7bf6321576561f5c8f54e54cabb0820c52195ab", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "patch": "@@ -36,6 +36,7 @@ diagnostics![\n     InactiveCode,\n     MacroError,\n     MissingFields,\n+    MissingUnsafe,\n     NoSuchField,\n     UnimplementedBuiltinMacro,\n     UnresolvedExternCrate,\n@@ -104,28 +105,9 @@ pub struct BreakOutsideOfLoop {\n     pub expr: InFile<AstPtr<ast::Expr>>,\n }\n \n-// Diagnostic: missing-unsafe\n-//\n-// This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n #[derive(Debug)]\n pub struct MissingUnsafe {\n-    pub file: HirFileId,\n-    pub expr: AstPtr<ast::Expr>,\n-}\n-\n-impl Diagnostic for MissingUnsafe {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"missing-unsafe\")\n-    }\n-    fn message(&self) -> String {\n-        format!(\"This operation is unsafe and requires an unsafe function or block\")\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n+    pub expr: InFile<AstPtr<ast::Expr>>,\n }\n \n #[derive(Debug)]"}, {"sha": "16f8627073a7e783f92aae334cd609c4dff70125", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "patch": "@@ -1090,9 +1090,7 @@ impl Function {\n \n         for expr in hir_ty::diagnostics::missing_unsafe(db, self.id.into()) {\n             match source_map.expr_syntax(expr) {\n-                Ok(in_file) => {\n-                    sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n-                }\n+                Ok(expr) => acc.push(MissingUnsafe { expr }.into()),\n                 Err(SyntheticSyntax) => {\n                     // FIXME: Here and eslwhere in this file, the `expr` was\n                     // desugared, report or assert that this doesn't happen."}, {"sha": "67390345f327450515310d2ae90f91d6550d3cb3", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 84, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "patch": "@@ -8,6 +8,7 @@ mod break_outside_of_loop;\n mod inactive_code;\n mod macro_error;\n mod missing_fields;\n+mod missing_unsafe;\n mod no_such_field;\n mod unimplemented_builtin_macro;\n mod unresolved_extern_crate;\n@@ -222,6 +223,7 @@ pub(crate) fn diagnostics(\n             AnyDiagnostic::BreakOutsideOfLoop(d) => break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n+            AnyDiagnostic::MissingUnsafe(d) => missing_unsafe::missing_unsafe(&ctx, &d),\n             AnyDiagnostic::NoSuchField(d) => no_such_field::no_such_field(&ctx, &d),\n             AnyDiagnostic::UnimplementedBuiltinMacro(d) => unimplemented_builtin_macro::unimplemented_builtin_macro(&ctx, &d),\n             AnyDiagnostic::UnresolvedExternCrate(d) => unresolved_extern_crate::unresolved_extern_crate(&ctx, &d),\n@@ -713,90 +715,6 @@ mod foo;\n         );\n     }\n \n-    #[test]\n-    fn missing_unsafe_diagnostic_with_raw_ptr() {\n-        check_diagnostics(\n-            r#\"\n-fn main() {\n-    let x = &5 as *const usize;\n-    unsafe { let y = *x; }\n-    let z = *x;\n-}         //^^ This operation is unsafe and requires an unsafe function or block\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn missing_unsafe_diagnostic_with_unsafe_call() {\n-        check_diagnostics(\n-            r#\"\n-struct HasUnsafe;\n-\n-impl HasUnsafe {\n-    unsafe fn unsafe_fn(&self) {\n-        let x = &5 as *const usize;\n-        let y = *x;\n-    }\n-}\n-\n-unsafe fn unsafe_fn() {\n-    let x = &5 as *const usize;\n-    let y = *x;\n-}\n-\n-fn main() {\n-    unsafe_fn();\n-  //^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    HasUnsafe.unsafe_fn();\n-  //^^^^^^^^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    unsafe {\n-        unsafe_fn();\n-        HasUnsafe.unsafe_fn();\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn missing_unsafe_diagnostic_with_static_mut() {\n-        check_diagnostics(\n-            r#\"\n-struct Ty {\n-    a: u8,\n-}\n-\n-static mut STATIC_MUT: Ty = Ty { a: 0 };\n-\n-fn main() {\n-    let x = STATIC_MUT.a;\n-          //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    unsafe {\n-        let x = STATIC_MUT.a;\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn no_missing_unsafe_diagnostic_with_safe_intrinsic() {\n-        check_diagnostics(\n-            r#\"\n-extern \"rust-intrinsic\" {\n-    pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n-    pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n-}\n-\n-fn main() {\n-    let _ = bitreverse(12);\n-    let _ = floorf32(12.0);\n-          //^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-}\n-\"#,\n-        );\n-    }\n-\n     // Register the required standard library types to make the tests work\n     fn add_filter_map_with_find_next_boilerplate(body: &str) -> String {\n         let prefix = r#\""}, {"sha": "5c47e8d0af1ba27fa0b488412e07297620faa9ee", "filename": "crates/ide/src/diagnostics/missing_unsafe.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_unsafe.rs?ref=bccf77f26cd504de14f7d7d03f9f2a85d0fabb3d", "patch": "@@ -0,0 +1,101 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: missing-unsafe\n+//\n+// This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n+pub(super) fn missing_unsafe(ctx: &DiagnosticsContext<'_>, d: &hir::MissingUnsafe) -> Diagnostic {\n+    Diagnostic::new(\n+        \"missing-unsafe\",\n+        \"this operation is unsafe and requires an unsafe function or block\",\n+        ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range,\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics;\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_raw_ptr() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    let x = &5 as *const usize;\n+    unsafe { let y = *x; }\n+    let z = *x;\n+}         //^^ this operation is unsafe and requires an unsafe function or block\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_unsafe_call() {\n+        check_diagnostics(\n+            r#\"\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn(&self) {\n+        let x = &5 as *const usize;\n+        let y = *x;\n+    }\n+}\n+\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *const usize;\n+    let y = *x;\n+}\n+\n+fn main() {\n+    unsafe_fn();\n+  //^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+    HasUnsafe.unsafe_fn();\n+  //^^^^^^^^^^^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        unsafe_fn();\n+        HasUnsafe.unsafe_fn();\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_static_mut() {\n+        check_diagnostics(\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut STATIC_MUT: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    let x = STATIC_MUT.a;\n+          //^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        let x = STATIC_MUT.a;\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_missing_unsafe_diagnostic_with_safe_intrinsic() {\n+        check_diagnostics(\n+            r#\"\n+extern \"rust-intrinsic\" {\n+    pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n+    pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n+}\n+\n+fn main() {\n+    let _ = bitreverse(12);\n+    let _ = floorf32(12.0);\n+          //^^^^^^^^^^^^^^ this operation is unsafe and requires an unsafe function or block\n+}\n+\"#,\n+        );\n+    }\n+}"}]}