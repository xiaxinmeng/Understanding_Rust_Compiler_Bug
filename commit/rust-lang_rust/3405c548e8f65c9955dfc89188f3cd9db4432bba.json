{"sha": "3405c548e8f65c9955dfc89188f3cd9db4432bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDVjNTQ4ZThmNjVjOTk1NWRmYzg5MTg4ZjNjZDlkYjQ0MzJiYmE=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-08-20T17:09:22Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-09-07T16:21:21Z"}, "message": "gc: Avoid freeing null pointers.", "tree": {"sha": "266fd379c025e80e8697451afd6b9bac361214fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266fd379c025e80e8697451afd6b9bac361214fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3405c548e8f65c9955dfc89188f3cd9db4432bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3405c548e8f65c9955dfc89188f3cd9db4432bba", "html_url": "https://github.com/rust-lang/rust/commit/3405c548e8f65c9955dfc89188f3cd9db4432bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3405c548e8f65c9955dfc89188f3cd9db4432bba/comments", "author": null, "committer": null, "parents": [{"sha": "9ea4afe5daf359c7022057774f943645d0d32043", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea4afe5daf359c7022057774f943645d0d32043", "html_url": "https://github.com/rust-lang/rust/commit/9ea4afe5daf359c7022057774f943645d0d32043"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "697c6fcdfb490c767e0a6834cd0345533fe0592b", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3405c548e8f65c9955dfc89188f3cd9db4432bba/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3405c548e8f65c9955dfc89188f3cd9db4432bba/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=3405c548e8f65c9955dfc89188f3cd9db4432bba", "patch": "@@ -102,6 +102,12 @@ unsafe fn walk_gc_roots(mem: Memory, visitor: Visitor) {\n                 match sp {\n                   Some(sp_info) => {\n                     for walk_safe_point(frame.fp, sp_info) |root, tydesc| {\n+                        // Skip null pointers, which can occur when a\n+                        // unique pointer has already been freed.\n+                        if ptr::is_null(*root) {\n+                            again;\n+                        }\n+\n                         if ptr::is_null(tydesc) {\n                             // Root is a generic box.\n                             let refcount = **root;"}]}