{"sha": "e80021cbd0bcfea82f3b855e13a409c73b563673", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDAyMWNiZDBiY2ZlYTgyZjNiODU1ZTEzYTQwOWM3M2I1NjM2NzM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-27T21:08:59Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-27T21:08:59Z"}, "message": "Merge #348\n\n348: cleanups r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a10ff2ac8882d9b0373bc5449a44e40696538a45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a10ff2ac8882d9b0373bc5449a44e40696538a45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e80021cbd0bcfea82f3b855e13a409c73b563673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e80021cbd0bcfea82f3b855e13a409c73b563673", "html_url": "https://github.com/rust-lang/rust/commit/e80021cbd0bcfea82f3b855e13a409c73b563673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e80021cbd0bcfea82f3b855e13a409c73b563673/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "efb63a7666cc9532d97fa7e0da14b540ae8bd5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb63a7666cc9532d97fa7e0da14b540ae8bd5df", "html_url": "https://github.com/rust-lang/rust/commit/efb63a7666cc9532d97fa7e0da14b540ae8bd5df"}, {"sha": "bc833216d7190d7a270ed2d831abc134fab91cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc833216d7190d7a270ed2d831abc134fab91cfb", "html_url": "https://github.com/rust-lang/rust/commit/bc833216d7190d7a270ed2d831abc134fab91cfb"}], "stats": {"total": 100, "additions": 28, "deletions": 72}, "files": [{"sha": "92c1cd6832af5044660c01bd66e4849fff66f67e", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -688,7 +688,7 @@ dependencies = [\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=no-upgrade)\",\n+ \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=fix-cancelation-maybe)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -714,7 +714,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=no-upgrade)\",\n+ \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=fix-cancelation-maybe)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -746,7 +746,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=no-upgrade)\",\n+ \"salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=fix-cancelation-maybe)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -1050,7 +1050,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"salsa\"\n version = \"0.8.0\"\n-source = \"git+https://github.com/matklad/salsa?branch=no-upgrade#1a7ae719af1601fda81186fb48bd100edd9cfb7f\"\n+source = \"git+https://github.com/matklad/salsa?branch=fix-cancelation-maybe#9f15af718f58c76a1280d457a113106baf7c20c5\"\n dependencies = [\n  \"derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1621,7 +1621,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\"\n \"checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7\"\n \"checksum safemem 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dca453248a96cb0749e36ccdfe2b0b4e54a61bfef89fb97ec621eb8e0a93dd9\"\n-\"checksum salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=no-upgrade)\" = \"<none>\"\n+\"checksum salsa 0.8.0 (git+https://github.com/matklad/salsa?branch=fix-cancelation-maybe)\" = \"<none>\"\n \"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\""}, {"sha": "b072a5eba0b6ebee95c01a6c7f7a37e04d0741be", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -91,7 +91,6 @@ salsa::database_storage! {\n             fn file_item() for hir::db::FileItemQuery;\n             fn input_module_items() for hir::db::InputModuleItemsQuery;\n             fn item_map() for hir::db::ItemMapQuery;\n-            fn fn_syntax() for hir::db::FnSyntaxQuery;\n             fn submodules() for hir::db::SubmodulesQuery;\n             fn infer() for hir::db::InferQuery;\n             fn type_for_def() for hir::db::TypeForDefQuery;"}, {"sha": "e6663810d693171b6acfdafb0df049027a1bdace", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -7,10 +7,7 @@ use rayon::prelude::*;\n use salsa::{Database, ParallelDatabase};\n \n use hir::{\n-    self,\n-    FnSignatureInfo,\n-    Problem,\n-    source_binder,\n+    self, FnSignatureInfo, Problem, source_binder,\n };\n use ra_db::{FilesDatabase, SourceRoot, SourceRootId, SyntaxDatabase};\n use ra_editor::{self, FileSymbol, find_node_at_offset, LineIndex, LocalEdit, Severity};\n@@ -122,9 +119,6 @@ impl AnalysisHostImpl {\n         self.db\n             .query(ra_db::SourceFileQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n-        self.db\n-            .query(hir::db::FnSyntaxQuery)\n-            .sweep(salsa::SweepStrategy::default().discard_values());\n         self.db\n             .query(hir::db::SourceFileItemsQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n@@ -332,16 +326,6 @@ impl AnalysisImpl {\n             Ok(Some((binding, descr)))\n         }\n     }\n-\n-    pub fn doc_comment_for(\n-        &self,\n-        file_id: FileId,\n-        symbol: FileSymbol,\n-    ) -> Cancelable<Option<String>> {\n-        let file = self.db.source_file(file_id);\n-\n-        Ok(symbol.docs(&file))\n-    }\n     pub fn doc_text_for(&self, file_id: FileId, symbol: FileSymbol) -> Cancelable<Option<String>> {\n         let file = self.db.source_file(file_id);\n         let result = match (symbol.description(&file), symbol.docs(&file)) {\n@@ -507,12 +491,7 @@ impl AnalysisImpl {\n         let file = self.db.source_file(file_id);\n         let syntax = file.syntax();\n         let node = find_covering_node(syntax, range);\n-        let parent_fn = node.ancestors().filter_map(FnDef::cast).next();\n-        let parent_fn = if let Some(p) = parent_fn {\n-            p\n-        } else {\n-            return Ok(None);\n-        };\n+        let parent_fn = ctry!(node.ancestors().find_map(FnDef::cast));\n         let function = ctry!(source_binder::function_from_source(\n             &*self.db, file_id, parent_fn\n         )?);"}, {"sha": "65c3eb3eca2e407f3cce00c664990498fe1aaff8", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -323,13 +323,6 @@ impl Analysis {\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n         self.imp.find_all_refs(position)\n     }\n-    pub fn doc_comment_for(\n-        &self,\n-        file_id: FileId,\n-        symbol: FileSymbol,\n-    ) -> Cancelable<Option<String>> {\n-        self.imp.doc_comment_for(file_id, symbol)\n-    }\n     pub fn doc_text_for(&self, file_id: FileId, symbol: FileSymbol) -> Cancelable<Option<String>> {\n         self.imp.doc_text_for(file_id, symbol)\n     }"}, {"sha": "ba43a4502c4354843d82f82d5ca7ea0018f01b8a", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n use ra_syntax::{\n     SmolStr,\n     SyntaxNode,\n-    ast::FnDefNode,\n };\n use ra_db::{SourceRootId, LocationIntener, SyntaxDatabase, FileId, Cancelable};\n \n@@ -12,7 +11,6 @@ use crate::{\n     SourceFileItems, SourceItemId,\n     query_definitions,\n     FnScopes,\n-    function::FnId,\n     module::{ModuleId, ModuleTree, ModuleSource,\n     nameres::{ItemMap, InputModuleItems}},\n     ty::{InferenceResult, Ty},\n@@ -24,14 +22,10 @@ salsa::query_group! {\n pub trait HirDatabase: SyntaxDatabase\n     + AsRef<LocationIntener<DefLoc, DefId>>\n {\n-    fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n+    fn fn_scopes(def_id: DefId) -> Arc<FnScopes> {\n         type FnScopesQuery;\n         use fn query_definitions::fn_scopes;\n     }\n-    fn fn_syntax(fn_id: FnId) -> FnDefNode {\n-        type FnSyntaxQuery;\n-        use fn query_definitions::fn_syntax;\n-    }\n \n     fn struct_data(def_id: DefId) -> Cancelable<Arc<StructData>> {\n         type StructDataQuery;\n@@ -43,7 +37,7 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::enum_data;\n     }\n \n-    fn infer(fn_id: FnId) -> Cancelable<Arc<InferenceResult>> {\n+    fn infer(def_id: DefId) -> Cancelable<Arc<InferenceResult>> {\n         type InferQuery;\n         use fn query_definitions::infer;\n     }"}, {"sha": "5a44132fcca965826ce1bf49332c9df888484446", "filename": "crates/ra_hir/src/function.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -11,43 +11,42 @@ use ra_syntax::{\n     ast::{self, AstNode, DocCommentsOwner, NameOwner},\n };\n \n-use crate::{ DefId, HirDatabase, ty::InferenceResult, Module };\n+use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module};\n \n pub use self::scope::FnScopes;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct FnId(pub(crate) DefId);\n-\n #[derive(Debug)]\n pub struct Function {\n-    pub(crate) fn_id: FnId,\n+    def_id: DefId,\n }\n \n impl Function {\n     pub(crate) fn new(def_id: DefId) -> Function {\n-        let fn_id = FnId(def_id);\n-        Function { fn_id }\n+        Function { def_id }\n     }\n \n     pub fn syntax(&self, db: &impl HirDatabase) -> ast::FnDefNode {\n-        db.fn_syntax(self.fn_id)\n+        let def_loc = self.def_id.loc(db);\n+        assert!(def_loc.kind == DefKind::Function);\n+        let syntax = db.file_item(def_loc.source_item_id);\n+        ast::FnDef::cast(syntax.borrowed()).unwrap().owned()\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> Arc<FnScopes> {\n-        db.fn_scopes(self.fn_id)\n+        db.fn_scopes(self.def_id)\n     }\n \n     pub fn signature_info(&self, db: &impl HirDatabase) -> Option<FnSignatureInfo> {\n-        let syntax = db.fn_syntax(self.fn_id);\n+        let syntax = self.syntax(db);\n         FnSignatureInfo::new(syntax.borrowed())\n     }\n \n     pub fn infer(&self, db: &impl HirDatabase) -> Cancelable<Arc<InferenceResult>> {\n-        db.infer(self.fn_id)\n+        db.infer(self.def_id)\n     }\n \n     pub fn module(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n-        self.fn_id.0.module(db)\n+        self.def_id.module(db)\n     }\n }\n "}, {"sha": "a2507c9b52f84ef352b73e8c91189e6601c68a2c", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -189,7 +189,6 @@ salsa::database_storage! {\n             fn file_item() for db::FileItemQuery;\n             fn input_module_items() for db::InputModuleItemsQuery;\n             fn item_map() for db::ItemMapQuery;\n-            fn fn_syntax() for db::FnSyntaxQuery;\n             fn submodules() for db::SubmodulesQuery;\n             fn infer() for db::InferQuery;\n             fn type_for_def() for db::TypeForDefQuery;"}, {"sha": "56e3f7e9dd8bea621cd17e26de6c6cf443295841", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e80021cbd0bcfea82f3b855e13a409c73b563673/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=e80021cbd0bcfea82f3b855e13a409c73b563673", "patch": "@@ -5,15 +5,15 @@ use std::{\n \n use rustc_hash::FxHashMap;\n use ra_syntax::{\n-    AstNode,  SyntaxNode, SmolStr,\n-    ast::{self, FnDef, FnDefNode, NameOwner, ModuleItemOwner}\n+    AstNode, SyntaxNode, SmolStr,\n+    ast::{self, NameOwner, ModuleItemOwner}\n };\n use ra_db::{SourceRootId, FileId, Cancelable,};\n \n use crate::{\n     SourceFileItems, SourceItemId, DefKind, Function, DefId, Name, AsName,\n     db::HirDatabase,\n-    function::{FnScopes, FnId},\n+    function::FnScopes,\n     module::{\n         ModuleSource, ModuleSourceNode, ModuleId,\n         imp::Submodule,\n@@ -23,22 +23,15 @@ use crate::{\n     adt::{StructData, EnumData},\n };\n \n-/// Resolve `FnId` to the corresponding `SyntaxNode`\n-pub(super) fn fn_syntax(db: &impl HirDatabase, fn_id: FnId) -> FnDefNode {\n-    let def_loc = fn_id.0.loc(db);\n-    assert!(def_loc.kind == DefKind::Function);\n-    let syntax = db.file_item(def_loc.source_item_id);\n-    FnDef::cast(syntax.borrowed()).unwrap().owned()\n-}\n-\n-pub(super) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n-    let syntax = db.fn_syntax(fn_id);\n+pub(super) fn fn_scopes(db: &impl HirDatabase, def_id: DefId) -> Arc<FnScopes> {\n+    let function = Function::new(def_id);\n+    let syntax = function.syntax(db);\n     let res = FnScopes::new(syntax.borrowed());\n     Arc::new(res)\n }\n \n-pub(super) fn infer(db: &impl HirDatabase, fn_id: FnId) -> Cancelable<Arc<InferenceResult>> {\n-    let function = Function { fn_id };\n+pub(super) fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceResult>> {\n+    let function = Function::new(def_id);\n     ty::infer(db, function).map(Arc::new)\n }\n "}]}