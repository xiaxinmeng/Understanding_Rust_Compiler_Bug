{"sha": "52980d0fb39134a26f73b39b384407e010fc3af5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOTgwZDBmYjM5MTM0YTI2ZjczYjM5YjM4NDQwN2UwMTBmYzNhZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-04T15:36:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-04T15:36:17Z"}, "message": "Auto merge of #59695 - Centril:rollup-88qffc2, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #59470 (Document std::fs::File close behavior ignoring errors)\n - #59555 (update miri)\n - #59556 (update stdsimd)\n - #59596 (Forward formatter settings to bounds of `Range<T>` in `fmt::Debug` impl)\n - #59639 (Never return uninhabited values at all)\n - #59671 (Make some of lexer's API private)\n - #59685 (Add description for -Os and -Oz in rustc.1)\n - #59686 (Temporarily disable stack probing for gnux32.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c0e48c613747cfef892c45a792235d84c25e92b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e48c613747cfef892c45a792235d84c25e92b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52980d0fb39134a26f73b39b384407e010fc3af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52980d0fb39134a26f73b39b384407e010fc3af5", "html_url": "https://github.com/rust-lang/rust/commit/52980d0fb39134a26f73b39b384407e010fc3af5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52980d0fb39134a26f73b39b384407e010fc3af5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d065712cf96328093400fd0a1a0c4e0f3b1d51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d065712cf96328093400fd0a1a0c4e0f3b1d51c", "html_url": "https://github.com/rust-lang/rust/commit/2d065712cf96328093400fd0a1a0c4e0f3b1d51c"}, {"sha": "31c2f5d228cd662f7696de666ba98732a1d3be08", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c2f5d228cd662f7696de666ba98732a1d3be08", "html_url": "https://github.com/rust-lang/rust/commit/31c2f5d228cd662f7696de666ba98732a1d3be08"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "76db7e1064bc296e2c110819e415da2facbbd04d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -2054,18 +2054,6 @@ dependencies = [\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.5.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rand\"\n version = \"0.6.1\"\n@@ -2093,14 +2081,6 @@ dependencies = [\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rand_core\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rand_core\"\n version = \"0.3.0\"\n@@ -2560,7 +2540,7 @@ version = \"1.0.0\"\n dependencies = [\n  \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4206,10 +4186,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"53fa22a1994bd0f9372d7a816207d8a2677ad0325b073f5c5332760f0fb62b5c\"\n \"checksum racer 2.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37c88638777cc178684cf648ca0e1dad56646ce105b8593dfe665c436300adc3\"\n \"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n-\"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n \"checksum rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9d223d52ae411a33cf7e54ec6034ec165df296ccd23533d671a28252b6f66a\"\n \"checksum rand_chacha 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"771b009e3a508cb67e8823dda454aaa5368c7bc1c16829fb77d3e980440dd34a\"\n-\"checksum rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1961a422c4d189dfb50ffa9320bf1f2a9bd54ecb92792fb9477f99a1045f3372\"\n \"checksum rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0905b6b7079ec73b314d4c748701f6931eb79fd97c668caa3f1899b22b32c6db\"\n \"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n \"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\""}, {"sha": "3788e3c864e820ed22556caccb32953fdd651c2a", "filename": "src/doc/man/rustc.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Fdoc%2Fman%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Fdoc%2Fman%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fman%2Frustc.1?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -261,7 +261,7 @@ full debug info with variable and type information.\n .RE\n .TP\n \\fBopt\\-level\\fR=\\fIVAL\\fR\n-Optimize with possible levels 0\\[en]3\n+Optimize with possible levels 0\\[en]3, s (optimize for size), or z (for minimal size)\n \n .SH ENVIRONMENT\n "}, {"sha": "5b6023f2e2cbb0c4cb636b062f10c7f78e593cc5", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -85,7 +85,10 @@ pub struct Range<Idx> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}..{:?}\", self.start, self.end)\n+        self.start.fmt(fmt)?;\n+        write!(fmt, \"..\")?;\n+        self.end.fmt(fmt)?;\n+        Ok(())\n     }\n }\n \n@@ -184,7 +187,9 @@ pub struct RangeFrom<Idx> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}..\", self.start)\n+        self.start.fmt(fmt)?;\n+        write!(fmt, \"..\")?;\n+        Ok(())\n     }\n }\n \n@@ -266,7 +271,9 @@ pub struct RangeTo<Idx> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"..{:?}\", self.end)\n+        write!(fmt, \"..\")?;\n+        self.end.fmt(fmt)?;\n+        Ok(())\n     }\n }\n \n@@ -467,7 +474,10 @@ impl<Idx> RangeInclusive<Idx> {\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}..={:?}\", self.start, self.end)\n+        self.start.fmt(fmt)?;\n+        write!(fmt, \"..=\")?;\n+        self.end.fmt(fmt)?;\n+        Ok(())\n     }\n }\n \n@@ -602,7 +612,9 @@ pub struct RangeToInclusive<Idx> {\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"..={:?}\", self.end)\n+        write!(fmt, \"..=\")?;\n+        self.end.fmt(fmt)?;\n+        Ok(())\n     }\n }\n "}, {"sha": "e64c847db651bbaebdd0da0a7e981f3e45225c05", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -238,6 +238,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         }\n+        if self.fn_ty.ret.layout.abi.is_uninhabited() {\n+            // Functions with uninhabited return values are marked `noreturn`,\n+            // so we should make sure that we never actually do.\n+            bx.abort();\n+            bx.unreachable();\n+            return;\n+        }\n         let llval = match self.fn_ty.ret.mode {\n             PassMode::Ignore(IgnoreMode::Zst) | PassMode::Indirect(..) => {\n                 bx.ret_void();"}, {"sha": "73151b194de42fab1636702be45f1ed10215a1ae", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -5,7 +5,8 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mx32\".to_string());\n-    base.stack_probes = true;\n+    // BUG: temporarily workaround #59674\n+    base.stack_probes = false;\n     base.has_elf_tls = false;\n     // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n     // breaks code gen. See LLVM bug 36743"}, {"sha": "14ff4d72f879585f354a1aeecbb24662098ce7f2", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -21,7 +21,9 @@ use crate::time::SystemTime;\n /// it was opened with. Files also implement [`Seek`] to alter the logical cursor\n /// that the file contains internally.\n ///\n-/// Files are automatically closed when they go out of scope.\n+/// Files are automatically closed when they go out of scope.  Errors detected\n+/// on closing are ignored by the implementation of `Drop`.  Use the method\n+/// [`sync_all`] if these errors must be manually handled.\n ///\n /// # Examples\n ///\n@@ -84,6 +86,7 @@ use crate::time::SystemTime;\n /// [`Read`]: ../io/trait.Read.html\n /// [`Write`]: ../io/trait.Write.html\n /// [`BufReader<R>`]: ../io/struct.BufReader.html\n+/// [`sync_all`]: struct.File.html#method.sync_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n@@ -391,9 +394,13 @@ impl File {\n \n     /// Attempts to sync all OS-internal metadata to disk.\n     ///\n-    /// This function will attempt to ensure that all in-core data reaches the\n+    /// This function will attempt to ensure that all in-memory data reaches the\n     /// filesystem before returning.\n     ///\n+    /// This can be used to handle errors that would otherwise only be caught\n+    /// when the `File` is closed.  Dropping a file will ignore errors in\n+    /// synchronizing this in-memory data.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run"}, {"sha": "d0162ef170482a37e922bd3d0fc39e49eb6b7805", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -43,16 +43,16 @@ pub struct UnmatchedBrace {\n }\n \n pub struct StringReader<'a> {\n-    pub sess: &'a ParseSess,\n+    crate sess: &'a ParseSess,\n     /// The absolute offset within the source_map of the next character to read\n-    pub next_pos: BytePos,\n+    crate next_pos: BytePos,\n     /// The absolute offset within the source_map of the current character\n-    pub pos: BytePos,\n+    crate pos: BytePos,\n     /// The current character (which has been read from self.pos)\n-    pub ch: Option<char>,\n-    pub source_file: Lrc<syntax_pos::SourceFile>,\n+    crate ch: Option<char>,\n+    crate source_file: Lrc<syntax_pos::SourceFile>,\n     /// Stop reading src at this index.\n-    pub end_src_index: usize,\n+    crate end_src_index: usize,\n     // cached:\n     peek_tok: token::Token,\n     peek_span: Span,\n@@ -126,7 +126,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Immutably extract string if found at current position with given delimiters\n-    pub fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<String> {\n+    fn peek_delimited(&self, from_ch: char, to_ch: char) -> Option<String> {\n         let mut pos = self.pos;\n         let mut idx = self.src_index(pos);\n         let mut ch = char_at(&self.src, idx);\n@@ -191,7 +191,7 @@ impl<'a> StringReader<'a> {\n         self.fatal_span(self.peek_span, m)\n     }\n \n-    pub fn emit_fatal_errors(&mut self) {\n+    crate fn emit_fatal_errors(&mut self) {\n         for err in &mut self.fatal_errs {\n             err.emit();\n         }"}, {"sha": "2792b45c975880038240d477adb0d66f760ac048", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -1 +1 @@\n-Subproject commit 12bdc2ed6b32653866d02b42f0885d9cd8bd295e\n+Subproject commit 2792b45c975880038240d477adb0d66f760ac048"}, {"sha": "1b65da9f2877a74e98b85297e3d2ecfcd80adaa1", "filename": "src/test/codegen/noreturn-uninhabited.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -g -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+#[derive(Clone, Copy)]\n+pub enum EmptyEnum {}\n+\n+#[no_mangle]\n+pub fn empty(x: &EmptyEnum) -> EmptyEnum {\n+    // CHECK: @empty({{.*}}) unnamed_addr #0\n+    // CHECK-NOT: ret void\n+    // CHECK: call void @llvm.trap()\n+    // CHECK: unreachable\n+    *x\n+}\n+\n+pub struct Foo(String, EmptyEnum);\n+\n+#[no_mangle]\n+pub fn foo(x: String, y: &EmptyEnum) -> Foo {\n+    // CHECK: @foo({{.*}}) unnamed_addr #0\n+    // CHECK-NOT: ret %Foo\n+    // CHECK: call void @llvm.trap()\n+    // CHECK: unreachable\n+    Foo(x, *y)\n+}\n+\n+// CHECK: attributes #0 = {{{.*}} noreturn {{.*}}}\n+\n+// CHECK: DISubprogram(name: \"empty\", {{.*}} DIFlagNoReturn\n+// CHECK: DISubprogram(name: \"foo\", {{.*}} DIFlagNoReturn"}, {"sha": "82f9a0173011b96411d315b332754ee6b35cf00f", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -1 +1 @@\n-Subproject commit 72b4ee0381decf609204e5548c1f5e79bdfb18b7\n+Subproject commit 82f9a0173011b96411d315b332754ee6b35cf00f"}, {"sha": "d51841cd65075cc6b5361bc8bc45c8a16269b16f", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/52980d0fb39134a26f73b39b384407e010fc3af5/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=52980d0fb39134a26f73b39b384407e010fc3af5", "patch": "@@ -57,7 +57,7 @@ features = [\n [dependencies]\n curl-sys = { version = \"0.4.13\", features = [\"http2\", \"libnghttp2-sys\"], optional = true }\n parking_lot = { version = \"0.7\", features = ['nightly'] }\n-rand = { version = \"0.5.5\", features = [\"i128_support\"] }\n+rand = { version = \"0.6.1\", features = [\"i128_support\"] }\n serde = { version = \"1.0.82\", features = ['derive'] }\n serde_json = { version = \"1.0.31\", features = [\"raw_value\"] }\n smallvec = { version = \"0.6\", features = ['union', 'may_dangle'] }"}]}