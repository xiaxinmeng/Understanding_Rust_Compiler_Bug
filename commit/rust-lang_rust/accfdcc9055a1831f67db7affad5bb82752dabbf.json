{"sha": "accfdcc9055a1831f67db7affad5bb82752dabbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjY2ZkY2M5MDU1YTE4MzFmNjdkYjdhZmZhZDViYjgyNzUyZGFiYmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-07T21:43:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-05-10T02:21:24Z"}, "message": "rename `add` to `add_element`", "tree": {"sha": "7e885aac5604c089fc6325d7c1e0f296bb11fb1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e885aac5604c089fc6325d7c1e0f296bb11fb1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/accfdcc9055a1831f67db7affad5bb82752dabbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/accfdcc9055a1831f67db7affad5bb82752dabbf", "html_url": "https://github.com/rust-lang/rust/commit/accfdcc9055a1831f67db7affad5bb82752dabbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/accfdcc9055a1831f67db7affad5bb82752dabbf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed72950fdee7fe53cb52584c249d21fd03b0672e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed72950fdee7fe53cb52584c249d21fd03b0672e", "html_url": "https://github.com/rust-lang/rust/commit/ed72950fdee7fe53cb52584c249d21fd03b0672e"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b9459bb9023993de200283fdc8c0cd13a30c5887", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/accfdcc9055a1831f67db7affad5bb82752dabbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/accfdcc9055a1831f67db7affad5bb82752dabbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=accfdcc9055a1831f67db7affad5bb82752dabbf", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             // Add all nodes in the CFG to liveness constraints\n             for point_index in self.elements.all_point_indices() {\n-                self.liveness_constraints.add(\n+                self.liveness_constraints.add_element(\n                     variable,\n                     point_index,\n                     &Cause::UniversalRegion(variable),\n@@ -318,7 +318,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n             // Add `end(X)` into the set for X.\n             self.liveness_constraints\n-                .add(variable, variable, &Cause::UniversalRegion(variable));\n+                .add_element(variable, variable, &Cause::UniversalRegion(variable));\n         }\n     }\n \n@@ -367,7 +367,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"add_live_point: @{:?} Adding cause {:?}\", point, cause);\n \n         let element = self.elements.index(point);\n-        if self.liveness_constraints.add(v, element, &cause) {\n+        if self.liveness_constraints.add_element(v, element, &cause) {\n             true\n         } else {\n             false"}, {"sha": "126a34831a882f6c7b379fd13a766005ca54a39d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/accfdcc9055a1831f67db7affad5bb82752dabbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/accfdcc9055a1831f67db7affad5bb82752dabbf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=accfdcc9055a1831f67db7affad5bb82752dabbf", "patch": "@@ -239,7 +239,7 @@ impl RegionValues {\n \n     /// Adds the given element to the value for the given region. Returns true if\n     /// the element is newly added (i.e., was not already present).\n-    pub(super) fn add<E: ToElementIndex>(&mut self, r: RegionVid, elem: E, cause: &Cause) -> bool {\n+    pub(super) fn add_element<E: ToElementIndex>(&mut self, r: RegionVid, elem: E, cause: &Cause) -> bool {\n         let i = self.elements.index(elem);\n         self.add_internal(r, i, |_| cause.clone())\n     }"}]}