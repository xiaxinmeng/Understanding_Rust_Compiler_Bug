{"sha": "c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOGQ2ZjFmZmE2ODNhOTk4ZTljOGEzZmY5M2Y2NTYwYjIxMDMwMDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-29T00:17:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-29T00:17:32Z"}, "message": "Rollup merge of #81176 - camsteffen:qpath-res, r=oli-obk\n\nImprove safety of `LateContext::qpath_res`\n\nThis is my first rustc code change, inspired by hacking on clippy!\n\nThe first change is to clear cached `TypeckResults` from `LateContext` when visiting a nested item. I took a hint from [here](https://github.com/rust-lang/rust/blob/5e91c4ecc09312d8b63d250a432b0f3ef83f1df7/compiler/rustc_privacy/src/lib.rs#L1300).\n\nClippy has a `qpath_res` util function to avoid a possible ICE in `LateContext::qpath_res`. But the docs of `LateContext::qpath_res` promise no ICE. So this updates the `LateContext` method to keep its promises, and removes the util function.\n\nRelated: rust-lang/rust-clippy#4545\n\nCC ````````````@eddyb```````````` since you've done related work\nCC ````````````@flip1995```````````` FYI", "tree": {"sha": "47ac6c8534e0ec3bd7ab102ee880323b46061664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ac6c8534e0ec3bd7ab102ee880323b46061664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "html_url": "https://github.com/rust-lang/rust/commit/c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299ff49667c213a87c22e371298a87a5b4f874a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/299ff49667c213a87c22e371298a87a5b4f874a6", "html_url": "https://github.com/rust-lang/rust/commit/299ff49667c213a87c22e371298a87a5b4f874a6"}, {"sha": "2454408318814a2451b0698fa6d1cbffcaafda5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2454408318814a2451b0698fa6d1cbffcaafda5f", "html_url": "https://github.com/rust-lang/rust/commit/2454408318814a2451b0698fa6d1cbffcaafda5f"}], "stats": {"total": 103, "additions": 45, "deletions": 58}, "files": [{"sha": "6fa1378b8c73d66971f75e93e899136a1aa93ab4", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    any_parent_is_automatically_derived, contains_name, match_def_path, paths, qpath_res, snippet_with_macro_callsite,\n+    any_parent_is_automatically_derived, contains_name, match_def_path, paths, snippet_with_macro_callsite,\n };\n use crate::utils::{span_lint_and_note, span_lint_and_sugg};\n use if_chain::if_chain;\n@@ -231,7 +231,7 @@ fn is_expr_default<'tcx>(expr: &'tcx Expr<'tcx>, cx: &LateContext<'tcx>) -> bool\n     if_chain! {\n         if let ExprKind::Call(ref fn_expr, _) = &expr.kind;\n         if let ExprKind::Path(qpath) = &fn_expr.kind;\n-        if let Res::Def(_, def_id) = qpath_res(cx, qpath, fn_expr.hir_id);\n+        if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n         then {\n             // right hand side of assignment is `Default::default`\n             match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD)"}, {"sha": "a84f9c46287163ece6ddd5ab947e175dd0d5481f", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_lint_and_note};\n+use crate::utils::{is_copy, match_def_path, paths, span_lint_and_note};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             if let ExprKind::Call(ref path, ref args) = expr.kind;\n             if let ExprKind::Path(ref qpath) = path.kind;\n             if args.len() == 1;\n-            if let Some(def_id) = qpath_res(cx, qpath, path.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id();\n             then {\n                 let lint;\n                 let msg;"}, {"sha": "915859270009b27775b5656c67a7241783abc373", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_entrypoint_fn, match_def_path, paths, qpath_res, span_lint};\n+use crate::utils::{is_entrypoint_fn, match_def_path, paths, span_lint};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -29,7 +29,7 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n         if_chain! {\n             if let ExprKind::Call(ref path_expr, ref _args) = e.kind;\n             if let ExprKind::Path(ref path) = path_expr.kind;\n-            if let Some(def_id) = qpath_res(cx, path, path_expr.hir_id).opt_def_id();\n+            if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n             then {\n                 let parent = cx.tcx.hir().get_parent_item(e.hir_id);"}, {"sha": "8795425461033d2da785dcab99add48a63a6b396", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    last_path_segment, match_def_path, must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint,\n-    span_lint_and_help, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    last_path_segment, match_def_path, must_use_attr, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n+    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -659,7 +659,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr<'_>) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.kind {\n-            if let Res::Local(id) = qpath_res(self.cx, qpath, ptr.hir_id) {\n+            if let Res::Local(id) = self.cx.qpath_res(qpath, ptr.hir_id) {\n                 if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,\n@@ -722,7 +722,7 @@ fn is_mutated_static(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> bool {\n     use hir::ExprKind::{Field, Index, Path};\n \n     match e.kind {\n-        Path(ref qpath) => !matches!(qpath_res(cx, qpath, e.hir_id), Res::Local(_)),\n+        Path(ref qpath) => !matches!(cx.qpath_res(qpath, e.hir_id), Res::Local(_)),\n         Field(ref inner, _) | Index(ref inner, _) => is_mutated_static(cx, inner),\n         _ => false,\n     }"}, {"sha": "5886c2360e36220ef5c6a7f97dada59c5eda8f5c", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{qpath_res, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n+use crate::utils::{snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -145,7 +145,7 @@ fn check_assign<'tcx>(\n         if let hir::StmtKind::Semi(ref expr) = expr.kind;\n         if let hir::ExprKind::Assign(ref var, ref value, _) = expr.kind;\n         if let hir::ExprKind::Path(ref qpath) = var.kind;\n-        if let Res::Local(local_id) = qpath_res(cx, qpath, var.hir_id);\n+        if let Res::Local(local_id) = cx.qpath_res(qpath, var.hir_id);\n         if decl == local_id;\n         then {\n             let mut v = LocalUsedVisitor::new(decl);"}, {"sha": "f89075005bc7acb20a291c53d9b67b67e10888a3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -6,9 +6,9 @@ use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n-    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, qpath_res, single_segment_path,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n+    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, single_segment_path, snippet,\n+    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n+    span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -848,7 +848,7 @@ fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n         if let ExprKind::Path(qpath) = &expr.kind;\n         if let QPath::Resolved(None, path) = qpath;\n         if path.segments.len() == 1;\n-        if let Res::Local(local_id) = qpath_res(cx, qpath, expr.hir_id);\n+        if let Res::Local(local_id) = cx.qpath_res(qpath, expr.hir_id);\n         then {\n             // our variable!\n             local_id == var\n@@ -1420,7 +1420,7 @@ fn detect_same_item_push<'tcx>(\n                 // Make sure that the push does not involve possibly mutating values\n                 match pushed_item.kind {\n                     ExprKind::Path(ref qpath) => {\n-                        match qpath_res(cx, qpath, pushed_item.hir_id) {\n+                        match cx.qpath_res(qpath, pushed_item.hir_id) {\n                             // immutable bindings that are initialized with literal or constant\n                             Res::Local(hir_id) => {\n                                 if_chain! {\n@@ -1437,7 +1437,7 @@ fn detect_same_item_push<'tcx>(\n                                             ExprKind::Lit(..) => emit_lint(cx, vec, pushed_item),\n                                             // immutable bindings that are initialized with constant\n                                             ExprKind::Path(ref path) => {\n-                                                if let Res::Def(DefKind::Const, ..) = qpath_res(cx, path, init.hir_id) {\n+                                                if let Res::Def(DefKind::Const, ..) = cx.qpath_res(path, init.hir_id) {\n                                                     emit_lint(cx, vec, pushed_item);\n                                                 }\n                                             }\n@@ -2028,7 +2028,7 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n         if let ExprKind::Path(ref qpath) = bound.kind;\n         if let QPath::Resolved(None, _) = *qpath;\n         then {\n-            let res = qpath_res(cx, qpath, bound.hir_id);\n+            let res = cx.qpath_res(qpath, bound.hir_id);\n             if let Res::Local(hir_id) = res {\n                 let node_str = cx.tcx.hir().get(hir_id);\n                 if_chain! {\n@@ -2120,7 +2120,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     if self.prefer_mutable {\n                         self.indexed_mut.insert(seqvar.segments[0].ident.name);\n                     }\n-                    let res = qpath_res(self.cx, seqpath, seqexpr.hir_id);\n+                    let res = self.cx.qpath_res(seqpath, seqexpr.hir_id);\n                     match res {\n                         Res::Local(hir_id) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n@@ -2184,7 +2184,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref path) = *qpath;\n             if path.segments.len() == 1;\n             then {\n-                if let Res::Local(local_id) = qpath_res(self.cx, qpath, expr.hir_id) {\n+                if let Res::Local(local_id) = self.cx.qpath_res(qpath, expr.hir_id) {\n                     if local_id == self.var {\n                         self.nonindex = true;\n                     } else {\n@@ -2589,7 +2589,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n fn var_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.kind {\n-        let path_res = qpath_res(cx, qpath, expr.hir_id);\n+        let path_res = cx.qpath_res(qpath, expr.hir_id);\n         if let Res::Local(hir_id) = path_res {\n             return Some(hir_id);\n         }\n@@ -2819,7 +2819,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n         if_chain! {\n             if let ExprKind::Path(ref qpath) = ex.kind;\n             if let QPath::Resolved(None, _) = *qpath;\n-            let res = qpath_res(self.cx, qpath, ex.hir_id);\n+            let res = self.cx.qpath_res(qpath, ex.hir_id);\n             then {\n                 match res {\n                     Res::Local(hir_id) => {"}, {"sha": "42a92104a4919f28d259e18e940f1b90a36aaff8", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, qpath_res, snippet, span_lint_and_then,\n+    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, snippet, span_lint_and_then,\n };\n \n use if_chain::if_chain;\n@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                 } else {\n                     return;\n                 };\n-                let target_res = qpath_res(cx, &target_path, target_arg.hir_id);\n+                let target_res = cx.qpath_res(&target_path, target_arg.hir_id);\n                 if target_res == Res::Err {\n                     return;\n                 };\n@@ -221,7 +221,7 @@ fn find_stripping<'tcx>(\n                 if let ExprKind::Index(indexed, index) = &unref.kind;\n                 if let Some(higher::Range { start, end, .. }) = higher::range(index);\n                 if let ExprKind::Path(path) = &indexed.kind;\n-                if qpath_res(self.cx, path, ex.hir_id) == self.target;\n+                if self.cx.qpath_res(path, ex.hir_id) == self.target;\n                 then {\n                     match (self.strip_kind, start, end) {\n                         (StripKind::Prefix, Some(start), None) => {\n@@ -235,7 +235,7 @@ fn find_stripping<'tcx>(\n                                 if let ExprKind::Binary(Spanned { node: BinOpKind::Sub, .. }, left, right) = end.kind;\n                                 if let Some(left_arg) = len_arg(self.cx, left);\n                                 if let ExprKind::Path(left_path) = &left_arg.kind;\n-                                if qpath_res(self.cx, left_path, left_arg.hir_id) == self.target;\n+                                if self.cx.qpath_res(left_path, left_arg.hir_id) == self.target;\n                                 if eq_pattern_length(self.cx, self.pattern, right);\n                                 then {\n                                     self.results.push(ex.span);"}, {"sha": "d34f9761e26f9a0d26b29c03733217e9e5296858", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, paths, qpath_res, span_lint};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -29,7 +29,7 @@ impl<'tcx> LateLintPass<'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.kind {\n             if let ExprKind::Path(ref qpath) = path_expr.kind {\n-                if let Some(def_id) = qpath_res(cx, qpath, path_expr.hir_id).opt_def_id() {\n+                if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id() {\n                     if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n                         let forgot_ty = cx.typeck_results().expr_ty(&args[0]);\n "}, {"sha": "69302d695ce0a31304aadca1c8c6fa2dcdd19c1b", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, qpath_res, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n@@ -67,7 +67,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.kind {\n-                let res = qpath_res(cx, qpath, callee.hir_id);\n+                let res = cx.qpath_res(qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..) => {\n                         !has_drop(cx, cx.typeck_results().expr_ty(expr))\n@@ -146,7 +146,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.kind {\n-                let res = qpath_res(cx, qpath, callee.hir_id);\n+                let res = cx.qpath_res(qpath, callee.hir_id);\n                 match res {\n                     Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..)\n                         if !has_drop(cx, cx.typeck_results().expr_ty(expr)) =>"}, {"sha": "f57d753631755881da6f739021dec84a07f1ddaa", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -18,7 +18,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{in_constant, qpath_res, span_lint_and_then};\n+use crate::utils::{in_constant, span_lint_and_then};\n use if_chain::if_chain;\n \n // FIXME: this is a correctness problem but there's no suitable\n@@ -339,7 +339,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             }\n \n             // Make sure it is a const item.\n-            let item_def_id = match qpath_res(cx, qpath, expr.hir_id) {\n+            let item_def_id = match cx.qpath_res(qpath, expr.hir_id) {\n                 Res::Def(DefKind::Const | DefKind::AssocConst, did) => did,\n                 _ => return,\n             };"}, {"sha": "fa508df865e48af4a01b79866769aee3395f5dc7", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, match_trait_method, paths, qpath_res, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n use if_chain::if_chain;\n use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n@@ -94,7 +94,7 @@ impl LateLintPass<'_> for ToStringInDisplay {\n             if match_trait_method(cx, expr, &paths::TO_STRING);\n             if self.in_display_impl;\n             if let ExprKind::Path(ref qpath) = args[0].kind;\n-            if let Res::Local(hir_id) = qpath_res(cx, qpath, args[0].hir_id);\n+            if let Res::Local(hir_id) = cx.qpath_res(qpath, args[0].hir_id);\n             if let Some(self_hir_id) = self.self_hir_id;\n             if hir_id == self_hir_id;\n             then {"}, {"sha": "04c32ce9e8f2c9d9d2cacdae8374c63f010d6eb2", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -34,7 +34,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_hir_ty_cfg_dependant,\n     is_type_diagnostic_item, last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args,\n-    multispan_sugg, numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n+    multispan_sugg, numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt,\n     snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then, unsext,\n };\n@@ -298,7 +298,7 @@ fn match_type_parameter(cx: &LateContext<'_>, qpath: &QPath<'_>, path: &[&str])\n             _ => None,\n         });\n         if let TyKind::Path(ref qpath) = ty.kind;\n-        if let Some(did) = qpath_res(cx, qpath, ty.hir_id).opt_def_id();\n+        if let Some(did) = cx.qpath_res(qpath, ty.hir_id).opt_def_id();\n         if match_def_path(cx, did, path);\n         then {\n             return Some(ty.span);\n@@ -365,7 +365,7 @@ impl Types {\n         match hir_ty.kind {\n             TyKind::Path(ref qpath) if !is_local => {\n                 let hir_id = hir_ty.hir_id;\n-                let res = qpath_res(cx, qpath, hir_id);\n+                let res = cx.qpath_res(qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n@@ -535,7 +535,7 @@ impl Types {\n                             });\n                             // ty is now _ at this point\n                             if let TyKind::Path(ref ty_qpath) = ty.kind;\n-                            let res = qpath_res(cx, ty_qpath, ty.hir_id);\n+                            let res = cx.qpath_res(ty_qpath, ty.hir_id);\n                             if let Some(def_id) = res.opt_def_id();\n                             if Some(def_id) == cx.tcx.lang_items().owned_box();\n                             // At this point, we know ty is Box<T>, now get T\n@@ -652,7 +652,7 @@ impl Types {\n         match mut_ty.ty.kind {\n             TyKind::Path(ref qpath) => {\n                 let hir_id = mut_ty.ty.hir_id;\n-                let def = qpath_res(cx, qpath, hir_id);\n+                let def = cx.qpath_res(qpath, hir_id);\n                 if_chain! {\n                     if let Some(def_id) = def.opt_def_id();\n                     if Some(def_id) == cx.tcx.lang_items().owned_box();\n@@ -739,7 +739,7 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n \n fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n     if_chain! {\n-        if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n+        if let Some(did) = cx.qpath_res(qpath, id).opt_def_id();\n         if let Some(Node::GenericParam(generic_param)) = cx.tcx.hir().get_if_local(did);\n         if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n         if synthetic == Some(SyntheticTyParamKind::ImplTrait);"}, {"sha": "822863ca3e279d5039077bf78ac9bbbb4038a93c", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant_simple, Constant};\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, qpath_res, run_lints,\n-    snippet, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+    is_expn_of, match_def_path, match_qpath, match_type, method_calls, path_to_res, paths, run_lints, snippet,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, NodeId};\n@@ -787,7 +787,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n \n     match &expr.kind {\n         ExprKind::AddrOf(.., expr) => return path_to_matched_type(cx, expr),\n-        ExprKind::Path(qpath) => match qpath_res(cx, qpath, expr.hir_id) {\n+        ExprKind::Path(qpath) => match cx.qpath_res(qpath, expr.hir_id) {\n             Res::Local(hir_id) => {\n                 let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n                 if let Some(Node::Local(local)) = cx.tcx.hir().find(parent_id) {"}, {"sha": "0bbb6a52a20468c447e43a7d6ec6ab19879af214", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c18d6f1ffa683a998e9c8a3ff93f6560b2103008/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=c18d6f1ffa683a998e9c8a3ff93f6560b2103008", "patch": "@@ -369,19 +369,6 @@ pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Option<def::Res> {\n     }\n }\n \n-pub fn qpath_res(cx: &LateContext<'_>, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {\n-    match qpath {\n-        hir::QPath::Resolved(_, path) => path.res,\n-        hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => {\n-            if cx.tcx.has_typeck_results(id.owner.to_def_id()) {\n-                cx.tcx.typeck(id.owner).qpath_res(qpath, id)\n-            } else {\n-                Res::Err\n-            }\n-        },\n-    }\n-}\n-\n /// Convenience function to get the `DefId` of a trait by path.\n /// It could be a trait or trait alias.\n pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {"}]}