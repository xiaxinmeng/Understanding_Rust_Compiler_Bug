{"sha": "4795e19d6d997143a855b8ac6b5cb288e8caea35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3OTVlMTlkNmQ5OTcxNDNhODU1YjhhYzZiNWNiMjg4ZThjYWVhMzU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-22T01:49:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-24T01:37:15Z"}, "message": "When replacing a pattern variable in macro expansion use the span of\nthe replacement and not the span of the pattern variable.\n\nFixes issue #1448, and #1387.", "tree": {"sha": "5d84f40408b4738fcb1f8c34b7cb5f7bfe134fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d84f40408b4738fcb1f8c34b7cb5f7bfe134fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4795e19d6d997143a855b8ac6b5cb288e8caea35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4795e19d6d997143a855b8ac6b5cb288e8caea35", "html_url": "https://github.com/rust-lang/rust/commit/4795e19d6d997143a855b8ac6b5cb288e8caea35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4795e19d6d997143a855b8ac6b5cb288e8caea35/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ab47fe499b255498268198279fc3df11a29f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ab47fe499b255498268198279fc3df11a29f3f", "html_url": "https://github.com/rust-lang/rust/commit/20ab47fe499b255498268198279fc3df11a29f3f"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "dcaf16c973efb65961d0a4a2fb6b5068c64c41a3", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4795e19d6d997143a855b8ac6b5cb288e8caea35/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4795e19d6d997143a855b8ac6b5cb288e8caea35/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=4795e19d6d997143a855b8ac6b5cb288e8caea35", "patch": "@@ -338,9 +338,9 @@ fn transcribe_path(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n     if vec::len(p.types) > 0u || vec::len(p.idents) != 1u { ret (p, s); }\n     ret alt follow_for_trans(cx, b.find(p.idents[0]), idx_path) {\n           some(match_ident(id)) {\n-            ({global: false, idents: [id.node], types: []}, s)\n+            ({global: false, idents: [id.node], types: []}, id.span)\n           }\n-          some(match_path(a_pth)) { (a_pth.node, s) }\n+          some(match_path(a_pth)) { (a_pth.node, a_pth.span) }\n           some(m) { match_error(cx, m, \"a path\") }\n           none { (p, s) }\n         }\n@@ -363,10 +363,10 @@ fn transcribe_expr(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n                 (expr_path(@respan(id.span,\n                                    {global: false,\n                                     idents: [id.node],\n-                                    types: []})), s)\n+                                    types: []})), id.span)\n               }\n               some(match_path(a_pth)) { (expr_path(a_pth), s) }\n-              some(match_expr(a_exp)) { (a_exp.node, s) }\n+              some(match_expr(a_exp)) { (a_exp.node, a_exp.span) }\n               some(m) { match_error(cx, m, \"an expression\") }\n               none { orig(e, s, fld) }\n             }\n@@ -385,7 +385,7 @@ fn transcribe_type(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n             alt path_to_ident(pth) {\n               some(id) {\n                 alt follow_for_trans(cx, b.find(id), idx_path) {\n-                  some(match_ty(ty)) { (ty.node, s) }\n+                  some(match_ty(ty)) { (ty.node, ty.span) }\n                   some(m) { match_error(cx, m, \"a type\") }\n                   none { orig(t, s, fld) }\n                 }\n@@ -409,7 +409,7 @@ fn transcribe_block(cx: ext_ctxt, b: bindings, idx_path: @mutable [uint],\n     ret alt block_to_ident(blk) {\n           some(id) {\n             alt follow_for_trans(cx, b.find(id), idx_path) {\n-              some(match_block(new_blk)) { (new_blk.node, s) }\n+              some(match_block(new_blk)) { (new_blk.node, new_blk.span) }\n \n \n "}]}