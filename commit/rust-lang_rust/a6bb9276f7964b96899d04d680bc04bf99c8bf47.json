{"sha": "a6bb9276f7964b96899d04d680bc04bf99c8bf47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmI5Mjc2Zjc5NjRiOTY4OTlkMDRkNjgwYmMwNGJmOTljOGJmNDc=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-09T22:38:08Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-12-10T16:08:42Z"}, "message": "Lint wrong self convention in trait also", "tree": {"sha": "4b43a2de9b9d06f0dc12faf51e51631908350db2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b43a2de9b9d06f0dc12faf51e51631908350db2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bb9276f7964b96899d04d680bc04bf99c8bf47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb9276f7964b96899d04d680bc04bf99c8bf47", "html_url": "https://github.com/rust-lang/rust/commit/a6bb9276f7964b96899d04d680bc04bf99c8bf47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb9276f7964b96899d04d680bc04bf99c8bf47/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c70133faa059a9e71dc386d70121a23a65715ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c70133faa059a9e71dc386d70121a23a65715ab", "html_url": "https://github.com/rust-lang/rust/commit/6c70133faa059a9e71dc386d70121a23a65715ab"}], "stats": {"total": 109, "additions": 101, "deletions": 8}, "files": [{"sha": "3c89c1b6ed2cd55584e60bdbf39450a17d443c9f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb9276f7964b96899d04d680bc04bf99c8bf47/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb9276f7964b96899d04d680bc04bf99c8bf47/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a6bb9276f7964b96899d04d680bc04bf99c8bf47", "patch": "@@ -22,6 +22,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, SymbolStr};\n+use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n@@ -1623,10 +1624,15 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let item = cx.tcx.hir().expect_item(parent);\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         let self_ty = cx.tcx.type_of(def_id);\n+\n+        // if this impl block implements a trait, lint in trait definition instead\n+        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n+            return;\n+        }\n+\n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n-            if let hir::ItemKind::Impl{ of_trait: None, .. } = item.kind;\n \n             let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let method_sig = cx.tcx.fn_sig(method_def_id);\n@@ -1697,11 +1703,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             }\n         }\n \n-        // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl { of_trait: Some(_), .. } = item.kind {\n-            return;\n-        }\n-\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n@@ -1735,8 +1736,42 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        if in_external_macro(cx.tcx.sess, item.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let TraitItemKind::Fn(ref sig, _) = item.kind;\n+            if let Some(first_arg_ty) = sig.decl.inputs.iter().next();\n+            let first_arg_span = first_arg_ty.span;\n+            let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n+            let self_ty = TraitRef::identity(cx.tcx, item.hir_id.owner.to_def_id()).self_ty();\n+\n+            then {\n+                if let Some((ref conv, self_kinds)) = &CONVENTIONS\n+                    .iter()\n+                    .find(|(ref conv, _)| conv.check(&item.ident.name.as_str()))\n+                {\n+                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n+                        span_lint(\n+                            cx,\n+                            WRONG_PUB_SELF_CONVENTION,\n+                            first_arg_span,\n+                            &format!(\"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n+                                conv,\n+                                &self_kinds\n+                                    .iter()\n+                                    .map(|k| k.description())\n+                                    .collect::<Vec<_>>()\n+                                    .join(\" or \")\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+\n         if_chain! {\n-            if !in_external_macro(cx.tcx.sess, item.span);\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id);"}, {"sha": "275866b8248fb402c6b33293a649b35834ccb1df", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb9276f7964b96899d04d680bc04bf99c8bf47/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb9276f7964b96899d04d680bc04bf99c8bf47/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=a6bb9276f7964b96899d04d680bc04bf99c8bf47", "patch": "@@ -88,3 +88,29 @@ mod issue4037 {\n         }\n     }\n }\n+\n+// Lint also in trait definition (see #6307)\n+mod issue6307{\n+    trait T: Sized {\n+        fn as_i32(self) {}\n+        fn as_u32(&self) {}\n+        fn into_i32(&self) {}\n+        fn into_u32(self) {}\n+        fn is_i32(self) {}\n+        fn is_u32(&self) {}\n+        fn to_i32(self) {}\n+        fn to_u32(&self) {}\n+        fn from_i32(self) {}\n+        // check whether the lint can be allowed at the function level\n+        #[allow(clippy::wrong_pub_self_convention)]\n+        fn from_cake(self) {}\n+\n+        // test for false positives\n+        fn as_(self) {}\n+        fn into_(&self) {}\n+        fn is_(self) {}\n+        fn to_(self) {}\n+        fn from_(self) {}\n+        fn to_mut(&mut self) {}\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "64aa957fed6aad8b5da64239892478c1bd68d20c", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a6bb9276f7964b96899d04d680bc04bf99c8bf47/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6bb9276f7964b96899d04d680bc04bf99c8bf47/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=a6bb9276f7964b96899d04d680bc04bf99c8bf47", "patch": "@@ -72,5 +72,37 @@ error: methods called `from_*` usually take no self; consider choosing a less am\n LL |     pub fn from_i64(self) {}\n    |                     ^^^^\n \n-error: aborting due to 12 previous errors\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:95:19\n+   |\n+LL |         fn as_i32(self) {}\n+   |                   ^^^^\n+   |\n+   = note: `-D clippy::wrong-pub-self-convention` implied by `-D warnings`\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:97:21\n+   |\n+LL |         fn into_i32(&self) {}\n+   |                     ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:99:19\n+   |\n+LL |         fn is_i32(self) {}\n+   |                   ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:101:19\n+   |\n+LL |         fn to_i32(self) {}\n+   |                   ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:103:21\n+   |\n+LL |         fn from_i32(self) {}\n+   |                     ^^^^\n+\n+error: aborting due to 17 previous errors\n "}]}