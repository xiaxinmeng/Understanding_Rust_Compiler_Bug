{"sha": "e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGRmYmUzZmQ4YTk2MDYxOTFlZTNhNTMwNWJkNTBlOGM5YWU4YWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T05:50:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T05:50:35Z"}, "message": "rustdoc: Ignore nil-typed return values", "tree": {"sha": "5701f876d0b48a51fff9c3d5005255cc0db1295f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5701f876d0b48a51fff9c3d5005255cc0db1295f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "html_url": "https://github.com/rust-lang/rust/commit/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a02a943cec35618b7fae32d9fd0f396566dc0635", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02a943cec35618b7fae32d9fd0f396566dc0635", "html_url": "https://github.com/rust-lang/rust/commit/a02a943cec35618b7fae32d9fd0f396566dc0635"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "26325e6ffbb42e1a809d9bd0e98d78c30c1d7214", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "patch": "@@ -204,6 +204,27 @@ fn write_return(\n     }\n }\n \n+#[test]\n+fn should_write_return_type_on_new_line() {\n+    let markdown = test::render(\"fn a() -> int { }\");\n+    assert str::contains(markdown, \"\\nReturns `int`\");\n+}\n+\n+#[test]\n+fn should_write_blank_line_between_return_type_and_next_header() {\n+    let markdown = test::render(\n+        \"fn a() -> int { } \\\n+         fn b() -> int { }\"\n+    );\n+    assert str::contains(markdown, \"Returns `int`\\n\\n##\");\n+}\n+\n+#[test]\n+fn should_not_write_return_type_when_there_is_none() {\n+    let markdown = test::render(\"fn a() { }\");\n+    assert !str::contains(markdown, \"Returns\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: str) -> str {\n@@ -272,18 +293,4 @@ mod test {\n         assert str::contains(markdown, \"brief\\n\\ndesc\");\n     }\n \n-    #[test]\n-    fn should_write_return_type_on_new_line() {\n-        let markdown = render(\"fn a() -> int { }\");\n-        assert str::contains(markdown, \"\\nReturns `int`\");\n-    }\n-\n-    #[test]\n-    fn should_write_blank_line_between_return_type_and_next_header() {\n-        let markdown = render(\n-            \"fn a() -> int { } \\\n-             fn b() -> int { }\"\n-        );\n-        assert str::contains(markdown, \"Returns `int`\\n\\n##\");\n-    }\n }\n\\ No newline at end of file"}, {"sha": "cc0594d47fdc2b291266035b2f7c5716f2f1fab2", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=e9ddfbe3fd8a9606191ee3a5305bd50e8c9ae8ab", "patch": "@@ -46,27 +46,36 @@ fn merge_ret_ty(\n     fn_id: doc::ast_id,\n     doc: option<doc::retdoc>\n ) -> option<doc::retdoc> {\n-    let ty = get_ret_ty(srv, fn_id);\n     alt doc {\n       some(doc) {\n         fail \"unimplemented\";\n       }\n       none. {\n-        some({\n-            desc: none,\n-            ty: some(ty)\n-        })\n+        alt get_ret_ty(srv, fn_id) {\n+          some(ty) {\n+            some({\n+                desc: none,\n+                ty: some(ty)\n+            })\n+          }\n+          none. { none }\n+        }\n       }\n     }\n }\n \n-fn get_ret_ty(srv: astsrv::srv, id: doc::ast_id) -> str {\n+fn get_ret_ty(srv: astsrv::srv, id: doc::ast_id) -> option<str> {\n     astsrv::exec(srv) {|ctxt|\n         alt ctxt.map.get(id) {\n           ast_map::node_item(@{\n             node: ast::item_fn(decl, _, _), _\n           }) {\n-            pprust::ty_to_str(decl.output)\n+            if decl.output.node != ast::ty_nil {\n+                some(pprust::ty_to_str(decl.output))\n+            } else {\n+                // Nil-typed return values are not interesting\n+                none\n+            }\n           }\n         }\n     }\n@@ -81,6 +90,15 @@ fn should_add_fn_ret_types() {\n     assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");\n }\n \n+#[test]\n+fn should_not_add_nil_ret_type() {\n+    let source = \"fn a() { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = run(srv, doc);\n+    assert doc.topmod.fns[0].return == none;\n+}\n+\n fn merge_arg_tys(\n     srv: astsrv::srv,\n     fn_id: doc::ast_id,"}]}