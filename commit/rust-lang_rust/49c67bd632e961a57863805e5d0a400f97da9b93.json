{"sha": "49c67bd632e961a57863805e5d0a400f97da9b93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YzY3YmQ2MzJlOTYxYTU3ODYzODA1ZTVkMGE0MDBmOTdkYTliOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-24T23:46:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-24T23:46:45Z"}, "message": "Auto merge of #40806 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #40567, #40602, #40636, #40739, #40756, #40790, #40794, #40803\n- Failed merges:", "tree": {"sha": "3da290aa9669da04e3459c648f9cb3155fb34177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da290aa9669da04e3459c648f9cb3155fb34177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "html_url": "https://github.com/rust-lang/rust/commit/49c67bd632e961a57863805e5d0a400f97da9b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da40237e542e7859adab48049ec15cf18154817", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da40237e542e7859adab48049ec15cf18154817", "html_url": "https://github.com/rust-lang/rust/commit/3da40237e542e7859adab48049ec15cf18154817"}, {"sha": "6cd46603a4cc713be0a203f187bae809fed43b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd46603a4cc713be0a203f187bae809fed43b19", "html_url": "https://github.com/rust-lang/rust/commit/6cd46603a4cc713be0a203f187bae809fed43b19"}], "stats": {"total": 310, "additions": 188, "deletions": 122}, "files": [{"sha": "0314a5dfd8d02a5b283d317ef83cadad445fd8ce", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -311,9 +311,13 @@ To save @bors some work, and to get small changes through more quickly, when\n the other rollup-eligible patches too, and they'll get tested and merged at\n the same time.\n \n-To find documentation-related issues, sort by the [A-docs label][adocs].\n+To find documentation-related issues, sort by the [T-doc label][tdoc].\n \n-[adocs]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AA-docs\n+[tdoc]: https://github.com/rust-lang/rust/issues?q=is%3Aopen%20is%3Aissue%20label%3AT-doc\n+\n+You can find documentation style guidelines in [RFC 1574][rfc1574].\n+\n+[rfc1574]: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text\n \n In many cases, you don't need a full `./x.py doc`. You can use `rustdoc` directly\n to check small fixes. For example, `rustdoc src/doc/reference.md` will render"}, {"sha": "dcacef4f0f0d5f301cb189c1647693659e2fc393", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -141,8 +141,7 @@ pub struct BTreeMap<K, V> {\n unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {\n     fn drop(&mut self) {\n         unsafe {\n-            for _ in ptr::read(self).into_iter() {\n-            }\n+            drop(ptr::read(self).into_iter());\n         }\n     }\n }"}, {"sha": "f7451f574ffa3b131a29f4f1afd8eb9230204539", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -1162,7 +1162,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs.\n@@ -1199,7 +1199,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs.\n@@ -1239,7 +1239,7 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on Orson Peters' [pdqsort][pattern-defeating quicksort],\n+    /// The current algorithm is based on Orson Peters' [pattern-defeating quicksort][pdqsort],\n     /// which is a quicksort variant designed to be very fast on certain kinds of patterns,\n     /// sometimes achieving linear time. It is randomized but deterministic, and falls back to\n     /// heapsort on degenerate inputs."}, {"sha": "01dc7f51e29d9938c2b63e36086094414dd2dad8", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -983,16 +983,16 @@ impl<'tcx> Debug for Operand<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn item<'a>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-                    def_id: DefId,\n-                    substs: &'tcx Substs<'tcx>,\n-                    span: Span)\n-                    -> Self\n-    {\n+    pub fn function_handle<'a>(\n+        tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+        substs: &'tcx Substs<'tcx>,\n+        span: Span,\n+    ) -> Self {\n         Operand::Constant(Constant {\n             span: span,\n             ty: tcx.item_type(def_id).subst(tcx, substs),\n-            literal: Literal::Item { def_id, substs }\n+            literal: Literal::Value { value: ConstVal::Function(def_id, substs) },\n         })\n     }\n "}, {"sha": "dd4190a412dacd7fee78db5870c406133a12fd9d", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -89,6 +89,7 @@ should go to.\n use build::{BlockAnd, BlockAndExtension, Builder, CFG};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n+use rustc::middle::const_val::ConstVal;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n@@ -784,9 +785,8 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         func: Operand::Constant(Constant {\n             span: data.span,\n             ty: tcx.item_type(free_func).subst(tcx, substs),\n-            literal: Literal::Item {\n-                def_id: free_func,\n-                substs: substs\n+            literal: Literal::Value {\n+                value: ConstVal::Function(free_func, substs),\n             }\n         }),\n         args: vec![Operand::Consume(data.value.clone())],"}, {"sha": "44858a98e36f963f0c597ae971b00968ea00bda1", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -714,9 +714,8 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         ty: callee.ty,\n         span: expr.span,\n         kind: ExprKind::Literal {\n-            literal: Literal::Item {\n-                def_id: callee.def_id,\n-                substs: callee.substs,\n+            literal: Literal::Value {\n+                value: ConstVal::Function(callee.def_id, callee.substs),\n             },\n         },\n     }\n@@ -743,22 +742,32 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                      -> ExprKind<'tcx> {\n     let substs = cx.tables().node_id_item_substs(expr.id)\n         .unwrap_or_else(|| cx.tcx.intern_substs(&[]));\n-    let def_id = match def {\n+    match def {\n         // A regular function, constructor function or a constant.\n         Def::Fn(def_id) |\n         Def::Method(def_id) |\n         Def::StructCtor(def_id, CtorKind::Fn) |\n-        Def::VariantCtor(def_id, CtorKind::Fn) |\n+        Def::VariantCtor(def_id, CtorKind::Fn) => ExprKind::Literal {\n+            literal: Literal::Value {\n+                value: ConstVal::Function(def_id, substs),\n+            },\n+        },\n+\n         Def::Const(def_id) |\n-        Def::AssociatedConst(def_id) => def_id,\n+        Def::AssociatedConst(def_id) => ExprKind::Literal {\n+            literal: Literal::Item {\n+                def_id: def_id,\n+                substs: substs,\n+            },\n+        },\n \n         Def::StructCtor(def_id, CtorKind::Const) |\n         Def::VariantCtor(def_id, CtorKind::Const) => {\n             match cx.tables().node_id_to_type(expr.id).sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::TyAdt(adt_def, substs) => {\n-                    return ExprKind::Adt {\n+                    ExprKind::Adt {\n                         adt_def: adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs: substs,\n@@ -770,17 +779,11 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        Def::Static(node_id, _) => return ExprKind::StaticRef { id: node_id },\n+        Def::Static(node_id, _) => ExprKind::StaticRef { id: node_id },\n \n-        Def::Local(..) | Def::Upvar(..) => return convert_var(cx, expr, def),\n+        Def::Local(..) | Def::Upvar(..) => convert_var(cx, expr, def),\n \n         _ => span_bug!(expr.span, \"def `{:?}` not yet implemented\", def),\n-    };\n-    ExprKind::Literal {\n-        literal: Literal::Item {\n-            def_id: def_id,\n-            substs: substs,\n-        },\n     }\n }\n "}, {"sha": "3eef5d83b8ba0504f2e8946c4f4b5179aeb0bfe7", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -132,9 +132,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                 let method_ty = self.tcx.item_type(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n                 return (method_ty,\n-                        Literal::Item {\n-                            def_id: item.def_id,\n-                            substs: substs,\n+                        Literal::Value {\n+                            value: ConstVal::Function(item.def_id, substs),\n                         });\n             }\n         }"}, {"sha": "63d20be88feee70eb623fd9c9b8fe13f1e2b7538", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -12,6 +12,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::middle::region::ROOT_CODE_EXTENT;\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n use rustc::ty::{self, Ty};\n@@ -335,7 +336,9 @@ fn build_call_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             Operand::Constant(Constant {\n                 span: span,\n                 ty: tcx.item_type(def_id).subst(tcx, param_env.free_substs),\n-                literal: Literal::Item { def_id, substs: param_env.free_substs },\n+                literal: Literal::Value {\n+                    value: ConstVal::Function(def_id, param_env.free_substs),\n+                },\n             }),\n             vec![rcvr]\n         )"}, {"sha": "ba42804c9262f0c92f776453399528e4e6d0443a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -568,11 +568,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 });\n             }\n             Operand::Constant(ref constant) => {\n-                // Only functions and methods can have these types.\n-                if let ty::TyFnDef(..) = constant.ty.sty {\n-                    return;\n-                }\n-\n                 if let Literal::Item { def_id, substs } = constant.literal {\n                     // Don't peek inside generic (associated) constants.\n                     if substs.types().next().is_some() {"}, {"sha": "3d604affbfea9ce0e24f33c5f02069dab9896e46", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -15,6 +15,7 @@ use rustc::infer::{self, InferCtxt, InferOk};\n use rustc::traits::{self, Reveal};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n+use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n@@ -526,7 +527,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn is_box_free(&self, operand: &Operand<'tcx>) -> bool {\n         match operand {\n             &Operand::Constant(Constant {\n-                literal: Literal::Item { def_id, .. }, ..\n+                literal: Literal::Value {\n+                    value: ConstVal::Function(def_id, _), ..\n+                }, ..\n             }) => {\n                 Some(def_id) == self.tcx().lang_items.box_free_fn()\n             }"}, {"sha": "ccbc6700d89c1bc3c314d5d3d8acf9a4434cc299", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -525,8 +525,8 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             }],\n             terminator: Some(Terminator {\n                 kind: TerminatorKind::Call {\n-                    func: Operand::item(tcx, drop_fn.def_id, substs,\n-                                        self.source_info.span),\n+                    func: Operand::function_handle(tcx, drop_fn.def_id, substs,\n+                                                   self.source_info.span),\n                     args: vec![Operand::Consume(Lvalue::Local(ref_lvalue))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind,\n@@ -629,7 +629,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n \n         let call = TerminatorKind::Call {\n-            func: Operand::item(tcx, free_func, substs, self.source_info.span),\n+            func: Operand::function_handle(tcx, free_func, substs, self.source_info.span),\n             args: vec![Operand::Consume(self.lvalue.clone())],\n             destination: Some((unit_temp, target)),\n             cleanup: None"}, {"sha": "a3968650043ba41a5b29accdf68f238e4c7dc209", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -13,7 +13,8 @@\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc::mir::{self, Location, TerminatorKind};\n+use rustc::middle::const_val::ConstVal;\n+use rustc::mir::{self, Location, TerminatorKind, Literal};\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n use common;\n@@ -109,7 +110,9 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n         match *kind {\n             mir::TerminatorKind::Call {\n                 func: mir::Operand::Constant(mir::Constant {\n-                    literal: mir::Literal::Item { def_id, .. }, ..\n+                    literal: Literal::Value {\n+                        value: ConstVal::Function(def_id, _), ..\n+                    }, ..\n                 }),\n                 ref args, ..\n             } if Some(def_id) == self.cx.ccx.tcx().lang_items.box_free_fn() => {"}, {"sha": "dbd928194c0329834a14f47eb0a45ed12ae98d1d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -101,9 +101,12 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Str(ref v) => C_str_slice(ccx, v.clone()),\n             ConstVal::ByteStr(ref v) => consts::addr_of(ccx, C_bytes(ccx, v), 1, \"byte_str\"),\n             ConstVal::Struct(_) | ConstVal::Tuple(_) |\n-            ConstVal::Array(..) | ConstVal::Repeat(..) |\n+            ConstVal::Array(..) | ConstVal::Repeat(..) => {\n+                bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv)\n+            }\n             ConstVal::Function(..) => {\n-                bug!(\"MIR must not use `{:?}` (which refers to a local ID)\", cv)\n+                let llty = type_of::type_of(ccx, ty);\n+                return Const::new(C_null(llty), ty);\n             }\n             ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n         };\n@@ -476,13 +479,6 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let ty = self.monomorphize(&constant.ty);\n                 match constant.literal.clone() {\n                     mir::Literal::Item { def_id, substs } => {\n-                        // Shortcut for zero-sized types, including function item\n-                        // types, which would not work with MirConstContext.\n-                        if common::type_is_zero_size(self.ccx, ty) {\n-                            let llty = type_of::type_of(self.ccx, ty);\n-                            return Ok(Const::new(C_null(llty), ty));\n-                        }\n-\n                         let substs = self.monomorphize(&substs);\n                         MirConstContext::trans_def(self.ccx, def_id, substs, IndexVec::new())\n                     }\n@@ -924,13 +920,6 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n         let ty = self.monomorphize(&constant.ty);\n         let result = match constant.literal.clone() {\n             mir::Literal::Item { def_id, substs } => {\n-                // Shortcut for zero-sized types, including function item\n-                // types, which would not work with MirConstContext.\n-                if common::type_is_zero_size(bcx.ccx, ty) {\n-                    let llty = type_of::type_of(bcx.ccx, ty);\n-                    return Const::new(C_null(llty), ty);\n-                }\n-\n                 let substs = self.monomorphize(&substs);\n                 MirConstContext::trans_def(bcx.ccx, def_id, substs, IndexVec::new())\n             }"}, {"sha": "9c62fd486d45a6f7574133a2e5fa387767e27a50", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -4099,6 +4099,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if self.diverges.get().always() {\n+                if let ExpectHasType(ety) = expected {\n+                    // Avoid forcing a type (only `!` for now) in unreachable code.\n+                    // FIXME(aburka) do we need this special case? and should it be is_uninhabited?\n+                    if !ety.is_never() {\n+                        if let Some(ref e) = blk.expr {\n+                            // Coerce the tail expression to the right type.\n+                            self.demand_coerce(e, ty, ety);\n+                        }\n+                    }\n+                }\n+\n                 ty = self.next_diverging_ty_var(TypeVariableOrigin::DivergingBlockExpr(blk.span));\n             } else if let ExpectHasType(ety) = expected {\n                 if let Some(ref e) = blk.expr {"}, {"sha": "5c94032c6b9cf74df6fd754e13e4bd4b4079892a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -1700,6 +1700,23 @@ fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item)\n     Ok(())\n }\n \n+fn name_key(name: &str) -> (&str, u64, usize) {\n+    // find number at end\n+    let split = name.bytes().rposition(|b| b < b'0' || b'9' < b).map_or(0, |s| s + 1);\n+\n+    // count leading zeroes\n+    let after_zeroes =\n+        name[split..].bytes().position(|b| b != b'0').map_or(name.len(), |extra| split + extra);\n+\n+    // sort leading zeroes last\n+    let num_zeroes = after_zeroes - split;\n+\n+    match name[split..].parse() {\n+        Ok(n) => (&name[..split], n, num_zeroes),\n+        Err(_) => (name, 0, num_zeroes),\n+    }\n+}\n+\n fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) -> fmt::Result {\n     document(w, cx, item)?;\n@@ -1744,7 +1761,9 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             (Some(stability::Stable), Some(stability::Unstable)) => return Ordering::Less,\n             _ => {}\n         }\n-        i1.name.cmp(&i2.name)\n+        let lhs = i1.name.as_ref().map_or(\"\", |s| &**s);\n+        let rhs = i2.name.as_ref().map_or(\"\", |s| &**s);\n+        name_key(lhs).cmp(&name_key(rhs))\n     }\n \n     indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n@@ -3198,3 +3217,32 @@ fn test_unique_id() {\n     reset_ids(true);\n     test();\n }\n+\n+#[cfg(test)]\n+#[test]\n+fn test_name_key() {\n+    assert_eq!(name_key(\"0\"), (\"\", 0, 1));\n+    assert_eq!(name_key(\"123\"), (\"\", 123, 0));\n+    assert_eq!(name_key(\"Fruit\"), (\"Fruit\", 0, 0));\n+    assert_eq!(name_key(\"Fruit0\"), (\"Fruit\", 0, 1));\n+    assert_eq!(name_key(\"Fruit0000\"), (\"Fruit\", 0, 4));\n+    assert_eq!(name_key(\"Fruit01\"), (\"Fruit\", 1, 1));\n+    assert_eq!(name_key(\"Fruit10\"), (\"Fruit\", 10, 0));\n+    assert_eq!(name_key(\"Fruit123\"), (\"Fruit\", 123, 0));\n+}\n+\n+#[cfg(test)]\n+#[test]\n+fn test_name_sorting() {\n+    let names = [\"Apple\",\n+                 \"Banana\",\n+                 \"Fruit\", \"Fruit0\", \"Fruit00\",\n+                 \"Fruit1\", \"Fruit01\",\n+                 \"Fruit2\", \"Fruit02\",\n+                 \"Fruit20\",\n+                 \"Fruit100\",\n+                 \"Pear\"];\n+    let mut sorted = names.to_owned();\n+    sorted.sort_by_key(|&s| name_key(s));\n+    assert_eq!(names, sorted);\n+}"}, {"sha": "da5fb1a47333ea1757bfa47845fec5baeca9324f", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -896,15 +896,23 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n-    /// Returns an iterator that copies out each entry. Used while the table\n-    /// is being dropped.\n-    unsafe fn rev_move_buckets(&mut self) -> RevMoveBuckets<K, V> {\n-        let raw_bucket = self.first_bucket_raw();\n-        RevMoveBuckets {\n-            raw: raw_bucket.offset(self.capacity as isize),\n-            hashes_end: raw_bucket.hash,\n-            elems_left: self.size,\n-            marker: marker::PhantomData,\n+    /// Drops buckets in reverse order. It leaves the table in an inconsistent\n+    /// state and should only be used for dropping the table's remaining\n+    /// entries. It's used in the implementation of Drop.\n+    unsafe fn rev_drop_buckets(&mut self) {\n+        let first_raw = self.first_bucket_raw();\n+        let mut raw = first_raw.offset(self.capacity as isize);\n+        let mut elems_left = self.size;\n+\n+        while elems_left != 0 {\n+            debug_assert!(raw.hash != first_raw.hash);\n+\n+            raw = raw.offset(-1);\n+\n+            if *raw.hash != EMPTY_BUCKET {\n+                elems_left -= 1;\n+                ptr::drop_in_place(raw.pair as *mut (K, V));\n+            }\n         }\n     }\n \n@@ -964,43 +972,6 @@ impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {\n     }\n }\n \n-/// An iterator that moves out buckets in reverse order. It leaves the table\n-/// in an inconsistent state and should only be used for dropping\n-/// the table's remaining entries. It's used in the implementation of Drop.\n-struct RevMoveBuckets<'a, K, V> {\n-    raw: RawBucket<K, V>,\n-    hashes_end: *mut HashUint,\n-    elems_left: usize,\n-\n-    // As above, `&'a (K,V)` would seem better, but we often use\n-    // 'static for the lifetime, and this is not a publicly exposed\n-    // type.\n-    marker: marker::PhantomData<&'a ()>,\n-}\n-\n-impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {\n-    type Item = (K, V);\n-\n-    fn next(&mut self) -> Option<(K, V)> {\n-        if self.elems_left == 0 {\n-            return None;\n-        }\n-\n-        loop {\n-            debug_assert!(self.raw.hash != self.hashes_end);\n-\n-            unsafe {\n-                self.raw = self.raw.offset(-1);\n-\n-                if *self.raw.hash != EMPTY_BUCKET {\n-                    self.elems_left -= 1;\n-                    return Some(ptr::read(self.raw.pair));\n-                }\n-            }\n-        }\n-    }\n-}\n-\n /// Iterator over shared references to entries in a table.\n pub struct Iter<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'a, K, V>,\n@@ -1227,7 +1198,7 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n         unsafe {\n             if needs_drop::<(K, V)>() {\n                 // avoid linear runtime for types that don't need drop\n-                for _ in self.rev_move_buckets() {}\n+                self.rev_drop_buckets();\n             }\n         }\n "}, {"sha": "d46cf7a26daf06aa5a17b0ebe5d3a724f4d88d00", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -437,7 +437,10 @@ impl Command {\n     /// # Examples\n     ///\n     /// Basic usage:\n+    ///\n     /// ```no_run\n+    /// #![feature(command_envs)]\n+    ///\n     /// use std::process::{Command, Stdio};\n     /// use std::env;\n     /// use std::collections::HashMap;"}, {"sha": "434b795ff31f54404c489ae3491aaaf4a81d4ead", "filename": "src/test/compile-fail/issue-10176.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn g() {\n-    &panic!()\n-}\n-\n fn f() -> isize {\n     (return 1, return 2)\n+//~^ ERROR mismatched types\n+//~| expected type `isize`\n+//~| found type `(_, _)`\n+//~| expected isize, found tuple\n }\n \n fn main() {}", "previous_filename": "src/test/run-pass/inference-changes-39485.rs"}, {"sha": "1cbb7588e17df5e5fdddb3d8f0ff54f5e2608bbf", "filename": "src/test/compile-fail/issue-5500.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    &panic!()\n+    //~^ ERROR mismatched types\n+    //~| expected type `()`\n+    //~| found type `&_`\n+    //~| expected (), found reference\n+}"}, {"sha": "0baaaac26768571ca91c8d118794d0bb2a4d5c50", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_features)]\n-#![allow(unreachable_code)]\n+#![allow(unknown_features)]\n #![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]\n@@ -29,14 +28,14 @@ struct Foo {\n }\n \n fn foo() -> Result<Foo, isize> {\n-    return Ok::<Foo, isize>(Foo {\n+    return Ok(Foo {\n         x: Bar { x: 22 },\n         a: return Err(32)\n     });\n }\n \n fn baz() -> Result<Foo, isize> {\n-    Ok::<Foo, isize>(Foo {\n+    Ok(Foo {\n         x: Bar { x: 22 },\n         a: return Err(32)\n     })"}, {"sha": "a0019e7215c98a4243a059fef2c3116e7decd38d", "filename": "src/test/run-pass/issue-39984.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fissue-39984.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fissue-39984.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-39984.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #39984.\n+//\n+// The key here is that the error type of the `Ok` call ought to be\n+// constrained to `String`, even though it is dead-code.\n+\n+fn main() {}\n+\n+fn t() -> Result<(), String> {\n+    return Err(\"\".into());\n+    Ok(())\n+}"}, {"sha": "9a6ea2272fea7c5ca453595a1c0f3343eed99212", "filename": "src/test/run-pass/project-defer-unification.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c67bd632e961a57863805e5d0a400f97da9b93/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproject-defer-unification.rs?ref=49c67bd632e961a57863805e5d0a400f97da9b93", "patch": "@@ -11,8 +11,6 @@\n // A regression test extracted from image-0.3.11. The point of\n // failure was in `index_colors` below.\n \n-#![allow(unused)]\n-\n use std::ops::{Deref, DerefMut};\n \n #[derive(Copy, Clone)]\n@@ -94,7 +92,7 @@ pub fn index_colors<Pix>(image: &ImageBuffer<Pix, Vec<u8>>)\n                          -> ImageBuffer<Luma<u8>, Vec<u8>>\n where Pix: Pixel<Subpixel=u8> + 'static,\n {\n-    let mut indices: ImageBuffer<Luma<u8>, Vec<u8>> = loop { };\n+    let mut indices: ImageBuffer<_,Vec<_>> = loop { };\n     for (pixel, idx) in image.pixels().zip(indices.pixels_mut()) {\n         // failured occurred here ^^ because we were requiring that we\n         // could project Pixel or Subpixel from `T_indices` (type of"}]}