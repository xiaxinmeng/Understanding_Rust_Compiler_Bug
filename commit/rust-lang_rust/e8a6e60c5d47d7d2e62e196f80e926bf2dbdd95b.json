{"sha": "e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "node_id": "C_kwDOAAsO6NoAKGU4YTZlNjBjNWQ0N2Q3ZDJlNjJlMTk2ZjgwZTkyNmJmMmRiZGQ5NWI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-09T13:56:40Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-13T09:32:24Z"}, "message": "resolve: Add some asserts for unexpected lifetime rib combinations", "tree": {"sha": "e197b80732df19e514dd9fc3ccf103eac3c099a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e197b80732df19e514dd9fc3ccf103eac3c099a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "html_url": "https://github.com/rust-lang/rust/commit/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf5fc58d56adeee42abb7e5059c718b0a86857d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf5fc58d56adeee42abb7e5059c718b0a86857d", "html_url": "https://github.com/rust-lang/rust/commit/3cf5fc58d56adeee42abb7e5059c718b0a86857d"}], "stats": {"total": 127, "additions": 115, "deletions": 12}, "files": [{"sha": "52419b582ec5882bd165811a5df411866970194a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "patch": "@@ -1423,9 +1423,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     } else {\n                                         LifetimeUseSet::Many\n                                     }),\n-                                    LifetimeRibKind::Generics { .. }\n-                                    | LifetimeRibKind::ConstGeneric\n-                                    | LifetimeRibKind::AnonConst => None,\n+                                    LifetimeRibKind::Generics { .. } => None,\n+                                    LifetimeRibKind::ConstGeneric | LifetimeRibKind::AnonConst => {\n+                                        span_bug!(ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n+                                    }\n                                 })\n                                 .unwrap_or(LifetimeUseSet::Many);\n                             debug!(?use_ctxt, ?use_set);\n@@ -1460,7 +1461,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     );\n                     return;\n                 }\n-                _ => {}\n+                LifetimeRibKind::AnonymousCreateParameter { .. }\n+                | LifetimeRibKind::Elided(_)\n+                | LifetimeRibKind::Generics { .. }\n+                | LifetimeRibKind::ElisionFailure\n+                | LifetimeRibKind::AnonymousReportError => {}\n             }\n         }\n \n@@ -1534,9 +1539,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     return;\n                 }\n                 LifetimeRibKind::Item => break,\n-                LifetimeRibKind::Generics { .. }\n-                | LifetimeRibKind::ConstGeneric\n-                | LifetimeRibKind::AnonConst => {}\n+                LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n+                LifetimeRibKind::AnonConst => {\n+                    // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                    span_bug!(lifetime.ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n+                }\n             }\n         }\n         self.record_lifetime_res(lifetime.id, LifetimeRes::Error, elision_candidate);\n@@ -1751,9 +1758,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         self.report_missing_lifetime_specifiers(vec![missing_lifetime], None);\n                         break;\n                     }\n-                    LifetimeRibKind::Generics { .. }\n-                    | LifetimeRibKind::ConstGeneric\n-                    | LifetimeRibKind::AnonConst => {}\n+                    LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n+                    LifetimeRibKind::AnonConst => {\n+                        // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                        span_bug!(elided_lifetime_span, \"unexpected rib kind: {:?}\", rib.kind)\n+                    }\n                 }\n             }\n \n@@ -3938,7 +3947,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         fn_id: NodeId,\n         async_node_id: Option<(NodeId, Span)>,\n     ) {\n-        if let Some((async_node_id, _)) = async_node_id {\n+        if let Some((async_node_id, span)) = async_node_id {\n             let mut extra_lifetime_params =\n                 self.r.extra_lifetime_params_map.get(&fn_id).cloned().unwrap_or_default();\n             for rib in self.lifetime_ribs.iter().rev() {\n@@ -3952,7 +3961,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             extra_lifetime_params.extend(earlier_fresh);\n                         }\n                     }\n-                    _ => {}\n+                    LifetimeRibKind::Generics { .. } => {}\n+                    _ => {\n+                        // We are in a function definition. We should only find `Generics`\n+                        // and `AnonymousCreateParameter` inside the innermost `Item`.\n+                        span_bug!(span, \"unexpected rib kind: {:?}\", rib.kind)\n+                    }\n                 }\n             }\n             self.r.extra_lifetime_params_map.insert(async_node_id, extra_lifetime_params);"}, {"sha": "b4c86aab863c8963edb342e85f86a04b55f606be", "filename": "src/test/ui/lifetimes/unusual-rib-combinations.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "patch": "@@ -0,0 +1,28 @@\n+#![feature(inline_const)]\n+\n+struct S<'a>(&'a u8);\n+fn foo() {}\n+\n+// Paren generic args in AnonConst\n+fn a() -> [u8; foo::()] {\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+//~| ERROR mismatched types\n+    panic!()\n+}\n+\n+// Paren generic args in ConstGeneric\n+fn b<const C: u8()>() {}\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+\n+// Paren generic args in AnonymousReportError\n+fn c<T = u8()>() {}\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+//~| ERROR defaults for type parameters are only allowed in\n+//~| WARN this was previously accepted\n+\n+// Elided lifetime in path in ConstGeneric\n+fn d<const C: S>() {}\n+//~^ ERROR missing lifetime specifier\n+//~| ERROR `S<'static>` is forbidden as the type of a const generic parameter\n+\n+fn main() {}"}, {"sha": "6d7b42506982ce0a53a4e840b5d28a4814c07d65", "filename": "src/test/ui/lifetimes/unusual-rib-combinations.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=e8a6e60c5d47d7d2e62e196f80e926bf2dbdd95b", "patch": "@@ -0,0 +1,61 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/unusual-rib-combinations.rs:24:15\n+   |\n+LL | fn d<const C: S>() {}\n+   |               ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn d<'a, const C: S<'a>>() {}\n+   |      +++           ++++\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:7:16\n+   |\n+LL | fn a() -> [u8; foo::()] {\n+   |                ^^^^^^^ only `Fn` traits may use parentheses\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:14:15\n+   |\n+LL | fn b<const C: u8()>() {}\n+   |               ^^^^ only `Fn` traits may use parentheses\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:18:10\n+   |\n+LL | fn c<T = u8()>() {}\n+   |          ^^^^ only `Fn` traits may use parentheses\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/unusual-rib-combinations.rs:18:6\n+   |\n+LL | fn c<T = u8()>() {}\n+   |      ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unusual-rib-combinations.rs:7:16\n+   |\n+LL | fn a() -> [u8; foo::()] {\n+   |                ^^^^^^^ expected `usize`, found fn item\n+   |\n+   = note: expected type `usize`\n+           found fn item `fn() {foo}`\n+\n+error: `S<'static>` is forbidden as the type of a const generic parameter\n+  --> $DIR/unusual-rib-combinations.rs:24:15\n+   |\n+LL | fn d<const C: S>() {}\n+   |               ^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0106, E0214, E0308.\n+For more information about an error, try `rustc --explain E0106`."}]}