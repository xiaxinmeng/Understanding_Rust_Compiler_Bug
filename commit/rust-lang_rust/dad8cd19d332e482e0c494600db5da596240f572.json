{"sha": "dad8cd19d332e482e0c494600db5da596240f572", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZDhjZDE5ZDMzMmU0ODJlMGM0OTQ2MDBkYjVkYTU5NjI0MGY1NzI=", "commit": {"author": {"name": "Esption", "email": "esption@gmail.com", "date": "2015-07-09T02:17:13Z"}, "committer": {"name": "Esption", "email": "esption@gmail.com", "date": "2015-07-09T02:17:13Z"}, "message": "'iff' for docs to 'if and only if'", "tree": {"sha": "33492458cae11f159d944c9220ab7fc67fcc2fdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33492458cae11f159d944c9220ab7fc67fcc2fdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dad8cd19d332e482e0c494600db5da596240f572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dad8cd19d332e482e0c494600db5da596240f572", "html_url": "https://github.com/rust-lang/rust/commit/dad8cd19d332e482e0c494600db5da596240f572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dad8cd19d332e482e0c494600db5da596240f572/comments", "author": {"login": "Esption", "id": 6182807, "node_id": "MDQ6VXNlcjYxODI4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6182807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Esption", "html_url": "https://github.com/Esption", "followers_url": "https://api.github.com/users/Esption/followers", "following_url": "https://api.github.com/users/Esption/following{/other_user}", "gists_url": "https://api.github.com/users/Esption/gists{/gist_id}", "starred_url": "https://api.github.com/users/Esption/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Esption/subscriptions", "organizations_url": "https://api.github.com/users/Esption/orgs", "repos_url": "https://api.github.com/users/Esption/repos", "events_url": "https://api.github.com/users/Esption/events{/privacy}", "received_events_url": "https://api.github.com/users/Esption/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Esption", "id": 6182807, "node_id": "MDQ6VXNlcjYxODI4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/6182807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Esption", "html_url": "https://github.com/Esption", "followers_url": "https://api.github.com/users/Esption/followers", "following_url": "https://api.github.com/users/Esption/following{/other_user}", "gists_url": "https://api.github.com/users/Esption/gists{/gist_id}", "starred_url": "https://api.github.com/users/Esption/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Esption/subscriptions", "organizations_url": "https://api.github.com/users/Esption/orgs", "repos_url": "https://api.github.com/users/Esption/repos", "events_url": "https://api.github.com/users/Esption/events{/privacy}", "received_events_url": "https://api.github.com/users/Esption/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "492f33a267d6d99d573b9e0558c25be6e1d03416", "url": "https://api.github.com/repos/rust-lang/rust/commits/492f33a267d6d99d573b9e0558c25be6e1d03416", "html_url": "https://github.com/rust-lang/rust/commit/492f33a267d6d99d573b9e0558c25be6e1d03416"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "42214c2233ac87437820fa06383933884281d3c4", "filename": "src/libbacktrace/aclocal.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Faclocal.m4", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Faclocal.m4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Faclocal.m4?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -88,7 +88,7 @@ _AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n # start a VPATH build or use an absolute $srcdir.\n #\n # So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n-# if we strip the leading $srcdir from $ac_aux_dir.  That would be:\n+# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n #   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n # and then we would define $MISSING as\n #   MISSING=\"\\${SHELL} $am_aux_dir/missing\""}, {"sha": "3736622e67739cf97ea710b95a4fdbd66fbb9921", "filename": "src/libbacktrace/hashtab.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Fhashtab.h", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Fhashtab.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fhashtab.h?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -69,7 +69,7 @@ typedef void (*htab_del) (void *);\n typedef int (*htab_trav) (void **, void *);\n \n /* Memory-allocation function, with the same functionality as calloc().\n-   If it returns NULL, the hash table implementation will pass an error\n+   Iff it returns NULL, the hash table implementation will pass an error\n    code back to the user, so if your code doesn't handle errors,\n    best if you use xcalloc instead.  */\n typedef void *(*htab_alloc) (size_t, size_t);"}, {"sha": "84f5be9249e7caae28e6c16faccaba9f84096f12", "filename": "src/libbacktrace/ltmain.sh", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Fltmain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibbacktrace%2Fltmain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fltmain.sh?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -1059,7 +1059,7 @@ $opt_help || {\n \n \n # func_lalib_p file\n-# True if FILE is a libtool `.la' library or `.lo' object file.\n+# True iff FILE is a libtool `.la' library or `.lo' object file.\n # This function is only a basic sanity check; it will hardly flush out\n # determined imposters.\n func_lalib_p ()\n@@ -1070,7 +1070,7 @@ func_lalib_p ()\n }\n \n # func_lalib_unsafe_p file\n-# True if FILE is a libtool `.la' library or `.lo' object file.\n+# True iff FILE is a libtool `.la' library or `.lo' object file.\n # This function implements the same check as func_lalib_p without\n # resorting to external programs.  To this end, it redirects stdin and\n # closes it afterwards, without saving the original file descriptor.\n@@ -1093,7 +1093,7 @@ func_lalib_unsafe_p ()\n }\n \n # func_ltwrapper_script_p file\n-# True if FILE is a libtool wrapper script\n+# True iff FILE is a libtool wrapper script\n # This function is only a basic sanity check; it will hardly flush out\n # determined imposters.\n func_ltwrapper_script_p ()\n@@ -1102,7 +1102,7 @@ func_ltwrapper_script_p ()\n }\n \n # func_ltwrapper_executable_p file\n-# True if FILE is a libtool wrapper executable\n+# True iff FILE is a libtool wrapper executable\n # This function is only a basic sanity check; it will hardly flush out\n # determined imposters.\n func_ltwrapper_executable_p ()\n@@ -1130,7 +1130,7 @@ func_ltwrapper_scriptname ()\n }\n \n # func_ltwrapper_p file\n-# True if FILE is a libtool wrapper script or wrapper executable\n+# True iff FILE is a libtool wrapper script or wrapper executable\n # This function is only a basic sanity check; it will hardly flush out\n # determined imposters.\n func_ltwrapper_p ()"}, {"sha": "117b3544f0269a68cc6c86fbd24dea7e0986534c", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -108,7 +108,7 @@ impl<T> VecDeque<T> {\n         ptr::write(self.ptr.offset(off as isize), t);\n     }\n \n-    /// Returns true if the buffer is at capacity\n+    /// Returns true if and only if the buffer is at capacity\n     #[inline]\n     fn is_full(&self) -> bool { self.cap - self.len() == 1 }\n "}, {"sha": "3fd3d4a42b208adf61a6b997264227cfce5c709f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -1126,7 +1126,7 @@ macro_rules! uint_impl {\n             acc\n         }\n \n-        /// Returns `true` if `self == 2^k` for some `k`.\n+        /// Returns `true` if and only if `self == 2^k` for some `k`.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn is_power_of_two(self) -> bool {"}, {"sha": "707f7fcf2abcf9c85de792b22bd3d8232f88d8ec", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -739,7 +739,7 @@ struct TwoWaySearcher {\n     (We also allow for the possibility of the *empty word*, a word of length zero).\n \n     If x is any non-empty word, then an integer p with 0 < p <= |x| is said to be a\n-    *period* for x if for all i with 0 <= i <= |x| - p - 1, we have x[i] == x[i+p].\n+    *period* for x iff for all i with 0 <= i <= |x| - p - 1, we have x[i] == x[i+p].\n     For example, both 1 and 2 are periods for the string \"aa\". As another example,\n     the only period of the string \"abcd\" is 4.\n "}, {"sha": "2951563934b3c412d273bf4ef91394806fbb41ee", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -147,7 +147,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n         loop {\n             let StandardNormal(x) = rng.gen::<StandardNormal>();\n             let v_cbrt = 1.0 + self.c * x;\n-            if v_cbrt <= 0.0 { // a^3 <= 0 if a <= 0\n+            if v_cbrt <= 0.0 { // a^3 <= 0 iff a <= 0\n                 continue\n             }\n "}, {"sha": "715072a12ebd041da5a5f64d05a8320d71bcf5ad", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -509,9 +509,9 @@ pub struct ItemVariances {\n \n #[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Copy)]\n pub enum Variance {\n-    Covariant,      // T<A> <: T<B> if A <: B -- e.g., function return type\n-    Invariant,      // T<A> <: T<B> if B == A -- e.g., type of mutable cell\n-    Contravariant,  // T<A> <: T<B> if B <: A -- e.g., function param type\n+    Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n+    Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n+    Contravariant,  // T<A> <: T<B> iff B <: A -- e.g., function param type\n     Bivariant,      // T<A> <: T<B>            -- e.g., unused type parameter\n }\n "}, {"sha": "162bf6ed9a97f5dbfb6c8393fb51b299e812249c", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -145,7 +145,7 @@ impl<'v, P> Visitor<'v> for LoopQueryVisitor<P> where P: FnMut(&ast::Expr_) -> b\n     }\n }\n \n-// Takes a predicate p, returns true if p is true for any subexpressions\n+// Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n pub fn loop_query<P>(b: &ast::Block, p: P) -> bool where P: FnMut(&ast::Expr_) -> bool {\n     let mut v = LoopQueryVisitor {\n@@ -168,7 +168,7 @@ impl<'v, P> Visitor<'v> for BlockQueryVisitor<P> where P: FnMut(&ast::Expr) -> b\n     }\n }\n \n-// Takes a predicate p, returns true if p is true for any subexpressions\n+// Takes a predicate p, returns true iff p is true for any subexpressions\n // of b -- skipping any inner loops (loop, while, loop_body)\n pub fn block_query<P>(b: &ast::Block, p: P) -> bool where P: FnMut(&ast::Expr) -> bool {\n     let mut v = BlockQueryVisitor {"}, {"sha": "5cfbd59d3336881ecc0e6d450ae8198e338c3af4", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -877,7 +877,7 @@ Thus the presence of an assignment bit indicates that the assignment\n may have occurred. Note that assignments are only killed when the\n variable goes out of scope, as it is not relevant whether or not there\n has been a move in the meantime. Using these bits, we can declare that\n-an assignment to an immutable variable is legal if there is no other\n+an assignment to an immutable variable is legal iff there is no other\n assignment bit to that same variable in scope.\n \n ## Why is the design made this way?"}, {"sha": "d90e5a033a187bb90de3360811dc61e3d7450f99", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -1319,7 +1319,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n                 // miscellaneous info about the impl\n \n-                // `true` if this is `impl Private for ...`.\n+                // `true` iff this is `impl Private for ...`.\n                 let not_private_trait =\n                     trait_ref.as_ref().map_or(true, // no trait counts as public trait\n                                               |tr| {\n@@ -1328,7 +1328,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                         !is_local(did) || self.trait_is_public(did.node)\n                     });\n \n-                // `true` if this is a trait impl or at least one method is public.\n+                // `true` iff this is a trait impl or at least one method is public.\n                 //\n                 // `impl Public { $( fn ...() {} )* }` is not visible.\n                 //"}, {"sha": "c1f9725fc8134191721eb1e0b52a24b50a98a1a0", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -216,7 +216,7 @@\n //! this case, because the `Self` parameter is contravariant and `A` is\n //! covariant, it means that:\n //!\n-//!     V_O <: V_S if\n+//!     V_O <: V_S iff\n //!         int <: int\n //!         String <: Object\n //!"}, {"sha": "b0fadb56f36ac7db9ff0a9c8dd6a77de80bf3b31", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -104,7 +104,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    // Return char and advance if next char is equal to requested\n+    // Return char and advance iff next char is equal to requested\n     fn read_given_char(&mut self, c: char) -> Option<char> {\n         self.read_atomically(|p| {\n             match p.read_char() {"}, {"sha": "5521c68e75c6950f513c3519411d009983f1f490", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -321,7 +321,7 @@ pub fn parse(sess: &ParseSess,\n             if idx >= len {\n                 // can't move out of `match`es, so:\n                 if ei.up.is_some() {\n-                    // hack: a matcher sequence is repeating if it has a\n+                    // hack: a matcher sequence is repeating iff it has a\n                     // parent (the top level is just a container)\n \n "}, {"sha": "a79249ade4f5ccd9185ef7cee6f9d590f4c1080a", "filename": "src/test/compile-fail/regions-variance-contravariant-use-covariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Fcompile-fail%2Fregions-variance-contravariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Fcompile-fail%2Fregions-variance-contravariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-variance-contravariant-use-covariant.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -15,7 +15,7 @@\n // variance inference works in the first place.\n \n // This is contravariant with respect to 'a, meaning that\n-// Contravariant<'long> <: Contravariant<'short> if\n+// Contravariant<'long> <: Contravariant<'short> iff\n // 'short <= 'long\n struct Contravariant<'a> {\n     f: &'a isize"}, {"sha": "e22e4767d521fd78fa9437d1e4cf980c7549f9b9", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -10,7 +10,7 @@\n \n // check that the derived impls for the comparison traits shortcircuit\n // where possible, by having a type that panics when compared as the\n-// second element, so this passes if the instances shortcircuit.\n+// second element, so this passes iff the instances shortcircuit.\n \n \n use std::cmp::Ordering;"}, {"sha": "02562781373a88e0da179a617ca0442317eb4fa0", "filename": "src/test/run-pass/regions-variance-covariant-use-covariant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Frun-pass%2Fregions-variance-covariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dad8cd19d332e482e0c494600db5da596240f572/src%2Ftest%2Frun-pass%2Fregions-variance-covariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-variance-covariant-use-covariant.rs?ref=dad8cd19d332e482e0c494600db5da596240f572", "patch": "@@ -24,7 +24,7 @@ struct Covariant<'a> {\n }\n \n fn use_<'a>(c: Covariant<'a>) {\n-    // OK Because Covariant<'a> <: Covariant<'static> if 'a <= 'static\n+    // OK Because Covariant<'a> <: Covariant<'static> iff 'a <= 'static\n     let _: Covariant<'static> = c;\n }\n "}]}