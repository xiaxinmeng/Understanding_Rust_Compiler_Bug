{"sha": "eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "node_id": "C_kwDOAAsO6NoAKGVlZmM0NGI3ZTJlNjY1N2M3ZjBmMjE0YTA3MDdhZWM4MzQ0MmM1Yzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-09T03:57:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T03:57:54Z"}, "message": "Rollup merge of #106497 - chenyukang:yukang/fix-106443-sugg-clone, r=estebank\n\nSuggest using clone when we have &T and T implemented Clone\n\nFixes #106443", "tree": {"sha": "d15f177fd115584d57acaab83c71d9c6d07a2cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15f177fd115584d57acaab83c71d9c6d07a2cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJju5DCCRBK7hj4Ov3rIwAA5yEIAIYD6/v6EK3L1/NPgXAWFDX3\ndigXTnkQ8BjJM6OZbfjrWfGU/X0+1J89XmEAabGwWx/41nDRglCIUiDCiOFw0jVb\nzqLLEkEl+KUZiiZ3RwPb7DCol+CFKF542hbAz+MJs7/fjvjS62BPceoeMMjcmq+h\navJHKOobst2pwspM2d5E142INl2ZYEHWv1GENldBLHEwsOHxwxqazO8yk7JdQo8c\n2kZ/5G8hOvPrYjmnzIgRrtWVqJX73sXu3J7erWvadPLCrZ1SERc8SgEJSD9XwffZ\niHe5upEfLTaVVQAvNPBUWfm3gCMtDqkaAzo52TI6xi4ipABODLTHtb7ce1BwKmM=\n=BtCr\n-----END PGP SIGNATURE-----\n", "payload": "tree d15f177fd115584d57acaab83c71d9c6d07a2cd6\nparent 334426b7a8768faa9559c2578f4ababa40f7f649\nparent 0e570e58f2cf465f254b7e6c56584ec732a77dbc\nauthor Michael Goulet <michael@errs.io> 1673236674 -0800\ncommitter GitHub <noreply@github.com> 1673236674 -0800\n\nRollup merge of #106497 - chenyukang:yukang/fix-106443-sugg-clone, r=estebank\n\nSuggest using clone when we have &T and T implemented Clone\n\nFixes #106443\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "html_url": "https://github.com/rust-lang/rust/commit/eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "334426b7a8768faa9559c2578f4ababa40f7f649", "url": "https://api.github.com/repos/rust-lang/rust/commits/334426b7a8768faa9559c2578f4ababa40f7f649", "html_url": "https://github.com/rust-lang/rust/commit/334426b7a8768faa9559c2578f4ababa40f7f649"}, {"sha": "0e570e58f2cf465f254b7e6c56584ec732a77dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e570e58f2cf465f254b7e6c56584ec732a77dbc", "html_url": "https://github.com/rust-lang/rust/commit/0e570e58f2cf465f254b7e6c56584ec732a77dbc"}], "stats": {"total": 201, "additions": 200, "deletions": 1}, "files": [{"sha": "f68a428d09ae3ba4b1d7f4e5043d7c0b71bc064c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -57,6 +57,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n+            || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected);\n         if !suggested {"}, {"sha": "236bdc60e677d8899dc0415b68d0fe206d5d89d0", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -1014,6 +1014,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn suggest_clone_for_ref(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if let ty::Ref(_, inner_ty, hir::Mutability::Not) = expr_ty.kind()\n+            && let Some(clone_trait_def) = self.tcx.lang_items().clone_trait()\n+            && expected_ty == *inner_ty\n+            && self\n+                .infcx\n+                .type_implements_trait(\n+                    clone_trait_def,\n+                    [self.tcx.erase_regions(expected_ty)],\n+                    self.param_env\n+                )\n+                .must_apply_modulo_regions()\n+          {\n+              diag.span_suggestion_verbose(\n+                  expr.span.shrink_to_hi(),\n+                  \"consider using clone here\",\n+                  \".clone()\",\n+                  Applicability::MachineApplicable,\n+              );\n+              return true;\n+          }\n+        false\n+    }\n+\n     pub(crate) fn suggest_copied_or_cloned(\n         &self,\n         diag: &mut Diagnostic,"}, {"sha": "9c098e1a2fc12b6beaee3ce595e38a714b367a41", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -873,6 +873,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             );\n                         }\n \n+                        if self.suggest_add_clone_to_arg(&obligation, &mut err, trait_predicate) {\n+                            err.emit();\n+                            return;\n+                        }\n+\n                         if self.suggest_impl_trait(&mut err, span, &obligation, trait_predicate) {\n                             err.emit();\n                             return;"}, {"sha": "c52365ae3b7c7309cc90bd44db5de64e07573482", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -10,7 +10,7 @@ use crate::infer::InferCtxt;\n use crate::traits::{NormalizeExt, ObligationCtxt};\n \n use hir::def::CtorOf;\n-use hir::HirId;\n+use hir::{Expr, HirId};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n@@ -206,6 +206,13 @@ pub trait TypeErrCtxtExt<'tcx> {\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n \n+    fn suggest_add_clone_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) -> bool;\n+\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -1102,6 +1109,55 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    fn suggest_add_clone_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut Diagnostic,\n+        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    ) -> bool {\n+        let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n+        let ty = self.tcx.erase_late_bound_regions(self_ty);\n+        let owner = self.tcx.hir().get_parent_item(obligation.cause.body_id);\n+        let Some(generics) = self.tcx.hir().get_generics(owner.def_id) else { return false };\n+        let ty::Ref(_, inner_ty, hir::Mutability::Not) = ty.kind() else { return false };\n+        let ty::Param(param) = inner_ty.kind() else { return false };\n+        let ObligationCauseCode::FunctionArgumentObligation { arg_hir_id, .. } = obligation.cause.code() else { return false };\n+        let arg_node = self.tcx.hir().get(*arg_hir_id);\n+        let Node::Expr(Expr { kind: hir::ExprKind::Path(_), ..}) = arg_node else { return false };\n+\n+        let clone_trait = self.tcx.require_lang_item(LangItem::Clone, None);\n+        let has_clone = |ty| {\n+            self.type_implements_trait(clone_trait, [ty], obligation.param_env)\n+                .must_apply_modulo_regions()\n+        };\n+\n+        let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+            obligation.param_env,\n+            trait_pred.map_bound(|trait_pred| (trait_pred, *inner_ty)),\n+        );\n+\n+        if self.predicate_may_hold(&new_obligation) && has_clone(ty) {\n+            if !has_clone(param.to_ty(self.tcx)) {\n+                suggest_constraining_type_param(\n+                    self.tcx,\n+                    generics,\n+                    err,\n+                    param.name.as_str(),\n+                    \"Clone\",\n+                    Some(clone_trait),\n+                );\n+            }\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_hi(),\n+                \"consider using clone here\",\n+                \".clone()\".to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            return true;\n+        }\n+        false\n+    }\n+\n     fn suggest_add_reference_to_arg(\n         &self,\n         obligation: &PredicateObligation<'tcx>,"}, {"sha": "48efdb82c46ca6bd67688cc3e87047c18923d595", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -0,0 +1,23 @@\n+#[derive(Clone)]\n+struct S;\n+\n+// without Clone\n+struct T;\n+\n+fn foo(_: S) {}\n+\n+fn test1() {\n+    let s = &S;\n+    foo(s); //~ ERROR mismatched types\n+}\n+\n+fn bar(_: T) {}\n+fn test2() {\n+    let t = &T;\n+    bar(t); //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    test1();\n+    test2();\n+}"}, {"sha": "1e66fe3af2414a01a39015fe05c49b4aad931c30", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-arg.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-arg.stderr?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -0,0 +1,35 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:11:9\n+   |\n+LL |     foo(s);\n+   |     --- ^ expected struct `S`, found `&S`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:7:4\n+   |\n+LL | fn foo(_: S) {}\n+   |    ^^^ ----\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:17:9\n+   |\n+LL |     bar(t);\n+   |     --- ^ expected struct `T`, found `&T`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/issue-106443-sugg-clone-for-arg.rs:14:4\n+   |\n+LL | fn bar(_: T) {}\n+   |    ^^^ ----\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3b2e316b2961e7d3e2e437ebb8eb0a550c1d9286", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.rs?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -0,0 +1,20 @@\n+#[derive(Clone)]\n+struct S;\n+\n+trait X {}\n+\n+impl X for S {}\n+\n+fn foo<T: X>(_: T) {}\n+fn bar<T: X>(s: &T) {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn bar_with_clone<T: X + Clone>(s: &T) {\n+    foo(s); //~ ERROR the trait bound `&T: X` is not satisfied\n+}\n+\n+fn main() {\n+    let s = &S;\n+    bar(s);\n+}"}, {"sha": "8607917ede6bf10f6d1433ad3b94944e15857ad3", "filename": "src/test/ui/suggestions/issue-106443-sugg-clone-for-bound.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eefc44b7e2e6657c7f0f214a0707aec83442c5c8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-106443-sugg-clone-for-bound.stderr?ref=eefc44b7e2e6657c7f0f214a0707aec83442c5c8", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:10:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | fn bar<T: X + Clone>(s: &T) {\n+   |             +++++++\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error[E0277]: the trait bound `&T: X` is not satisfied\n+  --> $DIR/issue-106443-sugg-clone-for-bound.rs:14:9\n+   |\n+LL |     foo(s);\n+   |         ^ the trait `X` is not implemented for `&T`\n+   |\n+help: consider using clone here\n+   |\n+LL |     foo(s.clone());\n+   |          ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}