{"sha": "2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc", "node_id": "C_kwDOAAsO6NoAKDJlNDcyYmI3NDZhNzNkMzQ0MGViYmRmMTFmYjlhY2E0ZDU2ZGQzY2M", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2022-01-03T10:20:59Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2022-01-03T13:07:34Z"}, "message": "Fix replace_match_with_if_let removing blocks with modifiers\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c3c879424b7609ad702904d7355376832eb3e417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c879424b7609ad702904d7355376832eb3e417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc", "html_url": "https://github.com/rust-lang/rust/commit/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9ccbf97a70259b6c6576e8fd7d77d28238737e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9ccbf97a70259b6c6576e8fd7d77d28238737e", "html_url": "https://github.com/rust-lang/rust/commit/8e9ccbf97a70259b6c6576e8fd7d77d28238737e"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "77909347927802a2702982a2deb6c9f70d8e319e", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=2e472bb746a73d3440ebbdf11fb9aca4d56dd3cc", "patch": "@@ -207,21 +207,23 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext)\n         \"Replace match with if let\",\n         target,\n         move |edit| {\n+            fn make_block_expr(expr: ast::Expr) -> ast::BlockExpr {\n+                // Blocks with modifiers (unsafe, async, etc.) are parsed as BlockExpr, but are\n+                // formatted without enclosing braces. If we encounter such block exprs,\n+                // wrap them in another BlockExpr.\n+                match expr {\n+                    ast::Expr::BlockExpr(block) if block.modifier().is_none() => block,\n+                    expr => make::block_expr(iter::empty(), Some(expr)),\n+                }\n+            }\n+\n             let condition = make::condition(scrutinee, Some(if_let_pat));\n-            let then_block = match then_expr.reset_indent() {\n-                ast::Expr::BlockExpr(block) => block,\n-                expr => make::block_expr(iter::empty(), Some(expr)),\n-            };\n+            let then_block = make_block_expr(then_expr.reset_indent());\n             let else_expr = if is_empty_expr(&else_expr) { None } else { Some(else_expr) };\n             let if_let_expr = make::expr_if(\n                 condition,\n                 then_block,\n-                else_expr\n-                    .map(|expr| match expr {\n-                        ast::Expr::BlockExpr(block) => block,\n-                        expr => (make::block_expr(iter::empty(), Some(expr))),\n-                    })\n-                    .map(ast::ElseBranch::Block),\n+                else_expr.map(make_block_expr).map(ast::ElseBranch::Block),\n             )\n             .indent(IndentLevel::from_node(match_expr.syntax()));\n \n@@ -917,4 +919,30 @@ fn foo() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn test_replace_match_with_if_let_keeps_unsafe_block() {\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        $0match *self {\n+            VariantData::Struct(..) => true,\n+            _ => unsafe { unreachable_unchecked() },\n+        }\n+    }\n+}           \"#,\n+            r#\"\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            unsafe { unreachable_unchecked() }\n+        }\n+    }\n+}           \"#,\n+        )\n+    }\n }"}]}