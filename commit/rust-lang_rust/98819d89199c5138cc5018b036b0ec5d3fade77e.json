{"sha": "98819d89199c5138cc5018b036b0ec5d3fade77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODE5ZDg5MTk5YzUxMzhjYzUwMThiMDM2YjBlYzVkM2ZhZGU3N2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-18T17:56:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-18T17:56:54Z"}, "message": "Merge #4029\n\n4029: Fix various proc-macro bugs r=matklad a=edwin0cheng\n\nThis PRs does the following things:\r\n\r\n1. Fixed #4001 by splitting `LIFETIME` lexer token to two mbe tokens. It is because rustc token stream expects `LIFETIME` as a combination of punct and ident, but RA `tt:TokenTree` treats it as a single `Ident` previously.\r\n2. Fixed #4003, by skipping `proc-macro` for completion. It is because currently we don't have `AstNode` for `proc-macro`. We would need to redesign how to implement `HasSource` for `proc-macro`.\r\n3.  Fixed a bug how empty `TokenStream` merging in `proc-macro-srv` such that no L_DOLLAR and R_DOLLAR will be emitted accidentally. \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "77b293ab5eb3a99f70082efe9cb66784f71f3343", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b293ab5eb3a99f70082efe9cb66784f71f3343"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98819d89199c5138cc5018b036b0ec5d3fade77e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemz9mCRBK7hj4Ov3rIwAAdHIIAASB18HKtZAll7eTrRnP6mvU\nBGHNIm3S/znDzKDhzfQ9TqYj3CQ109erlBJaxaM6GFpbzv63cOLyIDQO/BefcRKZ\nG7O5X7Luwh3fgH/vi0H73SKtoz3tb4rCp7nVM+E2+1iMpcgCK4FI/x/S74WLH6v1\nPm6HAf3C5oYOXUyNsgkVPZaAqGSdsHTQzneLlo5CzM6xxtR74csjlycTA+IqA0t9\ndpMdAdoEjS1YL2CvGWRDvbjCo1y1EnfQvkCvc1Gr5njIizF1IGKV74z/5QC0s1Bp\ndcZ4TpzjKZ/tUE4kO+Is7+l90HRh2dfnJ2BRVvv0DysPiQ6WuoJ1jbjcUl+riIk=\n=l/qM\n-----END PGP SIGNATURE-----\n", "payload": "tree 77b293ab5eb3a99f70082efe9cb66784f71f3343\nparent 84e3304a9bf0d68e30d58b1e37a6db2e9ec97525\nparent 72bba9882889b2e20fd91e3c6c3a97debbbe6543\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587232614 +0000\ncommitter GitHub <noreply@github.com> 1587232614 +0000\n\nMerge #4029\n\n4029: Fix various proc-macro bugs r=matklad a=edwin0cheng\n\nThis PRs does the following things:\r\n\r\n1. Fixed #4001 by splitting `LIFETIME` lexer token to two mbe tokens. It is because rustc token stream expects `LIFETIME` as a combination of punct and ident, but RA `tt:TokenTree` treats it as a single `Ident` previously.\r\n2. Fixed #4003, by skipping `proc-macro` for completion. It is because currently we don't have `AstNode` for `proc-macro`. We would need to redesign how to implement `HasSource` for `proc-macro`.\r\n3.  Fixed a bug how empty `TokenStream` merging in `proc-macro-srv` such that no L_DOLLAR and R_DOLLAR will be emitted accidentally. \r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98819d89199c5138cc5018b036b0ec5d3fade77e", "html_url": "https://github.com/rust-lang/rust/commit/98819d89199c5138cc5018b036b0ec5d3fade77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98819d89199c5138cc5018b036b0ec5d3fade77e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e3304a9bf0d68e30d58b1e37a6db2e9ec97525", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e3304a9bf0d68e30d58b1e37a6db2e9ec97525", "html_url": "https://github.com/rust-lang/rust/commit/84e3304a9bf0d68e30d58b1e37a6db2e9ec97525"}, {"sha": "72bba9882889b2e20fd91e3c6c3a97debbbe6543", "url": "https://api.github.com/repos/rust-lang/rust/commits/72bba9882889b2e20fd91e3c6c3a97debbbe6543", "html_url": "https://github.com/rust-lang/rust/commit/72bba9882889b2e20fd91e3c6c3a97debbbe6543"}], "stats": {"total": 134, "additions": 117, "deletions": 17}, "files": [{"sha": "6e0d89466bdbf14424fbbb8680301e9521b4f51c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -759,6 +759,17 @@ impl MacroDef {\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         self.source(db).value.name().map(|it| it.as_name())\n     }\n+\n+    /// Indicate it is a proc-macro\n+    pub fn is_proc_macro(&self) -> bool {\n+        match self.id.kind {\n+            hir_expand::MacroDefKind::Declarative => false,\n+            hir_expand::MacroDefKind::BuiltIn(_) => false,\n+            hir_expand::MacroDefKind::BuiltInDerive(_) => false,\n+            hir_expand::MacroDefKind::BuiltInEager(_) => false,\n+            hir_expand::MacroDefKind::CustomDerive(_) => true,\n+        }\n+    }\n }\n \n /// Invariant: `inner.as_assoc_item(db).is_some()`"}, {"sha": "2189cef658e3fc5b1aed2174eb70a7250edf84f5", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -156,6 +156,12 @@ impl Completions {\n         name: Option<String>,\n         macro_: hir::MacroDef,\n     ) {\n+        // FIXME: Currently proc-macro do not have ast-node,\n+        // such that it does not have source\n+        if macro_.is_proc_macro() {\n+            return;\n+        }\n+\n         let name = match name {\n             Some(it) => it,\n             None => return,"}, {"sha": "9485c62b839a9fe2c9f3b4781c99d36577d8de43", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -202,6 +202,13 @@ impl<'a> TtIter<'a> {\n     }\n \n     pub(crate) fn expect_tt(&mut self) -> Result<tt::TokenTree, ()> {\n+        match self.peek_n(0) {\n+            Some(tt::TokenTree::Leaf(tt::Leaf::Punct(punct))) if punct.char == '\\'' => {\n+                return self.expect_lifetime();\n+            }\n+            _ => (),\n+        }\n+\n         let tt = self.next().ok_or_else(|| ())?.clone();\n         let punct = match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.spacing == tt::Spacing::Joint => {\n@@ -255,13 +262,21 @@ impl<'a> TtIter<'a> {\n         }\n     }\n \n-    pub(crate) fn expect_lifetime(&mut self) -> Result<&tt::Ident, ()> {\n-        let ident = self.expect_ident()?;\n-        // check if it start from \"`\"\n-        if !ident.text.starts_with('\\'') {\n+    pub(crate) fn expect_lifetime(&mut self) -> Result<tt::TokenTree, ()> {\n+        let punct = self.expect_punct()?;\n+        if punct.char != '\\'' {\n             return Err(());\n         }\n-        Ok(ident)\n+        let ident = self.expect_ident()?;\n+\n+        Ok(tt::Subtree {\n+            delimiter: None,\n+            token_trees: vec![\n+                tt::Leaf::Punct(punct.clone()).into(),\n+                tt::Leaf::Ident(ident.clone()).into(),\n+            ],\n+        }\n+        .into())\n     }\n \n     pub(crate) fn expect_fragment(\n@@ -274,7 +289,10 @@ impl<'a> TtIter<'a> {\n         }\n \n         impl<'a> TreeSink for OffsetTokenSink<'a> {\n-            fn token(&mut self, _kind: SyntaxKind, n_tokens: u8) {\n+            fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n+                if kind == SyntaxKind::LIFETIME {\n+                    n_tokens = 2;\n+                }\n                 for _ in 0..n_tokens {\n                     self.cursor = self.cursor.bump_subtree();\n                 }\n@@ -286,7 +304,7 @@ impl<'a> TtIter<'a> {\n             }\n         }\n \n-        let buffer = TokenBuffer::new(self.inner.as_slice());\n+        let buffer = TokenBuffer::new(&self.inner.as_slice());\n         let mut src = SubtreeTokenSource::new(&buffer);\n         let mut sink = OffsetTokenSink { cursor: buffer.begin(), error: false };\n \n@@ -422,7 +440,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                 \"tt\" => input.expect_tt().map(Some).map_err(|()| err!()),\n                 \"lifetime\" => input\n                     .expect_lifetime()\n-                    .map(|ident| Some(tt::Leaf::Ident(ident.clone()).into()))\n+                    .map(|tt| Some(tt))\n                     .map_err(|()| err!(\"expected lifetime\")),\n                 \"literal\" => input\n                     .expect_literal()"}, {"sha": "46791efaaefba4cb21c31159133ac803cf5d50f1", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -50,6 +50,26 @@ impl<'a> SubtreeTokenSource<'a> {\n     }\n \n     fn get(&self, pos: usize) -> Ref<Option<TtToken>> {\n+        fn is_lifetime(c: Cursor) -> Option<(Cursor, SmolStr)> {\n+            let tkn = c.token_tree();\n+\n+            if let Some(tt::TokenTree::Leaf(tt::Leaf::Punct(punct))) = tkn {\n+                if punct.char == '\\'' {\n+                    let next = c.bump();\n+                    if let Some(tt::TokenTree::Leaf(tt::Leaf::Ident(ident))) = next.token_tree() {\n+                        let res_cursor = next.bump();\n+                        let text = SmolStr::new(\"'\".to_string() + &ident.to_string());\n+\n+                        return Some((res_cursor, text));\n+                    } else {\n+                        panic!(\"Next token must be ident : {:#?}\", next.token_tree());\n+                    }\n+                }\n+            }\n+\n+            None\n+        }\n+\n         if pos < self.cached.borrow().len() {\n             return Ref::map(self.cached.borrow(), |c| &c[pos]);\n         }\n@@ -63,6 +83,12 @@ impl<'a> SubtreeTokenSource<'a> {\n                     continue;\n                 }\n \n+                if let Some((curr, text)) = is_lifetime(cursor) {\n+                    cached.push(Some(TtToken { kind: LIFETIME, is_joint_to_next: false, text }));\n+                    self.cached_cursor.set(curr);\n+                    continue;\n+                }\n+\n                 match cursor.token_tree() {\n                     Some(tt::TokenTree::Leaf(leaf)) => {\n                         cached.push(Some(convert_leaf(&leaf)));\n@@ -152,7 +178,11 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n }\n \n fn convert_punct(p: tt::Punct) -> TtToken {\n-    let kind = SyntaxKind::from_char(p.char).unwrap();\n+    let kind = match SyntaxKind::from_char(p.char) {\n+        None => panic!(\"{:#?} is not a valid punct\", p),\n+        Some(kind) => kind,\n+    };\n+\n     let text = {\n         let mut buf = [0u8; 4];\n         let s: &str = p.char.encode_utf8(&mut buf);"}, {"sha": "70899bc5d93fa760a9195e8d188e32dc5e76fe50", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -271,7 +271,7 @@ struct RawConvertor<'a> {\n     inner: std::slice::Iter<'a, RawToken>,\n }\n \n-trait SrcToken {\n+trait SrcToken: std::fmt::Debug {\n     fn kind(&self) -> SyntaxKind;\n \n     fn to_char(&self) -> Option<char>;\n@@ -361,8 +361,12 @@ trait TokenConvertor {\n                     Some(next) if next.kind().is_punct() => tt::Spacing::Joint,\n                     _ => tt::Spacing::Alone,\n                 };\n-                let char = token.to_char().expect(\"Token from lexer must be single char\");\n-\n+                let char = match token.to_char() {\n+                    Some(c) => c,\n+                    None => {\n+                        panic!(\"Token from lexer must be single char: token = {:#?}\", token);\n+                    }\n+                };\n                 tt::Leaf::from(tt::Punct { char, spacing, id: self.id_alloc().alloc(range) }).into()\n             }\n         } else {\n@@ -373,9 +377,28 @@ trait TokenConvertor {\n             }\n             let leaf: tt::Leaf = match k {\n                 T![true] | T![false] => make_leaf!(Literal),\n-                IDENT | LIFETIME => make_leaf!(Ident),\n+                IDENT => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n                 k if k.is_literal() => make_leaf!(Literal),\n+                LIFETIME => {\n+                    let char_unit = TextUnit::from_usize(1);\n+                    let r = TextRange::offset_len(range.start(), char_unit);\n+                    let apostrophe = tt::Leaf::from(tt::Punct {\n+                        char: '\\'',\n+                        spacing: tt::Spacing::Joint,\n+                        id: self.id_alloc().alloc(r),\n+                    });\n+                    result.push(apostrophe.into());\n+\n+                    let r =\n+                        TextRange::offset_len(range.start() + char_unit, range.len() - char_unit);\n+                    let ident = tt::Leaf::from(tt::Ident {\n+                        text: SmolStr::new(&token.to_text()[1..]),\n+                        id: self.id_alloc().alloc(r),\n+                    });\n+                    result.push(ident.into());\n+                    return;\n+                }\n                 _ => return,\n             };\n \n@@ -455,6 +478,7 @@ impl Convertor {\n     }\n }\n \n+#[derive(Debug)]\n enum SynToken {\n     Ordiniary(SyntaxToken),\n     Punch(SyntaxToken, TextUnit),\n@@ -592,11 +616,14 @@ fn delim_to_str(d: Option<tt::DelimiterKind>, closing: bool) -> SmolStr {\n }\n \n impl<'a> TreeSink for TtTreeSink<'a> {\n-    fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n+    fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n         if kind == L_DOLLAR || kind == R_DOLLAR {\n             self.cursor = self.cursor.bump_subtree();\n             return;\n         }\n+        if kind == LIFETIME {\n+            n_tokens = 2;\n+        }\n \n         let mut last = self.cursor;\n         for _ in 0..n_tokens {"}, {"sha": "9fcfdc4504c9fbec86e8f455db878338081da478", "filename": "crates/ra_proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Frustc_server.rs?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -76,7 +76,16 @@ impl Extend<TokenTree> for TokenStream {\n impl Extend<TokenStream> for TokenStream {\n     fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I) {\n         for item in streams {\n-            self.subtree.token_trees.extend(&mut item.into_iter())\n+            for tkn in item {\n+                match tkn {\n+                    tt::TokenTree::Subtree(subtree) if subtree.delimiter.is_none() => {\n+                        self.subtree.token_trees.extend(subtree.token_trees);\n+                    }\n+                    _ => {\n+                        self.subtree.token_trees.push(tkn);\n+                    }\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "1f5d940fa0bcfc844de88bb845626d43948bb94d", "filename": "crates/ra_proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/98819d89199c5138cc5018b036b0ec5d3fade77e/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=98819d89199c5138cc5018b036b0ec5d3fade77e", "patch": "@@ -25,8 +25,7 @@ SUBTREE $\n       SUBTREE () 4294967295\n         IDENT   feature 4294967295\n         PUNCH   = [alone] 4294967295\n-        SUBTREE $\n-          LITERAL \"cargo-clippy\" 0\n+        LITERAL \"cargo-clippy\" 0\n         PUNCH   , [alone] 4294967295\n         IDENT   allow 4294967295\n         SUBTREE () 4294967295"}]}