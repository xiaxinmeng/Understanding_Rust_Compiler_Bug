{"sha": "06b64345d681681adc97e64c0dd74a1c9b0762ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YjY0MzQ1ZDY4MTY4MWFkYzk3ZTY0YzBkZDc0YTFjOWIwNzYyZWE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-06T22:11:44Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-08T22:14:46Z"}, "message": "preserve context in parsing of `self` varref", "tree": {"sha": "b67f973cad3aa231f215301be97b9ccd5e9c1d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67f973cad3aa231f215301be97b9ccd5e9c1d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06b64345d681681adc97e64c0dd74a1c9b0762ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06b64345d681681adc97e64c0dd74a1c9b0762ea", "html_url": "https://github.com/rust-lang/rust/commit/06b64345d681681adc97e64c0dd74a1c9b0762ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06b64345d681681adc97e64c0dd74a1c9b0762ea/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "728b269199484f50779c44bad495cc5ddecd4a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/728b269199484f50779c44bad495cc5ddecd4a15", "html_url": "https://github.com/rust-lang/rust/commit/728b269199484f50779c44bad495cc5ddecd4a15"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "d0e44b20139ead0d423db61f50b9d580c799da0f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06b64345d681681adc97e64c0dd74a1c9b0762ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06b64345d681681adc97e64c0dd74a1c9b0762ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=06b64345d681681adc97e64c0dd74a1c9b0762ea", "patch": "@@ -541,12 +541,13 @@ impl<'a> Parser<'a> {\n     // if the next token is the given keyword, eat it and return\n     // true. Otherwise, return false.\n     pub fn eat_keyword(&mut self, kw: keywords::Keyword) -> bool {\n-        let is_kw = match self.token {\n-            token::IDENT(sid, false) => kw.to_ident().name == sid.name,\n+        match self.token {\n+            token::IDENT(sid, false) if kw.to_ident().name == sid.name => {\n+                self.bump();\n+                true\n+            }\n             _ => false\n-        };\n-        if is_kw { self.bump() }\n-        is_kw\n+        }\n     }\n \n     // if the given word is not a keyword, signal an error.\n@@ -1917,7 +1918,7 @@ impl<'a> Parser<'a> {\n                 return self.mk_expr(blk.span.lo, blk.span.hi,\n                                     ExprBlock(blk));\n             },\n-            _ if token::is_bar(&self.token) => {\n+            token::BINOP(token::OR) |  token::OROR => {\n                 return self.parse_lambda_expr();\n             },\n             _ if self.eat_keyword(keywords::Proc) => {\n@@ -1933,8 +1934,9 @@ impl<'a> Parser<'a> {\n                     });\n                 return self.mk_expr(lo, body.span.hi, ExprProc(decl, fakeblock));\n             },\n-            _ if self.eat_keyword(keywords::Self) => {\n-                let path = ast_util::ident_to_path(mk_sp(lo, hi), special_idents::self_);\n+            token::IDENT(id @ ast::Ident{name:token::SELF_KEYWORD_NAME,ctxt:_},false) => {\n+                self.bump();\n+                let path = ast_util::ident_to_path(mk_sp(lo, hi), id);\n                 ex = ExprPath(path);\n                 hi = self.last_span.hi;\n             }\n@@ -1982,7 +1984,7 @@ impl<'a> Parser<'a> {\n             },\n             token::LBRACKET => {\n                 self.bump();\n-                \n+\n                 if self.token == token::RBRACKET {\n                     // Empty vector.\n                     self.bump();"}]}