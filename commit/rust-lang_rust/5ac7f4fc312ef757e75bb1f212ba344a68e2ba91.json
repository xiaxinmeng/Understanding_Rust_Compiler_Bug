{"sha": "5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzdmNGZjMzEyZWY3NTdlNzViYjFmMjEyYmEzNDRhNjhlMmJhOTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T17:15:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T21:07:55Z"}, "message": "Rollup merge of #37050 - frewsxcv:librustdoc, r=alexcrichton\n\nlibrustdoc refactoring and cleanup.", "tree": {"sha": "56d0af57eb145868eae33a46581c47c54cc59a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d0af57eb145868eae33a46581c47c54cc59a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "html_url": "https://github.com/rust-lang/rust/commit/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e65489e77cefa148d55535696d92084fc0c4d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e65489e77cefa148d55535696d92084fc0c4d8e", "html_url": "https://github.com/rust-lang/rust/commit/4e65489e77cefa148d55535696d92084fc0c4d8e"}, {"sha": "e4f066fe8b189d1459580d41b792347ba5c371ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f066fe8b189d1459580d41b792347ba5c371ef", "html_url": "https://github.com/rust-lang/rust/commit/e4f066fe8b189d1459580d41b792347ba5c371ef"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "d78f00497ca557694b44a8f19b82218f382c6342", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 50, "deletions": 35, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "patch": "@@ -11,64 +11,79 @@\n use std::fs::File;\n use std::io::prelude::*;\n use std::io;\n-use std::path::{PathBuf, Path};\n+use std::path::Path;\n use std::str;\n \n #[derive(Clone)]\n pub struct ExternalHtml{\n+    /// Content that will be included inline in the <head> section of a\n+    /// rendered Markdown file or generated documentation\n     pub in_header: String,\n+    /// Content that will be included inline between <body> and the content of\n+    /// a rendered Markdown file or generated documentation\n     pub before_content: String,\n+    /// Content that will be included inline between the content and </body> of\n+    /// a rendered Markdown file or generated documentation\n     pub after_content: String\n }\n \n impl ExternalHtml {\n     pub fn load(in_header: &[String], before_content: &[String], after_content: &[String])\n             -> Option<ExternalHtml> {\n-        match (load_external_files(in_header),\n-               load_external_files(before_content),\n-               load_external_files(after_content)) {\n-            (Some(ih), Some(bc), Some(ac)) => Some(ExternalHtml {\n-                in_header: ih,\n-                before_content: bc,\n-                after_content: ac\n-            }),\n-            _ => None\n-        }\n+        load_external_files(in_header)\n+            .and_then(|ih|\n+                load_external_files(before_content)\n+                    .map(|bc| (ih, bc))\n+            )\n+            .and_then(|(ih, bc)|\n+                load_external_files(after_content)\n+                    .map(|ac| (ih, bc, ac))\n+            )\n+            .map(|(ih, bc, ac)|\n+                ExternalHtml {\n+                    in_header: ih,\n+                    before_content: bc,\n+                    after_content: ac,\n+                }\n+            )\n     }\n }\n \n-pub fn load_string(input: &Path) -> io::Result<Option<String>> {\n-    let mut f = File::open(input)?;\n-    let mut d = Vec::new();\n-    f.read_to_end(&mut d)?;\n-    Ok(str::from_utf8(&d).map(|s| s.to_string()).ok())\n+pub enum LoadStringError {\n+    ReadFail,\n+    BadUtf8,\n }\n \n-macro_rules! load_or_return {\n-    ($input: expr, $cant_read: expr, $not_utf8: expr) => {\n-        {\n-            let input = PathBuf::from(&$input[..]);\n-            match ::externalfiles::load_string(&input) {\n-                Err(e) => {\n-                    let _ = writeln!(&mut io::stderr(),\n-                                     \"error reading `{}`: {}\", input.display(), e);\n-                    return $cant_read;\n-                }\n-                Ok(None) => {\n-                    let _ = writeln!(&mut io::stderr(),\n-                                     \"error reading `{}`: not UTF-8\", input.display());\n-                    return $not_utf8;\n-                }\n-                Ok(Some(s)) => s\n-            }\n+pub fn load_string<P: AsRef<Path>>(file_path: P) -> Result<String, LoadStringError> {\n+    let file_path = file_path.as_ref();\n+    let mut contents = vec![];\n+    let result = File::open(file_path)\n+                      .and_then(|mut f| f.read_to_end(&mut contents));\n+    if let Err(e) = result {\n+        let _ = writeln!(&mut io::stderr(),\n+                         \"error reading `{}`: {}\",\n+                         file_path.display(), e);\n+        return Err(LoadStringError::ReadFail);\n+    }\n+    match str::from_utf8(&contents) {\n+        Ok(s) => Ok(s.to_string()),\n+        Err(_) => {\n+            let _ = writeln!(&mut io::stderr(),\n+                             \"error reading `{}`: not UTF-8\",\n+                             file_path.display());\n+            Err(LoadStringError::BadUtf8)\n         }\n     }\n }\n \n-pub fn load_external_files(names: &[String]) -> Option<String> {\n+fn load_external_files(names: &[String]) -> Option<String> {\n     let mut out = String::new();\n     for name in names {\n-        out.push_str(&*load_or_return!(&name, None, None));\n+        let s = match load_string(name) {\n+            Ok(s) => s,\n+            Err(_) => return None,\n+        };\n+        out.push_str(&s);\n         out.push('\\n');\n     }\n     Some(out)"}, {"sha": "f708aa5461999be4de11f6e424e78f849dee9e6e", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac7f4fc312ef757e75bb1f212ba344a68e2ba91/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=5ac7f4fc312ef757e75bb1f212ba344a68e2ba91", "patch": "@@ -19,7 +19,7 @@ use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n \n-use externalfiles::ExternalHtml;\n+use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n use html::render::reset_ids;\n use html::escape::Escape;\n@@ -58,7 +58,11 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         css.push_str(&s)\n     }\n \n-    let input_str = load_or_return!(input, 1, 2);\n+    let input_str = match load_string(input) {\n+        Ok(s) => s,\n+        Err(LoadStringError::ReadFail) => return 1,\n+        Err(LoadStringError::BadUtf8) => return 2,\n+    };\n     let playground = matches.opt_str(\"markdown-playground-url\");\n     if playground.is_some() {\n         markdown::PLAYGROUND_KRATE.with(|s| { *s.borrow_mut() = Some(None); });\n@@ -144,7 +148,11 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>) -> isize {\n-    let input_str = load_or_return!(input, 1, 2);\n+    let input_str = match load_string(input) {\n+        Ok(s) => s,\n+        Err(LoadStringError::ReadFail) => return 1,\n+        Err(LoadStringError::BadUtf8) => return 2,\n+    };\n \n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;"}]}