{"sha": "725cde42d5673d1957ad58c6b2fada28a6a4edbd", "node_id": "C_kwDOAAsO6NoAKDcyNWNkZTQyZDU2NzNkMTk1N2FkNThjNmIyZmFkYTI4YTZhNGVkYmQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-22T02:52:47Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Use `multipart_suggestions`\n\nThis records that the suggestions are mutually-exclusive (i.e., only one\nshould be applied).", "tree": {"sha": "52ae46999082cf7e0682b2849bee18c72146334c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52ae46999082cf7e0682b2849bee18c72146334c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725cde42d5673d1957ad58c6b2fada28a6a4edbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725cde42d5673d1957ad58c6b2fada28a6a4edbd", "html_url": "https://github.com/rust-lang/rust/commit/725cde42d5673d1957ad58c6b2fada28a6a4edbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725cde42d5673d1957ad58c6b2fada28a6a4edbd/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef74796178edd2cf28f17109083cbd235808f88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef74796178edd2cf28f17109083cbd235808f88d", "html_url": "https://github.com/rust-lang/rust/commit/ef74796178edd2cf28f17109083cbd235808f88d"}], "stats": {"total": 114, "additions": 54, "deletions": 60}, "files": [{"sha": "0e0954d6ee2fc5c379b734a88aeaef679288e375", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 48, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/725cde42d5673d1957ad58c6b2fada28a6a4edbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725cde42d5673d1957ad58c6b2fada28a6a4edbd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=725cde42d5673d1957ad58c6b2fada28a6a4edbd", "patch": "@@ -218,6 +218,27 @@ impl std::fmt::Display for UnaryFixity {\n     }\n }\n \n+struct MultiSugg {\n+    msg: String,\n+    patches: Vec<(Span, String)>,\n+    applicability: Applicability,\n+}\n+\n+impl MultiSugg {\n+    fn emit(self, err: &mut DiagnosticBuilder<'_>) {\n+        err.multipart_suggestion(&self.msg, self.patches, self.applicability);\n+    }\n+\n+    /// Overrides individual messages and applicabilities.\n+    fn emit_many(\n+        err: &mut DiagnosticBuilder<'_>,\n+        msg: &str,\n+        applicability: Applicability,\n+        suggestions: impl Iterator<Item = Self>,\n+    ) {\n+        err.multipart_suggestions(msg, suggestions.map(|s| s.patches), applicability);\n+    }\n+}\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1281,33 +1302,33 @@ impl<'a> Parser<'a> {\n         };\n \n         match kind.standalone {\n-            IsStandalone::Standalone => {\n-                self.inc_dec_standalone_recovery(&mut err, kind, spans, false)\n-            }\n+            IsStandalone::Standalone => self.inc_dec_standalone_suggest(kind, spans).emit(&mut err),\n             IsStandalone::Subexpr => {\n                 let Ok(base_src) = self.span_to_snippet(base.span)\n                     else { return help_base_case(err, base) };\n                 match kind.fixity {\n                     UnaryFixity::Pre => {\n-                        self.prefix_inc_dec_suggest(base_src, &mut err, kind, spans)\n+                        self.prefix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n                     }\n                     UnaryFixity::Post => {\n-                        self.postfix_inc_dec_suggest(base_src, &mut err, kind, spans)\n+                        self.postfix_inc_dec_suggest(base_src, kind, spans).emit(&mut err)\n                     }\n                 }\n             }\n             IsStandalone::Maybe => {\n                 let Ok(base_src) = self.span_to_snippet(base.span)\n                     else { return help_base_case(err, base) };\n-                match kind.fixity {\n-                    UnaryFixity::Pre => {\n-                        self.prefix_inc_dec_suggest(base_src, &mut err, kind, spans)\n-                    }\n-                    UnaryFixity::Post => {\n-                        self.postfix_inc_dec_suggest(base_src, &mut err, kind, spans)\n-                    }\n-                }\n-                self.inc_dec_standalone_recovery(&mut err, kind, spans, true)\n+                let sugg1 = match kind.fixity {\n+                    UnaryFixity::Pre => self.prefix_inc_dec_suggest(base_src, kind, spans),\n+                    UnaryFixity::Post => self.postfix_inc_dec_suggest(base_src, kind, spans),\n+                };\n+                let sugg2 = self.inc_dec_standalone_suggest(kind, spans);\n+                MultiSugg::emit_many(\n+                    &mut err,\n+                    \"use `+= 1` instead\",\n+                    Applicability::MaybeIncorrect,\n+                    [sugg1, sugg2].into_iter(),\n+                )\n             }\n         }\n         Err(err)\n@@ -1316,61 +1337,46 @@ impl<'a> Parser<'a> {\n     fn prefix_inc_dec_suggest(\n         &mut self,\n         base_src: String,\n-        err: &mut DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),\n-    ) {\n-        err.multipart_suggestion(\n-            &format!(\"use `{}= 1` instead\", kind.op.chr()),\n-            vec![\n+    ) -> MultiSugg {\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![\n                 (pre_span, \"{ \".to_string()),\n                 (post_span, format!(\" {}= 1; {} }}\", kind.op.chr(), base_src)),\n             ],\n-            Applicability::MachineApplicable,\n-        );\n+            applicability: Applicability::MachineApplicable,\n+        }\n     }\n \n     fn postfix_inc_dec_suggest(\n         &mut self,\n         base_src: String,\n-        err: &mut DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),\n-    ) {\n+    ) -> MultiSugg {\n         let tmp_var = if base_src.trim() == \"tmp\" { \"tmp_\" } else { \"tmp\" };\n-        err.multipart_suggestion(\n-            &format!(\"use `{}= 1` instead\", kind.op.chr()),\n-            vec![\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![\n                 (pre_span, format!(\"{{ let {} = \", tmp_var)),\n                 (post_span, format!(\"; {} {}= 1; {} }}\", base_src, kind.op.chr(), tmp_var)),\n             ],\n-            Applicability::HasPlaceholders,\n-        );\n+            applicability: Applicability::HasPlaceholders,\n+        }\n     }\n \n-    fn inc_dec_standalone_recovery(\n+    fn inc_dec_standalone_suggest(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),\n-        maybe_not_standalone: bool,\n-    ) {\n-        let msg = if maybe_not_standalone {\n-            \"or, if you don't need to use it as an expression, change it to this\".to_owned()\n-        } else {\n-            format!(\"use `{}= 1` instead\", kind.op.chr())\n-        };\n-        let applicability = if maybe_not_standalone {\n-            // FIXME: Unspecified isn't right, but it's the least wrong option\n-            Applicability::Unspecified\n-        } else {\n-            Applicability::MachineApplicable\n-        };\n-        err.multipart_suggestion(\n-            &msg,\n-            vec![(pre_span, String::new()), (post_span, format!(\" {}= 1\", kind.op.chr()))],\n-            applicability,\n-        );\n+    ) -> MultiSugg {\n+        MultiSugg {\n+            msg: format!(\"use `{}= 1` instead\", kind.op.chr()),\n+            patches: vec![(pre_span, String::new()), (post_span, format!(\" {}= 1\", kind.op.chr()))],\n+            applicability: Applicability::MachineApplicable,\n+        }\n     }\n \n     /// Tries to recover from associated item paths like `[T]::AssocItem` / `(T, U)::AssocItem`."}, {"sha": "5bf4b2751de3d805344294207f33c7727a605069", "filename": "src/test/ui/parser/increment-autofix.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/725cde42d5673d1957ad58c6b2fada28a6a4edbd/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725cde42d5673d1957ad58c6b2fada28a6a4edbd/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr?ref=725cde42d5673d1957ad58c6b2fada28a6a4edbd", "patch": "@@ -8,8 +8,6 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = i; i += 1; tmp };\n    |     +++++++++++  ~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     i++;\n LL +     i += 1;\n    | \n@@ -24,8 +22,6 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     while i++ < 5 {\n LL +     while i += 1 < 5 {\n    | \n@@ -40,8 +36,6 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n    |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     tmp++;\n LL +     tmp += 1;\n    | \n@@ -56,8 +50,6 @@ help: use `+= 1` instead\n    |\n LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     while tmp++ < 5 {\n LL +     while tmp += 1 < 5 {\n    | "}, {"sha": "16ff42ca8b06fe06f7ca6d665adb72bdf90b7334", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725cde42d5673d1957ad58c6b2fada28a6a4edbd/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725cde42d5673d1957ad58c6b2fada28a6a4edbd/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=725cde42d5673d1957ad58c6b2fada28a6a4edbd", "patch": "@@ -8,8 +8,6 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n    |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     foo.bar.qux++;\n LL +     foo.bar.qux += 1;\n    | \n@@ -24,8 +22,6 @@ help: use `+= 1` instead\n    |\n LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n    |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n-help: or, if you don't need to use it as an expression, change it to this\n-   |\n LL -     s.tmp++;\n LL +     s.tmp += 1;\n    | "}]}