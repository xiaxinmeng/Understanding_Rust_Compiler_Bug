{"sha": "a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzNkNDY5MGUwNGM4YzhlY2ViMWY1OWM3OGZkZWQxZjA0Y2Y2ZjA=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-09-22T18:48:15Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Run rustfmt", "tree": {"sha": "50a9b1ba66de6ad1eb3fa2e7c1d3a2f8ae84f0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50a9b1ba66de6ad1eb3fa2e7c1d3a2f8ae84f0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "html_url": "https://github.com/rust-lang/rust/commit/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77585672720285db5180b2ee4207c7ee9b51072", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77585672720285db5180b2ee4207c7ee9b51072", "html_url": "https://github.com/rust-lang/rust/commit/c77585672720285db5180b2ee4207c7ee9b51072"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "1c8a08172a3ddbca91bb278115078a4e9c7ad33a", "filename": "clippy_lints/src/unnecessary_wrap.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a433d4690e04c8c8eceb1f59c78fded1f04cf6f0/clippy_lints%2Fsrc%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wrap.rs?ref=a433d4690e04c8c8eceb1f59c78fded1f04cf6f0", "patch": "@@ -1,7 +1,4 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_qpath, paths, return_ty, snippet,\n-    span_lint_and_then,\n-};\n+use crate::utils::{is_type_diagnostic_item, match_qpath, paths, return_ty, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{FnKind, Visitor};\n@@ -104,17 +101,20 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWrap {\n                 move |diag| {\n                     diag.multipart_suggestion(\n                         \"factor this out to\",\n-                        suggs.into_iter().chain({\n-                            let inner_ty = return_ty(cx, hir_id)\n-                                .walk()\n-                                .skip(1) // skip `std::option::Option` or `std::result::Result`\n-                                .take(1) // take the first outermost inner type\n-                                .filter_map(|inner| match inner.unpack() {\n-                                    GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n-                                    _ => None,\n-                                });\n-                            inner_ty.map(|inner_ty| (fn_decl.output.span(), inner_ty))\n-                        }).collect(),\n+                        suggs\n+                            .into_iter()\n+                            .chain({\n+                                let inner_ty = return_ty(cx, hir_id)\n+                                    .walk()\n+                                    .skip(1) // skip `std::option::Option` or `std::result::Result`\n+                                    .take(1) // take the first outermost inner type\n+                                    .filter_map(|inner| match inner.unpack() {\n+                                        GenericArgKind::Type(inner_ty) => Some(inner_ty.to_string()),\n+                                        _ => None,\n+                                    });\n+                                inner_ty.map(|inner_ty| (fn_decl.output.span(), inner_ty))\n+                            })\n+                            .collect(),\n                         Applicability::MachineApplicable,\n                     );\n                 },"}]}