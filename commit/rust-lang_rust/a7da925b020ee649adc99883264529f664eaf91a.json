{"sha": "a7da925b020ee649adc99883264529f664eaf91a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZGE5MjViMDIwZWU2NDlhZGM5OTg4MzI2NDUyOWY2NjRlYWY5MWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-05T16:38:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-05T16:38:10Z"}, "message": "auto merge of #12700 : thestinger/rust/float, r=cmr", "tree": {"sha": "5a79afa002fb87286002b5d7bb288531eec88f80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a79afa002fb87286002b5d7bb288531eec88f80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7da925b020ee649adc99883264529f664eaf91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7da925b020ee649adc99883264529f664eaf91a", "html_url": "https://github.com/rust-lang/rust/commit/a7da925b020ee649adc99883264529f664eaf91a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7da925b020ee649adc99883264529f664eaf91a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea71a08f6bd9d6b6fc30558027121bfbc66ab349", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea71a08f6bd9d6b6fc30558027121bfbc66ab349", "html_url": "https://github.com/rust-lang/rust/commit/ea71a08f6bd9d6b6fc30558027121bfbc66ab349"}, {"sha": "28d4f80836b3557a500e61f4b4fa7d8b47c6a0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/28d4f80836b3557a500e61f4b4fa7d8b47c6a0bf", "html_url": "https://github.com/rust-lang/rust/commit/28d4f80836b3557a500e61f4b4fa7d8b47c6a0bf"}], "stats": {"total": 133, "additions": 43, "deletions": 90}, "files": [{"sha": "13c4a812ec400658e3fb5bf0a8785f0c485005f5", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=a7da925b020ee649adc99883264529f664eaf91a", "patch": "@@ -28,26 +28,15 @@ pub mod c_double {\n         pub fn atan(n: c_double) -> c_double;\n         pub fn atan2(a: c_double, b: c_double) -> c_double;\n         pub fn cbrt(n: c_double) -> c_double;\n-        pub fn ceil(n: c_double) -> c_double;\n-        pub fn copysign(x: c_double, y: c_double) -> c_double;\n-        pub fn cos(n: c_double) -> c_double;\n         pub fn cosh(n: c_double) -> c_double;\n         pub fn erf(n: c_double) -> c_double;\n         pub fn erfc(n: c_double) -> c_double;\n-        pub fn exp(n: c_double) -> c_double;\n         // rename: for consistency with underscore usage elsewhere\n         #[link_name=\"expm1\"]\n         pub fn exp_m1(n: c_double) -> c_double;\n-        pub fn exp2(n: c_double) -> c_double;\n-        #[link_name=\"fabs\"]\n-        pub fn abs(n: c_double) -> c_double;\n         // rename: for clarity and consistency with add/sub/mul/div\n         #[link_name=\"fdim\"]\n         pub fn abs_sub(a: c_double, b: c_double) -> c_double;\n-        pub fn floor(n: c_double) -> c_double;\n-        // rename: for clarity and consistency with add/sub/mul/div\n-        #[link_name=\"fma\"]\n-        pub fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double;\n         #[link_name=\"fmax\"]\n         pub fn fmax(a: c_double, b: c_double) -> c_double;\n         #[link_name=\"fmin\"]\n@@ -63,34 +52,22 @@ pub mod c_double {\n         #[cfg(windows)]\n         #[link_name=\"__lgamma_r\"]\n         pub fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n-        // renamed: ln seems more natural\n-        #[link_name=\"log\"]\n-        pub fn ln(n: c_double) -> c_double;\n         // renamed: \"logb\" /often/ is confused for log2 by beginners\n         #[link_name=\"logb\"]\n         pub fn log_radix(n: c_double) -> c_double;\n         // renamed: to be consitent with log as ln\n         #[link_name=\"log1p\"]\n         pub fn ln_1p(n: c_double) -> c_double;\n-        pub fn log10(n: c_double) -> c_double;\n-        pub fn log2(n: c_double) -> c_double;\n         #[link_name=\"ilogb\"]\n         pub fn ilog_radix(n: c_double) -> c_int;\n         pub fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-        pub fn pow(n: c_double, e: c_double) -> c_double;\n-        // FIXME (#1379): enable when rounding modes become available\n-        //    fn rint(n: c_double) -> c_double;\n-        pub fn round(n: c_double) -> c_double;\n         // rename: for consistency with logradix\n         #[link_name=\"scalbn\"]\n         pub fn ldexp_radix(n: c_double, i: c_int) -> c_double;\n-        pub fn sin(n: c_double) -> c_double;\n         pub fn sinh(n: c_double) -> c_double;\n-        pub fn sqrt(n: c_double) -> c_double;\n         pub fn tan(n: c_double) -> c_double;\n         pub fn tanh(n: c_double) -> c_double;\n         pub fn tgamma(n: c_double) -> c_double;\n-        pub fn trunc(n: c_double) -> c_double;\n \n         // These are commonly only available for doubles\n \n@@ -121,34 +98,18 @@ pub mod c_float {\n         pub fn atan2(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"cbrtf\"]\n         pub fn cbrt(n: c_float) -> c_float;\n-        #[link_name=\"ceilf\"]\n-        pub fn ceil(n: c_float) -> c_float;\n-        #[link_name=\"copysignf\"]\n-        pub fn copysign(x: c_float, y: c_float) -> c_float;\n-        #[link_name=\"cosf\"]\n-        pub fn cos(n: c_float) -> c_float;\n         #[link_name=\"coshf\"]\n         pub fn cosh(n: c_float) -> c_float;\n         #[link_name=\"erff\"]\n         pub fn erf(n: c_float) -> c_float;\n         #[link_name=\"erfcf\"]\n         pub fn erfc(n: c_float) -> c_float;\n-        #[link_name=\"expf\"]\n-        pub fn exp(n: c_float) -> c_float;\n         #[link_name=\"expm1f\"]\n         pub fn exp_m1(n: c_float) -> c_float;\n-        #[link_name=\"exp2f\"]\n-        pub fn exp2(n: c_float) -> c_float;\n-        #[link_name=\"fabsf\"]\n-        pub fn abs(n: c_float) -> c_float;\n         #[link_name=\"fdimf\"]\n         pub fn abs_sub(a: c_float, b: c_float) -> c_float;\n-        #[link_name=\"floorf\"]\n-        pub fn floor(n: c_float) -> c_float;\n         #[link_name=\"frexpf\"]\n         pub fn frexp(n: c_float, value: &mut c_int) -> c_float;\n-        #[link_name=\"fmaf\"]\n-        pub fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n         #[link_name=\"fmaxf\"]\n         pub fn fmax(a: c_float, b: c_float) -> c_float;\n         #[link_name=\"fminf\"]\n@@ -168,41 +129,23 @@ pub mod c_float {\n         #[link_name=\"__lgammaf_r\"]\n         pub fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n-        #[link_name=\"logf\"]\n-        pub fn ln(n: c_float) -> c_float;\n         #[link_name=\"logbf\"]\n         pub fn log_radix(n: c_float) -> c_float;\n         #[link_name=\"log1pf\"]\n         pub fn ln_1p(n: c_float) -> c_float;\n-        #[link_name=\"log2f\"]\n-        pub fn log2(n: c_float) -> c_float;\n-        #[link_name=\"log10f\"]\n-        pub fn log10(n: c_float) -> c_float;\n         #[link_name=\"ilogbf\"]\n         pub fn ilog_radix(n: c_float) -> c_int;\n         #[link_name=\"modff\"]\n         pub fn modf(n: c_float, iptr: &mut c_float) -> c_float;\n-        #[link_name=\"powf\"]\n-        pub fn pow(n: c_float, e: c_float) -> c_float;\n-        // FIXME (#1379): enable when rounding modes become available\n-        //    #[link_name=\"rintf\"] fn rint(n: c_float) -> c_float;\n-        #[link_name=\"roundf\"]\n-        pub fn round(n: c_float) -> c_float;\n         #[link_name=\"scalbnf\"]\n         pub fn ldexp_radix(n: c_float, i: c_int) -> c_float;\n-        #[link_name=\"sinf\"]\n-        pub fn sin(n: c_float) -> c_float;\n         #[link_name=\"sinhf\"]\n         pub fn sinh(n: c_float) -> c_float;\n-        #[link_name=\"sqrtf\"]\n-        pub fn sqrt(n: c_float) -> c_float;\n         #[link_name=\"tanf\"]\n         pub fn tan(n: c_float) -> c_float;\n         #[link_name=\"tanhf\"]\n         pub fn tanh(n: c_float) -> c_float;\n         #[link_name=\"tgammaf\"]\n         pub fn tgamma(n: c_float) -> c_float;\n-        #[link_name=\"truncf\"]\n-        pub fn trunc(n: c_float) -> c_float;\n     }\n }"}, {"sha": "9ec028b76b956b8a2380b1163083ce1320e1f281", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=a7da925b020ee649adc99883264529f664eaf91a", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n //! Operations and constants for 32-bits floats (`f32` type)\n+\n #[allow(missing_doc)];\n \n use prelude::*;\n@@ -45,37 +46,32 @@ macro_rules! delegate(\n \n delegate!(\n     // intrinsics\n-    fn abs(n: f32) -> f32 = intrinsics::fabsf32,\n+    fn sqrt(n: f32) -> f32 = intrinsics::sqrtf32,\n+    fn powi(n: f32, e: i32) -> f32 = intrinsics::powif32,\n+    fn sin(n: f32) -> f32 = intrinsics::sinf32,\n     fn cos(n: f32) -> f32 = intrinsics::cosf32,\n+    fn pow(n: f32, e: f32) -> f32 = intrinsics::powf32,\n     fn exp(n: f32) -> f32 = intrinsics::expf32,\n     fn exp2(n: f32) -> f32 = intrinsics::exp2f32,\n-    fn floor(x: f32) -> f32 = intrinsics::floorf32,\n     fn ln(n: f32) -> f32 = intrinsics::logf32,\n     fn log10(n: f32) -> f32 = intrinsics::log10f32,\n     fn log2(n: f32) -> f32 = intrinsics::log2f32,\n     fn mul_add(a: f32, b: f32, c: f32) -> f32 = intrinsics::fmaf32,\n-    fn pow(n: f32, e: f32) -> f32 = intrinsics::powf32,\n-    // fn powi(n: f32, e: c_int) -> f32 = intrinsics::powif32,\n-    fn sin(n: f32) -> f32 = intrinsics::sinf32,\n-    fn sqrt(n: f32) -> f32 = intrinsics::sqrtf32,\n-\n-    // LLVM 3.3 required to use intrinsics for these four\n-    fn ceil(n: c_float) -> c_float = cmath::c_float::ceil,\n-    fn trunc(n: c_float) -> c_float = cmath::c_float::trunc,\n-    /*\n+    fn abs(n: f32) -> f32 = intrinsics::fabsf32,\n+    fn copysign(x: f32, y: f32) -> f32 = intrinsics::copysignf32,\n+    fn floor(x: f32) -> f32 = intrinsics::floorf32,\n     fn ceil(n: f32) -> f32 = intrinsics::ceilf32,\n     fn trunc(n: f32) -> f32 = intrinsics::truncf32,\n     fn rint(n: f32) -> f32 = intrinsics::rintf32,\n     fn nearbyint(n: f32) -> f32 = intrinsics::nearbyintf32,\n-    */\n+    fn round(n: f32) -> f32 = intrinsics::roundf32,\n \n     // cmath\n     fn acos(n: c_float) -> c_float = cmath::c_float::acos,\n     fn asin(n: c_float) -> c_float = cmath::c_float::asin,\n     fn atan(n: c_float) -> c_float = cmath::c_float::atan,\n     fn atan2(a: c_float, b: c_float) -> c_float = cmath::c_float::atan2,\n     fn cbrt(n: c_float) -> c_float = cmath::c_float::cbrt,\n-    fn copysign(x: c_float, y: c_float) -> c_float = cmath::c_float::copysign,\n     fn cosh(n: c_float) -> c_float = cmath::c_float::cosh,\n     // fn erf(n: c_float) -> c_float = cmath::c_float::erf,\n     // fn erfc(n: c_float) -> c_float = cmath::c_float::erfc,\n@@ -89,7 +85,6 @@ delegate!(\n     fn ln_1p(n: c_float) -> c_float = cmath::c_float::ln_1p,\n     // fn ilog_radix(n: c_float) -> c_int = cmath::c_float::ilog_radix,\n     // fn modf(n: c_float, iptr: &mut c_float) -> c_float = cmath::c_float::modf,\n-    fn round(n: c_float) -> c_float = cmath::c_float::round,\n     // fn ldexp_radix(n: c_float, i: c_int) -> c_float = cmath::c_float::ldexp_radix,\n     fn sinh(n: c_float) -> c_float = cmath::c_float::sinh,\n     fn tan(n: c_float) -> c_float = cmath::c_float::tan,\n@@ -311,6 +306,16 @@ impl Bounded for f32 {\n impl Primitive for f32 {}\n \n impl Float for f32 {\n+    #[inline]\n+    fn max(self, other: f32) -> f32 {\n+        unsafe { cmath::c_float::fmax(self, other) }\n+    }\n+\n+    #[inline]\n+    fn min(self, other: f32) -> f32 {\n+        unsafe { cmath::c_float::fmin(self, other) }\n+    }\n+\n     #[inline]\n     fn nan() -> f32 { 0.0 / 0.0 }\n "}, {"sha": "d173abbcde1b38a64aa5e7a171d8d6f7fee7ed7d", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=a7da925b020ee649adc99883264529f664eaf91a", "patch": "@@ -23,8 +23,6 @@ use num::{Zero, One, Bounded, strconv};\n use num;\n use intrinsics;\n \n-pub use cmp::{min, max};\n-\n macro_rules! delegate(\n     (\n         $(\n@@ -48,37 +46,32 @@ macro_rules! delegate(\n \n delegate!(\n     // intrinsics\n-    fn abs(n: f64) -> f64 = intrinsics::fabsf64,\n+    fn sqrt(n: f64) -> f64 = intrinsics::sqrtf64,\n+    fn powi(n: f64, e: i32) -> f64 = intrinsics::powif64,\n+    fn sin(n: f64) -> f64 = intrinsics::sinf64,\n     fn cos(n: f64) -> f64 = intrinsics::cosf64,\n+    fn pow(n: f64, e: f64) -> f64 = intrinsics::powf64,\n     fn exp(n: f64) -> f64 = intrinsics::expf64,\n     fn exp2(n: f64) -> f64 = intrinsics::exp2f64,\n-    fn floor(x: f64) -> f64 = intrinsics::floorf64,\n     fn ln(n: f64) -> f64 = intrinsics::logf64,\n     fn log10(n: f64) -> f64 = intrinsics::log10f64,\n     fn log2(n: f64) -> f64 = intrinsics::log2f64,\n     fn mul_add(a: f64, b: f64, c: f64) -> f64 = intrinsics::fmaf64,\n-    fn pow(n: f64, e: f64) -> f64 = intrinsics::powf64,\n-    // fn powi(n: f64, e: c_int) -> f64 = intrinsics::powif64,\n-    fn sin(n: f64) -> f64 = intrinsics::sinf64,\n-    fn sqrt(n: f64) -> f64 = intrinsics::sqrtf64,\n-\n-    // LLVM 3.3 required to use intrinsics for these four\n-    fn ceil(n: c_double) -> c_double = cmath::c_double::ceil,\n-    fn trunc(n: c_double) -> c_double = cmath::c_double::trunc,\n-    /*\n+    fn abs(n: f64) -> f64 = intrinsics::fabsf64,\n+    fn copysign(x: f64, y: f64) -> f64 = intrinsics::copysignf64,\n+    fn floor(x: f64) -> f64 = intrinsics::floorf64,\n     fn ceil(n: f64) -> f64 = intrinsics::ceilf64,\n     fn trunc(n: f64) -> f64 = intrinsics::truncf64,\n-    fn rint(n: c_double) -> c_double = intrinsics::rintf64,\n-    fn nearbyint(n: c_double) -> c_double = intrinsics::nearbyintf64,\n-    */\n+    fn rint(n: f64) -> f64 = intrinsics::rintf64,\n+    fn nearbyint(n: f64) -> f64 = intrinsics::nearbyintf64,\n+    fn round(n: f64) -> f64 = intrinsics::roundf64,\n \n     // cmath\n     fn acos(n: c_double) -> c_double = cmath::c_double::acos,\n     fn asin(n: c_double) -> c_double = cmath::c_double::asin,\n     fn atan(n: c_double) -> c_double = cmath::c_double::atan,\n     fn atan2(a: c_double, b: c_double) -> c_double = cmath::c_double::atan2,\n     fn cbrt(n: c_double) -> c_double = cmath::c_double::cbrt,\n-    fn copysign(x: c_double, y: c_double) -> c_double = cmath::c_double::copysign,\n     fn cosh(n: c_double) -> c_double = cmath::c_double::cosh,\n     // fn erf(n: c_double) -> c_double = cmath::c_double::erf,\n     // fn erfc(n: c_double) -> c_double = cmath::c_double::erfc,\n@@ -92,7 +85,6 @@ delegate!(\n     fn ln_1p(n: c_double) -> c_double = cmath::c_double::ln_1p,\n     // fn ilog_radix(n: c_double) -> c_int = cmath::c_double::ilog_radix,\n     // fn modf(n: c_double, iptr: &mut c_double) -> c_double = cmath::c_double::modf,\n-    fn round(n: c_double) -> c_double = cmath::c_double::round,\n     // fn ldexp_radix(n: c_double, i: c_int) -> c_double = cmath::c_double::ldexp_radix,\n     fn sinh(n: c_double) -> c_double = cmath::c_double::sinh,\n     fn tan(n: c_double) -> c_double = cmath::c_double::tan,\n@@ -313,6 +305,16 @@ impl Bounded for f64 {\n impl Primitive for f64 {}\n \n impl Float for f64 {\n+    #[inline]\n+    fn max(self, other: f64) -> f64 {\n+        unsafe { cmath::c_double::fmax(self, other) }\n+    }\n+\n+    #[inline]\n+    fn min(self, other: f64) -> f64 {\n+        unsafe { cmath::c_double::fmin(self, other) }\n+    }\n+\n     #[inline]\n     fn nan() -> f64 { 0.0 / 0.0 }\n "}, {"sha": "2f377a52ef82a72d61d7e3c8ed0d358407ddde2b", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=a7da925b020ee649adc99883264529f664eaf91a", "patch": "@@ -313,6 +313,9 @@ pub enum FPCategory {\n pub trait Float: Signed\n                + Round\n                + Primitive {\n+    fn max(self, other: Self) -> Self;\n+    fn min(self, other: Self) -> Self;\n+\n     // FIXME (#5527): These should be associated constants\n     fn nan() -> Self;\n     fn infinity() -> Self;"}, {"sha": "9ebd7d72c9188f3cd6a5f52e021d29dc412394f6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7da925b020ee649adc99883264529f664eaf91a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a7da925b020ee649adc99883264529f664eaf91a", "patch": "@@ -1063,7 +1063,7 @@ impl MetricMap {\n                 Some(v) => {\n                     let delta = v.value - vold.value;\n                     let noise = match noise_pct {\n-                        None => f64::max(vold.noise.abs(), v.noise.abs()),\n+                        None => vold.noise.abs().max(v.noise.abs()),\n                         Some(pct) => vold.value * pct / 100.0\n                     };\n                     if delta.abs() <= noise {"}]}