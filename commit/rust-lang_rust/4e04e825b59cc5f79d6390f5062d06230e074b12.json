{"sha": "4e04e825b59cc5f79d6390f5062d06230e074b12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMDRlODI1YjU5Y2M1Zjc5ZDYzOTBmNTA2MmQwNjIzMGUwNzRiMTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-28T02:03:02Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-28T02:03:02Z"}, "message": "Use the right kind of doc comment in chains.rs\n\ncc #2185", "tree": {"sha": "8b53a7c69c8bcf3462822a4131dfadddbf22d1e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b53a7c69c8bcf3462822a4131dfadddbf22d1e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e04e825b59cc5f79d6390f5062d06230e074b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e04e825b59cc5f79d6390f5062d06230e074b12", "html_url": "https://github.com/rust-lang/rust/commit/4e04e825b59cc5f79d6390f5062d06230e074b12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e04e825b59cc5f79d6390f5062d06230e074b12/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4d260bfc39d115fc2bf69c5796cc9c2989263a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4d260bfc39d115fc2bf69c5796cc9c2989263a", "html_url": "https://github.com/rust-lang/rust/commit/3c4d260bfc39d115fc2bf69c5796cc9c2989263a"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "a35770427b50fcee02d9732f86c45c15a8d750d6", "filename": "src/chains.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4e04e825b59cc5f79d6390f5062d06230e074b12/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04e825b59cc5f79d6390f5062d06230e074b12/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=4e04e825b59cc5f79d6390f5062d06230e074b12", "patch": "@@ -8,56 +8,56 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// Formatting of chained expressions, i.e. expressions which are chained by\n-/// dots: struct and enum field access, method calls, and try shorthand (?).\n-///\n-/// Instead of walking these subexpressions one-by-one, as is our usual strategy\n-/// for expression formatting, we collect maximal sequences of these expressions\n-/// and handle them simultaneously.\n-///\n-/// Whenever possible, the entire chain is put on a single line. If that fails,\n-/// we put each subexpression on a separate, much like the (default) function\n-/// argument function argument strategy.\n-///\n-/// Depends on config options: `chain_indent` is the indent to use for\n-/// blocks in the parent/root/base of the chain (and the rest of the chain's\n-/// alignment).\n-/// E.g., `let foo = { aaaa; bbb; ccc }.bar.baz();`, we would layout for the\n-/// following values of `chain_indent`:\n-/// Block:\n-/// ```\n-/// let foo = {\n-///     aaaa;\n-///     bbb;\n-///     ccc\n-/// }.bar\n-///     .baz();\n-/// ```\n-/// Visual:\n-/// ```\n-/// let foo = {\n-///               aaaa;\n-///               bbb;\n-///               ccc\n-///           }\n-///           .bar\n-///           .baz();\n-/// ```\n-///\n-/// If the first item in the chain is a block expression, we align the dots with\n-/// the braces.\n-/// Block:\n-/// ```\n-/// let a = foo.bar\n-///     .baz()\n-///     .qux\n-/// ```\n-/// Visual:\n-/// ```\n-/// let a = foo.bar\n-///            .baz()\n-///            .qux\n-/// ```\n+//! Formatting of chained expressions, i.e. expressions which are chained by\n+//! dots: struct and enum field access, method calls, and try shorthand (?).\n+//!\n+//! Instead of walking these subexpressions one-by-one, as is our usual strategy\n+//! for expression formatting, we collect maximal sequences of these expressions\n+//! and handle them simultaneously.\n+//!\n+//! Whenever possible, the entire chain is put on a single line. If that fails,\n+//! we put each subexpression on a separate, much like the (default) function\n+//! argument function argument strategy.\n+//!\n+//! Depends on config options: `chain_indent` is the indent to use for\n+//! blocks in the parent/root/base of the chain (and the rest of the chain's\n+//! alignment).\n+//! E.g., `let foo = { aaaa; bbb; ccc }.bar.baz();`, we would layout for the\n+//! following values of `chain_indent`:\n+//! Block:\n+//! ```\n+//! let foo = {\n+//!     aaaa;\n+//!     bbb;\n+//!     ccc\n+//! }.bar\n+//!     .baz();\n+//! ```\n+//! Visual:\n+//! ```\n+//! let foo = {\n+//!               aaaa;\n+//!               bbb;\n+//!               ccc\n+//!           }\n+//!           .bar\n+//!           .baz();\n+//! ```\n+//!\n+//! If the first item in the chain is a block expression, we align the dots with\n+//! the braces.\n+//! Block:\n+//! ```\n+//! let a = foo.bar\n+//!     .baz()\n+//!     .qux\n+//! ```\n+//! Visual:\n+//! ```\n+//! let a = foo.bar\n+//!            .baz()\n+//!            .qux\n+//! ```\n \n use shape::Shape;\n use config::IndentStyle;"}]}