{"sha": "8a167edbcad1497b05c5d4d674acac34217902d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTY3ZWRiY2FkMTQ5N2IwNWM1ZDRkNjc0YWNhYzM0MjE3OTAyZDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-27T00:16:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-28T16:56:28Z"}, "message": "Point at enclosing match when expecting `()` in arm\n\nWhen encountering code like the following:\n\n```rust\nfn main() {\n    match 3 {\n        4 => 1,\n        3 => {\n            println!(\"Yep it maches.\");\n            2\n        }\n        _ => 2\n    }\n    println!(\"Bye!\")\n}\n```\n\npoint at the enclosing `match` expression and suggest ignoring the\nreturned value:\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/match-needing-semi.rs:8:13\n   |\nLL | /     match 3 {\nLL | |         4 => 1,\nLL | |         3 => {\nLL | |             2\n   | |             ^ expected (), found integer\nLL | |         }\nLL | |         _ => 2\nLL | |     }\n   | |     -- help: consider using a semicolon here\n   | |_____|\n   |       expected this to be `()`\n   |\n   = note: expected type `()`\n              found type `{integer}\n```\n\nFix #40799.", "tree": {"sha": "ca1b19bd63758809ac1186b518b1809bcbee5f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca1b19bd63758809ac1186b518b1809bcbee5f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a167edbcad1497b05c5d4d674acac34217902d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a167edbcad1497b05c5d4d674acac34217902d0", "html_url": "https://github.com/rust-lang/rust/commit/8a167edbcad1497b05c5d4d674acac34217902d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a167edbcad1497b05c5d4d674acac34217902d0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f00b949615b1faa7feec95d58b087d146d3198", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f00b949615b1faa7feec95d58b087d146d3198", "html_url": "https://github.com/rust-lang/rust/commit/18f00b949615b1faa7feec95d58b087d146d3198"}], "stats": {"total": 191, "additions": 158, "deletions": 33}, "files": [{"sha": "085f27dadbd1fb6fa2c117ab2a21c68ff0e175ac", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -1039,10 +1039,9 @@ impl LoweringContext<'_> {\n     ) -> hir::Expr {\n         // expand <head>\n         let mut head = self.lower_expr(head);\n-        let head_sp = head.span;\n         let desugared_span = self.mark_span_with_reason(\n             DesugaringKind::ForLoop,\n-            head_sp,\n+            head.span,\n             None,\n         );\n         head.span = desugared_span;\n@@ -1088,21 +1087,21 @@ impl LoweringContext<'_> {\n \n         // `match ::std::iter::Iterator::next(&mut iter) { ... }`\n         let match_expr = {\n-            let iter = P(self.expr_ident(head_sp, iter, iter_pat_nid));\n-            let ref_mut_iter = self.expr_mut_addr_of(head_sp, iter);\n+            let iter = P(self.expr_ident(desugared_span, iter, iter_pat_nid));\n+            let ref_mut_iter = self.expr_mut_addr_of(desugared_span, iter);\n             let next_path = &[sym::iter, sym::Iterator, sym::next];\n             let next_expr = P(self.expr_call_std_path(\n-                head_sp,\n+                desugared_span,\n                 next_path,\n                 hir_vec![ref_mut_iter],\n             ));\n             let arms = hir_vec![pat_arm, break_arm];\n \n-            self.expr_match(head_sp, next_expr, arms, hir::MatchSource::ForLoopDesugar)\n+            self.expr_match(desugared_span, next_expr, arms, hir::MatchSource::ForLoopDesugar)\n         };\n-        let match_stmt = self.stmt_expr(head_sp, match_expr);\n+        let match_stmt = self.stmt_expr(desugared_span, match_expr);\n \n-        let next_expr = P(self.expr_ident(head_sp, next_ident, next_pat_hid));\n+        let next_expr = P(self.expr_ident(desugared_span, next_ident, next_pat_hid));\n \n         // `let mut __next`\n         let next_let = self.stmt_let_pat(\n@@ -1117,7 +1116,7 @@ impl LoweringContext<'_> {\n         let pat = self.lower_pat(pat);\n         let pat_let = self.stmt_let_pat(\n             ThinVec::new(),\n-            head_sp,\n+            desugared_span,\n             Some(next_expr),\n             pat,\n             hir::LocalSource::ForLoopDesugar,\n@@ -1154,14 +1153,14 @@ impl LoweringContext<'_> {\n             let into_iter_path =\n                 &[sym::iter, sym::IntoIterator, sym::into_iter];\n             P(self.expr_call_std_path(\n-                head_sp,\n+                desugared_span,\n                 into_iter_path,\n                 hir_vec![head],\n             ))\n         };\n \n         let match_expr = P(self.expr_match(\n-            head_sp,\n+            desugared_span,\n             into_iter_expr,\n             hir_vec![iter_arm],\n             hir::MatchSource::ForLoopDesugar,\n@@ -1173,7 +1172,7 @@ impl LoweringContext<'_> {\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps(head_sp, match_expr, e.attrs.clone())\n+        self.expr_drop_temps(desugared_span, match_expr, e.attrs.clone())\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:"}, {"sha": "15e95937f851991078d39fd6d7467bf650c6990f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -818,6 +818,27 @@ impl<'hir> Map<'hir> {\n         CRATE_HIR_ID\n     }\n \n+    pub fn get_match_if_cause(&self, hir_id: HirId) -> Option<&Expr> {\n+        for (_, node) in ParentHirIterator::new(hir_id, &self) {\n+            match node {\n+                Node::Item(_) |\n+                Node::ForeignItem(_) |\n+                Node::TraitItem(_) |\n+                Node::ImplItem(_) => break,\n+                Node::Expr(expr) => match expr.node {\n+                    ExprKind::Match(_, _, _) => return Some(expr),\n+                    _ => {}\n+                },\n+                Node::Stmt(stmt) => match stmt.node {\n+                    StmtKind::Local(_) => break,\n+                    _ => {}\n+                }\n+                _ => {}\n+            }\n+        }\n+        None\n+    }\n+\n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n     pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n         for (hir_id, node) in ParentHirIterator::new(hir_id, &self) {"}, {"sha": "a1daed005f3024ae79a1bd20dedd406cf5288896", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // 2. By expecting `bool` for `expr` we get nice diagnostics for e.g. `if x = y { .. }`.\n             //\n             // FIXME(60707): Consider removing hack with principled solution.\n-            self.check_expr_has_type_or_error(discrim, self.tcx.types.bool)\n+            self.check_expr_has_type_or_error(discrim, self.tcx.types.bool, |_| {})\n         } else {\n             self.demand_discriminant_type(arms, discrim)\n         };\n@@ -106,7 +106,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Some(g) = &arm.guard {\n                 self.diverges.set(pats_diverge);\n                 match g {\n-                    hir::Guard::If(e) => self.check_expr_has_type_or_error(e, tcx.types.bool),\n+                    hir::Guard::If(e) => {\n+                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n+                    }\n                 };\n             }\n \n@@ -442,7 +444,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 kind: TypeVariableOriginKind::TypeInference,\n                 span: discrim.span,\n             });\n-            self.check_expr_has_type_or_error(discrim, discrim_ty);\n+            self.check_expr_has_type_or_error(discrim, discrim_ty, |_| {});\n             discrim_ty\n         }\n     }"}, {"sha": "38b233aa1e956d6318008dbe965f52eccfb7d8e2", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -51,7 +51,7 @@\n //! we may want to adjust precisely when coercions occur.\n \n use crate::check::{FnCtxt, Needs};\n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::ptr::P;\n@@ -1163,18 +1163,20 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 fcx.try_coerce(expression, expression_ty, self.expected_ty, AllowTwoPhase::No)\n             } else {\n                 match self.expressions {\n-                    Expressions::Dynamic(ref exprs) =>\n-                        fcx.try_find_coercion_lub(cause,\n-                                                  exprs,\n-                                                  self.merged_ty(),\n-                                                  expression,\n-                                                  expression_ty),\n-                    Expressions::UpFront(ref coercion_sites) =>\n-                        fcx.try_find_coercion_lub(cause,\n-                                                  &coercion_sites[0..self.pushed],\n-                                                  self.merged_ty(),\n-                                                  expression,\n-                                                  expression_ty),\n+                    Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(\n+                        cause,\n+                        exprs,\n+                        self.merged_ty(),\n+                        expression,\n+                        expression_ty,\n+                    ),\n+                    Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(\n+                        cause,\n+                        &coercion_sites[0..self.pushed],\n+                        self.merged_ty(),\n+                        expression,\n+                        expression_ty,\n+                    ),\n                 }\n             }\n         } else {\n@@ -1302,6 +1304,21 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 blk_id,\n             );\n             let parent = fcx.tcx.hir().get(parent_id);\n+            if let (Some(match_expr), true, false) = (\n+                fcx.tcx.hir().get_match_if_cause(expr.hir_id),\n+                expected.is_unit(),\n+                pointing_at_return_type,\n+            ) {\n+                if match_expr.span.desugaring_kind().is_none() {\n+                    db.span_label(match_expr.span, \"expected this to be `()`\");\n+                    db.span_suggestion_short(\n+                        match_expr.span.shrink_to_hi(),\n+                        \"consider using a semicolon here\",\n+                        \";\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n             fcx.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n         } else {\n             fcx.get_fn_decl(parent_id)"}, {"sha": "81ae85c65496cbc570bcf61e1228ee6a1dd7f68a", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -53,14 +53,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr: &'tcx hir::Expr,\n         expected: Ty<'tcx>,\n+        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n     ) -> Ty<'tcx> {\n-        self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected))\n+        self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected), extend_err)\n     }\n \n     fn check_expr_meets_expectation_or_error(\n         &self,\n         expr: &'tcx hir::Expr,\n         expected: Expectation<'tcx>,\n+        extend_err: impl Fn(&mut DiagnosticBuilder<'_>),\n     ) -> Ty<'tcx> {\n         let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);\n         let mut ty = self.check_expr_with_expectation(expr, expected);\n@@ -88,6 +90,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ExprKind::DropTemps(expr) => expr,\n                 _ => expr,\n             };\n+            extend_err(&mut err);\n             // Error possibly reported in `check_assign` so avoid emitting error again.\n             err.emit_unless(self.is_assign_to_bool(expr, expected_ty));\n         }\n@@ -971,7 +974,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     kind: TypeVariableOriginKind::MiscVariable,\n                     span: element.span,\n                 });\n-                let element_ty = self.check_expr_has_type_or_error(&element, ty);\n+                let element_ty = self.check_expr_has_type_or_error(&element, ty, |_| {});\n                 (element_ty, ty)\n             }\n         };\n@@ -1058,7 +1061,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the fields with the base_expr. This could cause us to hit errors later\n             // when certain fields are assumed to exist that in fact do not.\n             if !error_happened {\n-                self.check_expr_has_type_or_error(base_expr, adt_ty);\n+                self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {});\n                 match adt_ty.kind {\n                     ty::Adt(adt, substs) if adt.is_struct() => {\n                         let fru_field_types = adt.non_enum_variant().fields.iter().map(|f| {"}, {"sha": "610f32cc8f824bd93b8bf032da50f8bf30a4a101", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -3881,7 +3881,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             hir::StmtKind::Item(_) => {}\n             hir::StmtKind::Expr(ref expr) => {\n                 // Check with expected type of `()`.\n-                self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit());\n+\n+                self.check_expr_has_type_or_error(&expr, self.tcx.mk_unit(), |err| {\n+                    err.span_suggestion_short(\n+                        expr.span.shrink_to_hi(),\n+                        \"consider using a semicolon here\",\n+                        \";\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                });\n             }\n             hir::StmtKind::Semi(ref expr) => {\n                 self.check_expr(&expr);"}, {"sha": "a52ec6dc539386a0fd67c47105196a496bfff1f3", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -50,7 +50,10 @@ error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n LL |     if x == E::V { field } {}\n-   |                    ^^^^^ expected (), found bool\n+   |     ---------------^^^^^--- help: consider using a semicolon here\n+   |     |              |\n+   |     |              expected (), found bool\n+   |     expected this to be `()`\n    |\n    = note: expected type `()`\n               found type `bool`"}, {"sha": "83fa707eeaaaa949a8c3511fbafe6c040eec4a17", "filename": "src/test/ui/suggestions/match-needing-semi.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.fixed?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// run-rustfix\n+\n+fn main() {\n+    match 3 {\n+        4 => 1,\n+        3 => {\n+            2 //~ ERROR mismatched types\n+        }\n+        _ => 2\n+    };\n+    match 3 { //~ ERROR mismatched types\n+        4 => 1,\n+        3 => 2,\n+        _ => 2\n+    };\n+    let _ = ();\n+}"}, {"sha": "dcf3187c4bacb817630468fdf8e403d9a1a034a5", "filename": "src/test/ui/suggestions/match-needing-semi.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.rs?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -0,0 +1,18 @@\n+// check-fail\n+// run-rustfix\n+\n+fn main() {\n+    match 3 {\n+        4 => 1,\n+        3 => {\n+            2 //~ ERROR mismatched types\n+        }\n+        _ => 2\n+    }\n+    match 3 { //~ ERROR mismatched types\n+        4 => 1,\n+        3 => 2,\n+        _ => 2\n+    }\n+    let _ = ();\n+}"}, {"sha": "988945817c2eeb88a86ac84bae93a86da87d0f93", "filename": "src/test/ui/suggestions/match-needing-semi.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a167edbcad1497b05c5d4d674acac34217902d0/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-needing-semi.stderr?ref=8a167edbcad1497b05c5d4d674acac34217902d0", "patch": "@@ -0,0 +1,36 @@\n+error[E0308]: mismatched types\n+  --> $DIR/match-needing-semi.rs:8:13\n+   |\n+LL | /     match 3 {\n+LL | |         4 => 1,\n+LL | |         3 => {\n+LL | |             2\n+   | |             ^ expected (), found integer\n+LL | |         }\n+LL | |         _ => 2\n+LL | |     }\n+   | |     -- help: consider using a semicolon here\n+   | |_____|\n+   |       expected this to be `()`\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/match-needing-semi.rs:12:5\n+   |\n+LL | /     match 3 {\n+LL | |         4 => 1,\n+LL | |         3 => 2,\n+LL | |         _ => 2\n+LL | |     }\n+   | |     ^- help: consider using a semicolon here\n+   | |_____|\n+   |       expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}