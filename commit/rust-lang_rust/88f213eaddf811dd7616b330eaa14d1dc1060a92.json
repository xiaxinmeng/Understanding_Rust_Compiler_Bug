{"sha": "88f213eaddf811dd7616b330eaa14d1dc1060a92", "node_id": "C_kwDOAAsO6NoAKDg4ZjIxM2VhZGRmODExZGQ3NjE2YjMzMGVhYTE0ZDFkYzEwNjBhOTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T15:49:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-04T15:49:21Z"}, "message": "Initial implementation of custom postfix snippets", "tree": {"sha": "9ae02c8c3dd27eaeebb896ae9790581203b2cf38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae02c8c3dd27eaeebb896ae9790581203b2cf38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f213eaddf811dd7616b330eaa14d1dc1060a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f213eaddf811dd7616b330eaa14d1dc1060a92", "html_url": "https://github.com/rust-lang/rust/commit/88f213eaddf811dd7616b330eaa14d1dc1060a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f213eaddf811dd7616b330eaa14d1dc1060a92/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7faa35cbbd58e0e64c745d40c1b678b202c1a17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7faa35cbbd58e0e64c745d40c1b678b202c1a17d", "html_url": "https://github.com/rust-lang/rust/commit/7faa35cbbd58e0e64c745d40c1b678b202c1a17d"}], "stats": {"total": 196, "additions": 189, "deletions": 7}, "files": [{"sha": "4b35bfeac63be5854b99208e64f4151fa46d4002", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -99,6 +99,7 @@ pub use ide_assists::{\n };\n pub use ide_completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit,\n+    PostfixSnippet,\n };\n pub use ide_db::{\n     base_db::{"}, {"sha": "ecddf59094c2adc1ff1be6daa2392b853275fcfe", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 83, "deletions": 4, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -3,7 +3,7 @@\n mod format_like;\n \n use ide_db::{\n-    helpers::{FamousDefs, SnippetCap},\n+    helpers::{import_assets::LocatedImport, insert_use::ImportScope, FamousDefs, SnippetCap},\n     ty_filter::TryEnum,\n };\n use syntax::{\n@@ -18,7 +18,7 @@ use crate::{\n     context::CompletionContext,\n     item::{Builder, CompletionKind},\n     patterns::ImmediateLocation,\n-    CompletionItem, CompletionItemKind, CompletionRelevance, Completions,\n+    CompletionItem, CompletionItemKind, CompletionRelevance, Completions, ImportEdit,\n };\n \n pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -56,6 +56,10 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n     let postfix_snippet = build_postfix_snippet_builder(ctx, cap, &dot_receiver);\n \n+    if !ctx.config.postfix_snippets.is_empty() {\n+        add_custom_postfix_completions(acc, ctx, &postfix_snippet, &receiver_text);\n+    }\n+\n     let try_enum = TryEnum::from_ty(&ctx.sema, &receiver_ty.strip_references());\n     if let Some(try_enum) = &try_enum {\n         match try_enum {\n@@ -218,13 +222,62 @@ fn build_postfix_snippet_builder<'a>(\n     }\n }\n \n+fn add_custom_postfix_completions(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    postfix_snippet: impl Fn(&str, &str, &str) -> Builder,\n+    receiver_text: &str,\n+) -> Option<()> {\n+    let import_scope =\n+        ImportScope::find_insert_use_container_with_macros(&ctx.token.parent()?, &ctx.sema)?;\n+    ctx.config.postfix_snippets.iter().for_each(|snippet| {\n+        // FIXME: Support multiple imports\n+        let import = match snippet.requires.get(0) {\n+            Some(import) => {\n+                let res = (|| {\n+                    let path = ast::Path::parse(import).ok()?;\n+                    match ctx.scope.speculative_resolve(&path)? {\n+                        hir::PathResolution::Macro(_) => None,\n+                        hir::PathResolution::Def(def) => {\n+                            let item = def.into();\n+                            let path = ctx.scope.module()?.find_use_path_prefixed(\n+                                ctx.db,\n+                                item,\n+                                ctx.config.insert_use.prefix_kind,\n+                            )?;\n+                            Some((path.len() > 1).then(|| ImportEdit {\n+                                import: LocatedImport::new(path.clone(), item, item, None),\n+                                scope: import_scope.clone(),\n+                            }))\n+                        }\n+                        _ => None,\n+                    }\n+                })();\n+                match res {\n+                    Some(it) => it,\n+                    None => return,\n+                }\n+            }\n+            None => None,\n+        };\n+        let mut builder = postfix_snippet(\n+            &snippet.label,\n+            snippet.description.as_deref().unwrap_or_default(),\n+            &format!(\"{}\", snippet.snippet(&receiver_text)),\n+        );\n+        builder.add_import(import);\n+        builder.add_to(acc);\n+    });\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        tests::{check_edit, filtered_completion_list},\n-        CompletionKind,\n+        tests::{check_edit, check_edit_with_config, filtered_completion_list, TEST_CONFIG},\n+        CompletionConfig, CompletionKind, PostfixSnippet,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n@@ -442,6 +495,32 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn custom_postfix_completion() {\n+        check_edit_with_config(\n+            CompletionConfig {\n+                postfix_snippets: vec![PostfixSnippet::new(\n+                    \"break\".into(),\n+                    &[\"ControlFlow::Break($target)\".into()],\n+                    &[],\n+                    &[\"core::ops::ControlFlow\".into()],\n+                )\n+                .unwrap()],\n+                ..TEST_CONFIG\n+            },\n+            \"break\",\n+            r#\"\n+//- minicore: try\n+fn main() { 42.$0 }\n+\"#,\n+            r#\"\n+use core::ops::ControlFlow;\n+\n+fn main() { ControlFlow::Break(42) }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn postfix_completion_for_format_like_strings() {\n         check_edit("}, {"sha": "b28b59b0a529e32fb24dfd221c87caa8a1348951", "filename": "crates/ide_completion/src/config.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fconfig.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -5,6 +5,8 @@\n //! completions if we are allowed to.\n \n use ide_db::helpers::{insert_use::InsertUseConfig, SnippetCap};\n+use itertools::Itertools;\n+use syntax::ast;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct CompletionConfig {\n@@ -15,4 +17,46 @@ pub struct CompletionConfig {\n     pub add_call_argument_snippets: bool,\n     pub snippet_cap: Option<SnippetCap>,\n     pub insert_use: InsertUseConfig,\n+    pub postfix_snippets: Vec<PostfixSnippet>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct PostfixSnippet {\n+    pub label: String,\n+    snippet: String,\n+    pub description: Option<String>,\n+    pub requires: Box<[String]>,\n+}\n+\n+impl PostfixSnippet {\n+    pub fn new(\n+        label: String,\n+        snippet: &[String],\n+        description: &[String],\n+        requires: &[String],\n+    ) -> Option<Self> {\n+        // validate that these are indeed simple paths\n+        if requires.iter().any(|path| match ast::Path::parse(path) {\n+            Ok(path) => path.segments().any(|seg| {\n+                !matches!(seg.kind(), Some(ast::PathSegmentKind::Name(_)))\n+                    || seg.generic_arg_list().is_some()\n+            }),\n+            Err(_) => true,\n+        }) {\n+            return None;\n+        }\n+        let snippet = snippet.iter().join(\"\\n\");\n+        let description = description.iter().join(\"\\n\");\n+        let description = if description.is_empty() { None } else { Some(description) };\n+        Some(PostfixSnippet {\n+            label,\n+            snippet,\n+            description,\n+            requires: requires.iter().cloned().collect(), // Box::into doesn't work as that has a Copy bound \ud83d\ude12\n+        })\n+    }\n+\n+    pub fn snippet(&self, receiver: &str) -> String {\n+        self.snippet.replace(\"$receiver\", receiver)\n+    }\n }"}, {"sha": "3d59156d0084ea30d1ed6bcd9df4a9fef568a886", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -869,7 +869,8 @@ mod tests {\n \n     fn check_expected_type_and_name(ra_fixture: &str, expect: Expect) {\n         let (db, pos) = position(ra_fixture);\n-        let completion_context = CompletionContext::new(&db, pos, &TEST_CONFIG).unwrap();\n+        let config = TEST_CONFIG;\n+        let completion_context = CompletionContext::new(&db, pos, &config).unwrap();\n \n         let ty = completion_context\n             .expected_type"}, {"sha": "62570b73863b79c93ce9617114addd2f2b1d01c4", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -24,7 +24,7 @@ use text_edit::TextEdit;\n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n \n pub use crate::{\n-    config::CompletionConfig,\n+    config::{CompletionConfig, PostfixSnippet},\n     item::{CompletionItem, CompletionItemKind, CompletionRelevance, ImportEdit},\n };\n "}, {"sha": "07a4953b28d013c81578fa9f7a616a5823f8a881", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -74,6 +74,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n         group: true,\n         skip_glob_imports: true,\n     },\n+    postfix_snippets: Vec::new(),\n };\n \n pub(crate) fn completion_list(ra_fixture: &str) -> String {"}, {"sha": "9f0bae6f8bcc84cd2bb2bd9f5c55bb05210dd50b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -12,7 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig,\n+    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, PostfixSnippet,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -114,6 +114,8 @@ config_data! {\n         completion_addCallParenthesis: bool      = \"true\",\n         /// Whether to show postfix snippets like `dbg`, `if`, `not`, etc.\n         completion_postfix_enable: bool          = \"true\",\n+        /// Custom postfix completions to show.\n+        completion_postfix_snippets: FxHashMap<String, PostfixSnippetDesc> = \"{}\",\n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n         completion_autoimport_enable: bool       = \"true\",\n@@ -296,6 +298,7 @@ pub struct Config {\n     detached_files: Vec<AbsPathBuf>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n+    postfix_snippets: Vec<ide::PostfixSnippet>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -431,6 +434,7 @@ impl Config {\n             detached_files: Vec::new(),\n             discovered_projects: None,\n             root_path,\n+            postfix_snippets: Default::default(),\n         }\n     }\n     pub fn update(&mut self, mut json: serde_json::Value) {\n@@ -443,6 +447,14 @@ impl Config {\n             .map(AbsPathBuf::assert)\n             .collect();\n         self.data = ConfigData::from_json(json);\n+        self.postfix_snippets = self\n+            .data\n+            .completion_postfix_snippets\n+            .iter()\n+            .flat_map(|(label, desc)| {\n+                PostfixSnippet::new(label.clone(), &desc.snippet, &desc.description, &desc.requires)\n+            })\n+            .collect();\n     }\n \n     pub fn json_schema() -> serde_json::Value {\n@@ -778,6 +790,7 @@ impl Config {\n                     .snippet_support?,\n                 false\n             )),\n+            postfix_snippets: self.postfix_snippets.clone(),\n         }\n     }\n     pub fn assist(&self) -> AssistConfig {\n@@ -908,6 +921,47 @@ impl Config {\n     }\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+struct PostfixSnippetDesc {\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    description: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    snippet: Vec<String>,\n+    #[serde(deserialize_with = \"single_or_array\")]\n+    requires: Vec<String>,\n+}\n+\n+fn single_or_array<'de, D>(deserializer: D) -> Result<Vec<String>, D::Error>\n+where\n+    D: serde::Deserializer<'de>,\n+{\n+    struct SingleOrVec;\n+\n+    impl<'de> serde::de::Visitor<'de> for SingleOrVec {\n+        type Value = Vec<String>;\n+\n+        fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {\n+            formatter.write_str(\"string or array of strings\")\n+        }\n+\n+        fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>\n+        where\n+            E: serde::de::Error,\n+        {\n+            Ok(vec![value.to_owned()])\n+        }\n+\n+        fn visit_seq<A>(self, seq: A) -> Result<Self::Value, A::Error>\n+        where\n+            A: serde::de::SeqAccess<'de>,\n+        {\n+            Deserialize::deserialize(serde::de::value::SeqAccessDeserializer::new(seq))\n+        }\n+    }\n+\n+    deserializer.deserialize_any(SingleOrVec)\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(untagged)]\n enum ManifestOrProjectJson {"}, {"sha": "036196c46e4ec2cbdda0162df8d8ed02568bac53", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f213eaddf811dd7616b330eaa14d1dc1060a92/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=88f213eaddf811dd7616b330eaa14d1dc1060a92", "patch": "@@ -144,6 +144,7 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n+            postfix_snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n@@ -180,6 +181,7 @@ fn integrated_completion_benchmark() {\n                 group: true,\n                 skip_glob_imports: true,\n             },\n+            postfix_snippets: Vec::new(),\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };"}]}