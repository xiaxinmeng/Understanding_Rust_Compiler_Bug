{"sha": "70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwY2U2OGVlZDRmODFmZjkwY2YzNzEwZTNmZGI3YjA0ZGU3MWEzODg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-30T23:39:20Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T03:50:26Z"}, "message": "syntax: unbox closures used in function arguments", "tree": {"sha": "f3bf05ceb4a8822e355e4c037d5a6e6303315f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3bf05ceb4a8822e355e4c037d5a6e6303315f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "html_url": "https://github.com/rust-lang/rust/commit/70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/comments", "author": null, "committer": null, "parents": [{"sha": "371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "url": "https://api.github.com/repos/rust-lang/rust/commits/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c", "html_url": "https://github.com/rust-lang/rust/commit/371f04d4330f70cfab5fa2a5fdb65df7ccd0604c"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "a8393ed9d39774960fbd3e9532455ae19104c1d8", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "patch": "@@ -618,34 +618,38 @@ pub fn compute_id_range_for_fn_body(fk: visit::FnKind,\n     id_visitor.operation.result\n }\n \n-// FIXME(#19596) unbox `it`\n-pub fn walk_pat(pat: &Pat, it: |&Pat| -> bool) -> bool {\n-    if !it(pat) {\n-        return false;\n-    }\n-\n-    match pat.node {\n-        PatIdent(_, _, Some(ref p)) => walk_pat(&**p, it),\n-        PatStruct(_, ref fields, _) => {\n-            fields.iter().all(|field| walk_pat(&*field.node.pat, |p| it(p)))\n-        }\n-        PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n-            s.iter().all(|p| walk_pat(&**p, |p| it(p)))\n+pub fn walk_pat<F>(pat: &Pat, mut it: F) -> bool where F: FnMut(&Pat) -> bool {\n+    // FIXME(#19596) this is a workaround, but there should be a better way\n+    fn walk_pat_<G>(pat: &Pat, it: &mut G) -> bool where G: FnMut(&Pat) -> bool {\n+        if !(*it)(pat) {\n+            return false;\n         }\n-        PatBox(ref s) | PatRegion(ref s) => {\n-            walk_pat(&**s, it)\n-        }\n-        PatVec(ref before, ref slice, ref after) => {\n-            before.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n-            slice.iter().all(|p| walk_pat(&**p, |p| it(p))) &&\n-            after.iter().all(|p| walk_pat(&**p, |p| it(p)))\n-        }\n-        PatMac(_) => panic!(\"attempted to analyze unexpanded pattern\"),\n-        PatWild(_) | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n-        PatEnum(_, _) => {\n-            true\n+\n+        match pat.node {\n+            PatIdent(_, _, Some(ref p)) => walk_pat_(&**p, it),\n+            PatStruct(_, ref fields, _) => {\n+                fields.iter().all(|field| walk_pat_(&*field.node.pat, it))\n+            }\n+            PatEnum(_, Some(ref s)) | PatTup(ref s) => {\n+                s.iter().all(|p| walk_pat_(&**p, it))\n+            }\n+            PatBox(ref s) | PatRegion(ref s) => {\n+                walk_pat_(&**s, it)\n+            }\n+            PatVec(ref before, ref slice, ref after) => {\n+                before.iter().all(|p| walk_pat_(&**p, it)) &&\n+                slice.iter().all(|p| walk_pat_(&**p, it)) &&\n+                after.iter().all(|p| walk_pat_(&**p, it))\n+            }\n+            PatMac(_) => panic!(\"attempted to analyze unexpanded pattern\"),\n+            PatWild(_) | PatLit(_) | PatRange(_, _) | PatIdent(_, _, _) |\n+            PatEnum(_, _) => {\n+                true\n+            }\n         }\n     }\n+\n+    walk_pat_(pat, &mut it)\n }\n \n pub trait EachViewItem {"}, {"sha": "5134897893f2431d469531997c5ddd20b7087ba7", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "patch": "@@ -47,18 +47,18 @@ pub trait ItemDecorator {\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n-              push: |P<ast::Item>|);\n+              push: Box<FnMut(P<ast::Item>)>);\n }\n \n impl<F> ItemDecorator for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, |P<ast::Item>|)\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, Box<FnMut(P<ast::Item>)>)\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n-              push: |P<ast::Item>|) {\n+              push: Box<FnMut(P<ast::Item>)>) {\n         (*self)(ecx, sp, meta_item, item, push)\n     }\n }"}, {"sha": "75f763b5c38ee8a4522f4248f17041497bc361db", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "patch": "@@ -45,7 +45,7 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             _span: Span,\n                             mitem: &MetaItem,\n                             item: &Item,\n-                            push: |P<Item>|) {\n+                            mut push: Box<FnMut(P<Item>)>) {\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n             cx.span_err(l.span, \"unexpected value in `deriving`\");\n@@ -64,7 +64,7 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                     MetaWord(ref tname) => {\n                         macro_rules! expand(($func:path) => ($func(cx, titem.span,\n                                                                    &**titem, item,\n-                                                                   |i| push(i))));\n+                                                                   |i| push.call_mut((i,)))));\n                         match tname.get() {\n                             \"Clone\" => expand!(clone::expand_deriving_clone),\n "}, {"sha": "f9bffcc897460c2dabd1720531dbd77e120efaa9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ce68eed4f81ff90cf3710e3fdb7b04de71a388/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=70ce68eed4f81ff90cf3710e3fdb7b04de71a388", "patch": "@@ -424,7 +424,7 @@ pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n                     // but that double-mut-borrows fld\n                     let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n                     dec.expand(fld.cx, attr.span, &*attr.node.value, &*it,\n-                               |item| items.push(item));\n+                               box |&mut : item| items.push(item));\n                     decorator_items.extend(items.into_iter()\n                         .flat_map(|item| expand_item(item, fld).into_iter()));\n "}]}