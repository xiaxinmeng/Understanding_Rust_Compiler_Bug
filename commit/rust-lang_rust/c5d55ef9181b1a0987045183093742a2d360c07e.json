{"sha": "c5d55ef9181b1a0987045183093742a2d360c07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDU1ZWY5MTgxYjFhMDk4NzA0NTE4MzA5Mzc0MmEyZDM2MGMwN2U=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-05T02:31:47Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-05T02:35:44Z"}, "message": "Prohibit assignment to upvars in lambdas. Closes #805.", "tree": {"sha": "31dde7929268c2e3672f3eae6f6e6c4710aff5c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31dde7929268c2e3672f3eae6f6e6c4710aff5c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d55ef9181b1a0987045183093742a2d360c07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d55ef9181b1a0987045183093742a2d360c07e", "html_url": "https://github.com/rust-lang/rust/commit/c5d55ef9181b1a0987045183093742a2d360c07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d55ef9181b1a0987045183093742a2d360c07e/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a26c027731fbee8a0a7c6e4a93a90f1ac73b4fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26c027731fbee8a0a7c6e4a93a90f1ac73b4fd9", "html_url": "https://github.com/rust-lang/rust/commit/a26c027731fbee8a0a7c6e4a93a90f1ac73b4fd9"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "d6aca1cf36c04773bab7cfb762f3601b1d834c01", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=c5d55ef9181b1a0987045183093742a2d360c07e", "patch": "@@ -57,7 +57,29 @@ fn visit_fn(cx: &@ctx, f: &ast::_fn, tp: &ast::ty_param[], sp: &span,\n     for arg_: ast::arg  in f.decl.inputs {\n         cx.local_map.insert(arg_.id, arg(arg_.mode));\n     }\n-    v.visit_block(f.body, @~[], v);\n+    let scope = alt (f.proto) {\n+      // Blocks need to obey any restrictions from the enclosing scope.\n+      ast::proto_block. { sc }\n+      // Closures need to prohibit writing to any of the upvars.\n+      // This doesn't seem like a particularly clean way to do this.\n+      ast::proto_closure. {\n+        let dnums = ~[];\n+        for each nid in freevars::get_freevar_defs(cx.tcx, id).keys() {\n+            dnums += ~[nid];\n+        }\n+        @~[@{root_vars: ~[],\n+             // I'm not sure if there is anything sensical to put here\n+             block_defnum: 0,\n+             bindings: dnums,\n+             tys: ~[],\n+             depends_on: ~[],\n+             mutable ok: valid}]\n+      }\n+      // Non capturing functions start out fresh.\n+      _ { @~[] }\n+    };\n+\n+    v.visit_block(f.body, scope, v);\n }\n \n fn visit_item(cx: &@ctx, i: &@ast::item, sc: &scope, v: &vt[scope]) {"}, {"sha": "4b3ac5739dd3c230f60e2d2928c9ca8d619d6861", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=c5d55ef9181b1a0987045183093742a2d360c07e", "patch": "@@ -18,7 +18,7 @@ export freevar_set;\n export freevar_map;\n export get_freevar_info;\n export get_freevars;\n-export get_freevar_refs;\n+export get_freevar_defs;\n export has_freevars;\n export is_freevar_of;\n export def_lookup;\n@@ -145,17 +145,17 @@ fn get_freevar_info(tcx: &ty::ctxt, fid: ast::node_id) -> freevar_info {\n       some(d) { ret d; }\n     }\n }\n-fn get_freevar_refs(tcx: &ty::ctxt, fid: ast::node_id) -> freevar_set {\n+fn get_freevar_defs(tcx: &ty::ctxt, fid: ast::node_id) -> freevar_set {\n     ret get_freevar_info(tcx, fid).defs;\n }\n fn get_freevars(tcx: &ty::ctxt, fid: ast::node_id) -> @ast::node_id[] {\n     ret get_freevar_info(tcx, fid).refs;\n }\n fn has_freevars(tcx: &ty::ctxt, fid: ast::node_id) -> bool {\n-    ret get_freevar_refs(tcx, fid).size() != 0u;\n+    ret get_freevar_defs(tcx, fid).size() != 0u;\n }\n fn is_freevar_of(tcx: &ty::ctxt, def: ast::node_id, f: ast::node_id) -> bool {\n-    ret get_freevar_refs(tcx, f).contains_key(def);\n+    ret get_freevar_defs(tcx, f).contains_key(def);\n }\n fn def_lookup(tcx: &ty::ctxt, f: ast::node_id, id: ast::node_id) ->\n    option::t[ast::def] {"}, {"sha": "6da8e3b252e520613be1c1d520564c21c8538d65", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=c5d55ef9181b1a0987045183093742a2d360c07e", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern:assigning to immutable alias\n+// Make sure that nesting a block within a lambda doesn't let us\n+// mutate upvars from a lambda.\n+fn main() {\n+    let i = 0;\n+    let ctr = lambda() -> int {\n+        block() { i = i + 1; }();\n+        ret i;\n+    };\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err i;\n+}"}, {"sha": "24f4c75a85323d0b4d1c2bf1b13b1b25cc0e48c2", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d55ef9181b1a0987045183093742a2d360c07e/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=c5d55ef9181b1a0987045183093742a2d360c07e", "patch": "@@ -0,0 +1,15 @@\n+// error-pattern:assigning to immutable alias\n+// Make sure we can't write to upvars from lambdas\n+fn main() {\n+    let i = 0;\n+    let ctr = lambda() -> int {\n+        i = i + 1;\n+        ret i;\n+    };\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err ctr();\n+    log_err i;\n+}"}]}