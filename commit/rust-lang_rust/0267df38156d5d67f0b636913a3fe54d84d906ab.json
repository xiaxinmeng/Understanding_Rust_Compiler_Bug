{"sha": "0267df38156d5d67f0b636913a3fe54d84d906ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjdkZjM4MTU2ZDVkNjdmMGI2MzY5MTNhM2ZlNTRkODRkOTA2YWI=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-22T07:30:58Z"}, "committer": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2018-12-22T07:30:58Z"}, "message": "not visit the same crateId only once", "tree": {"sha": "d7014b75e003366a7c99e8c9927e31a0b86ee5ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7014b75e003366a7c99e8c9927e31a0b86ee5ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0267df38156d5d67f0b636913a3fe54d84d906ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0267df38156d5d67f0b636913a3fe54d84d906ab", "html_url": "https://github.com/rust-lang/rust/commit/0267df38156d5d67f0b636913a3fe54d84d906ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0267df38156d5d67f0b636913a3fe54d84d906ab/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d15bb2dafefe74c34e636ceb242f056f7b43dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d15bb2dafefe74c34e636ceb242f056f7b43dc", "html_url": "https://github.com/rust-lang/rust/commit/66d15bb2dafefe74c34e636ceb242f056f7b43dc"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "e9a991a574819de97f45b70b49bff27933f61b82", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0267df38156d5d67f0b636913a3fe54d84d906ab/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0267df38156d5d67f0b636913a3fe54d84d906ab/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=0267df38156d5d67f0b636913a3fe54d84d906ab", "patch": "@@ -12,6 +12,7 @@ use rustc_hash::FxHashMap;\n use salsa;\n \n use ra_syntax::SmolStr;\n+use rustc_hash::FxHashSet;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -94,8 +95,9 @@ impl CrateGraph {\n         crate_id\n     }\n     pub fn add_dep(&mut self, from: CrateId, name: SmolStr, to: CrateId) {\n-        if self.dfs_find(from, to) {\n-           panic!(\"Cycle dependencies found.\")\n+        let mut visited = FxHashSet::default();\n+        if self.dfs_find(from, to, &mut visited) {\n+            panic!(\"Cycle dependencies found.\")\n         }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to)\n     }\n@@ -112,35 +114,36 @@ impl CrateGraph {\n     pub fn dependencies<'a>(\n         &'a self,\n         crate_id: CrateId,\n-    ) -> impl Iterator<Item=&'a Dependency> + 'a {\n+    ) -> impl Iterator<Item = &'a Dependency> + 'a {\n         self.arena[&crate_id].dependencies.iter()\n     }\n-    fn dfs_find(&self, target: CrateId, from: CrateId) -> bool {\n+    fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {\n+        if visited.contains(&from) {\n+            return false;\n+        }\n         for dep in self.dependencies(from) {\n             let crate_id = dep.crate_id();\n             if crate_id == target {\n                 return true;\n             }\n-            if self.arena.contains_key(&crate_id) {\n-                if self.dfs_find(target, crate_id) {\n-                    return true;\n-                }\n+\n+            if self.dfs_find(target, crate_id, visited) {\n+                return true;\n             }\n         }\n+        visited.insert(from);\n         return false;\n     }\n }\n \n-\n #[cfg(test)]\n mod tests {\n     use super::{CrateGraph, FxHashMap, FileId, SmolStr};\n+\n     #[test]\n     #[should_panic]\n     fn it_should_painc_because_of_cycle_dependencies() {\n-        let mut graph = CrateGraph {\n-            arena: FxHashMap::default()\n-        };\n+        let mut graph = CrateGraph::default();\n         let crate1 = graph.add_crate_root(FileId(1u32));\n         let crate2 = graph.add_crate_root(FileId(2u32));\n         let crate3 = graph.add_crate_root(FileId(3u32));\n@@ -152,7 +155,7 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph {\n-            arena: FxHashMap::default()\n+            arena: FxHashMap::default(),\n         };\n         let crate1 = graph.add_crate_root(FileId(1u32));\n         let crate2 = graph.add_crate_root(FileId(2u32));\n@@ -162,7 +165,6 @@ mod tests {\n     }\n }\n \n-\n salsa::query_group! {\n     pub trait FilesDatabase: salsa::Database {\n         /// Text of the file."}]}