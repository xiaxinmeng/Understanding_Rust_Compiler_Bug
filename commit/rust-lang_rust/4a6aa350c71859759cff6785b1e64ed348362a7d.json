{"sha": "4a6aa350c71859759cff6785b1e64ed348362a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmFhMzUwYzcxODU5NzU5Y2ZmNjc4NWIxZTY0ZWQzNDgzNjJhN2Q=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-02T01:24:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-02T01:24:36Z"}, "message": "Rollup merge of #76158 - mati865:self-contained-option, r=petrochenkov\n\nStabilise link-self-contained option\n\nMCP has been accepted: https://github.com/rust-lang/compiler-team/issues/343\n\nI'll add improved heuristic in next PR.", "tree": {"sha": "047864dfc6f803dbc5c217f0aeda63710c175ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047864dfc6f803dbc5c217f0aeda63710c175ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6aa350c71859759cff6785b1e64ed348362a7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTvRVCRBK7hj4Ov3rIwAAdHIIAJLtDt1NtY4WTe1VKxQYzPpX\ndbOtP2POWA2BjCTqyZSViquaFqDK5+0u2IprUXYpqcTuh1SnzNoAJk4zYqexT4C5\n/V4ehtlvHkOsIc6RcLUg0zUSQD5heojWjr8saIB/EgO/WfFbwyDI6IzFC03X4h/6\noBm7MB2MeGjqhDa81p3/kL/3F4/4fFIv3sRhc62nWnKup2ysWz2z1N8cci8yIEmr\njNxGwg15ah1bZkbgniwoKHwv5sxdYzLPCcoE9KIs2l0DX4EW2mMy5ukc3aR4RF54\nJw1lFp22pxnNSf5+/e/gisEWKlvofCTds59mK5/LXcByezhfYTXy/AHzIcW2IqU=\n=O9qU\n-----END PGP SIGNATURE-----\n", "payload": "tree 047864dfc6f803dbc5c217f0aeda63710c175ab9\nparent b01d0b141431665a39637b35cefb336583e4446a\nparent 23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7\nauthor Tyler Mandry <tmandry@gmail.com> 1599009876 -0700\ncommitter GitHub <noreply@github.com> 1599009876 -0700\n\nRollup merge of #76158 - mati865:self-contained-option, r=petrochenkov\n\nStabilise link-self-contained option\n\nMCP has been accepted: https://github.com/rust-lang/compiler-team/issues/343\n\nI'll add improved heuristic in next PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6aa350c71859759cff6785b1e64ed348362a7d", "html_url": "https://github.com/rust-lang/rust/commit/4a6aa350c71859759cff6785b1e64ed348362a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6aa350c71859759cff6785b1e64ed348362a7d/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01d0b141431665a39637b35cefb336583e4446a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01d0b141431665a39637b35cefb336583e4446a", "html_url": "https://github.com/rust-lang/rust/commit/b01d0b141431665a39637b35cefb336583e4446a"}, {"sha": "23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "html_url": "https://github.com/rust-lang/rust/commit/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "8262ae4cdbb866ba834aba517474a44a3c1f48e8", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4a6aa350c71859759cff6785b1e64ed348362a7d", "patch": "@@ -1084,7 +1084,7 @@ fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n \n fn get_object_file_path(sess: &Session, name: &str, self_contained: bool) -> PathBuf {\n     // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n-    if sess.opts.debugging_opts.link_self_contained.is_none()\n+    if sess.opts.cg.link_self_contained.is_none()\n         && sess.target.target.llvm_target.contains(\"windows-gnu\")\n     {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n@@ -1289,7 +1289,7 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n /// Whether we link to our own CRT objects instead of relying on gcc to pull them.\n /// We only provide such support for a very limited number of targets.\n fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n-    if let Some(self_contained) = sess.opts.debugging_opts.link_self_contained {\n+    if let Some(self_contained) = sess.opts.cg.link_self_contained {\n         return self_contained;\n     }\n \n@@ -1499,7 +1499,7 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n /// Add sysroot and other globally set directories to the directory search list.\n fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // Prefer system mingw-w64 libs, see get_crt_libs_path comment for more details.\n-    if sess.opts.debugging_opts.link_self_contained.is_none()\n+    if sess.opts.cg.link_self_contained.is_none()\n         && cfg!(windows)\n         && sess.target.target.llvm_target.contains(\"windows-gnu\")\n     {"}, {"sha": "ada8dc90494bc1194c77d5707149022d2028c890", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=4a6aa350c71859759cff6785b1e64ed348362a7d", "patch": "@@ -402,6 +402,7 @@ fn test_codegen_options_tracking_hash() {\n     // `link_arg` is omitted because it just forwards to `link_args`.\n     untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n     untracked!(link_dead_code, Some(true));\n+    untracked!(link_self_contained, Some(true));\n     untracked!(linker, Some(PathBuf::from(\"linker\")));\n     untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n     untracked!(no_stack_check, true);"}, {"sha": "a28c17917df3b8c4ee614d124acb5745795bc507", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6aa350c71859759cff6785b1e64ed348362a7d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4a6aa350c71859759cff6785b1e64ed348362a7d", "patch": "@@ -750,6 +750,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"keep dead code at link time (useful for code coverage) (default: no)\"),\n+    link_self_contained: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+        \"control whether to link Rust provided C objects/libraries or rely\n+        on C toolchain installed in the system\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n@@ -930,9 +933,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"keep hygiene data after analysis (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n-    link_self_contained: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"control whether to link Rust provided C objects/libraries or rely\n-         on C toolchain installed in the system\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "bed10ca16d326aec62183dbacfd96bbf7a32630c", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a6aa350c71859759cff6785b1e64ed348362a7d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a6aa350c71859759cff6785b1e64ed348362a7d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=4a6aa350c71859759cff6785b1e64ed348362a7d", "patch": "@@ -44,13 +44,13 @@ incremental builds the default is 256 which allows caching to be more granular.\n \n ## control-flow-guard\n \n-This flag controls whether LLVM enables the Windows [Control Flow \n-Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) \n-platform security feature. This flag is currently ignored for non-Windows targets. \n+This flag controls whether LLVM enables the Windows [Control Flow\n+Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)\n+platform security feature. This flag is currently ignored for non-Windows targets.\n It takes one of the following values:\n \n * `y`, `yes`, `on`, `checks`, or no value: enable Control Flow Guard.\n-* `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this \n+* `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this\n should only be used for testing purposes as it does not provide security enforcement).\n * `n`, `no`, `off`: do not enable Control Flow Guard (the default).\n \n@@ -200,6 +200,18 @@ the following values:\n An example of when this flag might be useful is when trying to construct code coverage\n metrics.\n \n+## link-self-contained\n+\n+On targets that support it this flag controls whether the linker will use libraries and objects\n+shipped with Rust instead or those in the system.\n+It takes one of the following values:\n+\n+* no value: rustc will use heuristic to disable self-contained mode if system has necessary tools.\n+* `y`, `yes`, `on`: use only libraries/objects shipped with Rust.\n+* `n`, `no`, or `off`: rely on the user or the linker to provide non-Rust libraries/objects.\n+\n+This allows overriding cases when detection fails or user wants to use shipped libraries.\n+\n ## linker\n \n This flag controls which linker `rustc` invokes to link your code. It takes a"}]}