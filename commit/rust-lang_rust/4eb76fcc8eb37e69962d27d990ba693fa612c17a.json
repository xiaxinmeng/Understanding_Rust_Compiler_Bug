{"sha": "4eb76fcc8eb37e69962d27d990ba693fa612c17a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYjc2ZmNjOGViMzdlNjk5NjJkMjdkOTkwYmE2OTNmYTYxMmMxN2E=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-01T22:09:03Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-12-01T23:41:53Z"}, "message": "Use more std:: instead of core:: in docs for consistency, add more intra doc links", "tree": {"sha": "edfa66e7dcb69bc44f83b177ee71f0bed2c4d819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edfa66e7dcb69bc44f83b177ee71f0bed2c4d819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eb76fcc8eb37e69962d27d990ba693fa612c17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb76fcc8eb37e69962d27d990ba693fa612c17a", "html_url": "https://github.com/rust-lang/rust/commit/4eb76fcc8eb37e69962d27d990ba693fa612c17a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eb76fcc8eb37e69962d27d990ba693fa612c17a/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4926d01ada661d4fbffb0e5b1708ae5463d47b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4926d01ada661d4fbffb0e5b1708ae5463d47b3", "html_url": "https://github.com/rust-lang/rust/commit/c4926d01ada661d4fbffb0e5b1708ae5463d47b3"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "0c65c1c9eb7e9fdc5b4f1b04e82461cec3d36319", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -403,7 +403,7 @@ impl<'a> Arguments<'a> {\n     /// ```rust\n     /// #![feature(fmt_as_str)]\n     ///\n-    /// use core::fmt::Arguments;\n+    /// use std::fmt::Arguments;\n     ///\n     /// fn write_str(_: &str) { /* ... */ }\n     ///"}, {"sha": "560dd25ecff4218961f07cb6a953d414f40a1940", "filename": "library/core/src/future/pending.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -21,7 +21,7 @@ pub struct Pending<T> {\n /// # Examples\n ///\n /// ```no_run\n-/// use core::future;\n+/// use std::future;\n ///\n /// # async fn run() {\n /// let future = future::pending();"}, {"sha": "9ae118e29f1103ee747a4c94d322a551f2f67947", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -3,7 +3,7 @@ use crate::future::Future;\n use crate::pin::Pin;\n use crate::task::{Context, Poll};\n \n-/// Creates a future that wraps a function returning `Poll`.\n+/// Creates a future that wraps a function returning [`Poll`].\n ///\n /// Polling the future delegates to the wrapped function.\n ///\n@@ -13,7 +13,7 @@ use crate::task::{Context, Poll};\n /// #![feature(future_poll_fn)]\n /// # async fn run() {\n /// use core::future::poll_fn;\n-/// use core::task::{Context, Poll};\n+/// use std::task::{Context, Poll};\n ///\n /// fn read_line(_cx: &mut Context<'_>) -> Poll<String> {\n ///     Poll::Ready(\"Hello, World!\".into())\n@@ -31,7 +31,7 @@ where\n     PollFn { f }\n }\n \n-/// A Future that wraps a function returning `Poll`.\n+/// A Future that wraps a function returning [`Poll`].\n ///\n /// This `struct` is created by [`poll_fn()`]. See its\n /// documentation for more."}, {"sha": "b0c7fbb1d7a760ef65d367878d310ee166e7b513", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -33,7 +33,7 @@ impl<T> Future for Ready<T> {\n /// # Examples\n ///\n /// ```\n-/// use core::future;\n+/// use std::future;\n ///\n /// # async fn run() {\n /// let a = future::ready(1);"}, {"sha": "03bb849509ad4f993041b9e241c1807019e3ff8a", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -189,7 +189,7 @@ impl<'a> Location<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::panic::Location;\n+    /// use std::panic::Location;\n     ///\n     /// /// Returns the [`Location`] at which it is called.\n     /// #[track_caller]"}, {"sha": "cbf699000158991d74b6650534bb66d2dcd948b0", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -1,15 +1,18 @@\n-/// Extracts the successful type of a `Poll<T>`.\n+/// Extracts the successful type of a [`Poll<T>`].\n ///\n-/// This macro bakes in propagation of `Pending` signals by returning early.\n+/// This macro bakes in propagation of [`Pending`] signals by returning early.\n+///\n+/// [`Poll<T>`]: crate::task::Poll\n+/// [`Pending`]: crate::task::Poll::Pending\n ///\n /// # Examples\n ///\n /// ```\n /// #![feature(ready_macro)]\n ///\n-/// use core::task::{ready, Context, Poll};\n-/// use core::future::{self, Future};\n-/// use core::pin::Pin;\n+/// use std::task::{ready, Context, Poll};\n+/// use std::future::{self, Future};\n+/// use std::pin::Pin;\n ///\n /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n ///     let mut fut = future::ready(42);\n@@ -28,9 +31,9 @@\n /// ```\n /// # #![feature(ready_macro)]\n /// #\n-/// # use core::task::{Context, Poll};\n-/// # use core::future::{self, Future};\n-/// # use core::pin::Pin;\n+/// # use std::task::{Context, Poll};\n+/// # use std::future::{self, Future};\n+/// # use std::pin::Pin;\n /// #\n /// # pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n ///     # let mut fut = future::ready(42);"}, {"sha": "55171ef2292d718f9155bc4078ea16ad7b4d4c07", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eb76fcc8eb37e69962d27d990ba693fa612c17a/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=4eb76fcc8eb37e69962d27d990ba693fa612c17a", "patch": "@@ -198,7 +198,7 @@ mod prim_bool {}\n /// words, they can't return `!` from every code path. As an example, this code doesn't compile:\n ///\n /// ```compile_fail\n-/// use core::ops::Add;\n+/// use std::ops::Add;\n ///\n /// fn foo() -> impl Add<u32> {\n ///     unimplemented!()\n@@ -208,7 +208,7 @@ mod prim_bool {}\n /// But this code does:\n ///\n /// ```\n-/// use core::ops::Add;\n+/// use std::ops::Add;\n ///\n /// fn foo() -> impl Add<u32> {\n ///     if true {"}]}