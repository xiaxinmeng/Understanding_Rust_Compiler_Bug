{"sha": "2231545ebf83901ced90d469b891b04a1fe89b97", "node_id": "C_kwDOAAsO6NoAKDIyMzE1NDVlYmY4MzkwMWNlZDkwZDQ2OWI4OTFiMDRhMWZlODliOTc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-01T12:00:21Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-01T12:00:21Z"}, "message": "Use pointer_ty instead of func.dfg.value_type\n\nThis fixes a borrowck error with the current main branch of Cranelift.", "tree": {"sha": "4b619411e29973b64c8437f1d89ab8bc9772f91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b619411e29973b64c8437f1d89ab8bc9772f91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2231545ebf83901ced90d469b891b04a1fe89b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2231545ebf83901ced90d469b891b04a1fe89b97", "html_url": "https://github.com/rust-lang/rust/commit/2231545ebf83901ced90d469b891b04a1fe89b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2231545ebf83901ced90d469b891b04a1fe89b97/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcc936a5aeea322cec6d1f04d5323d11e033723", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcc936a5aeea322cec6d1f04d5323d11e033723", "html_url": "https://github.com/rust-lang/rust/commit/2bcc936a5aeea322cec6d1f04d5323d11e033723"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "186772d807d1fda1603157a578655670075e71cf", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2231545ebf83901ced90d469b891b04a1fe89b97/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2231545ebf83901ced90d469b891b04a1fe89b97/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=2231545ebf83901ced90d469b891b04a1fe89b97", "patch": "@@ -1216,7 +1216,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n                 call_conv: fx.target_config.default_call_conv,\n-                params: vec![AbiParam::new(fx.bcx.func.dfg.value_type(data))],\n+                params: vec![AbiParam::new(pointer_ty(fx.tcx))],\n                 returns: vec![],\n             });\n "}]}