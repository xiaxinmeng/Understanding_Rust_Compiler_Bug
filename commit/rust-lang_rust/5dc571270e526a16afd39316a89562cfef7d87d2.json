{"sha": "5dc571270e526a16afd39316a89562cfef7d87d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzU3MTI3MGU1MjZhMTZhZmQzOTMxNmE4OTU2MmNmZWY3ZDg3ZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-12T03:42:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-12T03:42:28Z"}, "message": "Rollup merge of #58367 - nnethercote:rm-two-dead-funcs, r=alexcrichton\n\nRemove two dead functions.", "tree": {"sha": "81647411dc8e27a9e11f0f989338e5f6140be57e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81647411dc8e27a9e11f0f989338e5f6140be57e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc571270e526a16afd39316a89562cfef7d87d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYkCkCRBK7hj4Ov3rIwAAdHIIAF3JlZlvC219X3cGq3JdvFSj\np8aVPkz6yOCFx6SeJrUeK0oKorSQBNtGPpspgTwe8qx3di6bYonxudG5BW2LoK+E\nXoqHXFuk9MC5T/p6rNVuiau6cH+GlFK8Pkp6VgeFKWYIKeioc7R5pJiRuY8vb43n\n0y839d0uL1Mj721Qy0Hnk9FfMVigWkkP1LMeLiR4roPVwXqzstIBDrb+fSvjglba\nixZnsnwumlyCL593SEeCd9gdPBfDfjL1F+AM7OOQZZNe5xZcM+9Qr6hnkjLPbMl1\nDip+i2ZDbqST6EhCSaQIDO8Xjw46PSEUI+3zg8cv71Q5duJuriKOZ+ZaS8GAzXs=\n=1zfd\n-----END PGP SIGNATURE-----\n", "payload": "tree 81647411dc8e27a9e11f0f989338e5f6140be57e\nparent f04d0852f5b18df4ee76736edefa375164c8742b\nparent c80466cb97d99cb5f226de6536f1f9a4022a7c97\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549942948 +0100\ncommitter GitHub <noreply@github.com> 1549942948 +0100\n\nRollup merge of #58367 - nnethercote:rm-two-dead-funcs, r=alexcrichton\n\nRemove two dead functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc571270e526a16afd39316a89562cfef7d87d2", "html_url": "https://github.com/rust-lang/rust/commit/5dc571270e526a16afd39316a89562cfef7d87d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc571270e526a16afd39316a89562cfef7d87d2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04d0852f5b18df4ee76736edefa375164c8742b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04d0852f5b18df4ee76736edefa375164c8742b", "html_url": "https://github.com/rust-lang/rust/commit/f04d0852f5b18df4ee76736edefa375164c8742b"}, {"sha": "c80466cb97d99cb5f226de6536f1f9a4022a7c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c80466cb97d99cb5f226de6536f1f9a4022a7c97", "html_url": "https://github.com/rust-lang/rust/commit/c80466cb97d99cb5f226de6536f1f9a4022a7c97"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "dabe1755b0bb63f42d5f524389b5624c68eba1fa", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dc571270e526a16afd39316a89562cfef7d87d2/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc571270e526a16afd39316a89562cfef7d87d2/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5dc571270e526a16afd39316a89562cfef7d87d2", "patch": "@@ -1291,14 +1291,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         value.visit_with(&mut r)\n     }\n \n-    pub fn resolve_type_and_region_vars_if_possible<T>(&self, value: &T) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut r = resolve::OpportunisticTypeAndRegionResolver::new(self);\n-        value.fold_with(&mut r)\n-    }\n-\n     pub fn fully_resolve<T: TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<T> {\n         /*!\n          * Attempts to resolve all type/region variables in"}, {"sha": "551554b7e7f1259a391cc7286e13c6910efe6127", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5dc571270e526a16afd39316a89562cfef7d87d2/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc571270e526a16afd39316a89562cfef7d87d2/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=5dc571270e526a16afd39316a89562cfef7d87d2", "patch": "@@ -586,31 +586,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }).0\n     }\n \n-    /// Flattens multiple binding levels into one. So `for<'a> for<'b> Foo`\n-    /// becomes `for<'a,'b> Foo`.\n-    pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)\n-                                         -> Binder<T>\n-        where T: TypeFoldable<'tcx>\n-    {\n-        let bound0_value = bound2_value.skip_binder().skip_binder();\n-        let value = self.fold_regions(bound0_value, &mut false, |region, current_depth| {\n-            match *region {\n-                ty::ReLateBound(debruijn, br) => {\n-                    // We assume no regions bound *outside* of the\n-                    // binders in `bound2_value` (nmatsakis added in\n-                    // the course of this PR; seems like a reasonable\n-                    // sanity check though).\n-                    assert!(debruijn == current_depth);\n-                    self.mk_region(ty::ReLateBound(current_depth, br))\n-                }\n-                _ => {\n-                    region\n-                }\n-            }\n-        });\n-        Binder::bind(value)\n-    }\n-\n     /// Returns a set of all late-bound regions that are constrained\n     /// by `value`, meaning that if we instantiate those LBR with\n     /// variables and equate `value` with something else, those"}]}