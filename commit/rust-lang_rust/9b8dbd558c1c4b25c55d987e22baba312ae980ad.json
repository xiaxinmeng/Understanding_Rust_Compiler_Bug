{"sha": "9b8dbd558c1c4b25c55d987e22baba312ae980ad", "node_id": "C_kwDOAAsO6NoAKDliOGRiZDU1OGMxYzRiMjVjNTVkOTg3ZTIyYmFiYTMxMmFlOTgwYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T06:20:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-10T06:20:01Z"}, "message": "Auto merge of #107870 - matthiaskrgr:rollup-3z1q4rm, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #107043 (Support `true` and `false` as boolean flag params)\n - #107831 (Query refactoring)\n - #107841 (Handled snap curl issue inside Rust)\n - #107852 (rustdoc: remove unused fn parameter `tab`)\n - #107861 (Sync release notes for 1.67.1)\n - #107863 (Allow multiple candidates with same response in new solver)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "01a4fc75c18238e8a06732a498dc5b5d6634d1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01a4fc75c18238e8a06732a498dc5b5d6634d1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b8dbd558c1c4b25c55d987e22baba312ae980ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b8dbd558c1c4b25c55d987e22baba312ae980ad", "html_url": "https://github.com/rust-lang/rust/commit/9b8dbd558c1c4b25c55d987e22baba312ae980ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b8dbd558c1c4b25c55d987e22baba312ae980ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6975734632c4771edd45ef10e7d4753541d0f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6975734632c4771edd45ef10e7d4753541d0f3a", "html_url": "https://github.com/rust-lang/rust/commit/a6975734632c4771edd45ef10e7d4753541d0f3a"}, {"sha": "9300617dab0618896db6eb72ef42c0a180d841b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9300617dab0618896db6eb72ef42c0a180d841b2", "html_url": "https://github.com/rust-lang/rust/commit/9300617dab0618896db6eb72ef42c0a180d841b2"}], "stats": {"total": 232, "additions": 112, "deletions": 120}, "files": [{"sha": "1ddf8cadd72800c621415fd630c7414bf5eef970", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -4773,6 +4773,7 @@ checksum = \"8ba09476327c4b70ccefb6180f046ef588c26a24cf5d269a9feba316eb4f029f\"\n name = \"rustc_trait_selection\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\","}, {"sha": "00d0171de6dfc7ea7d487038458480cc8563dc7f", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,3 +1,10 @@\n+Version 1.67.1 (2023-02-09)\n+===========================\n+\n+- [Fix interoperability with thin archives.](https://github.com/rust-lang/rust/pull/107360)\n+- [Fix an internal error in the compiler build process.](https://github.com/rust-lang/rust/pull/105624)\n+- [Downgrade `clippy::uninlined_format_args` to pedantic.](https://github.com/rust-lang/rust-clippy/pull/10265)\n+\n Version 1.67.0 (2023-01-26)\n ==========================\n "}, {"sha": "b4a49e1df610c8bedd90e7712dfd8c5b674faebe", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -54,7 +54,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     trace!(\n         \"eval_body_using_ecx: pushing stack frame for global: {}{}\",\n-        with_no_trimmed_paths!(ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n+        with_no_trimmed_paths!(ecx.tcx.def_path_str(cid.instance.def_id())),\n         cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p))\n     );\n "}, {"sha": "1e2441d984ad6cf9f30634fb44d7d43092b88c26", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -203,12 +203,10 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 // rust-lang/rust#57464: `impl Trait` can leak local\n                 // scopes (in manner violating typeck). Therefore, use\n                 // `delay_span_bug` to allow type error over an ICE.\n-                ty::tls::with(|tcx| {\n-                    tcx.sess.delay_span_bug(\n-                        rustc_span::DUMMY_SP,\n-                        &format!(\"unexpected region in query response: `{:?}`\", r),\n-                    );\n-                });\n+                canonicalizer.tcx.sess.delay_span_bug(\n+                    rustc_span::DUMMY_SP,\n+                    &format!(\"unexpected region in query response: `{:?}`\", r),\n+                );\n                 r\n             }\n         }"}, {"sha": "bc6d7c209971c84f9c5d78f72c1bb9cfb9bd2083", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -38,7 +38,7 @@ fn track_diagnostic(diagnostic: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnost\n \n             // Diagnostics are tracked, we can ignore the dependency.\n             let icx = tls::ImplicitCtxt { task_deps: TaskDepsRef::Ignore, ..icx.clone() };\n-            return tls::enter_context(&icx, move |_| (*f)(diagnostic));\n+            return tls::enter_context(&icx, move || (*f)(diagnostic));\n         }\n \n         // In any other case, invoke diagnostics anyway."}, {"sha": "33ebbb411ceb6824716e3c443e77f22021a27d98", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -738,30 +738,16 @@ pub static DEFAULT_EXTERN_QUERY_PROVIDERS: LazyLock<ExternProviders> = LazyLock:\n     extern_providers\n });\n \n-pub struct QueryContext<'tcx> {\n-    gcx: &'tcx GlobalCtxt<'tcx>,\n-}\n-\n-impl<'tcx> QueryContext<'tcx> {\n-    pub fn enter<F, R>(&mut self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let icx = ty::tls::ImplicitCtxt::new(self.gcx);\n-        ty::tls::enter_context(&icx, |_| f(icx.tcx))\n-    }\n-}\n-\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n     dep_graph: DepGraph,\n     untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n-    global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n-) -> QueryContext<'tcx> {\n+) -> &'tcx GlobalCtxt<'tcx> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n@@ -785,8 +771,8 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let gcx = sess.time(\"setup_global_ctxt\", || {\n-        global_ctxt.get_or_init(move || {\n+    sess.time(\"setup_global_ctxt\", || {\n+        gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n@@ -799,9 +785,7 @@ pub fn create_global_ctxt<'tcx>(\n                 rustc_query_impl::query_callbacks(arena),\n             )\n         })\n-    });\n-\n-    QueryContext { gcx }\n+    })\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "6512695873ef90e88b74306fbc009cf8da24b9ec", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, QueryContext};\n+use crate::passes::{self, BoxedResolver};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -64,7 +64,7 @@ impl<'a, T> std::ops::DerefMut for QueryResult<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> QueryResult<'a, QueryContext<'tcx>> {\n+impl<'a, 'tcx> QueryResult<'a, &'tcx GlobalCtxt<'tcx>> {\n     pub fn enter<T>(&mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n         (*self.0).get_mut().enter(f)\n     }\n@@ -78,7 +78,7 @@ impl<T> Default for Query<T> {\n \n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n-    gcx: OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: OnceCell<GlobalCtxt<'tcx>>,\n     queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n@@ -90,15 +90,16 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    global_ctxt: Query<QueryContext<'tcx>>,\n+    // This just points to what's in `gcx_cell`.\n+    gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n impl<'tcx> Queries<'tcx> {\n     pub fn new(compiler: &'tcx Compiler) -> Queries<'tcx> {\n         Queries {\n             compiler,\n-            gcx: OnceCell::new(),\n+            gcx_cell: OnceCell::new(),\n             queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n@@ -108,7 +109,7 @@ impl<'tcx> Queries<'tcx> {\n             register_plugins: Default::default(),\n             expansion: Default::default(),\n             dep_graph: Default::default(),\n-            global_ctxt: Default::default(),\n+            gcx: Default::default(),\n             ongoing_codegen: Default::default(),\n         }\n     }\n@@ -207,8 +208,8 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, QueryContext<'tcx>>> {\n-        self.global_ctxt.compute(|| {\n+    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n+        self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n@@ -218,18 +219,18 @@ impl<'tcx> Queries<'tcx> {\n                 ast_lowering: untracked_resolver_for_lowering,\n             } = BoxedResolver::to_resolver_outputs(resolver);\n \n-            let mut qcx = passes::create_global_ctxt(\n+            let gcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n-                &self.gcx,\n+                &self.gcx_cell,\n                 &self.arena,\n                 &self.hir_arena,\n             );\n \n-            qcx.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let feed = tcx.feed_unit_query();\n                 feed.resolver_for_lowering(\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n@@ -239,7 +240,7 @@ impl<'tcx> Queries<'tcx> {\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);\n             });\n-            Ok(qcx)\n+            Ok(gcx)\n         })\n     }\n \n@@ -387,7 +388,7 @@ impl Compiler {\n \n         // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n         // since that likely means there was a parse error.\n-        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+        if let Some(Ok(gcx)) = &mut *queries.gcx.result.borrow_mut() {\n             let gcx = gcx.get_mut();\n             // We assume that no queries are run past here. If there are new queries\n             // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "2e82efba1924efa0bde696ae7f02c133bcbd2a97", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -55,7 +55,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         ty::tls::with_context(|icx| {\n             let icx = ty::tls::ImplicitCtxt { task_deps, ..icx.clone() };\n \n-            ty::tls::enter_context(&icx, |_| op())\n+            ty::tls::enter_context(&icx, op)\n         })\n     }\n "}, {"sha": "56df1a66f9d29da7f705c0948b58cc79e46da58f", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -34,6 +34,7 @@\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n #![feature(iter_from_generator)]\n+#![feature(local_key_cell_methods)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "d07d9190e011e43da6fc57b5656b6510bbb56780", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -468,6 +468,18 @@ pub struct GlobalCtxt<'tcx> {\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n }\n \n+impl<'tcx> GlobalCtxt<'tcx> {\n+    /// Installs `self` in a `TyCtxt` and `ImplicitCtxt` for the duration of\n+    /// `f`.\n+    pub fn enter<'a: 'tcx, F, R>(&'a self, f: F) -> R\n+    where\n+        F: FnOnce(TyCtxt<'tcx>) -> R,\n+    {\n+        let icx = tls::ImplicitCtxt::new(self);\n+        tls::enter_context(&icx, || f(icx.tcx))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Expects a body and returns its codegen attributes.\n     ///"}, {"sha": "5426ac8d739924d6cfb5637c8481d01db29f619e", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -89,9 +89,8 @@ mod tlv {\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n     #[inline]\n     pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n-        let old = get_tlv();\n-        let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n-        TLV.with(|tlv| tlv.set(value));\n+        let old = TLV.replace(value);\n+        let _reset = rustc_data_structures::OnDrop(move || TLV.set(old));\n         f()\n     }\n }\n@@ -110,9 +109,9 @@ unsafe fn downcast<'a, 'tcx>(context: *const ()) -> &'a ImplicitCtxt<'a, 'tcx> {\n #[inline]\n pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R\n where\n-    F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,\n+    F: FnOnce() -> R,\n {\n-    tlv::with_tlv(erase(context), || f(&context))\n+    tlv::with_tlv(erase(context), f)\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available."}, {"sha": "49309db564ea8a361edbc80287d3d4a68a1ea345", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -124,7 +124,7 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            tls::enter_context(&new_icx, |_| {\n+            tls::enter_context(&new_icx, || {\n                 rustc_data_structures::stack::ensure_sufficient_stack(compute)\n             })\n         })"}, {"sha": "03f45d0fc32bcb25d3904d2355cc790ac9383c11", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -349,7 +349,7 @@ fn build_options<O: Default>(\n #[allow(non_upper_case_globals)]\n mod desc {\n     pub const parse_no_flag: &str = \"no value\";\n-    pub const parse_bool: &str = \"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\";\n+    pub const parse_bool: &str = \"one of: `y`, `yes`, `on`, `true`, `n`, `no`, `off` or `false`\";\n     pub const parse_opt_bool: &str = parse_bool;\n     pub const parse_string: &str = \"a string\";\n     pub const parse_opt_string: &str = parse_string;\n@@ -433,11 +433,11 @@ mod parse {\n     /// Use this for any boolean option that has a static default.\n     pub(crate) fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n         match v {\n-            Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => {\n+            Some(\"y\") | Some(\"yes\") | Some(\"on\") | Some(\"true\") | None => {\n                 *slot = true;\n                 true\n             }\n-            Some(\"n\") | Some(\"no\") | Some(\"off\") => {\n+            Some(\"n\") | Some(\"no\") | Some(\"off\") | Some(\"false\") => {\n                 *slot = false;\n                 true\n             }\n@@ -450,11 +450,11 @@ mod parse {\n     /// other factors, such as other options, or target options.)\n     pub(crate) fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool {\n         match v {\n-            Some(\"y\") | Some(\"yes\") | Some(\"on\") | None => {\n+            Some(\"y\") | Some(\"yes\") | Some(\"on\") | Some(\"true\") | None => {\n                 *slot = Some(true);\n                 true\n             }\n-            Some(\"n\") | Some(\"no\") | Some(\"off\") => {\n+            Some(\"n\") | Some(\"no\") | Some(\"off\") | Some(\"false\") => {\n                 *slot = Some(false);\n                 true\n             }"}, {"sha": "d3eba43b47e95435072df092e44be36bb706278d", "filename": "compiler/rustc_trait_selection/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2FCargo.toml?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -24,3 +24,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_transmute = { path = \"../rustc_transmute\", features = [\"rustc\"] }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n+itertools = \"0.10.1\""}, {"sha": "126ec60b3d68a078ca8cc2e087f236b28760c1ba", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -4,6 +4,7 @@ use super::infcx_ext::InferCtxtExt;\n #[cfg(doc)]\n use super::trait_goals::structural_traits::*;\n use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n+use itertools::Itertools;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::elaborate_predicates;\n@@ -489,9 +490,9 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 i += 1;\n             }\n \n-            // If there are *STILL* multiple candidates, give up\n-            // and report ambiguity.\n-            if candidates.len() > 1 {\n+            // If there are *STILL* multiple candidates that have *different* response\n+            // results, give up and report ambiguity.\n+            if candidates.len() > 1 && !candidates.iter().map(|cand| cand.result).all_equal() {\n                 let certainty = if candidates.iter().all(|x| {\n                     matches!(x.result.value.certainty, Certainty::Maybe(MaybeCause::Overflow))\n                 }) {\n@@ -503,6 +504,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             }\n         }\n \n+        // FIXME: What if there are >1 candidates left with the same response, and one is a reservation impl?\n         Ok(self.discard_reservation_impl(candidates.pop().unwrap()).result)\n     }\n "}, {"sha": "2b543520198fb5280fb25a70f1e45e2a4b4c7fd2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -98,6 +98,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n     // obligation\n     fn get_from_await_ty<F>(\n         &self,\n+        tcx: TyCtxt<'tcx>,\n         visitor: AwaitsVisitor,\n         hir: map::Map<'tcx>,\n         ty_matches: F,\n@@ -134,9 +135,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .unwrap_or_else(|| {\n                                             bug!(\n                                                 \"node_type: no type for node {}\",\n-                                                ty::tls::with(|tcx| tcx\n-                                                    .hir()\n-                                                    .node_to_string(await_expr.hir_id))\n+                                                tcx.hir().node_to_string(await_expr.hir_id)\n                                             )\n                                         })\n                                 },\n@@ -2351,7 +2350,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n         let mut interior_or_upvar_span = None;\n \n-        let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n+        let from_awaited_ty = generator_data.get_from_await_ty(self.tcx, visitor, hir, ty_matches);\n         debug!(?from_awaited_ty);\n \n         // The generator interior types share the same binders"}, {"sha": "b9db9f12cdf18092e5154297051fb2aeeb76eaed", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -229,10 +229,10 @@ impl Config {\n             \"--retry\",\n             \"3\",\n             \"-Sf\",\n-            \"-o\",\n         ]);\n-        curl.arg(tempfile);\n         curl.arg(url);\n+        let f = File::create(tempfile).unwrap();\n+        curl.stdout(Stdio::from(f));\n         if !self.check_run(&mut curl) {\n             if self.build.contains(\"windows-msvc\") {\n                 println!(\"Fallback to PowerShell\");"}, {"sha": "c7f120dafeafdeebe1f9a020e2116638477900fa", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -49,19 +49,19 @@ Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)\n platform security feature. This flag is currently ignored for non-Windows targets.\n It takes one of the following values:\n \n-* `y`, `yes`, `on`, `checks`, or no value: enable Control Flow Guard.\n+* `y`, `yes`, `on`, `true`, `checks`, or no value: enable Control Flow Guard.\n * `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this\n should only be used for testing purposes as it does not provide security enforcement).\n-* `n`, `no`, `off`: do not enable Control Flow Guard (the default).\n+* `n`, `no`, `off`, `false`: do not enable Control Flow Guard (the default).\n \n ## debug-assertions\n \n This flag lets you turn `cfg(debug_assertions)` [conditional\n compilation](../../reference/conditional-compilation.md#debug_assertions) on\n or off. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: enable debug-assertions.\n-* `n`, `no`, or `off`: disable debug-assertions.\n+* `y`, `yes`, `on`, `true`, or no value: enable debug-assertions.\n+* `n`, `no`, `off` or `false`: disable debug-assertions.\n \n If not specified, debug assertions are automatically enabled only if the\n [opt-level](#opt-level) is 0.\n@@ -82,8 +82,8 @@ Note: The [`-g` flag][option-g-debug] is an alias for `-C debuginfo=2`.\n This flag controls whether or not the linker includes its default libraries.\n It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: include default libraries (the default).\n-* `n`, `no`, or `off`: exclude default libraries.\n+* `y`, `yes`, `on`, `true` or no value: include default libraries (the default).\n+* `n`, `no`, `off` or `false`: exclude default libraries.\n \n For example, for gcc flavor linkers, this issues the `-nodefaultlibs` flag to\n the linker.\n@@ -93,8 +93,8 @@ the linker.\n This flag controls whether or not the compiler embeds LLVM bitcode into object\n files. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n-* `n`, `no`, or `off`: omit bitcode from rlibs.\n+* `y`, `yes`, `on`, `true` or no value: put bitcode in rlibs (the default).\n+* `n`, `no`, `off` or `false`: omit bitcode from rlibs.\n \n LLVM bitcode is required when rustc is performing link-time optimization (LTO).\n It is also required on some targets like iOS ones where vendors look for LLVM\n@@ -135,8 +135,8 @@ flag][option-emit] for more information.\n This flag forces the use of frame pointers. It takes one of the following\n values:\n \n-* `y`, `yes`, `on`, or no value: force-enable frame pointers.\n-* `n`, `no`, or `off`: do not force-enable frame pointers. This does\n+* `y`, `yes`, `on`, `true` or no value: force-enable frame pointers.\n+* `n`, `no`, `off` or `false`: do not force-enable frame pointers. This does\n   not necessarily mean frame pointers will be removed.\n \n The default behaviour, if frame pointers are not force-enabled, depends on the\n@@ -147,8 +147,8 @@ target.\n This flag forces the generation of unwind tables. It takes one of the following\n values:\n \n-* `y`, `yes`, `on`, or no value: Unwind tables are forced to be generated.\n-* `n`, `no`, or `off`: Unwind tables are not forced to be generated. If unwind\n+* `y`, `yes`, `on`, `true` or no value: Unwind tables are forced to be generated.\n+* `n`, `no`, `off` or `false`: Unwind tables are not forced to be generated. If unwind\n   tables are required by the target an error will be emitted.\n \n The default if not specified depends on the target.\n@@ -202,8 +202,8 @@ options should be separated by spaces.\n This flag controls whether the linker will keep dead code. It takes one of\n the following values:\n \n-* `y`, `yes`, `on`, or no value: keep dead code.\n-* `n`, `no`, or `off`: remove dead code (the default).\n+* `y`, `yes`, `on`, `true` or no value: keep dead code.\n+* `n`, `no`, `off` or `false`: remove dead code (the default).\n \n An example of when this flag might be useful is when trying to construct code coverage\n metrics.\n@@ -215,8 +215,8 @@ linker will use libraries and objects shipped with Rust instead or those in the\n It takes one of the following values:\n \n * no value: rustc will use heuristic to disable self-contained mode if system has necessary tools.\n-* `y`, `yes`, `on`: use only libraries/objects shipped with Rust.\n-* `n`, `no`, or `off`: rely on the user or the linker to provide non-Rust libraries/objects.\n+* `y`, `yes`, `on`, `true`: use only libraries/objects shipped with Rust.\n+* `n`, `no`, `off` or `false`: rely on the user or the linker to provide non-Rust libraries/objects.\n \n This allows overriding cases when detection fails or user wants to use shipped libraries.\n \n@@ -261,8 +261,8 @@ This flag defers LTO optimizations to the linker. See\n [linker-plugin-LTO](../linker-plugin-lto.md) for more details. It takes one of\n the following values:\n \n-* `y`, `yes`, `on`, or no value: enable linker plugin LTO.\n-* `n`, `no`, or `off`: disable linker plugin LTO (the default).\n+* `y`, `yes`, `on`, `true` or no value: enable linker plugin LTO.\n+* `n`, `no`, `off` or `false`: disable linker plugin LTO (the default).\n * A path to the linker plugin.\n \n More specifically this flag will cause the compiler to replace its typical\n@@ -292,9 +292,9 @@ optimizations](https://llvm.org/docs/LinkTimeOptimization.html) to produce\n better optimized code, using whole-program analysis, at the cost of longer\n linking time. It takes one of the following values:\n \n-* `y`, `yes`, `on`, `fat`, or no value: perform \"fat\" LTO which attempts to\n+* `y`, `yes`, `on`, `true`, `fat`, or no value: perform \"fat\" LTO which attempts to\n   perform optimizations across all crates within the dependency graph.\n-* `n`, `no`, `off`: disables LTO.\n+* `n`, `no`, `off`, `false`: disables LTO.\n * `thin`: perform [\"thin\"\n   LTO](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html).\n   This is similar to \"fat\", but takes substantially less time to run while\n@@ -333,8 +333,8 @@ This flag allows you to disable [the\n red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). It takes one\n of the following values:\n \n-* `y`, `yes`, `on`, or no value: disable the red zone.\n-* `n`, `no`, or `off`: enable the red zone.\n+* `y`, `yes`, `on`, `true` or no value: disable the red zone.\n+* `n`, `no`, `off` or `false`: enable the red zone.\n \n The default behaviour, if the flag is not specified, depends on the target.\n \n@@ -376,8 +376,8 @@ overflow](../../reference/expressions/operator-expr.md#overflow). When\n overflow-checks are enabled, a panic will occur on overflow. This flag takes\n one of the following values:\n \n-* `y`, `yes`, `on`, or no value: enable overflow checks.\n-* `n`, `no`, or `off`: disable overflow checks.\n+* `y`, `yes`, `on`, `true` or no value: enable overflow checks.\n+* `n`, `no`, `off` or `false`: disable overflow checks.\n \n If not specified, overflow checks are enabled if\n [debug-assertions](#debug-assertions) are enabled, disabled otherwise.\n@@ -409,8 +409,8 @@ for determining whether or not it is possible to statically or dynamically\n link with a dependency. For example, `cdylib` crate types may only use static\n linkage. This flag takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: use dynamic linking.\n-* `n`, `no`, or `off`: use static linking (the default).\n+* `y`, `yes`, `on`, `true` or no value: use dynamic linking.\n+* `n`, `no`, `off` or `false`: use static linking (the default).\n \n ## profile-generate\n \n@@ -487,24 +487,24 @@ The list of passes should be separated by spaces.\n This flag controls whether [`rpath`](https://en.wikipedia.org/wiki/Rpath) is\n enabled. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: enable rpath.\n-* `n`, `no`, or `off`: disable rpath (the default).\n+* `y`, `yes`, `on`, `true` or no value: enable rpath.\n+* `n`, `no`, `off` or `false`: disable rpath (the default).\n \n ## save-temps\n \n This flag controls whether temporary files generated during compilation are\n deleted once compilation finishes. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: save temporary files.\n-* `n`, `no`, or `off`: delete temporary files (the default).\n+* `y`, `yes`, `on`, `true` or no value: save temporary files.\n+* `n`, `no`, `off` or `false`: delete temporary files (the default).\n \n ## soft-float\n \n This option controls whether `rustc` generates code that emulates floating\n point instructions in software. It takes one of the following values:\n \n-* `y`, `yes`, `on`, or no value: use soft floats.\n-* `n`, `no`, or `off`: use hardware floats (the default).\n+* `y`, `yes`, `on`, `true` or no value: use soft floats.\n+* `n`, `no`, `off` or `false`: use hardware floats (the default).\n \n ## split-debuginfo\n "}, {"sha": "82a51a8467bcd557c4dd3de7736f9268414bf4d0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1109,7 +1109,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_item(w, |w| {\n         render_attributes_in_pre(w, it, \"\");\n-        render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n+        render_union(w, it, Some(&s.generics), &s.fields, cx);\n     });\n \n     document(w, cx, it, None, HeadingOffset::H2);\n@@ -1628,7 +1628,6 @@ fn render_union(\n     it: &clean::Item,\n     g: Option<&clean::Generics>,\n     fields: &[clean::Item],\n-    tab: &str,\n     cx: &Context<'_>,\n ) {\n     let tcx = cx.tcx();\n@@ -1651,7 +1650,7 @@ fn render_union(\n         w.write_str(\" \");\n     }\n \n-    write!(w, \"{{\\n{}\", tab);\n+    write!(w, \"{{\\n\");\n     let count_fields =\n         fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n     let toggle = should_hide_fields(count_fields);\n@@ -1663,17 +1662,16 @@ fn render_union(\n         if let clean::StructFieldItem(ref ty) = *field.kind {\n             write!(\n                 w,\n-                \"    {}{}: {},\\n{}\",\n+                \"    {}{}: {},\\n\",\n                 visibility_print_with_space(field.visibility(tcx), field.item_id, cx),\n                 field.name.unwrap(),\n-                ty.print(cx),\n-                tab\n+                ty.print(cx)\n             );\n         }\n     }\n \n     if it.has_stripped_entries().unwrap() {\n-        write!(w, \"    /* private fields */\\n{}\", tab);\n+        write!(w, \"    /* private fields */\\n\");\n     }\n     if toggle {\n         toggle_close(w);"}, {"sha": "90d6388b70cd8d5493799219dd15191e37bacdaf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -814,9 +814,9 @@ fn main_args(at_args: &[String]) -> MainResult {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n \n-            let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess);\n+            let mut gcx = abort_on_err(queries.global_ctxt(), sess);\n \n-            global_ctxt.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {\n                     core::run_global_ctxt(\n                         tcx,"}, {"sha": "9394868c08db51995ea1bde2472fec0f0673c554", "filename": "tests/codegen/issue-75659.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fcodegen%2Fissue-75659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fcodegen%2Fissue-75659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissue-75659.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,7 +1,7 @@\n // This test checks that the call to memchr/slice_contains is optimized away\n // when searching in small slices.\n \n-// compile-flags: -O -Zinline-mir=no\n+// compile-flags: -O -Zinline-mir=false\n // only-x86_64\n \n #![crate_type = \"lib\"]"}, {"sha": "947099fdd13e7825600fdf2e024bbacbc2ae930f", "filename": "tests/ui/lint/reasons-forbidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Freasons-forbidden.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -8,7 +8,7 @@\n //\n // The test is much cleaner if we deduplicate, though.\n \n-// compile-flags: -Z deduplicate-diagnostics=yes\n+// compile-flags: -Z deduplicate-diagnostics=true\n \n #![forbid(\n     unsafe_code,"}, {"sha": "0e487a700b802ee74aa45025bd6ecf12a86ac41e", "filename": "tests/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -C debug_assertions=yes\n+// compile-flags: -C debug_assertions=true\n // needs-unwind\n // ignore-emscripten dies with an LLVM error\n "}, {"sha": "a8814ce2852865b2a8f4fb21d519bcb4f4a53e75", "filename": "tests/ui/rfc-2091-track-caller/call-chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2091-track-caller%2Fcall-chain.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // revisions: default mir-opt\n-//[default] compile-flags: -Zinline-mir=no\n+//[default] compile-flags: -Zinline-mir=false\n //[mir-opt] compile-flags: -Zmir-opt-level=4\n \n use std::panic::Location;"}, {"sha": "589d34dd7abb1d4dce378e6647139810a63a64c0", "filename": "tests/ui/traits/new-solver/provisional-result-done.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b8dbd558c1c4b25c55d987e22baba312ae980ad/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.rs?ref=9b8dbd558c1c4b25c55d987e22baba312ae980ad", "patch": "@@ -1,5 +1,5 @@\n-// known-bug: unknown\n // compile-flags: -Ztrait-solver=next\n+// check-pass\n \n // This tests checks that we update results in the provisional cache when\n // we pop a goal from the stack."}, {"sha": "5bd0613d25911612d5757accb5200e92354002d7", "filename": "tests/ui/traits/new-solver/provisional-result-done.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6975734632c4771edd45ef10e7d4753541d0f3a/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6975734632c4771edd45ef10e7d4753541d0f3a/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fprovisional-result-done.stderr?ref=a6975734632c4771edd45ef10e7d4753541d0f3a", "patch": "@@ -1,11 +0,0 @@\n-error[E0283]: type annotations needed: cannot satisfy `Bar<T>: Coinductive`\n-  --> $DIR/provisional-result-done.rs:16:25\n-   |\n-LL | impl<T> Coinductive for Bar<T>\n-   |                         ^^^^^^\n-   |\n-   = note: cannot satisfy `Bar<T>: Coinductive`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0283`."}]}