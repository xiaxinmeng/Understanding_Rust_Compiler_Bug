{"sha": "b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NTJhZDNjMGJmMjdkZGZlMGJjMDE4YTVmM2NkNjQ1MzhmNjQzOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T12:52:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-23T12:52:46Z"}, "message": "Auto merge of #5741 - flip1995:rollup-8chbwhy, r=flip1995\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #5178 (clippy-driver: pass all args to rustc if --rustc is present)\n - #5705 (Downgrade unnested_or_patterns to pedantic)\n - #5709 (Fix ICE in consts::binop)\n - #5710 (typo)\n - #5712 (Remove `bar` from blacklisted names)\n - #5713 (Use lints in Clippy that are enabled in rustc bootstrap)\n - #5716 (Fix typo in wildcard_imports)\n - #5724 (redundant_pattern_matching: avoid non-`const fn` calls in const contexts)\n - #5726 (Fix typo)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "d7e6a04fa9baa3e3afd43fa83558605f0b9ceab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e6a04fa9baa3e3afd43fa83558605f0b9ceab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "html_url": "https://github.com/rust-lang/rust/commit/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc2fa933b9c57793523879ff7eac634ea55c64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cc2fa933b9c57793523879ff7eac634ea55c64f", "html_url": "https://github.com/rust-lang/rust/commit/4cc2fa933b9c57793523879ff7eac634ea55c64f"}, {"sha": "e4cbd1df4e79e98170d0da22410c6ac320aba40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cbd1df4e79e98170d0da22410c6ac320aba40f", "html_url": "https://github.com/rust-lang/rust/commit/e4cbd1df4e79e98170d0da22410c6ac320aba40f"}], "stats": {"total": 579, "additions": 454, "deletions": 125}, "files": [{"sha": "2c17c4203ae5c737e8005ae3454656e99619bd99", "filename": ".github/driver.sh", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdriver.sh?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -26,4 +26,16 @@ unset CARGO_MANIFEST_DIR\n sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cstring.stderr > normalized.stderr\n diff normalized.stderr tests/ui/cstring.stderr\n \n+\n+# make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same\n+SYSROOT=`rustc --print sysroot`\n+diff <(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver --rustc --version --verbose) <(rustc --version --verbose)\n+\n+\n+echo \"fn main() {}\" > target/driver_test.rs\n+# we can't run 2 rustcs on the same file at the same time\n+CLIPPY=`LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver ./target/driver_test.rs --rustc`\n+RUSTC=`rustc ./target/driver_test.rs`\n+diff <($CLIPPY) <($RUSTC)\n+\n # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR"}, {"sha": "550752396c7324f7f857199be2c37c34844b605f", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -396,7 +396,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         let l = self.expr(left)?;\n         let r = self.expr(right);\n         match (l, r) {\n-            (Constant::Int(l), Some(Constant::Int(r))) => match self.tables.expr_ty(left).kind {\n+            (Constant::Int(l), Some(Constant::Int(r))) => match self.tables.expr_ty_opt(left)?.kind {\n                 ty::Int(ity) => {\n                     let l = sext(self.lcx.tcx, l, ity);\n                     let r = sext(self.lcx.tcx, r, ity);"}, {"sha": "acd628bbaca596b92ca4f34eed5df3c8bc6fb9fe", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = sync_lock`\n     ///\n     /// **Why is this bad?** This statement immediately drops the lock instead of\n-    /// extending it's lifetime to the end of the scope, which is often not intended.\n+    /// extending its lifetime to the end of the scope, which is often not intended.\n     /// To extend lock lifetime to the end of the scope, use an underscore-prefixed\n     /// name instead (i.e. _lock). If you want to explicitly drop the lock,\n     /// `std::mem::drop` conveys your intention better and is less error-prone."}, {"sha": "19ad7d92c2b37037ec5e94c93503c77b4d9dea18", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,19 +1,22 @@\n // error-pattern:cargo-clippy\n \n #![feature(bindings_after_at)]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(concat_idents)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(drain_filter)]\n #![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n-#![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n #![recursion_limit = \"512\"]\n-#![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n-#![deny(rustc::internal)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n-#![feature(crate_visibility_modifier)]\n-#![feature(concat_idents)]\n-#![feature(drain_filter)]\n+#![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n+#![warn(trivial_casts, trivial_numeric_casts)]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n+// warn on rustc internal lints\n+#![deny(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n@@ -1187,6 +1190,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n         LintId::of(&unicode::UNICODE_NOT_NFC),\n+        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unused_self::UNUSED_SELF),\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n@@ -1440,7 +1444,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1624,7 +1627,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),"}, {"sha": "9020b47a146fab6e851be0f800b3a63d456832dd", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1497,7 +1497,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n     span_high: Option<Span>,\n }\n \n-impl<'a, 'tcx> Delegate<'tcx> for MutatePairDelegate<'a, 'tcx> {\n+impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n@@ -1525,7 +1525,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutatePairDelegate<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutatePairDelegate<'a, 'tcx> {\n+impl MutatePairDelegate<'_, '_> {\n     fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n         (self.span_low, self.span_high)\n     }\n@@ -2292,7 +2292,7 @@ struct HasBreakOrReturnVisitor {\n     has_break_or_return: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n+impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "42200385932b0ee5612e2b9d9c5a28add04d4dbb", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// To fix the lint, and a `Default` implementation that delegates to `new`:\n+    /// To fix the lint, add a `Default` implementation that delegates to `new`:\n     ///\n     /// ```ignore\n     /// struct Foo(Bar);"}, {"sha": "3c528a295b044ba34b2176638d2761de37ad3aad", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,10 +1,13 @@\n-use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_mir::const_eval::is_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Lint for redundant pattern matching over `Result` or\n@@ -64,26 +67,37 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n     arms: &[Arm<'_>],\n     keyword: &'static str,\n ) {\n+    fn find_suggestion(cx: &LateContext<'_, '_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n+        if match_qpath(path, &paths::RESULT_OK) && can_suggest(cx, hir_id, sym!(result_type), \"is_ok\") {\n+            return Some(\"is_ok()\");\n+        }\n+        if match_qpath(path, &paths::RESULT_ERR) && can_suggest(cx, hir_id, sym!(result_type), \"is_err\") {\n+            return Some(\"is_err()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n+            return Some(\"is_some()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n+            return Some(\"is_none()\");\n+        }\n+        None\n+    }\n+\n+    let hir_id = expr.hir_id;\n     let good_method = match arms[0].pat.kind {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n             if let PatKind::Wild = patterns[0].kind {\n-                if match_qpath(path, &paths::RESULT_OK) {\n-                    \"is_ok()\"\n-                } else if match_qpath(path, &paths::RESULT_ERR) {\n-                    \"is_err()\"\n-                } else if match_qpath(path, &paths::OPTION_SOME) {\n-                    \"is_some()\"\n-                } else {\n-                    return;\n-                }\n+                find_suggestion(cx, hir_id, path)\n             } else {\n-                return;\n+                None\n             }\n         },\n-\n-        PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n-\n-        _ => return,\n+        PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n+        _ => None,\n+    };\n+    let good_method = match good_method {\n+        Some(method) => method,\n+        None => return,\n     };\n \n     // check that `while_let_on_iterator` lint does not trigger\n@@ -128,6 +142,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n+        let hir_id = expr.hir_id;\n         let found_good_method = match node_pair {\n             (\n                 PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -142,6 +157,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::RESULT_ERR,\n                         \"is_ok()\",\n                         \"is_err()\",\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_ok\"),\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_err\"),\n                     )\n                 } else {\n                     None\n@@ -160,6 +177,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::OPTION_NONE,\n                         \"is_some()\",\n                         \"is_none()\",\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                     )\n                 } else {\n                     None\n@@ -188,6 +207,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     }\n }\n \n+#[allow(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n@@ -196,6 +216,8 @@ fn find_good_method_for_match<'a>(\n     expected_right: &[&str],\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n+    can_suggest_left: impl Fn() -> bool,\n+    can_suggest_right: impl Fn() -> bool,\n ) -> Option<&'a str> {\n     let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n         (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -207,10 +229,32 @@ fn find_good_method_for_match<'a>(\n \n     match body_node_pair {\n         (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n-            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n             _ => None,\n         },\n         _ => None,\n     }\n }\n+\n+fn can_suggest(cx: &LateContext<'_, '_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n+    if !in_constant(cx, hir_id) {\n+        return true;\n+    }\n+\n+    // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n+    cx.tcx\n+        .get_diagnostic_item(diag_item)\n+        .and_then(|def_id| {\n+            cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n+                cx.tcx\n+                    .associated_items(*imp)\n+                    .in_definition_order()\n+                    .find_map(|item| match item.kind {\n+                        ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n+                        _ => None,\n+                    })\n+            })\n+        })\n+        .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n+}"}, {"sha": "cf71c3144a2ebebac537498f2748d45ca23d1211", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -184,7 +184,7 @@ struct BinaryExprVisitor {\n     in_binary_expr: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n+impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {"}, {"sha": "146ac4b09d5a4ff503bbf43ea09b52f3e4e5366a", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -58,7 +58,7 @@ pub struct TriviallyCopyPassByRef {\n     limit: u64,\n }\n \n-impl<'a, 'tcx> TriviallyCopyPassByRef {\n+impl<'tcx> TriviallyCopyPassByRef {\n     pub fn new(limit: Option<u64>, target: &SessionConfig) -> Self {\n         let limit = limit.unwrap_or_else(|| {\n             let bit_width = u64::from(target.ptr_width);"}, {"sha": "4d3682263f14fdedc14be9209e1806147937190d", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub UNNESTED_OR_PATTERNS,\n-    complexity,\n+    pedantic,\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n "}, {"sha": "c41befbf147b8c2e1567b86f50262ec0c9359009", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -106,8 +106,8 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about\n-    (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"bar\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n+    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n+    (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold, \"cognitive_complexity_threshold\": u64, 25),\n     /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead."}, {"sha": "e919b1522d89a04f12c0140b2e45dfc9a8901a6c", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -509,7 +509,7 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n }\n \n /// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n+pub trait DiagnosticBuilderExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -556,7 +556,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<'a, 'b, 'c, T: LintContext> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n+impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'_> {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}, {"sha": "79f7705e281e542806d081fdae55c5e6549220e0", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// **What it does:** Checks for wildcard imports `use _::*`.\n     ///\n-    /// **Why is this bad?** wildcard imports can polute the namespace. This is especially bad if\n+    /// **Why is this bad?** wildcard imports can pollute the namespace. This is especially bad if\n     /// you try to import something through a wildcard, that already has been imported by name from\n     /// a different source:\n     ///"}, {"sha": "3fca66a5792ccf6a471c4011eac4cf355c053292", "filename": "src/driver.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,9 +1,15 @@\n-#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(rustc_private)]\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n+// warn on rustc internal lints\n+#![deny(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n #[allow(unused_extern_crates)]\n+extern crate rustc_data_structures;\n+#[allow(unused_extern_crates)]\n extern crate rustc_driver;\n #[allow(unused_extern_crates)]\n extern crate rustc_errors;\n@@ -93,7 +99,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n #[allow(clippy::find_map, clippy::filter_map)]\n fn describe_lints() {\n     use lintlist::{Level, Lint, ALL_LINTS, LINT_LEVELS};\n-    use std::collections::HashSet;\n+    use rustc_data_structures::fx::FxHashSet;\n \n     println!(\n         \"\n@@ -137,7 +143,7 @@ Available lint options:\n \n     let scoped = |x: &str| format!(\"clippy::{}\", x);\n \n-    let lint_groups: HashSet<_> = lints.iter().map(|lint| lint.group).collect();\n+    let lint_groups: FxHashSet<_> = lints.iter().map(|lint| lint.group).collect();\n \n     println!(\"Lint checks provided by clippy:\\n\");\n     println!(\"    {}  {:7.7}  meaning\", padded(\"name\"), \"default\");\n@@ -207,6 +213,7 @@ Usage:\n \n Common options:\n     -h, --help               Print this message\n+        --rustc              Pass all args to rustc\n     -V, --version            Print version info and exit\n \n Other options are the same as `cargo check`.\n@@ -297,12 +304,6 @@ pub fn main() {\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n \n-        if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n-            let version_info = rustc_tools_util::get_version_info!();\n-            println!(\"{}\", version_info);\n-            exit(0);\n-        }\n-\n         // Get the sysroot, looking from most specific to this invocation to the least:\n         // - command line\n         // - runtime environment\n@@ -348,6 +349,28 @@ pub fn main() {\n             .map(|pb| pb.to_string_lossy().to_string())\n             .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n+        // make \"clippy-driver --rustc\" work like a subcommand that passes further args to \"rustc\"\n+        // for example `clippy-driver --rustc --version` will print the rustc version that clippy-driver\n+        // uses\n+        if let Some(pos) = orig_args.iter().position(|arg| arg == \"--rustc\") {\n+            orig_args.remove(pos);\n+            orig_args[0] = \"rustc\".to_string();\n+\n+            // if we call \"rustc\", we need to pass --sysroot here as well\n+            let mut args: Vec<String> = orig_args.clone();\n+            if !have_sys_root_arg {\n+                args.extend(vec![\"--sysroot\".into(), sys_root]);\n+            };\n+\n+            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None);\n+        }\n+\n+        if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n+            let version_info = rustc_tools_util::get_version_info!();\n+            println!(\"{}\", version_info);\n+            exit(0);\n+        }\n+\n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n         // We're invoking the compiler programmatically, so we ignore this/\n         let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());"}, {"sha": "edceb75518008e798915dc815e52561662431a31", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -2329,7 +2329,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"unnested_or_patterns\",\n-        group: \"complexity\",\n+        group: \"pedantic\",\n         desc: \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\",\n         deprecation: None,\n         module: \"unnested_or_patterns\","}, {"sha": "6739a4cf2245e5e16a7aed73e135edf3d9ab9424", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,4 +1,6 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n \n use rustc_tools_util::VersionInfo;\n use std::env;"}, {"sha": "cb15bdd2f1b2d4cca8383b2967a535ee3d3ae20f", "filename": "tests/ui/blacklisted_name.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -12,29 +12,34 @@ fn test(foo: ()) {}\n \n fn main() {\n     let foo = 42;\n-    let bar = 42;\n     let baz = 42;\n+    let quux = 42;\n+    // Unlike these others, `bar` is actually considered an acceptable name.\n+    // Among many other legitimate uses, bar commonly refers to a period of time in music.\n+    // See https://github.com/rust-lang/rust-clippy/issues/5225.\n+    let bar = 42;\n \n-    let barb = 42;\n-    let barbaric = 42;\n+    let food = 42;\n+    let foodstuffs = 42;\n+    let bazaar = 42;\n \n     match (42, Some(1337), Some(0)) {\n-        (foo, Some(bar), baz @ Some(_)) => (),\n+        (foo, Some(baz), quux @ Some(_)) => (),\n         _ => (),\n     }\n }\n \n fn issue_1647(mut foo: u8) {\n-    let mut bar = 0;\n-    if let Some(mut baz) = Some(42) {}\n+    let mut baz = 0;\n+    if let Some(mut quux) = Some(42) {}\n }\n \n fn issue_1647_ref() {\n-    let ref bar = 0;\n-    if let Some(ref baz) = Some(42) {}\n+    let ref baz = 0;\n+    if let Some(ref quux) = Some(42) {}\n }\n \n fn issue_1647_ref_mut() {\n-    let ref mut bar = 0;\n-    if let Some(ref mut baz) = Some(42) {}\n+    let ref mut baz = 0;\n+    if let Some(ref mut quux) = Some(42) {}\n }"}, {"sha": "70dbdaece8b6bb37083a79cb0d0bafc9b6c00a86", "filename": "tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -12,77 +12,77 @@ error: use of a blacklisted/placeholder name `foo`\n LL |     let foo = 42;\n    |         ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n+error: use of a blacklisted/placeholder name `baz`\n   --> $DIR/blacklisted_name.rs:15:9\n    |\n-LL |     let bar = 42;\n+LL |     let baz = 42;\n    |         ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n+error: use of a blacklisted/placeholder name `quux`\n   --> $DIR/blacklisted_name.rs:16:9\n    |\n-LL |     let baz = 42;\n-   |         ^^^\n+LL |     let quux = 42;\n+   |         ^^^^\n \n error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:22:10\n+  --> $DIR/blacklisted_name.rs:27:10\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n    |          ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:22:20\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:27:20\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n    |                    ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:22:26\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:27:26\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n-   |                          ^^^\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n+   |                          ^^^^\n \n error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:27:19\n+  --> $DIR/blacklisted_name.rs:32:19\n    |\n LL | fn issue_1647(mut foo: u8) {\n    |                   ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:28:13\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:33:13\n    |\n-LL |     let mut bar = 0;\n+LL |     let mut baz = 0;\n    |             ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:29:21\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:34:21\n    |\n-LL |     if let Some(mut baz) = Some(42) {}\n-   |                     ^^^\n+LL |     if let Some(mut quux) = Some(42) {}\n+   |                     ^^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:33:13\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:38:13\n    |\n-LL |     let ref bar = 0;\n+LL |     let ref baz = 0;\n    |             ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:34:21\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:39:21\n    |\n-LL |     if let Some(ref baz) = Some(42) {}\n-   |                     ^^^\n+LL |     if let Some(ref quux) = Some(42) {}\n+   |                     ^^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:38:17\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:43:17\n    |\n-LL |     let ref mut bar = 0;\n+LL |     let ref mut baz = 0;\n    |                 ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:39:25\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:44:25\n    |\n-LL |     if let Some(ref mut baz) = Some(42) {}\n-   |                         ^^^\n+LL |     if let Some(ref mut quux) = Some(42) {}\n+   |                         ^^^^\n \n error: aborting due to 14 previous errors\n "}, {"sha": "de262199004b025dd1dfebd5c16c98a8ed459589", "filename": "tests/ui/crashes/ice-5389.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fcrashes%2Fice-5389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fcrashes%2Fice-5389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5389.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -0,0 +1,13 @@\n+#![allow(clippy::explicit_counter_loop)]\n+\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    let mut i = 0;\n+    let max_storage_size = [0; 128 * 1024];\n+    for item in &v {\n+        bar(i, *item);\n+        i += 1;\n+    }\n+}\n+\n+fn bar(_: usize, _: u32) {}"}, {"sha": "6ba5cfb1d7177bef814da42575f40ea9b6301a8a", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -67,6 +69,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -117,3 +120,42 @@ fn issue5504() {\n     if m!().is_some() {}\n     while m!().is_some() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "17de66f9ad0ebaef6c44f8124879c2550e690e47", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -88,6 +90,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -138,3 +141,42 @@ fn issue5504() {\n     if let Some(_) = m!() {}\n     while let Some(_) = m!() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "1b9a4b40a2f0210da797e4a7d39a7485bfe20205", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -1,73 +1,73 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:8:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:22:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:26:15\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:32:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:33:15\n+  --> $DIR/redundant_pattern_matching.rs:35:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:49:5\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:54:5\n+  --> $DIR/redundant_pattern_matching.rs:56:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:59:5\n+  --> $DIR/redundant_pattern_matching.rs:61:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:64:5\n+  --> $DIR/redundant_pattern_matching.rs:66:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:5\n+  --> $DIR/redundant_pattern_matching.rs:71:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:74:5\n+  --> $DIR/redundant_pattern_matching.rs:76:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:79:13\n+  --> $DIR/redundant_pattern_matching.rs:81:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,61 +131,61 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:84:20\n+  --> $DIR/redundant_pattern_matching.rs:86:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:87:20\n+  --> $DIR/redundant_pattern_matching.rs:89:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:20\n+  --> $DIR/redundant_pattern_matching.rs:95:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:94:19\n+  --> $DIR/redundant_pattern_matching.rs:97:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:96:19\n+  --> $DIR/redundant_pattern_matching.rs:99:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:98:19\n+  --> $DIR/redundant_pattern_matching.rs:101:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:131:19\n+  --> $DIR/redundant_pattern_matching.rs:134:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:132:16\n+  --> $DIR/redundant_pattern_matching.rs:135:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:138:12\n+  --> $DIR/redundant_pattern_matching.rs:141:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:139:15\n+  --> $DIR/redundant_pattern_matching.rs:142:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`"}, {"sha": "c8bc5458067d35bf1ac7c8e2472f3896423c0990", "filename": "tests/ui/redundant_pattern_matching_const_result.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    while Ok::<i32, i32>(10).is_ok() {}\n+\n+    while Ok::<i32, i32>(10).is_err() {}\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "75f37ec15c6222ea894999b3e483bb12e86c07f5", "filename": "tests/ui/redundant_pattern_matching_const_result.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -0,0 +1,52 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "c32292f0eee8b473e47e8360d3ddde92dba55dbf", "filename": "tests/ui/redundant_pattern_matching_const_result.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b452ad3c0bf27ddfe0bc018a5f3cd64538f64399/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=b452ad3c0bf27ddfe0bc018a5f3cd64538f64399", "patch": "@@ -0,0 +1,46 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:14:12\n+   |\n+LL |     if let Err(_) = Err::<i32, i32>(42) {}\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:18:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:20:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         Err(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:25:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         Err(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: aborting due to 6 previous errors\n+"}]}