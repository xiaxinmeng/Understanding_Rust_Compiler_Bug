{"sha": "ad48d52a74e3e20fb1ecefaece7312cca90ab950", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDhkNTJhNzRlM2UyMGZiMWVjZWZhZWNlNzMxMmNjYTkwYWI5NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T16:43:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T16:43:02Z"}, "message": "Auto merge of #71231 - cuviper:rustc_or_patterns, r=Mark-Simulacrum\n\nDogfood more or_patterns in the compiler\n\nAnother step toward the stabilization of `or_patterns`...\n\ncc #54883 @Centril\nr? @Mark-Simulacrum", "tree": {"sha": "54fb05f0cc472ef126587412538b75e42ec8d109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54fb05f0cc472ef126587412538b75e42ec8d109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad48d52a74e3e20fb1ecefaece7312cca90ab950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad48d52a74e3e20fb1ecefaece7312cca90ab950", "html_url": "https://github.com/rust-lang/rust/commit/ad48d52a74e3e20fb1ecefaece7312cca90ab950", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad48d52a74e3e20fb1ecefaece7312cca90ab950/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b7dec9e449bb00c7901577abbded39738652b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7dec9e449bb00c7901577abbded39738652b51", "html_url": "https://github.com/rust-lang/rust/commit/1b7dec9e449bb00c7901577abbded39738652b51"}, {"sha": "7b005c5fcb743e97b3cafee951b19fe7e51753c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b005c5fcb743e97b3cafee951b19fe7e51753c8", "html_url": "https://github.com/rust-lang/rust/commit/7b005c5fcb743e97b3cafee951b19fe7e51753c8"}], "stats": {"total": 1447, "additions": 759, "deletions": 688}, "files": [{"sha": "29276eead71ded9406d2260ce9917c8a31046b32", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -10,6 +10,7 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(unicode_internals)]\n #![feature(bool_to_option)]\n@@ -482,7 +483,7 @@ impl<'a> Parser<'a> {\n         // fill character\n         if let Some(&(_, c)) = self.cur.peek() {\n             match self.cur.clone().nth(1) {\n-                Some((_, '>')) | Some((_, '<')) | Some((_, '^')) => {\n+                Some((_, '>' | '<' | '^')) => {\n                     spec.fill = Some(c);\n                     self.cur.next();\n                 }"}, {"sha": "e3d941cad7ae5810b95abeae3403c25e3c8b78d0", "filename": "src/librustc_apfloat/ieee.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fieee.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -744,7 +744,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n                 Status::OK\n             }\n \n-            (Category::Zero, _) | (_, Category::NaN) | (_, Category::Infinity) => {\n+            (Category::Zero, _) | (_, Category::NaN | Category::Infinity) => {\n                 self = rhs;\n                 Status::OK\n             }\n@@ -954,7 +954,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n                 Status::INVALID_OP.and(Self::NAN)\n             }\n \n-            (Category::Infinity, _) | (Category::Zero, _) => Status::OK.and(self),\n+            (Category::Infinity | Category::Zero, _) => Status::OK.and(self),\n \n             (Category::Normal, Category::Infinity) => {\n                 self.category = Category::Zero;\n@@ -989,8 +989,7 @@ impl<S: Semantics> Float for IeeeFloat<S> {\n     fn c_fmod(mut self, rhs: Self) -> StatusAnd<Self> {\n         match (self.category, rhs.category) {\n             (Category::NaN, _)\n-            | (Category::Zero, Category::Infinity)\n-            | (Category::Zero, Category::Normal)\n+            | (Category::Zero, Category::Infinity | Category::Normal)\n             | (Category::Normal, Category::Infinity) => Status::OK.and(self),\n \n             (_, Category::NaN) => {"}, {"sha": "09a069ab3136db8845c776e69fe2444fea98ed1d", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -34,6 +34,7 @@\n #![no_std]\n #![forbid(unsafe_code)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n \n #[macro_use]\n extern crate alloc;"}, {"sha": "4ae8edf3157eb3b8665372412489778dc5288341", "filename": "src/librustc_apfloat/ppc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Fppc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_apfloat%2Fppc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Fppc.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -186,9 +186,7 @@ where\n                 Status::OK.and(self)\n             }\n \n-            (Category::Zero, _) | (_, Category::NaN) | (_, Category::Infinity) => {\n-                Status::OK.and(rhs)\n-            }\n+            (Category::Zero, _) | (_, Category::NaN | Category::Infinity) => Status::OK.and(rhs),\n \n             (Category::Normal, Category::Normal) => {\n                 let mut status = Status::OK;\n@@ -288,9 +286,9 @@ where\n                 Status::OK.and(Self::NAN)\n             }\n \n-            (Category::Zero, _) | (Category::Infinity, _) => Status::OK.and(self),\n+            (Category::Zero | Category::Infinity, _) => Status::OK.and(self),\n \n-            (_, Category::Zero) | (_, Category::Infinity) => Status::OK.and(rhs),\n+            (_, Category::Zero | Category::Infinity) => Status::OK.and(rhs),\n \n             (Category::Normal, Category::Normal) => {\n                 let mut status = Status::OK;"}, {"sha": "518e906f6ea304ba73a266a388222a1937704212", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1569,8 +1569,7 @@ impl LitKind {\n     pub fn is_suffixed(&self) -> bool {\n         match *self {\n             // suffixed variants\n-            LitKind::Int(_, LitIntType::Signed(..))\n-            | LitKind::Int(_, LitIntType::Unsigned(..))\n+            LitKind::Int(_, LitIntType::Signed(..) | LitIntType::Unsigned(..))\n             | LitKind::Float(_, LitFloatType::Suffixed(..)) => true,\n             // unsuffixed variants\n             LitKind::Str(..)"}, {"sha": "588d250c1bcfa9a1520365dfe2824c2764580a19", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -442,8 +442,10 @@ impl MetaItem {\n     {\n         // FIXME: Share code with `parse_path`.\n         let path = match tokens.next().map(TokenTree::uninterpolate) {\n-            Some(TokenTree::Token(Token { kind: kind @ token::Ident(..), span }))\n-            | Some(TokenTree::Token(Token { kind: kind @ token::ModSep, span })) => 'arm: {\n+            Some(TokenTree::Token(Token {\n+                kind: kind @ (token::Ident(..) | token::ModSep),\n+                span,\n+            })) => 'arm: {\n                 let mut segments = if let token::Ident(name, _) = kind {\n                     if let Some(TokenTree::Token(Token { kind: token::ModSep, .. })) = tokens.peek()\n                     {"}, {"sha": "f81622d091400f538afca113087068d98545e278", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -14,6 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n #![recursion_limit = \"256\"]"}, {"sha": "9874754fcd2f7e4b3ce325d03c9fd1cd9031af4e", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -226,11 +226,11 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n             rustc_lexer::TokenKind::BlockComment { terminated: _ } => {\n                 if !is_block_doc_comment(token_text) {\n                     let code_to_the_right = match text[pos + token.len..].chars().next() {\n-                        Some('\\r') | Some('\\n') => false,\n+                        Some('\\r' | '\\n') => false,\n                         _ => true,\n                     };\n                     let style = match (code_to_the_left, code_to_the_right) {\n-                        (true, true) | (false, true) => Mixed,\n+                        (_, true) => Mixed,\n                         (false, false) => Isolated,\n                         (true, false) => Trailing,\n                     };"}, {"sha": "47dd757823be2cbbe734d1ce25aa28a3cabed245", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1239,16 +1239,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let bounds =\n                         this.arena.alloc_from_iter(bounds.iter().filter_map(\n                             |bound| match *bound {\n-                                GenericBound::Trait(ref ty, TraitBoundModifier::None)\n-                                | GenericBound::Trait(ref ty, TraitBoundModifier::MaybeConst) => {\n-                                    Some(this.lower_poly_trait_ref(ty, itctx.reborrow()))\n-                                }\n+                                GenericBound::Trait(\n+                                    ref ty,\n+                                    TraitBoundModifier::None | TraitBoundModifier::MaybeConst,\n+                                ) => Some(this.lower_poly_trait_ref(ty, itctx.reborrow())),\n                                 // `?const ?Bound` will cause an error during AST validation\n                                 // anyways, so treat it like `?Bound` as compilation proceeds.\n-                                GenericBound::Trait(_, TraitBoundModifier::Maybe)\n-                                | GenericBound::Trait(_, TraitBoundModifier::MaybeConstMaybe) => {\n-                                    None\n-                                }\n+                                GenericBound::Trait(\n+                                    _,\n+                                    TraitBoundModifier::Maybe | TraitBoundModifier::MaybeConstMaybe,\n+                                ) => None,\n                                 GenericBound::Outlives(ref lifetime) => {\n                                     if lifetime_bound.is_none() {\n                                         lifetime_bound = Some(this.lower_lifetime(lifetime));\n@@ -1740,8 +1740,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n                 let is_mutable_pat = match arg.pat.kind {\n-                    PatKind::Ident(BindingMode::ByValue(mt), _, _)\n-                    | PatKind::Ident(BindingMode::ByRef(mt), _, _) => mt == Mutability::Mut,\n+                    PatKind::Ident(BindingMode::ByValue(mt) | BindingMode::ByRef(mt), _, _) => {\n+                        mt == Mutability::Mut\n+                    }\n                     _ => false,\n                 };\n \n@@ -2468,7 +2469,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir::QPath::Resolved(None, path) => {\n                 // Turn trait object paths into `TyKind::TraitObject` instead.\n                 match path.res {\n-                    Res::Def(DefKind::Trait, _) | Res::Def(DefKind::TraitAlias, _) => {\n+                    Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => {\n                         let principal = hir::PolyTraitRef {\n                             bound_generic_params: &[],\n                             trait_ref: hir::TraitRef { path, hir_ref_id: hir_id },"}, {"sha": "28469dc5367be851b685d5a6152019f6835f469a", "filename": "src/librustc_ast_lowering/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_lowering%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_lowering%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpat.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -194,7 +194,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::PatKind<'hir> {\n         match self.resolver.get_partial_res(p.id).map(|d| d.base_res()) {\n             // `None` can occur in body-less function signatures\n-            res @ None | res @ Some(Res::Local(_)) => {\n+            res @ (None | Some(Res::Local(_))) => {\n                 let canonical_id = match res {\n                     Some(Res::Local(id)) => id,\n                     _ => p.id,"}, {"sha": "9adc6c604e8abe8cb4a6fcdf5b7ce08c0064d3a7", "filename": "src/librustc_ast_pretty/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1,5 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n mod helpers;"}, {"sha": "d3d7f486b47b472c5d3d7f9716bfc584bcc8c69e", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1735,8 +1735,9 @@ impl<'a> State<'a> {\n             // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n             // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n             // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n-            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Lt)\n-            | (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Shl) => parser::PREC_FORCE_PAREN,\n+            (&ast::ExprKind::Cast { .. }, ast::BinOpKind::Lt | ast::BinOpKind::Shl) => {\n+                parser::PREC_FORCE_PAREN\n+            }\n             // We are given `(let _ = a) OP b`.\n             //\n             // - When `OP <= LAnd` we should print `let _ = a OP b` to avoid redundant parens"}, {"sha": "4980ba0d9d30df8e86e87b211efad869f0bf4b78", "filename": "src/librustc_builtin_macros/concat.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -26,9 +26,12 @@ pub fn expand_concat(\n                 ast::LitKind::Char(c) => {\n                     accumulator.push(c);\n                 }\n-                ast::LitKind::Int(i, ast::LitIntType::Unsigned(_))\n-                | ast::LitKind::Int(i, ast::LitIntType::Signed(_))\n-                | ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n+                ast::LitKind::Int(\n+                    i,\n+                    ast::LitIntType::Unsigned(_)\n+                    | ast::LitIntType::Signed(_)\n+                    | ast::LitIntType::Unsuffixed,\n+                ) => {\n                     accumulator.push_str(&i.to_string());\n                 }\n                 ast::LitKind::Bool(b) => {"}, {"sha": "595254700e3244007e8408785a7bc98214761c44", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -918,24 +918,15 @@ pub fn expand_preparsed_format_args(\n                     skips.push(*next_pos);\n                     let _ = s.next();\n                 }\n-                ('\\\\', Some((next_pos, '\\n')))\n-                | ('\\\\', Some((next_pos, 'n')))\n-                | ('\\\\', Some((next_pos, 't')))\n-                    if eat_ws =>\n-                {\n+                ('\\\\', Some((next_pos, '\\n' | 'n' | 't'))) if eat_ws => {\n                     skips.push(pos);\n                     skips.push(*next_pos);\n                     let _ = s.next();\n                 }\n-                (' ', _) | ('\\n', _) | ('\\t', _) if eat_ws => {\n+                (' ' | '\\n' | '\\t', _) if eat_ws => {\n                     skips.push(pos);\n                 }\n-                ('\\\\', Some((next_pos, 'n')))\n-                | ('\\\\', Some((next_pos, 't')))\n-                | ('\\\\', Some((next_pos, '0')))\n-                | ('\\\\', Some((next_pos, '\\\\')))\n-                | ('\\\\', Some((next_pos, '\\'')))\n-                | ('\\\\', Some((next_pos, '\\\"'))) => {\n+                ('\\\\', Some((next_pos, 'n' | 't' | '0' | '\\\\' | '\\'' | '\\\"'))) => {\n                     skips.push(*next_pos);\n                     let _ = s.next();\n                 }"}, {"sha": "85cf4c42e9435e60ffffb059373ff8ea36de4858", "filename": "src/librustc_builtin_macros/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat_foreign.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -149,7 +149,7 @@ pub mod printf {\n             };\n \n             let alt = match type_ {\n-                Some(\"x\") | Some(\"X\") => alt,\n+                Some(\"x\" | \"X\") => alt,\n                 _ => false,\n             };\n \n@@ -506,7 +506,7 @@ pub mod printf {\n                     move_to!(next1);\n                 }\n \n-                ('h', _) | ('l', _) | ('L', _) | ('z', _) | ('j', _) | ('t', _) | ('q', _) => {\n+                ('h' | 'l' | 'L' | 'z' | 'j' | 't' | 'q', _) => {\n                     state = Type;\n                     length = Some(at.slice_between(next).unwrap());\n                     move_to!(next);"}, {"sha": "bc1767a1238f81771c6a11b47c680b7501e2392d", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -6,6 +6,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n "}, {"sha": "e12fcd98f9dfe2477ae969931b0bd89d8c9ddd03", "filename": "src/librustc_builtin_macros/llvm_asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fllvm_asm.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -86,8 +86,7 @@ fn parse_inline_asm<'a>(\n     let first_colon = tts\n         .trees()\n         .position(|tt| match tt {\n-            tokenstream::TokenTree::Token(Token { kind: token::Colon, .. })\n-            | tokenstream::TokenTree::Token(Token { kind: token::ModSep, .. }) => true,\n+            tokenstream::TokenTree::Token(Token { kind: token::Colon | token::ModSep, .. }) => true,\n             _ => false,\n         })\n         .unwrap_or(tts.len());"}, {"sha": "ba286e5f40d2d1c86172baac535a5b02a5d73051", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -124,7 +124,7 @@ fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // sanitizer and thread sanitizer. With asan we're already protected from\n     // stack overflow anyway so we don't really need stack probes regardless.\n     match cx.sess().opts.debugging_opts.sanitizer {\n-        Some(Sanitizer::Address) | Some(Sanitizer::Thread) => return,\n+        Some(Sanitizer::Address | Sanitizer::Thread) => return,\n         _ => {}\n     }\n "}, {"sha": "89bd96c1fe214fea70ff06eff5edbe3dc1580ecd", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -310,7 +310,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let new_kind = match ty.kind {\n             Int(t @ Isize) => Int(t.normalize(self.tcx.sess.target.ptr_width)),\n             Uint(t @ Usize) => Uint(t.normalize(self.tcx.sess.target.ptr_width)),\n-            ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n+            ref t @ (Uint(_) | Int(_)) => t.clone(),\n             _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\"),\n         };\n \n@@ -1247,7 +1247,7 @@ impl Builder<'a, 'll, 'tcx> {\n         let emit = match opts.debugging_opts.sanitizer {\n             // Some sanitizer use lifetime intrinsics. When they are in use,\n             // emit lifetime intrinsics regardless of optimization level.\n-            Some(Sanitizer::Address) | Some(Sanitizer::Memory) => true,\n+            Some(Sanitizer::Address | Sanitizer::Memory) => true,\n             _ => opts.optimize != config::OptLevel::No,\n         };\n         if !emit {"}, {"sha": "641586797407b0b24e1c781b335360a81e7e039d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -11,6 +11,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(trusted_len)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "cd7674935e729125f688b1b0f1763f25f43453c2", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -262,7 +262,7 @@ pub fn each_linked_rlib(\n     };\n     for &(cnum, ref path) in crates {\n         match fmts.get(cnum.as_usize() - 1) {\n-            Some(&Linkage::NotLinked) | Some(&Linkage::IncludedFromDylib) => continue,\n+            Some(&Linkage::NotLinked | &Linkage::IncludedFromDylib) => continue,\n             Some(_) => {}\n             None => return Err(\"could not find formats for rlibs\".to_string()),\n         }"}, {"sha": "d5489ff9505aa86887683dee528f3c3aa6f0dcd3", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -86,8 +86,10 @@ fn reachable_non_generics_provider(\n                 }\n \n                 // Only consider nodes that actually have exported symbols.\n-                Node::Item(&hir::Item { kind: hir::ItemKind::Static(..), .. })\n-                | Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n+                Node::Item(&hir::Item {\n+                    kind: hir::ItemKind::Static(..) | hir::ItemKind::Fn(..),\n+                    ..\n+                })\n                 | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) => {\n                     let def_id = tcx.hir().local_def_id(hir_id);\n                     let generics = tcx.generics_of(def_id);"}, {"sha": "a8a5b06006882f1cef8348da2858d3ce56b70f5c", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -182,8 +182,7 @@ pub fn unsize_thin_ptr<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n ) -> (Bx::Value, Bx::Value) {\n     debug!(\"unsize_thin_ptr: {:?} => {:?}\", src_ty, dst_ty);\n     match (&src_ty.kind, &dst_ty.kind) {\n-        (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n-        | (&ty::Ref(_, a, _), &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n+        (&ty::Ref(_, a, _), &ty::Ref(_, b, _) | &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n         | (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }), &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n             assert!(bx.cx().type_is_sized(a));\n             let ptr_ty = bx.cx().type_ptr_to(bx.cx().backend_type(bx.cx().layout_of(b)));\n@@ -232,9 +231,7 @@ pub fn coerce_unsized_into<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let src_ty = src.layout.ty;\n     let dst_ty = dst.layout.ty;\n     match (&src_ty.kind, &dst_ty.kind) {\n-        (&ty::Ref(..), &ty::Ref(..))\n-        | (&ty::Ref(..), &ty::RawPtr(..))\n-        | (&ty::RawPtr(..), &ty::RawPtr(..)) => {\n+        (&ty::Ref(..), &ty::Ref(..) | &ty::RawPtr(..)) | (&ty::RawPtr(..), &ty::RawPtr(..)) => {\n             let (base, info) = match bx.load_operand(src).val {\n                 OperandValue::Pair(base, info) => {\n                     // fat-ptr to fat-ptr unsize preserves the vtable"}, {"sha": "5ba06bd8665b8487c1d2ef8bf9d1bdf6488d4ec9", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -4,6 +4,7 @@\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(trusted_len)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]"}, {"sha": "71b9ff26140f96401a2f4d82b0a2f0827499769b", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -113,8 +113,9 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n \n             // Allow uses of projections that are ZSTs or from scalar fields.\n             let is_consume = match context {\n-                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy)\n-                | PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => true,\n+                PlaceContext::NonMutatingUse(\n+                    NonMutatingUseContext::Copy | NonMutatingUseContext::Move,\n+                ) => true,\n                 _ => false,\n             };\n             if is_consume {\n@@ -274,8 +275,9 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n             PlaceContext::NonUse(_) | PlaceContext::MutatingUse(MutatingUseContext::Retag) => {}\n \n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) => {\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::Copy | NonMutatingUseContext::Move,\n+            ) => {\n                 // Reads from uninitialized variables (e.g., in dead code, after\n                 // optimizations) require locals to be in (uninitialized) memory.\n                 // N.B., there can be uninitialized reads of a local visited after\n@@ -291,17 +293,21 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                 }\n             }\n \n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::Inspect)\n-            | PlaceContext::MutatingUse(MutatingUseContext::Store)\n-            | PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n-            | PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n-            | PlaceContext::MutatingUse(MutatingUseContext::AddressOf)\n-            | PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::AddressOf)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection) => {\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::Store\n+                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::Borrow\n+                | MutatingUseContext::AddressOf\n+                | MutatingUseContext::Projection,\n+            )\n+            | PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::Inspect\n+                | NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::AddressOf\n+                | NonMutatingUseContext::Projection,\n+            ) => {\n                 self.not_ssa(local);\n             }\n "}, {"sha": "c484867a4e2ad83ed5de74bf9abf7d9880f614a6", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandRef<'tcx, V> {\n             }\n \n             // Newtype of a scalar, scalar pair or vector.\n-            (OperandValue::Immediate(_), _) | (OperandValue::Pair(..), _)\n+            (OperandValue::Immediate(_) | OperandValue::Pair(..), _)\n                 if field.size == self.layout.size =>\n             {\n                 assert_eq!(offset.bytes(), 0);"}, {"sha": "b9c59cde53a70c7b3034996dc1f9cf8dc0a54dc5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -277,8 +277,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"unexpected non-pair operand\");\n                         }\n                     }\n-                    mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n-                    | mir::CastKind::Pointer(PointerCast::ArrayToPointer)\n+                    mir::CastKind::Pointer(\n+                        PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n+                    )\n                     | mir::CastKind::Misc => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);\n@@ -358,10 +359,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     bx.uitofp(llval, ll_t_out)\n                                 }\n                             }\n-                            (CastTy::Ptr(_), CastTy::Ptr(_)) | (CastTy::FnPtr, CastTy::Ptr(_)) => {\n+                            (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Ptr(_)) => {\n                                 bx.pointercast(llval, ll_t_out)\n                             }\n-                            (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n+                            (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                                 bx.ptrtoint(llval, ll_t_out)\n                             }\n                             (CastTy::Int(_), CastTy::Ptr(_)) => {"}, {"sha": "1e3ab2c5ec2db36ea8d5f890dac75952b8dc5f90", "filename": "src/librustc_expand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -2,6 +2,7 @@\n #![feature(cow_is_borrowed)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n+#![feature(or_patterns)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "350473ab9ae565b7b002099ab1b6d6ad7aff4ab0", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -588,8 +588,10 @@ fn inner_parse_loop<'root, 'tt>(\n                 //\n                 // At the beginning of the loop, if we reach the end of the delimited submatcher,\n                 // we pop the stack to backtrack out of the descent.\n-                seq @ TokenTree::Delimited(..)\n-                | seq @ TokenTree::Token(Token { kind: DocComment(..), .. }) => {\n+                seq\n+                @\n+                (TokenTree::Delimited(..)\n+                | TokenTree::Token(Token { kind: DocComment(..), .. })) => {\n                     let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));\n                     let idx = item.idx;\n                     item.stack.push(MatcherTtFrame { elts: lower_elts, idx });"}, {"sha": "f19b7fb69c76609742029eda85be551d6547bcc9", "filename": "src/librustc_hir/pat_util.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_hir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_hir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fpat_util.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -62,8 +62,9 @@ impl hir::Pat<'_> {\n         match self.kind {\n             PatKind::Lit(_)\n             | PatKind::Range(..)\n-            | PatKind::Path(hir::QPath::Resolved(Some(..), _))\n-            | PatKind::Path(hir::QPath::TypeRelative(..)) => true,\n+            | PatKind::Path(hir::QPath::Resolved(Some(..), _) | hir::QPath::TypeRelative(..)) => {\n+                true\n+            }\n \n             PatKind::Path(hir::QPath::Resolved(_, ref path))\n             | PatKind::TupleStruct(hir::QPath::Resolved(_, ref path), ..)\n@@ -141,8 +142,12 @@ impl hir::Pat<'_> {\n \n     pub fn simple_ident(&self) -> Option<ast::Ident> {\n         match self.kind {\n-            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, None)\n-            | PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, None) => Some(ident),\n+            PatKind::Binding(\n+                hir::BindingAnnotation::Unannotated | hir::BindingAnnotation::Mutable,\n+                _,\n+                ident,\n+                None,\n+            ) => Some(ident),\n             _ => None,\n         }\n     }\n@@ -155,8 +160,8 @@ impl hir::Pat<'_> {\n             PatKind::Path(hir::QPath::Resolved(_, path))\n             | PatKind::TupleStruct(hir::QPath::Resolved(_, path), ..)\n             | PatKind::Struct(hir::QPath::Resolved(_, path), ..) => {\n-                if let Res::Def(DefKind::Variant, id)\n-                | Res::Def(DefKind::Ctor(CtorOf::Variant, ..), id) = path.res\n+                if let Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Variant, ..), id) =\n+                    path.res\n                 {\n                     variants.push(id);\n                 }"}, {"sha": "dee51355b74e8e0be6d8eddbdc82690a2046e51c", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1,3 +1,4 @@\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n use rustc_ast::ast;\n@@ -1197,8 +1198,9 @@ impl<'a> State<'a> {\n             // These cases need parens: `x as i32 < y` has the parser thinking that `i32 < y` is\n             // the beginning of a path type. It starts trying to parse `x as (i32 < y ...` instead\n             // of `(x as i32) < ...`. We need to convince it _not_ to do that.\n-            (&hir::ExprKind::Cast { .. }, hir::BinOpKind::Lt)\n-            | (&hir::ExprKind::Cast { .. }, hir::BinOpKind::Shl) => parser::PREC_FORCE_PAREN,\n+            (&hir::ExprKind::Cast { .. }, hir::BinOpKind::Lt | hir::BinOpKind::Shl) => {\n+                parser::PREC_FORCE_PAREN\n+            }\n             _ => left_prec,\n         };\n "}, {"sha": "acb9329afbf9ae278cd98b0b89028b6af2efeb35", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -375,9 +375,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                 t,\n             ),\n \n-            ty::Infer(ty::FreshTy(_))\n-            | ty::Infer(ty::FreshIntTy(_))\n-            | ty::Infer(ty::FreshFloatTy(_)) => {\n+            ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n "}, {"sha": "b03044b72da409f5c4dbde02729a9ccdccb6ab12", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -555,7 +555,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) => {\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n                 // No matter what mode we are in,\n                 // integer/floating-point types must be equal to be\n                 // relatable."}, {"sha": "6ae2bd3390131633696274c7d8674387c8abd44b", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -193,7 +193,7 @@ fn msg_span_from_early_bound_and_free_regions(\n     let scope = region.free_region_binding_scope(tcx);\n     let node = tcx.hir().as_local_hir_id(scope).unwrap();\n     let tag = match tcx.hir().find(node) {\n-        Some(Node::Block(_)) | Some(Node::Expr(_)) => \"body\",\n+        Some(Node::Block(_) | Node::Expr(_)) => \"body\",\n         Some(Node::Item(it)) => item_scope_tag(&it),\n         Some(Node::TraitItem(it)) => trait_item_scope_tag(&it),\n         Some(Node::ImplItem(it)) => impl_item_scope_tag(&it),\n@@ -1058,13 +1058,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             match (&a.kind, &b.kind) {\n                 (a, b) if *a == *b => true,\n                 (&ty::Int(_), &ty::Infer(ty::InferTy::IntVar(_)))\n-                | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Int(_))\n-                | (&ty::Infer(ty::InferTy::IntVar(_)), &ty::Infer(ty::InferTy::IntVar(_)))\n+                | (\n+                    &ty::Infer(ty::InferTy::IntVar(_)),\n+                    &ty::Int(_) | &ty::Infer(ty::InferTy::IntVar(_)),\n+                )\n                 | (&ty::Float(_), &ty::Infer(ty::InferTy::FloatVar(_)))\n-                | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::Float(_))\n-                | (&ty::Infer(ty::InferTy::FloatVar(_)), &ty::Infer(ty::InferTy::FloatVar(_))) => {\n-                    true\n-                }\n+                | (\n+                    &ty::Infer(ty::InferTy::FloatVar(_)),\n+                    &ty::Float(_) | &ty::Infer(ty::InferTy::FloatVar(_)),\n+                ) => true,\n                 _ => false,\n             }\n         }"}, {"sha": "448ce373498a884eab2a9102ce9401ab875e9416", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -164,12 +164,17 @@ impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                         }\n                     }\n \n-                    (Some(rl::Region::Static), _)\n-                    | (Some(rl::Region::Free(_, _)), _)\n-                    | (Some(rl::Region::EarlyBound(_, _, _)), _)\n-                    | (Some(rl::Region::LateBound(_, _, _)), _)\n-                    | (Some(rl::Region::LateBoundAnon(_, _)), _)\n-                    | (None, _) => {\n+                    (\n+                        Some(\n+                            rl::Region::Static\n+                            | rl::Region::Free(_, _)\n+                            | rl::Region::EarlyBound(_, _, _)\n+                            | rl::Region::LateBound(_, _, _)\n+                            | rl::Region::LateBoundAnon(_, _),\n+                        )\n+                        | None,\n+                        _,\n+                    ) => {\n                         debug!(\"no arg found\");\n                     }\n                 }\n@@ -244,12 +249,17 @@ impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n                 }\n             }\n \n-            (Some(rl::Region::Static), _)\n-            | (Some(rl::Region::EarlyBound(_, _, _)), _)\n-            | (Some(rl::Region::LateBound(_, _, _)), _)\n-            | (Some(rl::Region::LateBoundAnon(_, _)), _)\n-            | (Some(rl::Region::Free(_, _)), _)\n-            | (None, _) => {\n+            (\n+                Some(\n+                    rl::Region::Static\n+                    | rl::Region::EarlyBound(_, _, _)\n+                    | rl::Region::LateBound(_, _, _)\n+                    | rl::Region::LateBoundAnon(_, _)\n+                    | rl::Region::Free(_, _),\n+                )\n+                | None,\n+                _,\n+            ) => {\n                 debug!(\"no arg found\");\n             }\n         }"}, {"sha": "636cf42198b0d1c0f7a060781a67e37e0921fc96", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -173,9 +173,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 ty::FreshFloatTy,\n             ),\n \n-            ty::Infer(ty::FreshTy(ct))\n-            | ty::Infer(ty::FreshIntTy(ct))\n-            | ty::Infer(ty::FreshFloatTy(ct)) => {\n+            ty::Infer(ty::FreshTy(ct) | ty::FreshIntTy(ct) | ty::FreshFloatTy(ct)) => {\n                 if ct >= self.ty_freshen_count {\n                     bug!(\n                         \"Encountered a freshend type with id {} \\"}, {"sha": "c8d357749784c878c1ef3aa8a4d3d707ee273664", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -512,12 +512,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 self.tcx().lifetimes.re_static\n             }\n \n-            (&ReEmpty(_), r @ ReEarlyBound(_))\n-            | (r @ ReEarlyBound(_), &ReEmpty(_))\n-            | (&ReEmpty(_), r @ ReFree(_))\n-            | (r @ ReFree(_), &ReEmpty(_))\n-            | (&ReEmpty(_), r @ ReScope(_))\n-            | (r @ ReScope(_), &ReEmpty(_)) => {\n+            (&ReEmpty(_), r @ (ReEarlyBound(_) | ReFree(_) | ReScope(_)))\n+            | (r @ (ReEarlyBound(_) | ReFree(_) | ReScope(_)), &ReEmpty(_)) => {\n                 // All empty regions are less than early-bound, free,\n                 // and scope regions.\n                 r\n@@ -542,10 +538,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 }\n             }\n \n-            (&ReEarlyBound(_), &ReScope(s_id))\n-            | (&ReScope(s_id), &ReEarlyBound(_))\n-            | (&ReFree(_), &ReScope(s_id))\n-            | (&ReScope(s_id), &ReFree(_)) => {\n+            (&ReEarlyBound(_) | &ReFree(_), &ReScope(s_id))\n+            | (&ReScope(s_id), &ReEarlyBound(_) | &ReFree(_)) => {\n                 // A \"free\" region can be interpreted as \"some region\n                 // at least as big as fr.scope\".  So, we can\n                 // reasonably compare free regions and scopes:\n@@ -584,10 +578,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 self.tcx().mk_region(ReScope(lub))\n             }\n \n-            (&ReEarlyBound(_), &ReEarlyBound(_))\n-            | (&ReFree(_), &ReEarlyBound(_))\n-            | (&ReEarlyBound(_), &ReFree(_))\n-            | (&ReFree(_), &ReFree(_)) => self.region_rels.lub_free_regions(a, b),\n+            (&ReEarlyBound(_), &ReEarlyBound(_) | &ReFree(_))\n+            | (&ReFree(_), &ReEarlyBound(_) | &ReFree(_)) => {\n+                self.region_rels.lub_free_regions(a, b)\n+            }\n \n             // For these types, we cannot define any additional\n             // relationship:"}, {"sha": "23050a1d5d453ea0d736d2776ac9b1751454dd61", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -904,7 +904,7 @@ where\n                 }\n             }\n \n-            ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_)) => {\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n                 // No matter what mode we are in,\n                 // integer/floating-point types must be equal to be\n                 // relatable."}, {"sha": "06a23269389a7354231a723acbc4b0647f671acc", "filename": "src/librustc_infer/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fenv.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -168,8 +168,10 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n         for outlives_bound in outlives_bounds {\n             debug!(\"add_outlives_bounds: outlives_bound={:?}\", outlives_bound);\n             match outlives_bound {\n-                OutlivesBound::RegionSubRegion(r_a @ &ty::ReEarlyBound(_), &ty::ReVar(vid_b))\n-                | OutlivesBound::RegionSubRegion(r_a @ &ty::ReFree(_), &ty::ReVar(vid_b)) => {\n+                OutlivesBound::RegionSubRegion(\n+                    r_a @ (&ty::ReEarlyBound(_) | &ty::ReFree(_)),\n+                    &ty::ReVar(vid_b),\n+                ) => {\n                     infcx.expect(\"no infcx provided but region vars found\").add_given(r_a, vid_b);\n                 }\n                 OutlivesBound::RegionSubParam(r_a, param_b) => {"}, {"sha": "28d42cea6d300c0a31d37af505c12a63fa2404ab", "filename": "src/librustc_infer/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_infer%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -17,6 +17,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(never_type)]\n+#![feature(or_patterns)]\n #![feature(range_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "8f67fe294eb7375b4f8d8367ae9dd9ddc78223cf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -32,6 +32,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "1d97b28602472355e63de7648c95dea7814b7cf8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -134,7 +134,7 @@ fn get_bin_hex_repr(cx: &LateContext<'_, '_>, lit: &hir::Lit) -> Option<String>\n \n     if firstch == '0' {\n         match src.chars().nth(1) {\n-            Some('x') | Some('b') => return Some(src),\n+            Some('x' | 'b') => return Some(src),\n             _ => return None,\n         }\n     }\n@@ -356,8 +356,7 @@ fn lint_literal<'a, 'tcx>(\n     match cx.tables.node_type(e.hir_id).kind {\n         ty::Int(t) => {\n             match lit.node {\n-                ast::LitKind::Int(v, ast::LitIntType::Signed(_))\n-                | ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => {\n+                ast::LitKind::Int(v, ast::LitIntType::Signed(_) | ast::LitIntType::Unsuffixed) => {\n                     lint_int_literal(cx, type_limits, e, lit, t, v)\n                 }\n                 _ => bug!(),\n@@ -455,8 +454,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i128 = match lit.kind {\n                         hir::ExprKind::Lit(ref li) => match li.node {\n-                            ast::LitKind::Int(v, ast::LitIntType::Signed(_))\n-                            | ast::LitKind::Int(v, ast::LitIntType::Unsuffixed) => v as i128,\n+                            ast::LitKind::Int(\n+                                v,\n+                                ast::LitIntType::Signed(_) | ast::LitIntType::Unsuffixed,\n+                            ) => v as i128,\n                             _ => return true,\n                         },\n                         _ => bug!(),\n@@ -1030,8 +1031,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n             let ty = cx.tcx.erase_regions(&t);\n             let layout = match cx.layout_of(ty) {\n                 Ok(layout) => layout,\n-                Err(ty::layout::LayoutError::Unknown(_))\n-                | Err(ty::layout::LayoutError::SizeOverflow(_)) => return,\n+                Err(\n+                    ty::layout::LayoutError::Unknown(_) | ty::layout::LayoutError::SizeOverflow(_),\n+                ) => return,\n             };\n             let (variants, tag) = match layout.variants {\n                 Variants::Multiple {"}, {"sha": "a3748a3a9fedeaef5cc84d3267fcdfe42f642f62", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -56,9 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 match callee.kind {\n                     hir::ExprKind::Path(ref qpath) => {\n                         match cx.tables.qpath_res(qpath, callee.hir_id) {\n-                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::AssocFn, def_id) => {\n-                                Some(def_id)\n-                            }\n+                            Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) => Some(def_id),\n                             // `Res::Local` if it was a closure, for which we\n                             // do not currently support must-use linting\n                             _ => None,"}, {"sha": "8db107ed68aa5e86d23202866d8046a01b856d30", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -5,6 +5,7 @@\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(proc_macro_internals)]\n #![feature(specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e1ac4d134166814c1f4ba5ea6c4045fab38b4409", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1138,8 +1138,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn mir_const_qualif(&self, id: DefIndex) -> mir::ConstQualifs {\n         match self.kind(id) {\n             EntryKind::Const(qualif, _)\n-            | EntryKind::AssocConst(AssocContainer::ImplDefault, qualif, _)\n-            | EntryKind::AssocConst(AssocContainer::ImplFinal, qualif, _) => qualif,\n+            | EntryKind::AssocConst(\n+                AssocContainer::ImplDefault | AssocContainer::ImplFinal,\n+                qualif,\n+                _,\n+            ) => qualif,\n             _ => bug!(),\n         }\n     }"}, {"sha": "ecf3825dadb2d8fd77fc174a6d7dce07e1e8f44c", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -250,14 +250,11 @@ pub fn provide(providers: &mut Providers<'_>) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibraryKind::NativeUnknown) | Some(NativeLibraryKind::NativeRawDylib) => {\n-                true\n-            }\n+            Some(NativeLibraryKind::NativeUnknown | NativeLibraryKind::NativeRawDylib) => true,\n             _ => false,\n         },\n         is_statically_included_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibraryKind::NativeStatic)\n-            | Some(NativeLibraryKind::NativeStaticNobundle) => true,\n+            Some(NativeLibraryKind::NativeStatic | NativeLibraryKind::NativeStaticNobundle) => true,\n             _ => false,\n         },\n         native_library_kind: |tcx, id| {"}, {"sha": "a734cbc6fe93342bdbf9c148136e661b917da42e", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -420,17 +420,17 @@ impl<'hir> Map<'hir> {\n \n     pub fn ty_param_owner(&self, id: HirId) -> HirId {\n         match self.get(id) {\n-            Node::Item(&Item { kind: ItemKind::Trait(..), .. })\n-            | Node::Item(&Item { kind: ItemKind::TraitAlias(..), .. }) => id,\n+            Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => id,\n             Node::GenericParam(_) => self.get_parent_node(id),\n             _ => bug!(\"ty_param_owner: {} not a type parameter\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn ty_param_name(&self, id: HirId) -> Name {\n         match self.get(id) {\n-            Node::Item(&Item { kind: ItemKind::Trait(..), .. })\n-            | Node::Item(&Item { kind: ItemKind::TraitAlias(..), .. }) => kw::SelfUpper,\n+            Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {\n+                kw::SelfUpper\n+            }\n             Node::GenericParam(param) => param.name.ident().name,\n             _ => bug!(\"ty_param_name: {} not a type parameter\", self.node_to_string(id)),\n         }\n@@ -557,11 +557,10 @@ impl<'hir> Map<'hir> {\n     pub fn is_const_context(&self, hir_id: HirId) -> bool {\n         let parent_id = self.get_parent_item(hir_id);\n         match self.get(parent_id) {\n-            Node::Item(&Item { kind: ItemKind::Const(..), .. })\n+            Node::Item(&Item { kind: ItemKind::Const(..) | ItemKind::Static(..), .. })\n             | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })\n             | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })\n-            | Node::AnonConst(_)\n-            | Node::Item(&Item { kind: ItemKind::Static(..), .. }) => true,\n+            | Node::AnonConst(_) => true,\n             Node::Item(&Item { kind: ItemKind::Fn(ref sig, ..), .. }) => {\n                 sig.header.constness == Constness::Const\n             }\n@@ -571,9 +570,8 @@ impl<'hir> Map<'hir> {\n \n     /// Whether `hir_id` corresponds to a `mod` or a crate.\n     pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n-        match self.get_entry(hir_id) {\n-            Entry { node: Node::Item(Item { kind: ItemKind::Mod(_), .. }), .. }\n-            | Entry { node: Node::Crate(..), .. } => true,\n+        match self.get_entry(hir_id).node {\n+            Node::Item(Item { kind: ItemKind::Mod(_), .. }) | Node::Crate(..) => true,\n             _ => false,\n         }\n     }"}, {"sha": "27239b4ad2e780c265e9d5633ac38c51e20ed49d", "filename": "src/librustc_middle/lint.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flint.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -213,10 +213,8 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n             (Level::Warn, Some(span)) => sess.struct_span_warn(span, \"\"),\n             (Level::Warn, None) => sess.struct_warn(\"\"),\n-            (Level::Deny, Some(span)) | (Level::Forbid, Some(span)) => {\n-                sess.struct_span_err(span, \"\")\n-            }\n-            (Level::Deny, None) | (Level::Forbid, None) => sess.struct_err(\"\"),\n+            (Level::Deny | Level::Forbid, Some(span)) => sess.struct_span_err(span, \"\"),\n+            (Level::Deny | Level::Forbid, None) => sess.struct_err(\"\"),\n         };\n \n         // Check for future incompatibility lints and issue a stronger warning."}, {"sha": "e3fe0b3111e3104937ec7808cb12794f3a93ed96", "filename": "src/librustc_middle/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -114,7 +114,7 @@ impl CodegenFnAttrs {\n             || match self.linkage {\n                 // These are private, so make sure we don't try to consider\n                 // them external.\n-                None | Some(Linkage::Internal) | Some(Linkage::Private) => false,\n+                None | Some(Linkage::Internal | Linkage::Private) => false,\n                 Some(_) => true,\n             }\n     }"}, {"sha": "17edd9f4cb643d5f83d100173792563700cc1d5e", "filename": "src/librustc_middle/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftcx.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -173,9 +173,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n                 tcx.intern_tup(&[ty, tcx.types.bool])\n             }\n-            Rvalue::UnaryOp(UnOp::Not, ref operand) | Rvalue::UnaryOp(UnOp::Neg, ref operand) => {\n-                operand.ty(local_decls, tcx)\n-            }\n+            Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => {\n                 let ty = place.ty(local_decls, tcx).ty;\n                 match ty.kind {"}, {"sha": "efc12138d34873a0d84d74b09855b82d879ba0b2", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1115,9 +1115,11 @@ impl PlaceContext {\n     /// Returns `true` if this place context represents a borrow.\n     pub fn is_borrow(&self) -> bool {\n         match *self {\n-            PlaceContext::NonMutatingUse(NonMutatingUseContext::SharedBorrow)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::ShallowBorrow)\n-            | PlaceContext::NonMutatingUse(NonMutatingUseContext::UniqueBorrow)\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow,\n+            )\n             | PlaceContext::MutatingUse(MutatingUseContext::Borrow) => true,\n             _ => false,\n         }\n@@ -1126,8 +1128,7 @@ impl PlaceContext {\n     /// Returns `true` if this place context represents a storage live or storage dead marker.\n     pub fn is_storage_marker(&self) -> bool {\n         match *self {\n-            PlaceContext::NonUse(NonUseContext::StorageLive)\n-            | PlaceContext::NonUse(NonUseContext::StorageDead) => true,\n+            PlaceContext::NonUse(NonUseContext::StorageLive | NonUseContext::StorageDead) => true,\n             _ => false,\n         }\n     }\n@@ -1175,9 +1176,11 @@ impl PlaceContext {\n     /// Returns `true` if this place context represents an assignment statement.\n     pub fn is_place_assignment(&self) -> bool {\n         match *self {\n-            PlaceContext::MutatingUse(MutatingUseContext::Store)\n-            | PlaceContext::MutatingUse(MutatingUseContext::Call)\n-            | PlaceContext::MutatingUse(MutatingUseContext::AsmOutput) => true,\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::Store\n+                | MutatingUseContext::Call\n+                | MutatingUseContext::AsmOutput,\n+            ) => true,\n             _ => false,\n         }\n     }"}, {"sha": "02abe868f3943b7234561d259d3ff875e15e9114", "filename": "src/librustc_middle/ty/_match.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2F_match.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -68,9 +68,12 @@ impl TypeRelation<'tcx> for Match<'tcx> {\n         }\n \n         match (&a.kind, &b.kind) {\n-            (_, &ty::Infer(ty::FreshTy(_)))\n-            | (_, &ty::Infer(ty::FreshIntTy(_)))\n-            | (_, &ty::Infer(ty::FreshFloatTy(_))) => Ok(a),\n+            (\n+                _,\n+                &ty::Infer(ty::FreshTy(_))\n+                | &ty::Infer(ty::FreshIntTy(_))\n+                | &ty::Infer(ty::FreshFloatTy(_)),\n+            ) => Ok(a),\n \n             (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n                 Err(TypeError::Sorts(relate::expected_found(self, &a, &b)))"}, {"sha": "bb92e916bbe6c6ceb24bd101461a428c4a74fa4e", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1415,7 +1415,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let hir_id = self.hir().as_local_hir_id(suitable_region_binding_scope).unwrap();\n         let is_impl_item = match self.hir().find(hir_id) {\n-            Some(Node::Item(..)) | Some(Node::TraitItem(..)) => false,\n+            Some(Node::Item(..) | Node::TraitItem(..)) => false,\n             Some(Node::ImplItem(..)) => {\n                 self.is_bound_region_in_impl_item(suitable_region_binding_scope)\n             }"}, {"sha": "790eb8f49aff3a1379d4c0345089efe2adccd4bb", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -14,10 +14,12 @@ impl<'tcx> TyS<'tcx> {\n             | Int(_)\n             | Uint(_)\n             | Float(_)\n-            | Infer(InferTy::IntVar(_))\n-            | Infer(InferTy::FloatVar(_))\n-            | Infer(InferTy::FreshIntTy(_))\n-            | Infer(InferTy::FreshFloatTy(_)) => true,\n+            | Infer(\n+                InferTy::IntVar(_)\n+                | InferTy::FloatVar(_)\n+                | InferTy::FreshIntTy(_)\n+                | InferTy::FreshFloatTy(_),\n+            ) => true,\n             _ => false,\n         }\n     }\n@@ -32,10 +34,12 @@ impl<'tcx> TyS<'tcx> {\n             | Int(_)\n             | Uint(_)\n             | Float(_)\n-            | Infer(InferTy::IntVar(_))\n-            | Infer(InferTy::FloatVar(_))\n-            | Infer(InferTy::FreshIntTy(_))\n-            | Infer(InferTy::FreshFloatTy(_)) => true,\n+            | Infer(\n+                InferTy::IntVar(_)\n+                | InferTy::FloatVar(_)\n+                | InferTy::FreshIntTy(_)\n+                | InferTy::FreshFloatTy(_),\n+            ) => true,\n             Ref(_, x, _) | Array(x, _) | Slice(x) => x.peel_refs().is_simple_ty(),\n             Tuple(tys) if tys.is_empty() => true,\n             _ => false,"}, {"sha": "1149db8292b6b3ef5a44344ce57af7ea514daebd", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -426,8 +426,7 @@ fn needs_fn_once_adapter_shim(\n             // basically the same thing, so we can just return llfn.\n             Ok(false)\n         }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce)\n-        | (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n+        (ty::ClosureKind::Fn | ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n             // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n             // self, ...)`.  We want a `fn(self, ...)`. We can produce\n             // this by doing something like:\n@@ -438,6 +437,6 @@ fn needs_fn_once_adapter_shim(\n             // These are both the same at codegen time.\n             Ok(true)\n         }\n-        (ty::ClosureKind::FnMut, _) | (ty::ClosureKind::FnOnce, _) => Err(()),\n+        (ty::ClosureKind::FnMut | ty::ClosureKind::FnOnce, _) => Err(()),\n     }\n }"}, {"sha": "73e7e623b12ad7180b8682bc57b9da0d83925e84", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -2776,9 +2776,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let enum_did = self.parent(did).unwrap();\n                 self.adt_def(enum_did).variant_with_id(did)\n             }\n-            Res::Def(DefKind::Struct, did) | Res::Def(DefKind::Union, did) => {\n-                self.adt_def(did).non_enum_variant()\n-            }\n+            Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {\n                 let variant_did = self.parent(variant_ctor_did).unwrap();\n                 let enum_did = self.parent(variant_did).unwrap();"}, {"sha": "84360b90470b7719d976dcdfec518aa550b4fe85", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -909,9 +909,9 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"::{:?}\", promoted));\n                 } else {\n                     match self.tcx().def_kind(did) {\n-                        Some(DefKind::Static)\n-                        | Some(DefKind::Const)\n-                        | Some(DefKind::AssocConst) => p!(print_value_path(did, substs)),\n+                        Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {\n+                            p!(print_value_path(did, substs))\n+                        }\n                         _ => {\n                             if did.is_local() {\n                                 let span = self.tcx().def_span(did);"}, {"sha": "43f28ff2ac38babfd3954f6b3ff4a0e46fe1303c", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1887,8 +1887,15 @@ impl<'tcx> TyS<'tcx> {\n     #[inline]\n     pub fn is_scalar(&self) -> bool {\n         match self.kind {\n-            Bool | Char | Int(_) | Float(_) | Uint(_) | Infer(IntVar(_)) | Infer(FloatVar(_))\n-            | FnDef(..) | FnPtr(_) | RawPtr(_) => true,\n+            Bool\n+            | Char\n+            | Int(_)\n+            | Float(_)\n+            | Uint(_)\n+            | Infer(IntVar(_) | FloatVar(_))\n+            | FnDef(..)\n+            | FnPtr(_)\n+            | RawPtr(_) => true,\n             _ => false,\n         }\n     }\n@@ -2154,8 +2161,7 @@ impl<'tcx> TyS<'tcx> {\n     /// `false` means nothing -- could be sized, might not be.\n     pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {\n         match self.kind {\n-            ty::Infer(ty::IntVar(_))\n-            | ty::Infer(ty::FloatVar(_))\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Uint(_)\n             | ty::Int(_)\n             | ty::Bool\n@@ -2186,9 +2192,7 @@ impl<'tcx> TyS<'tcx> {\n \n             ty::Bound(..)\n             | ty::Placeholder(..)\n-            | ty::Infer(ty::FreshTy(_))\n-            | ty::Infer(ty::FreshIntTy(_))\n-            | ty::Infer(ty::FreshFloatTy(_)) => {\n+            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"`is_trivially_sized` applied to unexpected type: {:?}\", self)\n             }\n         }"}, {"sha": "4b10a8ba8210bf64f8b8bde56b450949c7d31605", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -316,10 +316,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         break;\n                     }\n                 }\n-                (ty::Projection(_), _)\n-                | (ty::Opaque(..), _)\n-                | (_, ty::Projection(_))\n-                | (_, ty::Opaque(..)) => {\n+                (ty::Projection(_) | ty::Opaque(..), _)\n+                | (_, ty::Projection(_) | ty::Opaque(..)) => {\n                     // If either side is a projection, attempt to\n                     // progress via normalization. (Should be safe to\n                     // apply to both sides as normalization is"}, {"sha": "2529bba6d92f524a11518a03066e34dfc3c5b5f4", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -407,8 +407,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.cannot_uniquely_borrow_by_two_closures(span, &desc_place, issued_span, None)\n             }\n \n-            (BorrowKind::Mut { .. }, BorrowKind::Shallow)\n-            | (BorrowKind::Unique, BorrowKind::Shallow) => {\n+            (BorrowKind::Mut { .. } | BorrowKind::Unique, BorrowKind::Shallow) => {\n                 if let Some(immutable_section_description) =\n                     self.classify_immutable_section(issued_borrow.assigned_place)\n                 {\n@@ -489,12 +488,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 )\n             }\n \n-            (BorrowKind::Shared, BorrowKind::Shared)\n-            | (BorrowKind::Shared, BorrowKind::Shallow)\n-            | (BorrowKind::Shallow, BorrowKind::Mut { .. })\n-            | (BorrowKind::Shallow, BorrowKind::Unique)\n-            | (BorrowKind::Shallow, BorrowKind::Shared)\n-            | (BorrowKind::Shallow, BorrowKind::Shallow) => unreachable!(),\n+            (BorrowKind::Shared, BorrowKind::Shared | BorrowKind::Shallow)\n+            | (\n+                BorrowKind::Shallow,\n+                BorrowKind::Mut { .. }\n+                | BorrowKind::Unique\n+                | BorrowKind::Shared\n+                | BorrowKind::Shallow,\n+            ) => unreachable!(),\n         };\n \n         if issued_spans == borrow_spans {\n@@ -1426,17 +1427,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // PATTERN;) then make the error refer to that local, rather than the\n         // place being assigned later.\n         let (place_description, assigned_span) = match local_decl {\n-            Some(LocalDecl { local_info: LocalInfo::User(ClearCrossCrate::Clear), .. })\n-            | Some(LocalDecl {\n+            Some(LocalDecl {\n                 local_info:\n-                    LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n-                        opt_match_place: None,\n-                        ..\n-                    }))),\n+                    LocalInfo::User(\n+                        ClearCrossCrate::Clear\n+                        | ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+                            opt_match_place: None,\n+                            ..\n+                        })),\n+                    )\n+                    | LocalInfo::StaticRef { .. }\n+                    | LocalInfo::Other,\n                 ..\n             })\n-            | Some(LocalDecl { local_info: LocalInfo::StaticRef { .. }, .. })\n-            | Some(LocalDecl { local_info: LocalInfo::Other, .. })\n             | None => (self.describe_any_place(place.as_ref()), assigned_span),\n             Some(decl) => (self.describe_any_place(err_place.as_ref()), decl.source_info.span),\n         };"}, {"sha": "c4aafd101543da081076df3a5b4bb2a647ce4879", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -484,9 +484,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // this by hooking into the pretty printer and telling it to label the\n         // lifetimes without names with the value `'0`.\n         match ty.kind {\n-            ty::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n-            | ty::Ref(\n-                ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n+            ty::Ref(\n+                ty::RegionKind::ReLateBound(_, br)\n+                | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n             ) => printer.region_highlight_mode.highlighting_bound_region(*br, counter),"}, {"sha": "798b2db571dd48caf096a2884fa57f05cc181aba", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -137,12 +137,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            PlaceRef { local: _, projection: [.., ProjectionElem::Index(_)] }\n-            | PlaceRef { local: _, projection: [.., ProjectionElem::ConstantIndex { .. }] }\n-            | PlaceRef { local: _, projection: [.., ProjectionElem::Subslice { .. }] }\n-            | PlaceRef { local: _, projection: [.., ProjectionElem::Downcast(..)] } => {\n-                bug!(\"Unexpected immutable place.\")\n-            }\n+            PlaceRef {\n+                local: _,\n+                projection:\n+                    [.., ProjectionElem::Index(_)\n+                    | ProjectionElem::ConstantIndex { .. }\n+                    | ProjectionElem::Subslice { .. }\n+                    | ProjectionElem::Downcast(..)],\n+            } => bug!(\"Unexpected immutable place.\"),\n         }\n \n         debug!(\"report_mutability_error: item_msg={:?}, reason={:?}\", item_msg, reason);\n@@ -510,21 +512,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 tables.node_type_opt(func.hir_id).as_ref().map(|ty| &ty.kind)\n             {\n                 let arg = match hir.get_if_local(*def_id) {\n-                    Some(hir::Node::Item(hir::Item {\n-                        ident,\n-                        kind: hir::ItemKind::Fn(sig, ..),\n-                        ..\n-                    }))\n-                    | Some(hir::Node::TraitItem(hir::TraitItem {\n-                        ident,\n-                        kind: hir::TraitItemKind::Fn(sig, _),\n-                        ..\n-                    }))\n-                    | Some(hir::Node::ImplItem(hir::ImplItem {\n-                        ident,\n-                        kind: hir::ImplItemKind::Fn(sig, _),\n-                        ..\n-                    })) => Some(\n+                    Some(\n+                        hir::Node::Item(hir::Item {\n+                            ident, kind: hir::ItemKind::Fn(sig, ..), ..\n+                        })\n+                        | hir::Node::TraitItem(hir::TraitItem {\n+                            ident,\n+                            kind: hir::TraitItemKind::Fn(sig, _),\n+                            ..\n+                        })\n+                        | hir::Node::ImplItem(hir::ImplItem {\n+                            ident,\n+                            kind: hir::ImplItemKind::Fn(sig, _),\n+                            ..\n+                        }),\n+                    ) => Some(\n                         arg_pos\n                             .and_then(|pos| {\n                                 sig.decl.inputs.get("}, {"sha": "70375921471a9a113fe6c6736fa09f3b8b203d0c", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -577,9 +577,12 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     // to search anything here.\n                 }\n \n-                (GenericArgKind::Lifetime(_), _)\n-                | (GenericArgKind::Type(_), _)\n-                | (GenericArgKind::Const(_), _) => {\n+                (\n+                    GenericArgKind::Lifetime(_)\n+                    | GenericArgKind::Type(_)\n+                    | GenericArgKind::Const(_),\n+                    _,\n+                ) => {\n                     // I *think* that HIR lowering should ensure this\n                     // doesn't happen, even in erroneous\n                     // programs. Else we should use delay-span-bug."}, {"sha": "2a3e3bb8f58540bd27dd619f1dc1069d6e1b94ed", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -359,14 +359,15 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n                         // have already taken the reservation\n                     }\n \n-                    (Read(_), BorrowKind::Shallow)\n-                    | (Read(_), BorrowKind::Shared)\n-                    | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n-                    | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n+                    (Read(_), BorrowKind::Shallow | BorrowKind::Shared)\n+                    | (\n+                        Read(ReadKind::Borrow(BorrowKind::Shallow)),\n+                        BorrowKind::Unique | BorrowKind::Mut { .. },\n+                    ) => {\n                         // Reads don't invalidate shared or shallow borrows\n                     }\n \n-                    (Read(_), BorrowKind::Unique) | (Read(_), BorrowKind::Mut { .. }) => {\n+                    (Read(_), BorrowKind::Unique | BorrowKind::Mut { .. }) => {\n                         // Reading from mere reservations of mutable-borrows is OK.\n                         if !is_active(&this.dominators, borrow, location) {\n                             // If the borrow isn't active yet, reads don't invalidate it\n@@ -379,7 +380,7 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n                         this.generate_invalidates(borrow_index, location);\n                     }\n \n-                    (Reservation(_), _) | (Activation(_, _), _) | (Write(_), _) => {\n+                    (Reservation(_) | Activation(_, _) | Write(_), _) => {\n                         // unique or mutable borrows are invalidated by writes.\n                         // Reservations count as writes since we need to check\n                         // that activating the borrow will be OK"}, {"sha": "ad85e218b86d60bceebf3fd2b2a23bb731332a97", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 45, "deletions": 35, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -991,19 +991,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Read(_), BorrowKind::Shared)\n-                | (Read(_), BorrowKind::Shallow)\n-                | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n-                | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n-                    Control::Continue\n-                }\n+                (Read(_), BorrowKind::Shared | BorrowKind::Shallow)\n+                | (\n+                    Read(ReadKind::Borrow(BorrowKind::Shallow)),\n+                    BorrowKind::Unique | BorrowKind::Mut { .. },\n+                ) => Control::Continue,\n \n                 (Write(WriteKind::Move), BorrowKind::Shallow) => {\n                     // Handled by initialization checks.\n                     Control::Continue\n                 }\n \n-                (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n+                (Read(kind), BorrowKind::Unique | BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if !is_active(&this.dominators, borrow, location) {\n                         assert!(allow_two_phase_borrow(borrow.kind));\n@@ -1024,12 +1023,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Control::Break\n                 }\n \n-                (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shallow)\n-                | (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shared)\n-                    if {\n-                        tcx.migrate_borrowck()\n-                            && this.borrow_set.location_map.contains_key(&location)\n-                    } =>\n+                (\n+                    Reservation(WriteKind::MutableBorrow(bk)),\n+                    BorrowKind::Shallow | BorrowKind::Shared,\n+                ) if {\n+                    tcx.migrate_borrowck() && this.borrow_set.location_map.contains_key(&location)\n+                } =>\n                 {\n                     let bi = this.borrow_set.location_map[&location];\n                     debug!(\n@@ -1048,7 +1047,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Reservation(kind), _) | (Activation(kind, _), _) | (Write(kind), _) => {\n+                (Reservation(kind) | Activation(kind, _) | Write(kind), _) => {\n                     match rw {\n                         Reservation(..) => {\n                             debug!(\n@@ -1916,10 +1915,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let the_place_err;\n \n         match kind {\n-            Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n-            | Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. }))\n-            | Write(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n-            | Write(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. })) => {\n+            Reservation(WriteKind::MutableBorrow(\n+                borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),\n+            ))\n+            | Write(WriteKind::MutableBorrow(\n+                borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),\n+            )) => {\n                 let is_local_mutation_allowed = match borrow_kind {\n                     BorrowKind::Unique => LocalMutationIsAllowed::Yes,\n                     BorrowKind::Mut { .. } => is_local_mutation_allowed,\n@@ -1949,14 +1950,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            Reservation(WriteKind::Move)\n-            | Write(WriteKind::Move)\n-            | Reservation(WriteKind::StorageDeadOrDrop)\n-            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shallow))\n-            | Write(WriteKind::StorageDeadOrDrop)\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Shallow)) => {\n+            Reservation(\n+                WriteKind::Move\n+                | WriteKind::StorageDeadOrDrop\n+                | WriteKind::MutableBorrow(BorrowKind::Shared)\n+                | WriteKind::MutableBorrow(BorrowKind::Shallow),\n+            )\n+            | Write(\n+                WriteKind::Move\n+                | WriteKind::StorageDeadOrDrop\n+                | WriteKind::MutableBorrow(BorrowKind::Shared)\n+                | WriteKind::MutableBorrow(BorrowKind::Shallow),\n+            ) => {\n                 if let (Err(_), true) = (\n                     self.is_mutable(place.as_ref(), is_local_mutation_allowed),\n                     self.errors_buffer.is_empty(),\n@@ -1980,11 +1985,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // permission checks are done at Reservation point.\n                 return false;\n             }\n-            Read(ReadKind::Borrow(BorrowKind::Unique))\n-            | Read(ReadKind::Borrow(BorrowKind::Mut { .. }))\n-            | Read(ReadKind::Borrow(BorrowKind::Shared))\n-            | Read(ReadKind::Borrow(BorrowKind::Shallow))\n-            | Read(ReadKind::Copy) => {\n+            Read(\n+                ReadKind::Borrow(\n+                    BorrowKind::Unique\n+                    | BorrowKind::Mut { .. }\n+                    | BorrowKind::Shared\n+                    | BorrowKind::Shallow,\n+                )\n+                | ReadKind::Copy,\n+            ) => {\n                 // Access authorized\n                 return false;\n             }\n@@ -2152,10 +2161,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 upvar, is_local_mutation_allowed, place\n                             );\n                             match (upvar.mutability, is_local_mutation_allowed) {\n-                                (Mutability::Not, LocalMutationIsAllowed::No)\n-                                | (Mutability::Not, LocalMutationIsAllowed::ExceptUpvars) => {\n-                                    Err(place)\n-                                }\n+                                (\n+                                    Mutability::Not,\n+                                    LocalMutationIsAllowed::No\n+                                    | LocalMutationIsAllowed::ExceptUpvars,\n+                                ) => Err(place),\n                                 (Mutability::Not, LocalMutationIsAllowed::Yes)\n                                 | (Mutability::Mut, _) => {\n                                     // Subtle: this is an upvar"}, {"sha": "45f77af4aba403e7691f19b203eb5afc2a4479f5", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -377,11 +377,16 @@ fn place_projection_conflict<'tcx>(\n                 Overlap::Disjoint\n             }\n         }\n-        (ProjectionElem::Index(..), ProjectionElem::Index(..))\n-        | (ProjectionElem::Index(..), ProjectionElem::ConstantIndex { .. })\n-        | (ProjectionElem::Index(..), ProjectionElem::Subslice { .. })\n-        | (ProjectionElem::ConstantIndex { .. }, ProjectionElem::Index(..))\n-        | (ProjectionElem::Subslice { .. }, ProjectionElem::Index(..)) => {\n+        (\n+            ProjectionElem::Index(..),\n+            ProjectionElem::Index(..)\n+            | ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::Subslice { .. },\n+        )\n+        | (\n+            ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. },\n+            ProjectionElem::Index(..),\n+        ) => {\n             // Array indexes (`a[0]` vs. `a[i]`). These can either be disjoint\n             // (if the indexes differ) or equal (if they are the same).\n             match bias {\n@@ -519,12 +524,15 @@ fn place_projection_conflict<'tcx>(\n             debug!(\"place_element_conflict: DISJOINT-OR-EQ-SLICE-SUBSLICES\");\n             Overlap::EqualOrDisjoint\n         }\n-        (ProjectionElem::Deref, _)\n-        | (ProjectionElem::Field(..), _)\n-        | (ProjectionElem::Index(..), _)\n-        | (ProjectionElem::ConstantIndex { .. }, _)\n-        | (ProjectionElem::Subslice { .. }, _)\n-        | (ProjectionElem::Downcast(..), _) => bug!(\n+        (\n+            ProjectionElem::Deref\n+            | ProjectionElem::Field(..)\n+            | ProjectionElem::Index(..)\n+            | ProjectionElem::ConstantIndex { .. }\n+            | ProjectionElem::Subslice { .. }\n+            | ProjectionElem::Downcast(..),\n+            _,\n+        ) => bug!(\n             \"mismatched projections in place_element_conflict: {:?} and {:?}\",\n             pi1_elem,\n             pi2_elem"}, {"sha": "bd85b48bf4b98a75e34ea3d4b7fc5052f804f55a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -2269,22 +2269,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         let cast_ty_to = CastTy::from_ty(ty);\n                         match (cast_ty_from, cast_ty_to) {\n                             (None, _)\n-                            | (_, None)\n-                            | (_, Some(CastTy::FnPtr))\n+                            | (_, None | Some(CastTy::FnPtr))\n                             | (Some(CastTy::Float), Some(CastTy::Ptr(_)))\n-                            | (Some(CastTy::Ptr(_)), Some(CastTy::Float))\n-                            | (Some(CastTy::FnPtr), Some(CastTy::Float)) => {\n+                            | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {\n                                 span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty,)\n                             }\n-                            (Some(CastTy::Int(_)), Some(CastTy::Int(_)))\n-                            | (Some(CastTy::Float), Some(CastTy::Int(_)))\n-                            | (Some(CastTy::Int(_)), Some(CastTy::Float))\n-                            | (Some(CastTy::Float), Some(CastTy::Float))\n-                            | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_)))\n-                            | (Some(CastTy::FnPtr), Some(CastTy::Int(_)))\n-                            | (Some(CastTy::Int(_)), Some(CastTy::Ptr(_)))\n-                            | (Some(CastTy::Ptr(_)), Some(CastTy::Ptr(_)))\n-                            | (Some(CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            (\n+                                Some(CastTy::Int(_)),\n+                                Some(CastTy::Int(_) | CastTy::Float | CastTy::Ptr(_)),\n+                            )\n+                            | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))\n+                            | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))\n+                            | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),\n                         }\n                     }\n                 }\n@@ -2294,12 +2290,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.add_reborrow_constraint(&body, location, region, borrowed_place);\n             }\n \n-            Rvalue::BinaryOp(BinOp::Eq, left, right)\n-            | Rvalue::BinaryOp(BinOp::Ne, left, right)\n-            | Rvalue::BinaryOp(BinOp::Lt, left, right)\n-            | Rvalue::BinaryOp(BinOp::Le, left, right)\n-            | Rvalue::BinaryOp(BinOp::Gt, left, right)\n-            | Rvalue::BinaryOp(BinOp::Ge, left, right) => {\n+            Rvalue::BinaryOp(\n+                BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,\n+                left,\n+                right,\n+            ) => {\n                 let ty_left = left.ty(*body, tcx);\n                 if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.kind {\n                     let ty_right = right.ty(*body, tcx);"}, {"sha": "1592207e4d291afb1354ddcfde4432c6901b00e8", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -341,7 +341,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // because any code that existed before validation could not have failed\n                     // validation thus preventing such a hard error from being a backwards\n                     // compatibility hazard\n-                    Some(DefKind::Const) | Some(DefKind::AssocConst) => {\n+                    Some(DefKind::Const | DefKind::AssocConst) => {\n                         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n                         err.report_as_lint(\n                             tcx.at(tcx.def_span(def_id)),"}, {"sha": "2fcdc9ca5d6cea052b215317bda87a0695cf6dc5", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -25,9 +25,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.unsize_into(src, dest)?;\n             }\n \n-            Misc\n-            | Pointer(PointerCast::MutToConstPointer)\n-            | Pointer(PointerCast::ArrayToPointer) => {\n+            Misc | Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer) => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.cast_immediate(src, dest.layout)?;\n                 self.write_immediate(res, dest)?;\n@@ -299,8 +297,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx> {\n         trace!(\"Unsizing {:?} into {:?}\", src, dest);\n         match (&src.layout.ty.kind, &dest.layout.ty.kind) {\n-            (&ty::Ref(_, s, _), &ty::Ref(_, d, _))\n-            | (&ty::Ref(_, s, _), &ty::RawPtr(TypeAndMut { ty: d, .. }))\n+            (&ty::Ref(_, s, _), &ty::Ref(_, d, _) | &ty::RawPtr(TypeAndMut { ty: d, .. }))\n             | (&ty::RawPtr(TypeAndMut { ty: s, .. }), &ty::RawPtr(TypeAndMut { ty: d, .. })) => {\n                 self.unsize_into_ptr(src, dest, s, d)\n             }"}, {"sha": "06dee62b3e70b27e70983a6b3c0d52e4b5f733d5", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -153,8 +153,10 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n         match self.value {\n             LocalValue::Dead => throw_ub!(DeadLocal),\n             LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n-            ref mut local @ LocalValue::Live(Operand::Immediate(_))\n-            | ref mut local @ LocalValue::Uninitialized => Ok(Ok(local)),\n+            ref mut\n+            local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Uninitialized) => {\n+                Ok(Ok(local))\n+            }\n         }\n     }\n }\n@@ -630,7 +632,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // FIXME: The above is likely untrue. See\n                 // <https://github.com/rust-lang/rust/pull/70004#issuecomment-602022110>. Is it\n                 // okay to ignore `StorageDead`/`StorageLive` annotations during CTFE?\n-                Some(DefKind::Static) | Some(DefKind::Const) | Some(DefKind::AssocConst) => {}\n+                Some(DefKind::Static | DefKind::Const | DefKind::AssocConst) => {}\n                 _ => {\n                     // Mark locals that use `Storage*` annotations as dead on function entry.\n                     let always_live = AlwaysLiveLocals::new(self.body());"}, {"sha": "b28cd3f0a8dd6f8181c8dc9def561b36bc142d53", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -230,14 +230,15 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx\n                     // and thus ok.\n                     (InternMode::Static, hir::Mutability::Mut) => {}\n                     // we statically prevent `&mut T` via `const_qualif` and double check this here\n-                    (InternMode::ConstBase, hir::Mutability::Mut)\n-                    | (InternMode::Const, hir::Mutability::Mut) => match referenced_ty.kind {\n-                        ty::Array(_, n)\n-                            if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n-                        ty::Slice(_)\n-                            if mplace.meta.unwrap_meta().to_machine_usize(self.ecx)? == 0 => {}\n-                        _ => bug!(\"const qualif failed to prevent mutable references\"),\n-                    },\n+                    (InternMode::ConstBase | InternMode::Const, hir::Mutability::Mut) => {\n+                        match referenced_ty.kind {\n+                            ty::Array(_, n)\n+                                if n.eval_usize(self.ecx.tcx.tcx, self.ecx.param_env) == 0 => {}\n+                            ty::Slice(_)\n+                                if mplace.meta.unwrap_meta().to_machine_usize(self.ecx)? == 0 => {}\n+                            _ => bug!(\"const qualif failed to prevent mutable references\"),\n+                        }\n+                    }\n                 }\n                 // Compute the mutability with which we'll start visiting the allocation. This is\n                 // what gets changed when we encounter an `UnsafeCell`."}, {"sha": "9b2b7196fc0e93851e12f4ea76cb210530e4a5dd", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -262,7 +262,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // Deallocating global memory -- always an error\n                 return Err(match self.tcx.alloc_map.lock().get(ptr.alloc_id) {\n                     Some(GlobalAlloc::Function(..)) => err_ub_format!(\"deallocating a function\"),\n-                    Some(GlobalAlloc::Static(..)) | Some(GlobalAlloc::Memory(..)) => {\n+                    Some(GlobalAlloc::Static(..) | GlobalAlloc::Memory(..)) => {\n                         err_ub_format!(\"deallocating static memory\")\n                     }\n                     None => err_ub!(PointerUseAfterFree(ptr.alloc_id)),"}, {"sha": "ea648ebf34ec2d15b6414296431a3500e52f96d1", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -822,8 +822,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     };\n \n     match (&source_ty.kind, &target_ty.kind) {\n-        (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n-        | (&ty::Ref(_, a, _), &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n+        (&ty::Ref(_, a, _), &ty::Ref(_, b, _) | &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n         | (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }), &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n             ptr_vtable(a, b)\n         }"}, {"sha": "77d4424befd72da9d02f0ba7c60b74fdba99c257", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -47,7 +47,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n             let adjustment = match tcx.fn_trait_kind_from_lang_item(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n-                Some(ty::ClosureKind::FnMut) | Some(ty::ClosureKind::Fn) => Adjustment::Deref,\n+                Some(ty::ClosureKind::FnMut | ty::ClosureKind::Fn) => Adjustment::Deref,\n                 None => bug!(\"fn pointer {:?} is not an fn\", ty),\n             };\n             // HACK: we need the \"real\" argument types for the MIR,"}, {"sha": "cee98e9b299c16e35183a2d4604dd26738e6ed36", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -341,8 +341,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n \n             Rvalue::AddressOf(Mutability::Mut, _) => self.check_op(ops::MutAddressOf),\n \n-            Rvalue::Ref(_, BorrowKind::Shared, ref place)\n-            | Rvalue::Ref(_, BorrowKind::Shallow, ref place)\n+            Rvalue::Ref(_, BorrowKind::Shared | BorrowKind::Shallow, ref place)\n             | Rvalue::AddressOf(Mutability::Not, ref place) => {\n                 let borrowed_place_has_mut_interior = qualifs::in_place::<HasMutInterior, _>(\n                     &self.item,\n@@ -360,9 +359,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n \n-                if let (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) =\n-                    (cast_in, cast_out)\n-                {\n+                if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {\n                     self.check_op(ops::RawPtrToIntCast);\n                 }\n             }"}, {"sha": "8b5e502dc72516ab052881a421e7de0639032bbf", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n-                    (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n+                    (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.require_unsafe(\n                             \"cast of pointer to int\",\n                             \"casting pointers to integers in constants\","}, {"sha": "494fb93b663b994a639bdd38799f18c106e2e50d", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -156,8 +156,10 @@ fn eliminate_self_assignments(body: &mut Body<'_>, def_use_analysis: &DefUseAnal\n             let location = def.location;\n             if let Some(stmt) = body[location.block].statements.get(location.statement_index) {\n                 match &stmt.kind {\n-                    StatementKind::Assign(box (place, Rvalue::Use(Operand::Copy(src_place))))\n-                    | StatementKind::Assign(box (place, Rvalue::Use(Operand::Move(src_place)))) => {\n+                    StatementKind::Assign(box (\n+                        place,\n+                        Rvalue::Use(Operand::Copy(src_place) | Operand::Move(src_place)),\n+                    )) => {\n                         if let (Some(local), Some(src_local)) =\n                             (place.as_local(), src_place.as_local())\n                         {"}, {"sha": "dd63fdf5e26ed69034703f969ea8a7ec25d48a96", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -543,7 +543,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n                 let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n                 match (cast_in, cast_out) {\n-                    (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n+                    (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                         // in normal functions, mark such casts as not promotable\n                         return Err(Unpromotable);\n                     }"}, {"sha": "d28d76e1470829fa33d7af7e5b6be0322c1c8733", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -165,21 +165,26 @@ fn check_rvalue(\n             let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n             let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n             match (cast_in, cast_out) {\n-                (CastTy::Ptr(_), CastTy::Int(_)) | (CastTy::FnPtr, CastTy::Int(_)) => {\n+                (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                     Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n                 }\n                 _ => check_operand(tcx, operand, span, def_id, body),\n             }\n         }\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _)\n-        | Rvalue::Cast(CastKind::Pointer(PointerCast::ArrayToPointer), operand, _) => {\n-            check_operand(tcx, operand, span, def_id, body)\n-        }\n-        Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _)\n-        | Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _)\n-        | Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), _, _) => {\n-            Err((span, \"function pointer casts are not allowed in const fn\".into()))\n-        }\n+        Rvalue::Cast(\n+            CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n+            operand,\n+            _,\n+        ) => check_operand(tcx, operand, span, def_id, body),\n+        Rvalue::Cast(\n+            CastKind::Pointer(\n+                PointerCast::UnsafeFnPointer\n+                | PointerCast::ClosureFnPointer(_)\n+                | PointerCast::ReifyFnPointer,\n+            ),\n+            _,\n+            _,\n+        ) => Err((span, \"function pointer casts are not allowed in const fn\".into())),\n         Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n             Err((span, \"unsizing casts are not allowed in const fn\".into()))\n         }"}, {"sha": "28bac490ac9a7247e83fbd437290792371f284e1", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -122,8 +122,10 @@ pub fn sanity_check_via_rustc_peek<'tcx, A>(\n \n         match (call.kind, peek_rval) {\n             (PeekCallKind::ByRef, mir::Rvalue::Ref(_, _, place))\n-            | (PeekCallKind::ByVal, mir::Rvalue::Use(mir::Operand::Move(place)))\n-            | (PeekCallKind::ByVal, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n+            | (\n+                PeekCallKind::ByVal,\n+                mir::Rvalue::Use(mir::Operand::Move(place) | mir::Operand::Copy(place)),\n+            ) => {\n                 let loc = Location { block: bb, statement_index };\n                 cursor.seek_before(loc);\n                 let state = cursor.get();"}, {"sha": "72658e51f009c2eb3da104b8694f928f211ab6ca", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n fn match_get_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n     match &stmt.kind {\n         StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n-            Rvalue::Use(Operand::Copy(pf)) | Rvalue::Use(Operand::Move(pf)) => {\n+            Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n                 let local_into = place_into.as_local()?;\n                 let (local_from, vf) = match_variant_field_place(*pf)?;\n                 Some((local_into, local_from, vf))"}, {"sha": "2c020f4adfc81840307fb8996be6b218737b230d", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -232,7 +232,7 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.defs_uses.add_def(local),\n-            Some(DefUse::Use) | Some(DefUse::Drop) => self.defs_uses.add_use(local),\n+            Some(DefUse::Use | DefUse::Drop) => self.defs_uses.add_use(local),\n             _ => (),\n         }\n     }"}, {"sha": "6c852d9e367098c1854daa5a637023fac806b890", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -807,12 +807,12 @@ fn write_mir_sig(\n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());\n     let is_function = match kind {\n-        Some(DefKind::Fn) | Some(DefKind::AssocFn) | Some(DefKind::Ctor(..)) => true,\n+        Some(DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..)) => true,\n         _ => tcx.is_closure(src.def_id()),\n     };\n     match (kind, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n-        (Some(DefKind::Const), _) | (Some(DefKind::AssocConst), _) => write!(w, \"const \")?,\n+        (Some(DefKind::Const | DefKind::AssocConst), _) => write!(w, \"const \")?,\n         (Some(DefKind::Static), _) => {\n             write!(w, \"static {}\", if tcx.is_mutable_static(src.def_id()) { \"mut \" } else { \"\" })?\n         }"}, {"sha": "74398ca8a40fa80831014d3b8b5b0cb1fea3df2f", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -582,7 +582,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         // enough elements.\n                         Some(1)\n                     }\n-                    (Ordering::Equal, &Some(_)) | (Ordering::Greater, &Some(_)) => {\n+                    (Ordering::Equal | Ordering::Greater, &Some(_)) => {\n                         // This can match both if $actual_len = test_len >= pat_len,\n                         // and if $actual_len > test_len. We can't advance.\n                         None\n@@ -681,7 +681,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             (&TestKind::Range { .. }, _) => None,\n \n-            (&TestKind::Eq { .. }, _) | (&TestKind::Len { .. }, _) => {\n+            (&TestKind::Eq { .. } | &TestKind::Len { .. }, _) => {\n                 // These are all binary tests.\n                 //\n                 // FIXME(#29623) we can be more clever here"}, {"sha": "ee45ff5a495be5187667fcd7007bcd4c75d2ef67", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -46,8 +46,10 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             kind: hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n-        Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })\n-        | Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, body_id), .. })\n+        Node::Item(hir::Item {\n+            kind: hir::ItemKind::Static(ty, _, body_id) | hir::ItemKind::Const(ty, body_id),\n+            ..\n+        })\n         | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n         | Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Const(ty, Some(body_id)),\n@@ -394,8 +396,10 @@ impl BlockContext {\n             Some(BlockFrame::SubExpr) => false,\n \n             // otherwise: use accumulated is_ignored state.\n-            Some(BlockFrame::TailExpr { tail_result_is_ignored: ignored })\n-            | Some(BlockFrame::Statement { ignores_expr_result: ignored }) => *ignored,\n+            Some(\n+                BlockFrame::TailExpr { tail_result_is_ignored: ignored }\n+                | BlockFrame::Statement { ignores_expr_result: ignored },\n+            ) => *ignored,\n         }\n     }\n }"}, {"sha": "20ee98b0a9c0fe82e3f069b896f187d7606aebc4", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -721,14 +721,16 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            Res::Def(DefKind::Struct, _)\n-            | Res::Def(DefKind::Ctor(CtorOf::Struct, ..), _)\n-            | Res::Def(DefKind::Union, _)\n-            | Res::Def(DefKind::TyAlias, _)\n-            | Res::Def(DefKind::AssocTy, _)\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Ctor(CtorOf::Struct, ..)\n+                | DefKind::Union\n+                | DefKind::TyAlias\n+                | DefKind::AssocTy,\n+                _,\n+            )\n             | Res::SelfTy(..)\n             | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },\n-\n             _ => {\n                 let pattern_error = match res {\n                     Res::Def(DefKind::ConstParam, _) => PatternError::ConstParamInPattern(span),\n@@ -765,7 +767,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             _ => false,\n         };\n         let kind = match res {\n-            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::Const | DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n                 // Use `Reveal::All` here because patterns are always monomorphic even if their function isn't.\n                 match self.tcx.const_eval_resolve("}, {"sha": "c6d65d56c93f0c85e91fe238c57e18ea8f6b6c28", "filename": "src/librustc_mir_build/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_mir_build%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -9,6 +9,7 @@\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "fe129f2c3a88c42850dcfb9faaebbe7c04444376", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -508,11 +508,11 @@ impl<'a> Parser<'a> {\n                 // `x == y == z`\n                 (BinOpKind::Eq, AssocOp::Equal) |\n                 // `x < y < z` and friends.\n-                (BinOpKind::Lt, AssocOp::Less) | (BinOpKind::Lt, AssocOp::LessEqual) |\n-                (BinOpKind::Le, AssocOp::LessEqual) | (BinOpKind::Le, AssocOp::Less) |\n+                (BinOpKind::Lt, AssocOp::Less | AssocOp::LessEqual) |\n+                (BinOpKind::Le, AssocOp::LessEqual | AssocOp::Less) |\n                 // `x > y > z` and friends.\n-                (BinOpKind::Gt, AssocOp::Greater) | (BinOpKind::Gt, AssocOp::GreaterEqual) |\n-                (BinOpKind::Ge, AssocOp::GreaterEqual) | (BinOpKind::Ge, AssocOp::Greater) => {\n+                (BinOpKind::Gt, AssocOp::Greater | AssocOp::GreaterEqual) |\n+                (BinOpKind::Ge, AssocOp::GreaterEqual | AssocOp::Greater) => {\n                     let expr_to_str = |e: &Expr| {\n                         self.span_to_snippet(e.span)\n                             .unwrap_or_else(|_| pprust::expr_to_string(&e))\n@@ -526,8 +526,7 @@ impl<'a> Parser<'a> {\n                     false // Keep the current parse behavior, where the AST is `(x < y) < z`.\n                 }\n                 // `x == y < z`\n-                (BinOpKind::Eq, AssocOp::Less) | (BinOpKind::Eq, AssocOp::LessEqual) |\n-                (BinOpKind::Eq, AssocOp::Greater) | (BinOpKind::Eq, AssocOp::GreaterEqual) => {\n+                (BinOpKind::Eq, AssocOp::Less | AssocOp::LessEqual | AssocOp::Greater | AssocOp::GreaterEqual) => {\n                     // Consume `z`/outer-op-rhs.\n                     let snapshot = self.clone();\n                     match self.parse_expr() {\n@@ -545,8 +544,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 // `x > y == z`\n-                (BinOpKind::Lt, AssocOp::Equal) | (BinOpKind::Le, AssocOp::Equal) |\n-                (BinOpKind::Gt, AssocOp::Equal) | (BinOpKind::Ge, AssocOp::Equal) => {\n+                (BinOpKind::Lt | BinOpKind::Le | BinOpKind::Gt | BinOpKind::Ge, AssocOp::Equal) => {\n                     let snapshot = self.clone();\n                     // At this point it is always valid to enclose the lhs in parentheses, no\n                     // further checks are necessary."}, {"sha": "d588373425d659d83d2546968b4d78c444545bde", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -162,7 +162,7 @@ impl<'a> Parser<'a> {\n             _ => false,\n         });\n         match (is_end_ahead, &self.token.kind) {\n-            (true, token::BinOp(token::Or)) | (true, token::OrOr) => {\n+            (true, token::BinOp(token::Or) | token::OrOr) => {\n                 self.ban_illegal_vert(lo, \"trailing\", \"not allowed in an or-pattern\");\n                 self.bump();\n                 true"}, {"sha": "155b88f7e8edd37e51464c59d79596d462a4b03c", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -89,8 +89,7 @@ impl CheckAttrVisitor<'tcx> {\n         match target {\n             Target::Fn\n             | Target::Closure\n-            | Target::Method(MethodKind::Trait { body: true })\n-            | Target::Method(MethodKind::Inherent) => true,\n+            | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n                     lint.build(\"`#[inline]` is ignored on function prototypes\").emit()\n@@ -202,8 +201,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_target_feature(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n-            | Target::Method(MethodKind::Trait { body: true })\n-            | Target::Method(MethodKind::Inherent) => true,\n+            | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             _ => {\n                 self.tcx\n                     .sess"}, {"sha": "c42f2fc264a80b305ef1b10039563601916db5df", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -52,8 +52,9 @@ impl NonConstExpr {\n \n             Self::Loop(While)\n             | Self::Loop(WhileLet)\n-            | Self::Match(WhileDesugar)\n-            | Self::Match(WhileLetDesugar) => &[sym::const_loop, sym::const_if_match],\n+            | Self::Match(WhileDesugar | WhileLetDesugar) => {\n+                &[sym::const_loop, sym::const_if_match]\n+            }\n \n             // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n             // so they are not yet allowed with `#![feature(const_loop)]`."}, {"sha": "e3dd4ddee06ca3985930abf8209e1874848488f5", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -24,13 +24,15 @@ use rustc_span::symbol::sym;\n // may need to be marked as live.\n fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     match tcx.hir().find(hir_id) {\n-        Some(Node::Item(..))\n-        | Some(Node::ImplItem(..))\n-        | Some(Node::ForeignItem(..))\n-        | Some(Node::TraitItem(..))\n-        | Some(Node::Variant(..))\n-        | Some(Node::AnonConst(..))\n-        | Some(Node::Pat(..)) => true,\n+        Some(\n+            Node::Item(..)\n+            | Node::ImplItem(..)\n+            | Node::ForeignItem(..)\n+            | Node::TraitItem(..)\n+            | Node::Variant(..)\n+            | Node::AnonConst(..)\n+            | Node::Pat(..),\n+        ) => true,\n         _ => false,\n     }\n }\n@@ -67,9 +69,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn handle_res(&mut self, res: Res) {\n         match res {\n-            Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::TyAlias, _) => {\n+            Res::Def(DefKind::Const | DefKind::AssocConst | DefKind::TyAlias, _) => {\n                 self.check_def_id(res.def_id());\n             }\n             _ if self.in_pat => {}"}, {"sha": "b55c5ec47eef1c1cd3289e4907336e8c75237f18", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "bbd74e90cebb65a98ce5932a3497b5711e99a6d6", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                             // If this path leads to a constant, then we need to\n                             // recurse into the constant to continue finding\n                             // items that are reachable.\n-                            Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {\n+                            Res::Def(DefKind::Const | DefKind::AssocConst, _) => {\n                                 self.worklist.push(hir_id);\n                             }\n "}, {"sha": "ecae5bc57cc5670b114335a98b2300ac60183304", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -565,8 +565,10 @@ fn resolve_local<'tcx>(\n             PatKind::Box(ref subpat) => is_binding_pat(&subpat),\n \n             PatKind::Ref(_, _)\n-            | PatKind::Binding(hir::BindingAnnotation::Unannotated, ..)\n-            | PatKind::Binding(hir::BindingAnnotation::Mutable, ..)\n+            | PatKind::Binding(\n+                hir::BindingAnnotation::Unannotated | hir::BindingAnnotation::Mutable,\n+                ..,\n+            )\n             | PatKind::Wild\n             | PatKind::Path(_)\n             | PatKind::Lit(_)"}, {"sha": "f9156be3f4ada34453fb92e01672532df5e2a1df", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -870,9 +870,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = ExpnId::root(); // FIXME(jseyfried) intercrate hygiene\n         // Record primary definitions.\n         match res {\n-            Res::Def(kind @ DefKind::Mod, def_id)\n-            | Res::Def(kind @ DefKind::Enum, def_id)\n-            | Res::Def(kind @ DefKind::Trait, def_id) => {\n+            Res::Def(kind @ (DefKind::Mod | DefKind::Enum | DefKind::Trait), def_id) => {\n                 let module = self.r.new_module(\n                     parent,\n                     ModuleKind::Def(kind, def_id, ident.name),\n@@ -882,30 +880,33 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n             }\n-            Res::Def(DefKind::Struct, _)\n-            | Res::Def(DefKind::Union, _)\n-            | Res::Def(DefKind::Variant, _)\n-            | Res::Def(DefKind::TyAlias, _)\n-            | Res::Def(DefKind::ForeignTy, _)\n-            | Res::Def(DefKind::OpaqueTy, _)\n-            | Res::Def(DefKind::TraitAlias, _)\n-            | Res::Def(DefKind::AssocTy, _)\n-            | Res::Def(DefKind::AssocOpaqueTy, _)\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::Variant\n+                | DefKind::TyAlias\n+                | DefKind::ForeignTy\n+                | DefKind::OpaqueTy\n+                | DefKind::TraitAlias\n+                | DefKind::AssocTy\n+                | DefKind::AssocOpaqueTy,\n+                _,\n+            )\n             | Res::PrimTy(..)\n             | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),\n-            Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::AssocFn, _)\n-            | Res::Def(DefKind::Static, _)\n-            | Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Ctor(..), _) => {\n-                self.r.define(parent, ident, ValueNS, (res, vis, span, expansion))\n-            }\n+            Res::Def(\n+                DefKind::Fn\n+                | DefKind::AssocFn\n+                | DefKind::Static\n+                | DefKind::Const\n+                | DefKind::AssocConst\n+                | DefKind::Ctor(..),\n+                _,\n+            ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {\n                 self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))\n             }\n-            Res::Def(DefKind::TyParam, _)\n-            | Res::Def(DefKind::ConstParam, _)\n+            Res::Def(DefKind::TyParam | DefKind::ConstParam, _)\n             | Res::Local(..)\n             | Res::SelfTy(..)\n             | Res::SelfCtor(..)\n@@ -914,7 +915,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record some extra data for better diagnostics.\n         let cstore = self.r.cstore();\n         match res {\n-            Res::Def(DefKind::Struct, def_id) | Res::Def(DefKind::Union, def_id) => {\n+            Res::Def(DefKind::Struct | DefKind::Union, def_id) => {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }"}, {"sha": "67713b56369650f7e78ecd6d06ab1bf6ebd2b8a4", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -237,46 +237,51 @@ impl<'a> PathSource<'a> {\n     crate fn is_expected(self, res: Res) -> bool {\n         match self {\n             PathSource::Type => match res {\n-                Res::Def(DefKind::Struct, _)\n-                | Res::Def(DefKind::Union, _)\n-                | Res::Def(DefKind::Enum, _)\n-                | Res::Def(DefKind::Trait, _)\n-                | Res::Def(DefKind::TraitAlias, _)\n-                | Res::Def(DefKind::TyAlias, _)\n-                | Res::Def(DefKind::AssocTy, _)\n+                Res::Def(\n+                    DefKind::Struct\n+                    | DefKind::Union\n+                    | DefKind::Enum\n+                    | DefKind::Trait\n+                    | DefKind::TraitAlias\n+                    | DefKind::TyAlias\n+                    | DefKind::AssocTy\n+                    | DefKind::TyParam\n+                    | DefKind::OpaqueTy\n+                    | DefKind::ForeignTy,\n+                    _,\n+                )\n                 | Res::PrimTy(..)\n-                | Res::Def(DefKind::TyParam, _)\n-                | Res::SelfTy(..)\n-                | Res::Def(DefKind::OpaqueTy, _)\n-                | Res::Def(DefKind::ForeignTy, _) => true,\n+                | Res::SelfTy(..) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::No) => match res {\n                 Res::Def(DefKind::Trait, _) => true,\n                 _ => false,\n             },\n             PathSource::Trait(AliasPossibility::Maybe) => match res {\n-                Res::Def(DefKind::Trait, _) => true,\n-                Res::Def(DefKind::TraitAlias, _) => true,\n+                Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => true,\n                 _ => false,\n             },\n             PathSource::Expr(..) => match res {\n-                Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n-                | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n-                | Res::Def(DefKind::Const, _)\n-                | Res::Def(DefKind::Static, _)\n+                Res::Def(\n+                    DefKind::Ctor(_, CtorKind::Const | CtorKind::Fn)\n+                    | DefKind::Const\n+                    | DefKind::Static\n+                    | DefKind::Fn\n+                    | DefKind::AssocFn\n+                    | DefKind::AssocConst\n+                    | DefKind::ConstParam,\n+                    _,\n+                )\n                 | Res::Local(..)\n-                | Res::Def(DefKind::Fn, _)\n-                | Res::Def(DefKind::AssocFn, _)\n-                | Res::Def(DefKind::AssocConst, _)\n-                | Res::SelfCtor(..)\n-                | Res::Def(DefKind::ConstParam, _) => true,\n+                | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n             PathSource::Pat => match res {\n-                Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n-                | Res::Def(DefKind::Const, _)\n-                | Res::Def(DefKind::AssocConst, _)\n+                Res::Def(\n+                    DefKind::Ctor(_, CtorKind::Const) | DefKind::Const | DefKind::AssocConst,\n+                    _,\n+                )\n                 | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n@@ -285,20 +290,19 @@ impl<'a> PathSource<'a> {\n                 _ => false,\n             },\n             PathSource::Struct => match res {\n-                Res::Def(DefKind::Struct, _)\n-                | Res::Def(DefKind::Union, _)\n-                | Res::Def(DefKind::Variant, _)\n-                | Res::Def(DefKind::TyAlias, _)\n-                | Res::Def(DefKind::AssocTy, _)\n+                Res::Def(\n+                    DefKind::Struct\n+                    | DefKind::Union\n+                    | DefKind::Variant\n+                    | DefKind::TyAlias\n+                    | DefKind::AssocTy,\n+                    _,\n+                )\n                 | Res::SelfTy(..) => true,\n                 _ => false,\n             },\n             PathSource::TraitItem(ns) => match res {\n-                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _)\n-                    if ns == ValueNS =>\n-                {\n-                    true\n-                }\n+                Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) if ns == ValueNS => true,\n                 Res::Def(DefKind::AssocTy, _) if ns == TypeNS => true,\n                 _ => false,\n             },\n@@ -316,8 +320,8 @@ impl<'a> PathSource<'a> {\n             (PathSource::Struct, false) => error_code!(E0422),\n             (PathSource::Expr(..), true) => error_code!(E0423),\n             (PathSource::Expr(..), false) => error_code!(E0425),\n-            (PathSource::Pat, true) | (PathSource::TupleStruct, true) => error_code!(E0532),\n-            (PathSource::Pat, false) | (PathSource::TupleStruct, false) => error_code!(E0531),\n+            (PathSource::Pat | PathSource::TupleStruct, true) => error_code!(E0532),\n+            (PathSource::Pat | PathSource::TupleStruct, false) => error_code!(E0531),\n             (PathSource::TraitItem(..), true) => error_code!(E0575),\n             (PathSource::TraitItem(..), false) => error_code!(E0576),\n         }\n@@ -459,7 +463,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let rib_kind = match fn_kind {\n             // Bail if there's no body.\n             FnKind::Fn(.., None) => return visit::walk_fn(self, fn_kind, sp),\n-            FnKind::Fn(FnCtxt::Free, ..) | FnKind::Fn(FnCtxt::Foreign, ..) => FnItemRibKind,\n+            FnKind::Fn(FnCtxt::Free | FnCtxt::Foreign, ..) => FnItemRibKind,\n             FnKind::Fn(FnCtxt::Assoc(_), ..) | FnKind::Closure(..) => NormalRibKind,\n         };\n         let previous_value = replace(&mut self.diagnostic_metadata.current_function, Some(sp));\n@@ -2147,7 +2151,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     return;\n                 }\n                 match binding.res() {\n-                    Res::Def(DefKind::Trait, _) | Res::Def(DefKind::TraitAlias, _) => {\n+                    Res::Def(DefKind::Trait | DefKind::TraitAlias, _) => {\n                         collected_traits.push((name, binding))\n                     }\n                     _ => (),"}, {"sha": "e7fa88bff97d5a091162fd4956153e3cd565bf10", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -123,10 +123,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             .map(|snippet| snippet.ends_with(')'))\n                             .unwrap_or(false)\n                     }\n-                    Res::Def(DefKind::Ctor(..), _)\n-                    | Res::Def(DefKind::AssocFn, _)\n-                    | Res::Def(DefKind::Const, _)\n-                    | Res::Def(DefKind::AssocConst, _)\n+                    Res::Def(\n+                        DefKind::Ctor(..) | DefKind::AssocFn | DefKind::Const | DefKind::AssocConst,\n+                        _,\n+                    )\n                     | Res::SelfCtor(_)\n                     | Res::PrimTy(_)\n                     | Res::Local(_) => true,\n@@ -527,8 +527,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     return false;\n                 }\n             }\n-            (Res::Def(DefKind::Enum, def_id), PathSource::TupleStruct)\n-            | (Res::Def(DefKind::Enum, def_id), PathSource::Expr(..)) => {\n+            (Res::Def(DefKind::Enum, def_id), PathSource::TupleStruct | PathSource::Expr(..)) => {\n                 if let Some(variants) = self.collect_enum_variants(def_id) {\n                     if !variants.is_empty() {\n                         let msg = if variants.len() == 1 {\n@@ -563,11 +562,13 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     bad_struct_syntax_suggestion(def_id);\n                 }\n             }\n-            (Res::Def(DefKind::Union, def_id), _)\n-            | (Res::Def(DefKind::Variant, def_id), _)\n-            | (Res::Def(DefKind::Ctor(_, CtorKind::Fictive), def_id), _)\n-                if ns == ValueNS =>\n-            {\n+            (\n+                Res::Def(\n+                    DefKind::Union | DefKind::Variant | DefKind::Ctor(_, CtorKind::Fictive),\n+                    def_id,\n+                ),\n+                _,\n+            ) if ns == ValueNS => {\n                 bad_struct_syntax_suggestion(def_id);\n             }\n             (Res::Def(DefKind::Ctor(_, CtorKind::Fn), def_id), _) if ns == ValueNS => {\n@@ -580,9 +581,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 err.span_label(span, fallback_label);\n                 err.note(\"can't use `Self` as a constructor, you must use the implemented struct\");\n             }\n-            (Res::Def(DefKind::TyAlias, _), _) | (Res::Def(DefKind::AssocTy, _), _)\n-                if ns == ValueNS =>\n-            {\n+            (Res::Def(DefKind::TyAlias | DefKind::AssocTy, _), _) if ns == ValueNS => {\n                 err.note(\"can't use a type alias as a constructor\");\n             }\n             _ => return false,\n@@ -618,7 +617,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 // Look for a field with the same name in the current self_type.\n                 if let Some(resolution) = self.r.partial_res_map.get(&node_id) {\n                     match resolution.base_res() {\n-                        Res::Def(DefKind::Struct, did) | Res::Def(DefKind::Union, did)\n+                        Res::Def(DefKind::Struct | DefKind::Union, did)\n                             if resolution.unresolved_segments() == 0 =>\n                         {\n                             if let Some(field_names) = self.r.field_names.get(&did) {"}, {"sha": "defb2c06b32ca2936daa045402f24991b8ac79b8", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1835,10 +1835,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     }\n \n                     Region::Static\n-                    | Region::EarlyBound(_, _, LifetimeDefOrigin::ExplicitOrElided)\n-                    | Region::LateBound(_, _, LifetimeDefOrigin::ExplicitOrElided)\n-                    | Region::EarlyBound(_, _, LifetimeDefOrigin::Error)\n-                    | Region::LateBound(_, _, LifetimeDefOrigin::Error)\n+                    | Region::EarlyBound(\n+                        _,\n+                        _,\n+                        LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n+                    )\n+                    | Region::LateBound(\n+                        _,\n+                        _,\n+                        LifetimeDefOrigin::ExplicitOrElided | LifetimeDefOrigin::Error,\n+                    )\n                     | Region::LateBoundAnon(..)\n                     | Region::Free(..) => {}\n                 }\n@@ -1898,15 +1904,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let type_def_id = match res {\n             Res::Def(DefKind::AssocTy, def_id) if depth == 1 => Some(parent_def_id(self, def_id)),\n             Res::Def(DefKind::Variant, def_id) if depth == 0 => Some(parent_def_id(self, def_id)),\n-            Res::Def(DefKind::Struct, def_id)\n-            | Res::Def(DefKind::Union, def_id)\n-            | Res::Def(DefKind::Enum, def_id)\n-            | Res::Def(DefKind::TyAlias, def_id)\n-            | Res::Def(DefKind::Trait, def_id)\n-                if depth == 0 =>\n-            {\n-                Some(def_id)\n-            }\n+            Res::Def(\n+                DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::Enum\n+                | DefKind::TyAlias\n+                | DefKind::Trait,\n+                def_id,\n+            ) if depth == 0 => Some(def_id),\n             _ => None,\n         };\n \n@@ -2149,9 +2154,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             // Whitelist the types that unambiguously always\n                             // result in the same type constructor being used\n                             // (it can't differ between `Self` and `self`).\n-                            Res::Def(DefKind::Struct, _)\n-                            | Res::Def(DefKind::Union, _)\n-                            | Res::Def(DefKind::Enum, _)\n+                            Res::Def(DefKind::Struct | DefKind::Union | DefKind::Enum, _)\n                             | Res::PrimTy(_) => return res == path.res,\n                             _ => {}\n                         }\n@@ -2844,8 +2847,9 @@ fn insert_late_bound_lifetimes(\n \n         fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n             match ty.kind {\n-                hir::TyKind::Path(hir::QPath::Resolved(Some(_), _))\n-                | hir::TyKind::Path(hir::QPath::TypeRelative(..)) => {\n+                hir::TyKind::Path(\n+                    hir::QPath::Resolved(Some(_), _) | hir::QPath::TypeRelative(..),\n+                ) => {\n                     // ignore lifetimes appearing in associated type\n                     // projections, as they are not *constrained*\n                     // (defined above)"}, {"sha": "e94d7d6a85fb4f09f629e926479106cb410d32be", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -534,7 +534,7 @@ impl<'a> ModuleData<'a> {\n \n     fn nearest_item_scope(&'a self) -> Module<'a> {\n         match self.kind {\n-            ModuleKind::Def(DefKind::Enum, ..) | ModuleKind::Def(DefKind::Trait, ..) => {\n+            ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {\n                 self.parent.expect(\"enum or trait module without a parent\")\n             }\n             _ => self,\n@@ -705,8 +705,10 @@ impl<'a> NameBinding<'a> {\n \n     fn is_variant(&self) -> bool {\n         match self.kind {\n-            NameBindingKind::Res(Res::Def(DefKind::Variant, _), _)\n-            | NameBindingKind::Res(Res::Def(DefKind::Ctor(CtorOf::Variant, ..), _), _) => true,\n+            NameBindingKind::Res(\n+                Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Variant, ..), _),\n+                _,\n+            ) => true,\n             _ => false,\n         }\n     }\n@@ -741,9 +743,7 @@ impl<'a> NameBinding<'a> {\n \n     fn is_importable(&self) -> bool {\n         match self.res() {\n-            Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::AssocFn, _)\n-            | Res::Def(DefKind::AssocTy, _) => false,\n+            Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _) => false,\n             _ => true,\n         }\n     }\n@@ -1539,8 +1539,9 @@ impl<'a> Resolver<'a> {\n                     let expn_data = expn_id.expn_data();\n                     match expn_data.kind {\n                         ExpnKind::Root\n-                        | ExpnKind::Macro(MacroKind::Bang, _)\n-                        | ExpnKind::Macro(MacroKind::Derive, _) => Scope::DeriveHelpersCompat,\n+                        | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n+                            Scope::DeriveHelpersCompat\n+                        }\n                         _ => Scope::DeriveHelpers(expn_data.parent),\n                     }\n                 }"}, {"sha": "431478500b42bd19b63fd15d383a7fc3a28f4763", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -940,13 +940,16 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                         );\n                     }\n                 }\n-                Res::Def(HirDefKind::Ctor(..), _)\n-                | Res::Def(HirDefKind::Const, _)\n-                | Res::Def(HirDefKind::AssocConst, _)\n-                | Res::Def(HirDefKind::Struct, _)\n-                | Res::Def(HirDefKind::Variant, _)\n-                | Res::Def(HirDefKind::TyAlias, _)\n-                | Res::Def(HirDefKind::AssocTy, _)\n+                Res::Def(\n+                    HirDefKind::Ctor(..)\n+                    | HirDefKind::Const\n+                    | HirDefKind::AssocConst\n+                    | HirDefKind::Struct\n+                    | HirDefKind::Variant\n+                    | HirDefKind::TyAlias\n+                    | HirDefKind::AssocTy,\n+                    _,\n+                )\n                 | Res::SelfTy(..) => {\n                     self.dump_path_ref(id, &ast::Path::from_ident(ident));\n                 }"}, {"sha": "1939b6261d57bff62b19531d51523c1bb73822de", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1,5 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n mod dump_visitor;\n@@ -641,9 +642,13 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             }\n \n             Node::Expr(&hir::Expr { kind: hir::ExprKind::Path(ref qpath), .. })\n-            | Node::Pat(&hir::Pat { kind: hir::PatKind::Path(ref qpath), .. })\n-            | Node::Pat(&hir::Pat { kind: hir::PatKind::Struct(ref qpath, ..), .. })\n-            | Node::Pat(&hir::Pat { kind: hir::PatKind::TupleStruct(ref qpath, ..), .. })\n+            | Node::Pat(&hir::Pat {\n+                kind:\n+                    hir::PatKind::Path(ref qpath)\n+                    | hir::PatKind::Struct(ref qpath, ..)\n+                    | hir::PatKind::TupleStruct(ref qpath, ..),\n+                ..\n+            })\n             | Node::Ty(&hir::Ty { kind: hir::TyKind::Path(ref qpath), .. }) => {\n                 self.tables.qpath_res(qpath, hir_id)\n             }\n@@ -699,20 +704,21 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Res::Def(HirDefKind::Trait, def_id) if fn_type(path_seg) => {\n                 Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(def_id) })\n             }\n-            Res::Def(HirDefKind::Struct, def_id)\n-            | Res::Def(HirDefKind::Variant, def_id)\n-            | Res::Def(HirDefKind::Union, def_id)\n-            | Res::Def(HirDefKind::Enum, def_id)\n-            | Res::Def(HirDefKind::TyAlias, def_id)\n-            | Res::Def(HirDefKind::ForeignTy, def_id)\n-            | Res::Def(HirDefKind::TraitAlias, def_id)\n-            | Res::Def(HirDefKind::AssocOpaqueTy, def_id)\n-            | Res::Def(HirDefKind::AssocTy, def_id)\n-            | Res::Def(HirDefKind::Trait, def_id)\n-            | Res::Def(HirDefKind::OpaqueTy, def_id)\n-            | Res::Def(HirDefKind::TyParam, def_id) => {\n-                Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(def_id) })\n-            }\n+            Res::Def(\n+                HirDefKind::Struct\n+                | HirDefKind::Variant\n+                | HirDefKind::Union\n+                | HirDefKind::Enum\n+                | HirDefKind::TyAlias\n+                | HirDefKind::ForeignTy\n+                | HirDefKind::TraitAlias\n+                | HirDefKind::AssocOpaqueTy\n+                | HirDefKind::AssocTy\n+                | HirDefKind::Trait\n+                | HirDefKind::OpaqueTy\n+                | HirDefKind::TyParam,\n+                def_id,\n+            ) => Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(def_id) }),\n             Res::Def(HirDefKind::ConstParam, def_id) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(def_id) })\n             }\n@@ -723,12 +729,13 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 let parent_def_id = self.tcx.parent(def_id).unwrap();\n                 Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(parent_def_id) })\n             }\n-            Res::Def(HirDefKind::Static, _)\n-            | Res::Def(HirDefKind::Const, _)\n-            | Res::Def(HirDefKind::AssocConst, _)\n-            | Res::Def(HirDefKind::Ctor(..), _) => {\n-                Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n-            }\n+            Res::Def(\n+                HirDefKind::Static\n+                | HirDefKind::Const\n+                | HirDefKind::AssocConst\n+                | HirDefKind::Ctor(..),\n+                _,\n+            ) => Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) }),\n             Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);"}, {"sha": "a2b973cda91123e525abd113183e937f69c3fc71", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -561,9 +561,7 @@ impl Sig for ast::Path {\n                     refs: vec![],\n                 });\n             }\n-            Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Variant, _)\n-            | Res::Def(DefKind::Ctor(..), _) => {\n+            Res::Def(DefKind::AssocConst | DefKind::Variant | DefKind::Ctor(..), _) => {\n                 let len = self.segments.len();\n                 if len < 2 {\n                     return Err(\"Bad path\");"}, {"sha": "fa167dc28739402f6858e27510134e3148adc11a", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1952,11 +1952,9 @@ impl PpMode {\n         use PpMode::*;\n         use PpSourceMode::*;\n         match *self {\n-            PpmSource(PpmNormal) | PpmSource(PpmEveryBodyLoops) | PpmSource(PpmIdentified) => false,\n+            PpmSource(PpmNormal | PpmEveryBodyLoops | PpmIdentified) => false,\n \n-            PpmSource(PpmExpanded)\n-            | PpmSource(PpmExpandedIdentified)\n-            | PpmSource(PpmExpandedHygiene)\n+            PpmSource(PpmExpanded | PpmExpandedIdentified | PpmExpandedHygiene)\n             | PpmHir(_)\n             | PpmHirTree(_)\n             | PpmMir"}, {"sha": "80b693fe1ab60e542c40c4e90d388fd3e8d0617e", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1,4 +1,5 @@\n #![feature(crate_visibility_modifier)]\n+#![feature(or_patterns)]\n \n pub mod cgu_reuse_tracker;\n pub mod utils;"}, {"sha": "e97723d9fc0ea47687000bc5eeec587a665864fe", "filename": "src/librustc_symbol_mangling/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_symbol_mangling%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_symbol_mangling%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -90,6 +90,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(never_type)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "53df140e0b5ae9efe2229b1b9ce32aaa292b2472", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -153,7 +153,7 @@ impl SymbolMangler<'tcx> {\n \n         // Write a separating `_` if necessary (leading digit or `_`).\n         match ident.chars().next() {\n-            Some('_') | Some('0'..='9') => {\n+            Some('_' | '0'..='9') => {\n                 self.push(\"_\");\n             }\n             _ => {}"}, {"sha": "2b19699d6ec75f0a2227283506337dd750c675a3", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -319,10 +319,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     );\n                     return;\n                 }\n-                hir::Node::Item(\n-                    hir::Item { kind: hir::ItemKind::Trait(_, _, generics, _, _), .. }\n-                    | hir::Item { kind: hir::ItemKind::Impl { generics, .. }, .. },\n-                ) if projection.is_some() => {\n+                hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Trait(_, _, generics, _, _)\n+                        | hir::ItemKind::Impl { generics, .. },\n+                    ..\n+                }) if projection.is_some() => {\n                     // Missing restriction on associated type of type parameter (unmet projection).\n                     suggest_restriction(\n                         &generics,\n@@ -335,19 +337,19 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                hir::Node::Item(\n-                    hir::Item { kind: hir::ItemKind::Struct(_, generics), .. }\n-                    | hir::Item { kind: hir::ItemKind::Enum(_, generics), .. }\n-                    | hir::Item { kind: hir::ItemKind::Union(_, generics), .. }\n-                    | hir::Item { kind: hir::ItemKind::Trait(_, _, generics, ..), .. }\n-                    | hir::Item { kind: hir::ItemKind::Impl { generics, .. }, .. }\n-                    | hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. }\n-                    | hir::Item { kind: hir::ItemKind::TyAlias(_, generics), .. }\n-                    | hir::Item { kind: hir::ItemKind::TraitAlias(generics, _), .. }\n-                    | hir::Item {\n-                        kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }), ..\n-                    },\n-                )\n+                hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Struct(_, generics)\n+                        | hir::ItemKind::Enum(_, generics)\n+                        | hir::ItemKind::Union(_, generics)\n+                        | hir::ItemKind::Trait(_, _, generics, ..)\n+                        | hir::ItemKind::Impl { generics, .. }\n+                        | hir::ItemKind::Fn(_, generics, _)\n+                        | hir::ItemKind::TyAlias(_, generics)\n+                        | hir::ItemKind::TraitAlias(generics, _)\n+                        | hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. }),\n+                    ..\n+                })\n                 | hir::Node::TraitItem(hir::TraitItem { generics, .. })\n                 | hir::Node::ImplItem(hir::ImplItem { generics, .. })\n                     if param_ty =>\n@@ -466,9 +468,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         );\n \n         match self.evaluate_obligation(&obligation) {\n-            Ok(EvaluationResult::EvaluatedToOk)\n-            | Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n-            | Ok(EvaluationResult::EvaluatedToAmbig) => {}\n+            Ok(\n+                EvaluationResult::EvaluatedToOk\n+                | EvaluationResult::EvaluatedToOkModuloRegions\n+                | EvaluationResult::EvaluatedToAmbig,\n+            ) => {}\n             _ => return,\n         }\n         let hir = self.tcx.hir();\n@@ -1448,7 +1452,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // ```\n                 debug!(\"parent_def_kind: {:?}\", self.tcx.def_kind(parent_did));\n                 let is_raw_borrow_inside_fn_like_call = match self.tcx.def_kind(parent_did) {\n-                    Some(DefKind::Fn) | Some(DefKind::Ctor(..)) => target_ty.is_unsafe_ptr(),\n+                    Some(DefKind::Fn | DefKind::Ctor(..)) => target_ty.is_unsafe_ptr(),\n                     _ => false,\n                 };\n "}, {"sha": "45fda3004b09b42b77a79c1644cb394888d3568a", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -2139,8 +2139,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());\n \n         match self_ty.kind {\n-            ty::Infer(ty::IntVar(_))\n-            | ty::Infer(ty::FloatVar(_))\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Uint(_)\n             | ty::Int(_)\n             | ty::Bool\n@@ -2180,9 +2179,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::UnnormalizedProjection(..)\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_))\n-            | ty::Infer(ty::FreshIntTy(_))\n-            | ty::Infer(ty::FreshFloatTy(_)) => {\n+            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }\n@@ -2254,9 +2251,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::UnnormalizedProjection(..)\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n-            | ty::Infer(ty::FreshTy(_))\n-            | ty::Infer(ty::FreshIntTy(_))\n-            | ty::Infer(ty::FreshFloatTy(_)) => {\n+            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n             }\n         }\n@@ -2283,8 +2278,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::FnPtr(_)\n             | ty::Str\n             | ty::Error\n-            | ty::Infer(ty::IntVar(_))\n-            | ty::Infer(ty::FloatVar(_))\n+            | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Never\n             | ty::Char => Vec::new(),\n \n@@ -2295,10 +2289,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Foreign(..)\n             | ty::Projection(..)\n             | ty::Bound(..)\n-            | ty::Infer(ty::TyVar(_))\n-            | ty::Infer(ty::FreshTy(_))\n-            | ty::Infer(ty::FreshIntTy(_))\n-            | ty::Infer(ty::FreshFloatTy(_)) => {\n+            | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble constituent types of unexpected type: {:?}\", t);\n             }\n "}, {"sha": "ba840c283b84b49d6371a7a091e5c51a522a55a7", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -4,6 +4,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n+#![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "4f3eba9995638469a5ac294afc25553443f90b7e", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -150,9 +150,7 @@ crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n-            Some(DefKind::Trait) | Some(DefKind::TraitAlias) => {\n-                program_clauses_for_trait(tcx, def_id)\n-            }\n+            Some(DefKind::Trait | DefKind::TraitAlias) => program_clauses_for_trait(tcx, def_id),\n             // FIXME(eddyb) deduplicate this `associated_item` call with\n             // `program_clauses_for_associated_type_{value,def}`.\n             Some(DefKind::AssocTy) => match tcx.associated_item(def_id).container {\n@@ -163,11 +161,13 @@ crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n                     program_clauses_for_associated_type_def(tcx, def_id)\n                 }\n             },\n-            Some(DefKind::Struct)\n-            | Some(DefKind::Enum)\n-            | Some(DefKind::TyAlias)\n-            | Some(DefKind::Union)\n-            | Some(DefKind::OpaqueTy) => program_clauses_for_type_def(tcx, def_id),\n+            Some(\n+                DefKind::Struct\n+                | DefKind::Enum\n+                | DefKind::TyAlias\n+                | DefKind::Union\n+                | DefKind::OpaqueTy,\n+            ) => program_clauses_for_type_def(tcx, def_id),\n             _ => List::empty(),\n         },\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),"}, {"sha": "19c8f540c5700b7f4cedcb6f95f92cad4b062a00", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -592,8 +592,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 args.next();\n                                 params.next();\n                             }\n-                            (GenericArg::Type(_), GenericParamDefKind::Lifetime)\n-                            | (GenericArg::Const(_), GenericParamDefKind::Lifetime) => {\n+                            (\n+                                GenericArg::Type(_) | GenericArg::Const(_),\n+                                GenericParamDefKind::Lifetime,\n+                            ) => {\n                                 // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(inferred_kind(None, param, infer_args));\n@@ -2231,10 +2233,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     || None,\n                 )?\n             }\n-            (&ty::Param(_), Res::SelfTy(Some(param_did), None))\n-            | (&ty::Param(_), Res::Def(DefKind::TyParam, param_did)) => {\n-                self.find_bound_for_assoc_item(param_did, assoc_ident, span)?\n-            }\n+            (\n+                &ty::Param(_),\n+                Res::SelfTy(Some(param_did), None) | Res::Def(DefKind::TyParam, param_did),\n+            ) => self.find_bound_for_assoc_item(param_did, assoc_ident, span)?,\n             _ => {\n                 if variant_resolution.is_some() {\n                     // Variant in type position\n@@ -2630,11 +2632,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let substs = self.ast_path_substs_for_ty(span, did, item_segment.0);\n                 self.normalize_ty(span, tcx.mk_opaque(did, substs))\n             }\n-            Res::Def(DefKind::Enum, did)\n-            | Res::Def(DefKind::TyAlias, did)\n-            | Res::Def(DefKind::Struct, did)\n-            | Res::Def(DefKind::Union, did)\n-            | Res::Def(DefKind::ForeignTy, did) => {\n+            Res::Def(\n+                DefKind::Enum\n+                | DefKind::TyAlias\n+                | DefKind::Struct\n+                | DefKind::Union\n+                | DefKind::ForeignTy,\n+                did,\n+            ) => {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments.split_last().unwrap().1);\n                 self.ast_path_to_ty(span, did, path.segments.last().unwrap())"}, {"sha": "981e6d2c47eef18c6886ecd24a5399f842080d3c", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -564,8 +564,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                 ty::Int(_)\n                                 | ty::Uint(_)\n                                 | ty::Float(_)\n-                                | ty::Infer(ty::InferTy::IntVar(_))\n-                                | ty::Infer(ty::InferTy::FloatVar(_)) => Err(CastError::NeedDeref),\n+                                | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(_)) => {\n+                                    Err(CastError::NeedDeref)\n+                                }\n                                 _ => Err(CastError::NeedViaPtr),\n                             },\n                             // array-ptr-cast\n@@ -583,7 +584,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n         match (t_from, t_cast) {\n             // These types have invariants! can't cast into them.\n-            (_, Int(CEnum)) | (_, FnPtr) => Err(CastError::NonScalar),\n+            (_, Int(CEnum) | FnPtr) => Err(CastError::NonScalar),\n \n             // * -> Bool\n             (_, Int(Bool)) => Err(CastError::CastToBool),\n@@ -593,16 +594,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             (_, Int(Char)) => Err(CastError::CastToChar),\n \n             // prim -> float,ptr\n-            (Int(Bool), Float) | (Int(CEnum), Float) | (Int(Char), Float) => {\n-                Err(CastError::NeedViaInt)\n-            }\n+            (Int(Bool) | Int(CEnum) | Int(Char), Float) => Err(CastError::NeedViaInt),\n \n-            (Int(Bool), Ptr(_))\n-            | (Int(CEnum), Ptr(_))\n-            | (Int(Char), Ptr(_))\n-            | (Ptr(_), Float)\n-            | (FnPtr, Float)\n-            | (Float, Ptr(_)) => Err(CastError::IllegalCast),\n+            (Int(Bool) | Int(CEnum) | Int(Char) | Float, Ptr(_)) | (Ptr(_) | FnPtr, Float) => {\n+                Err(CastError::IllegalCast)\n+            }\n \n             // ptr -> *\n             (Ptr(m_e), Ptr(m_c)) => self.check_ptr_ptr_cast(fcx, m_e, m_c), // ptr-ptr-cast\n@@ -615,11 +611,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n             // prim -> prim\n             (Int(CEnum), Int(_)) => Ok(CastKind::EnumCast),\n-            (Int(Char), Int(_)) | (Int(Bool), Int(_)) => Ok(CastKind::PrimIntCast),\n+            (Int(Char) | Int(Bool), Int(_)) => Ok(CastKind::PrimIntCast),\n \n-            (Int(_), Int(_)) | (Int(_), Float) | (Float, Int(_)) | (Float, Float) => {\n-                Ok(CastKind::NumericCast)\n-            }\n+            (Int(_) | Float, Int(_) | Float) => Ok(CastKind::NumericCast),\n         }\n     }\n "}, {"sha": "6fc5039f16d9181f97a03705915a8258e720e253", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -101,9 +101,8 @@ fn coerce_mutbls<'tcx>(\n     to_mutbl: hir::Mutability,\n ) -> RelateResult<'tcx, ()> {\n     match (from_mutbl, to_mutbl) {\n-        (hir::Mutability::Mut, hir::Mutability::Mut)\n-        | (hir::Mutability::Not, hir::Mutability::Not)\n-        | (hir::Mutability::Mut, hir::Mutability::Not) => Ok(()),\n+        (hir::Mutability::Mut, hir::Mutability::Mut | hir::Mutability::Not)\n+        | (hir::Mutability::Not, hir::Mutability::Not) => Ok(()),\n         (hir::Mutability::Not, hir::Mutability::Mut) => Err(TypeError::Mutability),\n     }\n }"}, {"sha": "6f142f776966176f3a5cfd390a80ca99ce6f95e8", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -390,9 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         match (&expr.kind, &expected.kind, &checked_ty.kind) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.kind, &check.kind) {\n-                (&ty::Str, &ty::Array(arr, _)) | (&ty::Str, &ty::Slice(arr))\n-                    if arr == self.tcx.types.u8 =>\n-                {\n+                (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n                             if src.starts_with(\"b\\\"\") {\n@@ -405,9 +403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                (&ty::Array(arr, _), &ty::Str) | (&ty::Slice(arr), &ty::Str)\n-                    if arr == self.tcx.types.u8 =>\n-                {\n+                (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n                             if src.starts_with('\"') {\n@@ -702,7 +698,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let suffix_suggestion = format!(\n                 \"{}{}{}{}\",\n                 if needs_paren { \"(\" } else { \"\" },\n-                if let (ty::Int(_), ty::Float(_)) | (ty::Uint(_), ty::Float(_)) =\n+                if let (ty::Int(_) | ty::Uint(_), ty::Float(_)) =\n                     (&expected_ty.kind, &checked_ty.kind,)\n                 {\n                     // Remove fractional part from literal, for example `42.0f32` into `42`\n@@ -791,7 +787,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     true\n                 }\n-                (&ty::Uint(_), &ty::Float(_)) | (&ty::Int(_), &ty::Float(_)) => {\n+                (&ty::Uint(_) | &ty::Int(_), &ty::Float(_)) => {\n                     if literal_is_ty_suffixed(expr) {\n                         err.span_suggestion(\n                             expr.span,"}, {"sha": "edc8e97ec77d6202c1ec84c1282144f11f8a6d5d", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -235,9 +235,10 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                         // Direct calls never need to keep the callee `ty::FnDef`\n                         // ZST in a temporary, so skip its type, just in case it\n                         // can significantly complicate the generator type.\n-                        Res::Def(DefKind::Fn, _)\n-                        | Res::Def(DefKind::AssocFn, _)\n-                        | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n+                        Res::Def(\n+                            DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(_, CtorKind::Fn),\n+                            _,\n+                        ) => {\n                             // NOTE(eddyb) this assumes a path expression has\n                             // no nested expressions to keep track of.\n                             self.expr_count += 1;"}, {"sha": "362910f54cd2220d108491c36db96e4fe9372dae", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1281,7 +1281,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n         res: Res,\n     ) {\n         match res {\n-            Res::Def(DefKind::Trait, def_id) | Res::Def(DefKind::TraitAlias, def_id) => {\n+            Res::Def(DefKind::Trait | DefKind::TraitAlias, def_id) => {\n                 traits.push(def_id);\n             }\n             Res::Def(DefKind::Mod, def_id) => {"}, {"sha": "1be8d258dcb18d29333f7e2b447c4e51173d485b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1639,8 +1639,10 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: DefId, span:\n     }\n \n     let prohibit_opaque = match item.kind {\n-        ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::AsyncFn, .. })\n-        | ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn, .. }) => {\n+        ItemKind::OpaqueTy(hir::OpaqueTy {\n+            origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n+            ..\n+        }) => {\n             let mut visitor = ProhibitOpaqueVisitor {\n                 opaque_identity_ty: tcx\n                     .mk_opaque(def_id, InternalSubsts::identity_for_item(tcx, def_id)),\n@@ -4127,10 +4129,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ty::Float(ast::FloatTy::F32) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_double\");\n                     }\n-                    ty::Int(ast::IntTy::I8) | ty::Int(ast::IntTy::I16) | ty::Bool => {\n+                    ty::Int(ast::IntTy::I8 | ast::IntTy::I16) | ty::Bool => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_int\");\n                     }\n-                    ty::Uint(ast::UintTy::U8) | ty::Uint(ast::UintTy::U16) => {\n+                    ty::Uint(ast::UintTy::U8 | ast::UintTy::U16) => {\n                         variadic_error(tcx.sess, arg.span, arg_ty, \"c_uint\");\n                     }\n                     ty::FnDef(..) => {\n@@ -4365,10 +4367,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Adt(adt, substs) => Some((adt.variant_of_res(def), adt.did, substs)),\n                 _ => bug!(\"unexpected type: {:?}\", ty),\n             },\n-            Res::Def(DefKind::Struct, _)\n-            | Res::Def(DefKind::Union, _)\n-            | Res::Def(DefKind::TyAlias, _)\n-            | Res::Def(DefKind::AssocTy, _)\n+            Res::Def(DefKind::Struct | DefKind::Union | DefKind::TyAlias | DefKind::AssocTy, _)\n             | Res::SelfTy(..) => match ty.kind {\n                 ty::Adt(adt, substs) if !adt.is_enum() => {\n                     Some((adt.non_enum_variant(), adt.did, substs))\n@@ -4898,15 +4897,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             let mut msg = \"call this function\";\n             match hir.get_if_local(def_id) {\n-                Some(Node::Item(hir::Item { kind: ItemKind::Fn(.., body_id), .. }))\n-                | Some(Node::ImplItem(hir::ImplItem {\n-                    kind: hir::ImplItemKind::Fn(_, body_id),\n-                    ..\n-                }))\n-                | Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Provided(body_id)),\n-                    ..\n-                })) => {\n+                Some(\n+                    Node::Item(hir::Item { kind: ItemKind::Fn(.., body_id), .. })\n+                    | Node::ImplItem(hir::ImplItem {\n+                        kind: hir::ImplItemKind::Fn(_, body_id), ..\n+                    })\n+                    | Node::TraitItem(hir::TraitItem {\n+                        kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Provided(body_id)),\n+                        ..\n+                    }),\n+                ) => {\n                     let body = hir.body(*body_id);\n                     sugg_call = body\n                         .params\n@@ -5403,7 +5403,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     is_alias_variant_ctor = true;\n                 }\n             }\n-            Res::Def(DefKind::AssocFn, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::AssocFn | DefKind::AssocConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {"}, {"sha": "b53ae6acdebbb8f953e6895d46818dba20d13da3", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // These constants can be of a reference type, e.g. `const X: &u8 = &0;`.\n                 // Peeling the reference types too early will cause type checking failures.\n                 // Although it would be possible to *also* peel the types of the constants too.\n-                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => AdjustMode::Pass,\n+                Res::Def(DefKind::Const | DefKind::AssocConst, _) => AdjustMode::Pass,\n                 // In the `ValueNS`, we have `SelfCtor(..) | Ctor(_, Const), _)` remaining which\n                 // could successfully compile. The former being `Self` requires a unit struct.\n                 // In either case, and unlike constants, the pattern itself cannot be"}, {"sha": "afbda967c325571660d5b1090d06a1762899dcae", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -1230,7 +1230,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         // reference to the closure.\n         if let ty::Closure(_, substs) = ty.kind {\n             match self.infcx.closure_kind(substs) {\n-                Some(ty::ClosureKind::Fn) | Some(ty::ClosureKind::FnMut) => {\n+                Some(ty::ClosureKind::Fn | ty::ClosureKind::FnMut) => {\n                     // Region of environment pointer\n                     let env_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                         scope: upvar_id.closure_expr_id.to_def_id(),"}, {"sha": "c8f2a5798cddfce8236466a9ab39bfa1cd8bbd53", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -395,17 +395,15 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n             ty::UpvarCapture::ByRef(mut upvar_borrow) => {\n                 match (upvar_borrow.kind, kind) {\n                     // Take RHS:\n-                    (ty::ImmBorrow, ty::UniqueImmBorrow)\n-                    | (ty::ImmBorrow, ty::MutBorrow)\n+                    (ty::ImmBorrow, ty::UniqueImmBorrow | ty::MutBorrow)\n                     | (ty::UniqueImmBorrow, ty::MutBorrow) => {\n                         upvar_borrow.kind = kind;\n                         self.adjust_upvar_captures\n                             .insert(upvar_id, ty::UpvarCapture::ByRef(upvar_borrow));\n                     }\n                     // Take LHS:\n                     (ty::ImmBorrow, ty::ImmBorrow)\n-                    | (ty::UniqueImmBorrow, ty::ImmBorrow)\n-                    | (ty::UniqueImmBorrow, ty::UniqueImmBorrow)\n+                    | (ty::UniqueImmBorrow, ty::ImmBorrow | ty::UniqueImmBorrow)\n                     | (ty::MutBorrow, _) => {}\n                 }\n             }\n@@ -440,14 +438,12 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n \n         match (existing_kind, new_kind) {\n             (ty::ClosureKind::Fn, ty::ClosureKind::Fn)\n-            | (ty::ClosureKind::FnMut, ty::ClosureKind::Fn)\n-            | (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut)\n+            | (ty::ClosureKind::FnMut, ty::ClosureKind::Fn | ty::ClosureKind::FnMut)\n             | (ty::ClosureKind::FnOnce, _) => {\n                 // no change needed\n             }\n \n-            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut)\n-            | (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce)\n+            (ty::ClosureKind::Fn, ty::ClosureKind::FnMut | ty::ClosureKind::FnOnce)\n             | (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                 // new kind is stronger than the old kind\n                 self.current_closure_kind = new_kind;"}, {"sha": "ce5967e7a9a1c6c37e9ad82c7d292d6ced6a46c1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -137,8 +137,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // operating on scalars, we clear the overload.\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         match e.kind {\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref inner)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNot, ref inner) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnNeg | hir::UnOp::UnNot, ref inner) => {\n                 let inner_ty = self.fcx.node_ty(inner.hir_id);\n                 let inner_ty = self.fcx.resolve_vars_if_possible(&inner_ty);\n "}, {"sha": "b06fe212c1a504ff41c7b0193539b6164a795560", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -398,9 +398,11 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                         _ => {}\n                     }\n                 }\n-                hir::Node::Item(hir::Item { kind: hir::ItemKind::Struct(..), .. })\n-                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Enum(..), .. })\n-                | hir::Node::Item(hir::Item { kind: hir::ItemKind::Union(..), .. }) => {}\n+                hir::Node::Item(hir::Item {\n+                    kind:\n+                        hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..),\n+                    ..\n+                }) => {}\n                 hir::Node::Item(_)\n                 | hir::Node::ForeignItem(_)\n                 | hir::Node::TraitItem(_)\n@@ -1089,13 +1091,15 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             }\n \n             match self.tcx.named_region(lt.hir_id) {\n-                Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n-                Some(rl::Region::LateBound(debruijn, _, _))\n-                | Some(rl::Region::LateBoundAnon(debruijn, _))\n-                    if debruijn < self.outer_index => {}\n-                Some(rl::Region::LateBound(..))\n-                | Some(rl::Region::LateBoundAnon(..))\n-                | Some(rl::Region::Free(..))\n+                Some(rl::Region::Static | rl::Region::EarlyBound(..)) => {}\n+                Some(\n+                    rl::Region::LateBound(debruijn, _, _) | rl::Region::LateBoundAnon(debruijn, _),\n+                ) if debruijn < self.outer_index => {}\n+                Some(\n+                    rl::Region::LateBound(..)\n+                    | rl::Region::LateBoundAnon(..)\n+                    | rl::Region::Free(..),\n+                )\n                 | None => {\n                     self.has_late_bound_regions = Some(lt.span);\n                 }\n@@ -2188,11 +2192,13 @@ fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability> {\n     match tcx.hir().get_if_local(def_id) {\n-        Some(Node::Item(&hir::Item { kind: hir::ItemKind::Static(_, mutbl, _), .. }))\n-        | Some(Node::ForeignItem(&hir::ForeignItem {\n-            kind: hir::ForeignItemKind::Static(_, mutbl),\n-            ..\n-        })) => Some(mutbl),\n+        Some(\n+            Node::Item(&hir::Item { kind: hir::ItemKind::Static(_, mutbl, _), .. })\n+            | Node::ForeignItem(&hir::ForeignItem {\n+                kind: hir::ForeignItemKind::Static(_, mutbl),\n+                ..\n+            }),\n+        ) => Some(mutbl),\n         Some(_) => None,\n         _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),\n     }"}, {"sha": "18987d6b5a41d5876dd73dba28741ef5d7ce88ba", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -216,8 +216,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     .to_ty(tcx),\n \n                 Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n-                | Node::Expr(&Expr { kind: ExprKind::Struct(..), .. })\n-                | Node::Expr(&Expr { kind: ExprKind::Path(_), .. })\n+                | Node::Expr(&Expr { kind: ExprKind::Struct(..) | ExprKind::Path(_), .. })\n                 | Node::TraitRef(..) => {\n                     let path = match parent_node {\n                         Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })"}, {"sha": "cd1aad267add468ad6fd27b1ccf683c7553b719e", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad48d52a74e3e20fb1ecefaece7312cca90ab950/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=ad48d52a74e3e20fb1ecefaece7312cca90ab950", "patch": "@@ -421,12 +421,15 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         debug!(\"cat_res: id={:?} expr={:?} def={:?}\", hir_id, expr_ty, res);\n \n         match res {\n-            Res::Def(DefKind::Ctor(..), _)\n-            | Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::ConstParam, _)\n-            | Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::AssocFn, _)\n+            Res::Def(\n+                DefKind::Ctor(..)\n+                | DefKind::Const\n+                | DefKind::ConstParam\n+                | DefKind::AssocConst\n+                | DefKind::Fn\n+                | DefKind::AssocFn,\n+                _,\n+            )\n             | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),\n \n             Res::Def(DefKind::Static, _) => Ok(Place {"}]}