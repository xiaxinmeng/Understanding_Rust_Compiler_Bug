{"sha": "b8a0c49e51a65aff7189da95583fb5273c02ce37", "node_id": "C_kwDOAAsO6NoAKGI4YTBjNDllNTFhNjVhZmY3MTg5ZGE5NTU4M2ZiNTI3M2MwMmNlMzc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T12:23:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-14T12:23:31Z"}, "message": "test that we can see this weak behavior", "tree": {"sha": "b06ff4281f46bcdfece8fbbdd59065ecfb2fe360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b06ff4281f46bcdfece8fbbdd59065ecfb2fe360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8a0c49e51a65aff7189da95583fb5273c02ce37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a0c49e51a65aff7189da95583fb5273c02ce37", "html_url": "https://github.com/rust-lang/rust/commit/b8a0c49e51a65aff7189da95583fb5273c02ce37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8a0c49e51a65aff7189da95583fb5273c02ce37/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c3e42bd7c21be29227646dfce465cb57827465", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c3e42bd7c21be29227646dfce465cb57827465", "html_url": "https://github.com/rust-lang/rust/commit/07c3e42bd7c21be29227646dfce465cb57827465"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "71d57dd11ec788e2ce7f644818628648164c19ca", "filename": "tests/pass/weak_memory/weak.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b8a0c49e51a65aff7189da95583fb5273c02ce37/tests%2Fpass%2Fweak_memory%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8a0c49e51a65aff7189da95583fb5273c02ce37/tests%2Fpass%2Fweak_memory%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fweak.rs?ref=b8a0c49e51a65aff7189da95583fb5273c02ce37", "patch": "@@ -8,8 +8,8 @@\n // Spurious failure is possible, if you are really unlucky with\n // the RNG and always read the latest value from the store buffer.\n \n-use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;\n+use std::sync::atomic::{fence, AtomicUsize};\n use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n@@ -70,7 +70,7 @@ fn seq_cst() -> bool {\n     r3 == 1\n }\n \n-fn initialization_write() -> bool {\n+fn initialization_write(add_fence: bool) -> bool {\n     let x = static_atomic(11);\n     assert_eq!(x.load(Relaxed), 11); // work around https://github.com/rust-lang/miri/issues/2164\n \n@@ -85,6 +85,9 @@ fn initialization_write() -> bool {\n \n     let j2 = spawn(move || {\n         reads_value(wait, 1);\n+        if add_fence {\n+            fence(AcqRel);\n+        }\n         x.load(Relaxed)\n     });\n \n@@ -94,6 +97,46 @@ fn initialization_write() -> bool {\n     r2 == 11\n }\n \n+fn faa_replaced_by_load() -> bool {\n+    // Example from https://github.com/llvm/llvm-project/issues/56450#issuecomment-1183695905\n+    #[no_mangle]\n+    pub fn rdmw(storing: &AtomicUsize, sync: &AtomicUsize, loading: &AtomicUsize) -> usize {\n+        storing.store(1, Relaxed);\n+        fence(Release);\n+        // sync.fetch_add(0, Relaxed);\n+        sync.load(Relaxed);\n+        fence(Acquire);\n+        loading.load(Relaxed)\n+    }\n+\n+    let x = static_atomic(0);\n+    assert_eq!(x.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+    let y = static_atomic(0);\n+    assert_eq!(y.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+    let z = static_atomic(0);\n+    assert_eq!(z.load(Relaxed), 0); // work around https://github.com/rust-lang/miri/issues/2164\n+\n+    // Since each thread is so short, we need to make sure that they truely run at the same time\n+    // Otherwise t1 will finish before t2 even starts\n+    let go = static_atomic(0);\n+\n+    let t1 = spawn(move || {\n+        while go.load(Relaxed) == 0 {}\n+        rdmw(y, x, z)\n+    });\n+\n+    let t2 = spawn(move || {\n+        while go.load(Relaxed) == 0 {}\n+        rdmw(z, x, y)\n+    });\n+\n+    go.store(1, Relaxed);\n+\n+    let a = t1.join().unwrap();\n+    let b = t2.join().unwrap();\n+    (a, b) == (0, 0)\n+}\n+\n /// Asserts that the function returns true at least once in 100 runs\n fn assert_once(f: fn() -> bool) {\n     assert!(std::iter::repeat_with(|| f()).take(100).any(|x| x));\n@@ -102,5 +145,7 @@ fn assert_once(f: fn() -> bool) {\n pub fn main() {\n     assert_once(relaxed);\n     assert_once(seq_cst);\n-    assert_once(initialization_write);\n+    assert_once(|| initialization_write(false));\n+    assert_once(|| initialization_write(true));\n+    assert_once(faa_replaced_by_load);\n }"}]}