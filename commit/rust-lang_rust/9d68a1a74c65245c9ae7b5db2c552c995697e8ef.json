{"sha": "9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "node_id": "C_kwDOAAsO6NoAKDlkNjhhMWE3NGM2NTI0NWM5YWU3YjVkYjJjNTUyYzk5NTY5N2U4ZWY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-11-25T03:14:19Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-11-25T03:14:19Z"}, "message": "Tune RepeatWith::try_fold and Take::for_each and Vec::extend_trusted", "tree": {"sha": "ba257e6f512820fb89ae725ef0b8312af36ac43d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba257e6f512820fb89ae725ef0b8312af36ac43d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "html_url": "https://github.com/rust-lang/rust/commit/9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9", "html_url": "https://github.com/rust-lang/rust/commit/a8954f1f6a2245794ff41db9b1cba33a76e7d5f9"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "e147af2ce39c68f905601bfc9c2c66e1b8c1687f", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -2874,13 +2874,12 @@ impl<T, A: Allocator> Vec<T, A> {\n             );\n             self.reserve(additional);\n             unsafe {\n-                let mut ptr = self.as_mut_ptr().add(self.len());\n+                let ptr = self.as_mut_ptr();\n                 let mut local_len = SetLenOnDrop::new(&mut self.len);\n                 iterator.for_each(move |element| {\n-                    ptr::write(ptr, element);\n-                    ptr = ptr.add(1);\n-                    // Since the loop executes user code which can panic we have to bump the pointer\n-                    // after each step.\n+                    ptr::write(ptr.add(local_len.current_len()), element);\n+                    // Since the loop executes user code which can panic we have to update\n+                    // the length every step to correctly drop what we've written.\n                     // NB can't overflow since we would have had to alloc the address space\n                     local_len.increment_len(1);\n                 });"}, {"sha": "6ce5a3a9f54eb76aa7e9903c56a8ebc28e9490b8", "filename": "library/alloc/src/vec/set_len_on_drop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -18,6 +18,11 @@ impl<'a> SetLenOnDrop<'a> {\n     pub(super) fn increment_len(&mut self, increment: usize) {\n         self.local_len += increment;\n     }\n+\n+    #[inline]\n+    pub(super) fn current_len(&self) -> usize {\n+        self.local_len\n+    }\n }\n \n impl Drop for SetLenOnDrop<'_> {"}, {"sha": "d947c7b0e30130617b7c4303fe8fcd33c2f9d9d1", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -75,7 +75,6 @@ where\n     #[inline]\n     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n-        Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Output = Acc>,\n     {\n@@ -100,6 +99,26 @@ where\n \n     impl_fold_via_try_fold! { fold -> try_fold }\n \n+    #[inline]\n+    fn for_each<F: FnMut(Self::Item)>(mut self, f: F) {\n+        // The default implementation would use a unit accumulator, so we can\n+        // avoid a stateful closure by folding over the remaining number\n+        // of items we wish to return instead.\n+        fn check<'a, Item>(\n+            mut action: impl FnMut(Item) + 'a,\n+        ) -> impl FnMut(usize, Item) -> Option<usize> + 'a {\n+            move |more, x| {\n+                action(x);\n+                more.checked_sub(1)\n+            }\n+        }\n+\n+        let remaining = self.n;\n+        if remaining > 0 {\n+            self.iter.try_fold(remaining - 1, check(f));\n+        }\n+    }\n+\n     #[inline]\n     #[rustc_inherit_overflow_checks]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {"}, {"sha": "ab2d0472b4701c205e0426582b5587c42baabeb9", "filename": "library/core/src/iter/sources/repeat_with.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::ops::Try;\n \n /// Creates a new iterator that repeats elements of type `A` endlessly by\n /// applying the provided closure, the repeater, `F: FnMut() -> A`.\n@@ -89,6 +90,22 @@ impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (usize::MAX, None)\n     }\n+\n+    #[inline]\n+    fn try_fold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Output = Acc>,\n+    {\n+        // This override isn't strictly needed, but avoids the need to optimize\n+        // away the `next`-always-returns-`Some` and emphasizes that the `?`\n+        // is the only way to exit the loop.\n+\n+        loop {\n+            let item = (self.repeater)();\n+            init = fold(init, item)?;\n+        }\n+    }\n }\n \n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]"}, {"sha": "3e26b43a2ede55abae81460a653c8a402cd04d03", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -146,3 +146,23 @@ fn test_take_try_folds() {\n     assert_eq!(iter.try_for_each(Err), Err(2));\n     assert_eq!(iter.try_for_each(Err), Ok(()));\n }\n+\n+#[test]\n+fn test_byref_take_consumed_items() {\n+    let mut inner = 10..90;\n+\n+    let mut count = 0;\n+    inner.by_ref().take(0).for_each(|_| count += 1);\n+    assert_eq!(count, 0);\n+    assert_eq!(inner, 10..90);\n+\n+    let mut count = 0;\n+    inner.by_ref().take(10).for_each(|_| count += 1);\n+    assert_eq!(count, 10);\n+    assert_eq!(inner, 20..90);\n+\n+    let mut count = 0;\n+    inner.by_ref().take(100).for_each(|_| count += 1);\n+    assert_eq!(count, 70);\n+    assert_eq!(inner, 90..90);\n+}"}, {"sha": "87c8fe1354d76d4f1aac8b388396fab0428930f6", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d68a1a74c65245c9ae7b5db2c552c995697e8ef/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "patch": "@@ -11,3 +11,10 @@ pub fn repeat_take_collect() -> Vec<u8> {\n // CHECK: call void @llvm.memset.{{.+}}({{i8\\*|ptr}} {{.*}}align 1{{.*}} %{{[0-9]+}}, i8 42, i{{[0-9]+}} 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }\n+\n+// CHECK-LABEL: @repeat_with_take_collect\n+#[no_mangle]\n+pub fn repeat_with_take_collect() -> Vec<u8> {\n+// CHECK: call void @llvm.memset.{{.+}}({{i8\\*|ptr}} {{.*}}align 1{{.*}} %{{[0-9]+}}, i8 13, i{{[0-9]+}} 12345, i1 false)\n+    iter::repeat_with(|| 13).take(12345).collect()\n+}"}]}