{"sha": "5a7f4412eed61ac82880d67d2bc5275c5dee4922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2Y0NDEyZWVkNjFhYzgyODgwZDY3ZDJiYzUyNzVjNWRlZTQ5MjI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-29T19:48:55Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-30T00:50:57Z"}, "message": "Implement `Eq` and `Hash` for MemoryData and Evaluator\n\nIn order to implement infinite loop detection while executing MIR, both\nthe implementor of `Machine` (`Evaluator`) and its associated type\n(`MemoryData`), must implement `Eq` and `Hash`. This PR adds the\nrequired trait implementations.\n\nIt's possible that the `Hash` implementations need to be improved; only\nthe `env_vars` field of `Evaluator` and the `thread_local` field of\n`MemoryData` are actually being hashed. Omitting fields from a `Hash`\nimplementation is not incorrect, but could lead to collisions if the\nignored fields are changing constantly. Perhaps I should instead derive\n`Hash` on a few more fields related to MIR validation?", "tree": {"sha": "040bddb0d09fbcb30d0b154d7d73a0aca493a324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/040bddb0d09fbcb30d0b154d7d73a0aca493a324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7f4412eed61ac82880d67d2bc5275c5dee4922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7f4412eed61ac82880d67d2bc5275c5dee4922", "html_url": "https://github.com/rust-lang/rust/commit/5a7f4412eed61ac82880d67d2bc5275c5dee4922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7f4412eed61ac82880d67d2bc5275c5dee4922/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9143a69f4b3ef4bda77afddefe934be363e39f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/9143a69f4b3ef4bda77afddefe934be363e39f31", "html_url": "https://github.com/rust-lang/rust/commit/9143a69f4b3ef4bda77afddefe934be363e39f31"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "ffb17527ad04f7235d75d85286229d7b8d6bc0b8", "filename": "src/lib.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5a7f4412eed61ac82880d67d2bc5275c5dee4922", "patch": "@@ -26,10 +26,13 @@ use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc::middle::const_val;\n \n+use rustc_data_structures::fx::FxHasher;\n+\n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n use std::collections::{HashMap, BTreeMap};\n+use std::hash::{Hash, Hasher};\n \n pub use rustc::mir::interpret::*;\n pub use rustc_mir::interpret::*;\n@@ -295,7 +298,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default, PartialEq, Eq)]\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n@@ -305,15 +308,34 @@ pub struct Evaluator<'tcx> {\n     pub(crate) suspended: HashMap<DynamicLifetime, Vec<ValidationQuery<'tcx>>>,\n }\n \n+impl<'tcx> Hash for Evaluator<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let Evaluator {\n+            env_vars,\n+            suspended: _,\n+        } = self;\n+\n+        env_vars.iter()\n+            .map(|(env, ptr)| {\n+                let mut h = FxHasher::default();\n+                env.hash(&mut h);\n+                ptr.hash(&mut h);\n+                h.finish()\n+            })\n+            .fold(0u64, |acc, hash| acc.wrapping_add(hash))\n+            .hash(state);\n+    }\n+}\n+\n pub type TlsKey = u128;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct TlsEntry<'tcx> {\n     data: Scalar, // Will eventually become a map from thread IDs to `Scalar`s, if we ever support more than one thread.\n     dtor: Option<ty::Instance<'tcx>>,\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default, PartialEq, Eq)]\n pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n@@ -330,6 +352,19 @@ pub struct MemoryData<'tcx> {\n     statics: HashMap<GlobalId<'tcx>, AllocId>,\n }\n \n+impl<'tcx> Hash for MemoryData<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let MemoryData {\n+            next_thread_local: _,\n+            thread_local,\n+            locks: _,\n+            statics: _,\n+        } = self;\n+\n+        thread_local.hash(state);\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryData = MemoryData<'tcx>;\n     type MemoryKinds = memory::MemoryKind;"}, {"sha": "9947609d37550a23ccb32abc983ae51899810ee1", "filename": "src/locks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Flocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Flocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flocks.rs?ref=5a7f4412eed61ac82880d67d2bc5275c5dee4922", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::layout::Size;\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Information about a lock that is currently held.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LockInfo<'tcx> {\n     /// Stores for which lifetimes (of the original write lock) we got\n     /// which suspensions."}, {"sha": "118be32a2993b861cc5ba9f14a8cd41b02ef1c0e", "filename": "src/range_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7f4412eed61ac82880d67d2bc5275c5dee4922/src%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frange_map.rs?ref=5a7f4412eed61ac82880d67d2bc5275c5dee4922", "patch": "@@ -7,7 +7,7 @@\n use std::collections::BTreeMap;\n use std::ops;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct RangeMap<T> {\n     map: BTreeMap<Range, T>,\n }"}]}