{"sha": "429bc8d0cc72eb30541886610d5fb9e8969244fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyOWJjOGQwY2M3MmViMzA1NDE4ODY2MTBkNWZiOWU4OTY5MjQ0ZmE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-06-27T23:34:42Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-06-27T23:34:42Z"}, "message": "Inline all methods on `abi::Size`\n\nThis save 3 seconds on the test program.", "tree": {"sha": "8efd49b55a7e91a1b3a528f78e9b3b9b8b36122b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efd49b55a7e91a1b3a528f78e9b3b9b8b36122b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/429bc8d0cc72eb30541886610d5fb9e8969244fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/429bc8d0cc72eb30541886610d5fb9e8969244fa", "html_url": "https://github.com/rust-lang/rust/commit/429bc8d0cc72eb30541886610d5fb9e8969244fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/429bc8d0cc72eb30541886610d5fb9e8969244fa/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ab0cba7d36c4768bc64a27382fc56ca3a390ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ab0cba7d36c4768bc64a27382fc56ca3a390ce", "html_url": "https://github.com/rust-lang/rust/commit/63ab0cba7d36c4768bc64a27382fc56ca3a390ce"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "57622692426636bc6562d57a8ba07e7fd24544fe", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/429bc8d0cc72eb30541886610d5fb9e8969244fa/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/429bc8d0cc72eb30541886610d5fb9e8969244fa/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=429bc8d0cc72eb30541886610d5fb9e8969244fa", "patch": "@@ -229,11 +229,13 @@ pub struct Size {\n impl Size {\n     pub const ZERO: Size = Self::from_bytes(0);\n \n+    #[inline]\n     pub fn from_bits(bits: u64) -> Size {\n         // Avoid potential overflow from `bits + 7`.\n         Size::from_bytes(bits / 8 + ((bits % 8) + 7) / 8)\n     }\n \n+    #[inline]\n     pub const fn from_bytes(bytes: u64) -> Size {\n         Size {\n             raw: bytes\n@@ -245,22 +247,26 @@ impl Size {\n         self.raw\n     }\n \n+    #[inline]\n     pub fn bits(self) -> u64 {\n         self.bytes().checked_mul(8).unwrap_or_else(|| {\n             panic!(\"Size::bits: {} bytes in bits doesn't fit in u64\", self.bytes())\n         })\n     }\n \n+    #[inline]\n     pub fn abi_align(self, align: Align) -> Size {\n         let mask = align.abi() - 1;\n         Size::from_bytes((self.bytes() + mask) & !mask)\n     }\n \n+    #[inline]\n     pub fn is_abi_aligned(self, align: Align) -> bool {\n         let mask = align.abi() - 1;\n         self.bytes() & mask == 0\n     }\n \n+    #[inline]\n     pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: C) -> Option<Size> {\n         let dl = cx.data_layout();\n \n@@ -273,6 +279,7 @@ impl Size {\n         }\n     }\n \n+    #[inline]\n     pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: C) -> Option<Size> {\n         let dl = cx.data_layout();\n \n@@ -290,6 +297,7 @@ impl Size {\n \n impl Add for Size {\n     type Output = Size;\n+    #[inline]\n     fn add(self, other: Size) -> Size {\n         Size::from_bytes(self.bytes().checked_add(other.bytes()).unwrap_or_else(|| {\n             panic!(\"Size::add: {} + {} doesn't fit in u64\", self.bytes(), other.bytes())\n@@ -299,6 +307,7 @@ impl Add for Size {\n \n impl Sub for Size {\n     type Output = Size;\n+    #[inline]\n     fn sub(self, other: Size) -> Size {\n         Size::from_bytes(self.bytes().checked_sub(other.bytes()).unwrap_or_else(|| {\n             panic!(\"Size::sub: {} - {} would result in negative size\", self.bytes(), other.bytes())\n@@ -308,13 +317,15 @@ impl Sub for Size {\n \n impl Mul<Size> for u64 {\n     type Output = Size;\n+    #[inline]\n     fn mul(self, size: Size) -> Size {\n         size * self\n     }\n }\n \n impl Mul<u64> for Size {\n     type Output = Size;\n+    #[inline]\n     fn mul(self, count: u64) -> Size {\n         match self.bytes().checked_mul(count) {\n             Some(bytes) => Size::from_bytes(bytes),\n@@ -326,6 +337,7 @@ impl Mul<u64> for Size {\n }\n \n impl AddAssign for Size {\n+    #[inline]\n     fn add_assign(&mut self, other: Size) {\n         *self = *self + other;\n     }"}]}