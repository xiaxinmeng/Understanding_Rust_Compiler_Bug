{"sha": "b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZThjOGJiZTI3ZTIxYTJlNjcwMzlkOWZiOWVhNDFjYjgzYjE0OTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-30T10:45:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-05T10:15:12Z"}, "message": "adapt rustdoc to infailable lexer", "tree": {"sha": "2cdd750c2741b47f25fbf44601da1b25629c47bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdd750c2741b47f25fbf44601da1b25629c47bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "html_url": "https://github.com/rust-lang/rust/commit/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ac81a60fe11868b0748a406d8e0b97efa4e8c5", "html_url": "https://github.com/rust-lang/rust/commit/58ac81a60fe11868b0748a406d8e0b97efa4e8c5"}], "stats": {"total": 227, "additions": 177, "deletions": 50}, "files": [{"sha": "5d86ee9721b75711aa73b12290c2493c15f82eac", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "patch": "@@ -44,7 +44,7 @@ pub fn render_with_highlighting(\n \n         let mut highlighted_source = vec![];\n         if classifier.write_source(&mut highlighted_source).is_err() {\n-            Err(classifier.lexer.buffer_fatal_errors())\n+            Err(())\n         } else {\n             Ok(String::from_utf8_lossy(&highlighted_source).into_owned())\n         }\n@@ -59,14 +59,9 @@ pub fn render_with_highlighting(\n             }\n             write_footer(&mut out).unwrap();\n         }\n-        Err(errors) => {\n-            // If errors are encountered while trying to highlight, cancel the errors and just emit\n-            // the unhighlighted source. The errors will have already been reported in the\n-            // `check-code-block-syntax` pass.\n-            for mut error in errors {\n-                error.cancel();\n-            }\n-\n+        Err(()) => {\n+            // If errors are encountered while trying to highlight, just emit\n+            // the unhighlighted source.\n             write!(out, \"<pre><code>{}</code></pre>\", src).unwrap();\n         }\n     }\n@@ -192,14 +187,20 @@ impl<'a> Classifier<'a> {\n         if let Some(token) = self.peek_token.take() {\n             return Ok(token);\n         }\n-        self.lexer.try_next_token().map_err(|()| HighlightError::LexError)\n+        let token = self.lexer.next_token();\n+        if let token::Unknown(..) = &token.kind {\n+            return Err(HighlightError::LexError);\n+        }\n+        Ok(token)\n     }\n \n     fn peek(&mut self) -> Result<&Token, HighlightError> {\n         if self.peek_token.is_none() {\n-            self.peek_token = Some(\n-                self.lexer.try_next_token().map_err(|()| HighlightError::LexError)?\n-            );\n+            let token = self.lexer.next_token();\n+            if let token::Unknown(..) = &token.kind {\n+                return Err(HighlightError::LexError);\n+            }\n+            self.peek_token = Some(token);\n         }\n         Ok(self.peek_token.as_ref().unwrap())\n     }"}, {"sha": "357e17d2d1bc46c4c97cb79576f1cb668efd6ea8", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "patch": "@@ -32,24 +32,20 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n             dox[code_block.code].to_owned(),\n         );\n \n-        let errors = {\n+        let has_errors = {\n+            let mut has_errors = false;\n             let mut lexer = Lexer::new(&sess, source_file, None);\n-            while let Ok(token::Token { kind, .. }) = lexer.try_next_token() {\n-                if kind == token::Eof {\n-                    break;\n+            loop  {\n+                match lexer.next_token().kind {\n+                    token::Eof => break,\n+                    token::Unknown(..) => has_errors = true,\n+                    _ => (),\n                 }\n             }\n-\n-            let errors = lexer.buffer_fatal_errors();\n-\n-            if !errors.is_empty() {\n-                Err(errors)\n-            } else {\n-                Ok(())\n-            }\n+            has_errors\n         };\n \n-        if let Err(errors) = errors {\n+        if has_errors {\n             let mut diag = if let Some(sp) =\n                 super::source_span_for_markdown_range(self.cx, &dox, &code_block.range, &item.attrs)\n             {\n@@ -58,11 +54,6 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                     .sess()\n                     .struct_span_warn(sp, \"could not parse code block as Rust code\");\n \n-                for mut err in errors {\n-                    diag.note(&format!(\"error from rustc: {}\", err.message()));\n-                    err.cancel();\n-                }\n-\n                 if code_block.syntax.is_none() && code_block.is_fenced {\n                     let sp = sp.from_inner(InnerSpan::new(0, 3));\n                     diag.span_suggestion(\n@@ -82,11 +73,6 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n \n-                for mut err in errors {\n-                    // Don't bother reporting the error, because we can't show where it happened.\n-                    err.cancel();\n-                }\n-\n                 if code_block.syntax.is_none() && code_block.is_fenced {\n                     diag.help(\"mark blocks that do not contain Rust code as text: ```text\");\n                 }"}, {"sha": "3bebbecb9dfcf5ad196f5a19657d24c8260fb637", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 154, "deletions": 14, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=b3e8c8bbe27e21a2e67039d9fb9ea41cb83b1499", "patch": "@@ -1,3 +1,21 @@\n+error: unknown start of token: \\\n+ --> <doctest>:1:1\n+  |\n+1 | \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n+  | ^\n+\n+error: unknown start of token: \\\n+ --> <doctest>:1:43\n+  |\n+1 | \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n+  |                                           ^\n+\n+error: unknown start of token: \\\n+ --> <doctest>:1:60\n+  |\n+1 | \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n+  |                                                            ^\n+\n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:3:5\n    |\n@@ -6,13 +24,31 @@ LL |   /// ```\n LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n LL | | /// ```\n    | |_______^\n-   |\n-   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n    |     ^^^^^^^\n \n+error: unknown start of token: `\n+ --> <doctest>:3:30\n+  |\n+3 |    |     ^^^^^^ did you mean `baz::foobar`?\n+  |                              ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+3 |    |     ^^^^^^ did you mean 'baz::foobar`?\n+  |                              ^\n+\n+error: unknown start of token: `\n+ --> <doctest>:3:42\n+  |\n+3 |    |     ^^^^^^ did you mean `baz::foobar`?\n+  |                                          ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+3 |    |     ^^^^^^ did you mean `baz::foobar'?\n+  |                                          ^\n+\n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:8:5\n    |\n@@ -23,13 +59,17 @@ LL | | /// LL | use foobar::Baz;\n LL | | ///    |     ^^^^^^ did you mean `baz::foobar`?\n LL | | /// ```\n    | |_______^\n-   |\n-   = note: error from rustc: unknown start of token: `\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n    |     ^^^^^^^\n \n+error: unknown start of token: \\\n+ --> <doctest>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:19:5\n    |\n@@ -38,13 +78,17 @@ LL |   /// ```\n LL | | /// \\_\n LL | | /// ```\n    | |_______^\n-   |\n-   = note: error from rustc: unknown start of token: \\\n help: mark blocks that do not contain Rust code as text\n    |\n LL | /// ```text\n    |     ^^^^^^^\n \n+error: unknown start of token: \\\n+ --> <doctest>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:32:5\n    |\n@@ -53,8 +97,12 @@ LL |   /// ```rust\n LL | | /// \\_\n LL | | /// ```\n    | |_______^\n-   |\n-   = note: error from rustc: unknown start of token: \\\n+\n+error: unknown start of token: \\\n+ --> <doctest>:2:5\n+  |\n+2 |     \\_\n+  |     ^\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:41:9\n@@ -63,16 +111,48 @@ LL |   ///     code with bad syntax\n    |  _________^\n LL | | ///     \\_\n    | |__________^\n-   |\n-   = note: error from rustc: unknown start of token: \\\n+\n+error: unknown start of token: `\n+ --> <doctest>:1:1\n+  |\n+1 | ```\n+  | ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+1 | '``\n+  | ^\n+\n+error: unknown start of token: `\n+ --> <doctest>:1:2\n+  |\n+1 | ```\n+  |  ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+1 | `'`\n+  |  ^\n+\n+error: unknown start of token: `\n+ --> <doctest>:1:3\n+  |\n+1 | ```\n+  |   ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+1 | ``'\n+  |   ^\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:55:9\n    |\n LL | ///     ```\n    |         ^^^\n-   |\n-   = note: error from rustc: unknown start of token: `\n+\n+error: unknown start of token: \\\n+ --> <doctest>:1:1\n+  |\n+1 | \\_\n+  | ^\n \n warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:58:5\n@@ -82,8 +162,12 @@ LL |   /// ```edition2018\n LL | | /// \\_\n LL | | /// ```\n    | |_______^\n-   |\n-   = note: error from rustc: unknown start of token: \\\n+\n+error: unknown start of token: \\\n+ --> <doctest>:1:1\n+  |\n+1 | \\_\n+  | ^\n \n warning: doc comment contains an invalid Rust code block\n   --> $DIR/invalid-syntax.rs:63:1\n@@ -95,3 +179,59 @@ LL | | #[doc = \"```\"]\n    |\n    = help: mark blocks that do not contain Rust code as text: ```text\n \n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n+error: unknown start of token: `\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | ```\n+  | ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+1 | '``\n+  | ^\n+\n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:2:1\n+  |\n+2 | \\_\n+  | ^\n+\n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | \\_\n+  | ^\n+\n+error: unknown start of token: `\n+ --> <rustdoc-highlighting>:3:30\n+  |\n+3 |    |     ^^^^^^ did you mean `baz::foobar`?\n+  |                              ^\n+help: Unicode character '`' (Grave Accent) looks like ''' (Single Quote), but it is not\n+  |\n+3 |    |     ^^^^^^ did you mean 'baz::foobar`?\n+  |                              ^\n+\n+error: unknown start of token: \\\n+ --> <rustdoc-highlighting>:1:1\n+  |\n+1 | \\__________pkt->size___________/          \\_result->size_/ \\__pkt->size__/\n+  | ^\n+"}]}