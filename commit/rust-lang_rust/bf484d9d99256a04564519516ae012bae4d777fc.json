{"sha": "bf484d9d99256a04564519516ae012bae4d777fc", "node_id": "C_kwDOAAsO6NoAKGJmNDg0ZDlkOTkyNTZhMDQ1NjQ1MTk1MTZhZTAxMmJhZTRkNzc3ZmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-07T14:51:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-07T14:51:07Z"}, "message": "Merge #10957\n\n10957: fix: Fix some TryToNav impls not upmapping ranges out of macros r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ef88d040c38cc61180bd5768c8d6af8e4f13ac5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef88d040c38cc61180bd5768c8d6af8e4f13ac5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf484d9d99256a04564519516ae012bae4d777fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf484d9d99256a04564519516ae012bae4d777fc", "html_url": "https://github.com/rust-lang/rust/commit/bf484d9d99256a04564519516ae012bae4d777fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf484d9d99256a04564519516ae012bae4d777fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae3158292a61974cc319c99f7c3c74a3129521a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae3158292a61974cc319c99f7c3c74a3129521a", "html_url": "https://github.com/rust-lang/rust/commit/9ae3158292a61974cc319c99f7c3c74a3129521a"}, {"sha": "f781e599cc6376a3706498dcc9ce5e7ad59e16e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f781e599cc6376a3706498dcc9ce5e7ad59e16e1", "html_url": "https://github.com/rust-lang/rust/commit/f781e599cc6376a3706498dcc9ce5e7ad59e16e1"}], "stats": {"total": 230, "additions": 124, "deletions": 106}, "files": [{"sha": "52e099513a5240bae5f42e8ec510fedec605610c", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 91, "deletions": 88, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -9,7 +9,6 @@ use hir::{\n };\n use ide_db::{\n     base_db::{FileId, FileRange},\n-    symbol_index::FileSymbolKind,\n     SymbolKind,\n };\n use ide_db::{defs::Definition, RootDatabase};\n@@ -91,18 +90,17 @@ impl NavigationTarget {\n \n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n-        if let Some(src) = module.declaration_source(db) {\n-            let node = src.syntax();\n-            let full_range = node.original_file_range(db);\n-            let focus_range = src\n-                .value\n+        if let Some(src @ InFile { value, .. }) = &module.declaration_source(db) {\n+            let FileRange { file_id, range: full_range } = src.syntax().original_file_range(db);\n+            let focus_range = value\n                 .name()\n-                .map(|name| src.with_value(name.syntax()).original_file_range(db).range);\n+                .and_then(|name| src.with_value(name.syntax()).original_file_range_opt(db))\n+                .map(|it| it.range);\n             let mut res = NavigationTarget::from_syntax(\n-                full_range.file_id,\n+                file_id,\n                 name,\n                 focus_range,\n-                full_range.range,\n+                full_range,\n                 SymbolKind::Module,\n             );\n             res.docs = module.attrs(db).docs();\n@@ -142,9 +140,9 @@ impl NavigationTarget {\n             .name()\n             .and_then(|it| node.with_value(it.syntax()).original_file_range_opt(db))\n             .map(|it| it.range);\n-        let frange = node.map(|it| it.syntax()).original_file_range(db);\n+        let FileRange { file_id, range } = node.map(|it| it.syntax()).original_file_range(db);\n \n-        NavigationTarget::from_syntax(frange.file_id, name, focus_range, frange.range, kind)\n+        NavigationTarget::from_syntax(file_id, name, focus_range, range, kind)\n     }\n \n     fn from_syntax(\n@@ -175,18 +173,7 @@ impl TryToNav for FileSymbol {\n         Some(NavigationTarget {\n             file_id: full_range.file_id,\n             name: self.name.clone(),\n-            kind: Some(match self.kind {\n-                FileSymbolKind::Function => SymbolKind::Function,\n-                FileSymbolKind::Struct => SymbolKind::Struct,\n-                FileSymbolKind::Enum => SymbolKind::Enum,\n-                FileSymbolKind::Trait => SymbolKind::Trait,\n-                FileSymbolKind::Module => SymbolKind::Module,\n-                FileSymbolKind::TypeAlias => SymbolKind::TypeAlias,\n-                FileSymbolKind::Const => SymbolKind::Const,\n-                FileSymbolKind::Static => SymbolKind::Static,\n-                FileSymbolKind::Macro => SymbolKind::Macro,\n-                FileSymbolKind::Union => SymbolKind::Union,\n-            }),\n+            kind: Some(self.kind.into()),\n             full_range: full_range.range,\n             focus_range: Some(name_range.range),\n             container_name: self.container_name.clone(),\n@@ -287,39 +274,49 @@ where\n \n impl ToNav for hir::Module {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.definition_source(db);\n+        let InFile { file_id, value } = self.definition_source(db);\n+\n         let name = self.name(db).map(|it| it.to_smol_str()).unwrap_or_default();\n-        let (syntax, focus) = match &src.value {\n+        let (syntax, focus) = match &value {\n             ModuleSource::SourceFile(node) => (node.syntax(), None),\n-            ModuleSource::Module(node) => {\n-                (node.syntax(), node.name().map(|it| it.syntax().text_range()))\n-            }\n+            ModuleSource::Module(node) => (\n+                node.syntax(),\n+                node.name()\n+                    .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+                    .map(|it| it.range),\n+            ),\n             ModuleSource::BlockExpr(node) => (node.syntax(), None),\n         };\n-        let frange = src.with_value(syntax).original_file_range(db);\n-        NavigationTarget::from_syntax(frange.file_id, name, focus, frange.range, SymbolKind::Module)\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, syntax).original_file_range(db);\n+        NavigationTarget::from_syntax(file_id, name, focus, full_range, SymbolKind::Module)\n     }\n }\n \n impl TryToNav for hir::Impl {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n+        let InFile { file_id, value } = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n-        let frange = match &derive_attr {\n-            Some(item) => item.syntax().original_file_range(db),\n-            None => src.syntax().original_file_range(db),\n-        };\n+\n         let focus_range = if derive_attr.is_some() {\n             None\n         } else {\n-            src.value.self_ty().map(|ty| src.with_value(ty.syntax()).original_file_range(db).range)\n+            value\n+                .self_ty()\n+                .and_then(|ty| InFile::new(file_id, ty.syntax()).original_file_range_opt(db))\n+                .map(|it| it.range)\n+        };\n+\n+        let FileRange { file_id, range: full_range } = match &derive_attr {\n+            Some(attr) => attr.syntax().original_file_range(db),\n+            None => InFile::new(file_id, value.syntax()).original_file_range(db),\n         };\n \n         Some(NavigationTarget::from_syntax(\n-            frange.file_id,\n+            file_id,\n             \"impl\".into(),\n             focus_range,\n-            frange.range,\n+            full_range,\n             SymbolKind::Impl,\n         ))\n     }\n@@ -338,14 +335,9 @@ impl TryToNav for hir::Field {\n                 res\n             }\n             FieldSource::Pos(it) => {\n-                let frange = src.with_value(it.syntax()).original_file_range(db);\n-                NavigationTarget::from_syntax(\n-                    frange.file_id,\n-                    \"\".into(),\n-                    None,\n-                    frange.range,\n-                    SymbolKind::Field,\n-                )\n+                let FileRange { file_id, range } =\n+                    src.with_value(it.syntax()).original_file_range(db);\n+                NavigationTarget::from_syntax(file_id, \"\".into(), None, range, SymbolKind::Field)\n             }\n         };\n         Some(field_source)\n@@ -363,13 +355,7 @@ impl TryToNav for hir::MacroDef {\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),\n-            match self.kind() {\n-                hir::MacroKind::Declarative\n-                | hir::MacroKind::BuiltIn\n-                | hir::MacroKind::ProcMacro => SymbolKind::Macro,\n-                hir::MacroKind::Derive => SymbolKind::Derive,\n-                hir::MacroKind::Attr => SymbolKind::Attribute,\n-            },\n+            self.kind().into(),\n         );\n         res.docs = self.docs(db);\n         Some(res)\n@@ -408,15 +394,17 @@ impl TryToNav for hir::GenericParam {\n \n impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n-        let (node, name) = match &src.value {\n-            Either::Left(bind_pat) => (bind_pat.syntax().clone(), bind_pat.name()),\n-            Either::Right(it) => (it.syntax().clone(), it.name()),\n+        let InFile { file_id, value } = self.source(db);\n+        let (node, name) = match &value {\n+            Either::Left(bind_pat) => (bind_pat.syntax(), bind_pat.name()),\n+            Either::Right(it) => (it.syntax(), it.name()),\n         };\n-        let focus_range =\n-            name.map(|it| src.with_value(&it.syntax().clone()).original_file_range(db).range);\n+        let focus_range = name\n+            .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+            .map(|it| it.range);\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, node).original_file_range(db);\n \n-        let full_range = src.with_value(&node).original_file_range(db);\n         let name = match self.name(db) {\n             Some(it) => it.to_smol_str(),\n             None => \"\".into(),\n@@ -429,10 +417,10 @@ impl ToNav for hir::Local {\n             SymbolKind::Local\n         };\n         NavigationTarget {\n-            file_id: full_range.file_id,\n+            file_id,\n             name,\n             kind: Some(kind),\n-            full_range: full_range.range,\n+            full_range,\n             focus_range,\n             container_name: None,\n             description: None,\n@@ -443,17 +431,18 @@ impl ToNav for hir::Local {\n \n impl ToNav for hir::Label {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n-        let src = self.source(db);\n-        let node = src.value.syntax();\n-        let FileRange { file_id, range } = src.with_value(node).original_file_range(db);\n-        let focus_range =\n-            src.value.lifetime().and_then(|lt| lt.lifetime_ident_token()).map(|lt| lt.text_range());\n+        let InFile { file_id, value } = self.source(db);\n         let name = self.name(db).to_smol_str();\n+\n+        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n+        let FileRange { file_id, range: full_range } = range(value.syntax());\n+        let focus_range = value.lifetime().map(|lt| range(lt.syntax()).range);\n+\n         NavigationTarget {\n             file_id,\n             name,\n             kind: Some(SymbolKind::Label),\n-            full_range: range,\n+            full_range,\n             focus_range,\n             container_name: None,\n             description: None,\n@@ -464,21 +453,25 @@ impl ToNav for hir::Label {\n \n impl TryToNav for hir::TypeParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = match &src.value {\n-            Either::Left(type_param) => type_param.syntax().text_range(),\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let range = |syntax: &_| InFile::new(file_id, syntax).original_file_range(db);\n+        let focus_range = |syntax: &_| InFile::new(file_id, syntax).original_file_range_opt(db);\n+        let FileRange { file_id, range: full_range } = match &value {\n+            Either::Left(type_param) => range(type_param.syntax()),\n             Either::Right(trait_) => trait_\n                 .name()\n-                .map_or_else(|| trait_.syntax().text_range(), |name| name.syntax().text_range()),\n+                .and_then(|name| focus_range(name.syntax()))\n+                .unwrap_or_else(|| range(trait_.syntax())),\n         };\n-        let focus_range = match &src.value {\n-            Either::Left(it) => it.name(),\n-            Either::Right(it) => it.name(),\n-        }\n-        .map(|it| it.syntax().text_range());\n+        let focus_range = value\n+            .either(|it| it.name(), |it| it.name())\n+            .and_then(|it| focus_range(it.syntax()))\n+            .map(|it| it.range);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::TypeParam),\n             full_range,\n             focus_range,\n@@ -491,11 +484,14 @@ impl TryToNav for hir::TypeParam {\n \n impl TryToNav for hir::LifetimeParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = src.value.syntax().text_range();\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, value.syntax()).original_file_range(db);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::LifetimeParam),\n             full_range,\n             focus_range: Some(full_range),\n@@ -508,14 +504,21 @@ impl TryToNav for hir::LifetimeParam {\n \n impl TryToNav for hir::ConstParam {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n-        let src = self.source(db)?;\n-        let full_range = src.value.syntax().text_range();\n+        let InFile { file_id, value } = self.source(db)?;\n+        let name = self.name(db).to_smol_str();\n+\n+        let focus_range = value\n+            .name()\n+            .and_then(|it| InFile::new(file_id, it.syntax()).original_file_range_opt(db))\n+            .map(|it| it.range);\n+        let FileRange { file_id, range: full_range } =\n+            InFile::new(file_id, value.syntax()).original_file_range(db);\n         Some(NavigationTarget {\n-            file_id: src.file_id.original_file(db),\n-            name: self.name(db).to_smol_str(),\n+            file_id,\n+            name,\n             kind: Some(SymbolKind::ConstParam),\n             full_range,\n-            focus_range: src.value.name().map(|n| n.syntax().text_range()),\n+            focus_range,\n             container_name: None,\n             description: None,\n             docs: None,"}, {"sha": "67062654d6e03d421c3b6ad6f5d5b723569e23d4", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -1437,7 +1437,6 @@ gen2!();\n                                 0,\n                             ),\n                             full_range: 228..236,\n-                            focus_range: 228..236,\n                             name: \"tests2\",\n                             kind: Module,\n                             description: \"mod tests2\",\n@@ -1522,7 +1521,6 @@ foo!();\n                                 0,\n                             ),\n                             full_range: 210..217,\n-                            focus_range: 210..217,\n                             name: \"foo_tests\",\n                             kind: Module,\n                             description: \"mod foo_tests\","}, {"sha": "05d2732251ff70866c60694fa14ed558cb3bd7c9", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -375,13 +375,7 @@ fn highlight_def(\n ) -> Highlight {\n     let db = sema.db;\n     let mut h = match def {\n-        Definition::Macro(m) => Highlight::new(HlTag::Symbol(match m.kind() {\n-            hir::MacroKind::Declarative | hir::MacroKind::BuiltIn | hir::MacroKind::ProcMacro => {\n-                SymbolKind::Macro\n-            }\n-            hir::MacroKind::Derive => SymbolKind::Derive,\n-            hir::MacroKind::Attr => SymbolKind::Attribute,\n-        })),\n+        Definition::Macro(m) => Highlight::new(HlTag::Symbol(m.kind().into())),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::Module(module) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));"}, {"sha": "4b505b3f5ad3c18200155bc87bc086186d82b7cd", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -52,14 +52,8 @@ impl<'a> MacroRender<'a> {\n         } else {\n             Some(self.ctx.source_range())\n         }?;\n-        let kind = match self.macro_.kind() {\n-            hir::MacroKind::Derive => SymbolKind::Derive,\n-            hir::MacroKind::Attr => SymbolKind::Attribute,\n-            hir::MacroKind::BuiltIn | hir::MacroKind::Declarative | hir::MacroKind::ProcMacro => {\n-                SymbolKind::Macro\n-            }\n-        };\n-        let mut item = CompletionItem::new(kind, source_range, self.label());\n+        let mut item =\n+            CompletionItem::new(SymbolKind::from(self.macro_.kind()), source_range, self.label());\n         item.set_deprecated(self.ctx.is_deprecated(self.macro_)).set_detail(self.detail());\n \n         if let Some(import_to_add) = import_to_add {"}, {"sha": "bcbb09e31b5a33a0a6d88c1b9bcc90f1d0718e32", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -171,6 +171,18 @@ pub enum SymbolKind {\n     Variant,\n }\n \n+impl From<hir::MacroKind> for SymbolKind {\n+    fn from(it: hir::MacroKind) -> Self {\n+        match it {\n+            hir::MacroKind::Declarative | hir::MacroKind::BuiltIn | hir::MacroKind::ProcMacro => {\n+                SymbolKind::Macro\n+            }\n+            hir::MacroKind::Derive => SymbolKind::Derive,\n+            hir::MacroKind::Attr => SymbolKind::Attribute,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     mod sourcegen_lints;"}, {"sha": "e8c6ec3e0ee864bbf488b6001ea7356b5971e554", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf484d9d99256a04564519516ae012bae4d777fc/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=bf484d9d99256a04564519516ae012bae4d777fc", "patch": "@@ -44,7 +44,7 @@ use rayon::prelude::*;\n use rustc_hash::FxHashSet;\n use syntax::{ast::HasName, AstNode, SmolStr, SyntaxNode, SyntaxNodePtr};\n \n-use crate::RootDatabase;\n+use crate::{RootDatabase, SymbolKind};\n \n #[derive(Debug)]\n pub struct Query {\n@@ -430,6 +430,23 @@ impl FileSymbolKind {\n     }\n }\n \n+impl From<FileSymbolKind> for SymbolKind {\n+    fn from(it: FileSymbolKind) -> Self {\n+        match it {\n+            FileSymbolKind::Const => SymbolKind::Const,\n+            FileSymbolKind::Enum => SymbolKind::Enum,\n+            FileSymbolKind::Function => SymbolKind::Function,\n+            FileSymbolKind::Macro => SymbolKind::Macro,\n+            FileSymbolKind::Module => SymbolKind::Module,\n+            FileSymbolKind::Static => SymbolKind::Static,\n+            FileSymbolKind::Struct => SymbolKind::Struct,\n+            FileSymbolKind::Trait => SymbolKind::Trait,\n+            FileSymbolKind::TypeAlias => SymbolKind::TypeAlias,\n+            FileSymbolKind::Union => SymbolKind::Union,\n+        }\n+    }\n+}\n+\n /// Represents an outstanding module that the symbol collector must collect symbols from.\n struct SymbolCollectorWork {\n     module_id: ModuleId,"}]}