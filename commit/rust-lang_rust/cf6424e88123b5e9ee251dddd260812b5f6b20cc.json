{"sha": "cf6424e88123b5e9ee251dddd260812b5f6b20cc", "node_id": "C_kwDOAAsO6NoAKGNmNjQyNGU4ODEyM2I1ZTllZTI1MWRkZGQyNjA4MTJiNWY2YjIwY2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-14T23:12:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-14T23:12:42Z"}, "message": "Don't make projection tys out of anon consts", "tree": {"sha": "5e1a737aa1bb42dc9fa9fb4ba170cd9534f3c38a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e1a737aa1bb42dc9fa9fb4ba170cd9534f3c38a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6424e88123b5e9ee251dddd260812b5f6b20cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6424e88123b5e9ee251dddd260812b5f6b20cc", "html_url": "https://github.com/rust-lang/rust/commit/cf6424e88123b5e9ee251dddd260812b5f6b20cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6424e88123b5e9ee251dddd260812b5f6b20cc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e482701998aa63915f5144562008a8f6388dcb6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e482701998aa63915f5144562008a8f6388dcb6e", "html_url": "https://github.com/rust-lang/rust/commit/e482701998aa63915f5144562008a8f6388dcb6e"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "d1710f6cede95972091eb846fb6d381e85325b66", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=cf6424e88123b5e9ee251dddd260812b5f6b20cc", "patch": "@@ -84,7 +84,6 @@ impl<'tcx> InferCtxt<'tcx> {\n \n pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -233,7 +232,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        let trace = ToTrace::to_trace(self.infcx.tcx, self.cause, a_is_expected, a, b);\n+        let trace = ToTrace::to_trace(self.cause, a_is_expected, a, b);\n         Trace { at: self, trace, a_is_expected }\n     }\n }\n@@ -306,18 +305,17 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ImplSubject<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n         match (a, b) {\n             (ImplSubject::Trait(trait_ref_a), ImplSubject::Trait(trait_ref_b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, trait_ref_a, trait_ref_b)\n+                ToTrace::to_trace(cause, a_is_expected, trait_ref_a, trait_ref_b)\n             }\n             (ImplSubject::Inherent(ty_a), ImplSubject::Inherent(ty_b)) => {\n-                ToTrace::to_trace(tcx, cause, a_is_expected, ty_a, ty_b)\n+                ToTrace::to_trace(cause, a_is_expected, ty_a, ty_b)\n             }\n             (ImplSubject::Trait(_), ImplSubject::Inherent(_))\n             | (ImplSubject::Inherent(_), ImplSubject::Trait(_)) => {\n@@ -329,7 +327,6 @@ impl<'tcx> ToTrace<'tcx> for ImplSubject<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -344,7 +341,6 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -356,7 +352,6 @@ impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for Const<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -371,7 +366,6 @@ impl<'tcx> ToTrace<'tcx> for Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::GenericArg<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -399,7 +393,6 @@ impl<'tcx> ToTrace<'tcx> for ty::GenericArg<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -411,7 +404,6 @@ impl<'tcx> ToTrace<'tcx> for ty::Term<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -426,7 +418,6 @@ impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -441,24 +432,17 @@ impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::AliasTy<'tcx> {\n     fn to_trace(\n-        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n         b: Self,\n     ) -> TypeTrace<'tcx> {\n-        let a_ty = tcx.mk_projection(a.def_id, a.substs);\n-        let b_ty = tcx.mk_projection(b.def_id, b.substs);\n-        TypeTrace {\n-            cause: cause.clone(),\n-            values: Terms(ExpectedFound::new(a_is_expected, a_ty.into(), b_ty.into())),\n-        }\n+        TypeTrace { cause: cause.clone(), values: Aliases(ExpectedFound::new(a_is_expected, a, b)) }\n     }\n }\n \n impl<'tcx> ToTrace<'tcx> for ty::FnSig<'tcx> {\n     fn to_trace(\n-        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,"}, {"sha": "ac4986a577c6db75933aa3464661303d313f766e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=cf6424e88123b5e9ee251dddd260812b5f6b20cc", "patch": "@@ -1568,6 +1568,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     ValuePairs::TraitRefs(_) | ValuePairs::PolyTraitRefs(_) => {\n                         (false, Mismatch::Fixed(\"trait\"))\n                     }\n+                    ValuePairs::Aliases(infer::ExpectedFound { expected, .. }) => {\n+                        (false, Mismatch::Fixed(self.tcx.def_descr(expected.def_id)))\n+                    }\n                     ValuePairs::Regions(_) => (false, Mismatch::Fixed(\"lifetime\")),\n                 };\n                 let Some(vals) = self.values_str(values) else {\n@@ -2124,6 +2127,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         match values {\n             infer::Regions(exp_found) => self.expected_found_str(exp_found),\n             infer::Terms(exp_found) => self.expected_found_str_term(exp_found),\n+            infer::Aliases(exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(exp_found) => {\n                 let pretty_exp_found = ty::error::ExpectedFound {\n                     expected: exp_found.expected.print_only_trait_path(),"}, {"sha": "0b207e329f6e6347e9769fa54e5f5681c05347f2", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=cf6424e88123b5e9ee251dddd260812b5f6b20cc", "patch": "@@ -338,6 +338,7 @@ pub struct InferCtxt<'tcx> {\n pub enum ValuePairs<'tcx> {\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Terms(ExpectedFound<ty::Term<'tcx>>),\n+    Aliases(ExpectedFound<ty::AliasTy<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n     Sigs(ExpectedFound<ty::FnSig<'tcx>>),"}, {"sha": "7f1b65a08d963e3b46a22c7c0cd010cec1ccf7d7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6424e88123b5e9ee251dddd260812b5f6b20cc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=cf6424e88123b5e9ee251dddd260812b5f6b20cc", "patch": "@@ -2053,7 +2053,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         debug_assert_matches!(\n             (kind, self.def_kind(alias_ty.def_id)),\n             (ty::Opaque, DefKind::OpaqueTy)\n-                | (ty::Projection, DefKind::AssocTy | DefKind::AssocConst)\n+                | (ty::Projection, DefKind::AssocTy)\n                 | (ty::Opaque | ty::Projection, DefKind::ImplTraitPlaceholder)\n         );\n         self.mk_ty_from_kind(Alias(kind, alias_ty))"}]}