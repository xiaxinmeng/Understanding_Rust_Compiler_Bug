{"sha": "0a2a517fe60caa35aea463d2e32a7a7193724053", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMmE1MTdmZTYwY2FhMzVhZWE0NjNkMmUzMmE3YTcxOTM3MjQwNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T10:06:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T10:37:02Z"}, "message": "Add ImmTy::from_uint", "tree": {"sha": "73362ac1357e52d61c8596719928616c5134b45c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73362ac1357e52d61c8596719928616c5134b45c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a2a517fe60caa35aea463d2e32a7a7193724053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a2a517fe60caa35aea463d2e32a7a7193724053", "html_url": "https://github.com/rust-lang/rust/commit/0a2a517fe60caa35aea463d2e32a7a7193724053", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a2a517fe60caa35aea463d2e32a7a7193724053/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211d1e073527915f7ce1854ad8b30dc0c45845e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/211d1e073527915f7ce1854ad8b30dc0c45845e8", "html_url": "https://github.com/rust-lang/rust/commit/211d1e073527915f7ce1854ad8b30dc0c45845e8"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "d6f5fecb24cf2f434ae8d97e9cea08e8eb362069", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0a2a517fe60caa35aea463d2e32a7a7193724053/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2a517fe60caa35aea463d2e32a7a7193724053/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=0a2a517fe60caa35aea463d2e32a7a7193724053", "patch": "@@ -187,13 +187,22 @@ impl<'tcx, Tag> From<ImmTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n-impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag>\n-{\n+impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     #[inline]\n     pub fn from_scalar(val: Scalar<Tag>, layout: TyLayout<'tcx>) -> Self {\n         ImmTy { imm: val.into(), layout }\n     }\n \n+    #[inline]\n+    pub fn from_uint(i: impl Into<u128>, layout: TyLayout<'tcx>) -> Self {\n+        Self::from_scalar(Scalar::from_uint(i, layout.size), layout)\n+    }\n+\n+    #[inline]\n+    pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n+        Self::from_scalar(Scalar::from_int(i, layout.size), layout)\n+    }\n+\n     #[inline]\n     pub fn to_bits(self) -> InterpResult<'tcx, u128> {\n         self.to_scalar()?.to_bits(self.layout.size)"}, {"sha": "2fb68556c3ce15262df083f6992d81184930801a", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a2a517fe60caa35aea463d2e32a7a7193724053/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a2a517fe60caa35aea463d2e32a7a7193724053/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=0a2a517fe60caa35aea463d2e32a7a7193724053", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic, Scalar,\n+    InterpResult, PointerArithmetic,\n     InterpCx, Machine, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -50,10 +50,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n                 for (index, &const_int) in values.iter().enumerate() {\n                     // Compare using binary_op, to also support pointer values\n-                    let const_int = Scalar::from_uint(const_int, discr.layout.size);\n                     let (res, _) = self.binary_op(mir::BinOp::Eq,\n                         discr,\n-                        ImmTy::from_scalar(const_int, discr.layout),\n+                        ImmTy::from_uint(const_int, discr.layout),\n                     )?;\n                     if res.to_bool()? {\n                         target_block = targets[index];"}]}