{"sha": "946ea1453d5a611084566c190cea60d9ccd41697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NmVhMTQ1M2Q1YTYxMTA4NDU2NmMxOTBjZWE2MGQ5Y2NkNDE2OTc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-29T13:33:36Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T07:14:22Z"}, "message": "Inline things", "tree": {"sha": "231f561c0bda953d65e23b3d11ce8130a710061f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/231f561c0bda953d65e23b3d11ce8130a710061f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/946ea1453d5a611084566c190cea60d9ccd41697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/946ea1453d5a611084566c190cea60d9ccd41697", "html_url": "https://github.com/rust-lang/rust/commit/946ea1453d5a611084566c190cea60d9ccd41697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/946ea1453d5a611084566c190cea60d9ccd41697/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e955dbca99ee13a9d4a459b238cf5e0d9a973ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e955dbca99ee13a9d4a459b238cf5e0d9a973ae4", "html_url": "https://github.com/rust-lang/rust/commit/e955dbca99ee13a9d4a459b238cf5e0d9a973ae4"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "955cab1d93f769ebac5a7e9700faa4e430db57fc", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=946ea1453d5a611084566c190cea60d9ccd41697", "patch": "@@ -298,6 +298,7 @@ pub struct DroplessArena {\n unsafe impl Send for DroplessArena {}\n \n impl Default for DroplessArena {\n+    #[inline]\n     fn default() -> DroplessArena {\n         DroplessArena {\n             ptr: Cell::new(0 as *mut u8),\n@@ -319,6 +320,7 @@ impl DroplessArena {\n         false\n     }\n \n+    #[inline]\n     fn align(&self, align: usize) {\n         let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n         self.ptr.set(final_address as *mut u8);"}, {"sha": "c87dcbe500cbaa2940bca8f060d171ebc2552463", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=946ea1453d5a611084566c190cea60d9ccd41697", "patch": "@@ -3614,6 +3614,7 @@ assert_eq!(3\", stringify!($SelfT), \".checked_next_power_of_two(), Some(4));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_next_power_of_two(), None);\",\n $EndFeature, \"\n ```\"),\n+            #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             pub fn checked_next_power_of_two(self) -> Option<Self> {\n                 self.one_less_than_next_power_of_two().checked_add(1)"}, {"sha": "349aa029ba8cb9a69aefa2890793677dbe7a0901", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=946ea1453d5a611084566c190cea60d9ccd41697", "patch": "@@ -849,6 +849,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// let mut map: HashMap<&str, i32> = HashMap::new();\n     /// map.reserve(10);\n     /// ```\n+    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         match self.reserve_internal(additional, Infallible) {\n@@ -880,6 +881,7 @@ impl<K, V, S> HashMap<K, V, S>\n         self.reserve_internal(additional, Fallible)\n     }\n \n+    #[inline]\n     fn reserve_internal(&mut self, additional: usize, fallibility: Fallibility)\n         -> Result<(), CollectionAllocErr> {\n \n@@ -1571,6 +1573,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// so that the map now contains keys which compare equal, search may start\n     /// acting erratically, with two keys randomly masking each other. Implementations\n     /// are free to assume this doesn't happen (within the limits of memory-safety).\n+    #[inline(always)]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<K, V, S> {\n         self.reserve(1);\n@@ -1911,6 +1914,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n     }\n \n     /// Create a `RawEntryMut` from the given key and its hash.\n+    #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>\n         where K: Borrow<Q>,\n@@ -1919,6 +1923,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n         self.from_hash(hash, |q| q.borrow().eq(k))\n     }\n \n+    #[inline]\n     fn search<F>(self, hash: u64, is_match: F, compare_hashes: bool)  -> RawEntryMut<'a, K, V, S>\n         where for<'b> F: FnMut(&'b K) -> bool,\n     {\n@@ -1941,6 +1946,7 @@ impl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S>\n         }\n     }\n     /// Create a `RawEntryMut` from the given hash.\n+    #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>\n         where for<'b> F: FnMut(&'b K) -> bool,\n@@ -2215,6 +2221,7 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n \n     /// Sets the value of the entry with the VacantEntry's key,\n     /// and returns a mutable reference to it.\n+    #[inline]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V) {\n         let hash = SafeHash::new(hash);"}, {"sha": "479e6dccb90dd1d51ec00c3783a32f2777689069", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/946ea1453d5a611084566c190cea60d9ccd41697/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=946ea1453d5a611084566c190cea60d9ccd41697", "patch": "@@ -329,6 +329,7 @@ impl<K, V, M> Put<K, V> for FullBucket<K, V, M>\n }\n \n impl<K, V, M: Deref<Target = RawTable<K, V>>> Bucket<K, V, M> {\n+    #[inline]\n     pub fn new(table: M, hash: SafeHash) -> Bucket<K, V, M> {\n         Bucket::at_index(table, hash.inspect() as usize)\n     }\n@@ -342,6 +343,7 @@ impl<K, V, M: Deref<Target = RawTable<K, V>>> Bucket<K, V, M> {\n         }\n     }\n \n+    #[inline]\n     pub fn at_index(table: M, ib_index: usize) -> Bucket<K, V, M> {\n         // if capacity is 0, then the RawBucket will be populated with bogus pointers.\n         // This is an uncommon case though, so avoid it in release builds.\n@@ -654,6 +656,7 @@ impl<K, V, M> GapThenFull<K, V, M>\n \n // Returns a Layout which describes the allocation required for a hash table,\n // and the offset of the array of (key, value) pairs in the allocation.\n+#[inline(always)]\n fn calculate_layout<K, V>(capacity: usize) -> Result<(Layout, usize), LayoutErr> {\n     let hashes = Layout::array::<HashUint>(capacity)?;\n     let pairs = Layout::array::<(K, V)>(capacity)?;\n@@ -722,6 +725,7 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n+    #[inline(always)]\n     fn raw_bucket_at(&self, index: usize) -> RawBucket<K, V> {\n         let (_, pairs_offset) = calculate_layout::<K, V>(self.capacity())\n             .unwrap_or_else(|_| unsafe { hint::unreachable_unchecked() });"}]}