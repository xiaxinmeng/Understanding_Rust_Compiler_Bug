{"sha": "dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "node_id": "C_kwDOAAsO6NoAKGRjMDhiYzUxZjJjNThhMGY1ZjgxNWEwN2Y5YmIzZDY3MTE1M2I1YTE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-07T21:26:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-07T23:21:05Z"}, "message": "Move `finish` out of the `Encoder` trait.\n\nThis simplifies things, but requires making `CacheEncoder` non-generic.", "tree": {"sha": "9ca34ee0264a36e5719ddba0f0aeee95e8896eb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca34ee0264a36e5719ddba0f0aeee95e8896eb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "html_url": "https://github.com/rust-lang/rust/commit/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acbe7573dc32f917f51a784a36b7afc690900e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acbe7573dc32f917f51a784a36b7afc690900e3", "html_url": "https://github.com/rust-lang/rust/commit/1acbe7573dc32f917f51a784a36b7afc690900e3"}], "stats": {"total": 162, "additions": 51, "deletions": 111}, "files": [{"sha": "919df193d60b1db0ae303eaad9ed88eed116cbb2", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -210,7 +210,7 @@ impl CodegenResults {\n         encoder.emit_raw_bytes(&RLINK_VERSION.to_be_bytes());\n         encoder.emit_str(RUSTC_VERSION.unwrap());\n         Encodable::encode(codegen_results, &mut encoder);\n-        encoder.finish().unwrap()\n+        encoder.finish()\n     }\n \n     pub fn deserialize_rlink(data: Vec<u8>) -> Result<Self, String> {"}, {"sha": "79836d66011a27e7bd55ae96ef51be0e08826385", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::sync::join;\n use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n-use rustc_serialize::{Encodable as RustcEncodable, Encoder};\n+use rustc_serialize::Encodable as RustcEncodable;\n use rustc_session::Session;\n use std::fs;\n "}, {"sha": "e090b4c37e5328d578040f7a594c60745f5b5616", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -93,9 +93,6 @@ macro_rules! encoder_methods {\n }\n \n impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n-    type Ok = <opaque::Encoder as Encoder>::Ok;\n-    type Err = <opaque::Encoder as Encoder>::Err;\n-\n     encoder_methods! {\n         emit_usize(usize);\n         emit_u128(u128);\n@@ -118,10 +115,6 @@ impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);\n     }\n-\n-    fn finish(self) -> Result<Self::Ok, Self::Err> {\n-        self.opaque.finish()\n-    }\n }\n \n impl<'a, 'tcx, T> Encodable<EncodeContext<'a, 'tcx>> for LazyValue<T> {\n@@ -2223,7 +2216,7 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     // culminating in the `CrateRoot` which points to all of it.\n     let root = ecx.encode_crate_root();\n \n-    let mut result = ecx.opaque.finish().unwrap();\n+    let mut result = ecx.opaque.finish();\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();"}, {"sha": "0e6435fdf7fde74f8884062a49ab348a2f559692", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 26, "deletions": 66, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -25,6 +25,7 @@ use rustc_span::hygiene::{\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n use rustc_span::CachingSourceMapView;\n use rustc_span::{BytePos, ExpnData, ExpnHash, Pos, SourceFile, Span};\n+use std::io;\n use std::mem;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n@@ -807,21 +808,10 @@ impl_ref_decoder! {<'tcx>\n \n //- ENCODING -------------------------------------------------------------------\n \n-pub trait OpaqueEncoder: Encoder {\n-    fn position(&self) -> usize;\n-}\n-\n-impl OpaqueEncoder for FileEncoder {\n-    #[inline]\n-    fn position(&self) -> usize {\n-        FileEncoder::position(self)\n-    }\n-}\n-\n /// An encoder that can write to the incremental compilation cache.\n-pub struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n+pub struct CacheEncoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    encoder: E,\n+    encoder: FileEncoder,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::PredicateKind<'tcx>, usize>,\n     interpret_allocs: FxIndexSet<interpret::AllocId>,\n@@ -830,10 +820,7 @@ pub struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     hygiene_context: &'a HygieneEncodeContext,\n }\n \n-impl<'a, 'tcx, E> CacheEncoder<'a, 'tcx, E>\n-where\n-    E: OpaqueEncoder,\n-{\n+impl<'a, 'tcx> CacheEncoder<'a, 'tcx> {\n     fn source_file_index(&mut self, source_file: Lrc<SourceFile>) -> SourceFileIndex {\n         self.file_to_file_index[&(&*source_file as *const SourceFile)]\n     }\n@@ -852,32 +839,27 @@ where\n         let end_pos = self.position();\n         ((end_pos - start_pos) as u64).encode(self);\n     }\n+\n+    fn finish(self) -> Result<usize, io::Error> {\n+        self.encoder.finish()\n+    }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for SyntaxContext\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for SyntaxContext {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         rustc_span::hygiene::raw_encode_syntax_context(*self, s.hygiene_context, s);\n     }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for ExpnId\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for ExpnId {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         s.hygiene_context.schedule_expn_data_for_encoding(*self);\n         self.expn_hash().encode(s);\n     }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for Span\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Span {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         let span_data = self.data_untracked();\n         span_data.ctxt.encode(s);\n         span_data.parent.encode(s);\n@@ -920,10 +902,7 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> TyEncoder for CacheEncoder<'a, 'tcx, E>\n-where\n-    E: OpaqueEncoder,\n-{\n+impl<'a, 'tcx> TyEncoder for CacheEncoder<'a, 'tcx> {\n     type I = TyCtxt<'tcx>;\n     const CLEAR_CROSS_CRATE: bool = false;\n \n@@ -943,29 +922,20 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for CrateNum\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for CrateNum {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         s.tcx.stable_crate_id(*self).encode(s);\n     }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for DefId\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for DefId {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n         s.tcx.def_path_hash(*self).encode(s);\n     }\n }\n \n-impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for DefIndex\n-where\n-    E: OpaqueEncoder,\n-{\n-    fn encode(&self, _: &mut CacheEncoder<'a, 'tcx, E>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for DefIndex {\n+    fn encode(&self, _: &mut CacheEncoder<'a, 'tcx>) {\n         bug!(\"encoding `DefIndex` without context\");\n     }\n }\n@@ -979,13 +949,7 @@ macro_rules! encoder_methods {\n     }\n }\n \n-impl<'a, 'tcx, E> Encoder for CacheEncoder<'a, 'tcx, E>\n-where\n-    E: OpaqueEncoder,\n-{\n-    type Ok = E::Ok;\n-    type Err = E::Err;\n-\n+impl<'a, 'tcx> Encoder for CacheEncoder<'a, 'tcx> {\n     encoder_methods! {\n         emit_usize(usize);\n         emit_u128(u128);\n@@ -1008,30 +972,26 @@ where\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);\n     }\n-\n-    fn finish(self) -> Result<E::Ok, E::Err> {\n-        self.encoder.finish()\n-    }\n }\n \n // This ensures that the `Encodable<opaque::FileEncoder>::encode` specialization for byte slices\n // is used when a `CacheEncoder` having an `opaque::FileEncoder` is passed to `Encodable::encode`.\n // Unfortunately, we have to manually opt into specializations this way, given how `CacheEncoder`\n // and the encoding traits currently work.\n-impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx, FileEncoder>> for [u8] {\n-    fn encode(&self, e: &mut CacheEncoder<'a, 'tcx, FileEncoder>) {\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for [u8] {\n+    fn encode(&self, e: &mut CacheEncoder<'a, 'tcx>) {\n         self.encode(&mut e.encoder);\n     }\n }\n \n pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n     tcx: CTX,\n-    encoder: &mut CacheEncoder<'a, 'tcx, FileEncoder>,\n+    encoder: &mut CacheEncoder<'a, 'tcx>,\n     query_result_index: &mut EncodedDepNodeIndex,\n ) where\n     CTX: QueryContext + 'tcx,\n     Q: super::QueryDescription<CTX>,\n-    Q::Value: Encodable<CacheEncoder<'a, 'tcx, FileEncoder>>,\n+    Q::Value: Encodable<CacheEncoder<'a, 'tcx>>,\n {\n     let _timer = tcx\n         .dep_context()"}, {"sha": "66f4508f6b497a18f8a0c5042cf53126c2960914", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -12,7 +12,6 @@ use rustc_query_system::query::{QueryContext, QueryJobId, QueryMap, QuerySideEff\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Diagnostic, Handler};\n-use rustc_serialize::opaque;\n \n use std::any::Any;\n use std::num::NonZeroU64;\n@@ -140,7 +139,7 @@ impl<'tcx> QueryCtxt<'tcx> {\n \n     pub(super) fn encode_query_results(\n         self,\n-        encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx, opaque::FileEncoder>,\n+        encoder: &mut on_disk_cache::CacheEncoder<'_, 'tcx>,\n         query_result_index: &mut on_disk_cache::EncodedDepNodeIndex,\n     ) {\n         macro_rules! encode_queries {"}, {"sha": "2c44054e4c847b59a5a03074bb23cce61d56d5ff", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize};\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::{Decodable, Decoder, Encodable};\n use smallvec::SmallVec;\n use std::convert::TryInto;\n "}, {"sha": "88e523972970844acd440c4ddd5bd8aac414e14b", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -24,6 +24,10 @@ impl Encoder {\n     pub fn position(&self) -> usize {\n         self.data.len()\n     }\n+\n+    pub fn finish(self) -> Vec<u8> {\n+        self.data\n+    }\n }\n \n macro_rules! write_leb128 {\n@@ -54,9 +58,6 @@ macro_rules! write_leb128 {\n const STR_SENTINEL: u8 = 0xC1;\n \n impl serialize::Encoder for Encoder {\n-    type Ok = Vec<u8>;\n-    type Err = !;\n-\n     #[inline]\n     fn emit_usize(&mut self, v: usize) {\n         write_leb128!(self, v, usize, write_usize_leb128)\n@@ -150,10 +151,6 @@ impl serialize::Encoder for Encoder {\n     fn emit_raw_bytes(&mut self, s: &[u8]) {\n         self.data.extend_from_slice(s);\n     }\n-\n-    fn finish(self) -> Result<Self::Ok, Self::Err> {\n-        Ok(self.data)\n-    }\n }\n \n pub type FileEncodeResult = Result<usize, io::Error>;\n@@ -389,6 +386,13 @@ impl FileEncoder {\n             }\n         }\n     }\n+\n+    pub fn finish(mut self) -> Result<usize, io::Error> {\n+        self.flush();\n+\n+        let res = std::mem::replace(&mut self.res, Ok(()));\n+        res.map(|()| self.position())\n+    }\n }\n \n impl Drop for FileEncoder {\n@@ -426,9 +430,6 @@ macro_rules! file_encoder_write_leb128 {\n }\n \n impl serialize::Encoder for FileEncoder {\n-    type Ok = usize;\n-    type Err = io::Error;\n-\n     #[inline]\n     fn emit_usize(&mut self, v: usize) {\n         file_encoder_write_leb128!(self, v, usize, write_usize_leb128)\n@@ -522,13 +523,6 @@ impl serialize::Encoder for FileEncoder {\n     fn emit_raw_bytes(&mut self, s: &[u8]) {\n         self.write_all(s);\n     }\n-\n-    fn finish(mut self) -> Result<usize, io::Error> {\n-        self.flush();\n-\n-        let res = std::mem::replace(&mut self.res, Ok(()));\n-        res.map(|()| self.position())\n-    }\n }\n \n // -----------------------------------------------------------------------------"}, {"sha": "36585b8d77e0ad2c58fe3359270d7b5f723a1059", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -18,13 +18,10 @@ use std::sync::Arc;\n /// is pervasive and has non-trivial cost. Instead, impls of this trait must\n /// implement a delayed error handling strategy. If a failure occurs, they\n /// should record this internally, and all subsequent encoding operations can\n-/// be processed or ignored, whichever is appropriate. Then when `finish()` is\n-/// called, an error result should be returned to indicate the failure. If no\n-/// failures occurred, then `finish()` should return a success result.\n+/// be processed or ignored, whichever is appropriate. Then they should provide\n+/// a `finish` method that finishes up encoding. If the encoder is fallible,\n+/// `finish` should return a `Result` that indicates success or failure.\n pub trait Encoder {\n-    type Ok;\n-    type Err;\n-\n     // Primitive types:\n     fn emit_usize(&mut self, v: usize);\n     fn emit_u128(&mut self, v: u128);\n@@ -64,9 +61,6 @@ pub trait Encoder {\n     fn emit_fieldless_enum_variant<const ID: usize>(&mut self) {\n         self.emit_usize(ID)\n     }\n-\n-    // Consume the encoder, getting the result.\n-    fn finish(self) -> Result<Self::Ok, Self::Err>;\n }\n \n // Note: all the methods in this trait are infallible, which may be surprising."}, {"sha": "5ed6fc769cc294e4ce85ed831eaa72f22cfc4470", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_macros::{Decodable, Encodable};\n use rustc_serialize::opaque::{Decoder, Encoder};\n-use rustc_serialize::{Decodable, Encodable, Encoder as EncoderTrait};\n+use rustc_serialize::{Decodable, Encodable};\n use std::fmt::Debug;\n \n #[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n@@ -36,7 +36,7 @@ fn check_round_trip<T: Encodable<Encoder> + for<'a> Decodable<Decoder<'a>> + Par\n         Encodable::encode(value, &mut encoder);\n     }\n \n-    let data = encoder.finish().unwrap();\n+    let data = encoder.finish();\n     let mut decoder = Decoder::new(&data[..], 0);\n \n     for value in values {"}, {"sha": "81ce56b3342ed2885873bf68696b1f036ee6b079", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::{\n     opaque::{Decoder, FileEncoder},\n-    Decodable, Encodable, Encoder,\n+    Decodable, Encodable,\n };\n use rustc_session::getopts;\n use rustc_span::{"}, {"sha": "382fae4a08eb9635938856ca82a222b929335293", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -20,7 +20,7 @@ fn main() {\n \n     let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n-    let data = encoder.finish().unwrap();\n+    let data = encoder.finish();\n \n     let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = A::decode(&mut decoder);"}, {"sha": "6097340a6e0c927784451578f549d1c7a79aec1c", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -29,7 +29,7 @@ fn main() {\n \n     let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n-    let data = encoder.finish().unwrap();\n+    let data = encoder.finish();\n \n     let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = B::decode(&mut decoder);"}, {"sha": "1a19ee0da595fc2b9e7a8b21bb143eb7d9dbe4c1", "filename": "src/test/ui-fulldeps/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs?ref=dc08bc51f2c58a0f5f815a07f9bb3d671153b5a1", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n \n     let mut encoder = opaque::Encoder::new();\n     obj.encode(&mut encoder);\n-    let data = encoder.finish().unwrap();\n+    let data = encoder.finish();\n \n     let mut decoder = opaque::Decoder::new(&data, 0);\n     let obj2 = UnitLikeStruct::decode(&mut decoder);"}]}