{"sha": "7d290751321f9dcaa91cf4a925e7d68d3ce68817", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjkwNzUxMzIxZjlkY2FhOTFjZjRhOTI1ZTdkNjhkM2NlNjg4MTc=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-03-26T10:32:21Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-03-27T00:13:06Z"}, "message": "Skip the mutation in while body case for closures", "tree": {"sha": "824f2eb02a37a1e6a0dda37660dff21896735e84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824f2eb02a37a1e6a0dda37660dff21896735e84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d290751321f9dcaa91cf4a925e7d68d3ce68817", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+Ra9h3J6V0LpwPz3hStyJ5mrWXgFAlq5jJIACgkQhStyJ5mr\nWXjoBw/+MEf5mow/Rc3KJVssqb/bo799s41x8K6vWbHdRoCAzH7NXtENxmuZxWVM\nXkfthdo1D7r1AxPHcScIwe2fcjdRPuZ7S83sedLPZ/e+rPGipQ6oRPAZOaOi0R+B\nw+RUGGZvVHAj72pqQpHSkHWiQZNY3+MT1aza1WlPmYCOdfybugt6rlqlKFb0B+u8\nTpZp4EMl8ZXSJOiuX1EODfnBmq7r1IM/7cdrNals/6++fnuZV3XSiv29JEibt7xR\n486AW2bWL0iH/hrjeZ/GH9DWgTHV0vfNm6c7l36frysLkodynfVHpS5vF2V5rn27\nxJZI2eQplgogfNYmj7bsss4eSk1uzhIX6T6Z47oM1K5WHeV7NyYouAR1II3pdVZ1\nmZ589mxxGOJHL++wkJGw1JIfH/kBTyVlhnbP1WceA9Mqif22jz7vwk9ZC/JFBhbA\nCheXExXrjMRg97qx7YcoypMsVyfMubEj0XX3aAeS1NI5n2yBxoSTl6wCRkVqJVU7\nt5QalwcM4nCUClllSLlXJhmjm1C2FszYnVhxGBFpgo+dqFf1zXQcNJkn01VROU3B\n/wNLPzUH7JUKCKcLDgUe2gN6BUTdT/NP6rDbP+2RGbMuf6vkzHNENakclVCUP/t6\nVH3fHsbpVVRoui8F1Qzbbe9e4t5+FUMAhCPKNb9n7reLHqKpXuQ=\n=7VPj\n-----END PGP SIGNATURE-----", "payload": "tree 824f2eb02a37a1e6a0dda37660dff21896735e84\nparent d458f22d89eff815b2a0f2cf3d1655d393b26714\nauthor flip1995 <uwdkn@student.kit.edu> 1522060341 +0200\ncommitter flip1995 <uwdkn@student.kit.edu> 1522109586 +0200\n\nSkip the mutation in while body case for closures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d290751321f9dcaa91cf4a925e7d68d3ce68817", "html_url": "https://github.com/rust-lang/rust/commit/7d290751321f9dcaa91cf4a925e7d68d3ce68817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d290751321f9dcaa91cf4a925e7d68d3ce68817/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d458f22d89eff815b2a0f2cf3d1655d393b26714", "url": "https://api.github.com/repos/rust-lang/rust/commits/d458f22d89eff815b2a0f2cf3d1655d393b26714", "html_url": "https://github.com/rust-lang/rust/commit/d458f22d89eff815b2a0f2cf3d1655d393b26714"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "a76b46a1bcbb34f84483b3e40a31d0fd9c94111c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d290751321f9dcaa91cf4a925e7d68d3ce68817/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d290751321f9dcaa91cf4a925e7d68d3ce68817/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=7d290751321f9dcaa91cf4a925e7d68d3ce68817", "patch": "@@ -347,7 +347,9 @@ declare_lint! {\n /// **Why is this bad?** If the condition is unchanged, entering the body of the loop\n /// will lead to an infinite loop.\n ///\n-/// **Known problems:** None\n+/// **Known problems:** If the `while`-loop is in a closure, the check for mutation of the\n+/// condition variables in the body can cause false negatives. For example when only `Upvar` `a` is\n+/// in the condition and only `Upvar` `b` gets mutated in the body, the lint will not trigger.\n ///\n /// **Example:**\n /// ```rust\n@@ -2150,17 +2152,6 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n         return;\n     }\n \n-    if mut_var_visitor.ids.is_empty() {\n-        span_lint(\n-            cx,\n-            WHILE_IMMUTABLE_CONDITION,\n-            cond.span,\n-            \"all variables in condition are immutable. This either leads to an infinite or to a never running loop.\",\n-        );\n-        return;\n-    }\n-\n-\n     let mut delegate = MutVarsDelegate {\n         used_mutably: mut_var_visitor.ids,\n         skip: false,\n@@ -2169,6 +2160,9 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(expr);\n \n+    if delegate.skip {\n+        return;\n+    }\n     if !delegate.used_mutably.iter().any(|(_, v)| *v) {\n         span_lint(\n             cx,\n@@ -2195,9 +2189,13 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             if let ExprPath(ref qpath) = ex.node;\n             if let QPath::Resolved(None, _) = *qpath;\n             let def = self.cx.tables.qpath_def(qpath, ex.hir_id);\n-            if let Def::Local(node_id) = def;\n             then {\n-                self.ids.insert(node_id, false);\n+                match def {\n+                    Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n+                        self.ids.insert(node_id, false);\n+                    },\n+                    _ => {},\n+                }\n             }\n         }\n     }\n@@ -2206,10 +2204,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n-            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, ex) {\n-                self.ids.insert(node_id, false);\n-            },\n-\n+            ExprPath(_) => self.insert_def_id(ex),\n             // If there is any fuction/method call\u2026 we just stop analysis\n             ExprCall(..) | ExprMethodCall(..) => self.skip = true,\n \n@@ -2236,7 +2231,12 @@ impl<'tcx> MutVarsDelegate {\n                 if let Some(used) = self.used_mutably.get_mut(&id) {\n                     *used = true;\n                 },\n-            Categorization::Upvar(_) => skip = true,\n+            Categorization::Upvar(_) => {\n+                //FIXME: This causes false negatives. We can't get the `NodeId` from\n+                //`Categorization::Upvar(_)`. So we search for any `Upvar`s in the\n+                //`while`-body, not just the ones in the condition.\n+                self.skip = true\n+            },\n             Categorization::Deref(ref cmt, _) => self.update(&cmt.cat, sp),\n             _ => {}\n         }"}, {"sha": "0bf14bb723b1d14a3fbce85d6aadfa74d444958d", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7d290751321f9dcaa91cf4a925e7d68d3ce68817/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d290751321f9dcaa91cf4a925e7d68d3ce68817/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=7d290751321f9dcaa91cf4a925e7d68d3ce68817", "patch": "@@ -1,57 +1,57 @@\n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:10:11\n+  --> $DIR/infinite_loop.rs:14:11\n    |\n-10 |     while y < 10 {\n+14 |     while y < 10 {\n    |           ^^^^^^\n    |\n    = note: `-D while-immutable-condition` implied by `-D warnings`\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:15:11\n+  --> $DIR/infinite_loop.rs:19:11\n    |\n-15 |     while y < 10 && x < 3 {\n+19 |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:22:11\n+  --> $DIR/infinite_loop.rs:26:11\n    |\n-22 |     while !cond {\n+26 |     while !cond {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:52:11\n+  --> $DIR/infinite_loop.rs:64:11\n    |\n-52 |     while i < 3 {\n+64 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:57:11\n+  --> $DIR/infinite_loop.rs:69:11\n    |\n-57 |     while i < 3 && j > 0 {\n+69 |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:61:11\n+  --> $DIR/infinite_loop.rs:73:11\n    |\n-61 |     while i < 3 {\n+73 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:76:11\n+  --> $DIR/infinite_loop.rs:88:11\n    |\n-76 |     while i < 3 {\n+88 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:81:11\n+  --> $DIR/infinite_loop.rs:93:11\n    |\n-81 |     while i < 3 {\n+93 |     while i < 3 {\n    |           ^^^^^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n-   --> $DIR/infinite_loop.rs:144:15\n+   --> $DIR/infinite_loop.rs:156:15\n     |\n-144 |         while self.count < n {\n+156 |         while self.count < n {\n     |               ^^^^^^^^^^^^^^\n \n error: aborting due to 9 previous errors"}]}