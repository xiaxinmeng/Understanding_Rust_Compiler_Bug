{"sha": "264c3f4952f1ff182502aa0885ca479c42cec17c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGMzZjQ5NTJmMWZmMTgyNTAyYWEwODg1Y2E0NzljNDJjZWMxN2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-14T23:02:07Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:25Z"}, "message": "add some tests of yielding with outstanding borrows\n\nNo doubt there are more tests one might write, but it's a start.", "tree": {"sha": "91b0e57d06ff70e11cb286d060b1764a97383b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b0e57d06ff70e11cb286d060b1764a97383b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264c3f4952f1ff182502aa0885ca479c42cec17c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264c3f4952f1ff182502aa0885ca479c42cec17c", "html_url": "https://github.com/rust-lang/rust/commit/264c3f4952f1ff182502aa0885ca479c42cec17c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264c3f4952f1ff182502aa0885ca479c42cec17c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e82b19c6b293aca9ad8bbcb755346803d1eb61d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e82b19c6b293aca9ad8bbcb755346803d1eb61d", "html_url": "https://github.com/rust-lang/rust/commit/8e82b19c6b293aca9ad8bbcb755346803d1eb61d"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "46732ce6599a78853264c37bb60e9f60cd3bbb76", "filename": "src/test/compile-fail/generator/yield-during-borrow.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/264c3f4952f1ff182502aa0885ca479c42cec17c/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-during-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264c3f4952f1ff182502aa0885ca479c42cec17c/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-during-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fyield-during-borrow.rs?ref=264c3f4952f1ff182502aa0885ca479c42cec17c", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+use std::cell::Cell;\n+\n+fn borrow_local_inline() {\n+    // Not OK to yield with a borrow of a temporary.\n+    //\n+    // (This error occurs because the region shows up in the type of\n+    // `b` and gets extended by region inference.)\n+    let mut b = move || {\n+        let a = &3;\n+        yield();\n+        println!(\"{}\", a);\n+    }; //~ ERROR E0597\n+    b.resume();\n+}\n+\n+fn borrow_local_inline_done() {\n+    // No error here -- `a` is not in scope at the point of `yield`.\n+    let mut b = move || {\n+        {\n+            let a = &3;\n+        }\n+        yield();\n+    };\n+    b.resume();\n+}\n+\n+fn borrow_local() {\n+    // Not OK to yield with a borrow of a temporary.\n+    //\n+    // (This error occurs because the region shows up in the type of\n+    // `b` and gets extended by region inference.)\n+    let mut b = move || {\n+        let a = 3;\n+        {\n+            let b = &a;\n+            yield();\n+            println!(\"{}\", b);\n+        }\n+    }; //~ ERROR E0597\n+    b.resume();\n+}\n+\n+fn reborrow_shared_ref(x: &i32) {\n+    // This is OK -- we have a borrow live over the yield, but it's of\n+    // data that outlives the generator.\n+    let mut b = move || {\n+        let a = &*x;\n+        yield();\n+        println!(\"{}\", a);\n+    };\n+    b.resume();\n+}\n+\n+fn reborrow_mutable_ref(x: &mut i32) {\n+    // This is OK -- we have a borrow live over the yield, but it's of\n+    // data that outlives the generator.\n+    let mut b = move || {\n+        let a = &mut *x;\n+        yield();\n+        println!(\"{}\", a);\n+    };\n+    b.resume();\n+}\n+\n+fn reborrow_mutable_ref_2(x: &mut i32) {\n+    // ...but not OK to go on using `x`.\n+    let mut b = || {\n+        let a = &mut *x;\n+        yield();\n+        println!(\"{}\", a);\n+    };\n+    println!(\"{}\", x); //~ ERROR E0501\n+    b.resume();\n+}\n+\n+fn yield_during_iter_owned_data(x: Vec<i32>) {\n+    // The generator owns `x`, so we error out when yielding with a\n+    // reference to it.  This winds up becoming a rather confusing\n+    // regionck error -- in particular, we would freeze with the\n+    // reference in scope, and it doesn't live long enough.\n+    let _b = move || {\n+        for p in &x {\n+            yield();\n+        }\n+    }; //~ ERROR E0597\n+}\n+\n+fn yield_during_iter_borrowed_slice(x: &[i32]) {\n+    let _b = move || {\n+        for p in x {\n+            yield();\n+        }\n+    };\n+}\n+\n+fn yield_during_iter_borrowed_slice_2() {\n+    let mut x = vec![22_i32];\n+    let _b = || {\n+        for p in &x {\n+            yield();\n+        }\n+    };\n+    println!(\"{:?}\", x);\n+}\n+\n+fn yield_during_iter_borrowed_slice_3() {\n+    // OK to take a mutable ref to `x` and yield\n+    // up pointers from it:\n+    let mut x = vec![22_i32];\n+    let mut b = || {\n+        for p in &mut x {\n+            yield p;\n+        }\n+    };\n+    b.resume();\n+}\n+\n+fn yield_during_iter_borrowed_slice_4() {\n+    // ...but not OK to do that while reading\n+    // from `x` too\n+    let mut x = vec![22_i32];\n+    let mut b = || {\n+        for p in &mut x {\n+            yield p;\n+        }\n+    };\n+    println!(\"{}\", x[0]); //~ ERROR cannot borrow `x` as immutable\n+    b.resume();\n+}\n+\n+fn main() { }"}]}