{"sha": "e94bda3bf13303671427363d1cd93ac5e089f090", "node_id": "C_kwDOAAsO6NoAKGU5NGJkYTNiZjEzMzAzNjcxNDI3MzYzZDFjZDkzYWM1ZTA4OWYwOTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T09:03:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-07T09:03:33Z"}, "message": "Auto merge of #111047 - compiler-errors:rtn-no-ty-ct-params, r=spastorino\n\nEmit an error when return-type-notation is used with type/const params\n\nThese are not intended to be supported initially, even though the compiler supports them internally...", "tree": {"sha": "b0b579b1ded684f093c43e1d5215d67f1173051d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0b579b1ded684f093c43e1d5215d67f1173051d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94bda3bf13303671427363d1cd93ac5e089f090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94bda3bf13303671427363d1cd93ac5e089f090", "html_url": "https://github.com/rust-lang/rust/commit/e94bda3bf13303671427363d1cd93ac5e089f090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94bda3bf13303671427363d1cd93ac5e089f090/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b7e468f3cc263b8df8ff0212d0911ed5a3c090", "html_url": "https://github.com/rust-lang/rust/commit/10b7e468f3cc263b8df8ff0212d0911ed5a3c090"}, {"sha": "b0eaaca31457672a8022312cc0f89b18ebc9d754", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0eaaca31457672a8022312cc0f89b18ebc9d754", "html_url": "https://github.com/rust-lang/rust/commit/b0eaaca31457672a8022312cc0f89b18ebc9d754"}], "stats": {"total": 144, "additions": 100, "deletions": 44}, "files": [{"sha": "cd6cf36baa44d80866571c224073e91a096a3194", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -195,6 +195,13 @@ hir_analysis_return_type_notation_conflicting_bound =\n hir_analysis_return_type_notation_equality_bound =\n     return type notation is not allowed to use type equality\n \n+hir_analysis_return_type_notation_illegal_param_const =\n+    return type notation is not allowed for functions that have const parameters\n+    .label = const parameter declared here\n+hir_analysis_return_type_notation_illegal_param_type =\n+    return type notation is not allowed for functions that have type parameters\n+    .label = type parameter declared here\n+\n hir_analysis_return_type_notation_missing_method =\n     cannot find associated function `{$assoc_name}` for `{$ty_name}`\n "}, {"sha": "a9e8afe434ed3245ac18d37568afb4dee96d4579", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 24, "deletions": 39, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -26,10 +26,8 @@ use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::ObligationCause;\n-use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -1215,6 +1213,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         let projection_ty = if return_type_notation {\n+            let mut emitted_bad_param_err = false;\n             // If we have an method return type bound, then we need to substitute\n             // the method's early bound params with suitable late-bound params.\n             let mut num_bound_vars = candidate.bound_vars().len();\n@@ -1230,16 +1229,35 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             },\n                         )\n                         .into(),\n-                        GenericParamDefKind::Type { .. } => tcx\n-                            .mk_bound(\n+                        GenericParamDefKind::Type { .. } => {\n+                            if !emitted_bad_param_err {\n+                                tcx.sess.emit_err(\n+                                    crate::errors::ReturnTypeNotationIllegalParam::Type {\n+                                        span: path_span,\n+                                        param_span: tcx.def_span(param.def_id),\n+                                    },\n+                                );\n+                                emitted_bad_param_err = true;\n+                            }\n+                            tcx.mk_bound(\n                                 ty::INNERMOST,\n                                 ty::BoundTy {\n                                     var: ty::BoundVar::from_usize(num_bound_vars),\n                                     kind: ty::BoundTyKind::Param(param.def_id, param.name),\n                                 },\n                             )\n-                            .into(),\n+                            .into()\n+                        }\n                         GenericParamDefKind::Const { .. } => {\n+                            if !emitted_bad_param_err {\n+                                tcx.sess.emit_err(\n+                                    crate::errors::ReturnTypeNotationIllegalParam::Const {\n+                                        span: path_span,\n+                                        param_span: tcx.def_span(param.def_id),\n+                                    },\n+                                );\n+                                emitted_bad_param_err = true;\n+                            }\n                             let ty = tcx\n                                 .type_of(param.def_id)\n                                 .no_bound_vars()\n@@ -2472,7 +2490,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n \n-                        let impl_substs = infcx.fresh_item_substs(impl_);\n+                        let impl_substs = infcx.fresh_substs_for_item(span, impl_);\n                         let impl_ty = tcx.type_of(impl_).subst(tcx, impl_substs);\n                         let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n@@ -3759,36 +3777,3 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n }\n-\n-pub trait InferCtxtExt<'tcx> {\n-    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx>;\n-}\n-\n-impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n-    fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {\n-        InternalSubsts::for_item(self.tcx, def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => self.tcx.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => self\n-                .next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::SubstitutionPlaceholder,\n-                    span: self.tcx.def_span(def_id),\n-                })\n-                .into(),\n-            GenericParamDefKind::Const { .. } => {\n-                let span = self.tcx.def_span(def_id);\n-                let origin = ConstVariableOrigin {\n-                    kind: ConstVariableOriginKind::SubstitutionPlaceholder,\n-                    span,\n-                };\n-                self.next_const_var(\n-                    self.tcx\n-                        .type_of(param.def_id)\n-                        .no_bound_vars()\n-                        .expect(\"const parameter types cannot be generic\"),\n-                    origin,\n-                )\n-                .into()\n-            }\n-        })\n-    }\n-}"}, {"sha": "7dce1272f96df870fe8f2d089d0a577c8de3bcf4", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -857,3 +857,21 @@ pub(crate) enum DropImplPolarity {\n         span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+pub(crate) enum ReturnTypeNotationIllegalParam {\n+    #[diag(hir_analysis_return_type_notation_illegal_param_type)]\n+    Type {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        param_span: Span,\n+    },\n+    #[diag(hir_analysis_return_type_notation_illegal_param_const)]\n+    Const {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        param_span: Span,\n+    },\n+}"}, {"sha": "b7b11ff8942f98e1a5607bf0e92d5841119b86c3", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir_analysis::astconv::InferCtxtExt as _;\n use rustc_hir_analysis::autoderef::{self, Autoderef};\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n@@ -954,7 +953,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_def_id: DefId,\n     ) {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);\n-        let trait_substs = self.fresh_item_substs(trait_def_id);\n+        let trait_substs = self.fresh_substs_for_item(self.span, trait_def_id);\n         let trait_ref = ty::TraitRef::new(self.tcx, trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n@@ -1899,7 +1898,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         &self,\n         impl_def_id: DefId,\n     ) -> (ty::EarlyBinder<Ty<'tcx>>, SubstsRef<'tcx>) {\n-        (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n+        (self.tcx.type_of(impl_def_id), self.fresh_substs_for_item(self.span, impl_def_id))\n     }\n \n     /// Replaces late-bound-regions bound by `value` with `'static` using"}, {"sha": "9f85f9207e8f28119692ad4f0ac1e0d6f57d7f85", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -129,7 +129,6 @@ pub enum TypeVariableOriginKind {\n     /// (before it has been determined).\n     // FIXME(eddyb) distinguish upvar inference variables from the rest.\n     ClosureSynthetic,\n-    SubstitutionPlaceholder,\n     AutoDeref,\n     AdjustmentType,\n "}, {"sha": "991b9f01985ca4656d43d1a2104b9059874530f3", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -116,7 +116,6 @@ pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n     ConstParameterDefinition(Symbol, DefId),\n-    SubstitutionPlaceholder,\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "7871a2fed03b80ae9b12a882d20dcad3cd4605b2", "filename": "tests/ui/async-await/return-type-notation/ty-or-ct-params.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.rs?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -0,0 +1,20 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait, return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+\n+trait Foo {\n+    async fn bar<T>() {}\n+\n+    async fn baz<const N: usize>() {}\n+}\n+\n+fn test<T>()\n+where\n+    T: Foo<bar(): Send, baz(): Send>,\n+    //~^ ERROR return type notation is not allowed for functions that have const parameters\n+    //~| ERROR return type notation is not allowed for functions that have type parameters\n+{\n+}\n+\n+fn main() {}"}, {"sha": "76928c5d7a3e2ac3a1b3e5c36fff092fde29681c", "filename": "tests/ui/async-await/return-type-notation/ty-or-ct-params.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e94bda3bf13303671427363d1cd93ac5e089f090/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94bda3bf13303671427363d1cd93ac5e089f090/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fty-or-ct-params.stderr?ref=e94bda3bf13303671427363d1cd93ac5e089f090", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/ty-or-ct-params.rs:3:31\n+   |\n+LL | #![feature(async_fn_in_trait, return_type_notation)]\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: return type notation is not allowed for functions that have type parameters\n+  --> $DIR/ty-or-ct-params.rs:14:12\n+   |\n+LL |     async fn bar<T>() {}\n+   |                  - type parameter declared here\n+...\n+LL |     T: Foo<bar(): Send, baz(): Send>,\n+   |            ^^^^^^^^^^^\n+\n+error: return type notation is not allowed for functions that have const parameters\n+  --> $DIR/ty-or-ct-params.rs:14:25\n+   |\n+LL |     async fn baz<const N: usize>() {}\n+   |                  -------------- const parameter declared here\n+...\n+LL |     T: Foo<bar(): Send, baz(): Send>,\n+   |                         ^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}]}