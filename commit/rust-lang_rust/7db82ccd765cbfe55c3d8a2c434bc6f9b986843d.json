{"sha": "7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjgyY2NkNzY1Y2JmZTU1YzNkOGEyYzQzNGJjNmY5Yjk4Njg0M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-12T12:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-12T12:50:13Z"}, "message": "Auto merge of #52303 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #51816 (bootstrap: write texts to a .tmp file first for atomicity)\n - #51912 (impl Clone for Box<CStr>, Box<OsStr>, Box<Path>)\n - #52164 (use proper footnote syntax for references)\n - #52220 (Deny bare trait objects in `src/bootstrap`)\n - #52276 (rustc: Verify #[proc_macro] is only a word)\n - #52277 (Uncapitalize \"If\")\n - #52287 (Deny bare trait objects in src/librustc_resolve)\n - #52295 (Deny bare trait objects in src/libsyntax_ext)\n - #52298 (make reference to dirs crate clickable in terminals)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "41bda55edea65f5ef3f02b198ce2984b97e666e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bda55edea65f5ef3f02b198ce2984b97e666e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "html_url": "https://github.com/rust-lang/rust/commit/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d334027c58060449cc45b8e5cc37dd51ca077d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/d334027c58060449cc45b8e5cc37dd51ca077d30", "html_url": "https://github.com/rust-lang/rust/commit/d334027c58060449cc45b8e5cc37dd51ca077d30"}, {"sha": "a7c2c68b135b40666bda030315007c29ce197901", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c2c68b135b40666bda030315007c29ce197901", "html_url": "https://github.com/rust-lang/rust/commit/a7c2c68b135b40666bda030315007c29ce197901"}], "stats": {"total": 250, "additions": 182, "deletions": 68}, "files": [{"sha": "71c1c61e3d97ebd51e9bd8cf5b9946cbcbe5ca5c", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -303,6 +303,19 @@ def default_build_triple():\n     return \"{}-{}\".format(cputype, ostype)\n \n \n+@contextlib.contextmanager\n+def output(filepath):\n+    tmp = filepath + '.tmp'\n+    with open(tmp, 'w') as f:\n+        yield f\n+    try:\n+        os.remove(filepath)  # PermissionError/OSError on Win32 if in use\n+        os.rename(tmp, filepath)\n+    except OSError:\n+        shutil.copy2(tmp, filepath)\n+        os.remove(tmp)\n+\n+\n class RustBuild(object):\n     \"\"\"Provide all the methods required to build Rust\"\"\"\n     def __init__(self):\n@@ -346,7 +359,7 @@ def download_stage0(self):\n             self._download_stage0_helper(filename, \"rustc\")\n             self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n-            with open(self.rustc_stamp(), 'w') as rust_stamp:\n+            with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(self.date)\n \n             # This is required so that we don't mix incompatible MinGW\n@@ -363,7 +376,7 @@ def download_stage0(self):\n             filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n             self._download_stage0_helper(filename, \"cargo\")\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n-            with open(self.cargo_stamp(), 'w') as cargo_stamp:\n+            with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n     def _download_stage0_helper(self, filename, pattern):\n@@ -776,7 +789,7 @@ def bootstrap(help_triggered):\n     if build.use_vendored_sources:\n         if not os.path.exists('.cargo'):\n             os.makedirs('.cargo')\n-        with open('.cargo/config', 'w') as cargo_config:\n+        with output('.cargo/config') as cargo_config:\n             cargo_config.write(\"\"\"\n                 [source.crates-io]\n                 replace-with = 'vendored-sources'"}, {"sha": "eb534cb685e87a2afef58e8d5b53e79c99c11286", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -44,7 +44,7 @@ pub struct Builder<'a> {\n     pub top_stage: u32,\n     pub kind: Kind,\n     cache: Cache,\n-    stack: RefCell<Vec<Box<Any>>>,\n+    stack: RefCell<Vec<Box<dyn Any>>>,\n     time_spent_on_dependencies: Cell<Duration>,\n     pub paths: Vec<PathBuf>,\n     graph_nodes: RefCell<HashMap<String, NodeIndex>>,"}, {"sha": "bca5ff85ba23e846052ed1ed1b073f02579fe2ce", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -249,7 +249,7 @@ lazy_static! {\n pub struct Cache(\n     RefCell<HashMap<\n         TypeId,\n-        Box<Any>, // actually a HashMap<Step, Interned<Step::Output>>\n+        Box<dyn Any>, // actually a HashMap<Step, Interned<Step::Output>>\n     >>\n );\n "}, {"sha": "7d94bac66f7706aaf2fd10c19450c086954bae61", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -1189,7 +1189,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n-    cb: &mut FnMut(CargoMessage),\n+    cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n         return true;"}, {"sha": "9fdba044f4be3da82b035e5bc110c4a477f9085d", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -432,7 +432,7 @@ def configure_section(lines, config):\n # order that we read it in.\n p(\"\")\n p(\"writing `config.toml` in current directory\")\n-with open('config.toml', 'w') as f:\n+with bootstrap.output('config.toml') as f:\n     for section in section_order:\n         if section == 'target':\n             for target in targets:\n@@ -442,7 +442,7 @@ def configure_section(lines, config):\n             for line in sections[section]:\n                 f.write(line + \"\\n\")\n \n-with open('Makefile', 'w') as f:\n+with bootstrap.output('Makefile') as f:\n     contents = os.path.join(rust_dir, 'src', 'bootstrap', 'mk', 'Makefile.in')\n     contents = open(contents).read()\n     contents = contents.replace(\"$(CFG_SRC_DIR)\", rust_dir + '/')"}, {"sha": "cd9a639e82e2f9c85580e40152ab5b9ce59dbdc2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -113,6 +113,7 @@\n //! More documentation can be found in each respective module below, and you can\n //! also check out the `src/bootstrap/README.md` file for more information.\n \n+#![deny(bare_trait_objects)]\n #![deny(warnings)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n@@ -1174,13 +1175,13 @@ impl Build {\n     /// Copies the `src` directory recursively to `dst`. Both are assumed to exist\n     /// when this function is called. Unwanted files or directories can be skipped\n     /// by returning `false` from the filter function.\n-    pub fn cp_filtered(&self, src: &Path, dst: &Path, filter: &Fn(&Path) -> bool) {\n+    pub fn cp_filtered(&self, src: &Path, dst: &Path, filter: &dyn Fn(&Path) -> bool) {\n         // Immediately recurse with an empty relative path\n         self.recurse_(src, dst, Path::new(\"\"), filter)\n     }\n \n     // Inner function does the actual work\n-    fn recurse_(&self, src: &Path, dst: &Path, relative: &Path, filter: &Fn(&Path) -> bool) {\n+    fn recurse_(&self, src: &Path, dst: &Path, relative: &Path, filter: &dyn Fn(&Path) -> bool) {\n         for f in self.read_dir(src) {\n             let path = f.path();\n             let name = path.file_name().unwrap();"}, {"sha": "aa6a08cb2057ea34a4e1faed0dfa1c700a56b5a6", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n-Almost direct (but slightly optimized) Rust translation of Figure 3 of \\[1\\].\n-\n-\\[1\\] Burger, R. G. and Dybvig, R. K. 1996. Printing floating-point numbers\n-    quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n-*/\n+//! Almost direct (but slightly optimized) Rust translation of Figure 3 of \"Printing\n+//! Floating-Point Numbers Quickly and Accurately\"[^1].\n+//!\n+//! [^1]: Burger, R. G. and Dybvig, R. K. 1996. Printing floating-point numbers\n+//!   quickly and accurately. SIGPLAN Not. 31, 5 (May. 1996), 108-116.\n \n use cmp::Ordering;\n "}, {"sha": "f33186e59c2e6a65107aee8c436c8f852ab44e67", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n-Rust adaptation of Grisu3 algorithm described in \\[1\\]. It uses about\n-1KB of precomputed table, and in turn, it's very quick for most inputs.\n-\n-\\[1\\] Florian Loitsch. 2010. Printing floating-point numbers quickly and\n-    accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n-*/\n+//! Rust adaptation of the Grisu3 algorithm described in \"Printing Floating-Point Numbers Quickly\n+//! and Accurately with Integers\"[^1]. It uses about 1KB of precomputed table, and in turn, it's\n+//! very quick for most inputs.\n+//!\n+//! [^1]: Florian Loitsch. 2010. Printing floating-point numbers quickly and\n+//!   accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n \n use num::diy_float::Fp;\n use num::flt2dec::{Decoded, MAX_SIG_DIGITS, round_up};"}, {"sha": "aed70861e33837d1d8cd462e8f2694f08dcc98b8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -1292,7 +1294,7 @@ impl PrimitiveTypeTable {\n /// This is the visitor that walks the whole crate.\n pub struct Resolver<'a> {\n     session: &'a Session,\n-    cstore: &'a CrateStore,\n+    cstore: &'a dyn CrateStore,\n \n     pub definitions: Definitions,\n \n@@ -1388,7 +1390,7 @@ pub struct Resolver<'a> {\n     /// true if `#![feature(use_extern_macros)]`\n     use_extern_macros: bool,\n \n-    crate_loader: &'a mut CrateLoader,\n+    crate_loader: &'a mut dyn CrateLoader,\n     macro_names: FxHashSet<Ident>,\n     global_macros: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n@@ -1604,11 +1606,11 @@ impl<'a> Resolver<'a> {\n \n impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n-               cstore: &'a CrateStore,\n+               cstore: &'a dyn CrateStore,\n                krate: &Crate,\n                crate_name: &str,\n                make_glob_map: MakeGlobMap,\n-               crate_loader: &'a mut CrateLoader,\n+               crate_loader: &'a mut dyn CrateLoader,\n                arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);"}, {"sha": "9066c0b7694793b9319789634df49d5587250486", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -541,7 +541,7 @@ impl Error for JoinPathsError {\n /// ```\n #[rustc_deprecated(since = \"1.29.0\",\n     reason = \"This function's behavior is unexpected and probably not what you want. \\\n-              Consider using the home_dir function from crates.io/crates/dirs instead.\")]\n+              Consider using the home_dir function from https://crates.io/crates/dirs instead.\")]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()"}, {"sha": "b816f4b7850efb17aaea0f3e4b0bcca774a838a4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -706,6 +706,14 @@ impl From<Box<CStr>> for CString {\n     }\n }\n \n+#[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]\n+impl Clone for Box<CStr> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        (**self).into()\n+    }\n+}\n+\n #[stable(feature = \"box_from_c_string\", since = \"1.20.0\")]\n impl From<CString> for Box<CStr> {\n     #[inline]"}, {"sha": "b1c6e7af693d0a00eae72517ef9fe984dfe644d9", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -642,6 +642,14 @@ impl From<OsString> for Box<OsStr> {\n     }\n }\n \n+#[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]\n+impl Clone for Box<OsStr> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        self.to_os_string().into_boxed_os_str()\n+    }\n+}\n+\n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n     #[inline]"}, {"sha": "2d8686292788448fa13b98156fdaab240cfabcb4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -1410,6 +1410,14 @@ impl From<PathBuf> for Box<Path> {\n     }\n }\n \n+#[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]\n+impl Clone for Box<Path> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        self.to_path_buf().into_boxed_path()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n     fn from(s: &'a T) -> PathBuf {"}, {"sha": "cbda5afadcdfc14858813589527d7ba76615fe14", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -689,7 +689,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// only one [`Receiver`] is supported.\n ///\n /// If the [`Receiver`] is disconnected while trying to [`send`] with the\n-/// [`Sender`], the [`send`] method will return a [`SendError`]. Similarly, If the\n+/// [`Sender`], the [`send`] method will return a [`SendError`]. Similarly, if the\n /// [`Sender`] is disconnected while trying to [`recv`], the [`recv`] method will\n /// return a [`RecvError`].\n ///"}, {"sha": "4ebb1fcb65393da183cdf489cd0166cb93aa5017", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -50,7 +50,7 @@ const OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'cx> {\n+                       -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_asm() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"asm\","}, {"sha": "8d0a04831fcb48c4b5cb5f0da5a166604099ef00", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -22,7 +22,7 @@ pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt,\n     sp: Span,\n     tts: &[TokenTree],\n-) -> Box<MacResult + 'cx> {\n+) -> Box<dyn MacResult + 'cx> {\n     let mut parser = cx.new_parser_from_tts(tts);\n     let cond_expr = panictry!(parser.parse_expr());\n     let custom_msg_args = if parser.eat(&token::Comma) {"}, {"sha": "2384b6a796e198cc1e0aab1c3c552f7d7f4789ea", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::Span;\n pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'static> {\n+                       -> Box<dyn base::MacResult + 'static> {\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     let mut p = cx.new_parser_from_tts(tts);\n     let cfg = panictry!(p.parse_meta_item());"}, {"sha": "ce7fb400bd547b51b6e08b8195f8654d86020967", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -18,7 +18,7 @@ use syntax::tokenstream;\n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::expr(sp),\n         Some(v) => v,"}, {"sha": "69b4a83764e4624f999864f50f4a23d12b073f6d", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -21,7 +21,7 @@ pub fn expand_syntax_ext(\n     cx: &mut base::ExtCtxt,\n     sp: syntax_pos::Span,\n     tts: &[tokenstream::TokenTree],\n-) -> Box<base::MacResult + 'static> {\n+) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,\n         None => return base::DummyResult::expr(sp),"}, {"sha": "a3c5c3df66e4c424e4c2d3709d689d9d21f724f4", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -21,7 +21,7 @@ use syntax::tokenstream::TokenTree;\n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_concat_idents() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"concat_idents\","}, {"sha": "41e980b334616ade5931bb301b9880daaa96544c", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -19,15 +19,15 @@ pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n                                     span: Span,\n                                     _: &MetaItem,\n                                     _: &Annotatable,\n-                                    _: &mut FnMut(Annotatable)) {\n+                                    _: &mut dyn FnMut(Annotatable)) {\n     cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n }\n \n pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n-                            push: &mut FnMut(Annotatable)) {\n+                            push: &mut dyn FnMut(Annotatable)) {\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "ec935b3e72f230955fc8884210c09e8d7c6d200d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -25,7 +25,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n-                             push: &mut FnMut(Annotatable)) {\n+                             push: &mut dyn FnMut(Annotatable)) {\n     // check if we can use a short form\n     //\n     // the short form is `fn clone(&self) -> Self { *self }`"}, {"sha": "f202bc4e524d2204ca854861d8a499e85a8766b0", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n-                          push: &mut FnMut(Annotatable)) {\n+                          push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let hidden = cx.meta_list_item_word(span, Symbol::intern(\"hidden\"));\n     let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);"}, {"sha": "117bedf453e6c33b17cdcc11b56d686915fd599b", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: &MetaItem,\n                            item: &Annotatable,\n-                           push: &mut FnMut(Annotatable)) {\n+                           push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {"}, {"sha": "24a3a7542fb669507be2dc3044d056c172269d68", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n-                                  push: &mut FnMut(Annotatable)) {\n+                                  push: &mut dyn FnMut(Annotatable)) {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_op(cx: &mut ExtCtxt,"}, {"sha": "3705a245584d02f1127599ab2de717e103bd38e0", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -25,7 +25,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                                    span: Span,\n                                    mitem: &MetaItem,\n                                    item: &Annotatable,\n-                                   push: &mut FnMut(Annotatable)) {\n+                                   push: &mut dyn FnMut(Annotatable)) {\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, Symbol::intern(\"inline\"));"}, {"sha": "c2a7dea331673f835394c07edf53b026f82e52ba", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n-                             push: &mut FnMut(Annotatable)) {\n+                             push: &mut dyn FnMut(Annotatable)) {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ptr(Box::new(Literal(path_std!(cx, fmt::Formatter))),\n                    Borrowed(None, ast::Mutability::Mutable));"}, {"sha": "1e04d8fa22a673e522c6b9f80ee1067572c65bb3", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -27,15 +27,15 @@ pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n-                                       push: &mut FnMut(Annotatable)) {\n+                                       push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable)) {\n+                                 push: &mut dyn FnMut(Annotatable)) {\n     warn_if_deprecated(cx, span, \"Decodable\");\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n@@ -44,7 +44,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable),\n+                                 push: &mut dyn FnMut(Annotatable),\n                                  krate: &'static str) {\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n "}, {"sha": "958116f7809bbb3d078455fbc80be8f863763795", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                                span: Span,\n                                mitem: &MetaItem,\n                                item: &Annotatable,\n-                               push: &mut FnMut(Annotatable)) {\n+                               push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {"}, {"sha": "5438c8b52af05e283bd9038549ef159aa58cc7ce", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -108,15 +108,15 @@ pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n-                                       push: &mut FnMut(Annotatable)) {\n+                                       push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable)) {\n+                                 push: &mut dyn FnMut(Annotatable)) {\n     warn_if_deprecated(cx, span, \"Encodable\");\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n@@ -125,7 +125,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable),\n+                                 push: &mut dyn FnMut(Annotatable),\n                                  krate: &'static str) {\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n "}, {"sha": "aad69c109f9795f75bee0ffa5776f90947a34068", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -330,15 +330,15 @@ pub enum SubstructureFields<'a> {\n /// Combine the values of all the fields together. The last argument is\n /// all the fields of all the structures.\n pub type CombineSubstructureFunc<'a> =\n-    Box<FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n /// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n /// holding the variant index value for each of the `Self` arguments.  The\n /// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    Box<FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n                                 -> RefCell<CombineSubstructureFunc<'a>> {\n@@ -398,15 +398,15 @@ impl<'a> TraitDef<'a> {\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n                   item: &'a Annotatable,\n-                  push: &mut FnMut(Annotatable)) {\n+                  push: &mut dyn FnMut(Annotatable)) {\n         self.expand_ext(cx, mitem, item, push, false);\n     }\n \n     pub fn expand_ext(self,\n                       cx: &mut ExtCtxt,\n                       mitem: &ast::MetaItem,\n                       item: &'a Annotatable,\n-                      push: &mut FnMut(Annotatable),\n+                      push: &mut dyn FnMut(Annotatable),\n                       from_scratch: bool) {\n         match *item {\n             Annotatable::Item(ref item) => {"}, {"sha": "7d22998487ba7598010c5996c677e03150b02a93", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -22,7 +22,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n-                            push: &mut FnMut(Annotatable)) {\n+                            push: &mut dyn FnMut(Annotatable)) {\n \n     let path = Path::new_(pathvec_std!(cx, hash::Hash), None, vec![], PathKind::Std);\n "}, {"sha": "2f5e42d2f7b17f6d70be355adea003a2c34f953d", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -72,7 +72,7 @@ macro_rules! derive_traits {\n             }\n         }\n \n-        pub fn register_builtin_derives(resolver: &mut Resolver) {\n+        pub fn register_builtin_derives(resolver: &mut dyn Resolver) {\n             $(\n                 resolver.add_builtin(\n                     ast::Ident::with_empty_ctxt(Symbol::intern($name)),"}, {"sha": "3c34bf496da594a460022f81773d3291755299fe", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -26,7 +26,7 @@ use std::env;\n pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n         None => return DummyResult::expr(sp),\n         Some(v) => v,\n@@ -57,7 +57,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'cx> {\n+                       -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");"}, {"sha": "8587d11b2278650fe2547e3e6a3ebd0076421821", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -679,7 +679,7 @@ impl<'a, 'b> Context<'a, 'b> {\n pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n                                mut sp: Span,\n                                tts: &[tokenstream::TokenTree])\n-                               -> Box<base::MacResult + 'cx> {\n+                               -> Box<dyn base::MacResult + 'cx> {\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, names)) => {"}, {"sha": "40ecd6e1519c3f91584731673a5205ba43aea758", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -34,7 +34,7 @@ pub const MACRO: &'static str = \"global_asm\";\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree]) -> Box<base::MacResult + 'cx> {\n+                              tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_global_asm() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        MACRO,"}, {"sha": "bdf7a8d704042bd92c4e39f1489fa38cde56bc19", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -10,6 +10,8 @@\n \n //! Syntax extensions in the Rust compiler.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -59,7 +61,7 @@ use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension};\n use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n \n-pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n+pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n                          enable_quotes: bool) {\n     deriving::register_builtin_derives(resolver);"}, {"sha": "7b76b1e8914684a292bc0947dad5a796eff6cbf0", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -17,7 +17,7 @@ use syntax_pos;\n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               sp: syntax_pos::Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_log_syntax() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"log_syntax\","}, {"sha": "85aa84acc4221f71279c51be50294cad20257a33", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -55,7 +55,7 @@ struct CollectProcMacros<'a> {\n }\n \n pub fn modify(sess: &ParseSess,\n-              resolver: &mut ::syntax::ext::base::Resolver,\n+              resolver: &mut dyn (::syntax::ext::base::Resolver),\n               mut krate: ast::Crate,\n               is_proc_macro_crate: bool,\n               is_test_crate: bool,\n@@ -200,8 +200,8 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n-        if let Some(_) = attr.meta_item_list() {\n-            self.handler.span_err(attr.span, \"`#[proc_macro_attribute]` attribute\n+        if !attr.is_word() {\n+            self.handler.span_err(attr.span, \"`#[proc_macro_attribute]` attribute \\\n                 does not take any arguments\");\n             return;\n         }\n@@ -223,8 +223,8 @@ impl<'a> CollectProcMacros<'a> {\n     }\n \n     fn collect_bang_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n-        if let Some(_) = attr.meta_item_list() {\n-            self.handler.span_err(attr.span, \"`#[proc_macro]` attribute\n+        if !attr.is_word() {\n+            self.handler.span_err(attr.span, \"`#[proc_macro]` attribute \\\n                 does not take any arguments\");\n             return;\n         }"}, {"sha": "256b525b8bea636f40dc98b745c147c8bc10db5d", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -18,7 +18,7 @@ use syntax::tokenstream::TokenTree;\n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[TokenTree])\n-                           -> Box<base::MacResult + 'static> {\n+                           -> Box<dyn base::MacResult + 'static> {\n     if !cx.ecfg.enable_trace_macros() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"trace_macros\","}, {"sha": "c06f98ed5ff4653c5dee14d9b708eddb0e2a4c62", "filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.rs?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n+pub fn a(a: TokenStream) -> TokenStream { a }\n+\n+#[proc_macro()] //~ ERROR: does not take any arguments\n+pub fn c(a: TokenStream) -> TokenStream { a }\n+\n+#[proc_macro(x)] //~ ERROR: does not take any arguments\n+pub fn d(a: TokenStream) -> TokenStream { a }\n+\n+#[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n+pub fn e(_: TokenStream, a: TokenStream) -> TokenStream { a }\n+\n+#[proc_macro_attribute()] //~ ERROR: does not take any arguments\n+pub fn g(_: TokenStream, a: TokenStream) -> TokenStream { a }\n+\n+#[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n+pub fn h(_: TokenStream, a: TokenStream) -> TokenStream { a }"}, {"sha": "c480bcb5df982d7a12fdb88131bb4b2773595cd1", "filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Finvalid-attributes.stderr?ref=7db82ccd765cbfe55c3d8a2c434bc6f9b986843d", "patch": "@@ -0,0 +1,38 @@\n+error: `#[proc_macro]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:20:1\n+   |\n+LL | #[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[proc_macro]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:23:1\n+   |\n+LL | #[proc_macro()] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `#[proc_macro]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:26:1\n+   |\n+LL | #[proc_macro(x)] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: `#[proc_macro_attribute]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:29:1\n+   |\n+LL | #[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[proc_macro_attribute]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:32:1\n+   |\n+LL | #[proc_macro_attribute()] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[proc_macro_attribute]` attribute does not take any arguments\n+  --> $DIR/invalid-attributes.rs:35:1\n+   |\n+LL | #[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}