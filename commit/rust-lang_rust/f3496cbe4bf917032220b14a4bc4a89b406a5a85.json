{"sha": "f3496cbe4bf917032220b14a4bc4a89b406a5a85", "node_id": "C_kwDOAAsO6NoAKGYzNDk2Y2JlNGJmOTE3MDMyMjIwYjE0YTRiYzRhODliNDA2YTVhODU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T11:44:55Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-11T11:48:56Z"}, "message": "require level and colon in `//~` style comments", "tree": {"sha": "8556fc8e68886d632dac90aeb6f112c38b5f6000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8556fc8e68886d632dac90aeb6f112c38b5f6000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3496cbe4bf917032220b14a4bc4a89b406a5a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3496cbe4bf917032220b14a4bc4a89b406a5a85", "html_url": "https://github.com/rust-lang/rust/commit/f3496cbe4bf917032220b14a4bc4a89b406a5a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3496cbe4bf917032220b14a4bc4a89b406a5a85/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d115cd75bc5616dfbe97f7a5935ad9c46d89eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d115cd75bc5616dfbe97f7a5935ad9c46d89eb", "html_url": "https://github.com/rust-lang/rust/commit/97d115cd75bc5616dfbe97f7a5935ad9c46d89eb"}], "stats": {"total": 734, "additions": 348, "deletions": 386}, "files": [{"sha": "3ad56da2c2fffcadb17acd51b4c4e492e019d072", "filename": "tests/fail/alloc/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Falloc%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Falloc%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-change-alloc.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     unsafe {\n         let x = alloc(Layout::from_size_align_unchecked(1, 1));\n         let _y = realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n-        let _z = *x; //~ ERROR dereferenced after this allocation got freed\n+        let _z = *x; //~ ERROR: dereferenced after this allocation got freed\n     }\n }"}, {"sha": "97a70103e646166e6dd6673401f67da490e3d496", "filename": "tests/fail/backtrace/bad-backtrace-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-decl.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let frames = unsafe { miri_get_backtrace(0) };\n     for frame in frames.into_iter() {\n         unsafe {\n-            miri_resolve_frame(*frame, 0); //~ ERROR Undefined Behavior: bad declaration of miri_resolve_frame - should return a struct with 5 fields\n+            miri_resolve_frame(*frame, 0); //~ ERROR: Undefined Behavior: bad declaration of miri_resolve_frame - should return a struct with 5 fields\n         }\n     }\n }"}, {"sha": "a4e186eaa98a42c992c847dc3b45842957a8db8d", "filename": "tests/fail/backtrace/bad-backtrace-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-flags.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_get_backtrace(2, std::ptr::null_mut()); //~ ERROR  unsupported operation: unknown `miri_get_backtrace` flags 2\n+        miri_get_backtrace(2, std::ptr::null_mut()); //~ ERROR:  unsupported operation: unknown `miri_get_backtrace` flags 2\n     }\n }"}, {"sha": "843d0d11873d295e9d959e9301590ef2eebc282f", "filename": "tests/fail/backtrace/bad-backtrace-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_resolve_frame(std::ptr::null_mut(), 0); //~ ERROR null pointer is a dangling pointer\n+        miri_resolve_frame(std::ptr::null_mut(), 0); //~ ERROR: null pointer is a dangling pointer\n     }\n }"}, {"sha": "31e3915f3d64fa478597aa04c2459a7596ebbe9e", "filename": "tests/fail/backtrace/bad-backtrace-resolve-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-flags.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -20,6 +20,6 @@ fn main() {\n         miri_get_backtrace(1, buf.as_mut_ptr());\n \n         // miri_resolve_frame will error from an invalid backtrace before it will from invalid flags\n-        miri_resolve_frame(buf[0], 2); //~ ERROR  unsupported operation: unknown `miri_resolve_frame` flags 2\n+        miri_resolve_frame(buf[0], 2); //~ ERROR:  unsupported operation: unknown `miri_resolve_frame` flags 2\n     }\n }"}, {"sha": "44c3c025043b6c11355ec5070a05c53da3067b75", "filename": "tests/fail/backtrace/bad-backtrace-resolve-names-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         miri_get_backtrace(1, buf.as_mut_ptr());\n \n         // miri_resolve_frame_names will error from an invalid backtrace before it will from invalid flags\n-        miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::null_mut()); //~ ERROR  unsupported operation: unknown `miri_resolve_frame_names` flags 2\n+        miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::null_mut()); //~ ERROR:  unsupported operation: unknown `miri_resolve_frame_names` flags 2\n     }\n }"}, {"sha": "bba74c71a5e8f47addf4a053ee640661a0e68129", "filename": "tests/fail/backtrace/bad-backtrace-size-flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbacktrace%2Fbad-backtrace-size-flags.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_backtrace_size(2); //~ ERROR  unsupported operation: unknown `miri_backtrace_size` flags 2\n+        miri_backtrace_size(2); //~ ERROR:  unsupported operation: unknown `miri_backtrace_size` flags 2\n     }\n }"}, {"sha": "1a4a3b97ea3ff95bba2b65d101e0c543aa3f8940", "filename": "tests/fail/box-cell-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,7 +6,7 @@ use std::cell::Cell;\n \n fn helper(val: Box<Cell<u8>>, ptr: *const Cell<u8>) -> u8 {\n     val.set(10);\n-    unsafe { (*ptr).set(20) }; //~ ERROR does not exist in the borrow stack\n+    unsafe { (*ptr).set(20) }; //~ ERROR: does not exist in the borrow stack\n     val.get()\n }\n "}, {"sha": "2b861e5447b03cfbe40b46bc039a92da19b7bf54", "filename": "tests/fail/branchless-select-i128-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,7 +12,7 @@ fn main() {\n         // However, it drops provenance when transmuting to TwoPtrs, so this is UB.\n         let val = unsafe {\n             transmute::<_, &str>(\n-                //~^ ERROR constructing invalid value: encountered a dangling reference\n+                //~^ ERROR: constructing invalid value: encountered a dangling reference\n                 !mask & transmute::<_, TwoPtrs>(\"false !\")\n                     | mask & transmute::<_, TwoPtrs>(\"true !\"),\n             )"}, {"sha": "fb1d4d958ee6bc3c282f331866db751fa255724e", "filename": "tests/fail/breakpoint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbreakpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fbreakpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbreakpoint.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        core::intrinsics::breakpoint() //~ ERROR Trace/breakpoint trap\n+        core::intrinsics::breakpoint() //~ ERROR: Trace/breakpoint trap\n     };\n }"}, {"sha": "f638e21901dd792ce5a6bde4dded9aae211f9c67", "filename": "tests/fail/concurrency/thread_local_static_dealloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -13,6 +13,6 @@ unsafe impl Send for SendRaw {}\n fn main() {\n     unsafe {\n         let dangling_ptr = std::thread::spawn(|| SendRaw(&TLS as *const u8)).join().unwrap();\n-        let _val = *dangling_ptr.0; //~ ERROR dereferenced after this allocation got freed\n+        let _val = *dangling_ptr.0; //~ ERROR: dereferenced after this allocation got freed\n     }\n }"}, {"sha": "3bd9284c7c8a2d178903a05b089df3fc704060c2", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,7 +10,7 @@ extern crate libc;\n use std::{mem, ptr};\n \n extern \"C-unwind\" fn thread_start(_null: *mut libc::c_void) -> *mut libc::c_void {\n-    //~^ ERROR unwinding past the topmost frame of the stack\n+    //~^ ERROR: unwinding past the topmost frame of the stack\n     panic!()\n }\n "}, {"sha": "4249c1cbf01777a73bf2796578665d517e451a45", "filename": "tests/fail/dangling_pointers/dangling_pointer_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { ptr::addr_of!(*p) }; //~ ERROR dereferenced after this allocation got freed\n+    let x = unsafe { ptr::addr_of!(*p) }; //~ ERROR: dereferenced after this allocation got freed\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "ad2a599b60b48f5010ce8bda1be056a605bebfb2", "filename": "tests/fail/dangling_pointers/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR dereferenced after this allocation got freed\n+    let x = unsafe { *p }; //~ ERROR: dereferenced after this allocation got freed\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "534d7d5f42f32cd39a4f2b98c309efda5bbde217", "filename": "tests/fail/dangling_pointers/dangling_zst_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,5 +7,5 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32 as *const ()\n     };\n-    let _x = unsafe { *p }; //~ ERROR dereferenced after this allocation got freed\n+    let _x = unsafe { *p }; //~ ERROR: dereferenced after this allocation got freed\n }"}, {"sha": "57e95ef19dc9975a962b809b77269ecc8eb89fe1", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = 16usize as *const u32;\n-    let _y = unsafe { &*x as *const u32 }; //~ ERROR is a dangling pointer\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR: is a dangling pointer\n }"}, {"sha": "27040c26dc2125ffe8ba5457fd8c6b2b3011e547", "filename": "tests/fail/dangling_pointers/deref-partially-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let x = (1, 13);\n     let xptr = &x as *const _ as *const (i32, i32, i32);\n-    let val = unsafe { (*xptr).1 }; //~ ERROR pointer to 12 bytes starting at offset 0 is out-of-bounds\n+    let val = unsafe { (*xptr).1 }; //~ ERROR: pointer to 12 bytes starting at offset 0 is out-of-bounds\n     assert_eq!(val, 13);\n }"}, {"sha": "54f353ebebeb1bae3c4d3a1b67d25a3c9fd0bf76", "filename": "tests/fail/dangling_pointers/dyn_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     // That should be UB, as the reference is not fully dereferencable.\n     let ptr: *const SliceWithHead = unsafe { std::mem::transmute((&buf, 4usize)) };\n     // Re-borrow that. This should be UB.\n-    let _ptr = unsafe { &*ptr }; //~ ERROR pointer to 5 bytes starting at offset 0 is out-of-bounds\n+    let _ptr = unsafe { &*ptr }; //~ ERROR: pointer to 5 bytes starting at offset 0 is out-of-bounds\n }"}, {"sha": "a48a3189db2e360ce96da57673c8aa5f5d0ead36", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,5 +4,5 @@\n fn main() {\n     // This pointer *could* be NULL so we cannot load from it, not even at ZST\n     let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *const ();\n-    let _x: () = unsafe { *ptr }; //~ ERROR out-of-bounds\n+    let _x: () = unsafe { *ptr }; //~ ERROR: out-of-bounds\n }"}, {"sha": "449c65d218a020fa28bd804914e29a6479d4e5f3", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n     let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n-    unsafe { *ptr = zst_val }; //~ ERROR out-of-bounds\n+    unsafe { *ptr = zst_val }; //~ ERROR: out-of-bounds\n }"}, {"sha": "a0773c63cf6bfd1db686f02a6be7785109f6de93", "filename": "tests/fail/dangling_pointers/null_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #[allow(deref_nullptr)]\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR null pointer is a dangling pointer\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: null pointer is a dangling pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d6a607c61cbeb97b880376040481844526350e39", "filename": "tests/fail/dangling_pointers/null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,6 @@\n \n #[allow(deref_nullptr)]\n fn main() {\n-    let x: () = unsafe { *std::ptr::null() }; //~ ERROR dereferencing pointer failed: null pointer is a dangling pointer\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR: dereferencing pointer failed: null pointer is a dangling pointer\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "954596f57542e3922714df12f33ab370bdafe9ae", "filename": "tests/fail/dangling_pointers/null_pointer_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,4 +1,4 @@\n #[allow(deref_nullptr)]\n fn main() {\n-    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR null pointer is a dangling pointer\n+    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR: null pointer is a dangling pointer\n }"}, {"sha": "58a64eecace8cafba110e1c7e0b3d4b17f94464c", "filename": "tests/fail/dangling_pointers/out_of_bounds_read1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR out-of-bounds\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: out-of-bounds\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "58a64eecace8cafba110e1c7e0b3d4b17f94464c", "filename": "tests/fail/dangling_pointers/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR out-of-bounds\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR: out-of-bounds\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "1373773f68d59b7ae81585b66eb5bd1f6287d2cb", "filename": "tests/fail/dangling_pointers/stack_temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,7 +8,7 @@ unsafe fn make_ref<'a>(x: *mut i32) -> &'a mut i32 {\n fn main() {\n     unsafe {\n         let x = make_ref(&mut 0); // The temporary storing \"0\" is deallocated at the \";\"!\n-        let val = *x; //~ ERROR dereferenced after this allocation got freed\n+        let val = *x; //~ ERROR: dereferenced after this allocation got freed\n         println!(\"{}\", val);\n     }\n }"}, {"sha": "03113585d14648e65621d203f80dd98edf0286fd", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,7 +10,7 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR is a dangling pointer\n+    unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR: is a dangling pointer\n }\n \n fn main() {"}, {"sha": "9ffc681465504cc4b0891702e8c40cacb0659691", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR is a dangling pointer\n+    let x = unsafe { *p }; //~ ERROR: is a dangling pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "bdd38ea056933482e35cc513ab81c49526db4507", "filename": "tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n             let pointer = &*ptr.0;\n \n             // Note: could also error due to reading uninitialized memory, but the data-race detector triggers first.\n-            *pointer.load(Ordering::Relaxed) //~ ERROR Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>`\n+            *pointer.load(Ordering::Relaxed) //~ ERROR: Data race detected between Read on thread `<unnamed>` and Allocate on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "1322f727e6f0186751ce9089837a7a3f77e5cada", "filename": "tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>`\n+            *pointer.load(Ordering::Relaxed) = 2; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Allocate on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "3cdb9d4a6543e1d40ee8ebaeff168e77e3624c42", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).load(Ordering::SeqCst)\n-            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n+            intrinsics::atomic_load_seqcst(c.0 as *mut usize) //~ ERROR: Data race detected between Atomic Load on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "79f9cceb5c9c6d876894d18eee316a97269432ab", "filename": "tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>`\n+            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Atomic Load on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "6e9f37a9c43bddd0cc029816733dec0f587b630f", "filename": "tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() //~ ERROR Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n+            *atomic_ref.get_mut() //~ ERROR: Data race detected between Read on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "4ab5abd5a3ee22618f742e5979554a8c8c7296cd", "filename": "tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(32, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 32); //~ ERROR Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n+            atomic_store(c.0 as *mut usize, 32); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "4c4ec0865cc90fe3b306ea0a7ec62db58431747c", "filename": "tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             //Equivalent to: (&*c.0).store(64, Ordering::SeqCst)\n-            atomic_store(c.0 as *mut usize, 64); //~ ERROR Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n+            atomic_store(c.0 as *mut usize, 64); //~ ERROR: Data race detected between Atomic Store on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "715c2d44b2607ffcc1d824f6b5de0f5a21731fd5", "filename": "tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             let atomic_ref = &mut *c.0;\n-            *atomic_ref.get_mut() = 32; //~ ERROR Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n+            *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Atomic Store on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "732e89c89907c1e8308f4919563ac6286df238f0", "filename": "tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -35,7 +35,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         })\n     };\n "}, {"sha": "170fa8b7744016deaefc4bf63ff45cfedfcaa027", "filename": "tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     spawn(|| ()).join().unwrap();\n \n     unsafe {\n-        *c.0 = 64; //~ ERROR Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n+        *c.0 = 64; //~ ERROR: Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n     }\n }"}, {"sha": "80a0fe2111ec6467047590e335a3f98e29a4dd5a", "filename": "tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -26,7 +26,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n+                //~^ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "898588a1a0e888e2f4a0d64ad53dece3310d56c0", "filename": "tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n         let j2 = spawn(move || {\n             // Also an error of the form: Data race detected between Read on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n-            *ptr.0 //~ ERROR dereferenced after this allocation got freed\n+            *ptr.0 //~ ERROR: dereferenced after this allocation got freed\n         });\n \n         j1.join().unwrap();"}, {"sha": "475379a02ecfe543f1a0e65e2e95f970f70a9edd", "filename": "tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n+            } //~ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "711b7ba9d4eb7b61dd294d26f8a26adea29b9a06", "filename": "tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -25,7 +25,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             __rust_dealloc(\n-                //~^ ERROR Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n+                //~^ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n                 std::mem::align_of::<usize>(),"}, {"sha": "e7b7d558ed9dfd9a7efdc02cd0030f2095f282ff", "filename": "tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -30,7 +30,7 @@ pub fn main() {\n         let j2 = spawn(move || {\n             // Also an error of the form: Data race detected between Write on thread `<unnamed>` and Deallocate on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n-            *ptr.0 = 2; //~ ERROR dereferenced after this allocation got freed\n+            *ptr.0 = 2; //~ ERROR: dereferenced after this allocation got freed\n         });\n \n         j1.join().unwrap();"}, {"sha": "7f6beb7f32d83edb1790f46fc5446cb8a4b040de", "filename": "tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -36,7 +36,7 @@ pub fn main() {\n                 sleep(Duration::from_millis(200));\n \n                 // Now `stack_var` gets deallocated.\n-            } //~ ERROR Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n+            } //~ ERROR: Data race detected between Deallocate on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "2e9fce198d1d46111465378f7727de0ab48a79ca", "filename": "tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "f41c7a25523e896bf2078c167d0e71c88a9e29c7", "filename": "tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     // The fence is useless, since it did not happen-after the `store` in the other thread.\n     // Hence this is a data race.\n     // Also see https://github.com/rust-lang/miri/issues/2192.\n-    unsafe { V = 2 } //~ERROR Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n+    unsafe { V = 2 } //~ERROR: Data race detected between Write on thread `main` and Write on thread `<unnamed>`\n }"}, {"sha": "e1134669f7821f374d512c65d0d901eecd9d58c3", "filename": "tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Read on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "802e90d222af0b4d12f99f6b08ee600629ef6049", "filename": "tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -43,7 +43,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+            stack_var //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         let j2 = spawn(move || {"}, {"sha": "4238372f21fad2ffa8d38be8c53908ef82d080ea", "filename": "tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "cd11aac95955f986c949010bfbc60875b323344e", "filename": "tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             sleep(Duration::from_millis(500));\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "854ea09f11ebbb17e88d83db2117ff870d85a824", "filename": "tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -38,7 +38,7 @@ pub fn main() {\n \n         let j2 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n-                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "2f7f8986a49e116bd8b9c9f2cbd05f12df119242", "filename": "tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -39,7 +39,7 @@ pub fn main() {\n \n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n-                *c.0 //~ ERROR Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n+                *c.0 //~ ERROR: Data race detected between Read on thread `<unnamed>` and Write on thread `<unnamed>`\n             } else {\n                 0\n             }"}, {"sha": "444c28d50aaf57d56c7a9ca211f8617beaeec303", "filename": "tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -22,4 +22,4 @@ fn race(local: i32) {\n     // Deallocating the local (when `main` returns)\n     // races with the read in the other thread.\n     // Make sure the error points at this function's end, not just the call site.\n-} //~ERROR Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>`\n+} //~ERROR: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>`"}, {"sha": "fae4582e7e4704749bdfe2b5806a52e663dc27c3", "filename": "tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            *c.0 = 64; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n         });\n \n         j1.join().unwrap();"}, {"sha": "4b83413b39224c19157477e2cf7d2ce10fd6ffda", "filename": "tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n \n             sleep(Duration::from_millis(200));\n \n-            stack_var = 1usize; //~ ERROR Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n+            stack_var = 1usize; //~ ERROR: Data race detected between Write on thread `<unnamed>` and Write on thread `<unnamed>`\n \n             // read to silence errors\n             stack_var"}, {"sha": "39629610c6320e8d24e57dfb9453cd3c0e9475af", "filename": "tests/fail/environ-gets-deallocated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fenviron-gets-deallocated.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     let pointer = get_environ();\n     let _x = unsafe { *pointer };\n     std::env::set_var(\"FOO\", \"BAR\");\n-    let _y = unsafe { *pointer }; //~ ERROR dereferenced after this allocation got freed\n+    let _y = unsafe { *pointer }; //~ ERROR: dereferenced after this allocation got freed\n }"}, {"sha": "c35a905035932f619b4e69687393f92b86149149", "filename": "tests/fail/erroneous_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ferroneous_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ferroneous_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ferroneous_const.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,12 +7,12 @@\n \n struct PrintName<T>(T);\n impl<T> PrintName<T> {\n-    const VOID: ! = panic!(); //~ERROR evaluation of `PrintName::<i32>::VOID` failed\n+    const VOID: ! = panic!(); //~ERROR: evaluation of `PrintName::<i32>::VOID` failed\n }\n \n fn no_codegen<T>() {\n     if false {\n-        let _ = PrintName::<T>::VOID; //~ERROR post-monomorphization error\n+        let _ = PrintName::<T>::VOID; //~ERROR: post-monomorphization error\n     }\n }\n fn main() {"}, {"sha": "6628166cfacdf2d478c6be23e569120de0eca0e9", "filename": "tests/fail/erroneous_const2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ferroneous_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ferroneous_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ferroneous_const2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,13 +1,13 @@\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ERROR any use of this value\n-//~|WARN previously accepted\n+//~^ERROR: any use of this value\n+//~|WARN: previously accepted\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391\n fn main() {\n-    println!(\"{}\", FOO); //~ERROR post-monomorphization error\n-    //~|ERROR evaluation of constant value failed\n-    //~|ERROR erroneous constant used\n-    //~|WARN previously accepted\n+    println!(\"{}\", FOO); //~ERROR: post-monomorphization error\n+    //~|ERROR: evaluation of constant value failed\n+    //~|ERROR: erroneous constant used\n+    //~|WARN: previously accepted\n }"}, {"sha": "f8805db8d143917800ef1d05450e1d47c0a1412a", "filename": "tests/fail/extern_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fextern_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fextern_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ extern \"C\" {\n }\n \n fn main() {\n-    let _val = unsafe { std::ptr::addr_of!(FOO) }; //~ ERROR is not supported by Miri\n+    let _val = unsafe { std::ptr::addr_of!(FOO) }; //~ ERROR: is not supported by Miri\n }"}, {"sha": "31c192bf44bea618a7ccee3d2a49fe2cbba939a0", "filename": "tests/fail/extern_static_in_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fextern_static_in_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fextern_static_in_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,5 +7,5 @@ extern \"C\" {\n static X: &'static [u8; 0] = unsafe { &E };\n \n fn main() {\n-    let _val = X; //~ ERROR is not supported by Miri\n+    let _val = X; //~ ERROR: is not supported by Miri\n }"}, {"sha": "dd2787bf40f40dd041faefa734389f6819c5cbce", "filename": "tests/fail/fast_math_both.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_both.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_both.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_both.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        let _x: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN); //~ ERROR `fsub_fast` intrinsic called with non-finite value as both parameters\n+        let _x: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN); //~ ERROR: `fsub_fast` intrinsic called with non-finite value as both parameters\n     }\n }"}, {"sha": "e495498ab2869d03e07c08a5930c02d9fe954468", "filename": "tests/fail/fast_math_first.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_first.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2); //~ ERROR `frem_fast` intrinsic called with non-finite value as first parameter\n+        let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2); //~ ERROR: `frem_fast` intrinsic called with non-finite value as first parameter\n     }\n }"}, {"sha": "408c461077fc5fbec7342a98c7964b44ee682d38", "filename": "tests/fail/fast_math_second.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_second.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffast_math_second.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_second.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n \n fn main() {\n     unsafe {\n-        let _x: f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY); //~ ERROR `fmul_fast` intrinsic called with non-finite value as second parameter\n+        let _x: f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY); //~ ERROR: `fmul_fast` intrinsic called with non-finite value as second parameter\n     }\n }"}, {"sha": "3271722de0f9e63bf58570c645bc5c0bf2677978", "filename": "tests/fail/fs/close_stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,6 +9,6 @@ extern crate libc;\n \n fn main() {\n     unsafe {\n-        libc::close(1); //~ ERROR stdout cannot be closed\n+        libc::close(1); //~ ERROR: stdout cannot be closed\n     }\n }"}, {"sha": "27c66c58eb2f879e639175d232afb2faf60f040a", "filename": "tests/fail/fs/isolated_stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_stdin.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,7 +7,7 @@ extern crate libc;\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {\n-        libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR `read` from stdin not available when isolation is enabled\n+        libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR: `read` from stdin not available when isolation is enabled\n     }\n     Ok(())\n }"}, {"sha": "d78bc9f34d7d3566e7c817d08db0133c916c8658", "filename": "tests/fail/fs/read_from_stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fread_from_stdout.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,7 +8,7 @@ extern crate libc;\n fn main() -> std::io::Result<()> {\n     let mut bytes = [0u8; 512];\n     unsafe {\n-        libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR cannot read from stdout\n+        libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512); //~ ERROR: cannot read from stdout\n     }\n     Ok(())\n }"}, {"sha": "03993db81f576d0916299fec1da3806a559aadae", "filename": "tests/fail/fs/unix_open_missing_required_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,5 +12,5 @@ fn main() {\n fn test_file_open_missing_needed_mode() {\n     let name = b\"missing_arg.txt\\0\";\n     let name_ptr = name.as_ptr().cast::<libc::c_char>();\n-    let _fd = unsafe { libc::open(name_ptr, libc::O_CREAT) }; //~ ERROR Undefined Behavior: incorrect number of arguments for `open` with `O_CREAT`: got 2, expected at least 3\n+    let _fd = unsafe { libc::open(name_ptr, libc::O_CREAT) }; //~ ERROR: Undefined Behavior: incorrect number of arguments for `open` with `O_CREAT`: got 2, expected at least 3\n }"}, {"sha": "78ea0f4a18bd54d8c49a6593728840ece0916b5f", "filename": "tests/fail/fs/write_to_stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,7 +7,7 @@ extern crate libc;\n fn main() -> std::io::Result<()> {\n     let bytes = b\"hello\";\n     unsafe {\n-        libc::write(0, bytes.as_ptr() as *const libc::c_void, 5); //~ ERROR cannot write to stdin\n+        libc::write(0, bytes.as_ptr() as *const libc::c_void, 5); //~ ERROR: cannot write to stdin\n     }\n     Ok(())\n }"}, {"sha": "ffa0443ce507ad80ed401be98ee3db157ea7ea25", "filename": "tests/fail/function_calls/check_arg_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     }\n \n     unsafe {\n-        let _ = malloc(0); //~ ERROR calling a function with ABI C using caller ABI Rust\n+        let _ = malloc(0); //~ ERROR: calling a function with ABI C using caller ABI Rust\n     };\n }"}, {"sha": "967a78bf83187918f3a01de6d31b07af35cac9f9", "filename": "tests/fail/function_calls/check_arg_count_abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,6 +5,6 @@ fn main() {\n \n     unsafe {\n         abort(1);\n-        //~^ ERROR Undefined Behavior: incorrect number of arguments: got 1, expected 0\n+        //~^ ERROR: Undefined Behavior: incorrect number of arguments: got 1, expected 0\n     }\n }"}, {"sha": "223c95ffca46b6ef0c2626bc7ef9b1d8d0749ed5", "filename": "tests/fail/function_calls/check_arg_count_too_few_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     }\n \n     unsafe {\n-        let _ = malloc(); //~ ERROR Undefined Behavior: incorrect number of arguments: got 0, expected 1\n+        let _ = malloc(); //~ ERROR: Undefined Behavior: incorrect number of arguments: got 0, expected 1\n     };\n }"}, {"sha": "7ee9c40bf7a4bb1b3d0e45738f90e2de9315e1ec", "filename": "tests/fail/function_calls/check_arg_count_too_many_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     }\n \n     unsafe {\n-        let _ = malloc(1, 2); //~ ERROR Undefined Behavior: incorrect number of arguments: got 2, expected 1\n+        let _ = malloc(1, 2); //~ ERROR: Undefined Behavior: incorrect number of arguments: got 2, expected 1\n     };\n }"}, {"sha": "883d5ae8096bd7eacd5086ae66ebf38b40086acd", "filename": "tests/fail/function_calls/check_callback_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         // Make sure we check the ABI when Miri itself invokes a function\n         // as part of a shim implementation.\n         std::intrinsics::r#try(\n-            //~^ ERROR calling a function with ABI C using caller ABI Rust\n+            //~^ ERROR: calling a function with ABI C using caller ABI Rust\n             std::mem::transmute::<extern \"C\" fn(*mut u8), _>(try_fn),\n             std::ptr::null_mut(),\n             |_, _| unreachable!(),"}, {"sha": "dbf72b5b61ad932b7bd5792cf1b5623f9ea4f9ae", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     #[cfg(fn_ptr)]\n     unsafe {\n         std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)();\n-        //[fn_ptr]~^ ERROR calling a function with calling convention Rust using calling convention C\n+        //[fn_ptr]~^ ERROR: calling a function with calling convention Rust using calling convention C\n     }\n \n     // `Instance` caching should not suppress ABI check.\n@@ -28,8 +28,8 @@ fn main() {\n         }\n         unsafe {\n             foo();\n-            //[no_cache]~^ ERROR calling a function with calling convention Rust using calling convention C\n-            //[cache]~| ERROR calling a function with calling convention Rust using calling convention C\n+            //[no_cache]~^ ERROR: calling a function with calling convention Rust using calling convention C\n+            //[cache]~| ERROR: calling a function with calling convention Rust using calling convention C\n         }\n     }\n }"}, {"sha": "5f4df7c6a1ef3c9ac635e08fb1ead69049503005", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,5 +11,5 @@ fn main() {\n         fn unwind();\n     }\n     unsafe { unwind() }\n-    //~^ ERROR unwinding past a stack frame that does not allow unwinding\n+    //~^ ERROR: unwinding past a stack frame that does not allow unwinding\n }"}, {"sha": "74f1d2b113100944bfc4031ee01a740f663e137a", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,8 +4,8 @@ error: abnormal termination: the program aborted execution\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n-LL | |     //[definition]~^ ERROR abnormal termination: the program aborted execution\n-LL | |     //[both]~^^ ERROR abnormal termination: the program aborted execution\n+LL | |     //[definition]~^ ERROR: abnormal termination: the program aborted execution\n+LL | |     //[both]~^^ ERROR: abnormal termination: the program aborted execution\n LL | |     panic!();\n LL | | }\n    | |_^ the program aborted execution"}, {"sha": "74f1d2b113100944bfc4031ee01a740f663e137a", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,8 +4,8 @@ error: abnormal termination: the program aborted execution\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n-LL | |     //[definition]~^ ERROR abnormal termination: the program aborted execution\n-LL | |     //[both]~^^ ERROR abnormal termination: the program aborted execution\n+LL | |     //[definition]~^ ERROR: abnormal termination: the program aborted execution\n+LL | |     //[both]~^^ ERROR: abnormal termination: the program aborted execution\n LL | |     panic!();\n LL | | }\n    | |_^ the program aborted execution"}, {"sha": "d9aacdb8aea4e68418e4962fc1a4edff7ab5e0f7", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,8 +4,8 @@\n #[cfg_attr(any(definition, both), rustc_allocator_nounwind)]\n #[no_mangle]\n extern \"C-unwind\" fn nounwind() {\n-    //[definition]~^ ERROR abnormal termination: the program aborted execution\n-    //[both]~^^ ERROR abnormal termination: the program aborted execution\n+    //[definition]~^ ERROR: abnormal termination: the program aborted execution\n+    //[both]~^^ ERROR: abnormal termination: the program aborted execution\n     panic!();\n }\n \n@@ -15,5 +15,5 @@ fn main() {\n         fn nounwind();\n     }\n     unsafe { nounwind() }\n-    //[extern_block]~^ ERROR unwinding past a stack frame that does not allow unwinding\n+    //[extern_block]~^ ERROR: unwinding past a stack frame that does not allow unwinding\n }"}, {"sha": "45ad412e7a55ea23eaa18b01b4b6efa95f73119c", "filename": "tests/fail/function_calls/exported_symbol_clashing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,15 +1,15 @@\n #[no_mangle]\n fn foo() {}\n-//~^ HELP it's first defined here, in crate `exported_symbol_clashing`\n+//~^ HELP: it's first defined here, in crate `exported_symbol_clashing`\n \n #[export_name = \"foo\"]\n fn bar() {}\n-//~^ HELP then it's defined here again, in crate `exported_symbol_clashing`\n+//~^ HELP: then it's defined here again, in crate `exported_symbol_clashing`\n \n fn main() {\n     extern \"Rust\" {\n         fn foo();\n     }\n     unsafe { foo() }\n-    //~^ ERROR multiple definitions of symbol `foo`\n+    //~^ ERROR: multiple definitions of symbol `foo`\n }"}, {"sha": "dffae7adbb9726cb88ca4322cdfd56262112d649", "filename": "tests/fail/function_calls/exported_symbol_shim_clashing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,6 +1,6 @@\n #[no_mangle]\n extern \"C\" fn malloc(_: usize) -> *mut std::ffi::c_void {\n-    //~^ HELP the `malloc` symbol is defined here\n+    //~^ HELP: the `malloc` symbol is defined here\n     unreachable!()\n }\n \n@@ -10,6 +10,6 @@ fn main() {\n     }\n     unsafe {\n         malloc(0);\n-        //~^ ERROR found `malloc` symbol definition that clashes with a built-in shim\n+        //~^ ERROR: found `malloc` symbol definition that clashes with a built-in shim\n     }\n }"}, {"sha": "a108944c5e434d7437b5d300d148af7d6db6d95b", "filename": "tests/fail/function_calls/exported_symbol_wrong_arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     extern \"Rust\" {\n         fn foo(_: i32);\n     }\n-    unsafe { foo(1) } //~ ERROR calling a function with more arguments than it expected\n+    unsafe { foo(1) } //~ ERROR: calling a function with more arguments than it expected\n }"}, {"sha": "e273e354334f821ce282b352fde6bc8099c5258c", "filename": "tests/fail/function_calls/exported_symbol_wrong_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     extern \"C\" {\n         fn FOO();\n     }\n-    unsafe { FOO() } //~ ERROR attempt to call an exported symbol that is not defined as a function\n+    unsafe { FOO() } //~ ERROR: attempt to call an exported symbol that is not defined as a function\n }"}, {"sha": "9815569b607f23645fa474c35d155f3b5a6491be", "filename": "tests/fail/function_pointers/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let b = Box::new(42);\n     let g = unsafe { std::mem::transmute::<&Box<usize>, &fn(i32)>(&b) };\n \n-    (*g)(42) //~ ERROR it does not point to a function\n+    (*g)(42) //~ ERROR: it does not point to a function\n }"}, {"sha": "c0e96a43cc5223c7bbd31ce1ec26a16f00a7e483", "filename": "tests/fail/function_pointers/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     let g = unsafe { std::mem::transmute::<fn(), fn(i32)>(f) };\n \n-    g(42) //~ ERROR calling a function with more arguments than it expected\n+    g(42) //~ ERROR: calling a function with more arguments than it expected\n }"}, {"sha": "20384f0965b82ad27545042cdac5ef691d05e267", "filename": "tests/fail/function_pointers/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     let g = unsafe { std::mem::transmute::<fn((i32, i32)), fn(i32)>(f) };\n \n-    g(42) //~ ERROR calling a function with argument of type (i32, i32) passing data of type i32\n+    g(42) //~ ERROR: calling a function with argument of type (i32, i32) passing data of type i32\n }"}, {"sha": "920fb51abb644caaa12b4e5bda6da8b6e3638c59", "filename": "tests/fail/function_pointers/cast_fn_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     let g = unsafe { std::mem::transmute::<fn((i32, i32)), fn()>(f) };\n \n-    g() //~ ERROR calling a function with fewer arguments than it requires\n+    g() //~ ERROR: calling a function with fewer arguments than it requires\n }"}, {"sha": "f0ea5ccfe0f5a312d0470cbd344349e5a2857575", "filename": "tests/fail/function_pointers/cast_fn_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@ fn main() {\n \n     let g = unsafe { std::mem::transmute::<fn(*const [i32]), fn(*const i32)>(f) };\n \n-    g(&42 as *const i32) //~ ERROR calling a function with argument of type *const [i32] passing data of type *const i32\n+    g(&42 as *const i32) //~ ERROR: calling a function with argument of type *const [i32] passing data of type *const i32\n }"}, {"sha": "0fdab49b94b6fe51948ba2b37aaacf133ed6a0d1", "filename": "tests/fail/function_pointers/cast_fn_ptr5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n \n     let g = unsafe { std::mem::transmute::<fn() -> u32, fn()>(f) };\n \n-    g() //~ ERROR calling a function with return type u32 passing return place of type ()\n+    g() //~ ERROR: calling a function with return type u32 passing return place of type ()\n }"}, {"sha": "dbf8a560fb7af83f8825270710e9e9ee38b425e0", "filename": "tests/fail/function_pointers/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,5 +4,5 @@\n fn main() {\n     let g = unsafe { std::mem::transmute::<usize, fn(i32)>(42) };\n \n-    g(42) //~ ERROR is a dangling pointer\n+    g(42) //~ ERROR: is a dangling pointer\n }"}, {"sha": "f071b63902fee64bb2ac644e5adb9397bc7f888b", "filename": "tests/fail/function_pointers/deref_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,7 +2,7 @@ fn f() {}\n \n fn main() {\n     let x: u8 = unsafe {\n-        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR out-of-bounds\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR: out-of-bounds\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "967933e769b8c13f452493aafc81a2a60a1497fb", "filename": "tests/fail/function_pointers/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR function pointer but it does not point to a function\n+        f() //~ ERROR: function pointer but it does not point to a function\n     }\n }"}, {"sha": "eba0953ac863f444245800a90e5839d491723a3b", "filename": "tests/fail/function_pointers/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let y: *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x: fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR function pointer but it does not point to a function\n+    x(); //~ ERROR: function pointer but it does not point to a function\n }"}, {"sha": "240ae18cc45a632487604899438610d38751990e", "filename": "tests/fail/generator-pinned-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fgenerator-pinned-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fgenerator-pinned-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fgenerator-pinned-moved.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,7 +12,7 @@ fn firstn() -> impl Generator<Yield = u64, Return = ()> {\n         let num = &mut num;\n \n         yield *num;\n-        *num += 1; //~ ERROR dereferenced after this allocation got freed\n+        *num += 1; //~ ERROR: dereferenced after this allocation got freed\n     }\n }\n "}, {"sha": "be06d0a7a554d4abfbef026be7e41216f73e9753", "filename": "tests/fail/intrinsics/assume.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fassume.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR `assume` intrinsic called with `false`\n+        std::intrinsics::assume(x > 42); //~ ERROR: `assume` intrinsic called with `false`\n     }\n }"}, {"sha": "3df881bd43ca42b5c2db1d6bb6d48c3cdee12c60", "filename": "tests/fail/intrinsics/copy_overlapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     unsafe {\n         let a = data.as_mut_ptr();\n         let b = a.wrapping_offset(1) as *mut _;\n-        copy_nonoverlapping(a, b, 2); //~ ERROR copy_nonoverlapping called on overlapping ranges\n+        copy_nonoverlapping(a, b, 2); //~ ERROR: copy_nonoverlapping called on overlapping ranges\n     }\n }"}, {"sha": "281217f06f51633a4ecbe47e48859938486c7c31", "filename": "tests/fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n     unsafe {\n-        copy_nonoverlapping(&data[5], ptr, 0); //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n+        copy_nonoverlapping(&data[5], ptr, 0); //~ ERROR: accessing memory with alignment 1, but alignment 2 is required\n     }\n }"}, {"sha": "c26cd4cadb5390d70a3b7b594084809f4fc3989b", "filename": "tests/fail/intrinsics/ctlz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR `ctlz_nonzero` called on 0\n+        ctlz_nonzero(0u8); //~ ERROR: `ctlz_nonzero` called on 0\n     }\n }"}, {"sha": "25a0501fdd80e3b99ed5002fe38885159350d738", "filename": "tests/fail/intrinsics/cttz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ pub fn main() {\n     unsafe {\n         use crate::rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR `cttz_nonzero` called on 0\n+        cttz_nonzero(0u8); //~ ERROR: `cttz_nonzero` called on 0\n     }\n }"}, {"sha": "78c05c543a8f02a88f742dfe2028ce10ecaea93d", "filename": "tests/fail/intrinsics/div-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ use std::intrinsics::*;\n \n fn main() {\n     unsafe {\n-        let _n = unchecked_div(1i64, 0); //~ERROR dividing by zero\n+        let _n = unchecked_div(1i64, 0); //~ERROR: dividing by zero\n     }\n }"}, {"sha": "3dda9d1090de74e3963a5e6a1ef634252a549b47", "filename": "tests/fail/intrinsics/exact_div1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison by 0\n-    unsafe { std::intrinsics::exact_div(2, 0) }; //~ ERROR divisor of zero\n+    unsafe { std::intrinsics::exact_div(2, 0) }; //~ ERROR: divisor of zero\n }"}, {"sha": "00064fa0b9c11e2bf20052004ec1e1e45f4f8ed3", "filename": "tests/fail/intrinsics/exact_div2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison with a remainder\n-    unsafe { std::intrinsics::exact_div(2u16, 3) }; //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n+    unsafe { std::intrinsics::exact_div(2u16, 3) }; //~ ERROR: 2_u16 cannot be divided by 3_u16 without remainder\n }"}, {"sha": "a61abcd137e1797876520e201dcc45e3212f4e8f", "filename": "tests/fail/intrinsics/exact_div3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // signed divison with a remainder\n-    unsafe { std::intrinsics::exact_div(-19i8, 2) }; //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n+    unsafe { std::intrinsics::exact_div(-19i8, 2) }; //~ ERROR: -19_i8 cannot be divided by 2_i8 without remainder\n }"}, {"sha": "b5b60190b4ece25d0ae6317accaeeccff188a953", "filename": "tests/fail/intrinsics/exact_div4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // divison of MIN by -1\n-    unsafe { std::intrinsics::exact_div(i64::MIN, -1) }; //~ ERROR overflow in signed remainder (dividing MIN by -1)\n+    unsafe { std::intrinsics::exact_div(i64::MIN, -1) }; //~ ERROR: overflow in signed remainder (dividing MIN by -1)\n }"}, {"sha": "1fd5100a97b9fc23d2c4efe5f4faf4eda0eaad8b", "filename": "tests/fail/intrinsics/ptr_offset_from_oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let length = 10;\n     let end_ptr = start_ptr.wrapping_add(length);\n     // Even if the offset is 0, a dangling OOB pointer is not allowed.\n-    unsafe { ptr_offset_from(end_ptr, end_ptr) }; //~ERROR pointer at offset 10 is out-of-bounds\n+    unsafe { ptr_offset_from(end_ptr, end_ptr) }; //~ERROR: pointer at offset 10 is out-of-bounds\n }"}, {"sha": "ac80852e8dcfc254c9a96be7c9f6421b3d411dca", "filename": "tests/fail/intrinsics/rem-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Frem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Frem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Frem-by-zero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ use std::intrinsics::*;\n \n fn main() {\n     unsafe {\n-        let _n = unchecked_rem(3u32, 0); //~ ERROR calculating the remainder with a divisor of zero\n+        let _n = unchecked_rem(3u32, 0); //~ ERROR: calculating the remainder with a divisor of zero\n     }\n }"}, {"sha": "5fa6f69d00593852b6cd311ccb2b73c5757b723c", "filename": "tests/fail/intrinsics/simd-div-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     unsafe {\n         let x = i32x2(1, 1);\n         let y = i32x2(1, 0);\n-        simd_div(x, y); //~ERROR Undefined Behavior: dividing by zero\n+        simd_div(x, y); //~ERROR: Undefined Behavior: dividing by zero\n     }\n }"}, {"sha": "57712b1b836b565fe43a81a409d617d96ab0a20d", "filename": "tests/fail/intrinsics/simd-div-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     unsafe {\n         let x = i32x2(1, i32::MIN);\n         let y = i32x2(1, -1);\n-        simd_div(x, y); //~ERROR Undefined Behavior: overflow in signed division\n+        simd_div(x, y); //~ERROR: Undefined Behavior: overflow in signed division\n     }\n }"}, {"sha": "354f8213120a2db1822b1a1822c9306fa62dbce7", "filename": "tests/fail/intrinsics/simd-reduce-invalid-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,6 +11,6 @@ struct i32x2(i32, i32);\n fn main() {\n     unsafe {\n         let x = i32x2(0, 1);\n-        simd_reduce_any(x); //~ERROR must be all-0-bits or all-1-bits\n+        simd_reduce_any(x); //~ERROR: must be all-0-bits or all-1-bits\n     }\n }"}, {"sha": "625889bb67b571557e7263110b7ed01aa9a31e0a", "filename": "tests/fail/intrinsics/simd-rem-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     unsafe {\n         let x = i32x2(1, 1);\n         let y = i32x2(1, 0);\n-        simd_rem(x, y); //~ERROR Undefined Behavior: calculating the remainder with a divisor of zero\n+        simd_rem(x, y); //~ERROR: Undefined Behavior: calculating the remainder with a divisor of zero\n     }\n }"}, {"sha": "8a3895ac14cf8068bd461e7a9581b5b5631f5b86", "filename": "tests/fail/intrinsics/simd-select-bitmask-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ struct i32x2(i32, i32);\n fn main() {\n     unsafe {\n         let x = i32x2(0, 1);\n-        simd_select_bitmask(0b11111111u8, x, x); //~ERROR bitmask less than 8 bits long must be filled with 0s for the remaining bits\n+        simd_select_bitmask(0b11111111u8, x, x); //~ERROR: bitmask less than 8 bits long must be filled with 0s for the remaining bits\n     }\n }"}, {"sha": "7f7ee3af49516960bcbee4442fe8961c00474673", "filename": "tests/fail/intrinsics/simd-select-invalid-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ struct i32x2(i32, i32);\n fn main() {\n     unsafe {\n         let x = i32x2(0, 1);\n-        simd_select(x, x, x); //~ERROR must be all-0-bits or all-1-bits\n+        simd_select(x, x, x); //~ERROR: must be all-0-bits or all-1-bits\n     }\n }"}, {"sha": "5c517c17b3a4b0fa9eb3732998fbecaf61c0c8b0", "filename": "tests/fail/intrinsics/simd-shl-too-far.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     unsafe {\n         let x = i32x2(1, 1);\n         let y = i32x2(100, 0);\n-        simd_shl(x, y); //~ERROR overflowing shift by 100 in `simd_shl` in SIMD lane 0\n+        simd_shl(x, y); //~ERROR: overflowing shift by 100 in `simd_shl` in SIMD lane 0\n     }\n }"}, {"sha": "5f1475a6778131a89d2f3ea5f8274761b6d7a498", "filename": "tests/fail/intrinsics/simd-shr-too-far.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     unsafe {\n         let x = i32x2(1, 1);\n         let y = i32x2(20, 40);\n-        simd_shr(x, y); //~ERROR overflowing shift by 40 in `simd_shr` in SIMD lane 1\n+        simd_shr(x, y); //~ERROR: overflowing shift by 40 in `simd_shr` in SIMD lane 1\n     }\n }"}, {"sha": "25dbb817fae0dc2b6385ae1ff2970eb6bd6954ed", "filename": "tests/fail/intrinsics/unchecked_add1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_add(40000u16, 30000); //~ ERROR overflow executing `unchecked_add`\n+        std::intrinsics::unchecked_add(40000u16, 30000); //~ ERROR: overflow executing `unchecked_add`\n     }\n }"}, {"sha": "a454f6478059f9a5e8697c96cc84f5f6b201147b", "filename": "tests/fail/intrinsics/unchecked_add2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_add(-30000i16, -8000); //~ ERROR overflow executing `unchecked_add`\n+        std::intrinsics::unchecked_add(-30000i16, -8000); //~ ERROR: overflow executing `unchecked_add`\n     }\n }"}, {"sha": "6706cee30ef54fadbe3c5a469d4512abd1230c10", "filename": "tests/fail/intrinsics/unchecked_div1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN/-1 cannot be represented\n     unsafe {\n-        std::intrinsics::unchecked_div(i16::MIN, -1); //~ ERROR overflow in signed division (dividing MIN by -1)\n+        std::intrinsics::unchecked_div(i16::MIN, -1); //~ ERROR: overflow in signed division (dividing MIN by -1)\n     }\n }"}, {"sha": "514eb60602da3b2d27af07002e9212fe1586ed34", "filename": "tests/fail/intrinsics/unchecked_mul1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_mul(300u16, 250u16); //~ ERROR overflow executing `unchecked_mul`\n+        std::intrinsics::unchecked_mul(300u16, 250u16); //~ ERROR: overflow executing `unchecked_mul`\n     }\n }"}, {"sha": "e103c1e7ad179aedfb245256858b1dbecdaf5828", "filename": "tests/fail/intrinsics/unchecked_mul2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_mul(1_000_000_000i32, -4); //~ ERROR overflow executing `unchecked_mul`\n+        std::intrinsics::unchecked_mul(1_000_000_000i32, -4); //~ ERROR: overflow executing `unchecked_mul`\n     }\n }"}, {"sha": "e99f88edc86352ca7d20b15dd96c03f73c55357a", "filename": "tests/fail/intrinsics/unchecked_sub1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_sub(14u32, 22); //~ ERROR overflow executing `unchecked_sub`\n+        std::intrinsics::unchecked_sub(14u32, 22); //~ ERROR: overflow executing `unchecked_sub`\n     }\n }"}, {"sha": "f83f6843c9ecdaf1114f14c095d6e77f95e8ad29", "filename": "tests/fail/intrinsics/unchecked_sub2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_sub(30000i16, -7000); //~ ERROR overflow executing `unchecked_sub`\n+        std::intrinsics::unchecked_sub(30000i16, -7000); //~ ERROR: overflow executing `unchecked_sub`\n     }\n }"}, {"sha": "2f46c820fb73bb3ce3dd826c08721b1d4e4684ae", "filename": "tests/fail/intrinsics/write_bytes_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR memory access failed: null pointer is a dangling pointer\n+    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR: memory access failed: null pointer is a dangling pointer\n }"}, {"sha": "525f8831c1c0073ac8131877db1d2ad1601ff311", "filename": "tests/fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_bool.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    let _x = b == std::hint::black_box(true); //~ ERROR interpreting an invalid 8-bit value as a bool\n+    let _x = b == std::hint::black_box(true); //~ ERROR: interpreting an invalid 8-bit value as a bool\n }"}, {"sha": "699248229445f05dc4c9f0d63850cafdb7536f3c", "filename": "tests/fail/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_char.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let c = 0xFFFFFFu32;\n     assert!(std::char::from_u32(c).is_none());\n     let c = unsafe { std::mem::transmute::<u32, char>(c) };\n-    let _x = c == 'x'; //~ ERROR interpreting an invalid 32-bit value as a char\n+    let _x = c == 'x'; //~ ERROR: interpreting an invalid 32-bit value as a char\n }"}, {"sha": "4f76f8b6d9488098f8093111d761d3e7fce22ebe", "filename": "tests/fail/invalid_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Finvalid_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_int.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,5 +4,5 @@\n \n fn main() {\n     let i = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() };\n-    let _x = i + 0; //~ ERROR this operation requires initialized memory\n+    let _x = i + 0; //~ ERROR: this operation requires initialized memory\n }"}, {"sha": "abf627bb2a7677cc8afcd5803e7cad6582c657de", "filename": "tests/fail/issue-miri-1112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fissue-miri-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fissue-miri-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-1112.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -28,7 +28,7 @@ impl FunnyPointer {\n             data: data as *const _ as *const (),\n             vtable: ptr as *const _ as *const (),\n         };\n-        let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj); //~ ERROR invalid drop function pointer in vtable\n+        let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj); //~ ERROR: invalid drop function pointer in vtable\n         &*obj\n     }\n }"}, {"sha": "2783ebd155ff5d79e5b6bda54dcb7e3e331b13ba", "filename": "tests/fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmodifying_constants.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42; //~ ERROR read-only\n+    *y = 42; //~ ERROR: read-only\n     assert_eq!(*x, 42);\n }"}, {"sha": "f6d3dc790bf0068ae37f0e7ff62156c7e93d0ae6", "filename": "tests/fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_say_never.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,7 +7,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR entering unreachable code\n+        *(y as *const _ as *const !) //~ ERROR: entering unreachable code\n     };\n     f(x)\n }"}, {"sha": "de723433dc283e969b5772cf175cc0ac0a37c2d9", "filename": "tests/fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_humans.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ struct Human;\n \n fn main() {\n     let _x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR transmuting to uninhabited\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR: transmuting to uninhabited\n     };\n }"}, {"sha": "19473e9ac2141c93b42a012d746f98eb03227c69", "filename": "tests/fail/never_transmute_void.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_void.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,6 @@\n // This should fail even without validation\n //@compile-flags: -Zmiri-disable-validation\n+//@require-annotations-for-level: ERROR\n \n #![feature(never_type)]\n #![allow(unused, invalid_value)]\n@@ -9,11 +10,11 @@ mod m {\n     pub struct Void(VoidI);\n \n     pub fn f(v: Void) -> ! {\n-        match v.0 {} //~ ERROR entering unreachable code\n+        match v.0 {} //~ ERROR: entering unreachable code\n     }\n }\n \n fn main() {\n     let v = unsafe { std::mem::transmute::<(), m::Void>(()) };\n-    m::f(v); //~ inside `main`\n+    m::f(v); //~ NOTE: inside `main`\n }"}, {"sha": "4b0ae60b101012b82745a6121a348c78dc90881c", "filename": "tests/fail/panic/bad_miri_start_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ extern \"C\" {\n \n fn main() {\n     unsafe { miri_start_panic(&mut 0) }\n-    //~^ ERROR unwinding past a stack frame that does not allow unwinding\n+    //~^ ERROR: unwinding past a stack frame that does not allow unwinding\n }"}, {"sha": "c21fa85a904390f740ac2959a41a05a6e6027fbb", "filename": "tests/fail/panic/unwind_panic_abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_start_panic(&mut 0); //~ ERROR unwinding past a stack frame that does not allow unwinding\n+        miri_start_panic(&mut 0); //~ ERROR: unwinding past a stack frame that does not allow unwinding\n     }\n }"}, {"sha": "63f0649b8ed3e4ea8b61abdfeac9aeab7874bd04", "filename": "tests/fail/pointer_partial_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpointer_partial_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fpointer_partial_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR this operation requires initialized memory\n+    let x = *p; //~ ERROR: this operation requires initialized memory\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "abcfc060e52bc273789a8d7fc4c268c2cc85db3f", "filename": "tests/fail/provenance/provenance_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -13,7 +13,7 @@ unsafe fn deref(left: *const u8, right: *const u8) {\n         // The compiler is allowed to replace `left_int` by `right_int` here...\n         let left_ptr: *const u8 = mem::transmute(left_int);\n         // ...which however means here it could be dereferencing the wrong pointer.\n-        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n+        let _val = *left_ptr; //~ERROR: dereferencing pointer failed\n     }\n }\n "}, {"sha": "dd8d52b2d2e2475691adaa2840a2bde199ae3cae", "filename": "tests/fail/provenance/ptr_int_unexposed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let x_usize: usize = x_ptr.addr();\n     // Cast back an address that did *not* get exposed.\n     let ptr = std::ptr::from_exposed_addr::<i32>(x_usize);\n-    assert_eq!(unsafe { *ptr }, 3); //~ ERROR Undefined Behavior: dereferencing pointer failed\n+    assert_eq!(unsafe { *ptr }, 3); //~ ERROR: Undefined Behavior: dereferencing pointer failed\n }"}, {"sha": "d7d32d83e077102dadeaa287f474885a4b6e858d", "filename": "tests/fail/provenance/ptr_invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fptr_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fptr_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let x = 42;\n     let xptr = &x as *const i32;\n     let xptr_invalid = std::ptr::invalid::<i32>(xptr.expose_addr());\n-    let _val = unsafe { *xptr_invalid }; //~ ERROR is a dangling pointer\n+    let _val = unsafe { *xptr_invalid }; //~ ERROR: is a dangling pointer\n }"}, {"sha": "0016e78792540da1f1176a1afbe4714a54f74666", "filename": "tests/fail/provenance/strict_provenance_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let addr = &0 as *const i32 as usize;\n-    let _ptr = addr as *const i32; //~ ERROR integer-to-pointer casts and `ptr::from_exposed_addr` are not supported\n+    let _ptr = addr as *const i32; //~ ERROR: integer-to-pointer casts and `ptr::from_exposed_addr` are not supported\n }"}, {"sha": "6aea1870748ccd1d0754e6d01b67fae5da24776d", "filename": "tests/fail/rc_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Frc_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Frc_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Frc_as_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     drop(strong);\n     // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n     // undefined behaviour.\n-    assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) }); //~ ERROR dereferenced after this allocation got freed\n+    assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) }); //~ ERROR: dereferenced after this allocation got freed\n }"}, {"sha": "a8cdb11f40baf0884fbf113380b895bfb634e3f5", "filename": "tests/fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Freading_half_a_pointer.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,6 +24,6 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR unable to turn pointer into raw bytes\n+        let _x = *d_alias; //~ ERROR: unable to turn pointer into raw bytes\n     }\n }"}, {"sha": "7fc73bf365d5e09eec913a225b7ca694d64fb8f6", "filename": "tests/fail/rustc-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Frustc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Frustc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Frustc-error.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,4 +1,4 @@\n // Make sure we exit with non-0 status code when the program fails to build.\n fn main() {\n-    println(\"Hello, world!\"); //~ ERROR expected function, found macro\n+    println(\"Hello, world!\"); //~ ERROR: expected function, found macro\n }"}, {"sha": "383df286d4c851e9be6236caeba4e7c1c2f3264c", "filename": "tests/fail/shim_arg_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fshim_arg_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fshim_arg_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshim_arg_size.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     }\n \n     unsafe {\n-        let _p1 = malloc(42); //~ ERROR Undefined Behavior: scalar size mismatch\n+        let _p1 = malloc(42); //~ ERROR: Undefined Behavior: scalar size mismatch\n     };\n }"}, {"sha": "dfadeec6c9e91318c188aabe15f6e99f28fc175a", "filename": "tests/fail/stacked_borrows/alias_through_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     retarget(&mut target_alias, target);\n     // now `target_alias` points to the same thing as `target`\n     *target = 13;\n-    let _val = *target_alias; //~ ERROR borrow stack\n+    let _val = *target_alias; //~ ERROR: borrow stack\n }"}, {"sha": "14a27d8e9dd65e37ea608548d96a89fe573a74d7", "filename": "tests/fail/stacked_borrows/aliasing_mut1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &mut i32, _y: &mut i32) {} //~ ERROR protect\n+pub fn safe(_x: &mut i32, _y: &mut i32) {} //~ ERROR: protect\n \n fn main() {\n     let mut x = 0;"}, {"sha": "84d901f83bbcc7603b212f9e8d1c70975c7b3127", "filename": "tests/fail/stacked_borrows/aliasing_mut2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &i32, _y: &mut i32) {} //~ ERROR protect\n+pub fn safe(_x: &i32, _y: &mut i32) {} //~ ERROR: protect\n \n fn main() {\n     let mut x = 0;"}, {"sha": "f1ba06b6e4f7af48f2130d932a3472c8d48f5cde", "filename": "tests/fail/stacked_borrows/aliasing_mut3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,6 +1,6 @@\n use std::mem;\n \n-pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR borrow stack\n+pub fn safe(_x: &mut i32, _y: &i32) {} //~ ERROR: borrow stack\n \n fn main() {\n     let mut x = 0;"}, {"sha": "52081b56223da7048957f03f7d29e205a6c9b9b6", "filename": "tests/fail/stacked_borrows/aliasing_mut4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,7 +2,7 @@ use std::cell::Cell;\n use std::mem;\n \n // Make sure &mut UnsafeCell also is exclusive\n-pub fn safe(_x: &i32, _y: &mut Cell<i32>) {} //~ ERROR protect\n+pub fn safe(_x: &i32, _y: &mut Cell<i32>) {} //~ ERROR: protect\n \n fn main() {\n     let mut x = 0;"}, {"sha": "ce7ff8f9e2aad00b8411424d0527a7ddccc355bb", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ fn unknown_code_1(x: &i32) {\n \n fn unknown_code_2() {\n     unsafe {\n-        *LEAK = 7; //~ ERROR borrow stack\n+        *LEAK = 7; //~ ERROR: borrow stack\n     }\n }\n "}, {"sha": "5eeec933c7c86bf381b378ee68d5a7ce44bea0a4", "filename": "tests/fail/stacked_borrows/buggy_as_mut_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let v1 = safe::as_mut_slice(&v);\n     let _v2 = safe::as_mut_slice(&v);\n     v1[1] = 5;\n-    //~^ ERROR borrow stack\n+    //~^ ERROR: borrow stack\n }"}, {"sha": "92380a4bf4967bd5732b41392d4181b0e3e9d5c7", "filename": "tests/fail/stacked_borrows/buggy_split_at_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -19,7 +19,7 @@ mod safe {\n fn main() {\n     let mut array = [1, 2, 3, 4];\n     let (a, b) = safe::split_at_mut(&mut array, 0);\n-    //~^ ERROR borrow stack\n+    //~^ ERROR: borrow stack\n     a[1] = 5;\n     b[1] = 6;\n }"}, {"sha": "2d4e395a42703e0fec1028e2a3d5cb4e4150bdde", "filename": "tests/fail/stacked_borrows/illegal_read4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let xraw = xref1 as *mut _;\n     let xref2 = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n-    let _illegal = *xref2; //~ ERROR borrow stack\n+    let _illegal = *xref2; //~ ERROR: borrow stack\n }"}, {"sha": "49556e618d27b4d602a0b17bc1048d8e77acc7f5", "filename": "tests/fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let _val = *xref; // we can even still use our mutable reference\n     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n     let _val = *xref; // the mutable one is dead and gone\n-    //~^ ERROR borrow stack\n+    //~^ ERROR: borrow stack\n }"}, {"sha": "943a61af4f6ef9d314eac3076046fb8f449695d3", "filename": "tests/fail/stacked_borrows/illegal_read6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         let raw = x as *mut _;\n         let x = &mut *x; // kill `raw`\n         let _y = &*x; // this should not activate `raw` again\n-        let _val = *raw; //~ ERROR borrow stack\n+        let _val = *raw; //~ ERROR: borrow stack\n     }\n }"}, {"sha": "e263e8b70a91d47cbbf0da70df408b9e4965139b", "filename": "tests/fail/stacked_borrows/illegal_read7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -17,6 +17,6 @@ fn main() {\n         // without invalidating `x`.  That would be bad!  It would mean that creating `shr`\n         // leaked `x` to `raw`.\n         let _val = ptr::read(raw);\n-        let _val = *x.get_mut(); //~ ERROR borrow stack\n+        let _val = *x.get_mut(); //~ ERROR: borrow stack\n     }\n }"}, {"sha": "13c12cc75d77b50d639b33dc30d0bfc08d057b26", "filename": "tests/fail/stacked_borrows/illegal_read8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ fn main() {\n         let _val = *y2;\n         let _val = *y1;\n         *y2 += 1;\n-        let _fail = *y1; //~ ERROR borrow stack\n+        let _fail = *y1; //~ ERROR: borrow stack\n     }\n }"}, {"sha": "7abf2f5a9b8fcb7b6b28ca8caaeaccb6dcd01edb", "filename": "tests/fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let xref = &*target;\n     {\n         let x: *mut u32 = xref as *const _ as *mut _;\n-        unsafe { *x = 42 }; //~ ERROR only grants SharedReadOnly permission\n+        unsafe { *x = 42 }; //~ ERROR: only grants SharedReadOnly permission\n     }\n     let _x = *xref;\n }"}, {"sha": "62074bcdbdc14848df69523d905904407fbad6ff", "filename": "tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let target2 = target as *mut _;\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n-    unsafe { *target2 = 13 }; //~ ERROR borrow stack\n+    unsafe { *target2 = 13 }; //~ ERROR: borrow stack\n     let _val = *target;\n }"}, {"sha": "cb143340dedb81b9b9bcd61f987febf28e0d3d8e", "filename": "tests/fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     // Make sure raw ptr with raw tag cannot mutate frozen location without breaking the shared ref.\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n-    unsafe { *ptr = 42 }; //~ ERROR only grants SharedReadOnly permission\n+    unsafe { *ptr = 42 }; //~ ERROR: only grants SharedReadOnly permission\n     let _val = *r#ref;\n }"}, {"sha": "082eebcba1ba908fc57161ea88d7f5a806dbabcd", "filename": "tests/fail/stacked_borrows/illegal_write4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let _ptr = reference as *const _ as *mut i32; // raw ptr, with raw tag\n     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n     // Now we retag, making our ref top-of-stack -- and, in particular, unfreezing.\n-    let _val = *reference; //~ ERROR borrow stack\n+    let _val = *reference; //~ ERROR: borrow stack\n }"}, {"sha": "a27295fbf2cc0acd6e9985d2bb53ecd7974b8d09", "filename": "tests/fail/stacked_borrows/interior_mut1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n         // stack: [c: SharedReadWrite]\n \n-        let _val = *inner_shr.get(); //~ ERROR borrow stack\n+        let _val = *inner_shr.get(); //~ ERROR: borrow stack\n     }\n }"}, {"sha": "ba5eb63084e056891bd10988743d0c84d1e771ab", "filename": "tests/fail/stacked_borrows/interior_mut2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -25,6 +25,6 @@ fn main() {\n         // stack: [c: SharedReadWrite]\n \n         // now this does not work any more\n-        let _val = *inner_shr.get(); //~ ERROR borrow stack\n+        let _val = *inner_shr.get(); //~ ERROR: borrow stack\n     }\n }"}, {"sha": "d0f43510c28ffeb7e4a63d9d64e94900e6bc4e84", "filename": "tests/fail/stacked_borrows/invalidate_against_barrier1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,7 +2,7 @@ fn inner(x: *mut i32, _y: &mut i32) {\n     // If `x` and `y` alias, retagging is fine with this... but we really\n     // shouldn't be allowed to use `x` at all because `y` was assumed to be\n     // unique for the duration of this call.\n-    let _val = unsafe { *x }; //~ ERROR protect\n+    let _val = unsafe { *x }; //~ ERROR: protect\n }\n \n fn main() {"}, {"sha": "f4e767302fd009d555d341219ed3eee1088d2b54", "filename": "tests/fail/stacked_borrows/invalidate_against_barrier2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_barrier2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,7 +2,7 @@ fn inner(x: *mut i32, _y: &i32) {\n     // If `x` and `y` alias, retagging is fine with this... but we really\n     // shouldn't be allowed to write to `x` at all because `y` was assumed to be\n     // immutable for the duration of this call.\n-    unsafe { *x = 0 }; //~ ERROR protect\n+    unsafe { *x = 0 }; //~ ERROR: protect\n }\n \n fn main() {"}, {"sha": "ec69b08a1f8a5e0ac731986493908dc8b0fd26bd", "filename": "tests/fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let xref = unsafe { &mut *xraw };\n     let xref_in_mem = Box::new(xref);\n     let _val = unsafe { *xraw }; // invalidate xref\n-    let _val = *xref_in_mem; //~ ERROR borrow stack\n+    let _val = *xref_in_mem; //~ ERROR: borrow stack\n }"}, {"sha": "6de857acffaa295c1ad61c5c36e53f4778b689f6", "filename": "tests/fail/stacked_borrows/load_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let xref = unsafe { &*xraw };\n     let xref_in_mem = Box::new(xref);\n     unsafe { *xraw = 42 }; // unfreeze\n-    let _val = *xref_in_mem; //~ ERROR borrow stack\n+    let _val = *xref_in_mem; //~ ERROR: borrow stack\n }"}, {"sha": "c2c13855fcb5c1bcf81e6ac7131cf9a51788df3f", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -24,7 +24,7 @@ fn unknown_code_1(x: &i32) {\n \n fn unknown_code_2() {\n     unsafe {\n-        *LEAK = 7; //~ ERROR borrow stack\n+        *LEAK = 7; //~ ERROR: borrow stack\n     }\n }\n "}, {"sha": "980ffad3c160cad3291d7bab73f9212705df6612", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let mut ptr2 = ptr1.clone();\n         let raw1 = ptr1.as_mut();\n         let _raw2 = ptr2.as_mut();\n-        let _val = *raw1; //~ ERROR borrow stack\n+        let _val = *raw1; //~ ERROR: borrow stack\n     }\n }"}, {"sha": "1d4007cf0c4351f498afbbb00e172d05b208825f", "filename": "tests/fail/stacked_borrows/outdated_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     let y: *const i32 = &x;\n     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n \n-    assert_eq!(unsafe { *y }, 1); //~ ERROR borrow stack\n+    assert_eq!(unsafe { *y }, 1); //~ ERROR: borrow stack\n \n     assert_eq!(x, 1);\n }"}, {"sha": "b2e5b8495073a92e5ad70cceebb70af5a9720453", "filename": "tests/fail/stacked_borrows/pass_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &mut *xraw };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    foo(xref); //~ ERROR borrow stack\n+    foo(xref); //~ ERROR: borrow stack\n }"}, {"sha": "539ebb430a3edf7484640dc24228d5767e3ddade", "filename": "tests/fail/stacked_borrows/pass_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let xraw = x as *mut _;\n     let xref = unsafe { &*xraw };\n     unsafe { *xraw = 42 }; // unfreeze\n-    foo(xref); //~ ERROR borrow stack\n+    foo(xref); //~ ERROR: borrow stack\n }"}, {"sha": "839e8b5abdeef5b98c398d8ceb6f26c4116ace0e", "filename": "tests/fail/stacked_borrows/pointer_smuggling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,7 +8,7 @@ fn fun1(x: &mut u8) {\n \n fn fun2() {\n     // Now we use a pointer we are not allowed to use\n-    let _x = unsafe { *PTR }; //~ ERROR borrow stack\n+    let _x = unsafe { *PTR }; //~ ERROR: borrow stack\n }\n \n fn main() {"}, {"sha": "5950e910b8a65fb38eae7cdb7dbe17d1428016e8", "filename": "tests/fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let raw2 = &mut l as *mut _; // invalidates raw1\n     // Without raw pointer tracking, Stacked Borrows cannot distinguish raw1 and raw2, and thus\n     // fails to realize that raw1 should not be used any more.\n-    unsafe { *raw1 = 13 }; //~ ERROR does not exist in the borrow stack\n+    unsafe { *raw1 = 13 }; //~ ERROR: does not exist in the borrow stack\n     unsafe { *raw2 = 13 };\n }"}, {"sha": "acdc7a4ace6971d2f630c544ac2956a39e8b4aa5", "filename": "tests/fail/stacked_borrows/return_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &mut i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &mut (*xraw).1 };\n     let _val = unsafe { *xraw }; // invalidate xref\n-    ret //~ ERROR borrow stack\n+    ret //~ ERROR: borrow stack\n }\n \n fn main() {"}, {"sha": "931b420166e7dbddec88be0784335ffc541832b1", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,7 +10,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&mut i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {} //~ ERROR borrow stack\n+        Some(_x) => {} //~ ERROR: borrow stack\n         None => {}\n     }\n }"}, {"sha": "a595b91c834c830de5865cc8d18d479e4314ed60", "filename": "tests/fail/stacked_borrows/return_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,7 +3,7 @@ fn foo(x: &mut (i32, i32)) -> &i32 {\n     let xraw = x as *mut (i32, i32);\n     let ret = unsafe { &(*xraw).1 };\n     unsafe { *xraw = (42, 23) }; // unfreeze\n-    ret //~ ERROR borrow stack\n+    ret //~ ERROR: borrow stack\n }\n \n fn main() {"}, {"sha": "56af567f6e8f5faee9b08282a6af2557f4858ecc", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,7 +9,7 @@ fn foo(x: &mut (i32, i32)) -> Option<&i32> {\n \n fn main() {\n     match foo(&mut (1, 2)) {\n-        Some(_x) => {} //~ ERROR borrow stack\n+        Some(_x) => {} //~ ERROR: borrow stack\n         None => {}\n     }\n }"}, {"sha": "38f01d7cc20b3b5a7116b5fb246c0d9e041eef08", "filename": "tests/fail/stacked_borrows/return_invalid_shr_tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn foo(x: &mut (i32, i32)) -> (&i32,) {\n }\n \n fn main() {\n-    foo(&mut (1, 2)).0; //~ ERROR borrow stack\n+    foo(&mut (1, 2)).0; //~ ERROR: borrow stack\n }"}, {"sha": "91994d286b95c6b2cc3a1eb1c84d93417be371f1", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         let y: &mut Cell<i32> = mem::transmute(&mut *x); // launder lifetime\n         let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n         shr_rw.set(1);\n-        y.get_mut(); //~ ERROR borrow stack\n+        y.get_mut(); //~ ERROR: borrow stack\n     }\n }"}, {"sha": "ee44ebbb07185762a811ad548356d45b518fdc91", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         let y: &i32 = mem::transmute(&*x.borrow()); // launder lifetime\n         let shr_rw = &*x; // thanks to interior mutability this will be a SharedReadWrite\n         shr_rw.replace(1);\n-        let _val = *y; //~ ERROR borrow stack\n+        let _val = *y; //~ ERROR: borrow stack\n     }\n }"}, {"sha": "11082da6ea3ab3583c3df1ddac6a2ae164922914", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,6 +10,6 @@ fn main() {\n \n fn unknown_code(x: &i32) {\n     unsafe {\n-        *(x as *const i32 as *mut i32) = 7; //~ ERROR only grants SharedReadOnly permission\n+        *(x as *const i32 as *mut i32) = 7; //~ ERROR: only grants SharedReadOnly permission\n     }\n }"}, {"sha": "84d7878b264e5007c89f1f90963eb8459b066da9", "filename": "tests/fail/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,6 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     let _x = unsafe {\n-        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to alloc1 which is read-only\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR: writing to alloc1 which is read-only\n     };\n }"}, {"sha": "c7d6090232016e3952accf6efe23bff44cd2a053", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let _raw: *mut i32 = unsafe { mem::transmute(&mut x[0]) };\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n-    unsafe { *raw = 13 }; //~ ERROR borrow stack\n+    unsafe { *raw = 13 }; //~ ERROR: borrow stack\n }"}, {"sha": "5b808472b4e632dc6c4b5e0dc6c10b75b202d231", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n     unsafe {\n-        *raw = 13; //~ ERROR borrow stack\n+        *raw = 13; //~ ERROR: borrow stack\n     }\n }"}, {"sha": "66641d648d86f6a5c33eec915360a199fc5d2d0d", "filename": "tests/fail/stacked_borrows/unescaped_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@ static ARRAY: [u8; 2] = [0, 1];\n fn main() {\n     let ptr_to_first = &ARRAY[0] as *const u8;\n     // Illegally use this to access the 2nd element.\n-    let _val = unsafe { *ptr_to_first.add(1) }; //~ ERROR borrow stack\n+    let _val = unsafe { *ptr_to_first.add(1) }; //~ ERROR: borrow stack\n }"}, {"sha": "66794e7535a45ac902df6048646e2b369ac91f67", "filename": "tests/fail/static_memory_modification1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,7 +6,7 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR read-only\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR: read-only\n         assert_eq!(X, 6);\n     }\n }"}, {"sha": "d8ae3a57c51e3b1cf31bde1a468afc3494548c76", "filename": "tests/fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR read-only\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR: read-only\n     }\n }"}, {"sha": "b8e2c6470ff2023076959d38ab16bbfe4e5c6b75", "filename": "tests/fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR read-only\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR: read-only\n     }\n }"}, {"sha": "77235d485cde7bd5c781210d73ca0505b7c4f851", "filename": "tests/fail/sync/libc_pthread_cond_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -17,6 +17,6 @@ fn main() {\n         libc::pthread_cond_destroy(cond.as_mut_ptr());\n \n         libc::pthread_cond_destroy(cond.as_mut_ptr());\n-        //~^ ERROR Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+        //~^ ERROR: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n     }\n }"}, {"sha": "3b4522fb046c7e2bc1b6f41c95e70175c3c093c4", "filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         libc::pthread_condattr_destroy(attr.as_mut_ptr());\n \n         libc::pthread_condattr_destroy(attr.as_mut_ptr());\n-        //~^ ERROR Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+        //~^ ERROR: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n     }\n }"}, {"sha": "ade9903b9dd506f23a29faeab337a991ae8fcb9b", "filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, std::ptr::null() as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR Undefined Behavior: trying to acquire already locked default mutex\n+        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR: Undefined Behavior: trying to acquire already locked default mutex\n     }\n }"}, {"sha": "dee5c80e9c405bd212b9d3978bd862cf9f4e79f3", "filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR Undefined Behavior: trying to acquire already locked default mutex\n+        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR: Undefined Behavior: trying to acquire already locked default mutex\n     }\n }"}, {"sha": "a7ef5e44c9da14f638aaeb622d8a24945b5ab976", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        libc::pthread_mutex_destroy(&mut mutex as *mut _); //~ ERROR destroyed a locked mutex\n+        libc::pthread_mutex_destroy(&mut mutex as *mut _); //~ ERROR: destroyed a locked mutex\n     }\n }"}, {"sha": "8f60409b0052b81e8cd75bac4a6bcfba19902c64", "filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -18,6 +18,6 @@ fn main() {\n         libc::pthread_mutex_destroy(mutex.as_mut_ptr());\n \n         libc::pthread_mutex_destroy(mutex.as_mut_ptr());\n-        //~^ ERROR Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+        //~^ ERROR: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n     }\n }"}, {"sha": "45475249befcd994e509c06789fe7c3328b16faa", "filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n-        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR deadlock: the evaluated program deadlocked\n+        libc::pthread_mutex_lock(&mut mutex as *mut _); //~ ERROR: deadlock: the evaluated program deadlocked\n     }\n }"}, {"sha": "da23819ebc31453e7800cc66b4a7dca067900bb8", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n         assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n-        libc::pthread_mutex_unlock(&mut mutex as *mut _); //~ ERROR was not locked\n+        libc::pthread_mutex_unlock(&mut mutex as *mut _); //~ ERROR: was not locked\n     }\n }"}, {"sha": "8fb7cc3ea6030d36cbae64e6bb4e12aa9c5ef485", "filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n \n         libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n-        //~^ ERROR Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+        //~^ ERROR: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n     }\n }"}, {"sha": "0efb6724c1774f5e8761c5f4319fbf77d147ef64", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR destroyed a locked rwlock\n+        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR: destroyed a locked rwlock\n     }\n }"}, {"sha": "11c09c1b13426d6446473fd06070c4fddbb21121", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR destroyed a locked rwlock\n+        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR: destroyed a locked rwlock\n     }\n }"}, {"sha": "9de0383f9daf45901631150d9741e0100923661a", "filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         libc::pthread_rwlock_destroy(&mut lock);\n \n         libc::pthread_rwlock_destroy(&mut lock);\n-        //~^ ERROR Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+        //~^ ERROR: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n     }\n }"}, {"sha": "9d3ca275cb04f4077848d08bb6a9d921d796bb69", "filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ extern crate libc;\n fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n-        libc::pthread_rwlock_unlock(rw.get()); //~ ERROR was not locked\n+        libc::pthread_rwlock_unlock(rw.get()); //~ ERROR: was not locked\n     }\n }"}, {"sha": "bc95f3cb7ad3afe17824bb86342ed6230f4d7d30", "filename": "tests/fail/transmute-pair-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    //~^ ERROR uninitialized\n+    //~^ ERROR: uninitialized\n     if v == 0 {\n         println!(\"it is zero\");\n     }"}, {"sha": "21b272f8ec3985964f33bad52302d2036c3ff207", "filename": "tests/fail/type-too-large.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ftype-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Ftype-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftype-too-large.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let _fat: [u8; (1 << 61) + (1 << 31)];\n-    _fat = [0; (1u64 << 61) as usize + (1u64 << 31) as usize]; //~ ERROR post-monomorphization error\n+    _fat = [0; (1u64 << 61) as usize + (1u64 << 31) as usize]; //~ ERROR: post-monomorphization error\n }"}, {"sha": "9dd652fd8217ae5cf0cf69293dcd1413fe9fcb53", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let zptr = &z as *const _ as *const u64;\n     unsafe {\n         ::std::intrinsics::atomic_load_seqcst(zptr);\n-        //~^ERROR accessing memory with alignment 4, but alignment 8 is required\n+        //~^ERROR: accessing memory with alignment 4, but alignment 8 is required\n     }\n }"}, {"sha": "b943c7db7ccd6f1b4f0f69aa480106aa4a5a19e5", "filename": "tests/fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -19,6 +19,6 @@ fn main() {\n             (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8);\n         }\n         // Re-borrow that. This should be UB.\n-        let _ptr = &*ptr; //~ERROR alignment 256 is required\n+        let _ptr = &*ptr; //~ERROR: alignment 256 is required\n     }\n }"}, {"sha": "da4cadc1c876389ae0cf1730f0194997589e3cf4", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     // Manually make sure the pointer is properly aligned.\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr + 1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2 }; //~ERROR memory with alignment 1, but alignment 2 is required\n+    unsafe { *u16_ptr = 2 }; //~ERROR: memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "752210dca46e892d8d86c6370351670ee47c5cb7", "filename": "tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     for _ in 0..10 {\n         let foo = Foo { x: 42, y: 99 };\n         let p = &foo.x;\n-        let i = *p; //~ERROR alignment 4 is required\n+        let i = *p; //~ERROR: alignment 4 is required\n     }\n }"}, {"sha": "73adc4dc44916d424955960b3b058c6501005d64", "filename": "tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-        let _x = unsafe { *x }; //~ERROR memory with alignment 2, but alignment 4 is required\n+        let _x = unsafe { *x }; //~ERROR: memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "c252944ffb7b73035e2ecd7257c10ea581e0f926", "filename": "tests/fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n     // This must fail because alignment is violated: the offset is not sufficiently aligned.\n     // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ERROR memory with alignment 1, but alignment 4 is required\n+    let _x = unsafe { *x }; //~ERROR: memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "7605dd175a9827252226b4ff47ca6e4dd5d26153", "filename": "tests/fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n         // This must fail because alignment is violated. Test specifically for loading pointers,\n         // which have special code in miri's memory.\n-        let _x = unsafe { *x }; //~ERROR but alignment\n+        let _x = unsafe { *x }; //~ERROR: but alignment\n     }\n }"}, {"sha": "852febe4c04cc34e0d5f082bad38b40f90522950", "filename": "tests/fail/unaligned_pointers/unaligned_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,6 +9,6 @@ fn main() {\n     for _ in 0..10 {\n         let x = [0u8; 4];\n         let ptr = x.as_ptr().wrapping_offset(1).cast::<u16>();\n-        let _val = unsafe { *ptr }; //~ERROR but alignment\n+        let _val = unsafe { *ptr }; //~ERROR: but alignment\n     }\n }"}, {"sha": "e439cf2b03b96ffa548f2abed3ad1f6f627966f4", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,6 +9,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n         // The deref is UB even if we just put the result into a raw pointer.\n-        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR: memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "9076581b55bbc758c6f77785f5ee64c209e70dc1", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ fn main() {\n         let x = i as u8;\n         let x = &x as *const _ as *const [u32; 0];\n         // This must fail because alignment is violated. Test specifically for loading ZST.\n-        let _x = unsafe { *x }; //~ERROR alignment 4 is required\n+        let _x = unsafe { *x }; //~ERROR: alignment 4 is required\n     }\n }"}, {"sha": "f1dace0cff9b1742073c64881cf83e12011b20a0", "filename": "tests/fail/uninit_byte_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funinit_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funinit_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,7 +1,7 @@\n //@compile-flags: -Zmiri-disable-stacked-borrows\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n-    let undef = unsafe { *v.get_unchecked(5) }; //~ ERROR uninitialized\n+    let undef = unsafe { *v.get_unchecked(5) }; //~ ERROR: uninitialized\n     let x = undef + 1;\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "e5a34f4a261c4a19c0434dab8f4fff1390b72327", "filename": "tests/fail/uninit_raw_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funinit_raw_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funinit_raw_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_raw_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _val = unsafe { std::mem::MaybeUninit::<*const u8>::uninit().assume_init() };\n-    //~^ ERROR constructing invalid value at .value: encountered uninitialized raw pointer\n+    //~^ ERROR: constructing invalid value at .value: encountered uninitialized raw pointer\n }"}, {"sha": "ceccae4e3e76fbf5451c7d2e90e2e0d5b582ea9f", "filename": "tests/fail/unsized-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsized-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsized-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsized-local.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         }\n     }\n \n-    let x = *(Box::new(A) as Box<dyn Foo>); //~ERROR unsized locals are not supported\n+    let x = *(Box::new(A) as Box<dyn Foo>); //~ERROR: unsized locals are not supported\n     assert_eq!(x.foo(), format!(\"hello\"));\n \n     // I'm not sure whether we want this to work"}, {"sha": "dfd099e734b99a6b619135bc89905fa81c26dcbb", "filename": "tests/fail/unsupported_foreign_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_foreign_function.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     }\n \n     unsafe {\n-        foo(); //~ ERROR unsupported operation: can't call foreign function: foo\n+        foo(); //~ ERROR: unsupported operation: can't call foreign function: foo\n     }\n }"}, {"sha": "4319dc7c69fe796faed82dba7cf7d9af548cc824", "filename": "tests/fail/unsupported_signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_signal.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,6 +8,6 @@ extern crate libc;\n fn main() {\n     unsafe {\n         libc::signal(libc::SIGPIPE, libc::SIG_IGN);\n-        //~^ ERROR unsupported operation: can't call foreign function: signal\n+        //~^ ERROR: unsupported operation: can't call foreign function: signal\n     }\n }"}, {"sha": "6ab73569c63477c857d0e43297199bd2af09d2ca", "filename": "tests/fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n \n     g(0usize as *const i32)\n-    //~^ ERROR encountered a null reference\n+    //~^ ERROR: encountered a null reference\n }"}, {"sha": "64ddb563be538e50781cd020f88cfcdf25fe60b3", "filename": "tests/fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n \n     let _x = g();\n-    //~^ ERROR encountered a null reference\n+    //~^ ERROR: encountered a null reference\n }"}, {"sha": "6bf2d9295a37095962bd9ba340021a0f3e4a3fc2", "filename": "tests/fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,5 +3,5 @@\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n }"}, {"sha": "77d2358ae7772f168edb02a5eeda0ae96e1839be", "filename": "tests/fail/validity/dangling_ref2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -5,5 +5,5 @@ use std::mem;\n fn main() {\n     let val = 14;\n     let ptr = (&val as *const i32).wrapping_offset(1);\n-    let _x: &i32 = unsafe { mem::transmute(ptr) }; //~ ERROR dangling reference (going beyond the bounds of its allocation)\n+    let _x: &i32 = unsafe { mem::transmute(ptr) }; //~ ERROR: dangling reference (going beyond the bounds of its allocation)\n }"}, {"sha": "8e8a75bd7ec041f21d185a7eb2f0f92aafd3e1d6", "filename": "tests/fail/validity/dangling_ref3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -8,5 +8,5 @@ fn dangling() -> *const u8 {\n }\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(dangling()) }; //~ ERROR dangling reference (use-after-free)\n+    let _x: &i32 = unsafe { mem::transmute(dangling()) }; //~ ERROR: dangling reference (use-after-free)\n }"}, {"sha": "4f11bb2629f5fbbb680e5b021efc47fe3d763ec6", "filename": "tests/fail/validity/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_bool.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR expected a boolean\n+    let _b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR: expected a boolean\n }"}, {"sha": "f90fae3ab92cfbdeff8ca949faae8a6b6354809b", "filename": "tests/fail/validity/invalid_bool_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_bool_uninit.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ union MyUninit {\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR encountered uninitialized bytes, but expected a boolean\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: encountered uninitialized bytes, but expected a boolean\n }"}, {"sha": "568892e5910964c17196da00c1d124c8b31e9e43", "filename": "tests/fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_char.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } {\n-        //~^ ERROR encountered 0xffffffff, but expected a valid unicode scalar value\n+        //~^ ERROR: encountered 0xffffffff, but expected a valid unicode scalar value\n         'a' => true,\n         'b' => false,\n         _ => true,"}, {"sha": "cb82ce746376646b27a8c1f4ac32e949a0d72be8", "filename": "tests/fail/validity/invalid_char_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_char_uninit.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ union MyUninit {\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR encountered uninitialized bytes, but expected a valid unicode scalar value\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: encountered uninitialized bytes, but expected a valid unicode scalar value\n }"}, {"sha": "fa115e1e78e4685abba8f56c1a32d69384df5ed2", "filename": "tests/fail/validity/invalid_enum_tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -7,5 +7,5 @@ pub enum Foo {\n }\n \n fn main() {\n-    let _f = unsafe { std::mem::transmute::<i32, Foo>(42) }; //~ ERROR constructing invalid value at .<enum-tag>: encountered 0x0000002a, but expected a valid enum tag\n+    let _f = unsafe { std::mem::transmute::<i32, Foo>(42) }; //~ ERROR: constructing invalid value at .<enum-tag>: encountered 0x0000002a, but expected a valid enum tag\n }"}, {"sha": "708e0cafa90df624843c6a51933ab02ab24ac7d3", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -268,5 +268,5 @@ union MyUninit {\n }\n \n fn main() {\n-    let _a = unsafe { MyUninit { init: () }.uninit }; //~ ERROR constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected a valid enum tag\n+    let _a = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: constructing invalid value at .<enum-tag>: encountered uninitialized bytes, but expected a valid enum tag\n }"}, {"sha": "8d2045ca4a659590e1dcd6dac5234ed024ee78db", "filename": "tests/fail/validity/invalid_fnptr_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_null.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n #![allow(invalid_value)]\n \n fn main() {\n-    let _b: fn() = unsafe { std::mem::transmute(0usize) }; //~ ERROR encountered a null function pointer\n+    let _b: fn() = unsafe { std::mem::transmute(0usize) }; //~ ERROR: encountered a null function pointer\n }"}, {"sha": "26f958bd64fec641e95fae1a20e82edd82dc0216", "filename": "tests/fail/validity/invalid_fnptr_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_fnptr_uninit.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -6,5 +6,5 @@ union MyUninit {\n }\n \n fn main() {\n-    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR encountered uninitialized bytes\n+    let _b = unsafe { MyUninit { init: () }.uninit }; //~ ERROR: encountered uninitialized bytes\n }"}, {"sha": "384c94a556998f1f74561d1661c0c34a33c18ecf", "filename": "tests/fail/validity/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fnonzero.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -9,5 +9,5 @@ pub(crate) struct NonZero<T>(pub(crate) T);\n \n fn main() {\n     // Make sure that we detect this even when no function call is happening along the way\n-    let _x = Some(unsafe { NonZero(0) }); //~ ERROR encountered 0, but expected something greater or equal to 1\n+    let _x = Some(unsafe { NonZero(0) }); //~ ERROR: encountered 0, but expected something greater or equal to 1\n }"}, {"sha": "c8613d274c81dfcf8eb5aabedee7b52c37f4457c", "filename": "tests/fail/validity/ptr_integer_array_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_array_transmute.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let r = &mut 42;\n-    let _i: [usize; 1] = unsafe { std::mem::transmute(r) }; //~ ERROR encountered a pointer, but expected plain (non-pointer) bytes\n+    let _i: [usize; 1] = unsafe { std::mem::transmute(r) }; //~ ERROR: encountered a pointer, but expected plain (non-pointer) bytes\n }"}, {"sha": "2e6be8b971c6480593a09327c01e589af8c4f40e", "filename": "tests/fail/validity/ref_to_uninhabited1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,7 +3,7 @@ use std::mem::{forget, transmute};\n \n fn main() {\n     unsafe {\n-        let x: Box<!> = transmute(&mut 42); //~ERROR encountered a box pointing to uninhabited type !\n+        let x: Box<!> = transmute(&mut 42); //~ERROR: encountered a box pointing to uninhabited type !\n         forget(x);\n     }\n }"}, {"sha": "8934a06b5d73a7b0519b584964bb7fa995f59be9", "filename": "tests/fail/validity/ref_to_uninhabited2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fref_to_uninhabited2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -4,6 +4,6 @@ enum Void {}\n \n fn main() {\n     unsafe {\n-        let _x: &(i32, Void) = transmute(&42); //~ERROR encountered a reference pointing to uninhabited type (i32, Void)\n+        let _x: &(i32, Void) = transmute(&42); //~ERROR: encountered a reference pointing to uninhabited type (i32, Void)\n     }\n }"}, {"sha": "60b3bdd6cd69a6796617eb9d0e0da3949cea7fbd", "filename": "tests/fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let mut x = Bool::True;\n     evil(&mut x);\n     let y = x; // reading this ought to be enough to trigger validation\n-    //~^ ERROR constructing invalid value at .<enum-tag>: encountered 0x0000002c, but expected a valid enum tag\n+    //~^ ERROR: constructing invalid value at .<enum-tag>: encountered 0x0000002c, but expected a valid enum tag\n     println!(\"{:?}\", y); // make sure it is used (and not optimized away)\n }"}, {"sha": "3e7c14786e351402b95434d4fa362612dbd55461", "filename": "tests/fail/validity/uninit_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_float.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let _val = unsafe { std::mem::MaybeUninit::<f32>::uninit().assume_init() };\n-    //~^ ERROR constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n+    //~^ ERROR: constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n }"}, {"sha": "0a1253b5b96b0bb2b7ab63208a8dfeb836e6a032", "filename": "tests/fail/validity/uninit_integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_integer.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let _val = unsafe { std::mem::MaybeUninit::<usize>::uninit().assume_init() };\n-    //~^ ERROR constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n+    //~^ ERROR: constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n }"}, {"sha": "fa484413784c58c3c577a3f4b916cf40e47ba532", "filename": "tests/fail/validity/uninit_integer_signed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_integer_signed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fvalidity%2Funinit_integer_signed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Funinit_integer_signed.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let _val = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() };\n-    //~^ ERROR constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n+    //~^ ERROR: constructing invalid value at .value: encountered uninitialized bytes, but expected initialized bytes\n }"}, {"sha": "cc81481e4fa4cdf4c90773386f6eba26bd0af641", "filename": "tests/fail/zst1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst1.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     // make sure ZST locals cannot be accessed\n     let x = &() as *const () as *const i8;\n-    let _val = unsafe { *x }; //~ ERROR out-of-bounds\n+    let _val = unsafe { *x }; //~ ERROR: out-of-bounds\n }"}, {"sha": "82470866f179f5c8f275b0ef0a73f6844bdca618", "filename": "tests/fail/zst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -11,5 +11,5 @@ fn main() {\n     let mut x_box = Box::new(1u8);\n     let x = &mut *x_box as *mut _ as *mut [u8; 0];\n     drop(x_box);\n-    unsafe { *x = zst_val }; //~ ERROR dereferenced after this allocation got freed\n+    unsafe { *x = zst_val }; //~ ERROR: dereferenced after this allocation got freed\n }"}, {"sha": "a511f38998feb383d1b84f8064fe977d238ef2e7", "filename": "tests/fail/zst3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/tests%2Ffail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     unsafe { *(x as *mut [u8; 0]) = zst_val };\n     // One byte further is OOB.\n     let x = x.wrapping_offset(1);\n-    unsafe { *(x as *mut [u8; 0]) = zst_val }; //~ ERROR out-of-bounds\n+    unsafe { *(x as *mut [u8; 0]) = zst_val }; //~ ERROR: out-of-bounds\n }"}, {"sha": "b2e71b762beaefa6f97d9ffa11404a28d49e849d", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -215,12 +215,6 @@ pub fn run_tests(config: Config) -> Result<()> {\n                             eprintln!(\"    {level:?}: {message}\")\n                         }\n                     }\n-                    Error::ErrorPatternWithoutErrorAnnotation(path, line) => {\n-                        eprintln!(\n-                            \"Annotation at {}:{line} matched an error diagnostic but did not have `ERROR` before its message\",\n-                            path.display()\n-                        );\n-                    }\n                 }\n                 eprintln!();\n             }\n@@ -280,7 +274,6 @@ enum Error {\n         msgs: Vec<Message>,\n         path: Option<(PathBuf, usize)>,\n     },\n-    ErrorPatternWithoutErrorAnnotation(PathBuf, usize),\n }\n \n type Errors = Vec<Error>;\n@@ -414,27 +407,17 @@ fn check_annotations(\n                 continue;\n             }\n         }\n-        if let Some(level) = level {\n-            // If we found a diagnostic with a level annotation, make sure that all\n-            // diagnostics of that level have annotations, even if we don't end up finding a matching diagnostic\n-            // for this pattern.\n-            lowest_annotation_level = std::cmp::min(lowest_annotation_level, level);\n-        }\n+\n+        // If we found a diagnostic with a level annotation, make sure that all\n+        // diagnostics of that level have annotations, even if we don't end up finding a matching diagnostic\n+        // for this pattern.\n+        lowest_annotation_level = std::cmp::min(lowest_annotation_level, level);\n \n         if let Some(msgs) = messages.get_mut(line) {\n-            let found = msgs.iter().position(|msg| {\n-                msg.message.contains(matched)\n-                    // in case there is no level on the annotation, match any level.\n-                    && level.map_or(true, |level| {\n-                        msg.level == level\n-                    })\n-            });\n+            let found =\n+                msgs.iter().position(|msg| msg.message.contains(matched) && msg.level == level);\n             if let Some(found) = found {\n-                let msg = msgs.remove(found);\n-                if msg.level == Level::Error && level.is_none() {\n-                    errors\n-                        .push(Error::ErrorPatternWithoutErrorAnnotation(path.to_path_buf(), line));\n-                }\n+                msgs.remove(found);\n                 continue;\n             }\n         }\n@@ -443,7 +426,12 @@ fn check_annotations(\n     }\n \n     let filter = |msgs: Vec<Message>| -> Vec<_> {\n-        msgs.into_iter().filter(|msg| msg.level >= lowest_annotation_level).collect()\n+        msgs.into_iter()\n+            .filter(|msg| {\n+                msg.level\n+                    >= comments.require_annotations_for_level.unwrap_or(lowest_annotation_level)\n+            })\n+            .collect()\n     };\n \n     let messages_from_unknown_file_or_line = filter(messages_from_unknown_file_or_line);"}, {"sha": "5b666eef66efbd56cdbb9a0c06c468e9e8938d81", "filename": "ui_test/src/parser.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fparser.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -31,6 +31,9 @@ pub(crate) struct Comments {\n     /// An arbitrary pattern to look for in the stderr.\n     pub error_pattern: Option<(String, usize)>,\n     pub error_matches: Vec<ErrorMatch>,\n+    /// Ignore diagnostics below this level.\n+    /// `None` means pick the lowest level from the `error_pattern`s.\n+    pub require_annotations_for_level: Option<Level>,\n }\n \n /// The conditions used for \"ignore\" and \"only\" filters.\n@@ -46,7 +49,7 @@ pub(crate) enum Condition {\n pub(crate) struct ErrorMatch {\n     pub matched: String,\n     pub revision: Option<String>,\n-    pub level: Option<Level>,\n+    pub level: Level,\n     /// The line where the message was defined, for reporting issues with it (e.g. in case it wasn't found).\n     pub definition_line: usize,\n     /// The line this pattern is expecting to find a message in.\n@@ -188,6 +191,13 @@ impl Comments {\n                 ensure!(!self.stderr_per_bitwidth, \"cannot specifiy stderr-per-bitwidth twice\");\n                 self.stderr_per_bitwidth = true;\n             }\n+            \"require-annotations-for-level\" => {\n+                ensure!(\n+                    self.require_annotations_for_level.is_none(),\n+                    \"cannot specify `require-annotations-for-level` twice\"\n+                );\n+                self.require_annotations_for_level = Some(args.trim().parse()?);\n+            }\n             command => {\n                 if let Some(s) = command.strip_prefix(\"ignore-\") {\n                     // args are ignored (can be sue as comment)\n@@ -231,7 +241,7 @@ impl Comments {\n         }\n     }\n \n-    // parse something like (?P<offset>\\||[\\^]+)? *(?P<level>ERROR|HELP|WARN|NOTE)?:?(?P<text>.*)\n+    // parse something like (?P<offset>\\||[\\^]+)? *(?P<level>ERROR|HELP|WARN|NOTE): (?P<text>.*)\n     fn parse_pattern_inner(\n         &mut self,\n         pattern: &str,\n@@ -255,14 +265,15 @@ impl Comments {\n                 _ => (l, pattern),\n             };\n \n-        let (level, pattern) = match pattern.trim_start().split_once(|c| matches!(c, ':' | ' ')) {\n-            None => (None, pattern),\n-            Some((level, pattern_without_level)) =>\n-                match level.parse().ok() {\n-                    Some(level) => (Some(level), pattern_without_level),\n-                    None => (None, pattern),\n-                },\n-        };\n+        let pattern = pattern.trim_start();\n+        let offset = pattern\n+            .chars()\n+            .position(|c| !matches!(c, 'A'..='Z' | 'a'..='z'))\n+            .ok_or_else(|| eyre!(\"pattern without level\"))?;\n+\n+        let level = pattern[..offset].parse()?;\n+        let pattern = &pattern[offset..];\n+        let pattern = pattern.strip_prefix(':').ok_or_else(|| eyre!(\"no `:` after level found\"))?;\n \n         let matched = pattern.trim().to_string();\n "}, {"sha": "31a9ec2639eb0a2c5b866fb6db3618a094f821f8", "filename": "ui_test/src/parser/tests.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Fparser%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Fparser%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fparser%2Ftests.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -2,68 +2,74 @@ use std::path::Path;\n \n use super::Comments;\n \n-use crate::tests::init;\n-use color_eyre::eyre::{bail, Result};\n-\n #[test]\n-fn parse_simple_comment() -> Result<()> {\n-    init();\n+fn parse_simple_comment() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     println!(\"parsed comments: {:#?}\", comments);\n     assert_eq!(comments.error_matches[0].definition_line, 5);\n     assert_eq!(comments.error_matches[0].revision, None);\n     assert_eq!(\n         comments.error_matches[0].matched,\n         \"encountered a dangling reference (address $HEX is unallocated)\"\n     );\n-    Ok(())\n }\n \n #[test]\n-fn parse_slash_slash_at() -> Result<()> {\n-    init();\n+fn parse_missing_level() {\n+    let s = r\"\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ encountered a dangling reference (address $HEX is unallocated)\n+}\n+    \";\n+    match Comments::parse(Path::new(\"<dummy>\"), s) {\n+        Ok(_) => panic!(\"expected parsing to fail\"),\n+        Err(_) => {}\n+    }\n+}\n+\n+#[test]\n+fn parse_slash_slash_at() {\n     let s = r\"\n //@  error-pattern:  foomp\n use std::mem;\n \n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     println!(\"parsed comments: {:#?}\", comments);\n     assert_eq!(comments.error_pattern, Some((\"foomp\".to_string(), 2)));\n-    Ok(())\n }\n \n #[test]\n-fn parse_slash_slash_at_fail() -> Result<()> {\n-    init();\n+fn parse_slash_slash_at_fail() {\n     let s = r\"\n //@  error-patttern  foomp\n use std::mem;\n \n     \";\n     match Comments::parse(Path::new(\"<dummy>\"), s) {\n-        Ok(_) => bail!(\"expected parsing to fail\"),\n-        Err(_) => Ok(()),\n+        Ok(_) => panic!(\"expected parsing to fail\"),\n+        Err(_) => {}\n     }\n }\n \n #[test]\n-fn missing_colon_fail() -> Result<()> {\n-    init();\n+fn missing_colon_fail() {\n     let s = r\"\n //@stderr-per-bitwidth hello\n use std::mem;\n \n     \";\n     match Comments::parse(Path::new(\"<dummy>\"), s) {\n-        Ok(_) => bail!(\"expected parsing to fail\"),\n-        Err(_) => Ok(()),\n+        Ok(_) => panic!(\"expected parsing to fail\"),\n+        Err(_) => {}\n     }\n }"}, {"sha": "a216731c7556c8632b04d1f42e7e5fa5bb4eb5fd", "filename": "ui_test/src/rustc_stderr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Frustc_stderr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Frustc_stderr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Frustc_stderr.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -3,6 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n+use color_eyre::eyre::{eyre, Error};\n use regex::Regex;\n \n #[derive(serde::Deserialize, Debug)]\n@@ -45,7 +46,7 @@ struct Span {\n }\n \n impl std::str::FromStr for Level {\n-    type Err = String;\n+    type Err = Error;\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"ERROR\" | \"error\" => Ok(Self::Error),\n@@ -54,7 +55,7 @@ impl std::str::FromStr for Level {\n             \"NOTE\" | \"note\" => Ok(Self::Note),\n             \"failure-note\" => Ok(Self::FailureNote),\n             \"error: internal compiler error\" => Ok(Self::Ice),\n-            _ => Err(format!(\"unknown level `{s}`\")),\n+            _ => Err(eyre!(\"unknown level `{s}`\")),\n         }\n     }\n }"}, {"sha": "96c0f362b675d902165eb4c2f8dfdd89709c7682", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 28, "deletions": 73, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3496cbe4bf917032220b14a4bc4a89b406a5a85/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=f3496cbe4bf917032220b14a4bc4a89b406a5a85", "patch": "@@ -20,17 +20,16 @@ fn config() -> Config {\n }\n \n #[test]\n-fn issue_2156() -> Result<()> {\n-    init();\n+fn issue_2156() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n     let path = Path::new(\"$DIR/<dummy>\");\n-    let comments = Comments::parse(path, s)?;\n+    let comments = Comments::parse(path, s).unwrap();\n     let mut errors = vec![];\n     let config = config();\n     let messages = vec![\n@@ -47,22 +46,21 @@ fn main() {\n         [\n             Error::PatternNotFound { definition_line: 5, .. },\n             Error::ErrorsWithoutPattern { path: Some((_, 5)), .. },\n-        ] => Ok(()),\n+        ] => {}\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn find_pattern() -> Result<()> {\n-    init();\n+fn find_pattern() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     let config = config();\n     {\n         let messages = vec![vec![], vec![], vec![], vec![], vec![], vec![\n@@ -139,24 +137,23 @@ fn main() {\n         );\n         match &errors[..] {\n             // Note no `ErrorsWithoutPattern`, because there are no `//~NOTE` in the test file, so we ignore them\n-            [Error::PatternNotFound { definition_line: 5, .. }] => Ok(()),\n+            [Error::PatternNotFound { definition_line: 5, .. }] => {}\n             _ => panic!(\"not the expected error: {:#?}\", errors),\n         }\n     }\n }\n \n #[test]\n-fn duplicate_pattern() -> Result<()> {\n-    init();\n+fn duplicate_pattern() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n-    //~^ ERROR encountered a dangling reference (address 0x10 is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n+    //~^ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -170,22 +167,21 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::PatternNotFound { definition_line: 6, .. }] => Ok(()),\n+        [Error::PatternNotFound { definition_line: 6, .. }] => {}\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_pattern() -> Result<()> {\n-    init();\n+fn missing_pattern() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -203,23 +199,22 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => Ok(()),\n+        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => {}\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_warn_pattern() -> Result<()> {\n-    init();\n+fn missing_warn_pattern() {\n     let s = r\"\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n-    //~^ WARN cake\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n+    //~^ WARN: cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     let config = config();\n     let messages= vec![\n         vec![],\n@@ -247,25 +242,24 @@ fn main() {\n     match &errors[..] {\n         [Error::ErrorsWithoutPattern { path: Some((_, 5)), msgs, .. }] =>\n             match &msgs[..] {\n-                [Message { message, level: Level::Warn }] if message == \"kaboom\" => Ok(()),\n+                [Message { message, level: Level::Warn }] if message == \"kaboom\" => {}\n                 _ => panic!(\"{:#?}\", msgs),\n             },\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_implicit_warn_pattern() -> Result<()> {\n-    init();\n+fn missing_implicit_warn_pattern() {\n     let s = r\"\n use std::mem;\n-\n+//@require-annotations-for-level: ERROR\n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n-    //~^ cake\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR: encountered a dangling reference (address 0x10 is unallocated)\n+    //~^ WARN: cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s).unwrap();\n     let config = config();\n     let messages = vec![\n         vec![],\n@@ -291,46 +285,7 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [] => Ok(()),\n+        [] => {}\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n-\n-#[test]\n-fn implicit_err_pattern() -> Result<()> {\n-    init();\n-    let s = r\"\n-use std::mem;\n-\n-fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ encountered a dangling reference (address 0x10 is unallocated)\n-}\n-    \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n-    let config = config();\n-    let messages = vec![\n-        vec![],\n-        vec![],\n-        vec![],\n-        vec![],\n-        vec![],\n-        vec![\n-            Message {\n-                message: \"Undefined Behavior: type validation failed: encountered a dangling reference (address 0x10 is unallocated)\".to_string(),\n-                level: Level::Error,\n-            },\n-        ],\n-    ];\n-    let mut errors = vec![];\n-    check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n-    match &errors[..] {\n-        [Error::ErrorPatternWithoutErrorAnnotation(_, 5)] => Ok(()),\n-        _ => panic!(\"{:#?}\", errors),\n-    }\n-}\n-\n-/// Call this from every test to initialize eyre only once across all tests.\n-pub fn init() {\n-    static INIT: std::sync::Once = std::sync::Once::new();\n-    INIT.call_once(|| color_eyre::install().unwrap());\n-}"}]}