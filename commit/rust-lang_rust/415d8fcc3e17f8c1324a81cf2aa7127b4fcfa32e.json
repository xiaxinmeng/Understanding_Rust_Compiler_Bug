{"sha": "415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "node_id": "C_kwDOAAsO6NoAKDQxNWQ4ZmNjM2UxN2Y4YzEzMjRhODFjZjJhYTcxMjdiNGZjZmEzMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T02:53:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T02:53:24Z"}, "message": "Auto merge of #103213 - matthiaskrgr:rollup-diloxg3, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101889 (doc: rewrite doc for uint::{carrying_add,borrowing_sub})\n - #102507 (More slice::partition_point examples)\n - #103164 (rustdoc: remove CSS ``@media` (min-width: 701px)`)\n - #103189 (Clean up code-color and headers-color rustdoc GUI tests)\n - #103203 (Retrieve LLVM version from llvm-filecheck binary if it is not set yet)\n - #103204 (Add some more autolabels)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c9dac74fffd4740714579ec188796a375fc66ab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9dac74fffd4740714579ec188796a375fc66ab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "html_url": "https://github.com/rust-lang/rust/commit/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efc90e7381721df57348b61518b15794b75d189", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efc90e7381721df57348b61518b15794b75d189", "html_url": "https://github.com/rust-lang/rust/commit/2efc90e7381721df57348b61518b15794b75d189"}, {"sha": "e0c162ff02b6fea4bee9a3b89aca6751e7a46fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c162ff02b6fea4bee9a3b89aca6751e7a46fa1", "html_url": "https://github.com/rust-lang/rust/commit/e0c162ff02b6fea4bee9a3b89aca6751e7a46fa1"}], "stats": {"total": 423, "additions": 232, "deletions": 191}, "files": [{"sha": "93f65c5c7aaf3a6111abe21c9bfcf3ceee415b62", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -1469,37 +1469,42 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self + rhs + carry` without the ability to overflow.\n+        /// Calculates `self` + `rhs` + `carry` and returns a tuple containing\n+        /// the sum and the output carry.\n         ///\n-        /// Performs \"ternary addition\" which takes in an extra bit to add, and may return an\n-        /// additional bit of overflow. This allows for chaining together multiple additions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary addition\" of two integer operands and a carry-in\n+        /// bit, and returns an output integer and a carry-out bit. This allows\n+        /// chaining together multiple additions to create a wider addition, and\n+        /// can be useful for bignum addition.\n         ///\n         #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n         ///\n-        /// # Examples\n+        /// If the input carry is false, this method is equivalent to\n+        /// [`overflowing_add`](Self::overflowing_add), and the output carry is\n+        /// equal to the overflow flag. Note that although carry and overflow\n+        /// flags are similar for unsigned integers, they are different for\n+        /// signed integers.\n         ///\n-        /// Basic usage\n+        /// # Examples\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (1, true));\")]\n-        #[doc = concat!(\"assert_eq!(\",\n-            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n-            \"(\", stringify!($SelfT), \"::MAX, true));\"\n-        )]\n-        /// ```\n         ///\n-        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        #[doc = concat!(\"//    3  MAX    (a = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        #[doc = concat!(\"// +  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    9    6    (sum = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n         ///\n-        /// ```\n-        /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (3, \", stringify!($SelfT), \"::MAX);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let carry0 = false;\n+        ///\n+        /// let (sum0, carry1) = a0.carrying_add(b0, carry0);\n+        /// assert_eq!(carry1, true);\n+        /// let (sum1, carry2) = a1.carrying_add(b1, carry1);\n+        /// assert_eq!(carry2, false);\n+        ///\n+        /// assert_eq!((sum1, sum0), (9, 6));\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n@@ -1563,22 +1568,35 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self - rhs - borrow` without the ability to overflow.\n+        /// Calculates `self` &minus; `rhs` &minus; `borrow` and returns a tuple\n+        /// containing the difference and the output borrow.\n         ///\n-        /// Performs \"ternary subtraction\" which takes in an extra bit to subtract, and may return\n-        /// an additional bit of overflow. This allows for chaining together multiple subtractions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary subtraction\" by subtracting both an integer\n+        /// operand and a borrow-in bit from `self`, and returns an output\n+        /// integer and a borrow-out bit. This allows chaining together multiple\n+        /// subtractions to create a wider subtraction, and can be useful for\n+        /// bignum subtraction.\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n-        ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, false), (3, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, true), (2, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, false), (\", stringify!($SelfT), \"::MAX, true));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, true), (\", stringify!($SelfT), \"::MAX - 1, true));\")]\n+        ///\n+        #[doc = concat!(\"//    9    6    (a = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n+        #[doc = concat!(\"// -  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    3  MAX    (diff = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        ///\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (9, 6);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let borrow0 = false;\n+        ///\n+        /// let (diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n+        /// assert_eq!(borrow1, true);\n+        /// let (diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n+        /// assert_eq!(borrow2, false);\n+        ///\n+        #[doc = concat!(\"assert_eq!((diff1, diff0), (3, \", stringify!($SelfT), \"::MAX));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}, {"sha": "5f1a05706f205a08a5628ea9ff7341a9b314d5e7", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -2359,6 +2359,28 @@ impl<T> [T] {\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     ///\n+    /// If you want to find that whole *range* of matching items, rather than\n+    /// an arbitrary matching one, that can be done using [`partition_point`]:\n+    /// ```\n+    /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    ///\n+    /// let low = s.partition_point(|x| x < &1);\n+    /// assert_eq!(low, 1);\n+    /// let high = s.partition_point(|x| x <= &1);\n+    /// assert_eq!(high, 5);\n+    /// let r = s.binary_search(&1);\n+    /// assert!((low..high).contains(&r.unwrap()));\n+    ///\n+    /// assert!(s[..low].iter().all(|&x| x < 1));\n+    /// assert!(s[low..high].iter().all(|&x| x == 1));\n+    /// assert!(s[high..].iter().all(|&x| x > 1));\n+    ///\n+    /// // For something not found, the \"range\" of equal items is empty\n+    /// assert_eq!(s.partition_point(|x| x < &11), 9);\n+    /// assert_eq!(s.partition_point(|x| x <= &11), 9);\n+    /// assert_eq!(s.binary_search(&11), Err(9));\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order, consider using [`partition_point`]:\n     ///\n@@ -3787,6 +3809,16 @@ impl<T> [T] {\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n     ///\n+    /// If all elements of the slice match the predicate, including if the slice\n+    /// is empty, then the length of the slice will be returned:\n+    ///\n+    /// ```\n+    /// let a = [2, 4, 8];\n+    /// assert_eq!(a.partition_point(|x| x < &100), a.len());\n+    /// let a: [i32; 0] = [];\n+    /// assert_eq!(a.partition_point(|x| x < &100), 0);\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order:\n     ///"}, {"sha": "7b6f52b0acf69c2ffb717113f9969d5fc2754856", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -437,6 +437,7 @@ img {\n \n .source-sidebar-expanded .source .sidebar {\n \toverflow-y: auto;\n+\twidth: 300px;\n }\n \n .source-sidebar-expanded .source .sidebar > *:not(#sidebar-toggle) {\n@@ -1692,31 +1693,20 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \tdisplay: inline-block;\n }\n \n-/* Media Queries */\n-\n-/*\n-WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY;\n-If you update this line, then you also need to update the line with the same warning\n-in storage.js plus the media query with (max-width: 700px)\n-*/\n-@media (min-width: 701px) {\n-\t/* In case there is no documentation before a code block, we need to add some margin at the top\n-\tto prevent an overlay between the \"collapse toggle\" and the information tooltip.\n-\tHowever, it's not needed with smaller screen width because the doc/code block is always put\n-\t\"one line\" below. */\n-\t.docblock > .example-wrap:first-child .tooltip {\n-\t\tmargin-top: 16px;\n-\t}\n-\n-\t.source-sidebar-expanded .source .sidebar {\n-\t\twidth: 300px;\n-\t}\n+/* In case there is no documentation before a code block, we need to add some margin at the top\n+to prevent an overlay between the \"collapse toggle\" and the information tooltip.\n+However, it's not needed with smaller screen width because the doc/code block is always put\n+\"one line\" below. */\n+.docblock > .example-wrap:first-child .tooltip {\n+\tmargin-top: 16px;\n }\n \n+/* Media Queries */\n+\n /*\n WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n If you update this line, then you also need to update the line with the same warning\n-in storage.js plus the media query with (min-width: 701px)\n+in storage.js\n */\n @media (max-width: 700px) {\n \t/* When linking to an item with an `id` (for instance, by clicking a link in the sidebar,"}, {"sha": "1251d6bfda3527571f8917cf1fb365ee88ee0ff1", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -737,7 +737,7 @@ function loadCss(cssFileName) {\n \n     window.rustdocMobileScrollLock = function() {\n         const mobile_topbar = document.querySelector(\".mobile-topbar\");\n-        if (window.innerWidth < window.RUSTDOC_MOBILE_BREAKPOINT) {\n+        if (window.innerWidth <= window.RUSTDOC_MOBILE_BREAKPOINT) {\n             // This is to keep the scroll position on mobile.\n             oldSidebarScrollPosition = window.scrollY;\n             document.body.style.width = `${document.body.offsetWidth}px`;\n@@ -783,7 +783,7 @@ function loadCss(cssFileName) {\n     }\n \n     window.addEventListener(\"resize\", () => {\n-        if (window.innerWidth >= window.RUSTDOC_MOBILE_BREAKPOINT &&\n+        if (window.innerWidth > window.RUSTDOC_MOBILE_BREAKPOINT &&\n             oldSidebarScrollPosition !== null) {\n             // If the user opens the sidebar in \"mobile\" mode, and then grows the browser window,\n             // we need to switch away from mobile mode and make the main content area scrollable."}, {"sha": "b462a2c50f1452d0441da55ca909504cd738b9e1", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -10,9 +10,9 @@ window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");\n \n // WARNING: RUSTDOC_MOBILE_BREAKPOINT MEDIA QUERY\n-// If you update this line, then you also need to update the two media queries with the same\n+// If you update this line, then you also need to update the media query with the same\n // warning in rustdoc.css\n-window.RUSTDOC_MOBILE_BREAKPOINT = 701;\n+window.RUSTDOC_MOBILE_BREAKPOINT = 700;\n \n const settingsDataset = (function() {\n     const settingsElement = document.getElementById(\"default-settings\");"}, {"sha": "118f04ad6dcba9c32f2bceb6612b9aae8cd11950", "filename": "src/test/rustdoc-gui/code-color.goml", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-color.goml?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -5,26 +5,20 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/fn.foo.html\"\n // If the text isn't displayed, the browser doesn't compute color style correctly...\n show-text: true\n-// Set the theme to dark.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n \n-assert-css: (\".docblock pre > code\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n-assert-css: (\".docblock > p > code\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+define-function: (\n+    \"check-colors\",\n+    (theme, doc_code_color, doc_inline_code_color),\n+    [\n+        // Set the theme.\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        // We reload the page so the local storage settings are being used.\n+        (\"reload\"),\n+        (\"assert-css\", (\".docblock pre > code\", {\"color\": |doc_code_color|}, ALL)),\n+        (\"assert-css\", (\".docblock > p > code\", {\"color\": |doc_inline_code_color|}, ALL)),\n+    ],\n+)\n \n-// Set the theme to ayu.\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n-\n-assert-css: (\".docblock pre > code\", {\"color\": \"rgb(230, 225, 207)\"}, ALL)\n-assert-css: (\".docblock > p > code\", {\"color\": \"rgb(255, 180, 84)\"}, ALL)\n-\n-// Set the theme to light.\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-// We reload the page so the local storage settings are being used.\n-reload:\n-\n-assert-css: (\".docblock pre > code\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n-assert-css: (\".docblock > p > code\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n+call-function: (\"check-colors\", (\"ayu\", \"rgb(230, 225, 207)\", \"rgb(255, 180, 84)\"))\n+call-function: (\"check-colors\", (\"dark\", \"rgb(221, 221, 221)\", \"rgb(221, 221, 221)\"))\n+call-function: (\"check-colors\", (\"light\", \"rgb(0, 0, 0)\", \"rgb(0, 0, 0)\"))"}, {"sha": "c80a49c52f03a3e2af4c82b01c98064071f2acb9", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 63, "deletions": 110, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -1,117 +1,70 @@\n // This test check for headers text and background colors for the different themes.\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n \n-// This is needed so that the text color is computed.\n-show-text: true\n-\n-// Ayu theme\n-local-storage: {\n-    \"rustdoc-theme\": \"ayu\",\n-    \"rustdoc-preferred-dark-theme\": \"ayu\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-reload:\n-\n-assert-css: (\n-    \".impl\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".impl .code-header\",\n-    {\"color\": \"rgb(230, 225, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n+define-function: (\n+    \"check-colors\",\n+    (theme, color, code_header_color, focus_background_color, headings_color),\n+    [\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"),\n+        // This is needed so that the text color is computed.\n+        (\"show-text\", true),\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        (\"assert-css\", (\n+            \".impl\",\n+            {\"color\": |color|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+            ALL,\n+        )),\n+        (\"assert-css\", (\n+            \".impl .code-header\",\n+            {\"color\": |code_header_color|, \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+            ALL,\n+        )),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"),\n+        (\"assert-css\", (\n+            \"#impl-Foo\",\n+            {\"color\": |color|, \"background-color\": |focus_background_color|},\n+        )),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"),\n+        (\"assert-css\", (\n+            \"#method\\.must_use\",\n+            {\"color\": |color|, \"background-color\": |focus_background_color|},\n+            ALL,\n+        )),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"),\n+        (\"assert-css\", (\".small-section-header a\", {\"color\": |color|}, ALL)),\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"),\n+        // We select headings (h2, h3, h...).\n+        (\"assert-css\", (\".docblock > :not(p) > a\", {\"color\": |headings_color|}, ALL)),\n+    ],\n )\n \n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n-assert-css: (\n-    \"#impl-Foo\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"color\": \"rgb(197, 197, 197)\",\n+        \"code_header_color\": \"rgb(230, 225, 207)\",\n+        \"focus_background_color\": \"rgba(255, 236, 164, 0.06)\",\n+        \"headings_color\": \"rgb(57, 175, 215)\",\n+    },\n )\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n-assert-css: (\n-    \"#method\\.must_use\",\n-    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n-    ALL,\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"color\": \"rgb(221, 221, 221)\",\n+        \"code_header_color\": \"rgb(221, 221, 221)\",\n+        \"focus_background_color\": \"rgb(73, 74, 61)\",\n+        \"headings_color\": \"rgb(210, 153, 29)\",\n+    },\n )\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n-assert-css: (\".small-section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n-// We select headings (h2, h3, h...).\n-assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n-\n-// Dark theme\n-local-storage: {\n-    \"rustdoc-theme\": \"dark\",\n-    \"rustdoc-preferred-dark-theme\": \"dark\",\n-    \"rustdoc-use-system-theme\": \"false\",\n-}\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-\n-assert-css: (\n-    \".impl\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".impl .code-header\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n-)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n-assert-css: (\n-    \"#impl-Foo\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n-)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n-assert-css: (\n-    \"#method\\.must_use\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n-    ALL,\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"color\": \"rgb(0, 0, 0)\",\n+        \"code_header_color\": \"rgb(0, 0, 0)\",\n+        \"focus_background_color\": \"rgb(253, 255, 211)\",\n+        \"headings_color\": \"rgb(56, 115, 173)\",\n+    },\n )\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n-assert-css: (\".small-section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n-// We select headings (h2, h3, h...).\n-assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n-\n-// Light theme\n-local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n-reload:\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-\n-assert-css: (\n-    \".impl\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".impl .code-header\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-    ALL,\n-)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#impl-Foo\"\n-assert-css: (\"#impl-Foo\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"})\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html#method.must_use\"\n-assert-css: (\n-    \"#method\\.must_use\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"},\n-    ALL,\n-)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n-assert-css: (\".small-section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n-\n-goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.HeavilyDocumentedStruct.html\"\n-// We select headings (h2, h3, h...).\n-assert-css: (\".docblock > :not(p) > a\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)"}, {"sha": "2449269b192aaa749eeb19b224e31842047cbee0", "filename": "src/test/rustdoc-gui/sidebar-mobile-scroll.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile-scroll.goml?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -1,12 +1,12 @@\n // This test ensures that the mobile sidebar preserves scroll position.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n // Switching to \"mobile view\" by reducing the width to 600px.\n-size: (600, 600)\n+size: (700, 600)\n assert-css: (\".sidebar\", {\"display\": \"block\", \"left\": \"-1000px\"})\n \n // Scroll down.\n scroll-to: \"//h2[@id='blanket-implementations']\"\n-assert-window-property: {\"pageYOffset\": \"651\"}\n+assert-window-property: {\"pageYOffset\": \"627\"}\n \n // Open the sidebar menu.\n click: \".sidebar-menu-toggle\"\n@@ -21,11 +21,11 @@ assert-window-property: {\"pageYOffset\": \"0\"}\n // Close the sidebar menu. Make sure the scroll position gets restored.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"-1000px\"})\n-assert-window-property: {\"pageYOffset\": \"651\"}\n+assert-window-property: {\"pageYOffset\": \"627\"}\n \n // Now test that scrollability returns when the browser window is just resized.\n click: \".sidebar-menu-toggle\"\n wait-for-css: (\".sidebar\", {\"left\": \"0px\"})\n assert-window-property: {\"pageYOffset\": \"0\"}\n size: (900, 600)\n-assert-window-property: {\"pageYOffset\": \"651\"}\n+assert-window-property: {\"pageYOffset\": \"627\"}"}, {"sha": "0d9a629e179b8eb9df836be32426f467cfb3ce9d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -4,6 +4,7 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::io::BufReader;\n use std::path::{Path, PathBuf};\n+use std::process::Command;\n \n use tracing::*;\n \n@@ -843,6 +844,20 @@ pub fn extract_llvm_version(version: &str) -> Option<u32> {\n     Some(version)\n }\n \n+pub fn extract_llvm_version_from_binary(binary_path: &str) -> Option<u32> {\n+    let output = Command::new(binary_path).arg(\"--version\").output().ok()?;\n+    if !output.status.success() {\n+        return None;\n+    }\n+    let version = String::from_utf8(output.stdout).ok()?;\n+    for line in version.lines() {\n+        if let Some(version) = line.split(\"LLVM version \").skip(1).next() {\n+            return extract_llvm_version(version);\n+        }\n+    }\n+    None\n+}\n+\n /// Takes a directive of the form \"<version1> [- <version2>]\",\n /// returns the numeric representation of <version1> and <version2> as\n /// tuple: (<version1> as u32, <version2> as u32)"}, {"sha": "417b429161f52ad34401e71dc7a018bec00cdc27", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -200,7 +200,9 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n     };\n     let llvm_version =\n-        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version);\n+        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version).or_else(\n+            || header::extract_llvm_version_from_binary(&matches.opt_str(\"llvm-filecheck\")?),\n+        );\n \n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");"}, {"sha": "49a59806b7f102f40e49b4e3349aeeee3c5b0061", "filename": "triagebot.toml", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "patch": "@@ -183,6 +183,11 @@ trigger_files = [\n     \"x.ps1\",\n     \"src/bootstrap\",\n     \"src/tools/rust-installer\",\n+    \"configure\",\n+    \"Cargo.toml\",\n+    \"Cargo.lock\",\n+    \"config.toml.example\",\n+    \"src/stage0.json\"\n ]\n \n [autolabel.\"T-infra\"]\n@@ -210,6 +215,38 @@ trigger_files = [\n     \"compiler/rustc_macros/src/query.rs\"\n ]\n \n+[autolabel.\"A-testsuite\"]\n+trigger_files = [\n+    \"src/test\",\n+    \"src/ci\",\n+    \"src/tools/compiletest\",\n+    \"src/tools/cargotest\",\n+    \"src/tools/tidy\",\n+    \"src/tools/remote-test-server\",\n+    \"src/tools/remote-test-client\",\n+    \"src/tools/tier-check\"\n+]\n+\n+[autolabel.\"A-meta\"]\n+trigger_files = [\n+    \"triagebot.toml\",\n+    \"rustfmt.toml\",\n+    \"LICENSES\",\n+    \"README.md\",\n+    \"CONTRIBUTING.md\",\n+    \".reuse\",\n+    \".mailmap\",\n+    \".git-blame-ignore-revs\",\n+    \".editorconfig\"\n+]\n+\n+[autolabel.\"T-release\"]\n+trigger_files = [\n+    \"RELEASES.md\",\n+    \"src/stage0.json\",\n+    \"src/version\"\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\""}]}