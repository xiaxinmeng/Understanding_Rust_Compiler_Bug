{"sha": "30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYThkZmIzMWFlNDAxYTEwNGJmYmI4NzBhNTI4MjI1YjRkNmIyZTA=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-14T15:55:02Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-14T15:55:02Z"}, "message": "remove Visitor from regex_macro", "tree": {"sha": "fcd2f4bf4a7d6d031c6da5ea16790dc52f8278de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcd2f4bf4a7d6d031c6da5ea16790dc52f8278de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "html_url": "https://github.com/rust-lang/rust/commit/30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a8dfb31ae401a104bfbb870a528225b4d6b2e0/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a624fe77c71ba3402be6e969d4c673d329c6179", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a624fe77c71ba3402be6e969d4c673d329c6179", "html_url": "https://github.com/rust-lang/rust/commit/6a624fe77c71ba3402be6e969d4c673d329c6179"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "cb3d3d5392b98088f7bcba0e55010f098677a66a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30a8dfb31ae401a104bfbb870a528225b4d6b2e0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a8dfb31ae401a104bfbb870a528225b4d6b2e0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "patch": "@@ -158,7 +158,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box vec::UselessVec);\n     reg.register_late_lint_pass(box drop_ref::DropRefPass);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n-    reg.register_late_lint_pass(box regex::RegexPass);\n+    reg.register_late_lint_pass(box regex::RegexPass::default());\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec!["}, {"sha": "25c7260abec896fcd3b0eb2b3ded8f06537d11a7", "filename": "src/regex.rs", "status": "modified", "additions": 32, "deletions": 34, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/30a8dfb31ae401a104bfbb870a528225b4d6b2e0/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a8dfb31ae401a104bfbb870a528225b4d6b2e0/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=30a8dfb31ae401a104bfbb870a528225b4d6b2e0", "patch": "@@ -1,11 +1,10 @@\n use regex_syntax;\n use std::error::Error;\n use std::collections::HashSet;\n-use syntax::ast::LitKind;\n+use syntax::ast::{LitKind, NodeId};\n use syntax::codemap::{Span, BytePos};\n use syntax::parse::token::InternedString;\n use rustc_front::hir::*;\n-use rustc_front::intravisit::{Visitor, walk_block};\n use rustc::middle::const_eval::{eval_const_expr_partial, ConstVal};\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n use rustc::lint::*;\n@@ -52,8 +51,11 @@ declare_lint! {\n     \"finds use of `regex!(_)`, suggests `Regex::new(_)` instead\"\n }\n \n-#[derive(Copy,Clone)]\n-pub struct RegexPass;\n+#[derive(Clone, Default)]\n+pub struct RegexPass {\n+    spans: HashSet<Span>,\n+    last: Option<NodeId>\n+}\n \n impl LintPass for RegexPass {\n     fn get_lints(&self) -> LintArray {\n@@ -62,11 +64,34 @@ impl LintPass for RegexPass {\n }\n \n impl LateLintPass for RegexPass {\n-    fn check_crate(&mut self, cx: &LateContext, krate: &Crate) {\n-        let mut visitor = RegexVisitor { cx: cx, spans: HashSet::new() };\n-        krate.visit_all_items(&mut visitor);\n+    fn check_crate(&mut self, _: &LateContext, _: &Crate) {\n+        self.spans.clear();\n     }\n \n+    fn check_block(&mut self, cx: &LateContext, block: &Block) {\n+        if_let_chain!{[\n+            self.last.is_none(),\n+            let Some(ref expr) = block.expr,\n+            match_type(cx, cx.tcx.expr_ty(expr), &[\"regex\", \"re\", \"Regex\"]),\n+            let Some(span) = is_expn_of(cx, expr.span, \"regex\")\n+        ], {\n+            if !self.spans.contains(&span) {\n+                span_lint(cx,\n+                          REGEX_MACRO,\n+                          span,\n+                          \"`regex!(_)` found. \\\n+                          Please use `Regex::new(_)`, which is faster for now.\");\n+                self.spans.insert(span);                    \n+            }\n+            self.last = Some(block.id);\n+        }}\n+    }\n+    \n+    fn check_block_post(&mut self, _: &LateContext, block: &Block) {\n+        if self.last.map_or(false, |id| block.id == id) {\n+             self.last = None;\n+        }\n+    }\n \n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain!{[\n@@ -160,30 +185,3 @@ fn is_trivial_regex(s: &regex_syntax::Expr) -> Option<&'static str> {\n         _ => None,\n     }\n }\n-\n-struct RegexVisitor<'v, 't: 'v> {\n-    cx: &'v LateContext<'v, 't>,\n-    spans: HashSet<Span>,\n-}\n-\n-impl<'v, 't: 'v> Visitor<'v> for RegexVisitor<'v, 't> {\n-    fn visit_block(&mut self, block: &'v Block) {\n-        if_let_chain!{[\n-            let Some(ref expr) = block.expr,\n-            match_type(self.cx, self.cx.tcx.expr_ty(expr), &[\"regex\", \"re\", \"Regex\"]),\n-            let Some(span) = is_expn_of(self.cx, expr.span, \"regex\")\n-        ], {\n-                if self.spans.contains(&span) {\n-                    return;\n-                }\n-                span_lint(self.cx,\n-                          REGEX_MACRO,\n-                          span,\n-                          \"`regex!(_)` found. \\\n-                          Please use `Regex::new(_)`, which is faster for now.\");\n-                self.spans.insert(span);\n-                return;\n-        }}\n-        walk_block(self, block);\n-    }\n-}"}]}