{"sha": "1841b31c61c2cca9c54264edd2a78b994b9638e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NDFiMzFjNjFjMmNjYTljNTQyNjRlZGQyYTc4Yjk5NGI5NjM4ZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-22T01:46:34Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-24T00:59:35Z"}, "message": "Add 'static mut' items to the language", "tree": {"sha": "a3f144c02e7f0fce204c3c6c2ec149bac088685c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3f144c02e7f0fce204c3c6c2ec149bac088685c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1841b31c61c2cca9c54264edd2a78b994b9638e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1841b31c61c2cca9c54264edd2a78b994b9638e9", "html_url": "https://github.com/rust-lang/rust/commit/1841b31c61c2cca9c54264edd2a78b994b9638e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1841b31c61c2cca9c54264edd2a78b994b9638e9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82756180bec5a8405e1fc6ee1b22949db24861f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82756180bec5a8405e1fc6ee1b22949db24861f", "html_url": "https://github.com/rust-lang/rust/commit/f82756180bec5a8405e1fc6ee1b22949db24861f"}], "stats": {"total": 300, "additions": 230, "deletions": 70}, "files": [{"sha": "83e59d980856fb2e808608b4c11dfc80f5729d3c", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -97,7 +97,8 @@ fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n \n #[deriving(Eq)]\n enum Family {\n-    Const,                 // c\n+    ImmStatic,             // c\n+    MutStatic,             // b\n     Fn,                    // f\n     UnsafeFn,              // u\n     PureFn,                // p\n@@ -122,7 +123,8 @@ enum Family {\n fn item_family(item: ebml::Doc) -> Family {\n     let fam = reader::get_doc(item, tag_items_data_item_family);\n     match reader::doc_as_u8(fam) as char {\n-      'c' => Const,\n+      'c' => ImmStatic,\n+      'b' => MutStatic,\n       'f' => Fn,\n       'u' => UnsafeFn,\n       'p' => PureFn,\n@@ -321,7 +323,8 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n     -> def_like {\n     let fam = item_family(item);\n     match fam {\n-        Const     => dl_def(ast::def_const(did)),\n+        ImmStatic => dl_def(ast::def_static(did, false)),\n+        MutStatic => dl_def(ast::def_static(did, true)),\n         Struct    => dl_def(ast::def_struct(did)),\n         UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n         Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n@@ -900,8 +903,8 @@ pub fn get_item_visibility(cdata: cmd, id: ast::node_id)\n \n fn family_has_type_params(fam: Family) -> bool {\n     match fam {\n-      Const | ForeignType | Mod | ForeignMod | PublicField | PrivateField\n-      | ForeignFn => false,\n+      ImmStatic | ForeignType | Mod | ForeignMod | PublicField | PrivateField\n+      | ForeignFn | MutStatic => false,\n       _           => true\n     }\n }\n@@ -931,7 +934,8 @@ fn describe_def(items: ebml::Doc, id: ast::def_id) -> ~str {\n \n fn item_family_to_str(fam: Family) -> ~str {\n     match fam {\n-      Const => ~\"const\",\n+      ImmStatic => ~\"static\",\n+      MutStatic => ~\"static mut\",\n       Fn => ~\"fn\",\n       UnsafeFn => ~\"unsafe fn\",\n       PureFn => ~\"pure fn\","}, {"sha": "96cf7284169d0be4c89cc73cea919a68a6ad160e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -785,7 +785,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n     let must_write =\n         match item.node {\n           item_enum(_, _) | item_impl(*) | item_trait(*) | item_struct(*) |\n-          item_mod(*) | item_foreign_mod(*) | item_const(*) => true,\n+          item_mod(*) | item_foreign_mod(*) | item_static(*) => true,\n           _ => false\n         };\n     if !must_write && !reachable(ecx, item.id) { return; }\n@@ -800,11 +800,15 @@ fn encode_info_for_item(ecx: &EncodeContext,\n            ecx.tcx.sess.codemap.span_to_str(item.span));\n \n     match item.node {\n-      item_const(_, _) => {\n+      item_static(_, m, _) => {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n-        encode_family(ebml_w, 'c');\n+        if m == ast::m_mutbl {\n+            encode_family(ebml_w, 'b');\n+        } else {\n+            encode_family(ebml_w, 'c');\n+        }\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_symbol(ecx, ebml_w, item.id);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));"}, {"sha": "5aad0d894da46fcdda6f3f8b45618a73cfb5bdfd", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -384,7 +384,7 @@ impl tr for ast::def {\n           ast::def_self(nid, i) => { ast::def_self(xcx.tr_id(nid), i) }\n           ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }\n           ast::def_foreign_mod(did) => { ast::def_foreign_mod(did.tr(xcx)) }\n-          ast::def_const(did) => { ast::def_const(did.tr(xcx)) }\n+          ast::def_static(did, m) => { ast::def_static(did.tr(xcx), m) }\n           ast::def_arg(nid, b) => { ast::def_arg(xcx.tr_id(nid), b) }\n           ast::def_local(nid, b) => { ast::def_local(xcx.tr_id(nid), b) }\n           ast::def_variant(e_did, v_did) => {"}, {"sha": "c1906820883c31150887875cb0654b8c48471443", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -43,7 +43,7 @@ pub fn check_item(sess: Session,\n                   (_is_const, v): (bool,\n                                    visit::vt<bool>)) {\n     match it.node {\n-      item_const(_, ex) => {\n+      item_static(_, _, ex) => {\n         (v.visit_expr)(ex, (true, v));\n         check_item_recursion(sess, ast_map, def_map, it);\n       }\n@@ -124,7 +124,7 @@ pub fn check_expr(sess: Session,\n                              items without type parameters\");\n             }\n             match def_map.find(&e.id) {\n-              Some(&def_const(_)) |\n+              Some(&def_static(*)) |\n               Some(&def_fn(_, _)) |\n               Some(&def_variant(_, _)) |\n               Some(&def_struct(_)) => { }\n@@ -237,7 +237,7 @@ pub fn check_item_recursion(sess: Session,\n         match e.node {\n           expr_path(*) => {\n             match env.def_map.find(&e.id) {\n-              Some(&def_const(def_id)) => {\n+              Some(&def_static(def_id, _)) => {\n                 if ast_util::is_local(def_id) {\n                   match env.ast_map.get_copy(&def_id.node) {\n                     ast_map::node_item(it, _) => {"}, {"sha": "b4c8a6b19c29fbd046edb9969f336e991d318652", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -304,7 +304,7 @@ pub fn pat_ctor_id(cx: @MatchCheckCtxt, p: @pat) -> Option<ctor> {\n       pat_ident(_, _, _) | pat_enum(_, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n           Some(&def_variant(_, id)) => Some(variant(id)),\n-          Some(&def_const(did)) => {\n+          Some(&def_static(did, false)) => {\n             let const_expr = lookup_const_by_id(cx.tcx, did).get();\n             Some(val(eval_const_expr(cx.tcx, const_expr)))\n           }\n@@ -339,7 +339,7 @@ pub fn is_wild(cx: @MatchCheckCtxt, p: @pat) -> bool {\n       pat_wild => { true }\n       pat_ident(_, _, _) => {\n         match cx.tcx.def_map.find(&pat.id) {\n-          Some(&def_variant(_, _)) | Some(&def_const(*)) => { false }\n+          Some(&def_variant(_, _)) | Some(&def_static(*)) => { false }\n           _ => { true }\n         }\n       }\n@@ -499,7 +499,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             None\n                         }\n                     }\n-                    Some(&def_const(did)) => {\n+                    Some(&def_static(did, _)) => {\n                         let const_expr =\n                             lookup_const_by_id(cx.tcx, did).get();\n                         let e_v = eval_const_expr(cx.tcx, const_expr);\n@@ -549,7 +549,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n             }\n             pat_enum(_, args) => {\n                 match cx.tcx.def_map.get_copy(&pat_id) {\n-                    def_const(did) => {\n+                    def_static(did, _) => {\n                         let const_expr =\n                             lookup_const_by_id(cx.tcx, did).get();\n                         let e_v = eval_const_expr(cx.tcx, const_expr);\n@@ -790,7 +790,7 @@ pub fn is_refutable(cx: @MatchCheckCtxt, pat: &pat) -> bool {\n             return true;\n         }\n       }\n-      Some(&def_const(*)) => return true,\n+      Some(&def_static(*)) => return true,\n       _ => ()\n     }\n "}, {"sha": "1a7cd856bede7953919a2bbaf794ec3e9d95be21", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -166,7 +166,7 @@ pub fn classify(e: @expr,\n \n pub fn lookup_const(tcx: ty::ctxt, e: @expr) -> Option<@expr> {\n     match tcx.def_map.find(&e.id) {\n-        Some(&ast::def_const(def_id)) => lookup_const_by_id(tcx, def_id),\n+        Some(&ast::def_static(def_id, false)) => lookup_const_by_id(tcx, def_id),\n         _ => None\n     }\n }\n@@ -178,7 +178,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n         match tcx.items.find(&def_id.node) {\n             None => None,\n             Some(&ast_map::node_item(it, _)) => match it.node {\n-                item_const(_, const_expr) => Some(const_expr),\n+                item_static(_, ast::m_imm, const_expr) => Some(const_expr),\n                 _ => None\n             },\n             Some(_) => None\n@@ -195,7 +195,7 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n         match csearch::maybe_get_item_ast(tcx, def_id,\n             |a, b, c, d| astencode::decode_inlined_item(a, b, maps, /*bar*/ copy c, d)) {\n             csearch::found(ast::ii_item(item)) => match item.node {\n-                item_const(_, const_expr) => Some(const_expr),\n+                item_static(_, ast::m_imm, const_expr) => Some(const_expr),\n                 _ => None\n             },\n             _ => None"}, {"sha": "513b2015a834a7f08f11786e3699e1aa1b506dce", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -17,7 +17,7 @@ use middle::typeck::method_map;\n use util::ppaux;\n \n use syntax::ast::{deref, expr_call, expr_inline_asm, expr_method_call};\n-use syntax::ast::{expr_unary, node_id, unsafe_blk, unsafe_fn};\n+use syntax::ast::{expr_unary, node_id, unsafe_blk, unsafe_fn, expr_path};\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::visit::{fk_item_fn, fk_method};\n@@ -143,6 +143,14 @@ pub fn check_crate(tcx: ty::ctxt,\n                 expr_inline_asm(*) => {\n                     require_unsafe(expr.span, \"use of inline assembly\")\n                 }\n+                expr_path(*) => {\n+                    match ty::resolve_expr(tcx, expr) {\n+                        ast::def_static(_, true) => {\n+                            require_unsafe(expr.span, \"use of mutable static\")\n+                        }\n+                        _ => {}\n+                    }\n+                }\n                 _ => {}\n             }\n "}, {"sha": "f93cb265d785f5ad7885ad9b103306ad79acfefa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -447,19 +447,29 @@ impl mem_categorization_ctxt {\n                    -> cmt {\n         match def {\n           ast::def_fn(*) | ast::def_static_method(*) | ast::def_mod(_) |\n-          ast::def_foreign_mod(_) | ast::def_const(_) |\n+          ast::def_foreign_mod(_) | ast::def_static(_, false) |\n           ast::def_use(_) | ast::def_variant(*) |\n           ast::def_trait(_) | ast::def_ty(_) | ast::def_prim_ty(_) |\n           ast::def_ty_param(*) | ast::def_struct(*) |\n           ast::def_typaram_binder(*) | ast::def_region(_) |\n           ast::def_label(_) | ast::def_self_ty(*) => {\n-            @cmt_ {\n-                id:id,\n-                span:span,\n-                cat:cat_static_item,\n-                mutbl: McImmutable,\n-                ty:expr_ty\n-            }\n+              @cmt_ {\n+                  id:id,\n+                  span:span,\n+                  cat:cat_static_item,\n+                  mutbl: McImmutable,\n+                  ty:expr_ty\n+              }\n+          }\n+\n+          ast::def_static(_, true) => {\n+              @cmt_ {\n+                  id:id,\n+                  span:span,\n+                  cat:cat_static_item,\n+                  mutbl: McDeclared,\n+                  ty:expr_ty\n+              }\n           }\n \n           ast::def_arg(vid, mutbl) => {\n@@ -894,7 +904,7 @@ impl mem_categorization_ctxt {\n                         self.cat_pattern(cmt_field, subpat, op);\n                     }\n                 }\n-                Some(&ast::def_const(*)) => {\n+                Some(&ast::def_static(*)) => {\n                     for subpats.iter().advance |&subpat| {\n                         self.cat_pattern(cmt, subpat, op);\n                     }"}, {"sha": "5bd39e8586374cad55477fb61720593bb683f964", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -45,7 +45,7 @@ pub fn pat_is_const(dm: resolve::DefMap, pat: &pat) -> bool {\n     match pat.node {\n         pat_ident(_, _, None) | pat_enum(*) => {\n             match dm.find(&pat.id) {\n-                Some(&def_const(*)) => true,\n+                Some(&def_static(_, false)) => true,\n                 _ => false\n             }\n         }"}, {"sha": "7f9086be81d52646a27ec12456dc20c780d2ad8b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -1146,12 +1146,13 @@ impl Resolver {\n             }\n \n             // These items live in the value namespace.\n-            item_const(*) => {\n+            item_static(_, m, _) => {\n                 let (name_bindings, _) =\n                     self.add_child(ident, parent, ForbidDuplicateValues, sp);\n+                let mutbl = m == ast::m_mutbl;\n \n                 name_bindings.define_value\n-                    (privacy, def_const(local_def(item.id)), sp);\n+                    (privacy, def_static(local_def(item.id), mutbl), sp);\n             }\n             item_fn(_, purity, _, _, _) => {\n               let (name_bindings, new_parent) =\n@@ -1566,7 +1567,7 @@ impl Resolver {\n                 }\n             }\n             foreign_item_const(*) => {\n-                let def = def_const(local_def(foreign_item.id));\n+                let def = def_static(local_def(foreign_item.id), false);\n                 name_bindings.define_value(Public, def, foreign_item.span);\n \n                 visit_foreign_item(foreign_item, (new_parent, visitor));\n@@ -1673,7 +1674,7 @@ impl Resolver {\n             let privacy = variant_visibility_to_privacy(visibility, true);\n             child_name_bindings.define_value(privacy, def, dummy_sp());\n           }\n-          def_fn(*) | def_static_method(*) | def_const(*) => {\n+          def_fn(*) | def_static_method(*) | def_static(*) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value %s\", final_ident);\n             child_name_bindings.define_value(privacy, def, dummy_sp());\n@@ -3686,7 +3687,7 @@ impl Resolver {\n                                       visitor);\n             }\n \n-            item_const(*) => {\n+            item_static(*) => {\n                 self.with_constant_rib(|| {\n                     visit_item(item, ((), visitor));\n                 });\n@@ -4344,7 +4345,7 @@ impl Resolver {\n                                 Some(def @ def_struct(*)) => {\n                             self.record_def(pattern.id, def);\n                         }\n-                        Some(def @ def_const(*)) => {\n+                        Some(def @ def_static(*)) => {\n                             self.enforce_default_binding_mode(\n                                 pattern,\n                                 binding_mode,\n@@ -4376,7 +4377,7 @@ impl Resolver {\n                         Some(def @ def_fn(*))      |\n                         Some(def @ def_variant(*)) |\n                         Some(def @ def_struct(*))  |\n-                        Some(def @ def_const(*)) => {\n+                        Some(def @ def_static(*)) => {\n                             self.record_def(pattern.id, def);\n                         }\n                         Some(_) => {\n@@ -4459,7 +4460,7 @@ impl Resolver {\n                             def @ def_variant(*) | def @ def_struct(*) => {\n                                 return FoundStructOrEnumVariant(def);\n                             }\n-                            def @ def_const(*) => {\n+                            def @ def_static(_, false) => {\n                                 return FoundConst(def);\n                             }\n                             _ => {"}, {"sha": "71b416ffe85ff4439beda28096429b0e1a2ca111", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -820,7 +820,7 @@ pub fn get_options(bcx: block, m: &[@Match], col: uint) -> ~[Opt] {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(UnitLikeStructLit(cur.id)));\n                     }\n-                    Some(&ast::def_const(const_did)) => {\n+                    Some(&ast::def_static(const_did, false)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(ConstLit(const_did)));\n                     }\n@@ -836,7 +836,7 @@ pub fn get_options(bcx: block, m: &[@Match], col: uint) -> ~[Opt] {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n                     }\n-                    Some(&ast::def_const(const_did)) => {\n+                    Some(&ast::def_static(const_did, false)) => {\n                         add_to_set(ccx.tcx, &mut found,\n                                    lit(ConstLit(const_did)));\n                     }\n@@ -1831,8 +1831,9 @@ pub fn bind_irrefutable_pat(bcx: block,\n                         }\n                     }\n                 }\n-                Some(&ast::def_const(*)) => {\n-                    bcx = bind_irrefutable_pat(bcx, pat, val, make_copy, binding_mode);\n+                Some(&ast::def_static(_, false)) => {\n+                    bcx = bind_irrefutable_pat(bcx, pat, val, make_copy,\n+                                               binding_mode);\n                 }\n                 _ => {\n                     // Nothing to do here."}, {"sha": "0f6c7dbe75434dec365de1c55d3dd73f1d95919f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -2122,14 +2122,19 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n             trans_enum_def(ccx, enum_definition, item.id, vi, &mut i);\n         }\n       }\n-      ast::item_const(_, expr) => {\n-          consts::trans_const(ccx, expr, item.id);\n+      ast::item_static(_, m, expr) => {\n+          consts::trans_const(ccx, m, item.id);\n           // Do static_assert checking. It can't really be done much earlier because we need to get\n           // the value of the bool out of LLVM\n           for item.attrs.iter().advance |attr| {\n               match attr.node.value.node {\n                   ast::meta_word(x) => {\n                       if x.slice(0, x.len()) == \"static_assert\" {\n+                          if m == ast::m_mutbl {\n+                              ccx.sess.span_fatal(expr.span,\n+                                                  \"cannot have static_assert \\\n+                                                   on a mutable static\");\n+                          }\n                           let v = ccx.const_values.get_copy(&item.id);\n                           unsafe {\n                               if !(llvm::LLVMConstIntGetZExtValue(v) as bool) {\n@@ -2398,13 +2403,14 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       [path_name(i.ident)]);\n             match i.node {\n-              ast::item_const(_, expr) => {\n+              ast::item_static(_, m, expr) => {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n                 // We need the translated value here, because for enums the\n                 // LLVM type is not fully determined by the Rust type.\n                 let v = consts::const_expr(ccx, expr);\n                 ccx.const_values.insert(id, v);\n+                exprt = m == ast::m_mutbl;\n                 unsafe {\n                     let llty = llvm::LLVMTypeOf(v);\n                     let g = str::as_c_str(s, |buf| {"}, {"sha": "593d0beb88c7620e221c399a4af1409c6027b375", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -143,7 +143,7 @@ pub fn trans(bcx: block, expr: @ast::expr) -> Callee {\n                 datum_callee(bcx, ref_expr)\n             }\n             ast::def_mod(*) | ast::def_foreign_mod(*) | ast::def_trait(*) |\n-            ast::def_const(*) | ast::def_ty(*) | ast::def_prim_ty(*) |\n+            ast::def_static(*) | ast::def_ty(*) | ast::def_prim_ty(*) |\n             ast::def_use(*) | ast::def_typaram_binder(*) |\n             ast::def_region(*) | ast::def_label(*) | ast::def_ty_param(*) |\n             ast::def_self_ty(*) => {"}, {"sha": "98eb858be55fd10e3a6511577414bc47b7517a8a", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -164,9 +164,9 @@ pub fn get_const_val(cx: @mut CrateContext, mut def_id: ast::def_id) -> ValueRef\n         }\n         match cx.tcx.items.get_copy(&def_id.node) {\n             ast_map::node_item(@ast::item {\n-                node: ast::item_const(_, subexpr), _\n+                node: ast::item_static(_, ast::m_imm, _), _\n             }, _) => {\n-                trans_const(cx, subexpr, def_id.node);\n+                trans_const(cx, ast::m_imm, def_id.node);\n             }\n             _ => cx.tcx.sess.bug(\"expected a const to be an item\")\n         }\n@@ -538,7 +538,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: @ast::expr) -> ValueRef {\n                         base::get_item_val(cx, def_id.node)\n                     }\n                 }\n-                Some(&ast::def_const(def_id)) => {\n+                Some(&ast::def_static(def_id, false)) => {\n                     get_const_val(cx, def_id)\n                 }\n                 Some(&ast::def_variant(enum_did, variant_did)) => {\n@@ -587,14 +587,16 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: @ast::expr) -> ValueRef {\n     }\n }\n \n-pub fn trans_const(ccx: @mut CrateContext, _e: @ast::expr, id: ast::node_id) {\n+pub fn trans_const(ccx: @mut CrateContext, m: ast::mutability, id: ast::node_id) {\n     unsafe {\n         let _icx = push_ctxt(\"trans_const\");\n         let g = base::get_item_val(ccx, id);\n         // At this point, get_item_val has already translated the\n         // constant's initializer to determine its LLVM type.\n         let v = ccx.const_values.get_copy(&id);\n         llvm::LLVMSetInitializer(g, v);\n-        llvm::LLVMSetGlobalConstant(g, True);\n+        if m != ast::m_mutbl {\n+            llvm::LLVMSetGlobalConstant(g, True);\n+        }\n     }\n }"}, {"sha": "1aebf73b81a87a113a0ff7e6ff9e6df99947e5c7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -945,7 +945,7 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         let _icx = push_ctxt(\"trans_def_lvalue\");\n         let ccx = bcx.ccx();\n         match def {\n-            ast::def_const(did) => {\n+            ast::def_static(did, _) => {\n                 let const_ty = expr_ty(bcx, ref_expr);\n \n                 fn get_did(ccx: @mut CrateContext, did: ast::def_id)"}, {"sha": "e950c24c49e8d415c40bac705c59ada2357b1fc0", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -146,7 +146,7 @@ fn traverse_public_item(cx: @mut ctx, item: @item) {\n                         visit::mk_vt(@visit::Visitor {visit_ty: traverse_ty,\n                                                       ..*visit::default_visitor()})))\n       }\n-      item_const(*) |\n+      item_static(*) |\n       item_enum(*) | item_trait(*) => (),\n       item_mac(*) => fail!(\"item macros unimplemented\")\n     }"}, {"sha": "f3c0d4bd8f4644241e59b3053c5a45fd6f124f5e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -3269,7 +3269,7 @@ pub fn expr_kind(tcx: ctxt,\n                 // Note: there is actually a good case to be made that\n                 // def_args, particularly those of immediate type, ought to\n                 // considered rvalues.\n-                ast::def_const(*) |\n+                ast::def_static(*) |\n                 ast::def_binding(*) |\n                 ast::def_upvar(*) |\n                 ast::def_arg(*) |"}, {"sha": "1acf806f21e970761e5bcb4b79eef1e79af27d8f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -585,7 +585,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n     let _indenter = indenter();\n \n     match it.node {\n-      ast::item_const(_, e) => check_const(ccx, it.span, e, it.id),\n+      ast::item_static(_, _, e) => check_const(ccx, it.span, e, it.id),\n       ast::item_enum(ref enum_definition, _) => {\n         check_enum_variants(ccx,\n                             it.span,\n@@ -3216,7 +3216,7 @@ pub fn ty_param_bounds_and_ty_for_def(fcx: @mut FnCtxt,\n       }\n \n       ast::def_fn(id, _) | ast::def_static_method(id, _, _) |\n-      ast::def_const(id) | ast::def_variant(_, id) |\n+      ast::def_static(id, _) | ast::def_variant(_, id) |\n       ast::def_struct(id) => {\n         return ty::lookup_item_type(fcx.ccx.tcx, id);\n       }"}, {"sha": "aef148830a99389fad86efae5edae71f4975a502", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -1060,7 +1060,7 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n     }\n     let rp = tcx.region_paramd_items.find(&it.id).map_consume(|x| *x);\n     match it.node {\n-      ast::item_const(t, _) => {\n+      ast::item_static(t, _, _) => {\n         let typ = ccx.to_ty(&empty_rscope, t);\n         let tpt = no_params(typ);\n         tcx.tcache.insert(local_def(it.id), tpt);"}, {"sha": "f12f612b036bce0f834fa466bbd5946641ce6de0", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -102,7 +102,7 @@ fn moddoc_from_mod(\n                     fndoc_from_fn(ItemDoc)\n                 ))\n               }\n-              ast::item_const(_, _) => {\n+              ast::item_static(*) => {\n                 Some(doc::ConstTag(\n                     constdoc_from_const(ItemDoc)\n                 ))"}, {"sha": "459daaa468f92e8a1b5f8f419aea77b8c471b6e7", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -96,7 +96,7 @@ fn fold_const(\n             do astsrv::exec(srv) |ctxt| {\n                 match ctxt.ast_map.get_copy(&doc.id()) {\n                     ast_map::node_item(@ast::item {\n-                        node: ast::item_const(ty, _), _\n+                        node: ast::item_static(ty, _, _), _\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }"}, {"sha": "012a1e76228a5fbb3e45e3fac04e18c3698bcaab", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -190,7 +190,7 @@ pub enum def {\n     def_self_ty(/* trait id */ node_id),\n     def_mod(def_id),\n     def_foreign_mod(def_id),\n-    def_const(def_id),\n+    def_static(def_id, bool /* is_mutbl */),\n     def_arg(node_id, bool /* is_mutbl */),\n     def_local(node_id, bool /* is_mutbl */),\n     def_variant(def_id /* enum */, def_id /* variant */),\n@@ -1095,7 +1095,7 @@ pub struct item {\n \n #[deriving(Eq, Encodable, Decodable)]\n pub enum item_ {\n-    item_const(@Ty, @expr),\n+    item_static(@Ty, mutability, @expr),\n     item_fn(fn_decl, purity, AbiSet, Generics, blk),\n     item_mod(_mod),\n     item_foreign_mod(foreign_mod),"}, {"sha": "421c4c566b56c23b193a3187ddfa02140d025f96", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -339,7 +339,7 @@ pub fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n       Some(&node_item(item, path)) => {\n         let path_str = path_ident_to_str(path, item.ident, itr);\n         let item_str = match item.node {\n-          item_const(*) => ~\"const\",\n+          item_static(*) => ~\"static\",\n           item_fn(*) => ~\"fn\",\n           item_mod(*) => ~\"mod\",\n           item_foreign_mod(*) => ~\"foreign mod\","}, {"sha": "227d700452b6c6bf5cb7039fb122273afee800cb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -59,7 +59,7 @@ pub fn variant_def_ids(d: def) -> Option<(def_id, def_id)> {\n pub fn def_id_of_def(d: def) -> def_id {\n     match d {\n       def_fn(id, _) | def_static_method(id, _, _) | def_mod(id) |\n-      def_foreign_mod(id) | def_const(id) |\n+      def_foreign_mod(id) | def_static(id, _) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_use(id) | def_struct(id) | def_trait(id) => {\n         id"}, {"sha": "8a22dbe9178c42eff026378e05ef26ad96e7ebbb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -270,7 +270,7 @@ fn noop_fold_struct_field(sf: @struct_field, fld: @ast_fold)\n \n pub fn noop_fold_item_underscore(i: &item_, fld: @ast_fold) -> item_ {\n     match *i {\n-        item_const(t, e) => item_const(fld.fold_ty(t), fld.fold_expr(e)),\n+        item_static(t, m, e) => item_static(fld.fold_ty(t), m, fld.fold_expr(e)),\n         item_fn(ref decl, purity, abi, ref generics, ref body) => {\n             item_fn(\n                 fold_fn_decl(decl, fld),"}, {"sha": "a726b3b27d2ed348c083c015f4358f5aa6026c9f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -34,7 +34,7 @@ use ast::{expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n use ast::{expr_vstore_uniq, Onceness, Once, Many};\n use ast::{foreign_item, foreign_item_const, foreign_item_fn, foreign_mod};\n-use ast::{ident, impure_fn, inherited, item, item_, item_const};\n+use ast::{ident, impure_fn, inherited, item, item_, item_static};\n use ast::{item_enum, item_fn, item_foreign_mod, item_impl};\n use ast::{item_mac, item_mod, item_struct, item_trait, item_ty, lit, lit_};\n use ast::{lit_bool, lit_float, lit_float_unsuffixed, lit_int};\n@@ -3556,13 +3556,14 @@ impl Parser {\n     }\n \n     fn parse_item_const(&self) -> item_info {\n+        let m = if self.eat_keyword(keywords::Mut) {m_mutbl} else {m_imm};\n         let id = self.parse_ident();\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n         self.expect(&token::EQ);\n         let e = self.parse_expr();\n         self.expect(&token::SEMI);\n-        (id, item_const(ty, e), None)\n+        (id, item_static(ty, m, e), None)\n     }\n \n     // parse a mod { ...}  item"}, {"sha": "c21c0a0afeedf2e5c291c5ce03cc2e8c6434a555", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -477,8 +477,11 @@ pub fn print_item(s: @ps, item: @ast::item) {\n     let ann_node = node_item(s, item);\n     (s.ann.pre)(ann_node);\n     match item.node {\n-      ast::item_const(ty, expr) => {\n+      ast::item_static(ty, m, expr) => {\n         head(s, visibility_qualified(item.vis, \"static\"));\n+        if m == ast::m_mutbl {\n+            word_space(s, \"mut\");\n+        }\n         print_ident(s, item.ident);\n         word_space(s, \":\");\n         print_type(s, ty);"}, {"sha": "fd9350e00051db612e393751b0c902c23933c0b5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -148,7 +148,7 @@ fn visit_trait_ref<E: Copy>(tref: @ast::trait_ref, (e, v): (E, vt<E>)) {\n \n pub fn visit_item<E: Copy>(i: @item, (e, v): (E, vt<E>)) {\n     match i.node {\n-        item_const(t, ex) => {\n+        item_static(t, _, ex) => {\n             (v.visit_ty)(t, (copy e, v));\n             (v.visit_expr)(ex, (copy e, v));\n         }"}, {"sha": "8dc45c681bfef07e1b89c26c7611210740e3341e", "filename": "src/test/auxiliary/static_mut_xc.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fauxiliary%2Fstatic_mut_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fauxiliary%2Fstatic_mut_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_mut_xc.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1 @@\n+pub static mut a: int = 3;"}, {"sha": "7aed3ce30bc5987d53125ee8bc8545e1119627d3", "filename": "src/test/compile-fail/static-mut-bad-types.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-bad-types.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static mut a: int = 3;\n+\n+fn main() {\n+    unsafe {\n+        a = true; //~ ERROR: mismatched types\n+    }\n+}"}, {"sha": "61d3ed7fd18e14309f52dc47ec8e488cd358d0ee", "filename": "src/test/compile-fail/static-mut-not-constant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-constant.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static mut a: ~int = ~3; //~ ERROR: disallowed operator in constant\n+\n+fn main() {}"}, {"sha": "997003a28d4235343692d4d955317970a2ea5ab7", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Constants (static variables) can be used to match in patterns, but mutable\n+// statics cannot. This ensures that there's some form of error if this is\n+// attempted.\n+\n+static mut a: int = 3;\n+\n+fn main() {\n+    // If they can't be matched against, then it's possible to capture the same\n+    // name as a variable, hence this should be an unreachable pattern situation\n+    // instead of spitting out a custom error about some identifier collisions\n+    // (we should allow shadowing)\n+    match 4 {\n+        a => {}\n+        _ => {} //~ ERROR: unreachable pattern\n+    }\n+}"}, {"sha": "7337920cce68c559785939721a28ac0867e2c4b6", "filename": "src/test/compile-fail/static-mut-requires-unsafe.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Fcompile-fail%2Fstatic-mut-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-requires-unsafe.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static mut a: int = 3;\n+\n+fn main() {\n+    a += 3;         //~ ERROR: requires unsafe\n+    a = 4;          //~ ERROR: requires unsafe\n+    let _b = a;     //~ ERROR: requires unsafe\n+}"}, {"sha": "72f44fcd50100f351cb300900036cae46fd373e7", "filename": "src/test/run-pass/static-mut-xc.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1841b31c61c2cca9c54264edd2a78b994b9638e9/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-xc.rs?ref=1841b31c61c2cca9c54264edd2a78b994b9638e9", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Constants (static variables) can be used to match in patterns, but mutable\n+// statics cannot. This ensures that there's some form of error if this is\n+// attempted.\n+\n+// xfail-fast\n+// aux-build:static_mut_xc.rs\n+\n+extern mod static_mut_xc;\n+\n+unsafe fn static_bound(_: &'static int) {}\n+\n+fn static_bound_set(a: &'static mut int) {\n+    *a = 3;\n+}\n+\n+unsafe fn run() {\n+    assert!(static_mut_xc::a == 3);\n+    static_mut_xc::a = 4;\n+    assert!(static_mut_xc::a == 4);\n+    static_mut_xc::a += 1;\n+    assert!(static_mut_xc::a == 5);\n+    static_mut_xc::a *= 3;\n+    assert!(static_mut_xc::a == 15);\n+    static_mut_xc::a = -3;\n+    assert!(static_mut_xc::a == -3);\n+    static_bound(&static_mut_xc::a);\n+    static_bound_set(&mut static_mut_xc::a);\n+}\n+\n+fn main() {\n+    unsafe { run() }\n+}\n+\n+pub mod inner {\n+    pub static mut a: int = 4;\n+}"}]}