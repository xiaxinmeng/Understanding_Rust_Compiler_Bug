{"sha": "2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMzI5OGI4YzRkZjhkYTRiNTk3YjMzMTA0ZTIzNWIwZmFmYmUxZTk=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-09T11:17:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-09T11:17:13Z"}, "message": "Merge pull request #3148 from matthiaskrgr/rustc_tools_util_tests\n\nrustc_tools_util: add tests", "tree": {"sha": "c8f49036e7dd492ea8a2c482ea2b1b49a19a4910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8f49036e7dd492ea8a2c482ea2b1b49a19a4910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJblQE5CRBK7hj4Ov3rIwAAdHIIAFvC+mOYeZG+9iUx4kBFQktb\nNRzydDtcyRpM4YYd8u/ON/7kFTkN9J+l5iyCMlzjs8ikawkN1/CBKQEbynz1hR+d\ni55HM9Cjoe8E436hlOfDg5+PvQeIiuHeQoMFdbAjK90HNmECakeGyGJoVfcNpDbM\ncGa3eDEGdmO2erq/3Xhw2+GPJ+UMZ2+VWpr0V1YWtIHs4AJiIO521OxNVWBSeUxA\njvFUVE2Bi5aThwQCh5GSgAUrmUKxqqW2JrKGvEt5h4BCaZ8wYl+6eq66EvmQcbOr\nX8XOPlo7VKxAh5w7BsFkKmyMs/MJC9TXiqI4RsD72I3PneKnik3ghqCAenKc1GI=\n=V8+6\n-----END PGP SIGNATURE-----\n", "payload": "tree c8f49036e7dd492ea8a2c482ea2b1b49a19a4910\nparent 055b5eb31b566cd9a38ba18ac778d6154c75d9b5\nparent a14155088bc3cb7fa8dee3484e37a3212265ed8c\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1536491833 +0200\ncommitter GitHub <noreply@github.com> 1536491833 +0200\n\nMerge pull request #3148 from matthiaskrgr/rustc_tools_util_tests\n\nrustc_tools_util: add tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "html_url": "https://github.com/rust-lang/rust/commit/2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3298b8c4df8da4b597b33104e235b0fafbe1e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055b5eb31b566cd9a38ba18ac778d6154c75d9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/055b5eb31b566cd9a38ba18ac778d6154c75d9b5", "html_url": "https://github.com/rust-lang/rust/commit/055b5eb31b566cd9a38ba18ac778d6154c75d9b5"}, {"sha": "a14155088bc3cb7fa8dee3484e37a3212265ed8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14155088bc3cb7fa8dee3484e37a3212265ed8c", "html_url": "https://github.com/rust-lang/rust/commit/a14155088bc3cb7fa8dee3484e37a3212265ed8c"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "0d0a370feefa97434938e304deca08961b919f59", "filename": "ci/base-tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d3298b8c4df8da4b597b33104e235b0fafbe1e9/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2d3298b8c4df8da4b597b33104e235b0fafbe1e9/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "patch": "@@ -8,6 +8,7 @@ remark -f *.md > /dev/null\n cargo build --features debugging\n cargo test --features debugging\n cd clippy_lints && cargo test && cd ..\n+cd rustc_tools_util && cargo test && cd ..\n mkdir -p ~/rust/cargo/bin\n cp target/debug/cargo-clippy ~/rust/cargo/bin/cargo-clippy\n cp target/debug/clippy-driver ~/rust/cargo/bin/clippy-driver"}, {"sha": "aad9ee88fc78de6fc7be0d1e2187804deac4f82c", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2d3298b8c4df8da4b597b33104e235b0fafbe1e9/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3298b8c4df8da4b597b33104e235b0fafbe1e9/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=2d3298b8c4df8da4b597b33104e235b0fafbe1e9", "patch": "@@ -1,3 +1,4 @@\n+#![feature(test)]\n #![feature(tool_lints)]\n \n use std::env;\n@@ -8,6 +9,7 @@ macro_rules! get_version_info {\n         let major = env!(\"CARGO_PKG_VERSION_MAJOR\").parse::<u8>().unwrap();\n         let minor = env!(\"CARGO_PKG_VERSION_MINOR\").parse::<u8>().unwrap();\n         let patch = env!(\"CARGO_PKG_VERSION_PATCH\").parse::<u16>().unwrap();\n+        let crate_name = String::from(env!(\"CARGO_PKG_NAME\"));\n \n         let host_compiler = $crate::get_channel();\n         let commit_hash = option_env!(\"GIT_HASH\").map(|s| s.to_string());\n@@ -20,6 +22,7 @@ macro_rules! get_version_info {\n             host_compiler,\n             commit_hash,\n             commit_date,\n+            crate_name,\n         }\n     }};\n }\n@@ -32,6 +35,7 @@ pub struct VersionInfo {\n     pub host_compiler: Option<String>,\n     pub commit_hash: Option<String>,\n     pub commit_date: Option<String>,\n+    pub crate_name: String,\n }\n \n impl std::fmt::Display for VersionInfo {\n@@ -40,7 +44,8 @@ impl std::fmt::Display for VersionInfo {\n             Some(_) => {\n                 write!(\n                     f,\n-                    \"clippy {}.{}.{} ({} {})\",\n+                    \"{} {}.{}.{} ({} {})\",\n+                    self.crate_name,\n                     self.major,\n                     self.minor,\n                     self.patch,\n@@ -49,7 +54,7 @@ impl std::fmt::Display for VersionInfo {\n                 )?;\n             },\n             None => {\n-                write!(f, \"clippy {}.{}.{}\", self.major, self.minor, self.patch)?;\n+                write!(f, \"{} {}.{}.{}\", self.crate_name, self.major, self.minor, self.patch)?;\n             },\n         };\n         Ok(())\n@@ -80,3 +85,28 @@ pub fn get_commit_date() -> Option<String> {\n         .ok()\n         .and_then(|r| String::from_utf8(r.stdout).ok())\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+\n+    #[test]\n+    fn test_struct_local() {\n+        let vi = get_version_info!();\n+        assert_eq!(vi.major, 0);\n+        assert_eq!(vi.minor, 1);\n+        assert_eq!(vi.patch, 0);\n+        assert_eq!(vi.crate_name, \"rustc_tools_util\");\n+        // hard to make positive tests for these since they will always change\n+        assert!(vi.commit_hash.is_none());\n+        assert!(vi.commit_date.is_none());\n+    }\n+\n+    #[test]\n+    fn test_display_local() {\n+        let vi = get_version_info!();\n+        let fmt = format!(\"{}\", vi);\n+        assert_eq!(fmt, \"rustc_tools_util 0.1.0\");\n+    }\n+\n+}"}]}