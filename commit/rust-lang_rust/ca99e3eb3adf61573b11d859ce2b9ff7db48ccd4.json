{"sha": "ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTllM2ViM2FkZjYxNTczYjExZDg1OWNlMmI5ZmY3ZGI0OGNjZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T12:25:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T12:25:10Z"}, "message": "Auto merge of #86922 - joshtriplett:target-abi, r=oli-obk\n\ntarget abi\n\nImplement cfg(target_abi) (RFC 2992)\n\nAdd an `abi` field to `TargetOptions`, defaulting to \"\". Support using\n`cfg(target_abi = \"...\")` for conditional compilation on that field.\n\nGated by `feature(cfg_target_abi)`.\n\nAdd a test for `target_abi`, and a test for the feature gate.\n\nAdd `target_abi` to tidy as a platform-specific cfg.\n\nUpdate targets to use `target_abi`\n\nAll eabi targets have `target_abi = \"eabi\".`\nAll eabihf targets have `target_abi = \"eabihf\"`.\n`armv6_unknown_freebsd` and `armv7_unknown_freebsd` have `target_abi = \"eabihf\"`.\nAll abi64 targets have `target_abi = \"abi64\"`.\nAll ilp32 targets have `target_abi = \"ilp32\"`.\nAll softfloat targets have `target_abi = \"softfloat\"`.\nAll *-uwp-windows-* targets have `target_abi = \"uwp\"`.\nAll spe targets have `target_abi = \"spe\"`.\nAll macabi targets have `target_abi = \"macabi\"`.\naarch64-apple-ios-sim has `target_abi = \"sim\"`.\n`x86_64-fortanix-unknown-sgx` has `target_abi = \"fortanix\"`.\n`x86_64-unknown-linux-gnux32` has `target_abi = \"x32\"`.\n\nAdd FIXME entries for targets for which existing values need to change\nonce `cfg_target_abi` becomes stable. (All of them are tier 3 targets.)\n\nAdd a test for `target_abi` in `--print cfg`.", "tree": {"sha": "4358d504c5ce2e1fe670ae4d3bbebc74a03d5f48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4358d504c5ce2e1fe670ae4d3bbebc74a03d5f48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "html_url": "https://github.com/rust-lang/rust/commit/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aff6dd07a562a2cba3c57fc3460a72acb6bef46", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aff6dd07a562a2cba3c57fc3460a72acb6bef46", "html_url": "https://github.com/rust-lang/rust/commit/5aff6dd07a562a2cba3c57fc3460a72acb6bef46"}, {"sha": "c3fbafddc06fda5f282790c9c16378d7786cbe03", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fbafddc06fda5f282790c9c16378d7786cbe03", "html_url": "https://github.com/rust-lang/rust/commit/c3fbafddc06fda5f282790c9c16378d7786cbe03"}], "stats": {"total": 178, "additions": 170, "deletions": 8}, "files": [{"sha": "ede510b6936798717b62109140994d26ac27b969", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -684,6 +684,9 @@ declare_features! (\n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n     (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n \n+    /// Allows `cfg(target_abi = \"...\")`.\n+    (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "77d8f0f920c145846d9559c9e59982276800e719", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -23,6 +23,7 @@ pub type GatedCfg = (Symbol, Symbol, GateFn);\n /// `cfg(...)`'s that are feature gated.\n const GATED_CFGS: &[GatedCfg] = &[\n     // (name in cfg, feature, function to check if the feature is enabled)\n+    (sym::target_abi, sym::cfg_target_abi, cfg_fn!(cfg_target_abi)),\n     (sym::target_thread_local, sym::cfg_target_thread_local, cfg_fn!(cfg_target_thread_local)),\n     (sym::target_has_atomic, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),\n     (sym::target_has_atomic_load_store, sym::cfg_target_has_atomic, cfg_fn!(cfg_target_has_atomic)),"}, {"sha": "b444f66258a8e8d76413f5fa4677eb86b4705866", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -805,6 +805,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     let wordsz = sess.target.pointer_width.to_string();\n     let os = &sess.target.os;\n     let env = &sess.target.env;\n+    let abi = &sess.target.abi;\n     let vendor = &sess.target.vendor;\n     let min_atomic_width = sess.target.min_atomic_width();\n     let max_atomic_width = sess.target.max_atomic_width();\n@@ -814,7 +815,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     });\n \n     let mut ret = FxHashSet::default();\n-    ret.reserve(6); // the minimum number of insertions\n+    ret.reserve(7); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n     for fam in &sess.target.families {\n@@ -829,6 +830,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n+    ret.insert((sym::target_abi, Some(Symbol::intern(abi))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n     if sess.target.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));"}, {"sha": "07f22159f96c85d4e2bf58f42e497e98a443d594", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -354,6 +354,7 @@ symbols! {\n         cfg_eval,\n         cfg_panic,\n         cfg_sanitize,\n+        cfg_target_abi,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n         cfg_target_thread_local,\n@@ -1203,6 +1204,7 @@ symbols! {\n         sync,\n         sync_trait,\n         t32,\n+        target_abi,\n         target_arch,\n         target_endian,\n         target_env,"}, {"sha": "e05360ea45c6c5b677f07ace67752a0a11f3a31b", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,11 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), endian: Endian::Big, ..base },\n+        options: TargetOptions {\n+            abi: \"ilp32\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            endian: Endian::Big,\n+            ..base\n+        },\n     }\n }"}, {"sha": "8522405f61feb50fbb2972a9990f72994b6816f6", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n+            abi: \"ilp32\".to_string(),\n             max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".to_string(),\n             ..super::linux_gnu_base::opts()"}, {"sha": "fa93ca80549cf1abc5656565809334845faccc66", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        abi: \"softfloat\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),"}, {"sha": "39bc699eef04a366bba8d4b03e253bc9038bf34d", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -14,6 +14,15 @@ pub enum Arch {\n     Arm64_sim,\n }\n \n+fn target_abi(arch: Arch) -> String {\n+    match arch {\n+        Armv7 | Armv7s | Arm64 | I386 | X86_64 => \"\",\n+        X86_64_macabi | Arm64_macabi => \"macabi\",\n+        Arm64_sim => \"sim\",\n+    }\n+    .to_string()\n+}\n+\n fn target_cpu(arch: Arch) -> String {\n     match arch {\n         Armv7 => \"cortex-a8\", // iOS7 is supported on iPhone 4 and higher\n@@ -39,6 +48,7 @@ fn link_env_remove(arch: Arch) -> Vec<String> {\n \n pub fn opts(os: &str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n+        abi: target_abi(arch),\n         cpu: target_cpu(arch),\n         dynamic_linking: false,\n         executables: true,"}, {"sha": "9b5366c576ec6a30b54b0113d61b509a300fb841", "filename": "compiler/rustc_target/src/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_linux_androideabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             // https://developer.android.com/ndk/guides/abis.html#armeabi\n             features: \"+strict-align,+v5te\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "442f56d4fb5de73ed6697295dca4a304646ad2da", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+strict-align,+v6\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "2c12a71e29fb825ee9a2a1e57dcf5cfc31da9392", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "d187dfd918955d0d1c717b08a5692c822daf93a7", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             // Most of these settings are copied from the arm_unknown_linux_gnueabi\n             // target.\n             features: \"+strict-align,+v6\".to_string(),"}, {"sha": "3d72734f5fadc5bb8fb81cce0cd834601451d206", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n             // target.\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),"}, {"sha": "c98a12cfc4977f7d392340ad3543193e49fac5c0", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,"}, {"sha": "292635403fbd476c9d4bc12eb214a960b4fed986", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,"}, {"sha": "f1b193a384fc1bc9fc1d01d5eb454fde2ac58eb7", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),"}, {"sha": "a6c4f2304c2c12f83a6e98c904f98a5d5b69d749", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),"}, {"sha": "de2a350e23120b685ebffcfdcf04985dc7b0a6d6", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),"}, {"sha": "91b4bd27caa8124b8f56d429b3fc82ed0a322ca6", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_uclibceabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_uclibceabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+soft-float,+strict-align\".to_string(),\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),"}, {"sha": "ee2f8f6238b592165f4fce97680269b3e4ba93b3", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,8 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n+            // FIXME: change env to \"gnu\" when cfg_target_abi becomes stable\n             env: \"gnueabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "b046819d4d78442c0a0aa9e16240630fbe30e415", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,8 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n+            // FIXME: remove env when cfg_target_abi becomes stable\n             env: \"eabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "55956f3bad4fa7cad5be88bb6b8c4b2aa6977ada", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             ..base"}, {"sha": "fbfb1c27681eaa81de06c6b5191fef2711f72637", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,8 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n+            // FIXME: change env to \"gnu\" when cfg_target_abi becomes stable\n             env: \"gnueabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "0a3b8033dd17ccd58497a497ed6619248afceb04", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "662b81cae3e65acbdaff42f546ac613f77e77815", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "c0fd1de17cfdd976637d85ac763e4b0c04976a26", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -16,6 +16,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "67ff7999dea856f51e959c434aa6bcdcc66f6853", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -15,6 +15,7 @@ pub fn target() -> Target {\n         // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "60a552b018d69fab91a9f49a0056deefd82dc842", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,8 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n+            // FIXME: remove env when cfg_target_abi becomes stable\n             env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "27d404b101f3a4de12b5e7625a5d1cdd40c52526", "filename": "compiler/rustc_target/src/spec/armv7_wrs_vxworks_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_wrs_vxworks_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "8bff60e9ed99a64f5f4ca87f7558ac4222441b8c", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -18,6 +18,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        abi: \"eabi\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),"}, {"sha": "ea2751e375e0b6078145c92c34fff2e1372d50d9", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -9,6 +9,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n+        abi: \"eabihf\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),"}, {"sha": "c695542805599b00a40a63f02a2e157c6043b8f3", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "50c37021b74e9b9b93529e15e656999741d5080f", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "161a27ab6890b452edfe7ab5e53d0a7a626588ea", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n             endian: Endian::Big,\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),"}, {"sha": "a898464569813aacf43f76e8e7ed30131ec82740", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -12,6 +12,11 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n+            endian: Endian::Big,\n+            mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "2f58560d45021944666871357b8fc472abe374a7", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),"}, {"sha": "01c34bc39924f1afdec9436a0d98f817471e2d30", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { abi: \"abi64\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "80a155a4865d7fc8b25781684e553cdc6a0bc10f", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -8,6 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n             endian: Endian::Big,\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),"}, {"sha": "58f9862715f73099b3881d86e202d756659ed3ed", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),"}, {"sha": "aa7dbeb16f21c2201be306696dc3d21c6dc3fed9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -1025,6 +1025,9 @@ pub struct TargetOptions {\n     pub os: String,\n     /// Environment name to use for conditional compilation (`target_env`). Defaults to \"\".\n     pub env: String,\n+    /// ABI name to distinguish multiple ABIs on the same OS and architecture. For instance, `\"eabi\"`\n+    /// or `\"eabihf\"`. Defaults to \"\".\n+    pub abi: String,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: String,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n@@ -1342,6 +1345,7 @@ impl Default for TargetOptions {\n             c_int_width: \"32\".to_string(),\n             os: \"none\".to_string(),\n             env: String::new(),\n+            abi: String::new(),\n             vendor: \"unknown\".to_string(),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n@@ -1919,6 +1923,7 @@ impl Target {\n         key!(c_int_width = \"target-c-int-width\");\n         key!(os);\n         key!(env);\n+        key!(abi);\n         key!(vendor);\n         key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n@@ -2152,6 +2157,7 @@ impl ToJson for Target {\n         target_option_val!(c_int_width, \"target-c-int-width\");\n         target_option_val!(os);\n         target_option_val!(env);\n+        target_option_val!(abi);\n         target_option_val!(vendor);\n         target_option_val!(linker_flavor);\n         target_option_val!(linker);"}, {"sha": "362d8a104e448d5b89f8613167902592eff8bd32", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,11 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions {\n+            abi: \"spe\".to_string(),\n+            endian: Endian::Big,\n+            mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n     }\n }"}, {"sha": "a2b85f7dd869afc4c4ff1b6f1b0874a17e6b49fe", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -13,6 +13,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n+            abi: \"spe\".to_string(),\n             endian: Endian::Big,\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),"}, {"sha": "f86efd5d0f49081c7f0466f4cec7b643b0ad30e5", "filename": "compiler/rustc_target/src/spec/thumbv4t_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv4t_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -26,6 +26,7 @@ pub fn target() -> Target {\n          */\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             linker_flavor: LinkerFlavor::Ld,\n             linker: Some(\"arm-none-eabi-ld\".to_string()),\n "}, {"sha": "40e3281060f9fa9f6608a9461cb915e33c1e8c78", "filename": "compiler/rustc_target/src/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv6m_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             // The ARMv6-M architecture doesn't support unaligned loads/stores so we disable them\n             // with +strict-align.\n             features: \"+strict-align\".to_string(),"}, {"sha": "107474a86bbb28c496fc96d4e84afee42e0adc6c", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -18,6 +18,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n \n-        options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n+        options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n+            max_atomic_width: Some(32),\n+            ..super::thumb_base::opts()\n+        },\n     }\n }"}, {"sha": "65fc0db65285d8b936ceea752ff0d3e5dd0f50da", "filename": "compiler/rustc_target/src/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n             // Cortex-M7 (vfp5)\n             // `-d32` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers"}, {"sha": "ff939348c35f3aad006c06698a350dccd2df2d04", "filename": "compiler/rustc_target/src/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7m_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -9,6 +9,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n \n-        options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n+        options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n+            max_atomic_width: Some(32),\n+            ..super::thumb_base::opts()\n+        },\n     }\n }"}, {"sha": "fcb7b5d718cfbc8b7406446a549be51ea75feadc", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n             ..base"}, {"sha": "9d34d9ac874b0ee43d2369eb1aa0cb8a88074dba", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -13,6 +13,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),"}, {"sha": "4e339cbd6be27e9a9129e2d1f3d0d36af5fe59ec", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -19,6 +19,7 @@ pub fn target() -> Target {\n         // Most of these settings are copied from the thumbv7neon_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             features: \"+v7,+thumb-mode,+thumb2,+vfp3,+neon\".to_string(),\n             max_atomic_width: Some(64),\n             mcount: \"\\u{1}mcount\".to_string(),"}, {"sha": "ef0f52d21992c0fdebb2780919593102f4c5f12b", "filename": "compiler/rustc_target/src/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n             // ARMv8-M baseline doesn't support unaligned loads/stores so we disable them\n             // with +strict-align.\n             features: \"+strict-align\".to_string(),"}, {"sha": "dbd184debcb083f1d180b75cc8844bc64f42e0ba", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -10,6 +10,10 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n \n-        options: TargetOptions { max_atomic_width: Some(32), ..super::thumb_base::opts() },\n+        options: TargetOptions {\n+            abi: \"eabi\".to_string(),\n+            max_atomic_width: Some(32),\n+            ..super::thumb_base::opts()\n+        },\n     }\n }"}, {"sha": "3caf705421c6d35d6bab3ed6499ad854a59d381a", "filename": "compiler/rustc_target/src/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -11,6 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n+            abi: \"eabihf\".to_string(),\n             // If the Floating Point extension is implemented in the Cortex-M33\n             // processor, the Cortex-M33 Technical Reference Manual states that\n             // the FPU uses the FPv5 architecture, single-precision instructions"}, {"sha": "86df816f10dc214d019700352596fdd6cef17f05", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -25,6 +25,7 @@ pub fn opts() -> TargetOptions {\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n+        abi: \"uwp\".to_string(),\n         vendor: \"uwp\".to_string(),\n         executables: false,\n         limit_rdylib_exports: false,"}, {"sha": "7b56b468c28ed2a2050297f28775d36ba177fbea", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n+    opts.abi = \"uwp\".to_string();\n     opts.vendor = \"uwp\".to_string();\n     let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n     opts.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());"}, {"sha": "59cd56ebcd535eb8d0a00d2c3f99b7c4e5a87d4e", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -55,6 +55,7 @@ pub fn target() -> Target {\n         os: \"unknown\".into(),\n         env: \"sgx\".into(),\n         vendor: \"fortanix\".into(),\n+        abi: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "1ffaa9b78c85ef6d7aae8e869f68d4965ef3fcb7", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".to_string();\n+    base.abi = \"x32\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".to_string());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved"}, {"sha": "013bf3baca45f1d18d321ba80ea4641bbc72ecbc", "filename": "src/test/run-make-fulldeps/print-cfg/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-cfg%2FMakefile?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -6,6 +6,8 @@ all: default\n \t$(RUSTC) --target i686-pc-windows-msvc --print cfg | $(CGREP) msvc\n \t$(RUSTC) --target i686-apple-darwin --print cfg | $(CGREP) macos\n \t$(RUSTC) --target i686-unknown-linux-gnu --print cfg | $(CGREP) gnu\n+\t$(RUSTC) --target arm-unknown-linux-gnueabihf --print cfg | $(CGREP) target_abi=\n+\t$(RUSTC) --target arm-unknown-linux-gnueabihf --print cfg | $(CGREP) eabihf\n \n ifdef IS_WINDOWS\n default:"}, {"sha": "acc570fc84314ef65b1cafbb75eaff49a781e1cd", "filename": "src/test/ui/cfg/cfg-target-abi.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-abi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+#![feature(cfg_target_abi)]\n+\n+#[cfg(target_abi = \"eabihf\")]\n+pub fn main() {\n+}\n+\n+#[cfg(not(target_abi = \"eabihf\"))]\n+pub fn main() {\n+}"}, {"sha": "f26514939800a0023316753110d62027106f54df", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-abi.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -0,0 +1,11 @@\n+#[cfg(target_abi = \"x\")] //~ ERROR `cfg(target_abi)` is experimental\n+#[cfg_attr(target_abi = \"x\", x)] //~ ERROR `cfg(target_abi)` is experimental\n+struct Foo(u64, u64);\n+\n+#[cfg(not(any(all(target_abi = \"x\"))))] //~ ERROR `cfg(target_abi)` is experimental\n+fn foo() {}\n+\n+fn main() {\n+    cfg!(target_abi = \"x\");\n+    //~^ ERROR `cfg(target_abi)` is experimental and subject to change\n+}"}, {"sha": "ed8cbcbe4f017ffb4cbfdf9b631101a4399ef609", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-abi.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-abi.stderr?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:2:12\n+   |\n+LL | #[cfg_attr(target_abi = \"x\", x)]\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:1:7\n+   |\n+LL | #[cfg(target_abi = \"x\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:5:19\n+   |\n+LL | #[cfg(not(any(all(target_abi = \"x\"))))]\n+   |                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(target_abi)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-abi.rs:9:10\n+   |\n+LL |     cfg!(target_abi = \"x\");\n+   |          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #80970 <https://github.com/rust-lang/rust/issues/80970> for more information\n+   = help: add `#![feature(cfg_target_abi)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "24a100187797256866b86df0d2f5cb8d2e7fb427", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "patch": "@@ -122,6 +122,7 @@ fn check_cfgs(\n \n         let contains_platform_specific_cfg = cfg.contains(\"target_os\")\n             || cfg.contains(\"target_env\")\n+            || cfg.contains(\"target_abi\")\n             || cfg.contains(\"target_vendor\")\n             || cfg.contains(\"unix\")\n             || cfg.contains(\"windows\");"}]}