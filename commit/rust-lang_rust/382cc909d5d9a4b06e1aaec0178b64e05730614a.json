{"sha": "382cc909d5d9a4b06e1aaec0178b64e05730614a", "node_id": "C_kwDOAAsO6NoAKDM4MmNjOTA5ZDVkOWE0YjA2ZTFhYWVjMDE3OGI2NGUwNTczMDYxNGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-07T08:34:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-11T22:41:01Z"}, "message": "Make the check for cache opt-in.", "tree": {"sha": "5f8ddce3c5c7cd134ce5f55d74f9d25576aba0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f8ddce3c5c7cd134ce5f55d74f9d25576aba0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382cc909d5d9a4b06e1aaec0178b64e05730614a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382cc909d5d9a4b06e1aaec0178b64e05730614a", "html_url": "https://github.com/rust-lang/rust/commit/382cc909d5d9a4b06e1aaec0178b64e05730614a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382cc909d5d9a4b06e1aaec0178b64e05730614a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "facf1e017d2372364aafc6289278117281bb0d1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/facf1e017d2372364aafc6289278117281bb0d1f", "html_url": "https://github.com/rust-lang/rust/commit/facf1e017d2372364aafc6289278117281bb0d1f"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "05219efe5f54d06c1e4be37dd90794c9c5d143e4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=382cc909d5d9a4b06e1aaec0178b64e05730614a", "patch": "@@ -99,6 +99,11 @@ pub struct TyCtxtEnsure<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n+#[derive(Copy, Clone)]\n+pub struct TyCtxtEnsureWithValue<'tcx> {\n+    pub tcx: TyCtxt<'tcx>,\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n     /// are executed instead of just returning their results.\n@@ -107,6 +112,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         TyCtxtEnsure { tcx: self }\n     }\n \n+    /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n+    /// are executed instead of just returning their results.\n+    ///\n+    /// This version verifies that the computed result exists in the cache before returning.\n+    #[inline(always)]\n+    pub fn ensure_with_value(self) -> TyCtxtEnsureWithValue<'tcx> {\n+        TyCtxtEnsureWithValue { tcx: self }\n+    }\n+\n     /// Returns a transparent wrapper for `TyCtxt` which uses\n     /// `span` as the location of queries performed through it.\n     #[inline(always)]\n@@ -314,7 +328,31 @@ macro_rules! define_callbacks {\n \n                 match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(_) => return,\n-                    None => self.tcx.queries.$name(self.tcx, DUMMY_SP, key, QueryMode::Ensure),\n+                    None => self.tcx.queries.$name(\n+                        self.tcx,\n+                        DUMMY_SP,\n+                        key,\n+                        QueryMode::Ensure { check_cache: false },\n+                    ),\n+                };\n+            })*\n+        }\n+\n+        impl<'tcx> TyCtxtEnsureWithValue<'tcx> {\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n+                let key = key.into_query_param();\n+                opt_remap_env_constness!([$($modifiers)*][key]);\n+\n+                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n+                    Some(_) => return,\n+                    None => self.tcx.queries.$name(\n+                        self.tcx,\n+                        DUMMY_SP,\n+                        key,\n+                        QueryMode::Ensure { check_cache: true },\n+                    ),\n                 };\n             })*\n         }"}, {"sha": "70d5fc2d9588ae530a91b814e87545d55b061e67", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=382cc909d5d9a4b06e1aaec0178b64e05730614a", "patch": "@@ -50,12 +50,12 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     // Ensure unsafeck and abstract const building is ran before we steal the THIR.\n     match def {\n         ty::WithOptConstParam { did, const_param_did: Some(const_param_did) } => {\n-            tcx.ensure().thir_check_unsafety_for_const_arg((did, const_param_did));\n-            tcx.ensure().thir_abstract_const_of_const_arg((did, const_param_did));\n+            tcx.ensure_with_value().thir_check_unsafety_for_const_arg((did, const_param_did));\n+            tcx.ensure_with_value().thir_abstract_const_of_const_arg((did, const_param_did));\n         }\n         ty::WithOptConstParam { did, const_param_did: None } => {\n-            tcx.ensure().thir_check_unsafety(did);\n-            tcx.ensure().thir_abstract_const(did);\n+            tcx.ensure_with_value().thir_check_unsafety(did);\n+            tcx.ensure_with_value().thir_abstract_const(did);\n         }\n     }\n "}, {"sha": "1877692632891481c0f87b1b02aaf17fbaac2b0e", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=382cc909d5d9a4b06e1aaec0178b64e05730614a", "patch": "@@ -278,14 +278,14 @@ fn mir_const(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Steal<\n     // Unsafety check uses the raw mir, so make sure it is run.\n     if !tcx.sess.opts.unstable_opts.thir_unsafeck {\n         if let Some(param_did) = def.const_param_did {\n-            tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n+            tcx.ensure_with_value().unsafety_check_result_for_const_arg((def.did, param_did));\n         } else {\n-            tcx.ensure().unsafety_check_result(def.did);\n+            tcx.ensure_with_value().unsafety_check_result(def.did);\n         }\n     }\n \n     // has_ffi_unwind_calls query uses the raw mir, so make sure it is run.\n-    tcx.ensure().has_ffi_unwind_calls(def.did);\n+    tcx.ensure_with_value().has_ffi_unwind_calls(def.did);\n \n     let mut body = tcx.mir_built(def).steal();\n \n@@ -433,7 +433,7 @@ fn mir_drops_elaborated_and_const_checked(\n     if tcx.sess.opts.unstable_opts.drop_tracking_mir\n         && let DefKind::Generator = tcx.def_kind(def.did)\n     {\n-        tcx.ensure().mir_generator_witnesses(def.did);\n+        tcx.ensure_with_value().mir_generator_witnesses(def.did);\n     }\n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);\n \n@@ -613,7 +613,7 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n         // Run the `mir_for_ctfe` query, which depends on `mir_drops_elaborated_and_const_checked`\n         // which we are going to steal below. Thus we need to run `mir_for_ctfe` first, so it\n         // computes and caches its result.\n-        Some(hir::ConstContext::ConstFn) => tcx.ensure().mir_for_ctfe(did),\n+        Some(hir::ConstContext::ConstFn) => tcx.ensure_with_value().mir_for_ctfe(did),\n         None => {}\n         Some(other) => panic!(\"do not use `optimized_mir` for constants: {:?}\", other),\n     }"}, {"sha": "04ab2b767e217090a07d75c1cd3e3acb3e23f835", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382cc909d5d9a4b06e1aaec0178b64e05730614a/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=382cc909d5d9a4b06e1aaec0178b64e05730614a", "patch": "@@ -711,6 +711,7 @@ fn ensure_must_run<Q, Qcx>(\n     query: Q,\n     qcx: Qcx,\n     key: &Q::Key,\n+    check_cache: bool,\n ) -> (bool, Option<DepNode<Qcx::DepKind>>)\n where\n     Q: QueryConfig<Qcx>,\n@@ -743,14 +744,19 @@ where\n         }\n     };\n \n+    // We do not need the value at all, so do not check the cache.\n+    if !check_cache {\n+        return (false, None);\n+    }\n+\n     let loadable = query.loadable_from_disk(qcx, key, serialized_dep_node_index);\n     (!loadable, Some(dep_node))\n }\n \n #[derive(Debug)]\n pub enum QueryMode {\n     Get,\n-    Ensure,\n+    Ensure { check_cache: bool },\n }\n \n #[inline(always)]\n@@ -765,8 +771,8 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n-    let dep_node = if let QueryMode::Ensure = mode {\n-        let (must_run, dep_node) = ensure_must_run(query, qcx, &key);\n+    let dep_node = if let QueryMode::Ensure { check_cache } = mode {\n+        let (must_run, dep_node) = ensure_must_run(query, qcx, &key, check_cache);\n         if !must_run {\n             return None;\n         }"}]}