{"sha": "3c17abc4d955080baa410e9b697bf5be37b0d079", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMTdhYmM0ZDk1NTA4MGJhYTQxMGU5YjY5N2JmNWJlMzdiMGQwNzk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-11-10T20:48:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-11-11T18:53:02Z"}, "message": "On fmt string with unescaped `{` note how to escape\n\nOn cases of malformed format strings where a `{` hasn't been properly\nescaped, like `println!(\"{\");`, present a note explaining how to escape\nthe `{` char.", "tree": {"sha": "531680cea42538c21e727d5ea930d850343862e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/531680cea42538c21e727d5ea930d850343862e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c17abc4d955080baa410e9b697bf5be37b0d079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c17abc4d955080baa410e9b697bf5be37b0d079", "html_url": "https://github.com/rust-lang/rust/commit/3c17abc4d955080baa410e9b697bf5be37b0d079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c17abc4d955080baa410e9b697bf5be37b0d079/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da2ce2276873242a101f205537e7ce297d68f8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ce2276873242a101f205537e7ce297d68f8dd", "html_url": "https://github.com/rust-lang/rust/commit/da2ce2276873242a101f205537e7ce297d68f8dd"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "b179a16e55e5885b6bdb07caa70ef9b044ca2786", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=3c17abc4d955080baa410e9b697bf5be37b0d079", "patch": "@@ -139,7 +139,7 @@ pub struct Parser<'a> {\n     input: &'a str,\n     cur: iter::Peekable<str::CharIndices<'a>>,\n     /// Error messages accumulated during parsing\n-    pub errors: Vec<string::String>,\n+    pub errors: Vec<(string::String, Option<string::String>)>,\n     /// Current position of implicit positional argument pointer\n     curarg: usize,\n }\n@@ -165,7 +165,9 @@ impl<'a> Iterator for Parser<'a> {\n                     if self.consume('}') {\n                         Some(String(self.string(pos + 1)))\n                     } else {\n-                        self.err(\"unmatched `}` found\");\n+                        self.err_with_note(\"unmatched `}` found\",\n+                                           \"if you intended to print `}`, \\\n+                                           you can escape it using `}}`\");\n                         None\n                     }\n                 }\n@@ -192,7 +194,14 @@ impl<'a> Parser<'a> {\n     /// String, but I think it does when this eventually uses conditions so it\n     /// might as well start using it now.\n     fn err(&mut self, msg: &str) {\n-        self.errors.push(msg.to_owned());\n+        self.errors.push((msg.to_owned(), None));\n+    }\n+\n+    /// Notifies of an error. The message doesn't actually need to be of type\n+    /// String, but I think it does when this eventually uses conditions so it\n+    /// might as well start using it now.\n+    fn err_with_note(&mut self, msg: &str, note: &str) {\n+        self.errors.push((msg.to_owned(), Some(note.to_owned())));\n     }\n \n     /// Optionally consumes the specified character. If the character is not at\n@@ -222,7 +231,13 @@ impl<'a> Parser<'a> {\n                 self.err(&format!(\"expected `{:?}`, found `{:?}`\", c, maybe));\n             }\n         } else {\n-            self.err(&format!(\"expected `{:?}` but string was terminated\", c));\n+            let msg = &format!(\"expected `{:?}` but string was terminated\", c);\n+            if c == '}' {\n+                self.err_with_note(msg,\n+                                   \"if you intended to print `{`, you can escape it using `{{`\");\n+            } else {\n+                self.err(msg);\n+            }\n         }\n     }\n "}, {"sha": "16c1ab7957604a1f291a9dadb45397ea895dea70", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=3c17abc4d955080baa410e9b697bf5be37b0d079", "patch": "@@ -756,8 +756,12 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     }\n \n     if !parser.errors.is_empty() {\n-        cx.ecx.span_err(cx.fmtsp,\n-                        &format!(\"invalid format string: {}\", parser.errors.remove(0)));\n+        let (err, note) = parser.errors.remove(0);\n+        let mut e = cx.ecx.struct_span_err(cx.fmtsp, &format!(\"invalid format string: {}\", err));\n+        if let Some(note) = note {\n+            e.note(&note);\n+        }\n+        e.emit();\n         return DummyResult::raw_expr(sp);\n     }\n     if !cx.literal.is_empty() {"}, {"sha": "ec715b3f0ba62f9e618ead0a00b5a00ebdd00e3d", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=3c17abc4d955080baa410e9b697bf5be37b0d079", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{\");\n+    println!(\"{{}}\");\n+    println!(\"}\");\n+}\n+"}, {"sha": "58b392f0b8d658fc1df9896a3568b05b9338bf23", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c17abc4d955080baa410e9b697bf5be37b0d079/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=3c17abc4d955080baa410e9b697bf5be37b0d079", "patch": "@@ -0,0 +1,20 @@\n+error: invalid format string: expected `'}'` but string was terminated\n+  --> $DIR/format-string-error.rs:12:5\n+   |\n+12 |     println!(\"{\");\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: invalid format string: unmatched `}` found\n+  --> $DIR/format-string-error.rs:14:5\n+   |\n+14 |     println!(\"}\");\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: if you intended to print `}`, you can escape it using `}}`\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to 2 previous errors\n+"}]}