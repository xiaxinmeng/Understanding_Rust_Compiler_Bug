{"sha": "6d682c9adc12c5aee1bac37afa15f01b420be8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNjgyYzlhZGMxMmM1YWVlMWJhYzM3YWZhMTVmMDFiNDIwYmU4ZWU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T10:45:44Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T22:07:40Z"}, "message": "Stop using deprecated NonZero APIs\n\nThese will eventually be removed\n(though the NonZero<T> lang item will likely stay).", "tree": {"sha": "955e1ef4ff65cb54c472f7e7cc62f55541f9611a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955e1ef4ff65cb54c472f7e7cc62f55541f9611a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d682c9adc12c5aee1bac37afa15f01b420be8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d682c9adc12c5aee1bac37afa15f01b420be8ee", "html_url": "https://github.com/rust-lang/rust/commit/6d682c9adc12c5aee1bac37afa15f01b420be8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d682c9adc12c5aee1bac37afa15f01b420be8ee/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f7a0295828c0d75b5487d89343e722b406dd5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f7a0295828c0d75b5487d89343e722b406dd5f", "html_url": "https://github.com/rust-lang/rust/commit/22f7a0295828c0d75b5487d89343e722b406dd5f"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "4ab0ceb796773a1f554a1bb70b71493f10e8b221", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6d682c9adc12c5aee1bac37afa15f01b420be8ee/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d682c9adc12c5aee1bac37afa15f01b420be8ee/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=6d682c9adc12c5aee1bac37afa15f01b420be8ee", "patch": "@@ -2341,17 +2341,21 @@ impl<T: ?Sized> Unique<T> {\n     ///\n     /// `ptr` must be non-null.\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        Unique { pointer: NonZero::new_unchecked(ptr), _marker: PhantomData }\n+        Unique { pointer: NonZero(ptr as _), _marker: PhantomData }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| Unique { pointer: nz, _marker: PhantomData })\n+        if !ptr.is_null() {\n+            Some(Unique { pointer: NonZero(ptr as _), _marker: PhantomData })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n     pub fn as_ptr(self) -> *mut T {\n-        self.pointer.get() as *mut T\n+        self.pointer.0 as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -2397,15 +2401,15 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n #[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        Unique { pointer: NonZero::from(reference), _marker: PhantomData }\n+        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n     }\n }\n \n@@ -2476,19 +2480,23 @@ impl<T: ?Sized> NonNull<T> {\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        NonNull { pointer: NonZero::new_unchecked(ptr) }\n+        NonNull { pointer: NonZero(ptr as _) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n+        if !ptr.is_null() {\n+            Some(NonNull { pointer: NonZero(ptr as _) })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn as_ptr(self) -> *mut T {\n-        self.pointer.get() as *mut T\n+        self.pointer.0 as *mut T\n     }\n \n     /// Dereferences the content.\n@@ -2589,14 +2597,14 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n #[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        NonNull { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero(reference as _) }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[allow(deprecated)]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n-        NonNull { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero(reference as _) }\n     }\n }"}]}