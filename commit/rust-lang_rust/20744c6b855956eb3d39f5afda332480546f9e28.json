{"sha": "20744c6b855956eb3d39f5afda332480546f9e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzQ0YzZiODU1OTU2ZWIzZDM5ZjVhZmRhMzMyNDgwNTQ2ZjllMjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T15:28:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:24Z"}, "message": "Allow shift operator to take any integral type (and add a test).", "tree": {"sha": "9e4412387cec6875e1cdb9852672d68c024244c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4412387cec6875e1cdb9852672d68c024244c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20744c6b855956eb3d39f5afda332480546f9e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20744c6b855956eb3d39f5afda332480546f9e28", "html_url": "https://github.com/rust-lang/rust/commit/20744c6b855956eb3d39f5afda332480546f9e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20744c6b855956eb3d39f5afda332480546f9e28/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f53b0a5b5a2e0320689885ee606ea4b61f4c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f53b0a5b5a2e0320689885ee606ea4b61f4c56", "html_url": "https://github.com/rust-lang/rust/commit/a0f53b0a5b5a2e0320689885ee606ea4b61f4c56"}], "stats": {"total": 115, "additions": 113, "deletions": 2}, "files": [{"sha": "a6df676e63c8f429d20c10adfa5d6f8e599f8c87", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20744c6b855956eb3d39f5afda332480546f9e28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20744c6b855956eb3d39f5afda332480546f9e28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=20744c6b855956eb3d39f5afda332480546f9e28", "patch": "@@ -3208,8 +3208,24 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         if ty::type_is_integral(lhs_t) && ast_util::is_shift_binop(op) {\n             // Shift is a special case: rhs must be uint, no matter what lhs is\n-            check_expr_has_type(fcx, &**rhs, fcx.tcx().types.uint);\n-            fcx.write_ty(expr.id, lhs_t);\n+            check_expr(fcx, &**rhs);\n+            let rhs_ty = fcx.expr_ty(&**rhs);\n+            let rhs_ty = fcx.infcx().resolve_type_vars_if_possible(&rhs_ty);\n+            if ty::type_is_integral(rhs_ty) {\n+                fcx.write_ty(expr.id, lhs_t);\n+            } else {\n+                fcx.type_error_message(\n+                    expr.span,\n+                    |actual| {\n+                        format!(\n+                            \"right-hand-side of a shift operation must have integral type, \\\n+                             not `{}`\",\n+                            actual)\n+                    },\n+                    rhs_ty,\n+                    None);\n+                fcx.write_ty(expr.id, fcx.tcx().types.err);\n+            }\n             return;\n         }\n "}, {"sha": "6287d79e15d7d9b7c06d8266eedad6830fec8738", "filename": "src/test/compile-fail/shift-various-bad-types.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/20744c6b855956eb3d39f5afda332480546f9e28/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20744c6b855956eb3d39f5afda332480546f9e28/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs?ref=20744c6b855956eb3d39f5afda332480546f9e28", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can do shifts by any integral type.\n+\n+struct Panolpy {\n+    char: char,\n+    str: &'static str,\n+}\n+\n+fn foo(p: &Panolpy) {\n+    22 >> p.char;\n+    //~^ ERROR right-hand-side of a shift operation must have integral type\n+\n+    22 >> p.str;\n+    //~^ ERROR right-hand-side of a shift operation must have integral type\n+\n+    22 >> p;\n+    //~^ ERROR right-hand-side of a shift operation must have integral type\n+\n+    // We could be more accepting in the case of a type not yet inferred, but not\n+    // known to be an integer, but meh.\n+    let x;\n+    22 >> x;\n+    //~^ ERROR right-hand-side of a shift operation must have integral type\n+\n+    22 >> 1;\n+    // Integer literal types are OK\n+}\n+\n+fn main() {\n+}"}, {"sha": "3482dd4921b3853d2b63d1dea4f458786ba56749", "filename": "src/test/run-pass/shift-various-types.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/20744c6b855956eb3d39f5afda332480546f9e28/src%2Ftest%2Frun-pass%2Fshift-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20744c6b855956eb3d39f5afda332480546f9e28/src%2Ftest%2Frun-pass%2Fshift-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshift-various-types.rs?ref=20744c6b855956eb3d39f5afda332480546f9e28", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can do shifts by any integral type.\n+\n+struct Panolpy {\n+    i8: i8,\n+    i16: i16,\n+    i32: i32,\n+    i64: i64,\n+    isize: isize,\n+\n+    u8: u8,\n+    u16: u16,\n+    u32: u32,\n+    u64: u64,\n+    usize: usize,\n+}\n+\n+fn foo(p: &Panolpy) {\n+    assert_eq!(22 >> p.i8, 11_i8);\n+    assert_eq!(22 >> p.i16, 11_i16);\n+    assert_eq!(22 >> p.i32, 11_i32);\n+    assert_eq!(22 >> p.i64, 11_i64);\n+    assert_eq!(22 >> p.isize, 11_is);\n+\n+    assert_eq!(22 >> p.u8, 11_u8);\n+    assert_eq!(22 >> p.u16, 11_u16);\n+    assert_eq!(22 >> p.u32, 11_u32);\n+    assert_eq!(22 >> p.u64, 11_u64);\n+    assert_eq!(22 >> p.usize, 11_us);\n+}\n+\n+fn main() {\n+    let p = Panolpy {\n+        i8: 1,\n+        i16: 1,\n+        i32: 1,\n+        i64: 1,\n+        isize: 1,\n+\n+        u8: 1,\n+        u16: 1,\n+        u32: 1,\n+        u64: 1,\n+        usize: 1,\n+    };\n+    foo(&p)\n+}"}]}