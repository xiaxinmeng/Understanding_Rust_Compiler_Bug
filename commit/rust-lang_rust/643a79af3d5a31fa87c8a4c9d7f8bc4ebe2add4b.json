{"sha": "643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0M2E3OWFmM2Q1YTMxZmE4N2M4YTRjOWQ3ZjhiYzRlYmUyYWRkNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-28T12:09:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-28T12:09:50Z"}, "message": "Auto merge of #81149 - Aaron1011:feature/better-no-method-found-err, r=estebank\n\nAvoid describing a method as 'not found' when bounds are unsatisfied\n\nFixes #76267\n\nWhen there is a single applicable method candidate, but its trait bounds\nare not satisfied, we avoid saying that the method is \"not found\".\nInsted, we update the error message to directly mention which bounds are\nnot satisfied, rather than mentioning them in a note.", "tree": {"sha": "f0f8524b6fcb838e1d6729926c48d7b37502c787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0f8524b6fcb838e1d6729926c48d7b37502c787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "html_url": "https://github.com/rust-lang/rust/commit/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e190206e2ff0c13d64701d9b4145bf89a2d0cab", "html_url": "https://github.com/rust-lang/rust/commit/0e190206e2ff0c13d64701d9b4145bf89a2d0cab"}, {"sha": "dea8a16af55e319a41e9451959c68d7a24fcdc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea8a16af55e319a41e9451959c68d7a24fcdc5a", "html_url": "https://github.com/rust-lang/rust/commit/dea8a16af55e319a41e9451959c68d7a24fcdc5a"}], "stats": {"total": 272, "additions": 144, "deletions": 128}, "files": [{"sha": "37902dddff46d97bd7d2ddb91256568593ebc022", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -74,19 +74,18 @@ macro_rules! forward {\n         });\n     };\n \n-    // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n-    // type parameter. No obvious way to make this more generic.\n+    // Forward pattern for &mut self -> &mut Self, with generic parameters.\n     (\n         $(#[$attrs:meta])*\n-        pub fn $n:ident<S: Into<MultiSpan>>(\n+        pub fn $n:ident<$($generic:ident: $bound:path),*>(\n             &mut self,\n             $($name:ident: $ty:ty),*\n             $(,)?\n         ) -> &mut Self\n     ) => {\n         $(#[$attrs])*\n         forward_inner_docs!(concat!(\"See [`Diagnostic::\", stringify!($n), \"()`].\") =>\n-        pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n+        pub fn $n<$($generic: $bound),*>(&mut self, $($name: $ty),*) -> &mut Self {\n             self.0.diagnostic.$n($($name),*);\n             self\n         });\n@@ -398,6 +397,7 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    forward!(pub fn set_primary_message<M: Into<String>>(&mut self, msg: M) -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n "}, {"sha": "d49c7cae8222bd1865bd9e06d5f45b256a24a47d", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -446,6 +446,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n+                let mut label_span_not_found = || {\n+                    if unsatisfied_predicates.is_empty() {\n+                        err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n+                    } else {\n+                        err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n+                    }\n+                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n+                };\n+\n                 // If the method name is the name of a field with a function or closure type,\n                 // give a helping note that it has to be called as `(x.f)(...)`.\n                 if let SelfSource::MethodCall(expr) = source {\n@@ -501,12 +510,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let field_kind = if is_accessible { \"field\" } else { \"private field\" };\n                         err.span_label(item_name.span, format!(\"{}, not a method\", field_kind));\n                     } else if lev_candidate.is_none() && static_sources.is_empty() {\n-                        err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));\n-                        self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n+                        label_span_not_found();\n                     }\n                 } else {\n-                    err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));\n-                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(orig_span);\n+                    label_span_not_found();\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {\n@@ -721,10 +728,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .map(|(_, path)| path)\n                             .collect::<Vec<_>>()\n                             .join(\"\\n\");\n+                        let actual_prefix = actual.prefix_string();\n+                        err.set_primary_message(&format!(\n+                            \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, but its trait bounds were not satisfied\"\n+                        ));\n                         err.note(&format!(\n-                            \"the method `{}` exists but the following trait bounds were not \\\n-                             satisfied:\\n{}\",\n-                            item_name, bound_list\n+                            \"the following trait bounds were not satisfied:\\n{bound_list}\"\n                         ));\n                     }\n                 }\n@@ -742,7 +751,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                 }\n \n-                if actual.is_enum() {\n+                // Don't emit a suggestion if we found an actual method\n+                // that had unsatisfied trait bounds\n+                if unsatisfied_predicates.is_empty() && actual.is_enum() {\n                     let adt_def = actual.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggestion) = lev_distance::find_best_match_for_name(\n                         &adt_def.variants.iter().map(|s| s.ident.name).collect::<Vec<_>>(),\n@@ -778,17 +789,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_label(span, msg);\n                     }\n                 } else if let Some(lev_candidate) = lev_candidate {\n-                    let def_kind = lev_candidate.kind.as_def_kind();\n-                    err.span_suggestion(\n-                        span,\n-                        &format!(\n-                            \"there is {} {} with a similar name\",\n-                            def_kind.article(),\n-                            def_kind.descr(lev_candidate.def_id),\n-                        ),\n-                        lev_candidate.ident.to_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    // Don't emit a suggestion if we found an actual method\n+                    // that had unsatisfied trait bounds\n+                    if unsatisfied_predicates.is_empty() {\n+                        let def_kind = lev_candidate.kind.as_def_kind();\n+                        err.span_suggestion(\n+                            span,\n+                            &format!(\n+                                \"there is {} {} with a similar name\",\n+                                def_kind.article(),\n+                                def_kind.descr(lev_candidate.def_id),\n+                            ),\n+                            lev_candidate.ident.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                 }\n \n                 return Some(err);"}, {"sha": "ad92d816c98361327746a893d41604535cca0d14", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -60,6 +60,7 @@ This API is completely unstable and subject to change.\n #![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(nll)]"}, {"sha": "78ee28b17d4b393cbbfd6c5a53c47a38537e2a29", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -17,5 +17,5 @@ where\n \n fn main() {\n     1u32.f(\"abc\");\n-    //~^ ERROR no method named `f` found for type `u32` in the current scope\n+    //~^ ERROR the method\n }"}, {"sha": "043d1ac76de9a6c7bd0b9cac0e0a24714a69edda", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `f` found for type `u32` in the current scope\n+error[E0599]: the method `f` exists for type `u32`, but its trait bounds were not satisfied\n   --> $DIR/hr-associated-type-bound-2.rs:19:10\n    |\n LL |     1u32.f(\"abc\");\n-   |          ^ method not found in `u32`\n+   |          ^ method cannot be called on `u32` due to unsatisfied trait bounds\n    |\n-   = note: the method `f` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `<u32 as X<'b>>::U: Clone`\n            which is required by `u32: X`\n "}, {"sha": "ffee7004f8f8e08dd609ff69ddec731bd18d7fbb", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the current scope\n+error[E0599]: the method `clone` exists for struct `Bar<NotClone>`, but its trait bounds were not satisfied\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n@@ -11,7 +11,7 @@ LL | struct NotClone;\n    | ---------------- doesn't satisfy `NotClone: Clone`\n ...\n LL |     Bar::<NotClone> { x: 1 }.clone();\n-   |                              ^^^^^ method not found in `Bar<NotClone>`\n+   |                              ^^^^^ method cannot be called on `Bar<NotClone>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n@@ -21,7 +21,7 @@ LL |     fn clone(&self) -> Self;\n    |        the method is available for `Arc<Bar<NotClone>>` here\n    |        the method is available for `Rc<Bar<NotClone>>` here\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `NotClone: Clone`\n            which is required by `Bar<NotClone>: Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope"}, {"sha": "a769872d83a524d0147d91a4543d2649bb81c4c2", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `filterx` found for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` in the current scope\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:128:22\n    |\n LL | pub struct Map<S, F> {\n@@ -8,17 +8,17 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method not found in `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n    |\n-   = note: the method `filterx` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n            `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n            `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n \n-error[E0599]: no method named `countx` found for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` in the current scope\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:141:24\n    |\n LL | pub struct Filter<S, F> {\n@@ -28,9 +28,9 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method not found in `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n    |\n-   = note: the method `countx` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n            which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n            `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`"}, {"sha": "a769872d83a524d0147d91a4543d2649bb81c4c2", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `filterx` found for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` in the current scope\n+error[E0599]: the method `filterx` exists for struct `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:128:22\n    |\n LL | pub struct Map<S, F> {\n@@ -8,17 +8,17 @@ LL | pub struct Map<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let filter = map.filterx(|x: &_| true);\n-   |                      ^^^^^^^ method not found in `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>`\n+   |                      ^^^^^^^ method cannot be called on `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>` due to unsatisfied trait bounds\n    |\n-   = note: the method `filterx` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `&'a mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n            `&'a mut &Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `&Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n            `&'a mut &mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: Stream`\n            which is required by `&mut Map<Repeat, [closure@$DIR/issue-30786.rs:127:27: 127:36]>: StreamExt`\n \n-error[E0599]: no method named `countx` found for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` in the current scope\n+error[E0599]: the method `countx` exists for struct `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-30786.rs:141:24\n    |\n LL | pub struct Filter<S, F> {\n@@ -28,9 +28,9 @@ LL | pub struct Filter<S, F> {\n    | doesn't satisfy `_: StreamExt`\n ...\n LL |     let count = filter.countx();\n-   |                        ^^^^^^ method not found in `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>`\n+   |                        ^^^^^^ method cannot be called on `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>` due to unsatisfied trait bounds\n    |\n-   = note: the method `countx` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `&'a mut Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`\n            which is required by `Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: StreamExt`\n            `&'a mut &Filter<Map<Repeat, for<'r> fn(&'r u64) -> &'r u64 {identity::<u64>}>, [closure@$DIR/issue-30786.rs:140:30: 140:42]>: Stream`"}, {"sha": "278c5441ecfb70caf9d96cf5b20901808ef0f4fd", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -126,8 +126,8 @@ fn variant1() {\n     // guess.\n     let map = source.mapx(|x: &_| x);\n     let filter = map.filterx(|x: &_| true);\n-    //[migrate]~^ ERROR no method named `filterx`\n-    //[nll]~^^ ERROR no method named `filterx`\n+    //[migrate]~^ ERROR the method\n+    //[nll]~^^ ERROR the method\n }\n \n fn variant2() {\n@@ -139,8 +139,8 @@ fn variant2() {\n     let map = source.mapx(identity);\n     let filter = map.filterx(|x: &_| true);\n     let count = filter.countx();\n-    //[migrate]~^ ERROR no method named `countx`\n-    //[nll]~^^ ERROR no method named `countx`\n+    //[migrate]~^ ERROR the method\n+    //[nll]~^^ ERROR the method\n }\n \n fn main() {}"}, {"sha": "b0524f056ef7fdabfef8a94f188c032918d6895d", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,12 +1,12 @@\n-error[E0599]: no method named `to_string` found for raw pointer `*const u8` in the current scope\n+error[E0599]: the method `to_string` exists for raw pointer `*const u8`, but its trait bounds were not satisfied\n   --> $DIR/issue-21596.rs:4:22\n    |\n LL |     println!(\"{}\", z.to_string());\n-   |                      ^^^^^^^^^ method not found in `*const u8`\n+   |                      ^^^^^^^^^ method cannot be called on `*const u8` due to unsatisfied trait bounds\n    |\n    = note: try using `<*const T>::as_ref()` to get a reference to the type behind the pointer: https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n-   = note: the method `to_string` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `*const u8: std::fmt::Display`\n            which is required by `*const u8: ToString`\n "}, {"sha": "40475426cff7afb4003eddb426891439835e6079", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -11,7 +11,7 @@ pub fn get_tok(it: &mut IntoIter<u8>) {\n         //~^ ERROR type mismatch resolving\n         //~| expected type `u8`\n         //~| found reference `&_`\n-        .collect(); //~ ERROR no method named `collect`\n+        .collect(); //~ ERROR the method\n }\n \n fn main() {}"}, {"sha": "0b7ffc39646a6d223558aa3a1d427bcc6d2d6ed5", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -7,11 +7,11 @@ LL |         .cloned()\n    = note:   expected type `u8`\n            found reference `&_`\n \n-error[E0599]: no method named `collect` found for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` in the current scope\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`, but its trait bounds were not satisfied\n   --> $DIR/issue-31173.rs:14:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method not found in `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>`\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n    |\n@@ -23,7 +23,7 @@ LL | pub struct Cloned<I> {\n LL | pub struct TakeWhile<I, P> {\n    | -------------------------- doesn't satisfy `<_ as Iterator>::Item = &_`\n    |\n-   = note: the method `collect` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]> as Iterator>::Item = &_`\n            which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`\n            `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 9:6]>>: Iterator`"}, {"sha": "15d139790625efb3e5e5b6f8496f5a855e3bc5af", "filename": "src/test/ui/issues/issue-35677.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -2,7 +2,7 @@ use std::collections::HashSet;\n \n fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool {\n     this.is_subset(other)\n-    //~^ ERROR no method named\n+    //~^ ERROR the method\n }\n \n fn main() {}"}, {"sha": "ab59e5d1acf6a47fd457668d8e560821be62eeee", "filename": "src/test/ui/issues/issue-35677.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35677.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `is_subset` found for reference `&HashSet<T>` in the current scope\n+error[E0599]: the method `is_subset` exists for reference `&HashSet<T>`, but its trait bounds were not satisfied\n   --> $DIR/issue-35677.rs:4:10\n    |\n LL |     this.is_subset(other)\n-   |          ^^^^^^^^^ method not found in `&HashSet<T>`\n+   |          ^^^^^^^^^ method cannot be called on `&HashSet<T>` due to unsatisfied trait bounds\n    |\n-   = note: the method `is_subset` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `T: Eq`\n            `T: Hash`\n "}, {"sha": "160cfc3d46c39b9b7f1501c10c90580a7f4ccc63", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &Some(42).as_deref();\n-//~^ ERROR no method named `as_deref` found for enum `Option<{integer}>`\n+//~^ ERROR the method\n }"}, {"sha": "21fc3b2bdd1f73b33a720608bb0064e82a32c99a", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `as_deref` found for enum `Option<{integer}>` in the current scope\n+error[E0599]: the method `as_deref` exists for enum `Option<{integer}>`, but its trait bounds were not satisfied\n   --> $DIR/option-as_deref.rs:2:29\n    |\n LL |     let _result = &Some(42).as_deref();\n-   |                             ^^^^^^^^ help: there is an associated function with a similar name: `as_ref`\n+   |                             ^^^^^^^^\n    |\n-   = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n            `<{integer} as Deref>::Target = _`\n "}, {"sha": "ff5095ce3d723d8071e19b625ddc1cb2acecbe4c", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &mut Some(42).as_deref_mut();\n-//~^ ERROR no method named `as_deref_mut` found for enum `Option<{integer}>`\n+//~^ ERROR the method\n }"}, {"sha": "c86b024de21a68c7e882177dbead5e7730d72c05", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `as_deref_mut` found for enum `Option<{integer}>` in the current scope\n+error[E0599]: the method `as_deref_mut` exists for enum `Option<{integer}>`, but its trait bounds were not satisfied\n   --> $DIR/option-as_deref_mut.rs:2:33\n    |\n LL |     let _result = &mut Some(42).as_deref_mut();\n-   |                                 ^^^^^^^^^^^^ method not found in `Option<{integer}>`\n+   |                                 ^^^^^^^^^^^^ method cannot be called on `Option<{integer}>` due to unsatisfied trait bounds\n    |\n-   = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n            `<{integer} as Deref>::Target = _`\n "}, {"sha": "4232f14d2d3d821f14e3cecf1459ed66e85bd6a1", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &Ok(42).as_deref();\n-//~^ ERROR no method named `as_deref` found\n+//~^ ERROR the method\n }"}, {"sha": "e41c04ee89e0f8e0bcb862867ebb519322fdaa75", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `as_deref` found for enum `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: the method `as_deref` exists for enum `std::result::Result<{integer}, _>`, but its trait bounds were not satisfied\n   --> $DIR/result-as_deref.rs:2:27\n    |\n LL |     let _result = &Ok(42).as_deref();\n-   |                           ^^^^^^^^ help: there is an associated function with a similar name: `as_ref`\n+   |                           ^^^^^^^^\n    |\n-   = note: the method `as_deref` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `{integer}: Deref`\n            `<{integer} as Deref>::Target = _`\n "}, {"sha": "3507d1d8e7e3e4afd524b853f0388790c695a8e1", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _result = &mut Ok(42).as_deref_mut();\n-//~^ ERROR no method named `as_deref_mut` found\n+//~^ ERROR the method\n }"}, {"sha": "372d056fc19082b4b068654ca955c469ca5d0ea0", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/result-as_deref_mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Fresult-as_deref_mut.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no method named `as_deref_mut` found for enum `std::result::Result<{integer}, _>` in the current scope\n+error[E0599]: the method `as_deref_mut` exists for enum `std::result::Result<{integer}, _>`, but its trait bounds were not satisfied\n   --> $DIR/result-as_deref_mut.rs:2:31\n    |\n LL |     let _result = &mut Ok(42).as_deref_mut();\n-   |                               ^^^^^^^^^^^^ method not found in `std::result::Result<{integer}, _>`\n+   |                               ^^^^^^^^^^^^ method cannot be called on `std::result::Result<{integer}, _>` due to unsatisfied trait bounds\n    |\n-   = note: the method `as_deref_mut` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `{integer}: DerefMut`\n            `<{integer} as Deref>::Target = _`\n "}, {"sha": "a0b0ea1d03893ae5c3722e124e94f0085195b481", "filename": "src/test/ui/issues/issue-57362-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -19,7 +19,7 @@ impl<'a> X for fn(&'a ()) {\n }\n \n fn g() {\n-    let x = <fn (&())>::make_g(); //~ ERROR no function or associated item\n+    let x = <fn (&())>::make_g(); //~ ERROR the function\n }\n \n fn main() {}"}, {"sha": "3b6cffeafe4c2d6d80c6edb2d9cfe86b99844af9", "filename": "src/test/ui/issues/issue-57362-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'r> fn(&'r ())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57362-2.rs:22:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+   |                         ^^^^^^ function or associated item cannot be called on `for<'r> fn(&'r ())` due to unsatisfied trait bounds\n    |\n-   = note: the method `make_g` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `for<'r> fn(&'r ()): X`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `X` defines an item `make_g`, perhaps you need to implement it"}, {"sha": "7c77293945eb73f3d48cc8e957069c37901cd53e", "filename": "src/test/ui/issues/issue-69725.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -5,7 +5,7 @@ use issue_69725::Struct;\n \n fn crash<A>() {\n     let _ = Struct::<A>::new().clone();\n-    //~^ ERROR: no method named `clone` found\n+    //~^ ERROR: the method\n }\n \n fn main() {}"}, {"sha": "48c71d76af097241083b8f7fc576d03eacfab061", "filename": "src/test/ui/issues/issue-69725.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69725.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,8 +1,8 @@\n-error[E0599]: no method named `clone` found for struct `Struct<A>` in the current scope\n+error[E0599]: the method `clone` exists for struct `Struct<A>`, but its trait bounds were not satisfied\n   --> $DIR/issue-69725.rs:7:32\n    |\n LL |     let _ = Struct::<A>::new().clone();\n-   |                                ^^^^^ method not found in `Struct<A>`\n+   |                                ^^^^^ method cannot be called on `Struct<A>` due to unsatisfied trait bounds\n    | \n   ::: $DIR/auxiliary/issue-69725.rs:2:1\n    |\n@@ -17,7 +17,7 @@ LL |     fn clone(&self) -> Self;\n    |        the method is available for `Arc<Struct<A>>` here\n    |        the method is available for `Rc<Struct<A>>` here\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `A: Clone`\n            which is required by `Struct<A>: Clone`\n "}, {"sha": "86d00ca37602615a84fc8645e031f93295ac7782", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -16,7 +16,7 @@ fn main() {\n \n     let y = Foo;\n     y.zero()\n-     .take()    //~ ERROR no method named `take` found\n+     .take()    //~ ERROR the method\n      .one(0);\n     y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "ffeacfe15dd06e3abdc3640eca8841103de06905", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -40,7 +40,7 @@ note: associated function defined here\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |        ^^^ ----  --------  --------\n \n-error[E0599]: no method named `take` found for struct `Foo` in the current scope\n+error[E0599]: the method `take` exists for struct `Foo`, but its trait bounds were not satisfied\n   --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n@@ -50,9 +50,9 @@ LL | pub struct Foo;\n    | doesn't satisfy `Foo: Iterator`\n ...\n LL |      .take()\n-   |       ^^^^ method not found in `Foo`\n+   |       ^^^^ method cannot be called on `Foo` due to unsatisfied trait bounds\n    |\n-   = note: the method `take` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `Foo: Iterator`\n            which is required by `&mut Foo: Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope"}, {"sha": "8cbd0220e67683bda9f11be4cb8646429b922f14", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -12,7 +12,7 @@ LL |     intrinsics::size_of::<T>()\n LL |     [u8; size_of::<T>() + 1]: ,\n    |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:23:10\n \n-error[E0599]: no function or associated item named `new` found for struct `Inline<dyn Debug>` in the current scope\n+error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n   --> $DIR/issue-80742.rs:31:36\n    |\n LL | / struct Inline<T>\n@@ -25,14 +25,14 @@ LL | | }\n    | |_- function or associated item `new` not found for this\n ...\n LL |       let dst = Inline::<dyn Debug>::new(0);\n-   |                                      ^^^ function or associated item not found in `Inline<dyn Debug>`\n+   |                                      ^^^ function or associated item cannot be called on `Inline<dyn Debug>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL |   pub trait Debug {\n    |   --------------- doesn't satisfy `dyn Debug: Sized`\n    |\n-   = note: the method `new` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `dyn Debug: Sized`\n \n error[E0080]: evaluation of constant value failed"}, {"sha": "17d2292baaf683298c17e48edb0474e1b311f438", "filename": "src/test/ui/mismatched_types/issue-36053-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -5,6 +5,6 @@\n use std::iter::once;\n fn main() {\n     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-    //~^ ERROR no method named `count`\n+    //~^ ERROR the method\n     //~| ERROR type mismatch in closure arguments\n }"}, {"sha": "69ae3d8cbd0e54e505bc83c7baf712c95dd6c396", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -6,11 +6,11 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n    |                                |\n    |                                expected signature of `for<'r> fn(&'r &str) -> _`\n \n-error[E0599]: no method named `count` found for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` in the current scope\n+error[E0599]: the method `count` exists for struct `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                       --------------  ^^^^^ method not found in `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>`\n+   |                                       --------------  ^^^^^ method cannot be called on `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>` due to unsatisfied trait bounds\n    |                                       |\n    |                                       doesn't satisfy `<_ as FnOnce<(&&str,)>>::Output = bool`\n    |                                       doesn't satisfy `_: FnMut<(&&str,)>`\n@@ -20,7 +20,7 @@ LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n LL | pub struct Filter<I, P> {\n    | ----------------------- doesn't satisfy `_: Iterator`\n    |\n-   = note: the method `count` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `<[closure@$DIR/issue-36053-2.rs:7:39: 7:53] as FnOnce<(&&str,)>>::Output = bool`\n            which is required by `Filter<Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:7:39: 7:53]>: Iterator`\n            `[closure@$DIR/issue-36053-2.rs:7:39: 7:53]: FnMut<(&&str,)>`"}, {"sha": "f85c10d78c54dda7cc7152a56e332f3ae7f53cb0", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -3,5 +3,5 @@ struct Foo;\n fn main() {\n     let a: Result<(), Foo> = Ok(());\n     a.unwrap();\n-    //~^ ERROR no method named `unwrap` found\n+    //~^ ERROR the method\n }"}, {"sha": "92a88cbdb34a3372df8a7701c6de05bb92bc6c33", "filename": "src/test/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,13 +1,13 @@\n-error[E0599]: no method named `unwrap` found for enum `std::result::Result<(), Foo>` in the current scope\n+error[E0599]: the method `unwrap` exists for enum `std::result::Result<(), Foo>`, but its trait bounds were not satisfied\n   --> $DIR/method-help-unsatisfied-bound.rs:5:7\n    |\n LL | struct Foo;\n    | ----------- doesn't satisfy `Foo: Debug`\n ...\n LL |     a.unwrap();\n-   |       ^^^^^^ method not found in `std::result::Result<(), Foo>`\n+   |       ^^^^^^ method cannot be called on `std::result::Result<(), Foo>` due to unsatisfied trait bounds\n    |\n-   = note: the method `unwrap` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `Foo: Debug`\n \n error: aborting due to previous error"}, {"sha": "b222b90e4af247e48f1b8861f83b81cba506444d", "filename": "src/test/ui/nll/issue-57642-higher-ranked-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -31,7 +31,7 @@ impl<T> Y for fn(T) {\n }\n \n fn higher_ranked_region_has_lost_its_binder() {\n-    let x = <fn (&())>::make_g(); //~ ERROR no function\n+    let x = <fn (&())>::make_g(); //~ ERROR the function\n }\n \n fn magical() {"}, {"sha": "95811ea05b8739bb406f6593d934a3f584e059f6", "filename": "src/test/ui/nll/issue-57642-higher-ranked-subtype.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57642-higher-ranked-subtype.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,10 +1,10 @@\n-error[E0599]: no function or associated item named `make_g` found for fn pointer `for<'r> fn(&'r ())` in the current scope\n+error[E0599]: the function or associated item `make_g` exists for fn pointer `for<'r> fn(&'r ())`, but its trait bounds were not satisfied\n   --> $DIR/issue-57642-higher-ranked-subtype.rs:34:25\n    |\n LL |     let x = <fn (&())>::make_g();\n-   |                         ^^^^^^ function or associated item not found in `for<'r> fn(&'r ())`\n+   |                         ^^^^^^ function or associated item cannot be called on `for<'r> fn(&'r ())` due to unsatisfied trait bounds\n    |\n-   = note: the method `make_g` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `for<'r> fn(&'r ()): X`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `X` defines an item `make_g`, perhaps you need to implement it"}, {"sha": "6834d57362991de93f24fb9abd714a2102a73a5c", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -20,5 +20,5 @@ default impl<T> Foo for T {\n \n fn main() {\n     println!(\"{}\", MyStruct.foo_one());\n-    //~^ ERROR no method named `foo_one` found\n+    //~^ ERROR the method\n }"}, {"sha": "16ffc661fe0a3226b661ee33c52c02dac2ba616a", "filename": "src/test/ui/specialization/defaultimpl/specialization-trait-not-implemented.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(specialization)]\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: consider using `min_specialization` instead, which is more stable and complete\n \n-error[E0599]: no method named `foo_one` found for struct `MyStruct` in the current scope\n+error[E0599]: the method `foo_one` exists for struct `MyStruct`, but its trait bounds were not satisfied\n   --> $DIR/specialization-trait-not-implemented.rs:22:29\n    |\n LL | struct MyStruct;\n@@ -18,9 +18,9 @@ LL | struct MyStruct;\n    | doesn't satisfy `MyStruct: Foo`\n ...\n LL |     println!(\"{}\", MyStruct.foo_one());\n-   |                             ^^^^^^^ method not found in `MyStruct`\n+   |                             ^^^^^^^ method cannot be called on `MyStruct` due to unsatisfied trait bounds\n    |\n-   = note: the method `foo_one` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `MyStruct: Foo`\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Foo` defines an item `foo_one`, perhaps you need to implement it"}, {"sha": "afd47f71c2cbff4531a5fa4dcbf201cca1bff470", "filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -12,7 +12,7 @@ impl<T: Default + Bar> Bar for Foo<T> {}\n impl<T> Foo<T> {\n     fn bar(&self) {\n         self.foo();\n-        //~^ ERROR no method named `foo` found for reference `&Foo<T>` in the current scope\n+        //~^ ERROR the method\n     }\n }\n \n@@ -25,7 +25,7 @@ impl<T: Default + Bar> Bar for Fin<T> {}\n impl<T: Bar> Fin<T> {\n     fn bar(&self) {\n         self.foo();\n-        //~^ ERROR no method named `foo` found for reference `&Fin<T>` in the current scope\n+        //~^ ERROR the method\n     }\n }\n fn main() {}"}, {"sha": "c7376b0007f974285a083c5b7b888c4a0c259583", "filename": "src/test/ui/suggestions/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-bounds-for-method-call.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,13 +1,13 @@\n-error[E0599]: no method named `foo` found for reference `&Foo<T>` in the current scope\n+error[E0599]: the method `foo` exists for reference `&Foo<T>`, but its trait bounds were not satisfied\n   --> $DIR/missing-trait-bounds-for-method-call.rs:14:14\n    |\n LL | struct Foo<T> {\n    | ------------- doesn't satisfy `Foo<T>: Bar`\n ...\n LL |         self.foo();\n-   |              ^^^ method not found in `&Foo<T>`\n+   |              ^^^ method cannot be called on `&Foo<T>` due to unsatisfied trait bounds\n    |\n-   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `T: Bar`\n            which is required by `Foo<T>: Bar`\n            `T: Default`\n@@ -17,16 +17,16 @@ help: consider restricting the type parameters to satisfy the trait bounds\n LL | struct Foo<T> where T: Bar, T: Default {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0599]: no method named `foo` found for reference `&Fin<T>` in the current scope\n+error[E0599]: the method `foo` exists for reference `&Fin<T>`, but its trait bounds were not satisfied\n   --> $DIR/missing-trait-bounds-for-method-call.rs:27:14\n    |\n LL | struct Fin<T> where T: Bar {\n    | -------------------------- doesn't satisfy `Fin<T>: Bar`\n ...\n LL |         self.foo();\n-   |              ^^^ method not found in `&Fin<T>`\n+   |              ^^^ method cannot be called on `&Fin<T>` due to unsatisfied trait bounds\n    |\n-   = note: the method `foo` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `T: Default`\n            which is required by `Fin<T>: Bar`\n help: consider restricting the type parameter to satisfy the trait bound"}, {"sha": "924bfd82eb832aad1d82bc76324066d3fdc66dbf", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     //~| ERROR the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n     //~| ERROR the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n \n-    writeln!(fp, \"hello world\").unwrap(); //~ ERROR no method named `write_fmt` found for struct\n+    writeln!(fp, \"hello world\").unwrap(); //~ ERROR the method\n }"}, {"sha": "3120b739c029537fe4031bb53018c7acc5e3f55f", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -33,18 +33,18 @@ LL | pub struct BufWriter<W: Write> {\n    |\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n \n-error[E0599]: no method named `write_fmt` found for struct `BufWriter<&dyn std::io::Write>` in the current scope\n+error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn std::io::Write>`, but its trait bounds were not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:22:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `BufWriter<&dyn std::io::Write>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `BufWriter<&dyn std::io::Write>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n LL | pub struct BufWriter<W: Write> {\n    | ------------------------------ doesn't satisfy `BufWriter<&dyn std::io::Write>: std::io::Write`\n    |\n-   = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write`\n            which is required by `BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "7ab19edb47179d385f014791c66938914e0c1f10", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -32,5 +32,5 @@ struct CloneNoCopy;\n \n fn main() {\n     let u = U5 { a: ManuallyDrop::new(CloneNoCopy) };\n-    let w = u.clone(); //~ ERROR no method named `clone` found for union `U5<CloneNoCopy>`\n+    let w = u.clone(); //~ ERROR the method\n }"}, {"sha": "a793bf58d23e2f01202d26ef5452dd9cd033e7ce", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -11,7 +11,7 @@ LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n+error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:35:15\n    |\n LL | union U5<T> {\n@@ -24,7 +24,7 @@ LL | struct CloneNoCopy;\n    | ------------------- doesn't satisfy `CloneNoCopy: Copy`\n ...\n LL |     let w = u.clone();\n-   |               ^^^^^ method not found in `U5<CloneNoCopy>`\n+   |               ^^^^^ method cannot be called on `U5<CloneNoCopy>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n@@ -34,7 +34,7 @@ LL |     fn clone(&self) -> Self;\n    |        the method is available for `Arc<U5<CloneNoCopy>>` here\n    |        the method is available for `Rc<U5<CloneNoCopy>>` here\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n "}, {"sha": "d243b8f34dbcf045c558dca39341be0bb84d88f7", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -21,5 +21,5 @@ impl Foo for Bar {\n fn main() {\n     let x = box Bar { x: 10 };\n     let y: Box<dyn Foo> = x as Box<dyn Foo>;\n-    let _z = y.clone(); //~ ERROR no method named `clone` found\n+    let _z = y.clone(); //~ ERROR the method\n }"}, {"sha": "4bbacfc0a8b60636bfc6e547c2f5ebba1334a6ad", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `clone` found for struct `Box<dyn Foo>` in the current scope\n+error[E0599]: the method `clone` exists for struct `Box<dyn Foo>`, but its trait bounds were not satisfied\n   --> $DIR/unique-object-noncopyable.rs:24:16\n    |\n LL |   trait Foo {\n@@ -8,7 +8,7 @@ LL |   trait Foo {\n    |   doesn't satisfy `dyn Foo: Sized`\n ...\n LL |       let _z = y.clone();\n-   |                  ^^^^^ method not found in `Box<dyn Foo>`\n+   |                  ^^^^^ method cannot be called on `Box<dyn Foo>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n@@ -26,7 +26,7 @@ LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator\n LL | | >(Unique<T>, A);\n    | |________________- doesn't satisfy `Box<dyn Foo>: Clone`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `dyn Foo: Sized`\n            which is required by `Box<dyn Foo>: Clone`\n            `dyn Foo: Clone`"}, {"sha": "8edaeef51e06190fc91d8e73fd8ceee05449be09", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -9,6 +9,6 @@ impl Drop for R {\n \n fn main() {\n     let i = Box::new(R { b: true });\n-    let _j = i.clone(); //~ ERROR no method named `clone` found\n+    let _j = i.clone(); //~ ERROR the method\n     println!(\"{:?}\", i);\n }"}, {"sha": "dd0b7fc5489ce87b8af2b8bf303adbe8848fc152", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=643a79af3d5a31fa87c8a4c9d7f8bc4ebe2add4b", "patch": "@@ -1,11 +1,11 @@\n-error[E0599]: no method named `clone` found for struct `Box<R>` in the current scope\n+error[E0599]: the method `clone` exists for struct `Box<R>`, but its trait bounds were not satisfied\n   --> $DIR/unique-pinned-nocopy.rs:12:16\n    |\n LL |   struct R {\n    |   -------- doesn't satisfy `R: Clone`\n ...\n LL |       let _j = i.clone();\n-   |                  ^^^^^ method not found in `Box<R>`\n+   |                  ^^^^^ method cannot be called on `Box<R>` due to unsatisfied trait bounds\n    | \n   ::: $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n@@ -23,7 +23,7 @@ LL | |     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator\n LL | | >(Unique<T>, A);\n    | |________________- doesn't satisfy `Box<R>: Clone`\n    |\n-   = note: the method `clone` exists but the following trait bounds were not satisfied:\n+   = note: the following trait bounds were not satisfied:\n            `R: Clone`\n            which is required by `Box<R>: Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope"}]}