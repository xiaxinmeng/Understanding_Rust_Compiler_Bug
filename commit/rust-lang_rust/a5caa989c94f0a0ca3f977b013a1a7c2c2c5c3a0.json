{"sha": "a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "node_id": "C_kwDOAAsO6NoAKGE1Y2FhOTg5Yzk0ZjBhMGNhM2Y5NzdiMDEzYTFhN2MyYzJjNWMzYTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T04:20:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T04:20:18Z"}, "message": "Rollup merge of #107339 - aliemjay:covariant, r=lcnr\n\ninternally change regions to be covariant\n\nSurprisingly, we consider the reference type `&'a T` to be contravaraint in its lifetime parameter. This is confusing and conflicts with the documentation we have in the reference, rustnomicon, and rustc-dev-guide. This also arguably not the correct use of terminology since we can use `&'static u8` in a place where `&' a u8` is expected, this implies that `&'static u8 <: &' a u8` and consequently `'static <: ' a`, hence covariance.\n\nBecause of this, when relating two types, we used to switch the argument positions in a confusing way:\n`Subtype(&'a u8 <: &'b u8) => Subtype('b <: 'a) => Outlives('a: 'b) => RegionSubRegion('b <= 'a)`\n\nThe reason for the current behavior is probably that we wanted `Subtype('b <: 'a)` and `RegionSubRegion('b <= 'a)` to be equivalent, but I don' t think this is a good reason since these relations are sufficiently different in that the first is a relation in the subtyping lattice and is intrinsic to the type-systems, while the the second relation is an implementation detail of regionck.\n\nThis PR changes this behavior to use covariance, so..\n`Subtype(&'a u8 <: &'b u8) => Subtype('a <: 'b) => Outlives('a: 'b) => RegionSubRegion('b <= 'a) `\n\nResolves #103676\n\nr? `@lcnr`", "tree": {"sha": "58f37390e1e5146c188a26da7a508834ddf8d52e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f37390e1e5146c188a26da7a508834ddf8d52e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1KKCCRBK7hj4Ov3rIwAAgLMIAJYhNyuNrpKAIXjNoDhe4lQJ\nuZI3z3114XjC7Hj0UfocJux0x2kNb1Z4UMDRirusQXLngakK3mFNiuQEvuSskUAO\nH15ahNX1Ho6YR0xwV5OnULfiymh5B0NtuV5ztaGOhvuV0gH/fpkVehhh08E0XGFX\nCojhIW4kUHWfu/w1142YOI7dXTlnNPODxRyY3TxpqIYSZoeN6iS0+9O0bjuuJNgi\nPkkcfKmbObCLBksE5s+GxMQW1Hll/3cTyVyEUSpMkXKceDwdAi1Prp9B/uZqWnsK\nQ7I5aN0Ap2b1k6c4Am5tKrpJqL8sl6sMqiSF2qSTEKu5fyd/isQYukxHIanMzPE=\n=z66/\n-----END PGP SIGNATURE-----\n", "payload": "tree 58f37390e1e5146c188a26da7a508834ddf8d52e\nparent fa2cd945af6bfb14c16cfaa8b74c636dfb821b48\nparent 43cb610464393640a56fd7aa528c1c8f5b33ad0d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674879618 +0100\ncommitter GitHub <noreply@github.com> 1674879618 +0100\n\nRollup merge of #107339 - aliemjay:covariant, r=lcnr\n\ninternally change regions to be covariant\n\nSurprisingly, we consider the reference type `&'a T` to be contravaraint in its lifetime parameter. This is confusing and conflicts with the documentation we have in the reference, rustnomicon, and rustc-dev-guide. This also arguably not the correct use of terminology since we can use `&'static u8` in a place where `&' a u8` is expected, this implies that `&'static u8 <: &' a u8` and consequently `'static <: ' a`, hence covariance.\n\nBecause of this, when relating two types, we used to switch the argument positions in a confusing way:\n`Subtype(&'a u8 <: &'b u8) => Subtype('b <: 'a) => Outlives('a: 'b) => RegionSubRegion('b <= 'a)`\n\nThe reason for the current behavior is probably that we wanted `Subtype('b <: 'a)` and `RegionSubRegion('b <= 'a)` to be equivalent, but I don' t think this is a good reason since these relations are sufficiently different in that the first is a relation in the subtyping lattice and is intrinsic to the type-systems, while the the second relation is an implementation detail of regionck.\n\nThis PR changes this behavior to use covariance, so..\n`Subtype(&'a u8 <: &'b u8) => Subtype('a <: 'b) => Outlives('a: 'b) => RegionSubRegion('b <= 'a) `\n\nResolves #103676\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "html_url": "https://github.com/rust-lang/rust/commit/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48", "html_url": "https://github.com/rust-lang/rust/commit/fa2cd945af6bfb14c16cfaa8b74c636dfb821b48"}, {"sha": "43cb610464393640a56fd7aa528c1c8f5b33ad0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43cb610464393640a56fd7aa528c1c8f5b33ad0d", "html_url": "https://github.com/rust-lang/rust/commit/43cb610464393640a56fd7aa528c1c8f5b33ad0d"}], "stats": {"total": 95, "additions": 43, "deletions": 52}, "files": [{"sha": "165782f209a0ce925418ef909f926d61db62a5b8", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -225,8 +225,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::Ref(region, ty, mutbl) => {\n-                let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(current, region, contra);\n+                self.add_constraints_from_region(current, region, variance);\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n@@ -258,9 +257,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::Dynamic(data, r, _) => {\n-                // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n-                let contra = self.contravariant(variance);\n-                self.add_constraints_from_region(current, r, contra);\n+                // The type `dyn Trait<T> +'a` is covariant w/r/t `'a`:\n+                self.add_constraints_from_region(current, r, variance);\n \n                 if let Some(poly_trait_ref) = data.principal() {\n                     self.add_constraints_from_invariant_substs("}, {"sha": "b92b162a9786a652dd51a0e8085251718e8f5a4f", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -79,7 +79,8 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         debug!(\"{}.regions({:?}, {:?})\", self.tag(), a, b);\n \n         let origin = Subtype(Box::new(self.fields.trace.clone()));\n-        Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().glb_regions(\n+        // GLB(&'static u8, &'a u8) == &RegionLUB('static, 'a) u8 == &'static u8\n+        Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().lub_regions(\n             self.tcx(),\n             origin,\n             a,"}, {"sha": "f6e0554fd1f951634bfa9b78a7123b3338b286d9", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -79,7 +79,8 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         debug!(\"{}.regions({:?}, {:?})\", self.tag(), a, b);\n \n         let origin = Subtype(Box::new(self.fields.trace.clone()));\n-        Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().lub_regions(\n+        // LUB(&'static u8, &'a u8) == &RegionGLB('static, 'a) u8 == &'a u8\n+        Ok(self.fields.infcx.inner.borrow_mut().unwrap_region_constraints().glb_regions(\n             self.tcx(),\n             origin,\n             a,"}, {"sha": "f83219b8ee2a0e0ad1e80f374f6d12dd4574aa5c", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -663,13 +663,13 @@ where\n         debug!(?v_b);\n \n         if self.ambient_covariance() {\n-            // Covariance: a <= b. Hence, `b: a`.\n-            self.push_outlives(v_b, v_a, self.ambient_variance_info);\n+            // Covariant: &'a u8 <: &'b u8. Hence, `'a: 'b`.\n+            self.push_outlives(v_a, v_b, self.ambient_variance_info);\n         }\n \n         if self.ambient_contravariance() {\n-            // Contravariant: b <= a. Hence, `a: b`.\n-            self.push_outlives(v_a, v_b, self.ambient_variance_info);\n+            // Contravariant: &'b u8 <: &'a u8. Hence, `'b: 'a`.\n+            self.push_outlives(v_b, v_a, self.ambient_variance_info);\n         }\n \n         Ok(a)"}, {"sha": "51c34f0d55f6ff715336cc2b45d53c3e2df19a16", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -191,12 +191,13 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n         // from the \"cause\" field, we could perhaps give more tailored\n         // error messages.\n         let origin = SubregionOrigin::Subtype(Box::new(self.fields.trace.clone()));\n+        // Subtype(&'a u8, &'b u8) => Outlives('a: 'b) => SubRegion('b, 'a)\n         self.fields\n             .infcx\n             .inner\n             .borrow_mut()\n             .unwrap_region_constraints()\n-            .make_subregion(origin, a, b);\n+            .make_subregion(origin, b, a);\n \n         Ok(a)\n     }"}, {"sha": "fa87301df7e779f09d0eb8f002164b7fe9e82221", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -443,12 +443,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             if a_repr == b_repr =>\n         {\n             let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {\n-                relation.relate_with_variance(\n-                    ty::Contravariant,\n-                    ty::VarianceDiagInfo::default(),\n-                    a_region,\n-                    b_region,\n-                )\n+                relation.relate(a_region, b_region)\n             })?;\n             Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound, a_repr))\n         }\n@@ -497,12 +492,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         }\n \n         (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {\n-            let r = relation.relate_with_variance(\n-                ty::Contravariant,\n-                ty::VarianceDiagInfo::default(),\n-                a_r,\n-                b_r,\n-            )?;\n+            let r = relation.relate(a_r, b_r)?;\n             let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };\n             let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };\n             let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;"}, {"sha": "74c138af483c17d99379753a95b18b5652fc39dc", "filename": "tests/ui/error-codes/E0208.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Ferror-codes%2FE0208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Ferror-codes%2FE0208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0208.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,7 +1,7 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-struct Foo<'a, T> { //~ ERROR [-, o]\n+struct Foo<'a, T> { //~ ERROR [+, o]\n     t: &'a mut T,\n }\n "}, {"sha": "2c7072a7e76266a74329c7311b4b484759cd0b31", "filename": "tests/ui/error-codes/E0208.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Ferror-codes%2FE0208.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Ferror-codes%2FE0208.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0208.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,4 +1,4 @@\n-error: [-, o]\n+error: [+, o]\n   --> $DIR/E0208.rs:4:1\n    |\n LL | struct Foo<'a, T> {"}, {"sha": "ecb0821827dc0df4a3048f794defb55f700b6457", "filename": "tests/ui/variance/variance-associated-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-associated-types.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -10,7 +10,7 @@ trait Trait<'a> {\n }\n \n #[rustc_variance]\n-struct Foo<'a, T : Trait<'a>> { //~ ERROR [-, +]\n+struct Foo<'a, T : Trait<'a>> { //~ ERROR [+, +]\n     field: (T, &'a ())\n }\n "}, {"sha": "70cb246f6e906da04ac481fdf156a070d1886aa3", "filename": "tests/ui/variance/variance-associated-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,4 +1,4 @@\n-error: [-, +]\n+error: [+, +]\n   --> $DIR/variance-associated-types.rs:13:1\n    |\n LL | struct Foo<'a, T : Trait<'a>> {"}, {"sha": "39ea77a8aa21a1a38c00e6b852149b10abfc25c6", "filename": "tests/ui/variance/variance-regions-direct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-direct.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -6,7 +6,7 @@\n // Regions that just appear in normal spots are contravariant:\n \n #[rustc_variance]\n-struct Test2<'a, 'b, 'c> { //~ ERROR [-, -, -]\n+struct Test2<'a, 'b, 'c> { //~ ERROR [+, +, +]\n     x: &'a isize,\n     y: &'b [isize],\n     c: &'c str\n@@ -15,7 +15,7 @@ struct Test2<'a, 'b, 'c> { //~ ERROR [-, -, -]\n // Those same annotations in function arguments become covariant:\n \n #[rustc_variance]\n-struct Test3<'a, 'b, 'c> { //~ ERROR [+, +, +]\n+struct Test3<'a, 'b, 'c> { //~ ERROR [-, -, -]\n     x: extern \"Rust\" fn(&'a isize),\n     y: extern \"Rust\" fn(&'b [isize]),\n     c: extern \"Rust\" fn(&'c str),\n@@ -24,15 +24,15 @@ struct Test3<'a, 'b, 'c> { //~ ERROR [+, +, +]\n // Mutability induces invariance:\n \n #[rustc_variance]\n-struct Test4<'a, 'b:'a> { //~ ERROR [-, o]\n+struct Test4<'a, 'b:'a> { //~ ERROR [+, o]\n     x: &'a mut &'b isize,\n }\n \n // Mutability induces invariance, even when in a\n // contravariant context:\n \n #[rustc_variance]\n-struct Test5<'a, 'b:'a> { //~ ERROR [+, o]\n+struct Test5<'a, 'b:'a> { //~ ERROR [-, o]\n     x: extern \"Rust\" fn(&'a mut &'b isize),\n }\n \n@@ -42,7 +42,7 @@ struct Test5<'a, 'b:'a> { //~ ERROR [+, o]\n // argument list occurs in an invariant context.\n \n #[rustc_variance]\n-struct Test6<'a, 'b:'a> { //~ ERROR [-, o]\n+struct Test6<'a, 'b:'a> { //~ ERROR [+, o]\n     x: &'a mut extern \"Rust\" fn(&'b isize),\n }\n \n@@ -56,7 +56,7 @@ struct Test7<'a> { //~ ERROR [*]\n // Try enums too.\n \n #[rustc_variance]\n-enum Test8<'a, 'b, 'c:'b> { //~ ERROR [+, -, o]\n+enum Test8<'a, 'b, 'c:'b> { //~ ERROR [-, +, o]\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),"}, {"sha": "c55730296f1c515ba98f8505150bdac43741898d", "filename": "tests/ui/variance/variance-regions-direct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,28 +1,28 @@\n-error: [-, -, -]\n+error: [+, +, +]\n   --> $DIR/variance-regions-direct.rs:9:1\n    |\n LL | struct Test2<'a, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [+, +, +]\n+error: [-, -, -]\n   --> $DIR/variance-regions-direct.rs:18:1\n    |\n LL | struct Test3<'a, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [-, o]\n+error: [+, o]\n   --> $DIR/variance-regions-direct.rs:27:1\n    |\n LL | struct Test4<'a, 'b:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [+, o]\n+error: [-, o]\n   --> $DIR/variance-regions-direct.rs:35:1\n    |\n LL | struct Test5<'a, 'b:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [-, o]\n+error: [+, o]\n   --> $DIR/variance-regions-direct.rs:45:1\n    |\n LL | struct Test6<'a, 'b:'a> {\n@@ -34,7 +34,7 @@ error: [*]\n LL | struct Test7<'a> {\n    | ^^^^^^^^^^^^^^^^\n \n-error: [+, -, o]\n+error: [-, +, o]\n   --> $DIR/variance-regions-direct.rs:59:1\n    |\n LL | enum Test8<'a, 'b, 'c:'b> {"}, {"sha": "0d00535fef11be78a41d87ed2be7b6c69d1f450a", "filename": "tests/ui/variance/variance-regions-indirect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -5,14 +5,14 @@\n #![feature(rustc_attrs)]\n \n #[rustc_variance]\n-enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR [+, -, o, *]\n+enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR [-, +, o, *]\n     Test8A(extern \"Rust\" fn(&'a isize)),\n     Test8B(&'b [isize]),\n     Test8C(&'b mut &'c str),\n }\n \n #[rustc_variance]\n-struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR [*, o, -, +]\n+struct Derived1<'w, 'x:'y, 'y, 'z> { //~ ERROR [*, o, +, -]\n     f: Base<'z, 'y, 'x, 'w>\n }\n \n@@ -22,12 +22,12 @@ struct Derived2<'a, 'b:'a, 'c> { //~ ERROR [o, o, *]\n }\n \n #[rustc_variance] // Combine + and o to yield o (just pay attention to 'a here)\n-struct Derived3<'a:'b, 'b, 'c> { //~ ERROR [o, -, *]\n+struct Derived3<'a:'b, 'b, 'c> { //~ ERROR [o, +, *]\n     f: Base<'a, 'b, 'a, 'c>\n }\n \n #[rustc_variance] // Combine + and * to yield + (just pay attention to 'a here)\n-struct Derived4<'a, 'b, 'c:'b> { //~ ERROR [+, -, o]\n+struct Derived4<'a, 'b, 'c:'b> { //~ ERROR [-, +, o]\n     f: Base<'a, 'b, 'c, 'a>\n }\n "}, {"sha": "edf2626d5984fffda8ea53dce6a032b03cc5612c", "filename": "tests/ui/variance/variance-regions-indirect.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,10 +1,10 @@\n-error: [+, -, o, *]\n+error: [-, +, o, *]\n   --> $DIR/variance-regions-indirect.rs:8:1\n    |\n LL | enum Base<'a, 'b, 'c:'b, 'd> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [*, o, -, +]\n+error: [*, o, +, -]\n   --> $DIR/variance-regions-indirect.rs:15:1\n    |\n LL | struct Derived1<'w, 'x:'y, 'y, 'z> {\n@@ -16,13 +16,13 @@ error: [o, o, *]\n LL | struct Derived2<'a, 'b:'a, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [o, -, *]\n+error: [o, +, *]\n   --> $DIR/variance-regions-indirect.rs:25:1\n    |\n LL | struct Derived3<'a:'b, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: [+, -, o]\n+error: [-, +, o]\n   --> $DIR/variance-regions-indirect.rs:30:1\n    |\n LL | struct Derived4<'a, 'b, 'c:'b> {"}, {"sha": "11303c465200574d018358e4479af4aeccc4aa1e", "filename": "tests/ui/variance/variance-trait-object-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -11,7 +11,7 @@ use std::mem;\n trait T { fn foo(&self); }\n \n #[rustc_variance]\n-struct TOption<'a> { //~ ERROR [-]\n+struct TOption<'a> { //~ ERROR [+]\n     v: Option<Box<dyn T + 'a>>,\n }\n "}, {"sha": "bfcc8d4a1d11b058df1fd2bcc666016b332d1e31", "filename": "tests/ui/variance/variance-trait-object-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,4 +1,4 @@\n-error: [-]\n+error: [+]\n   --> $DIR/variance-trait-object-bound.rs:14:1\n    |\n LL | struct TOption<'a> {"}, {"sha": "cfc03b754734d156bca8d87e8dcd94cf0b75ff81", "filename": "tests/ui/variance/variance-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-types.rs?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -7,7 +7,7 @@ use std::cell::Cell;\n // not considered bivariant.\n \n #[rustc_variance]\n-struct InvariantMut<'a,A:'a,B:'a> { //~ ERROR [-, o, o]\n+struct InvariantMut<'a,A:'a,B:'a> { //~ ERROR [+, o, o]\n     t: &'a mut (A,B)\n }\n "}, {"sha": "0fda4b8036e721ac941487f3ad2b29a3f5bde26b", "filename": "tests/ui/variance/variance-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0/tests%2Fui%2Fvariance%2Fvariance-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-types.stderr?ref=a5caa989c94f0a0ca3f977b013a1a7c2c2c5c3a0", "patch": "@@ -1,4 +1,4 @@\n-error: [-, o, o]\n+error: [+, o, o]\n   --> $DIR/variance-types.rs:10:1\n    |\n LL | struct InvariantMut<'a,A:'a,B:'a> {"}]}