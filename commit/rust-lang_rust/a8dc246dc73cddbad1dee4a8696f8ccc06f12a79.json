{"sha": "a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZGMyNDZkYzczY2RkYmFkMWRlZTRhODY5NmY4Y2NjMDZmMTJhNzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T15:40:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T15:40:34Z"}, "message": "Auto merge of #42334 - est31:master, r=jseyfried\n\nExtend the unused macro lint to macros 2.0\n\nExtends the unused macro lint (added in PR #41907) to macros 2.0 (added in PR #40847).\n\nr? @jseyfried", "tree": {"sha": "30a34f42872208ad7ddeb3347a62a431b59e66f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a34f42872208ad7ddeb3347a62a431b59e66f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "html_url": "https://github.com/rust-lang/rust/commit/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4225019750f437c8c247a2682f01abe5ada69c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/4225019750f437c8c247a2682f01abe5ada69c46", "html_url": "https://github.com/rust-lang/rust/commit/4225019750f437c8c247a2682f01abe5ada69c46"}, {"sha": "03876ec1b12ed0080fe3a29a8161229cc5fd3c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/03876ec1b12ed0080fe3a29a8161229cc5fd3c86", "html_url": "https://github.com/rust-lang/rust/commit/03876ec1b12ed0080fe3a29a8161229cc5fd3c86"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "be304b8f296cd749cec0d4fc98ae621b2750ea95", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -1204,7 +1204,7 @@ pub struct Resolver<'a> {\n     pub found_unresolved_macro: bool,\n \n     // List of crate local macros that we need to warn about as being unused.\n-    // Right now this only includes macro_rules! macros.\n+    // Right now this only includes macro_rules! macros, and macros 2.0.\n     unused_macros: FxHashSet<DefId>,\n \n     // Maps the `Mark` of an expansion to its containing module or block."}, {"sha": "a950a9a23e47ca92c5663f91aece10849cfd8d48", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -316,6 +316,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n                 SyntaxExtension::NormalTT(_, isp, _) => isp,\n+                SyntaxExtension::DeclMacro(.., osp) => osp,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {\n@@ -735,6 +736,9 @@ impl<'a> Resolver<'a> {\n             let module = self.current_module;\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             let vis = self.resolve_visibility(&item.vis);\n+            if vis != ty::Visibility::Public {\n+                self.unused_macros.insert(def_id);\n+            }\n             self.define(module, ident, MacroNS, (def, vis, item.span, expansion));\n         }\n     }"}, {"sha": "8089fad5f36d880ecfb5b6d6f0a020e0f2af0b29", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -552,7 +552,9 @@ pub enum SyntaxExtension {\n     BuiltinDerive(BuiltinDeriveFn),\n \n     /// A declarative macro, e.g. `macro m() {}`.\n-    DeclMacro(Box<TTMacroExpander>, Option<Span> /* definition site span */),\n+    ///\n+    /// The second element is the definition site span.\n+    DeclMacro(Box<TTMacroExpander>, Option<(ast::NodeId, Span)>),\n }\n \n impl SyntaxExtension {"}, {"sha": "c91c77719e699dde0b2f66098b7de075201e6cc1", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -472,8 +472,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         let marked_tts = noop_fold_tts(mac.node.stream(), &mut Marker(mark));\n         let opt_expanded = match *ext {\n-            SyntaxExtension::DeclMacro(ref expand, def_site_span) => {\n-                if let Err(msg) = validate_and_set_expn_info(def_site_span, false) {\n+            SyntaxExtension::DeclMacro(ref expand, def_span) => {\n+                if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n+                                                             false) {\n                     self.cx.span_err(path.span, &msg);\n                     return kind.dummy(span);\n                 }"}, {"sha": "0472a94e0ced6378363df313785e33682a2f7eaf", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -266,7 +266,7 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         let allow_internal_unstable = attr::contains_name(&def.attrs, \"allow_internal_unstable\");\n         NormalTT(exp, Some((def.id, def.span)), allow_internal_unstable)\n     } else {\n-        SyntaxExtension::DeclMacro(exp, Some(def.span))\n+        SyntaxExtension::DeclMacro(exp, Some((def.id, def.span)))\n     }\n }\n "}, {"sha": "c5c83977c77fd0ae0e820a8d209b37247b82e9c8", "filename": "src/test/compile-fail/feature-gate-decl_macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-decl_macro.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro m() {} //~ ERROR `macro` is experimental (see issue #39412)\n //~| HELP add #![feature(decl_macro)] to the crate attributes to enable\n "}, {"sha": "5e401c09bda597ea340caae3faea955efec496b8", "filename": "src/test/compile-fail/unused-macro-rules.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Funused-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Funused-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro-rules.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused_macros)]\n+\n+// Most simple case\n+macro_rules! unused { //~ ERROR: unused macro definition\n+    () => {};\n+}\n+\n+// Test macros created by macros\n+macro_rules! create_macro {\n+    () => {\n+        macro_rules! m { //~ ERROR: unused macro definition\n+            () => {};\n+        }\n+    };\n+}\n+create_macro!();\n+\n+#[allow(unused_macros)]\n+mod bar {\n+    // Test that putting the #[deny] close to the macro's definition\n+    // works.\n+\n+    #[deny(unused_macros)]\n+    macro_rules! unused { //~ ERROR: unused macro definition\n+        () => {};\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9e32f01724d02892a4bbab44113d333d1161b313", "filename": "src/test/compile-fail/unused-macro.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Funused-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dc246dc73cddbad1dee4a8696f8ccc06f12a79/src%2Ftest%2Fcompile-fail%2Funused-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro.rs?ref=a8dc246dc73cddbad1dee4a8696f8ccc06f12a79", "patch": "@@ -8,31 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(decl_macro)]\n #![deny(unused_macros)]\n \n // Most simple case\n-macro_rules! unused { //~ ERROR: unused macro definition\n-    () => {};\n+macro unused { //~ ERROR: unused macro definition\n+    () => {}\n }\n \n-// Test macros created by macros\n-macro_rules! create_macro {\n-    () => {\n-        macro_rules! m { //~ ERROR: unused macro definition\n-            () => {};\n-        }\n-    };\n-}\n-create_macro!();\n-\n #[allow(unused_macros)]\n mod bar {\n     // Test that putting the #[deny] close to the macro's definition\n     // works.\n \n     #[deny(unused_macros)]\n-    macro_rules! unused { //~ ERROR: unused macro definition\n-        () => {};\n+    macro unused { //~ ERROR: unused macro definition\n+        () => {}\n+    }\n+}\n+\n+mod boo {\n+    pub(crate) macro unused { //~ ERROR: unused macro definition\n+        () => {}\n     }\n }\n "}]}