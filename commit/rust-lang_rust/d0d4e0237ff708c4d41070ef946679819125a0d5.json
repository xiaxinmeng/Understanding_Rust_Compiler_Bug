{"sha": "d0d4e0237ff708c4d41070ef946679819125a0d5", "node_id": "C_kwDOAAsO6NoAKGQwZDRlMDIzN2ZmNzA4YzRkNDEwNzBlZjk0NjY3OTgxOTEyNWEwZDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T17:17:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-10T19:22:54Z"}, "message": "Iteratively replace pointers.", "tree": {"sha": "15fe675ac4007ca8391bcd653c726006336873e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15fe675ac4007ca8391bcd653c726006336873e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d4e0237ff708c4d41070ef946679819125a0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d4e0237ff708c4d41070ef946679819125a0d5", "html_url": "https://github.com/rust-lang/rust/commit/d0d4e0237ff708c4d41070ef946679819125a0d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d4e0237ff708c4d41070ef946679819125a0d5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64e9113e257976875e94360462bd2744af78f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64e9113e257976875e94360462bd2744af78f7b", "html_url": "https://github.com/rust-lang/rust/commit/b64e9113e257976875e94360462bd2744af78f7b"}], "stats": {"total": 93, "additions": 60, "deletions": 33}, "files": [{"sha": "ac55ce3b3168a15172c35749f35333de2a88c143", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/d0d4e0237ff708c4d41070ef946679819125a0d5/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d4e0237ff708c4d41070ef946679819125a0d5/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=d0d4e0237ff708c4d41070ef946679819125a0d5", "patch": "@@ -85,7 +85,9 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n-    debug!(?replacer.targets, ?replacer.allowed_replacements, ?replacer.storage_to_remove);\n+    debug!(?replacer.targets);\n+    debug!(?replacer.allowed_replacements);\n+    debug!(?replacer.storage_to_remove);\n \n     replacer.visit_body_preserves_cfg(body);\n \n@@ -190,8 +192,11 @@ fn compute_replacement<'tcx>(\n             continue;\n         }\n \n+        // Whether the current local is subject to the uniqueness rule.\n+        let needs_unique = ty.is_mutable_ptr();\n+\n         // If this a mutable reference that we cannot fully replace, mark it as unknown.\n-        if ty.is_mutable_ptr() && !fully_replacable_locals.contains(local) {\n+        if needs_unique && !fully_replacable_locals.contains(local) {\n             debug!(\"not fully replaceable\");\n             continue;\n         }\n@@ -217,18 +222,18 @@ fn compute_replacement<'tcx>(\n                 let mut place = *place;\n                 // Try to see through `place` in order to collapse reborrow chains.\n                 if place.projection.first() == Some(&PlaceElem::Deref)\n-                    && let Value::Pointer(target, refmut) = targets[place.local]\n+                    && let Value::Pointer(target, needs_unique) = targets[place.local]\n                     // Only see through immutable reference and pointers, as we do not know yet if\n                     // mutable references are fully replaced.\n-                    && !refmut\n+                    && !needs_unique\n                     // Only collapse chain if the pointee is definitely live.\n                     && can_perform_opt(target, location)\n                 {\n                     place = target.project_deeper(&place.projection[1..], tcx);\n                 }\n                 assert_ne!(place.local, local);\n                 if is_constant_place(place) {\n-                    targets[local] = Value::Pointer(place, ty.is_mutable_ptr());\n+                    targets[local] = Value::Pointer(place, needs_unique);\n                 }\n             }\n             // We do not know what to do, so keep as not-a-pointer.\n@@ -276,16 +281,35 @@ fn compute_replacement<'tcx>(\n                 return;\n             }\n \n-            if let Value::Pointer(target, refmut) = self.targets[place.local]\n-                && place.projection.first() == Some(&PlaceElem::Deref)\n-            {\n-                let perform_opt = (self.can_perform_opt)(target, loc);\n-                if perform_opt {\n-                    self.allowed_replacements.insert((target.local, loc));\n-                } else if refmut {\n-                    // This mutable reference is not fully replacable, so drop it.\n-                    self.targets[place.local] = Value::Unknown;\n+            if place.projection.first() != Some(&PlaceElem::Deref) {\n+                // This is not a dereference, nothing to do.\n+                return;\n+            }\n+\n+            let mut place = place.as_ref();\n+            loop {\n+                if let Value::Pointer(target, needs_unique) = self.targets[place.local] {\n+                    let perform_opt = (self.can_perform_opt)(target, loc);\n+                    debug!(?place, ?target, ?needs_unique, ?perform_opt);\n+\n+                    // This a reborrow chain, recursively allow the replacement.\n+                    //\n+                    // This also allows to detect cases where `target.local` is not replacable,\n+                    // and mark it as such.\n+                    if let &[PlaceElem::Deref] = &target.projection[..] {\n+                        assert!(perform_opt);\n+                        self.allowed_replacements.insert((target.local, loc));\n+                        place.local = target.local;\n+                        continue;\n+                    } else if perform_opt {\n+                        self.allowed_replacements.insert((target.local, loc));\n+                    } else if needs_unique {\n+                        // This mutable reference is not fully replacable, so drop it.\n+                        self.targets[place.local] = Value::Unknown;\n+                    }\n                 }\n+\n+                break;\n             }\n         }\n     }\n@@ -326,18 +350,23 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n-        if let Value::Pointer(target, _) = self.targets[place.local]\n-            && place.projection.first() == Some(&PlaceElem::Deref)\n-        {\n-            let perform_opt = matches!(ctxt, PlaceContext::NonUse(_))\n-                || self.allowed_replacements.contains(&(target.local, loc));\n-\n-            if perform_opt {\n-                *place = target.project_deeper(&place.projection[1..], self.tcx);\n-                self.any_replacement = true;\n+        if place.projection.first() != Some(&PlaceElem::Deref) {\n+            return;\n+        }\n+\n+        loop {\n+            if let Value::Pointer(target, _) = self.targets[place.local] {\n+                let perform_opt = matches!(ctxt, PlaceContext::NonUse(_))\n+                    || self.allowed_replacements.contains(&(target.local, loc));\n+\n+                if perform_opt {\n+                    *place = target.project_deeper(&place.projection[1..], self.tcx);\n+                    self.any_replacement = true;\n+                    continue;\n+                }\n             }\n-        } else {\n-            self.super_place(place, ctxt, loc);\n+\n+            break;\n         }\n     }\n "}, {"sha": "ed9f8c2b1876267e3e0ae1b06dd202c55af1fcf5", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0d4e0237ff708c4d41070ef946679819125a0d5/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0d4e0237ff708c4d41070ef946679819125a0d5/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=d0d4e0237ff708c4d41070ef946679819125a0d5", "patch": "@@ -41,8 +41,7 @@\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n -         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-+         _5 = &mut _1;                    // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n-+         _4 = &raw mut (*_2);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n++         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n           _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n -         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n           StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n@@ -55,8 +54,8 @@\n -         (*_3) = const 4_i32;             // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n -         _8 = const ();                   // scope 6 at $DIR/reference_prop.rs:+7:5: +7:26\n -         StorageDead(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:25: +7:26\n-+         _7 = (*_2);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n-+         (*_5) = const 4_i32;             // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n++         _7 = _1;                         // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n++         _1 = const 4_i32;                // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n           StorageLive(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n           _9 = _7;                         // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n           StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+8:9: +8:10"}, {"sha": "75c1f8f57ccae3219bd7ca787c2eb4f7f5d6a7b1", "filename": "tests/mir-opt/reference_prop.read_through_raw.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0d4e0237ff708c4d41070ef946679819125a0d5/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d0d4e0237ff708c4d41070ef946679819125a0d5/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff?ref=d0d4e0237ff708c4d41070ef946679819125a0d5", "patch": "@@ -9,15 +9,14 @@\n       let mut _5: *mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n   \n       bb0: {\n-          _2 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:25\n+-         _2 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:25\n -         _3 = &mut (*_2);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n -         _4 = &raw mut (*_2);             // scope 0 at $DIR/reference_prop.rs:+12:13: +12:30\n -         _5 = &raw mut (*_3);             // scope 0 at $DIR/reference_prop.rs:+13:13: +13:30\n -         _0 = (*_4);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n -         _0 = (*_5);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n-+         _3 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n-+         _0 = (*_2);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n-+         _0 = (*_3);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n++         _0 = (*_1);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n++         _0 = (*_1);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n           return;                          // scope 0 at $DIR/reference_prop.rs:+17:13: +17:21\n       }\n   }"}]}