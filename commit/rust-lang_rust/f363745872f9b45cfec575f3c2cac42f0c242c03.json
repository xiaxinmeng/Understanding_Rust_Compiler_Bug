{"sha": "f363745872f9b45cfec575f3c2cac42f0c242c03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjM3NDU4NzJmOWI0NWNmZWM1NzVmM2MyY2FjNDJmMGMyNDJjMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-11T21:01:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-11T21:01:02Z"}, "message": "Auto merge of #67458 - pnkfelix:fix-66530-by-propagating-fatal-error-from-worker, r=matthewjasper\n\nWhen a codegen worker has a FatalError, propagate it instead of ICE'ing.\n\nFix #66530", "tree": {"sha": "01cd7d149a374dd6b77f1829bbab5fed71943f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01cd7d149a374dd6b77f1829bbab5fed71943f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f363745872f9b45cfec575f3c2cac42f0c242c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f363745872f9b45cfec575f3c2cac42f0c242c03", "html_url": "https://github.com/rust-lang/rust/commit/f363745872f9b45cfec575f3c2cac42f0c242c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f363745872f9b45cfec575f3c2cac42f0c242c03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1389494ac145a84dba025ff65969f7ab150c3f02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1389494ac145a84dba025ff65969f7ab150c3f02", "html_url": "https://github.com/rust-lang/rust/commit/1389494ac145a84dba025ff65969f7ab150c3f02"}, {"sha": "31938366d2da5434344011f20fc2564e03228cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/31938366d2da5434344011f20fc2564e03228cd1", "html_url": "https://github.com/rust-lang/rust/commit/31938366d2da5434344011f20fc2564e03228cd1"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "801bfdea70d6cbe5d6fb4eb154ee38169c46597b", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f363745872f9b45cfec575f3c2cac42f0c242c03", "patch": "@@ -902,7 +902,7 @@ pub enum Message<B: WriteBackendMethods> {\n         worker_id: usize,\n     },\n     Done {\n-        result: Result<CompiledModule, ()>,\n+        result: Result<CompiledModule, Option<WorkerFatalError>>,\n         worker_id: usize,\n     },\n     CodegenDone {\n@@ -1474,9 +1474,12 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n                 // If the thread failed that means it panicked, so we abort immediately.\n-                Message::Done { result: Err(()), worker_id: _ } => {\n+                Message::Done { result: Err(None), worker_id: _ } => {\n                     bug!(\"worker thread panicked\");\n                 }\n+                Message::Done { result: Err(Some(WorkerFatalError)), worker_id: _ } => {\n+                    return Err(());\n+                }\n                 Message::CodegenItem => bug!(\"the coordinator should not receive codegen requests\"),\n             }\n         }\n@@ -1520,29 +1523,36 @@ fn start_executing_work<B: ExtraBackendMethods>(\n \n pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n+/// `FatalError` is explicitly not `Send`.\n+#[must_use]\n+pub struct WorkerFatalError;\n+\n fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>) {\n     thread::spawn(move || {\n         // Set up a destructor which will fire off a message that we're done as\n         // we exit.\n         struct Bomb<B: ExtraBackendMethods> {\n             coordinator_send: Sender<Box<dyn Any + Send>>,\n-            result: Option<WorkItemResult<B>>,\n+            result: Option<Result<WorkItemResult<B>, FatalError>>,\n             worker_id: usize,\n         }\n         impl<B: ExtraBackendMethods> Drop for Bomb<B> {\n             fn drop(&mut self) {\n                 let worker_id = self.worker_id;\n                 let msg = match self.result.take() {\n-                    Some(WorkItemResult::Compiled(m)) => {\n+                    Some(Ok(WorkItemResult::Compiled(m))) => {\n                         Message::Done::<B> { result: Ok(m), worker_id }\n                     }\n-                    Some(WorkItemResult::NeedsFatLTO(m)) => {\n+                    Some(Ok(WorkItemResult::NeedsFatLTO(m))) => {\n                         Message::NeedsFatLTO::<B> { result: m, worker_id }\n                     }\n-                    Some(WorkItemResult::NeedsThinLTO(name, thin_buffer)) => {\n+                    Some(Ok(WorkItemResult::NeedsThinLTO(name, thin_buffer))) => {\n                         Message::NeedsThinLTO::<B> { name, thin_buffer, worker_id }\n                     }\n-                    None => Message::Done::<B> { result: Err(()), worker_id },\n+                    Some(Err(FatalError)) => {\n+                        Message::Done::<B> { result: Err(Some(WorkerFatalError)), worker_id }\n+                    }\n+                    None => Message::Done::<B> { result: Err(None), worker_id },\n                 };\n                 drop(self.coordinator_send.send(Box::new(msg)));\n             }\n@@ -1562,7 +1572,7 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>\n         // surface that there was an error in this worker.\n         bomb.result = {\n             let _prof_timer = cgcx.prof.generic_activity(work.profiling_event_id());\n-            execute_work_item(&cgcx, work).ok()\n+            Some(execute_work_item(&cgcx, work))\n         };\n     });\n }"}, {"sha": "8af17742850da0babe8d5356822730a8e33ab24e", "filename": "src/test/ui/non-ice-error-on-worker-io-fail.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs?ref=f363745872f9b45cfec575f3c2cac42f0c242c03", "patch": "@@ -0,0 +1,37 @@\n+// Issue #66530: We would ICE if someone compiled with `-o /dev/null`,\n+// because we would try to generate auxiliary files in `/dev/` (which\n+// at least the OS X file system rejects).\n+//\n+// An attempt to `-o` into a directory we cannot write into should indeed\n+// be an error; but not an ICE.\n+\n+// compile-flags: -o /dev/null\n+\n+// The error-pattern check occurs *before* normalization, and the error patterns\n+// are wildly different between build environments. So this is a cop-out (and we\n+// rely on the checking of the normalized stderr output as our actual\n+// \"verification\" of the diagnostic).\n+\n+// error-pattern: error\n+\n+// On Mac OS X, we get an error like the below\n+// normalize-stderr-test \"failed to write bytecode to /dev/null.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /dev/\"\n+\n+// On Linux, we get an error like the below\n+// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /dev/\"\n+\n+// ignore-tidy-linelength\n+// ignore-windows - this is a unix-specific test\n+// ignore-emscripten - the file-system issues do not replicate here\n+// ignore-wasm - the file-system issues do not replicate here\n+// ignore-arm - the file-system issues do not replicate here, at least on armhf-gnu\n+\n+#![crate_type=\"lib\"]\n+\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n+pub mod task {\n+    pub mod __internal {\n+        use crate::task::Waker;\n+    }\n+    pub use core::task::Waker;\n+}"}, {"sha": "f5601ad03d5d82d8b8d430b0ec35062fc986e291", "filename": "src/test/ui/non-ice-error-on-worker-io-fail.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f363745872f9b45cfec575f3c2cac42f0c242c03/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr?ref=f363745872f9b45cfec575f3c2cac42f0c242c03", "patch": "@@ -0,0 +1,6 @@\n+warning: ignoring --out-dir flag due to -o flag\n+\n+error: io error modifying /dev/\n+\n+error: aborting due to previous error\n+"}]}