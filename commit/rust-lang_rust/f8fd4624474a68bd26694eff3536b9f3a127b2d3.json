{"sha": "f8fd4624474a68bd26694eff3536b9f3a127b2d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZmQ0NjI0NDc0YTY4YmQyNjY5NGVmZjM1MzZiOWYzYTEyN2IyZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T00:06:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-07T00:06:35Z"}, "message": "Auto merge of #68907 - Dylan-DPC:rollup-osm5e8o, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #67359 (Rename -Zexternal-macro-backtrace to -Zmacro-backtrace and clean up implementation.)\n - #68524 (Generator Resume Arguments)\n - #68791 (implement proper linkchecker hardening)\n - #68886 (Mark fn map_or() as eagerly evaluated.)\n - #68888 (error code examples: replace some more ignore with compile_fail)\n - #68894 (Update E0565 examples)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "87251dcf146a39eb1bf7936a6b46453827a17170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87251dcf146a39eb1bf7936a6b46453827a17170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8fd4624474a68bd26694eff3536b9f3a127b2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd4624474a68bd26694eff3536b9f3a127b2d3", "html_url": "https://github.com/rust-lang/rust/commit/f8fd4624474a68bd26694eff3536b9f3a127b2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8fd4624474a68bd26694eff3536b9f3a127b2d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "html_url": "https://github.com/rust-lang/rust/commit/442ae7f04026c215a03b155eaaf9cde8bb5cf02a"}, {"sha": "7ef5b8951f9c4e2da8e8a918cd05d1784cbf895b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef5b8951f9c4e2da8e8a918cd05d1784cbf895b", "html_url": "https://github.com/rust-lang/rust/commit/7ef5b8951f9c4e2da8e8a918cd05d1784cbf895b"}], "stats": {"total": 2625, "additions": 2040, "deletions": 585}, "files": [{"sha": "bbfda0fa2c846f303ac68eda511049a74643c4cc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3067,6 +3067,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap\",\n+ \"codespan\",\n  \"codespan-reporting\",\n  \"failure\",\n  \"mdbook\","}, {"sha": "d12ee2935ebf587bb771a9cd869d885d080483b7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -847,7 +847,13 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n-        rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        // cfg(bootstrap): the flag was renamed from `-Zexternal-macro-backtrace`\n+        // to `-Zmacro-backtrace`, keep only the latter after beta promotion.\n+        if stage == 0 {\n+            rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        } else {\n+            rustflags.arg(\"-Zmacro-backtrace\");\n+        }\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n "}, {"sha": "5bd60bc51efaec04e69e2e18b59678e2af066433", "filename": "src/doc/rustc-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1 +1 @@\n-Subproject commit 92baf7293dd2d418d2ac4b141b0faa822075d9f7\n+Subproject commit 5bd60bc51efaec04e69e2e18b59678e2af066433"}, {"sha": "8bc62418b3969c1e3c73d306571b81f10cf5f710", "filename": "src/doc/unstable-book/src/language-features/generators.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fgenerators.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -37,11 +37,11 @@ fn main() {\n         return \"foo\"\n     };\n \n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Yielded(1) => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n-    match Pin::new(&mut generator).resume() {\n+    match Pin::new(&mut generator).resume(()) {\n         GeneratorState::Complete(\"foo\") => {}\n         _ => panic!(\"unexpected value from resume\"),\n     }\n@@ -71,9 +71,9 @@ fn main() {\n     };\n \n     println!(\"1\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"3\");\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n     println!(\"5\");\n }\n ```\n@@ -92,10 +92,10 @@ The `Generator` trait in `std::ops` currently looks like:\n # use std::ops::GeneratorState;\n # use std::pin::Pin;\n \n-pub trait Generator {\n+pub trait Generator<R = ()> {\n     type Yield;\n     type Return;\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(self: Pin<&mut Self>, resume: R) -> GeneratorState<Self::Yield, Self::Return>;\n }\n ```\n \n@@ -152,10 +152,6 @@ closure-like semantics. Namely:\n * Whenever a generator is dropped it will drop all captured environment\n   variables.\n \n-Note that unlike closures, generators at this time cannot take any arguments.\n-That is, generators must always look like `|| { ... }`. This restriction may be\n-lifted at a future date, the design is ongoing!\n-\n ### Generators as state machines\n \n In the compiler, generators are currently compiled as state machines. Each\n@@ -179,8 +175,8 @@ fn main() {\n         return ret\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n \n@@ -205,7 +201,7 @@ fn main() {\n             type Yield = i32;\n             type Return = &'static str;\n \n-            fn resume(mut self: Pin<&mut Self>) -> GeneratorState<i32, &'static str> {\n+            fn resume(mut self: Pin<&mut Self>, resume: ()) -> GeneratorState<i32, &'static str> {\n                 use std::mem;\n                 match mem::replace(&mut *self, __Generator::Done) {\n                     __Generator::Start(s) => {\n@@ -228,8 +224,8 @@ fn main() {\n         __Generator::Start(ret)\n     };\n \n-    Pin::new(&mut generator).resume();\n-    Pin::new(&mut generator).resume();\n+    Pin::new(&mut generator).resume(());\n+    Pin::new(&mut generator).resume(());\n }\n ```\n "}, {"sha": "d65aee09232807bec31eca96e521f31daf333f37", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1104,6 +1104,7 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Box<T> {}\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     type Yield = G::Yield;\n@@ -1114,6 +1115,7 @@ impl<G: ?Sized + Generator + Unpin> Generator for Box<G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     type Yield = G::Yield;\n@@ -1124,6 +1126,28 @@ impl<G: ?Sized + Generator> Generator for Pin<Box<G>> {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for Box<G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<Box<G>> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;"}, {"sha": "4e43561996c370ee7c151ef6f632925c7ac35d1a", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -50,11 +50,11 @@ pub enum GeneratorState<Y, R> {\n ///         return \"foo\"\n ///     };\n ///\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n-///     match Pin::new(&mut generator).resume() {\n+///     match Pin::new(&mut generator).resume(()) {\n ///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n@@ -67,7 +67,7 @@ pub enum GeneratorState<Y, R> {\n #[lang = \"generator\"]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n #[fundamental]\n-pub trait Generator {\n+pub trait Generator<#[cfg(not(bootstrap))] R = ()> {\n     /// The type of value this generator yields.\n     ///\n     /// This associated type corresponds to the `yield` expression and the\n@@ -110,9 +110,13 @@ pub trait Generator {\n     /// been returned previously. While generator literals in the language are\n     /// guaranteed to panic on resuming after `Complete`, this is not guaranteed\n     /// for all implementations of the `Generator` trait.\n-    fn resume(self: Pin<&mut Self>) -> GeneratorState<Self::Yield, Self::Return>;\n+    fn resume(\n+        self: Pin<&mut Self>,\n+        #[cfg(not(bootstrap))] arg: R,\n+    ) -> GeneratorState<Self::Yield, Self::Return>;\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     type Yield = G::Yield;\n@@ -123,6 +127,7 @@ impl<G: ?Sized + Generator> Generator for Pin<&mut G> {\n     }\n }\n \n+#[cfg(bootstrap)]\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n     type Yield = G::Yield;\n@@ -132,3 +137,25 @@ impl<G: ?Sized + Generator + Unpin> Generator for &mut G {\n         G::resume(Pin::new(&mut *self))\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R>, R> Generator<R> for Pin<&mut G> {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume((*self).as_mut(), arg)\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(feature = \"generator_trait\", issue = \"43122\")]\n+impl<G: ?Sized + Generator<R> + Unpin, R> Generator<R> for &mut G {\n+    type Yield = G::Yield;\n+    type Return = G::Return;\n+\n+    fn resume(mut self: Pin<&mut Self>, arg: R) -> GeneratorState<Self::Yield, Self::Return> {\n+        G::resume(Pin::new(&mut *self), arg)\n+    }\n+}"}, {"sha": "e35c91206b8d426a00b976d30f188c91b14e623a", "filename": "src/libcore/option.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -455,6 +455,12 @@ impl<T> Option<T> {\n     /// Applies a function to the contained value (if any),\n     /// or returns the provided default (if not).\n     ///\n+    /// Arguments passed to `map_or` are eagerly evaluated; if you are passing\n+    /// the result of a function call, it is recommended to use [`map_or_else`],\n+    /// which is lazily evaluated.\n+    ///\n+    /// [`map_or_else`]: #method.map_or_else\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "809d4bace8e845ae3b77f3d186f8933b12ba428c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -524,6 +524,12 @@ impl<T, E> Result<T, E> {\n     /// Applies a function to the contained value (if any),\n     /// or returns the provided default (if not).\n     ///\n+    /// Arguments passed to `map_or` are eagerly evaluated; if you are passing\n+    /// the result of a function call, it is recommended to use [`map_or_else`],\n+    /// which is lazily evaluated.\n+    ///\n+    /// [`map_or_else`]: #method.map_or_else\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "d28507f6eb2e3b28b5181025037cdc3640f534e8", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -744,6 +744,7 @@ where\n \n                 substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n                 substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().resume_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}, {"sha": "f6c7174649fe8338333cffdf44155c62811fb407", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1120,6 +1120,8 @@ pub enum TerminatorKind<'tcx> {\n         value: Operand<'tcx>,\n         /// Where to resume to.\n         resume: BasicBlock,\n+        /// The place to store the resume argument in.\n+        resume_arg: Place<'tcx>,\n         /// Cleanup to be done if the generator is dropped at this suspend point.\n         drop: Option<BasicBlock>,\n     },\n@@ -2645,9 +2647,12 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 target,\n                 unwind,\n             },\n-            Yield { ref value, resume, drop } => {\n-                Yield { value: value.fold_with(folder), resume: resume, drop: drop }\n-            }\n+            Yield { ref value, resume, ref resume_arg, drop } => Yield {\n+                value: value.fold_with(folder),\n+                resume,\n+                resume_arg: resume_arg.fold_with(folder),\n+                drop,\n+            },\n             Call { ref func, ref args, ref destination, cleanup, from_hir_call } => {\n                 let dest =\n                     destination.as_ref().map(|&(ref loc, dest)| (loc.fold_with(folder), dest));"}, {"sha": "2f094516a35d9e561003333775602be3da75aa05", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -516,8 +516,14 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Yield {\n                         value,\n                         resume: _,\n+                        resume_arg,\n                         drop: _,\n                     } => {\n+                        self.visit_place(\n+                            resume_arg,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            source_location,\n+                        );\n                         self.visit_operand(value, source_location);\n                     }\n "}, {"sha": "d4c3518260c602be532f9f99d24c0b6ae756db04", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -643,8 +643,10 @@ pub fn generator_trait_ref_and_outputs(\n     self_ty: Ty<'tcx>,\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n-    let trait_ref =\n-        ty::TraitRef { def_id: fn_trait_def_id, substs: tcx.mk_substs_trait(self_ty, &[]) };\n+    let trait_ref = ty::TraitRef {\n+        def_id: fn_trait_def_id,\n+        substs: tcx.mk_substs_trait(self_ty, &[sig.skip_binder().resume_ty.into()]),\n+    };\n     ty::Binder::bind((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n }\n "}, {"sha": "0a5ab790adbab2d97eac1dd160ff7a0dd27d341f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2350,8 +2350,9 @@ impl<'tcx> ty::Instance<'tcx> {\n                     ]);\n                     let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n-                    tcx.mk_fn_sig(iter::once(env_ty),\n-                        ret_ty,\n+                    tcx.mk_fn_sig(\n+                        [env_ty, sig.resume_ty].iter(),\n+                        &ret_ty,\n                         false,\n                         hir::Unsafety::Normal,\n                         rustc_target::spec::abi::Abi::Rust"}, {"sha": "9d00d27226320a2407a285c83a648ba419c11ce0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -598,8 +598,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.yield_ty, self.return_ty))\n-            .map(|(yield_ty, return_ty)| ty::GenSig { yield_ty, return_ty })\n+        tcx.lift(&(self.resume_ty, self.yield_ty, self.return_ty))\n+            .map(|(resume_ty, yield_ty, return_ty)| ty::GenSig { resume_ty, yield_ty, return_ty })\n     }\n }\n "}, {"sha": "0d30395d2501b93fea4442e223db135c80f89b40", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -346,9 +346,17 @@ static_assert_size!(TyKind<'_>, 24);\n /// ## Generators\n ///\n /// Generators are handled similarly in `GeneratorSubsts`.  The set of\n-/// type parameters is similar, but the role of CK and CS are\n-/// different. CK represents the \"yield type\" and CS represents the\n-/// \"return type\" of the generator.\n+/// type parameters is similar, but `CK` and `CS` are replaced by the\n+/// following type parameters:\n+///\n+/// * `GS`: The generator's \"resume type\", which is the type of the\n+///   argument passed to `resume`, and the type of `yield` expressions\n+///   inside the generator.\n+/// * `GY`: The \"yield type\", which is the type of values passed to\n+///   `yield` inside the generator.\n+/// * `GR`: The \"return type\", which is the type of value returned upon\n+///   completion of the generator.\n+/// * `GW`: The \"generator witness\".\n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n@@ -442,6 +450,7 @@ pub struct GeneratorSubsts<'tcx> {\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n+    resume_ty: Ty<'tcx>,\n     yield_ty: Ty<'tcx>,\n     return_ty: Ty<'tcx>,\n     witness: Ty<'tcx>,\n@@ -453,10 +462,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitGeneratorSubsts {\n-            yield_ty: self.substs.type_at(parent_len),\n-            return_ty: self.substs.type_at(parent_len + 1),\n-            witness: self.substs.type_at(parent_len + 2),\n-            upvar_kinds: &self.substs[parent_len + 3..],\n+            resume_ty: self.substs.type_at(parent_len),\n+            yield_ty: self.substs.type_at(parent_len + 1),\n+            return_ty: self.substs.type_at(parent_len + 2),\n+            witness: self.substs.type_at(parent_len + 3),\n+            upvar_kinds: &self.substs[parent_len + 4..],\n         }\n     }\n \n@@ -485,6 +495,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         })\n     }\n \n+    /// Returns the type representing the resume type of the generator.\n+    pub fn resume_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).resume_ty\n+    }\n+\n     /// Returns the type representing the yield type of the generator.\n     pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).yield_ty\n@@ -505,10 +520,14 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         ty::Binder::dummy(self.sig(def_id, tcx))\n     }\n \n-    /// Returns the \"generator signature\", which consists of its yield\n+    /// Returns the \"generator signature\", which consists of its resume, yield\n     /// and return types.\n     pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_>) -> GenSig<'tcx> {\n-        ty::GenSig { yield_ty: self.yield_ty(def_id, tcx), return_ty: self.return_ty(def_id, tcx) }\n+        ty::GenSig {\n+            resume_ty: self.resume_ty(def_id, tcx),\n+            yield_ty: self.yield_ty(def_id, tcx),\n+            return_ty: self.return_ty(def_id, tcx),\n+        }\n     }\n }\n \n@@ -1072,13 +1091,17 @@ impl<'tcx> ProjectionTy<'tcx> {\n \n #[derive(Clone, Debug, TypeFoldable)]\n pub struct GenSig<'tcx> {\n+    pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n }\n \n pub type PolyGenSig<'tcx> = Binder<GenSig<'tcx>>;\n \n impl<'tcx> PolyGenSig<'tcx> {\n+    pub fn resume_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+        self.map_bound_ref(|sig| sig.resume_ty)\n+    }\n     pub fn yield_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|sig| sig.yield_ty)\n     }"}, {"sha": "dd3316979f6a2206bcdd209158bdc5ca74272aa8", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -688,12 +688,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> Option<hir::Movability> {\n         match generator_kind {\n             Some(hir::GeneratorKind::Gen) => {\n-                if !decl.inputs.is_empty() {\n+                if decl.inputs.len() > 1 {\n                     struct_span_err!(\n                         self.sess,\n                         fn_decl_span,\n                         E0628,\n-                        \"generators cannot have explicit parameters\"\n+                        \"too many parameters for a generator (expected 0 or 1 parameters)\"\n                     )\n                     .emit();\n                 }"}, {"sha": "dbc54291f4087c25858d77cbefdaf5931d3b0813", "filename": "src/librustc_data_structures/box_region.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_data_structures%2Fbox_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_data_structures%2Fbox_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbox_region.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -25,6 +25,7 @@ pub struct PinnedGenerator<I, A, R> {\n }\n \n impl<I, A, R> PinnedGenerator<I, A, R> {\n+    #[cfg(bootstrap)]\n     pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n         generator: T,\n     ) -> (I, Self) {\n@@ -39,6 +40,22 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         (init, result)\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub fn new<T: Generator<Yield = YieldType<I, A>, Return = R> + 'static>(\n+        generator: T,\n+    ) -> (I, Self) {\n+        let mut result = PinnedGenerator { generator: Box::pin(generator) };\n+\n+        // Run it to the first yield to set it up\n+        let init = match Pin::new(&mut result.generator).resume(()) {\n+            GeneratorState::Yielded(YieldType::Initial(y)) => y,\n+            _ => panic!(),\n+        };\n+\n+        (init, result)\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n         BOX_REGION_ARG.with(|i| {\n             i.set(Action::Access(AccessAction(closure)));\n@@ -50,13 +67,35 @@ impl<I, A, R> PinnedGenerator<I, A, R> {\n         }\n     }\n \n+    #[cfg(not(bootstrap))]\n+    pub unsafe fn access(&mut self, closure: *mut dyn FnMut()) {\n+        BOX_REGION_ARG.with(|i| {\n+            i.set(Action::Access(AccessAction(closure)));\n+        });\n+\n+        // Call the generator, which in turn will call the closure in BOX_REGION_ARG\n+        if let GeneratorState::Complete(_) = Pin::new(&mut self.generator).resume(()) {\n+            panic!()\n+        }\n+    }\n+\n+    #[cfg(bootstrap)]\n     pub fn complete(&mut self) -> R {\n         // Tell the generator we want it to complete, consuming it and yielding a result\n         BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n \n         let result = Pin::new(&mut self.generator).resume();\n         if let GeneratorState::Complete(r) = result { r } else { panic!() }\n     }\n+\n+    #[cfg(not(bootstrap))]\n+    pub fn complete(&mut self) -> R {\n+        // Tell the generator we want it to complete, consuming it and yielding a result\n+        BOX_REGION_ARG.with(|i| i.set(Action::Complete));\n+\n+        let result = Pin::new(&mut self.generator).resume(());\n+        if let GeneratorState::Complete(r) = result { r } else { panic!() }\n+    }\n }\n \n #[derive(PartialEq)]"}, {"sha": "4f6644f358291bf6d6ca7cc1eb264aaec8c42192", "filename": "src/librustc_error_codes/error_codes/E0511.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0511.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0511.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0511.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,7 +1,7 @@\n Invalid monomorphization of an intrinsic function was used. Erroneous code\n example:\n \n-```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+```compile_fail,E0511\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "0afa4a8c9581167e27bb1b93413d96ce8936a267", "filename": "src/librustc_error_codes/error_codes/E0534.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0534.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0534.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0534.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,7 +2,7 @@ The `inline` attribute was malformed.\n \n Erroneous code example:\n \n-```ignore (compile_fail not working here; see Issue #43707)\n+```compile_fail,E0534\n #[inline()] // error: expected one argument\n pub fn something() {}\n "}, {"sha": "035d395b76fe7040a7ab71dc86a060be3e819012", "filename": "src/librustc_error_codes/error_codes/E0535.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0535.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0535.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0535.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,7 +2,7 @@ An unknown argument was given to the `inline` attribute.\n \n Erroneous code example:\n \n-```ignore (compile_fail not working here; see Issue #43707)\n+```compile_fail,E0535\n #[inline(unknown)] // error: invalid argument\n pub fn something() {}\n "}, {"sha": "d5bba941c1dd21fb040fca888f1af56de6415ce6", "filename": "src/librustc_error_codes/error_codes/E0565.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0565.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0565.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0565.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,16 +2,20 @@ A literal was used in a built-in attribute that doesn't support literals.\n \n Erroneous code example:\n \n-```ignore (compile_fail not working here; see Issue #43707)\n-#[inline(\"always\")] // error: unsupported literal\n-pub fn something() {}\n+```compile_fail,E0565\n+#[repr(\"C\")] // error: meta item in `repr` must be an identifier\n+struct Repr {}\n+\n+fn main() {}\n ```\n \n Literals in attributes are new and largely unsupported in built-in attributes.\n Work to support literals where appropriate is ongoing. Try using an unquoted\n name instead:\n \n ```\n-#[inline(always)]\n-pub fn something() {}\n+#[repr(C)] // ok!\n+struct Repr {}\n+\n+fn main() {}\n ```"}, {"sha": "cc6e03d1ca70f9ff0d56752faabb96899c349b57", "filename": "src/librustc_error_codes/error_codes/E0626.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0626.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,7 +12,7 @@ let mut b = || {\n     yield (); // ...is still in scope here, when the yield occurs.\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n At present, it is not permitted to have a yield that occurs while a\n@@ -31,7 +31,7 @@ let mut b = || {\n     yield ();\n     println!(\"{}\", a);\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n This is a very simple case, of course. In more complex cases, we may\n@@ -50,7 +50,7 @@ let mut b = || {\n     yield x; // ...when this yield occurs.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n Such cases can sometimes be resolved by iterating \"by value\" (or using\n@@ -66,7 +66,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n ```\n \n If taking ownership is not an option, using indices can work too:\n@@ -83,7 +83,7 @@ let mut b = || {\n     yield x; // <-- Now yield is OK.\n   }\n };\n-Pin::new(&mut b).resume();\n+Pin::new(&mut b).resume(());\n \n // (*) -- Unfortunately, these temporaries are currently required.\n // See <https://github.com/rust-lang/rust/issues/43122>."}, {"sha": "7f488cde664d94859cfe17920775b11be27b3e71", "filename": "src/librustc_error_codes/error_codes/E0633.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0633.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,7 +2,9 @@ The `unwind` attribute was malformed.\n \n Erroneous code example:\n \n-```ignore (compile_fail not working here; see Issue #43707)\n+```compile_fail,E0633\n+#![feature(unwind_attributes)]\n+\n #[unwind()] // error: expected one argument\n pub extern fn something() {}\n "}, {"sha": "f5d26244fb961e15abe11e1b8ed946502e4eafee", "filename": "src/librustc_error_codes/error_codes/E0668.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0668.md?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ assembly call.\n \n In particular, it can happen if you forgot the closing bracket of a register\n constraint (see issue #51430):\n-```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+```compile_fail,E0668\n #![feature(asm)]\n \n fn main() {"}, {"sha": "d83175694f407933ff9fa1eff575ddf06965f418", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -23,7 +23,7 @@ pub struct AnnotateSnippetEmitterWriter {\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n     ui_testing: bool,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n@@ -32,12 +32,12 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.fix_multispans_in_std_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.source_map,\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -172,9 +172,9 @@ impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> Self {\n-        Self { source_map, short_message, ui_testing: false, external_macro_backtrace }\n+        Self { source_map, short_message, ui_testing: false, macro_backtrace }\n     }\n \n     /// Allows to modify `Self` to enable or disable the `ui_testing` flag."}, {"sha": "f3653da4be6663d3e4577b98e14cd9cda869037b", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 140, "deletions": 91, "changes": 231, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -14,7 +14,6 @@ use rustc_span::{MultiSpan, SourceFile, Span};\n \n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n-use crate::Level::Error;\n use crate::{\n     pluralize, CodeSuggestion, Diagnostic, DiagnosticId, Level, SubDiagnostic, SuggestionStyle,\n };\n@@ -27,6 +26,7 @@ use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n use std::io;\n use std::io::prelude::*;\n+use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n@@ -54,19 +54,11 @@ impl HumanReadableErrorType {\n         source_map: Option<Lrc<SourceMap>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n-        EmitterWriter::new(\n-            dst,\n-            source_map,\n-            short,\n-            teach,\n-            color,\n-            terminal_width,\n-            external_macro_backtrace,\n-        )\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width, macro_backtrace)\n     }\n }\n \n@@ -280,138 +272,195 @@ pub trait Emitter {\n         }\n     }\n \n-    // This does a small \"fix\" for multispans by looking to see if it can find any that\n-    // point directly at <*macros>. Since these are often difficult to read, this\n-    // will change the span to point at the use site.\n-    fn fix_multispans_in_std_macros(\n+    fn fix_multispans_in_extern_macros_and_render_macro_backtrace(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n         level: &Level,\n         backtrace: bool,\n     ) {\n-        let mut spans_updated = self.fix_multispan_in_std_macros(source_map, span, backtrace);\n-        for child in children.iter_mut() {\n-            spans_updated |=\n-                self.fix_multispan_in_std_macros(source_map, &mut child.span, backtrace);\n+        // Check for spans in macros, before `fix_multispans_in_extern_macros`\n+        // has a chance to replace them.\n+        let has_macro_spans = iter::once(&*span)\n+            .chain(children.iter().map(|child| &child.span))\n+            .flat_map(|span| span.primary_spans())\n+            .copied()\n+            .flat_map(|sp| {\n+                sp.macro_backtrace().filter_map(|expn_data| {\n+                    match expn_data.kind {\n+                        ExpnKind::Root => None,\n+\n+                        // Skip past non-macro entries, just in case there\n+                        // are some which do actually involve macros.\n+                        ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n+\n+                        ExpnKind::Macro(macro_kind, _) => Some(macro_kind),\n+                    }\n+                })\n+            })\n+            .next();\n+\n+        if !backtrace {\n+            self.fix_multispans_in_extern_macros(source_map, span, children);\n         }\n-        let msg = if level == &Error {\n-            \"this error originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\"\n-                .to_string()\n-        } else {\n-            \"this warning originates in a macro outside of the current crate \\\n-             (in Nightly builds, run with -Z external-macro-backtrace \\\n-              for more info)\"\n-                .to_string()\n-        };\n \n-        if spans_updated {\n-            children.push(SubDiagnostic {\n-                level: Level::Note,\n-                message: vec![(msg, Style::NoStyle)],\n-                span: MultiSpan::new(),\n-                render_span: None,\n-            });\n+        self.render_multispans_macro_backtrace(span, children, backtrace);\n+\n+        if !backtrace {\n+            if let Some(macro_kind) = has_macro_spans {\n+                let msg = format!(\n+                    \"this {} originates in {} {} \\\n+                    (in Nightly builds, run with -Z macro-backtrace for more info)\",\n+                    level,\n+                    macro_kind.article(),\n+                    macro_kind.descr(),\n+                );\n+\n+                children.push(SubDiagnostic {\n+                    level: Level::Note,\n+                    message: vec![(msg, Style::NoStyle)],\n+                    span: MultiSpan::new(),\n+                    render_span: None,\n+                });\n+            }\n         }\n     }\n \n-    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n-    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n-    // <*macros> to their corresponding use site.\n-    fn fix_multispan_in_std_macros(\n+    fn render_multispans_macro_backtrace(\n         &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n         span: &mut MultiSpan,\n-        always_backtrace: bool,\n-    ) -> bool {\n-        let sm = match source_map {\n-            Some(ref sm) => sm,\n-            None => return false,\n-        };\n+        children: &mut Vec<SubDiagnostic>,\n+        backtrace: bool,\n+    ) {\n+        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+            self.render_multispan_macro_backtrace(span, backtrace);\n+        }\n+    }\n \n-        let mut before_after: Vec<(Span, Span)> = vec![];\n+    fn render_multispan_macro_backtrace(&self, span: &mut MultiSpan, always_backtrace: bool) {\n         let mut new_labels: Vec<(Span, String)> = vec![];\n \n-        // First, find all the spans in <*macros> and point instead at their use site\n-        for sp in span.primary_spans() {\n+        for &sp in span.primary_spans() {\n             if sp.is_dummy() {\n                 continue;\n             }\n-            let call_sp = sm.call_span_if_macro(*sp);\n-            if call_sp != *sp && !always_backtrace {\n-                before_after.push((*sp, call_sp));\n-            }\n+\n+            // FIXME(eddyb) use `retain` on `macro_backtrace` to remove all the\n+            // entries we don't want to print, to make sure the indices being\n+            // printed are contiguous (or omitted if there's only one entry).\n             let macro_backtrace: Vec<_> = sp.macro_backtrace().collect();\n-            let backtrace_len = macro_backtrace.len();\n             for (i, trace) in macro_backtrace.iter().rev().enumerate() {\n-                // Only show macro locations that are local\n-                // and display them like a span_note\n                 if trace.def_site.is_dummy() {\n                     continue;\n                 }\n+\n                 if always_backtrace {\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n                             \"in this expansion of `{}`{}\",\n                             trace.kind.descr(),\n-                            if backtrace_len > 2 {\n-                                // if backtrace_len == 1 it'll be pointed\n-                                // at by \"in this macro invocation\"\n+                            if macro_backtrace.len() > 2 {\n+                                // if macro_backtrace.len() == 1 it'll be\n+                                // pointed at by \"in this macro invocation\"\n                                 format!(\" (#{})\", i + 1)\n                             } else {\n                                 String::new()\n-                            }\n+                            },\n                         ),\n                     ));\n                 }\n-                // Check to make sure we're not in any <*macros>\n-                if !sm.span_to_filename(trace.def_site).is_macros()\n-                    && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n+\n+                // Don't add a label on the call site if the diagnostic itself\n+                // already points to (a part of) that call site, as the label\n+                // is meant for showing the relevant invocation when the actual\n+                // diagnostic is pointing to some part of macro definition.\n+                //\n+                // This also handles the case where an external span got replaced\n+                // with the call site span by `fix_multispans_in_extern_macros`.\n+                //\n+                // NB: `-Zmacro-backtrace` overrides this, for uniformity, as the\n+                // \"in this expansion of\" label above is always added in that mode,\n+                // and it needs an \"in this macro invocation\" label to match that.\n+                let redundant_span = trace.call_site.contains(sp);\n+\n+                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push((\n                         trace.call_site,\n                         format!(\n                             \"in this macro invocation{}\",\n-                            if backtrace_len > 2 && always_backtrace {\n+                            if macro_backtrace.len() > 2 && always_backtrace {\n                                 // only specify order when the macro\n                                 // backtrace is multiple levels deep\n                                 format!(\" (#{})\", i + 1)\n                             } else {\n                                 String::new()\n-                            }\n+                            },\n                         ),\n                     ));\n-                    if !always_backtrace {\n-                        break;\n-                    }\n+                }\n+                if !always_backtrace {\n+                    break;\n                 }\n             }\n         }\n+\n         for (label_span, label_text) in new_labels {\n             span.push_span_label(label_span, label_text);\n         }\n-        for sp_label in span.span_labels() {\n-            if sp_label.span.is_dummy() {\n-                continue;\n-            }\n-            if sm.span_to_filename(sp_label.span.clone()).is_macros() && !always_backtrace {\n-                if let Some(use_site) = sp_label.span.macro_backtrace().last() {\n-                    before_after.push((sp_label.span, use_site.call_site));\n-                }\n-            }\n+    }\n+\n+    // This does a small \"fix\" for multispans by looking to see if it can find any that\n+    // point directly at <*macros>. Since these are often difficult to read, this\n+    // will change the span to point at the use site.\n+    fn fix_multispans_in_extern_macros(\n+        &self,\n+        source_map: &Option<Lrc<SourceMap>>,\n+        span: &mut MultiSpan,\n+        children: &mut Vec<SubDiagnostic>,\n+    ) {\n+        for span in iter::once(span).chain(children.iter_mut().map(|child| &mut child.span)) {\n+            self.fix_multispan_in_extern_macros(source_map, span);\n         }\n+    }\n+\n+    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n+    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n+    // <*macros> to their corresponding use site.\n+    fn fix_multispan_in_extern_macros(\n+        &self,\n+        source_map: &Option<Lrc<SourceMap>>,\n+        span: &mut MultiSpan,\n+    ) {\n+        let sm = match source_map {\n+            Some(ref sm) => sm,\n+            None => return,\n+        };\n+\n+        // First, find all the spans in <*macros> and point instead at their use site\n+        let replacements: Vec<(Span, Span)> = span\n+            .primary_spans()\n+            .iter()\n+            .copied()\n+            .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n+            .filter_map(|sp| {\n+                if !sp.is_dummy() && sm.span_to_filename(sp).is_macros() {\n+                    let maybe_callsite = sp.source_callsite();\n+                    if sp != maybe_callsite {\n+                        return Some((sp, maybe_callsite));\n+                    }\n+                }\n+                None\n+            })\n+            .collect();\n+\n         // After we have them, make sure we replace these 'bad' def sites with their use sites\n-        let spans_updated = !before_after.is_empty();\n-        for (before, after) in before_after {\n-            span.replace(before, after);\n+        for (from, to) in replacements {\n+            span.replace(from, to);\n         }\n-\n-        spans_updated\n     }\n }\n \n@@ -424,12 +473,12 @@ impl Emitter for EmitterWriter {\n         let mut children = diag.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&diag);\n \n-        self.fix_multispans_in_std_macros(\n+        self.fix_multispans_in_extern_macros_and_render_macro_backtrace(\n             &self.sm,\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -508,7 +557,7 @@ pub struct EmitterWriter {\n     ui_testing: bool,\n     terminal_width: Option<usize>,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n #[derive(Debug)]\n@@ -525,7 +574,7 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -535,7 +584,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -546,7 +595,7 @@ impl EmitterWriter {\n         teach: bool,\n         colored: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -555,7 +604,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n "}, {"sha": "ffdff6acec5de1b0a08553198c048fda445667b3", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -36,7 +36,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl JsonEmitter {\n@@ -45,7 +45,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n@@ -54,22 +54,22 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n     pub fn basic(\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n             None,\n             Lrc::new(SourceMap::new(file_path_mapping)),\n             pretty,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         )\n     }\n \n@@ -79,7 +79,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -88,7 +88,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -245,13 +245,7 @@ impl Diagnostic {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         je.json_rendered\n-            .new_emitter(\n-                Box::new(buf),\n-                Some(je.sm.clone()),\n-                false,\n-                None,\n-                je.external_macro_backtrace,\n-            )\n+            .new_emitter(Box::new(buf), Some(je.sm.clone()), false, None, je.macro_backtrace)\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();"}, {"sha": "97667febc3ca235d5b1c2429dd46b86f89f545a8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -336,9 +336,9 @@ pub struct HandlerFlags {\n     /// If true, immediately print bugs registered with `delay_span_bug`.\n     /// (rustc: see `-Z report-delayed-bugs`)\n     pub report_delayed_bugs: bool,\n-    /// show macro backtraces even for non-local macros.\n-    /// (rustc: see `-Z external-macro-backtrace`)\n-    pub external_macro_backtrace: bool,\n+    /// Show macro backtraces.\n+    /// (rustc: see `-Z macro-backtrace`)\n+    pub macro_backtrace: bool,\n     /// If true, identical diagnostics are reported only once.\n     pub deduplicate_diagnostics: bool,\n }\n@@ -385,7 +385,7 @@ impl Handler {\n             false,\n             false,\n             None,\n-            flags.external_macro_backtrace,\n+            flags.macro_backtrace,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }"}, {"sha": "392f164d3148c49434e54a5cd7f4637712dc8bed", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -159,7 +159,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, index);\n                 }\n             }\n-            TerminatorKind::Yield { ref value, resume, drop: _ } => {\n+            TerminatorKind::Yield { ref value, resume, resume_arg, drop: _ } => {\n                 self.consume_operand(location, value);\n \n                 // Invalidate all borrows of local places\n@@ -170,6 +170,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                         self.all_facts.invalidates.push((resume, i));\n                     }\n                 }\n+\n+                self.mutate_place(location, resume_arg, Deep, JustWrite);\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n                 // Invalidate all borrows of local places"}, {"sha": "e528159fcef17d4a373db566c3bd5095fab56e71", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -684,7 +684,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 }\n             }\n \n-            TerminatorKind::Yield { ref value, resume: _, drop: _ } => {\n+            TerminatorKind::Yield { ref value, resume: _, ref resume_arg, drop: _ } => {\n                 self.consume_operand(loc, (value, span), flow_state);\n \n                 if self.movable_generator {\n@@ -697,6 +697,8 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                         }\n                     });\n                 }\n+\n+                self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n             }\n \n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {"}, {"sha": "f6e3ca2f80900d2a555e386621bbca4d8f44d6bf", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -581,9 +581,11 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n+                let resume_ty = substs.as_generator().resume_ty(def_id, tcx);\n                 let output = substs.as_generator().return_ty(def_id, tcx);\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n-                let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n+                let inputs_and_output =\n+                    self.infcx.tcx.intern_type_list(&[generator_ty, resume_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)\n             }\n "}, {"sha": "040c13e8210ea056bc8eb23219d8744740ecbd94", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -31,10 +31,12 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeStorageLive<'a, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _on_entry: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn statement_effect(&self, trans: &mut GenKillSet<Local>, loc: Location) {\n@@ -100,10 +102,12 @@ impl<'mir, 'tcx> BitDenotation<'tcx> for RequiresStorage<'mir, 'tcx> {\n         self.body.local_decls.len()\n     }\n \n-    fn start_block_effect(&self, _sets: &mut BitSet<Local>) {\n-        // Nothing is live on function entry (generators only have a self\n-        // argument, and we don't care about that)\n-        assert_eq!(1, self.body.arg_count);\n+    fn start_block_effect(&self, on_entry: &mut BitSet<Local>) {\n+        // The resume argument is live on function entry (we don't care about\n+        // the `self` argument)\n+        for arg in self.body.args_iter().skip(1) {\n+            on_entry.insert(arg);\n+        }\n     }\n \n     fn before_statement_effect(&self, sets: &mut GenKillSet<Self::Idx>, loc: Location) {"}, {"sha": "6f8caca5e21ef1125ee66f2dfd25b798ac2f7542", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -380,7 +380,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 self.gather_operand(discr);\n             }\n \n-            TerminatorKind::Yield { ref value, .. } => {\n+            TerminatorKind::Yield { ref value, resume_arg: ref place, .. } => {\n+                self.create_move_path(place);\n+                self.gather_init(place.as_ref(), InitKind::Deep);\n                 self.gather_operand(value);\n             }\n "}, {"sha": "a6fc65731780a506037e4b26c446cd3b8a4c8b03", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 94, "deletions": 26, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -192,9 +192,10 @@ const RETURNED: usize = GeneratorSubsts::RETURNED;\n /// Generator has been poisoned\n const POISONED: usize = GeneratorSubsts::POISONED;\n \n-struct SuspensionPoint {\n+struct SuspensionPoint<'tcx> {\n     state: usize,\n     resume: BasicBlock,\n+    resume_arg: Place<'tcx>,\n     drop: Option<BasicBlock>,\n     storage_liveness: liveness::LiveVarSet,\n }\n@@ -216,7 +217,7 @@ struct TransformVisitor<'tcx> {\n     storage_liveness: FxHashMap<BasicBlock, liveness::LiveVarSet>,\n \n     // A list of suspension points, generated during the transform\n-    suspension_points: Vec<SuspensionPoint>,\n+    suspension_points: Vec<SuspensionPoint<'tcx>>,\n \n     // The original RETURN_PLACE local\n     new_ret_local: Local,\n@@ -303,8 +304,8 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                 Operand::Move(Place::from(self.new_ret_local)),\n                 None,\n             )),\n-            TerminatorKind::Yield { ref value, resume, drop } => {\n-                Some((VariantIdx::new(0), Some(resume), value.clone(), drop))\n+            TerminatorKind::Yield { ref value, resume, resume_arg, drop } => {\n+                Some((VariantIdx::new(0), Some((resume, resume_arg)), value.clone(), drop))\n             }\n             _ => None,\n         };\n@@ -319,13 +320,14 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n                     self.make_state(state_idx, v),\n                 )),\n             });\n-            let state = if let Some(resume) = resume {\n+            let state = if let Some((resume, resume_arg)) = resume {\n                 // Yield\n                 let state = 3 + self.suspension_points.len();\n \n                 self.suspension_points.push(SuspensionPoint {\n                     state,\n                     resume,\n+                    resume_arg,\n                     drop,\n                     storage_liveness: self.storage_liveness.get(&block).unwrap().clone(),\n                 });\n@@ -378,28 +380,35 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n     PinArgVisitor { ref_gen_ty, tcx }.visit_body(body);\n }\n \n-fn replace_result_variable<'tcx>(\n-    ret_ty: Ty<'tcx>,\n+/// Allocates a new local and replaces all references of `local` with it. Returns the new local.\n+///\n+/// `local` will be changed to a new local decl with type `ty`.\n+///\n+/// Note that the new local will be uninitialized. It is the caller's responsibility to assign some\n+/// valid value to it before its first use.\n+fn replace_local<'tcx>(\n+    local: Local,\n+    ty: Ty<'tcx>,\n     body: &mut BodyAndCache<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n-    let new_ret = LocalDecl {\n+    let new_decl = LocalDecl {\n         mutability: Mutability::Mut,\n-        ty: ret_ty,\n+        ty,\n         user_ty: UserTypeProjections::none(),\n         source_info,\n         internal: false,\n         is_block_tail: None,\n         local_info: LocalInfo::Other,\n     };\n-    let new_ret_local = Local::new(body.local_decls.len());\n-    body.local_decls.push(new_ret);\n-    body.local_decls.swap(RETURN_PLACE, new_ret_local);\n+    let new_local = Local::new(body.local_decls.len());\n+    body.local_decls.push(new_decl);\n+    body.local_decls.swap(local, new_local);\n \n-    RenameLocalVisitor { from: RETURN_PLACE, to: new_ret_local, tcx }.visit_body(body);\n+    RenameLocalVisitor { from: local, to: new_local, tcx }.visit_body(body);\n \n-    new_ret_local\n+    new_local\n }\n \n struct StorageIgnored(liveness::LiveVarSet);\n@@ -792,6 +801,10 @@ fn compute_layout<'tcx>(\n     (remap, layout, storage_liveness)\n }\n \n+/// Replaces the entry point of `body` with a block that switches on the generator discriminant and\n+/// dispatches to blocks according to `cases`.\n+///\n+/// After this function, the former entry point of the function will be bb1.\n fn insert_switch<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     cases: Vec<(usize, BasicBlock)>,\n@@ -885,10 +898,11 @@ fn create_generator_drop_shim<'tcx>(\n     drop_clean: BasicBlock,\n ) -> BodyAndCache<'tcx> {\n     let mut body = body.clone();\n+    body.arg_count = 1; // make sure the resume argument is not included here\n \n     let source_info = source_info(&body);\n \n-    let mut cases = create_cases(&mut body, transform, |point| point.drop);\n+    let mut cases = create_cases(&mut body, transform, Operation::Drop);\n \n     cases.insert(0, (UNRESUMED, drop_clean));\n \n@@ -1006,7 +1020,7 @@ fn create_generator_resume_function<'tcx>(\n         }\n     }\n \n-    let mut cases = create_cases(body, &transform, |point| Some(point.resume));\n+    let mut cases = create_cases(body, &transform, Operation::Resume);\n \n     use rustc::mir::interpret::PanicInfo::{ResumedAfterPanic, ResumedAfterReturn};\n \n@@ -1056,34 +1070,66 @@ fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     drop_clean\n }\n \n-fn create_cases<'tcx, F>(\n+/// An operation that can be performed on a generator.\n+#[derive(PartialEq, Copy, Clone)]\n+enum Operation {\n+    Resume,\n+    Drop,\n+}\n+\n+impl Operation {\n+    fn target_block(self, point: &SuspensionPoint<'_>) -> Option<BasicBlock> {\n+        match self {\n+            Operation::Resume => Some(point.resume),\n+            Operation::Drop => point.drop,\n+        }\n+    }\n+}\n+\n+fn create_cases<'tcx>(\n     body: &mut BodyAndCache<'tcx>,\n     transform: &TransformVisitor<'tcx>,\n-    target: F,\n-) -> Vec<(usize, BasicBlock)>\n-where\n-    F: Fn(&SuspensionPoint) -> Option<BasicBlock>,\n-{\n+    operation: Operation,\n+) -> Vec<(usize, BasicBlock)> {\n     let source_info = source_info(body);\n \n     transform\n         .suspension_points\n         .iter()\n         .filter_map(|point| {\n             // Find the target for this suspension point, if applicable\n-            target(point).map(|target| {\n+            operation.target_block(point).map(|target| {\n                 let block = BasicBlock::new(body.basic_blocks().len());\n                 let mut statements = Vec::new();\n \n                 // Create StorageLive instructions for locals with live storage\n                 for i in 0..(body.local_decls.len()) {\n+                    if i == 2 {\n+                        // The resume argument is live on function entry. Don't insert a\n+                        // `StorageLive`, or the following `Assign` will read from uninitialized\n+                        // memory.\n+                        continue;\n+                    }\n+\n                     let l = Local::new(i);\n                     if point.storage_liveness.contains(l) && !transform.remap.contains_key(&l) {\n                         statements\n                             .push(Statement { source_info, kind: StatementKind::StorageLive(l) });\n                     }\n                 }\n \n+                if operation == Operation::Resume {\n+                    // Move the resume argument to the destination place of the `Yield` terminator\n+                    let resume_arg = Local::new(2); // 0 = return, 1 = self\n+                    statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            point.resume_arg,\n+                            Rvalue::Use(Operand::Move(resume_arg.into())),\n+                        )),\n+                    });\n+                }\n+\n                 // Then jump to the real target\n                 body.basic_blocks_mut().push(BasicBlockData {\n                     statements,\n@@ -1138,7 +1184,29 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local\n         // RETURN_PLACE then is a fresh unused local with type ret_ty.\n-        let new_ret_local = replace_result_variable(ret_ty, body, tcx);\n+        let new_ret_local = replace_local(RETURN_PLACE, ret_ty, body, tcx);\n+\n+        // We also replace the resume argument and insert an `Assign`.\n+        // This is needed because the resume argument `_2` might be live across a `yield`, in which\n+        // case there is no `Assign` to it that the transform can turn into a store to the generator\n+        // state. After the yield the slot in the generator state would then be uninitialized.\n+        let resume_local = Local::new(2);\n+        let new_resume_local =\n+            replace_local(resume_local, body.local_decls[resume_local].ty, body, tcx);\n+\n+        // When first entering the generator, move the resume argument into its new local.\n+        let source_info = source_info(body);\n+        let stmts = &mut body.basic_blocks_mut()[BasicBlock::new(0)].statements;\n+        stmts.insert(\n+            0,\n+            Statement {\n+                source_info,\n+                kind: StatementKind::Assign(box (\n+                    new_resume_local.into(),\n+                    Rvalue::Use(Operand::Move(resume_local.into())),\n+                )),\n+            },\n+        );\n \n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices\n@@ -1162,9 +1230,9 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         };\n         transform.visit_body(body);\n \n-        // Update our MIR struct to reflect the changed we've made\n+        // Update our MIR struct to reflect the changes we've made\n         body.yield_ty = None;\n-        body.arg_count = 1;\n+        body.arg_count = 2; // self, resume arg\n         body.spread_arg = None;\n         body.generator_layout = Some(layout);\n "}, {"sha": "6f5c5f0dd4c5013b795c7cdd4eea0457235930ec", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -230,18 +230,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block = unpack!(this.stmt_expr(block, expr, None));\n                 block.and(this.unit_rvalue())\n             }\n-            ExprKind::Yield { value } => {\n-                let value = unpack!(block = this.as_operand(block, scope, value));\n-                let resume = this.cfg.start_new_block();\n-                let cleanup = this.generator_drop_cleanup();\n-                this.cfg.terminate(\n-                    block,\n-                    source_info,\n-                    TerminatorKind::Yield { value: value, resume: resume, drop: cleanup },\n-                );\n-                resume.and(this.unit_rvalue())\n-            }\n-            ExprKind::Literal { .. }\n+            ExprKind::Yield { .. }\n+            | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::Block { .. }\n             | ExprKind::Match { .. }"}, {"sha": "cc139dee63f92b86100045d40fd406db2764d37c", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -50,6 +50,7 @@ impl Category {\n             | ExprKind::Adt { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n+            | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n@@ -63,7 +64,6 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::Yield { .. }\n             | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => Some(Category::Constant),"}, {"sha": "51b0b5bc7cb0b73c320df8bae29c8a8b4b9ea87e", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -365,6 +365,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.unit()\n             }\n \n+            ExprKind::Yield { value } => {\n+                let scope = this.local_scope();\n+                let value = unpack!(block = this.as_operand(block, scope, value));\n+                let resume = this.cfg.start_new_block();\n+                let cleanup = this.generator_drop_cleanup();\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::Yield {\n+                        value,\n+                        resume,\n+                        resume_arg: destination.clone(),\n+                        drop: cleanup,\n+                    },\n+                );\n+                resume.unit()\n+            }\n+\n             // these are the cases that are more naturally handled by some other mode\n             ExprKind::Unary { .. }\n             | ExprKind::Binary { .. }\n@@ -376,8 +394,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Tuple { .. }\n             | ExprKind::Closure { .. }\n             | ExprKind::Literal { .. }\n-            | ExprKind::StaticRef { .. }\n-            | ExprKind::Yield { .. } => {\n+            | ExprKind::StaticRef { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     // should be handled above\n                     Category::Rvalue(RvalueFunc::Into) => false,"}, {"sha": "32b1f2b6e1368d6d060321e6c7d09be3c2bca971", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -68,28 +68,38 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             let fn_sig = cx.tables().liberated_fn_sigs()[id];\n             let fn_def_id = tcx.hir().local_def_id(id);\n \n+            let safety = match fn_sig.unsafety {\n+                hir::Unsafety::Normal => Safety::Safe,\n+                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+            };\n+\n+            let body = tcx.hir().body(body_id);\n             let ty = tcx.type_of(fn_def_id);\n             let mut abi = fn_sig.abi;\n             let implicit_argument = match ty.kind {\n                 ty::Closure(..) => {\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n+                    vec![ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None)]\n                 }\n                 ty::Generator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_type(id);\n-                    Some(ArgInfo(gen_ty, None, None, None))\n-                }\n-                _ => None,\n-            };\n \n-            let safety = match fn_sig.unsafety {\n-                hir::Unsafety::Normal => Safety::Safe,\n-                hir::Unsafety::Unsafe => Safety::FnUnsafe,\n+                    // The resume argument may be missing, in that case we need to provide it here.\n+                    // It will always be `()` in this case.\n+                    if body.params.is_empty() {\n+                        vec![\n+                            ArgInfo(gen_ty, None, None, None),\n+                            ArgInfo(tcx.mk_unit(), None, None, None),\n+                        ]\n+                    } else {\n+                        vec![ArgInfo(gen_ty, None, None, None)]\n+                    }\n+                }\n+                _ => vec![],\n             };\n \n-            let body = tcx.hir().body(body_id);\n             let explicit_arguments = body.params.iter().enumerate().map(|(index, arg)| {\n                 let owner_id = tcx.hir().body_owner(body_id);\n                 let opt_ty_info;"}, {"sha": "75b5e37b2df694f61e29dd2e810156d2b53e28c4", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -624,7 +624,7 @@ impl DebuggingOptions {\n             treat_err_as_bug: self.treat_err_as_bug,\n             dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n             report_delayed_bugs: self.report_delayed_bugs,\n-            external_macro_backtrace: self.external_macro_backtrace,\n+            macro_backtrace: self.macro_backtrace,\n             deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n         }\n     }"}, {"sha": "0250c40bcdcf1b81e3c799a4c5899cba4d18713c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -776,8 +776,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n-    external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces even for non-local macros\"),\n+    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+        \"show macro backtraces\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],"}, {"sha": "648dd6ad32a6b01cc94478f69c5eb92da3fbef94", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -858,7 +858,7 @@ fn default_emitter(\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n-    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n+    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -867,7 +867,7 @@ fn default_emitter(\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n-                    external_macro_backtrace,\n+                    macro_backtrace,\n                 );\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             } else {\n@@ -878,7 +878,7 @@ fn default_emitter(\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n@@ -887,7 +887,7 @@ fn default_emitter(\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n                         None,  // no terminal width\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n@@ -899,7 +899,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n@@ -910,7 +910,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),"}, {"sha": "45c4d6dbc6cf4ecdf2867f58e794048b975abce1", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -945,14 +945,6 @@ impl SourceMap {\n             _ => None,\n         })\n     }\n-    pub fn call_span_if_macro(&self, sp: Span) -> Span {\n-        if self.span_to_filename(sp.clone()).is_macros() {\n-            if let Some(use_site) = sp.macro_backtrace().last() {\n-                return use_site.call_site;\n-            }\n-        }\n-        sp\n-    }\n }\n \n #[derive(Clone)]"}, {"sha": "346d2a931d10b4b6ed068639339a19298ae99a10", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -227,15 +227,16 @@ fn dtorck_constraint_for_ty<'tcx>(\n             // In particular, skipping over `_interior` is safe\n             // because any side-effects from dropping `_interior` can\n             // only take place through references with lifetimes\n-            // derived from lifetimes attached to the upvars, and we\n-            // *do* incorporate the upvars here.\n+            // derived from lifetimes attached to the upvars and resume\n+            // argument, and we *do* incorporate those here.\n \n             constraints.outlives.extend(\n                 substs\n                     .as_generator()\n                     .upvar_tys(def_id, tcx)\n                     .map(|t| -> ty::subst::GenericArg<'tcx> { t.into() }),\n             );\n+            constraints.outlives.push(substs.as_generator().resume_ty(def_id, tcx).into());\n         }\n \n         ty::Adt(def, substs) => {"}, {"sha": "26777b3b0104882c567e248616e1a8142134a61a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -92,8 +92,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .into(),\n             GenericParamDefKind::Const => span_bug!(expr.span, \"closure has const param\"),\n         });\n-        if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n+        if let Some(GeneratorTypes { resume_ty, yield_ty, interior, movability }) = generator_types\n+        {\n             let generator_substs = substs.as_generator();\n+            self.demand_eqtype(\n+                expr.span,\n+                resume_ty,\n+                generator_substs.resume_ty(expr_def_id, self.tcx),\n+            );\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n@@ -259,8 +265,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => return None,\n             }\n         } else {\n-            // Generators cannot have explicit arguments.\n-            vec![]\n+            // Generators with a `()` resume type may be defined with 0 or 1 explicit arguments,\n+            // else they must have exactly 1 argument. For now though, just give up in this case.\n+            return None;\n         };\n \n         let ret_param_ty = projection.skip_binder().ty;"}, {"sha": "9ce89bd636304ea6a5d404318b882f84582a8416", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1796,16 +1796,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         src: &'tcx hir::YieldSource,\n     ) -> Ty<'tcx> {\n-        match self.yield_ty {\n-            Some(ty) => {\n-                self.check_expr_coercable_to_type(&value, ty);\n+        match self.resume_yield_tys {\n+            Some((resume_ty, yield_ty)) => {\n+                self.check_expr_coercable_to_type(&value, yield_ty);\n+\n+                resume_ty\n             }\n             // Given that this `yield` expression was generated as a result of lowering a `.await`,\n             // we know that the yield type must be `()`; however, the context won't contain this\n             // information. Hence, we check the source of the yield expression here and check its\n             // value's type against `()` (this check should always hold).\n             None if src == &hir::YieldSource::Await => {\n                 self.check_expr_coercable_to_type(&value, self.tcx.mk_unit());\n+                self.tcx.mk_unit()\n             }\n             _ => {\n                 struct_span_err!(\n@@ -1815,9 +1818,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     \"yield expression outside of generator literal\"\n                 )\n                 .emit();\n+                self.tcx.mk_unit()\n             }\n         }\n-        self.tcx.mk_unit()\n     }\n }\n "}, {"sha": "0b87d3adcb5bcfc77015869e7f81d2fb3b902b75", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -573,7 +573,7 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// First span of a return site that we find. Used in error messages.\n     ret_coercion_span: RefCell<Option<Span>>,\n \n-    yield_ty: Option<Ty<'tcx>>,\n+    resume_yield_tys: Option<(Ty<'tcx>, Ty<'tcx>)>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -1251,6 +1251,9 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n /// includes yield), it returns back some information about the yield\n /// points.\n struct GeneratorTypes<'tcx> {\n+    /// Type of generator argument / values returned by `yield`.\n+    resume_ty: Ty<'tcx>,\n+\n     /// Type of value that is yielded.\n     yield_ty: Ty<'tcx>,\n \n@@ -1311,7 +1314,11 @@ fn check_fn<'a, 'tcx>(\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });\n         fcx.require_type_is_sized(yield_ty, span, traits::SizedYieldType);\n-        fcx.yield_ty = Some(yield_ty);\n+\n+        // Resume type defaults to `()` if the generator has no argument.\n+        let resume_ty = fn_sig.inputs().get(0).map(|ty| *ty).unwrap_or_else(|| tcx.mk_unit());\n+\n+        fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n     let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id));\n@@ -1364,8 +1371,11 @@ fn check_fn<'a, 'tcx>(\n         let interior = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::MiscVariable, span });\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior, gen_kind));\n+\n+        let (resume_ty, yield_ty) = fcx.resume_yield_tys.unwrap();\n         Some(GeneratorTypes {\n-            yield_ty: fcx.yield_ty.unwrap(),\n+            resume_ty,\n+            yield_ty,\n             interior,\n             movability: can_be_generator.unwrap(),\n         })\n@@ -2767,7 +2777,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n             ret_coercion_span: RefCell::new(None),\n-            yield_ty: None,\n+            resume_yield_tys: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal, hir::CRATE_HIR_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n             has_errors: Cell::new(false),"}, {"sha": "dc089c9045693e15e3a0583bdcb468efa55b4ebb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1189,7 +1189,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     // and we don't do that for closures.\n     if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., gen), .. }) = node {\n         let dummy_args = if gen.is_some() {\n-            &[\"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n+            &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n         } else {\n             &[\"<closure_kind>\", \"<closure_signature>\"][..]\n         };"}, {"sha": "f74c84e6dfd4862f60362a73aeb756b7cd7539ab", "filename": "src/libstd/future.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -40,7 +40,10 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n         let _guard = unsafe { set_task_context(cx) };\n-        match gen.resume() {\n+        match gen.resume(\n+            #[cfg(not(bootstrap))]\n+            (),\n+        ) {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         }"}, {"sha": "fd46c1a8b4db74d7ecae2db5f6119236096e1b00", "filename": "src/test/debuginfo/generator-locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-locals.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -78,9 +78,9 @@ fn main() {\n         _zzz(); // #break\n         a = c;\n     };\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "f19a3c71dd8d282f6b8603ce372c4efd5db686cf", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -57,11 +57,11 @@ fn main() {\n         println!(\"{} {} {}\", a, c, d);\n     };\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n     _zzz(); // #break\n }\n "}, {"sha": "4de88e9dae62bc5269f5ead15a56a39d301c4f86", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -45,7 +45,7 @@ fn main() {\n         yield;\n     };\n     let mut b = move || {\n-        Pin::new(&mut a).resume();\n+        Pin::new(&mut a).resume(());\n         yield;\n     };\n "}, {"sha": "278dc49c9260526b19b8ffd26398d8217e7e93d1", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -13,12 +13,12 @@ fn main() {\n \n // START rustc.main-{{closure}}.generator_drop.0.mir\n // bb0: {\n-//     _5 = discriminant((*_1));\n-//     switchInt(move _5) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n+//     _7 = discriminant((*_1));\n+//     switchInt(move _7) -> [0u32: bb4, 3u32: bb7, otherwise: bb8];\n // }\n // bb1: {\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     goto -> bb5;\n // }\n // bb2: {\n@@ -37,8 +37,8 @@ fn main() {\n //     goto -> bb3;\n // }\n // bb7: {\n-//     StorageLive(_2);\n //     StorageLive(_3);\n+//     StorageLive(_4);\n //     goto -> bb1;\n // }\n // bb8: {"}, {"sha": "4442fa5f52126457b6c4d88312c2de8fef0aa12a", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -31,81 +31,81 @@ fn main() {\n \n // START rustc.main-{{closure}}.StateTransform.before.mir\n // ...\n-// let _2: Foo;\n+// let _3: Foo;\n // ...\n-// let mut _7: Foo;\n+// let mut _8: Foo;\n // ...\n-// let mut _9: Bar;\n+// let mut _10: Bar;\n // scope 1 {\n-//     debug a => _2;\n-//     let _3: Bar;\n+//     debug a => _3;\n+//     let _4: Bar;\n //     scope 2 {\n-//         debug b => _3;\n+//         debug b => _4;\n //     }\n // }\n // bb0: {\n-//     StorageLive(_2);\n-//     _2 = Foo(const 5i32,);\n //     StorageLive(_3);\n-//     _3 = Bar(const 6i32,);\n+//     _3 = Foo(const 5i32,);\n+//     StorageLive(_4);\n+//     _4 = Bar(const 6i32,);\n //     ...\n-//     _1 = suspend(move _5) -> [resume: bb2, drop: bb4];\n+//     _1 = suspend(move _6) -> [resume: bb2, drop: bb4];\n // }\n // bb1 (cleanup): {\n //     resume;\n // }\n // bb2: {\n //     ...\n-//     StorageLive(_6);\n //     StorageLive(_7);\n-//     _7 = move _2;\n-//     _6 = const take::<Foo>(move _7) -> [return: bb7, unwind: bb9];\n+//     StorageLive(_8);\n+//     _8 = move _3;\n+//     _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9];\n // }\n // bb3 (cleanup): {\n-//     StorageDead(_2);\n+//     StorageDead(_3);\n //     drop(_1) -> bb1;\n // }\n // bb4: {\n //     ...\n-//     StorageDead(_3);\n-//     drop(_2) -> [return: bb5, unwind: bb3];\n+//     StorageDead(_4);\n+//     drop(_3) -> [return: bb5, unwind: bb3];\n // }\n // bb5: {\n-//     StorageDead(_2);\n+//     StorageDead(_3);\n //     drop(_1) -> [return: bb6, unwind: bb1];\n // }\n // bb6: {\n //     generator_drop;\n // }\n // bb7: {\n+//     StorageDead(_8);\n //     StorageDead(_7);\n-//     StorageDead(_6);\n-//     StorageLive(_8);\n //     StorageLive(_9);\n-//     _9 = move _3;\n-//     _8 = const take::<Bar>(move _9) -> [return: bb10, unwind: bb11];\n+//     StorageLive(_10);\n+//     _10 = move _4;\n+//     _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11];\n // }\n // bb8 (cleanup): {\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     drop(_1) -> bb1;\n // }\n // bb9 (cleanup): {\n+//     StorageDead(_8);\n //     StorageDead(_7);\n-//     StorageDead(_6);\n //     goto -> bb8;\n // }\n // bb10: {\n+//     StorageDead(_10);\n //     StorageDead(_9);\n-//     StorageDead(_8);\n //     ...\n+//     StorageDead(_4);\n //     StorageDead(_3);\n-//     StorageDead(_2);\n //     drop(_1) -> [return: bb12, unwind: bb1];\n // }\n // bb11 (cleanup): {\n+//     StorageDead(_10);\n //     StorageDead(_9);\n-//     StorageDead(_8);\n //     goto -> bb8;\n // }\n // bb12: {"}, {"sha": "1a7c2e80629012ecae140f87c54a24cbd6078304", "filename": "src/test/run-fail/generator-resume-after-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -16,7 +16,7 @@ fn main() {\n         yield;\n     };\n     panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        let x = Pin::new(&mut g).resume();\n+        let x = Pin::new(&mut g).resume(());\n     }));\n-    Pin::new(&mut g).resume();\n+    Pin::new(&mut g).resume(());\n }"}, {"sha": "91b1fff5a3a0790c594de5aaa465a01a31c6b128", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -175,4 +175,5 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n            bar [BarF] bar\n                 ^^^^\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "73b48013de66506d7b1814973be1fe78d1414b89", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -42,6 +42,7 @@ LL | #[derive(HashStable)]\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "fe920dba3978e610d977b69e35035f51d12cad0c", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -21,6 +21,7 @@ LL | custom_lint_pass_macro!();\n    | -------------------------- in this macro invocation\n    |\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d52a23c1f39866e97fabd625d5484209715e0fb", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -13,6 +14,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::dealloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -21,6 +23,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::realloc`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: std::alloc::GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -29,6 +32,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `std::alloc::GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1b46825c5425cf0b0e8c4fdc8e19a860740cc6bc", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL | static A: System = System;\n LL | #[global_allocator]\n LL | static B: System = System;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9fc5667d6847e01a42887b1607b48d8e724a7cf5", "filename": "src/test/ui/async-await/issues/issue-65419/issue-65419-generator-resume-after-completion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65419%2Fissue-65419-generator-resume-after-completion.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     let mut g = || {\n         yield;\n     };\n-    Pin::new(&mut g).resume(); // Yields once.\n-    Pin::new(&mut g).resume(); // Completes here.\n-    Pin::new(&mut g).resume(); // Panics here.\n+    Pin::new(&mut g).resume(()); // Yields once.\n+    Pin::new(&mut g).resume(()); // Completes here.\n+    Pin::new(&mut g).resume(()); // Panics here.\n }"}, {"sha": "bdb073cdcbcc913928fcc75067cc224577e754a9", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "edc496aa2f81b3805d91fcf07571dd8fde7e04b0", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL | static settings_dir: String = format!(\"\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e0acd45957145041030a70a43dcf162086725b1a", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL |               aaa!(D);\n ...\n LL |   sss!();\n    |   ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "96d7b07b0e253a13306a1bc6541bd6865766de46", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "f8820b9efedfcd17cb322bd8a3b9f635e77a7185", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n    |\n LL |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "44063dd1d65d7efa4b7807ec55253c6bca96dc2a", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -60,6 +60,8 @@ LL |         #[cfg(feature = $expr)]\n ...\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "330ce2bd2e1b520408b706fab7742f35942e7b78", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         #[cfg_attr(all(), unknown)]\n ...\n LL | foo!();\n    | ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cba71db86a964baef10ff83e048dc0286424c567", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |     println!(\"{:?}\", [0_usize; 33]);\n    |\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[usize; 33]`\n    = note: required by `std::fmt::Debug::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/core-traits-no-impls-length-33.rs:10:16"}, {"sha": "7d95b46790d650e16d6760a23e482b3cd2cf2383", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,7 @@ LL | struct S<T: Debug, const N: usize>([T; N]);\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; _]`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; _]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c4aef4c9d4785c1fb12ef09c8ea10d00d1f4f930", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,7 @@ LL |     a: [u32; N],\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; _]`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; _]`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4c3ebece0a83986af71b0544a273ef55e2fbbff4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,7 +12,7 @@ LL |     assert_eq!(Y, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:22:5\n@@ -22,7 +22,7 @@ LL |     assert_eq!(Z, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "679d8f280cc60f16b281d81eedf3ede56899822d", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,7 +7,7 @@ LL | pub const Z: () = panic!(\"cheese\");\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:7:19\n@@ -17,7 +17,7 @@ LL | pub const Y: () = unreachable!();\n    |                   |\n    |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:10:19\n@@ -27,7 +27,7 @@ LL | pub const X: () = unimplemented!();\n    |                   |\n    |                   the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:10:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2abf158aade5459419fe486926d88ff56058884a", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:8:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:11:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore.rs:11:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c5887ff8c5697c373476633d906f20d78f67e34d", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:12:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:15:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "82edcefb86e7f9e4111c25bb843bbd45cb8cf9ca", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:9:15\n@@ -16,7 +16,7 @@ LL | const X: () = unimplemented!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:6:15\n@@ -26,7 +26,7 @@ LL | const Y: () = unreachable!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea4eba89eb7fc5dbf7232915587060aa327be146", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:16:13"}, {"sha": "28333c511dca4f6e2bbc3381c8cd47dbb065fbdb", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-never-type.rs:12:13"}, {"sha": "06a630d82d8406ba75e18f92defb2f96bf69cf6e", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,7 +5,7 @@ LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7dd60cfb5458fd6973bbda97ea0b01569638fc0b", "filename": "src/test/ui/consts/control-flow/assert.both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,7 +7,7 @@ LL | const _: () = assert!(false);\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:12:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "476cf89edf05931e5047971ae0dbff215d10c945", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/assert.rs:12:15\n@@ -16,7 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "043efa038aaa40c2615c4c85179c764b038620dc", "filename": "src/test/ui/consts/control-flow/assert.panic.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.panic.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/assert.rs:12:15\n@@ -15,6 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "043efa038aaa40c2615c4c85179c764b038620dc", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/assert.rs:12:15\n@@ -15,6 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "831360d5652e8ea171f03457ce11df31a88bae43", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "523bd23258f1e2fad422c055d41252724751a5d6", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -16,7 +16,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -26,7 +26,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n@@ -39,7 +39,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f32f248af4557a0255fc7b3485ed52a8423dd6ef", "filename": "src/test/ui/consts/control-flow/short-circuit.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,7 +7,7 @@ LL | const _: bool = true || panic!();\n    |                         the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:10:25\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/short-circuit.rs:11:26\n@@ -17,7 +17,7 @@ LL | const _: bool = false && panic!();\n    |                          |\n    |                          the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:11:26\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "492b79e2e60213499acd9136510288ab3e6dc7a0", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |             $( $v = $s::V.try_into().unwrap(), )*\n@@ -27,6 +28,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |             $( $v = $s::V.try_into().unwrap(), )*"}, {"sha": "2c68ddd8c9a4df2f871d583bbee5ff7822051f63", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL |     vec![1, 2, 3]\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9f58f16c1a02a571a60c51d8cdcb98ce4ad240ef", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9101d8a583d35cb1834e825d96f34d46329e60c", "filename": "src/test/ui/cross/cross-file-errors/main.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |         _\n    |\n LL |     underscore!();\n    |     -------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "420ddbc3def41e6148fbad0f2f55f66f69a4abe4", "filename": "src/test/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `example_runner::Testable` is not implemented for `test::TestDescAndFn`\n    |\n    = note: required for the cast to the object type `dyn example_runner::Testable`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "65152a2f9ab6d8b1d9cc6334203132c574f1a196", "filename": "src/test/ui/deprecation/deprecation-lint-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b450f74d7f36738f623af9bd8da9c8c1d99a7b65", "filename": "src/test/ui/deprecation/deprecation-lint-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "89fd7aae3bea0ca903a25539ef3cf26f67bbdd4a", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -42,14 +42,16 @@ LL |     ($x:expr) => { &$x }\n ...\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:39:17"}, {"sha": "8ef2d3d30238feb6e25066c2f17af6e6341b3668", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8c740733e2fa4c626c53f6a70040405f48ca1524", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "75a59fbf035d4b101190cadb61f118665ef2e80c", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1860c5f2ff6ac704d43df46d70436594d04d1fc3", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::clone::Clone` is not implemented for `Error`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ab3c5ef3c1d81dbe74a52380feb461393fd39c99", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |      x: Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e0a76d5251594294f2665b0aa974524e429863ca", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |      Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2f5cba09e4c2a2b8a855269f7c3695425432e159", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     x: Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "58ec131d54155ee4893bf8e701d955adf68b75e5", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     Error\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&Error`\n    = note: required for the cast to the object type `dyn std::fmt::Debug`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b97dda719ab781803c4937501f516294d1468cd5", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::default::Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d976891f41feaf2439d66a285912dacf97bcecb1", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::default::Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f886c29c4db9a32c27fc3102293ac4f2d0e2755b", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0b5470138a5b3d1b9067768f322647c011312a68", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "76904d67235871ae1a3c19a2dc172c7dd32eeb8e", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ff94b989d26d5964e7b2d76c09f18eca698042f5", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::cmp::Eq` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::AssertParamIsEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "889c725c843e75d26bb8c94d620ebe0432cc635e", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |      x: Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "70b8a85d107f1382039ea7e6c2d00238025049f9", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |      Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "61897392a726a877a93b81d2b5c9c26d5176b057", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |     x: Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fb929ad985b5f10e225321be03e78059cb9b5c0a", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |     Error\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7e73392fd51d5e593209310645b86efdb34e6dff", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "68df309e0462f7c264d51778b876f76f8c7d2ca7", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5e1ed33509406756a97126addea36fce1b6d619c", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d9692e56431efd2d6165411fc376ef51733d160a", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `std::cmp::Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c669636c850438a31b5b18ddf0e06c32951f03c7", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:13:6\n@@ -13,6 +14,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ff98edea4dcff48c657f85676418a5010c69ee04", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:13:6\n@@ -13,6 +14,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "200b8e2d503c83b7f6d14e2a39da2521145a3b58", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:12:5\n@@ -13,6 +14,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9e3d1309c2258403d20b711b5769e1ecb94a7326", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:12:5\n@@ -13,6 +14,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6433d1f5e27a58964b0989ae4cc95b3d615e3641", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -15,6 +16,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -24,6 +26,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -33,6 +36,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum-struct-variant.rs:13:6\n@@ -42,6 +46,7 @@ LL |      x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b1be7dd05f9844127f444be000c537bd8b92add2", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -15,6 +16,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -24,6 +26,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -33,6 +36,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-enum.rs:13:6\n@@ -42,6 +46,7 @@ LL |      Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "064c91fd7ddc3de47ba67a9b76b074e44d6f12bb", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -15,6 +16,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -24,6 +26,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -33,6 +36,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-struct.rs:12:5\n@@ -42,6 +46,7 @@ LL |     x: Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5b627022cca4660727ec3af58829c03721acedc3", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -15,6 +16,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -24,6 +26,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -33,6 +36,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Error` with `Error`\n   --> $DIR/derives-span-PartialOrd-tuple-struct.rs:12:5\n@@ -42,6 +46,7 @@ LL |     Error\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d4995c1d50c730712bd681dacb265a27ccd4086a", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:5:5\n@@ -13,6 +14,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `NoCloneOrEq: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-no-inner-impl-error-message.rs:10:5\n@@ -21,6 +23,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: required by `std::clone::Clone::clone`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d739257c8de63c83a5eba0c00c863c595b47a701", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -11,6 +11,7 @@ LL | #![deny(safe_packed_borrows)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:8:23\n@@ -20,6 +21,7 @@ LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:16:10\n@@ -29,6 +31,7 @@ LL | #[derive(PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:25:10\n@@ -38,6 +41,7 @@ LL | #[derive(PartialEq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fe3fb43730a8c8187d1bbb5f7f6b56458298e0b5", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -54,6 +54,8 @@ LL |     ($ty: ty) => ($ty::clone(&0))\n ...\n LL |     expr!(u8);\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "924a5d756436d718502659cfa8a58241aebfb032", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -36,6 +36,8 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n ...\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for slice `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:3:15\n@@ -69,6 +71,8 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n ...\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for type `u8` in the current scope\n   --> $DIR/bad-assoc-pat.rs:32:16"}, {"sha": "64e49934d876203748c997ebf51f066f8e601d42", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -54,6 +54,8 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n ...\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n@@ -111,6 +113,8 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n ...\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:44:10"}, {"sha": "4935c698f2056878d1db64d1c5b9f79b84b02d7b", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2aad57dee7daabb0d918b785bd1fa9b5438a5b29", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         use a::$crate::b;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0432]: unresolved import `a::$crate`\n   --> $DIR/dollar-crate-is-keyword-2.rs:5:13\n@@ -15,6 +17,8 @@ LL |         use a::$crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: `$crate` in paths can only be used in start position\n   --> $DIR/dollar-crate-is-keyword-2.rs:7:21\n@@ -24,6 +28,8 @@ LL |         type A = a::$crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d424bd2f2858c319bfe5a51fe64c2b4d2f974e15", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |             struct $crate {}\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found reserved identifier `$crate`\n   --> $DIR/dollar-crate-is-keyword.rs:10:23\n@@ -15,6 +17,8 @@ LL |         use $crate as $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:9:9\n@@ -24,6 +28,8 @@ LL |         use $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:10:9\n@@ -33,6 +39,8 @@ LL |         use $crate as $crate;\n ...\n LL | m!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "659e520d4cd1289f71e6ec7c27edce4aadff1119", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -184,7 +184,7 @@ fn generator(a: &Allocator, run_count: usize) {\n          );\n     };\n     for _ in 0..run_count {\n-        Pin::new(&mut gen).resume();\n+        Pin::new(&mut gen).resume(());\n     }\n }\n "}, {"sha": "ec8b88ecba22b5e776fd29ed1442070ef7dc6934", "filename": "src/test/ui/editions/edition-imports-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "087d2e339548c3fedc6e30df75ea2a298e82da36", "filename": "src/test/ui/editions/edition-imports-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "56cbd882cca60814cc9e28bd1dc8a7795a605c1e", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `E`\n LL |     gen_gated!();\n    |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f44f81fce7134c3434092146d6bbd8d0877e260b", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "a8fc58fc0cb8d927a6836b2f86205f58b21a246c", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "591ea29ff8c5241e536dc3584c8590e23f805321", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n    |\n LL | #[derive(Copy)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3cb69492eb76d41e350e79c41e4d12626c33b24e", "filename": "src/test/ui/error-codes/E0665.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f1e725ec34206d43da9d38b5736c6bfd43de5428", "filename": "src/test/ui/exclusive-drop-and-copy.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,12 +3,16 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "89c99b89ca804f5348671ebca535ff92c645cebf", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unsafe-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unsafe)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "935b95668e82b078ab470bc1f8e4ad8ce7141142", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1c319c6dad4c0719c0589241a066954cf73997b6", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,6 +12,8 @@ error[E0425]: cannot find value `ab` in this scope\n    |\n LL |     concat_idents!(a, b);\n    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "30788e3c1864bb1935c4ae4a1ee029b74c6e56a6", "filename": "src/test/ui/generator-yielding-or-returning-itself.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -13,7 +13,7 @@ pub fn want_cyclic_generator_return<T>(_: T)\n \n fn supply_cyclic_generator_return() {\n     want_cyclic_generator_return(|| {\n-        //~^ ERROR closure/generator type that references itself\n+        //~^ ERROR type mismatch\n         if false { yield None.unwrap(); }\n         None.unwrap()\n     })"}, {"sha": "1572219cf4ac8d655c6ec95efa622fc41e72f2c3", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,13 +1,13 @@\n-error[E0644]: closure/generator type that references itself\n-  --> $DIR/generator-yielding-or-returning-itself.rs:15:34\n+error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _] as std::ops::Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6 _]`\n+  --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n    |\n-LL |       want_cyclic_generator_return(|| {\n-   |  __________________________________^\n-LL | |\n-LL | |         if false { yield None.unwrap(); }\n-LL | |         None.unwrap()\n-LL | |     })\n-   | |_____^ cyclic type of infinite size\n+LL | pub fn want_cyclic_generator_return<T>(_: T)\n+   |        ----------------------------\n+LL |     where T: Generator<Yield = (), Return = T>\n+   |                                    ---------- required by this bound in `want_cyclic_generator_return`\n+...\n+LL |     want_cyclic_generator_return(|| {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n@@ -30,5 +30,4 @@ LL |     want_cyclic_generator_yield(|| {\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0271, E0644.\n-For more information about an error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2dd5ea675233ccbeddf4c21e149355fe0e124b86", "filename": "src/test/ui/generator/auxiliary/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate-reachable.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ fn msg() -> u32 {\n     0\n }\n \n-pub fn foo() -> impl Generator<Yield=(), Return=u32> {\n+pub fn foo() -> impl Generator<(), Yield=(), Return=u32> {\n     || {\n         yield;\n         return msg();"}, {"sha": "d07abd0918c7860dabe18800bd3421202b9c1c8d", "filename": "src/test/ui/generator/auxiliary/xcrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauxiliary%2Fxcrate.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,15 +3,15 @@\n use std::marker::Unpin;\n use std::ops::Generator;\n \n-pub fn foo() -> impl Generator<Yield = (), Return = ()> {\n+pub fn foo() -> impl Generator<(), Yield = (), Return = ()> {\n     || {\n         if false {\n             yield;\n         }\n     }\n }\n \n-pub fn bar<T: 'static>(t: T) -> Box<Generator<Yield = T, Return = ()> + Unpin> {\n+pub fn bar<T: 'static>(t: T) -> Box<Generator<(), Yield = T, Return = ()> + Unpin> {\n     Box::new(|| {\n         yield t;\n     })"}, {"sha": "d36592583cdc598c70fe0f87b6f9c149d5b5c881", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ use std::pin::Pin;\n fn main() {\n     let _b = {\n         let a = 3;\n-        Pin::new(&mut || yield &a).resume()\n+        Pin::new(&mut || yield &a).resume(())\n         //~^ ERROR: `a` does not live long enough\n     };\n "}, {"sha": "83987e19839ce81ca82b2d90c3303ece764af3fc", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `a` does not live long enough\n   --> $DIR/borrowing.rs:9:33\n    |\n-LL |         Pin::new(&mut || yield &a).resume()\n+LL |         Pin::new(&mut || yield &a).resume(())\n    |                       ----------^\n    |                       |         |\n    |                       |         borrowed value does not live long enough"}, {"sha": "990d94e6efc1bb5245bef77147675f7b34ab945d", "filename": "src/test/ui/generator/conditional-drop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fconditional-drop.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -35,9 +35,9 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }\n \n@@ -51,8 +51,8 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n);\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n }"}, {"sha": "9d4c217b76ed783bae301916e4585f5d4f6077a2", "filename": "src/test/ui/generator/control-flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fcontrol-flow.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -7,10 +7,10 @@ use std::ops::{GeneratorState, Generator};\n use std::pin::Pin;\n \n fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n-    where T: Generator<Yield = ()> + Unpin,\n+    where T: Generator<(), Yield = ()> + Unpin,\n {\n     loop {\n-        match Pin::new(&mut t).resume() {\n+        match Pin::new(&mut t).resume(()) {\n             GeneratorState::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "a9a50a122a19cee290bbfed4eeaa1acc25f2f9ad", "filename": "src/test/ui/generator/drop-and-replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-and-replace.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -37,7 +37,7 @@ fn main() {\n     };\n \n     loop {\n-        match Pin::new(&mut a).resume() {\n+        match Pin::new(&mut a).resume(()) {\n             GeneratorState::Complete(()) => break,\n             _ => (),\n         }"}, {"sha": "7ba711881045dd25c521f67934e492fcdf3c97ea", "filename": "src/test/ui/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-env.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -30,7 +30,7 @@ fn t1() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n@@ -43,7 +43,7 @@ fn t2() {\n     };\n \n     let n = A.load(Ordering::SeqCst);\n-    drop(Pin::new(&mut foo).resume());\n+    drop(Pin::new(&mut foo).resume(()));\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);\n     drop(foo);\n     assert_eq!(A.load(Ordering::SeqCst), n + 1);"}, {"sha": "4c18077f33573e79aeb48647ddd7bb55f6db4580", "filename": "src/test/ui/generator/dropck-resume.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+\n+struct SetToNone<'a: 'b, 'b>(&'b mut Option<&'a i32>);\n+\n+impl<'a, 'b> Drop for SetToNone<'a, 'b> {\n+    fn drop(&mut self) {\n+        *self.0 = None;\n+    }\n+}\n+\n+fn drop_using_generator() -> i32 {\n+    let mut y = Some(&0);\n+    let z = &mut y;\n+    let r;\n+    {\n+        let mut g = move |r| {\n+            let _s = SetToNone(r);\n+            yield;\n+        };\n+        let mut g = Pin::new(&mut g);\n+        g.as_mut().resume(z);\n+        r = y.as_ref().unwrap();\n+        //~^ ERROR cannot borrow `y` as immutable because it is also borrowed as mutable\n+    }\n+    **r\n+}\n+\n+fn main() {\n+    println!(\"{}\", drop_using_generator());\n+}"}, {"sha": "ecf92e7e3ae79c179026abd44406f8d90e66706f", "filename": "src/test/ui/generator/dropck-resume.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `y` as immutable because it is also borrowed as mutable\n+  --> $DIR/dropck-resume.rs:25:13\n+   |\n+LL |     let z = &mut y;\n+   |             ------ mutable borrow occurs here\n+...\n+LL |         r = y.as_ref().unwrap();\n+   |             ^ immutable borrow occurs here\n+LL |\n+LL |     }\n+   |     - mutable borrow might be used here, when `g` is dropped and runs the destructor for generator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "da00b230d9fb73b54e7506187a4d9b967772fbfd", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n         yield;\n     };\n-    Pin::new(&mut gen).resume();\n+    Pin::new(&mut gen).resume(());\n     // drops the RefCell and then the Ref, leading to use-after-free\n }"}, {"sha": "5f0a6bb09b7843f452575ed051cb352cfbb95760", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,7 +8,7 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n         x\n     };\n     loop {\n-        match Pin::new(&mut g).resume() {\n+        match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n             //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),"}, {"sha": "389b9d139694195499a6f8be2657e50ad1890eaa", "filename": "src/test/ui/generator/issue-44197.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-44197.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,14 +2,14 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{ Generator, GeneratorState };\n+use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n \n fn foo(_: &str) -> String {\n     String::new()\n }\n \n-fn bar(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         yield foo(&baz);\n     }\n@@ -19,7 +19,7 @@ fn foo2(_: &str) -> Result<String, ()> {\n     Err(())\n }\n \n-fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n+fn bar2(baz: String) -> impl Generator<(), Yield = String, Return = ()> {\n     move || {\n         if let Ok(quux) = foo2(&baz) {\n             yield quux;\n@@ -28,6 +28,9 @@ fn bar2(baz: String) -> impl Generator<Yield = String, Return = ()> {\n }\n \n fn main() {\n-    assert_eq!(Pin::new(&mut bar(String::new())).resume(), GeneratorState::Yielded(String::new()));\n-    assert_eq!(Pin::new(&mut bar2(String::new())).resume(), GeneratorState::Complete(()));\n+    assert_eq!(\n+        Pin::new(&mut bar(String::new())).resume(()),\n+        GeneratorState::Yielded(String::new())\n+    );\n+    assert_eq!(Pin::new(&mut bar2(String::new())).resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "187c374021dcac962c5bd4a8a919cc700e787b28", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -18,12 +18,12 @@ fn drop_and_yield() {\n         String::new();\n         yield;\n     };\n-    Box::pin(x).as_mut().resume();\n+    Box::pin(x).as_mut().resume(());\n     let y = static || {\n         String::new();\n         yield;\n     };\n-    Box::pin(y).as_mut().resume();\n+    Box::pin(y).as_mut().resume(());\n }\n \n fn main() {"}, {"sha": "90eefe02f664e46fa7bf8a4ee51e333c340751ef", "filename": "src/test/ui/generator/iterator-count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fiterator-count.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,18 +10,18 @@ struct W<T>(T);\n \n // This impl isn't safe in general, but the generator used in this test is movable\n // so it won't cause problems.\n-impl<T: Generator<Return = ()> + Unpin> Iterator for W<T> {\n+impl<T: Generator<(), Return = ()> + Unpin> Iterator for W<T> {\n     type Item = T::Yield;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        match Pin::new(&mut self.0).resume() {\n+        match Pin::new(&mut self.0).resume(()) {\n             GeneratorState::Complete(..) => None,\n             GeneratorState::Yielded(v) => Some(v),\n         }\n     }\n }\n \n-fn test() -> impl Generator<Return=(), Yield=u8> + Unpin {\n+fn test() -> impl Generator<(), Return=(), Yield=u8> + Unpin {\n     || {\n         for i in 1..6 {\n             yield i"}, {"sha": "6a2e42a5573a8486814f17145a15599fc805cb2c", "filename": "src/test/ui/generator/live-upvar-across-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flive-upvar-across-yield.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let mut a = || {\n         b(yield);\n     };\n-    Pin::new(&mut a).resume();\n+    Pin::new(&mut a).resume(());\n }"}, {"sha": "45519150eec2b560bd64d3e519cf39cd19add0b9", "filename": "src/test/ui/generator/nested_generators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnested_generators.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -11,7 +11,7 @@ fn main() {\n             yield 2;\n         };\n \n-        match Pin::new(&mut sub_generator).resume() {\n+        match Pin::new(&mut sub_generator).resume(()) {\n             GeneratorState::Yielded(x) => {\n                 yield x;\n             }"}, {"sha": "6b5a557933953381296326acd8fe24b83f27ef35", "filename": "src/test/ui/generator/no-parameters-on-generators.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/442ae7f04026c215a03b155eaaf9cde8bb5cf02a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442ae7f04026c215a03b155eaaf9cde8bb5cf02a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.rs?ref=442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "patch": "@@ -1,8 +0,0 @@\n-#![feature(generators)]\n-\n-fn main() {\n-    let gen = |start| { //~ ERROR generators cannot have explicit parameters\n-        //~^ ERROR type inside generator must be known in this context\n-        yield;\n-    };\n-}"}, {"sha": "5e8e043a391ce280810483861084730b95dc77c9", "filename": "src/test/ui/generator/no-parameters-on-generators.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/442ae7f04026c215a03b155eaaf9cde8bb5cf02a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/442ae7f04026c215a03b155eaaf9cde8bb5cf02a/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fno-parameters-on-generators.stderr?ref=442ae7f04026c215a03b155eaaf9cde8bb5cf02a", "patch": "@@ -1,21 +0,0 @@\n-error[E0628]: generators cannot have explicit parameters\n-  --> $DIR/no-parameters-on-generators.rs:4:15\n-   |\n-LL |     let gen = |start| {\n-   |               ^^^^^^^\n-\n-error[E0698]: type inside generator must be known in this context\n-  --> $DIR/no-parameters-on-generators.rs:4:16\n-   |\n-LL |     let gen = |start| {\n-   |                ^^^^^ cannot infer type\n-   |\n-note: the type is part of the generator because of this `yield`\n-  --> $DIR/no-parameters-on-generators.rs:6:9\n-   |\n-LL |         yield;\n-   |         ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0698`."}, {"sha": "29f4788b2757f5b0be79472d5125c0d76383d868", "filename": "src/test/ui/generator/panic-drops-resume.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops-resume.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,37 @@\n+//! Tests that panics inside a generator will correctly drop the initial resume argument.\n+\n+// run-pass\n+// ignore-wasm       no unwind support\n+// ignore-emscripten no unwind support\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+struct Dropper {}\n+\n+impl Drop for Dropper {\n+    fn drop(&mut self) {\n+        DROP.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let mut gen = |_arg| {\n+        if true {\n+            panic!();\n+        }\n+        yield ();\n+    };\n+    let mut gen = Pin::new(&mut gen);\n+\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    let res = catch_unwind(AssertUnwindSafe(|| gen.as_mut().resume(Dropper {})));\n+    assert!(res.is_err());\n+    assert_eq!(DROP.load(Ordering::Acquire), 1);\n+}"}, {"sha": "c9a201725aea2705240b99a9c6165992b53f1ff1", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -35,7 +35,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 0);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);\n@@ -50,7 +50,7 @@ fn main() {\n \n     assert_eq!(A.load(Ordering::SeqCst), 1);\n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n     assert_eq!(A.load(Ordering::SeqCst), 1);"}, {"sha": "500a3c9c2950e6177c32b1d466d2b59616e9bbcb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -17,13 +17,13 @@ fn main() {\n     };\n \n     let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-        Pin::new(&mut foo).resume()\n+        Pin::new(&mut foo).resume(())\n     }));\n     assert!(res.is_err());\n \n     for _ in 0..10 {\n         let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n-            Pin::new(&mut foo).resume()\n+            Pin::new(&mut foo).resume(())\n         }));\n         assert!(res.is_err());\n     }"}, {"sha": "efed08bd4708f2e803c142b2590caeecfc9848f5", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -16,12 +16,12 @@ fn main() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n-    match panic::catch_unwind(move || Pin::new(&mut foo).resume()) {\n+    match panic::catch_unwind(move || Pin::new(&mut foo).resume(())) {\n         Ok(_) => panic!(\"generator successfully resumed\"),\n         Err(_) => {}\n     }"}, {"sha": "87b1f1a065bc8c3099b34410267256398fb84765", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,17 @@\n+//! Tests that we cannot produce a generator that accepts a resume argument\n+//! with any lifetime and then stores it across a `yield`.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+\n+fn main() {\n+    let gen = |arg: &mut bool| {\n+        yield ();\n+        *arg = true;\n+    };\n+    test(gen);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "7719d5123f4663213b110b427869341a905d802a", "filename": "src/test/ui/generator/resume-arg-late-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,15 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/resume-arg-late-bound.rs:15:10\n+   |\n+LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n+   |    ----         ------------------------------- required by this bound in `test`\n+...\n+LL |     test(gen);\n+   |          ^^^\n+   |          |\n+   |          expected signature of `for<'a> fn(&'a mut bool) -> _`\n+   |          found signature of `fn(&mut bool) -> _`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "4c4cf117a556316f58c00b0a41f1821554c1163e", "filename": "src/test/ui/generator/resume-live-across-yield.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-live-across-yield.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{Generator, GeneratorState};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static DROP: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(PartialEq, Eq, Debug)]\n+struct Dropper(String);\n+\n+impl Drop for Dropper {\n+    fn drop(&mut self) {\n+        DROP.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let mut g = |mut _d| {\n+        _d = yield;\n+        _d\n+    };\n+\n+    let mut g = Pin::new(&mut g);\n+\n+    assert_eq!(\n+        g.as_mut().resume(Dropper(String::from(\"Hello world!\"))),\n+        GeneratorState::Yielded(())\n+    );\n+    assert_eq!(DROP.load(Ordering::Acquire), 0);\n+    match g.as_mut().resume(Dropper(String::from(\"Number Two\"))) {\n+        GeneratorState::Complete(dropper) => {\n+            assert_eq!(DROP.load(Ordering::Acquire), 1);\n+            assert_eq!(dropper.0, \"Number Two\");\n+            drop(dropper);\n+            assert_eq!(DROP.load(Ordering::Acquire), 2);\n+        }\n+        _ => unreachable!(),\n+    }\n+\n+    drop(g);\n+    assert_eq!(DROP.load(Ordering::Acquire), 2);\n+}"}, {"sha": "0606ea71cdf372a84ef2f504543068146144f2a8", "filename": "src/test/ui/generator/retain-resume-ref.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,25 @@\n+//! This test ensures that a mutable reference cannot be passed as a resume argument twice.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+\n+fn main() {\n+    let mut thing = String::from(\"hello\");\n+\n+    let mut gen = |r| {\n+        if false {\n+            yield r;\n+        }\n+    };\n+\n+    let mut gen = Pin::new(&mut gen);\n+    gen.as_mut().resume(&mut thing);\n+    gen.as_mut().resume(&mut thing);\n+    //~^ cannot borrow `thing` as mutable more than once at a time\n+}"}, {"sha": "bc715c7030eb397e617376c4bb455e74f945d54f", "filename": "src/test/ui/generator/retain-resume-ref.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,14 @@\n+error[E0499]: cannot borrow `thing` as mutable more than once at a time\n+  --> $DIR/retain-resume-ref.rs:23:25\n+   |\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ---------- first mutable borrow occurs here\n+LL |     gen.as_mut().resume(&mut thing);\n+   |                         ^^^^^^^^^^ second mutable borrow occurs here\n+LL |\n+LL | }\n+   | - first borrow might be used here, when `gen` is dropped and runs the destructor for generator\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "c6dd738d6ac60d370c1857db6bf83153cb97da0e", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,6 @@ fn main() {\n    //~^ ERROR the size for values of type\n        yield s[..];\n    };\n-   Pin::new(&mut gen).resume();\n+   Pin::new(&mut gen).resume(());\n    //~^ ERROR the size for values of type\n }"}, {"sha": "79aeec2ec02801df72fd2e4385cb06989b4de022", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,7 +15,7 @@ LL | |    };\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:12:23\n    |\n-LL |    Pin::new(&mut gen).resume();\n+LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "32f3ee32d77b9d96eb1320eca4ab4edce2c5129c", "filename": "src/test/ui/generator/smoke-resume-args.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke-resume-args.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,97 @@\n+// run-pass\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::fmt::Debug;\n+use std::marker::Unpin;\n+use std::ops::{\n+    Generator,\n+    GeneratorState::{self, *},\n+};\n+use std::pin::Pin;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn drain<G: Generator<R, Yield = Y> + Unpin, R, Y>(\n+    gen: &mut G,\n+    inout: Vec<(R, GeneratorState<Y, G::Return>)>,\n+) where\n+    Y: Debug + PartialEq,\n+    G::Return: Debug + PartialEq,\n+{\n+    let mut gen = Pin::new(gen);\n+\n+    for (input, out) in inout {\n+        assert_eq!(gen.as_mut().resume(input), out);\n+    }\n+}\n+\n+static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+#[derive(Debug, PartialEq)]\n+struct DropMe;\n+\n+impl Drop for DropMe {\n+    fn drop(&mut self) {\n+        DROPS.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn expect_drops<T>(expected_drops: usize, f: impl FnOnce() -> T) -> T {\n+    DROPS.store(0, Ordering::SeqCst);\n+\n+    let res = f();\n+\n+    let actual_drops = DROPS.load(Ordering::SeqCst);\n+    assert_eq!(actual_drops, expected_drops);\n+    res\n+}\n+\n+fn main() {\n+    drain(\n+        &mut |mut b| {\n+            while b != 0 {\n+                b = yield (b + 1);\n+            }\n+            -1\n+        },\n+        vec![(1, Yielded(2)), (-45, Yielded(-44)), (500, Yielded(501)), (0, Complete(-1))],\n+    );\n+\n+    expect_drops(2, || drain(&mut |a| yield a, vec![(DropMe, Yielded(DropMe))]));\n+\n+    expect_drops(6, || {\n+        drain(\n+            &mut |a| yield yield a,\n+            vec![(DropMe, Yielded(DropMe)), (DropMe, Yielded(DropMe)), (DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    #[allow(unreachable_code)]\n+    expect_drops(2, || drain(&mut |a| yield return a, vec![(DropMe, Complete(DropMe))]));\n+\n+    expect_drops(2, || {\n+        drain(\n+            &mut |a: DropMe| {\n+                if false { yield () } else { a }\n+            },\n+            vec![(DropMe, Complete(DropMe))],\n+        )\n+    });\n+\n+    expect_drops(4, || {\n+        drain(\n+            #[allow(unused_assignments, unused_variables)]\n+            &mut |mut a: DropMe| {\n+                a = yield;\n+                a = yield;\n+                a = yield;\n+            },\n+            vec![\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Yielded(())),\n+                (DropMe, Complete(())),\n+            ],\n+        )\n+    });\n+}"}, {"sha": "9289710b34bf980f58244e0459aad8794ae5b9dd", "filename": "src/test/ui/generator/smoke.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsmoke.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -17,7 +17,7 @@ fn simple() {\n         }\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -33,7 +33,7 @@ fn return_capture() {\n         a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -45,11 +45,11 @@ fn simple_yield() {\n         yield;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -62,11 +62,11 @@ fn yield_capture() {\n         yield b;\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -79,11 +79,11 @@ fn simple_yield_value() {\n         return String::from(\"foo\")\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(ref s) if *s == \"bar\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -97,11 +97,11 @@ fn return_after_yield() {\n         return a\n     };\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(ref s) if *s == \"foo\" => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n@@ -149,11 +149,11 @@ fn send_and_sync() {\n fn send_over_threads() {\n     let mut foo = || { yield };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n@@ -162,11 +162,11 @@ fn send_over_threads() {\n     let a = String::from(\"a\");\n     let mut foo = || { yield a };\n     thread::spawn(move || {\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Yielded(ref s) if *s == \"a\" => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }\n-        match Pin::new(&mut foo).resume() {\n+        match Pin::new(&mut foo).resume(()) {\n             GeneratorState::Complete(()) => {}\n             s => panic!(\"bad state: {:?}\", s),\n         }"}, {"sha": "3980766c4287e73e7947d4af964e969fa4d39129", "filename": "src/test/ui/generator/static-generators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-generators.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     // Safety: We shadow the original generator variable so have no safe API to\n     // move it after this point.\n     let mut generator = unsafe { Pin::new_unchecked(&mut generator) };\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Yielded(()));\n-    assert_eq!(generator.as_mut().resume(), GeneratorState::Complete(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Yielded(()));\n+    assert_eq!(generator.as_mut().resume(()), GeneratorState::Complete(()));\n }"}, {"sha": "7a353ea298b26c5c7ce2ac24be6961678c7c32de", "filename": "src/test/ui/generator/too-many-parameters.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,8 @@\n+#![feature(generators)]\n+\n+fn main() {\n+    |(), ()| {\n+        //~^ error: too many parameters for a generator\n+        yield;\n+    };\n+}"}, {"sha": "a297ee43de9695dc0e7a5c7e32de0126b1130eba", "filename": "src/test/ui/generator/too-many-parameters.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftoo-many-parameters.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,8 @@\n+error[E0628]: too many parameters for a generator (expected 0 or 1 parameters)\n+  --> $DIR/too-many-parameters.rs:4:5\n+   |\n+LL |     |(), ()| {\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d39c788a84bd409eba24c4b4a2c3063f20caf195", "filename": "src/test/ui/generator/type-mismatch-error.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,22 @@\n+//! Test that we get the expected type mismatch error instead of \"closure is expected to take 0\n+//! arguments\" (which got introduced after implementing resume arguments).\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+\n+fn f<G: Generator>(_: G, _: G::Return) {}\n+\n+fn main() {\n+    f(\n+        |a: u8| {\n+            if false {\n+                yield ();\n+            } else {\n+                a\n+                //~^ error: `if` and `else` have incompatible types\n+            }\n+        },\n+        0u8,\n+    );\n+}"}, {"sha": "8f5949533e2c786c2ae948e883676d1dbda99282", "filename": "src/test/ui/generator/type-mismatch-error.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-error.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/type-mismatch-error.rs:16:17\n+   |\n+LL | /             if false {\n+LL | |                 yield ();\n+   | |                 ---------\n+   | |                 |       |\n+   | |                 |       help: consider removing this semicolon\n+   | |                 expected because of this\n+LL | |             } else {\n+LL | |                 a\n+   | |                 ^ expected `()`, found `u8`\n+LL | |\n+LL | |             }\n+   | |_____________- `if` and `else` have incompatible types\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7774ff48f56b730b7bdc028dccf03771e07cee1e", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -2,15 +2,15 @@\n \n use std::ops::Generator;\n \n-fn foo() -> impl Generator<Return = i32> {\n+fn foo() -> impl Generator<Return = i32> { //~ ERROR type mismatch\n     || {\n         if false {\n-            return Ok(6); //~ ERROR mismatched types [E0308]\n+            return Ok(6);\n         }\n \n         yield ();\n \n-        5\n+        5 //~ ERROR mismatched types [E0308]\n     }\n }\n "}, {"sha": "8de77798ff48e632f3926ad9ba0879b3baf0aa7b", "filename": "src/test/ui/generator/type-mismatch-signature-deduction.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Ftype-mismatch-signature-deduction.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,12 +1,23 @@\n error[E0308]: mismatched types\n-  --> $DIR/type-mismatch-signature-deduction.rs:8:20\n+  --> $DIR/type-mismatch-signature-deduction.rs:13:9\n    |\n-LL |             return Ok(6);\n-   |                    ^^^^^ expected `i32`, found enum `std::result::Result`\n+LL |         5\n+   |         ^ expected enum `std::result::Result`, found integer\n    |\n-   = note: expected type `i32`\n-              found enum `std::result::Result<{integer}, _>`\n+   = note: expected type `std::result::Result<{integer}, _>`\n+              found type `{integer}`\n \n-error: aborting due to previous error\n+error[E0271]: type mismatch resolving `<[generator@$DIR/type-mismatch-signature-deduction.rs:6:5: 14:6 _] as std::ops::Generator>::Return == i32`\n+  --> $DIR/type-mismatch-signature-deduction.rs:5:13\n+   |\n+LL | fn foo() -> impl Generator<Return = i32> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `i32`\n+   |\n+   = note: expected enum `std::result::Result<{integer}, _>`\n+              found type `i32`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0271, E0308.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "1b1cff3387d9f7ea34388d4dd17f7c36b95acd75", "filename": "src/test/ui/generator/xcrate-reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate-reachable.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,5 +10,5 @@ use std::ops::Generator;\n use std::pin::Pin;\n \n fn main() {\n-    Pin::new(&mut foo::foo()).resume();\n+    Pin::new(&mut foo::foo()).resume(());\n }"}, {"sha": "40986bbeb6517243f3f487ce1f2dcafcb32b612d", "filename": "src/test/ui/generator/xcrate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fxcrate.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,18 +12,18 @@ use std::pin::Pin;\n fn main() {\n     let mut foo = xcrate::foo();\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n \n     let mut foo = xcrate::bar(3);\n \n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Yielded(3) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }\n-    match Pin::new(&mut foo).resume() {\n+    match Pin::new(&mut foo).resume(()) {\n         GeneratorState::Complete(()) => {}\n         s => panic!(\"bad state: {:?}\", s),\n     }"}, {"sha": "985e5d8bdc83818e1466153e7e931c5e5602bc11", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -43,7 +43,7 @@ fn yield_during_iter_borrowed_slice_3() {\n             yield p;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_iter_borrowed_slice_4() {\n@@ -56,7 +56,7 @@ fn yield_during_iter_borrowed_slice_4() {\n         }\n     };\n     println!(\"{}\", x[0]); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn yield_during_range_iter() {\n@@ -69,7 +69,7 @@ fn yield_during_range_iter() {\n             yield x;\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "b6563475235c244da583e9d335a13e8543b0b754", "filename": "src/test/ui/generator/yield-while-iterating.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -16,7 +16,7 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]);\n    |                    ^ immutable borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ mutable borrow later used here\n \n error: aborting due to 2 previous errors"}, {"sha": "061a64dbc364d9143dbe310e31ba589fad76ef92", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,7 +15,7 @@ fn borrow_local_inline() {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local_inline_done() {\n@@ -26,7 +26,7 @@ fn borrow_local_inline_done() {\n         }\n         yield();\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn borrow_local() {\n@@ -43,7 +43,7 @@ fn borrow_local() {\n             println!(\"{}\", b);\n         }\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "a03ef945dd231c2b6cf4929ae06332340e1a8dd3", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,7 +12,7 @@ fn reborrow_shared_ref(x: &i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref(x: &mut i32) {\n@@ -23,7 +23,7 @@ fn reborrow_mutable_ref(x: &mut i32) {\n         yield();\n         println!(\"{}\", a);\n     };\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn reborrow_mutable_ref_2(x: &mut i32) {\n@@ -34,7 +34,7 @@ fn reborrow_mutable_ref_2(x: &mut i32) {\n         println!(\"{}\", a);\n     };\n     println!(\"{}\", x); //~ ERROR\n-    Pin::new(&mut b).resume();\n+    Pin::new(&mut b).resume(());\n }\n \n fn main() { }"}, {"sha": "fd885660d092758f61ff23236596e98bbb5a8ec1", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,7 +8,7 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x);\n    |                    ^ second borrow occurs here\n-LL |     Pin::new(&mut b).resume();\n+LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n \n error: aborting due to previous error"}, {"sha": "3a9c918cd3720f652e4d5cf49f342e874cd48a5a", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -30,6 +30,8 @@ LL |             let ...$e;\n ...\n LL |     mac!(0);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "871c9b57e5444878ae7987f1319b65abdf97a4f0", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -40,6 +40,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:21:19\n@@ -51,6 +52,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b91798fa1237913a168ea43df13fb5f4eebd4c95", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                             for<'a>    fn(&'a u32, &'a u3\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n               found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "45f53d4fe99db100ec221ad503ca80717c510b44", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_vs_bound_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_vs_bound_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                 for<'a>    fn(&'a u32, &'a u32)) }\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(&'a u32, &'b u32)>`\n               found enum `std::option::Option<for<'a> fn(&'a u32, &'a u32)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c3e4f6d2ed0c1c91e348822f324bcacb0e28f386", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                              fn(&'x u32)) }\n    |\n    = note: expected enum `std::option::Option<for<'a> fn(&'a u32)>`\n               found enum `std::option::Option<fn(&'x u32)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4d7b86027f56463d68b380b4bd73d51b354d1f93", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_b_vs_bound_co_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                       for<'a>    fn(Co<'a>, Co<'a>)) }\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>)>`\n               found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7f0a4197dd7fe412d5602ba145b5a0c8970e48bc", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_co_a_co_b_ret_contra_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                         for<'a>    fn(Co<'a>, Co<'a>) ->\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Co<'a>, Co<'b>) -> Contra<'a>>`\n               found enum `std::option::Option<for<'a> fn(Co<'a>, Co<'a>) -> Contra<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c12e543a44e79e29a8cd21449e220cbfd0a96864", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_contra_a_contra_b_ret_co_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                             for<'a>    fn(Contra<'a>, Con\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Contra<'a>, Contra<'b>) -> Co<'a>>`\n               found enum `std::option::Option<for<'a> fn(Contra<'a>, Contra<'a>) -> Co<'a>>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "460356856bd562cd9f229b1f832c5cb04982635d", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |                                         for<'a>    fn(Inv<'a>, Inv<'a>))\n    |\n    = note: expected enum `std::option::Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n               found enum `std::option::Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6b5e7a5a6345a5ecf515af8b60aca007e25054a3", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -13,6 +13,7 @@ LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n   --> $DIR/hr-subtype.rs:39:13\n@@ -29,6 +30,7 @@ LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc3643306e628cf0a1cb0185a1a674f495df2557", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -28,6 +28,7 @@ LL |           fn subtype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:39:26\n@@ -59,6 +60,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7c0770924daaac4c54807f3824e57b3b24c45e92", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -13,6 +13,7 @@ LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0dde27788f6296212d46f897aa762803c7ea0fcc", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -28,6 +28,7 @@ LL |           fn supertype<'x,'y:'x,'z:'y>() {\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dec1bd62ca936fa8d03a547b8a8368635f28c2e3", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |             fn method() {}\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0046]: not all trait items implemented, missing: `method`\n   --> $DIR/assoc_item_ctxt.rs:34:9\n@@ -18,6 +20,8 @@ LL |         impl Tr for u8 {\n ...\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "04f5bed5e05eaff01baf550d7fd67c0083973b52", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL | m!('a);\n    | |  |\n    | |  previous declaration here\n    | in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0263]: lifetime name `'a` declared twice in the same scope\n   --> $DIR/duplicate_lifetimes.rs:13:14\n@@ -21,6 +23,8 @@ LL | n!('a);\n    | |  |\n    | |  previous declaration here\n    | in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b9e05c84a8aea887e02e5fb209acca159579b478", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,8 @@ LL |         use my_core;\n ...\n LL | a!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:11:18\n@@ -24,6 +26,8 @@ LL |         fn f() { my_core::mem::drop(0); }\n ...\n LL | a!();\n    | ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:24:14"}, {"sha": "8070ffdfdeb89cfc6d744432655e140edb2c720e", "filename": "src/test/ui/hygiene/fields-definition.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL |             $a: u8,\n ...\n LL | legacy!(a);\n    | ----------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5ce786dce837c078706231893d2c5bd7241a9787", "filename": "src/test/ui/hygiene/fields-move.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL |     assert_two_copies(copy_legacy!(foo), foo.x);\n    |                       ----------------- in this macro invocation\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0382]: use of moved value: `foo.x`\n   --> $DIR/fields-move.rs:28:42"}, {"sha": "89deef492020d1478d978ff3da4cfcfb6960e273", "filename": "src/test/ui/hygiene/fields.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         let s = S { x: 0 };\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::S` is private\n   --> $DIR/fields.rs:16:17\n@@ -15,6 +17,8 @@ LL |         let _ = s.x;\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::T` is private\n   --> $DIR/fields.rs:18:17\n@@ -24,6 +28,8 @@ LL |         let t = T(0);\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::T` is private\n   --> $DIR/fields.rs:19:17\n@@ -33,6 +39,8 @@ LL |         let _ = t.0;\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "073e1527b2e111f978c3769e89809dec817b9451", "filename": "src/test/ui/hygiene/generate-mod.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -18,6 +18,8 @@ LL |         type A = FromOutside;\n ...\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:20:22\n@@ -27,6 +29,8 @@ LL |         type Inner = Outer;\n ...\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:28:18\n@@ -36,6 +40,8 @@ LL |         type A = FromOutside;\n ...\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:29:22\n@@ -45,6 +51,8 @@ LL |         type Inner = Outer;\n ...\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "153ad8cbecfcdf42529c08136f907f55424a7279", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -22,6 +22,7 @@ LL | |         f();\n LL | |     }\n    | |_____- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use bar::g;\n@@ -42,6 +43,7 @@ LL |         n!(f);\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            foo::f\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:65:17\n@@ -54,6 +56,7 @@ LL |                 f\n    |\n    = note: possible candidate is found in another module, you can import it into scope:\n            foo::f\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "60df494e131c66bb0c5ceb3d948504d7c342770e", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     () => { break 'x; }\n ...\n LL |     'x: loop { foo!() }\n    |                ------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dbec71fcaa4023244a1062c33f2b1959e4b4270d", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     () => { break 'x; }\n ...\n LL |         foo!()\n    |         ------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7c82a08753aa29d628af4ff17bbe971b648dae09", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL |         'x: loop {\n LL |             // this 'x should refer to the outer loop, lexically\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:64:9\n@@ -39,6 +41,8 @@ LL |         'x: loop {\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -51,6 +55,8 @@ LL |         'x: loop { $e }\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -63,6 +69,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:76:9\n@@ -111,6 +119,8 @@ LL |         'x: loop {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -123,6 +133,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -135,6 +147,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -147,6 +161,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -159,6 +175,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:90:9\n@@ -225,6 +243,8 @@ LL |         'x: loop {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -237,6 +257,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -249,6 +271,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -261,6 +285,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -273,6 +299,8 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -285,6 +313,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -297,4 +327,6 @@ LL |         'x: for _ in 0..1 {\n ...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "960da15ef3c97a39d07fc80812fa594ff640c941", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL |     'x: for _ in 0..1 {\n LL |         // this 'x should refer to the outer loop, lexically\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:54:5\n@@ -39,6 +41,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -51,6 +55,8 @@ LL |         'x: loop { $e }\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -63,6 +69,8 @@ LL |     'x: loop {\n ...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:63:5\n@@ -111,6 +119,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -123,6 +133,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -135,6 +147,8 @@ LL |     'x: loop {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -147,6 +161,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -159,6 +175,8 @@ LL |     'x: while 1 + 1 == 2 {\n ...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:73:5\n@@ -225,6 +243,8 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -237,6 +257,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -249,6 +271,8 @@ LL |     'x: loop {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -261,6 +285,8 @@ LL |         'x: for _ in 0..1 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -273,6 +299,8 @@ LL |     'x: while 1 + 1 == 2 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -285,6 +313,8 @@ LL |         'x: while 1 + 1 == 2 { $e }\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -297,4 +327,6 @@ LL |     'x: for _ in 0..1 {\n ...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "85ee9f4cbf3e6be84750a592ad74e7655e4bf350", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         let _: () = S.f();\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3912ca337fbeca75680af31e587db4590e99c16e", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "986671c7810e70cc02ff6fd5e1dbbe15469f28a3", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `panic` in this scope\n LL |         assert_eq!(0, 0);\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `Vec`\n   --> $DIR/no_implicit_prelude.rs:11:9\n@@ -14,6 +14,8 @@ LL |     fn f() { ::bar::m!(); }\n ...\n LL |         Vec::new();\n    |         ^^^ use of undeclared type or module `Vec`\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for unit type `()` in the current scope\n   --> $DIR/no_implicit_prelude.rs:12:12\n@@ -27,6 +29,7 @@ LL |         ().clone()\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::clone::Clone;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "afc94bf79f6825a5f7add141ce452693061746fc", "filename": "src/test/ui/hygiene/privacy-early.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -15,6 +15,7 @@ LL |         use f as g;\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d24336883e9631f67b5b59b20dd005d56396db81", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL |     pub macro m() { ().f() }\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use foo::T;`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ad4aefb6e58a7c2962d8bd655f476baa1a92c46d", "filename": "src/test/ui/if/if-let.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL | |     });\n    | |_______- in this macro invocation\n    |\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable if-let pattern\n   --> $DIR/if-let.rs:6:13\n@@ -21,6 +22,8 @@ LL | /     bar!(a, 1, {\n LL | |         println!(\"irrefutable pattern\");\n LL | |     });\n    | |_______- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable if-let pattern\n   --> $DIR/if-let.rs:26:5"}, {"sha": "3e5f5a6374216c1985efcd7cc210fc6b10a0918e", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -300,6 +300,7 @@ LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n@@ -309,6 +310,7 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "8bb0d40629f0a35f4ba619bc14cfb9787cb1c73f", "filename": "src/test/ui/if/ifmt-bad-format-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-format-args.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error: requires at least a format string argument\n    |\n LL |     format_args!();\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n   --> $DIR/ifmt-bad-format-args.rs:3:18"}, {"sha": "a142896ada55776f67e3e052094846025a712d4c", "filename": "src/test/ui/if/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-unimpl.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |     format!(\"{:X}\", \"3\");\n    |\n    = note: required because of the requirements on the impl of `std::fmt::UpperHex` for `&str`\n    = note: required by `std::fmt::UpperHex::fmt`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f7544306d3434a7a5fc08b47e8f3fd43f442d054", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         extern crate std as non_existent;\n ...\n LL | define_std_as_non_existent!();\n    | ------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `two_macros`\n   --> $DIR/extern-prelude-extern-crate-fail.rs:10:9"}, {"sha": "e344d0591473d1ff346b0591da12f6424fe1dd19", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         extern crate std as core;\n ...\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:17:9\n@@ -26,6 +28,7 @@ note: `Vec` could also refer to the struct defined here\n    |\n LL | pub use crate::vec::Vec;\n    |         ^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6bc2d15b2ff1b33d354e630d4beb0ef099287a20", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: `$crate` may not be imported\n LL |     m!();\n    |     ^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ecc519e718f6910958bb37129eb5a17a9aa4f8d", "filename": "src/test/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     ($p: path) => (use $p {S, Z});\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "80317a34944c6306fe95cd0738672e75a377f2c2", "filename": "src/test/ui/imports/import-prefix-macro-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     ($p: path) => (use ::$p {S, Z});\n ...\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ea720c8b8730dd7200cc02473516a13620439514", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -20,6 +20,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `exported` is ambiguous (glob import vs macro-expanded name in the same module during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n@@ -43,6 +44,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n@@ -62,6 +64,7 @@ LL | |     }\n LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n@@ -81,6 +84,7 @@ LL | |     }\n LL |       define_include!();\n    |       ------------------ in this macro invocation\n    = help: use `crate::include` to refer to this macro unambiguously\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "07b7ff942a658b1987b79aec01dcb86177632e20", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,7 @@ LL |                 () => ( struct \u0411; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:36:24\n@@ -21,6 +22,7 @@ LL |         () => ( struct \u0413; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: non-ascii idents are not fully supported\n   --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n@@ -33,6 +35,7 @@ LL |         () => ( struct \u0414; )\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/55467\n    = help: add `#![feature(non_ascii_idents)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4494a88a5cf9524b4a219ed74ba0cb27daf132b7", "filename": "src/test/ui/imports/local-modularized-tricky-fail-3.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-3.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -17,6 +17,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n   --> $DIR/local-modularized-tricky-fail-3.rs:19:5\n@@ -36,6 +37,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "413ead8c25edc2fc50c57467363e79ed16e73faa", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -28,6 +28,7 @@ LL |         macro_rules! panic { () => {} }\n LL |     } }\n LL |     m!();\n    |     ----- in this macro invocation\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `n` is ambiguous (glob import vs any other name from outer scope during import/macro resolution)\n   --> $DIR/shadow_builtin_macros.rs:49:5"}, {"sha": "6eddd9c411bc5934ade5eb8c4a313ec7b364874f", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -36,6 +36,8 @@ LL |         fn $fn_name(gift: &str) -> $type_name {\n ...\n LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n    | --------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hidden lifetime parameters in types are deprecated\n   --> $DIR/elided-lifetimes.rs:78:18\n@@ -51,6 +53,8 @@ LL |         Ref<($($types),*)>\n ...\n LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n    |                 ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "d035df8e5d83adfbab010e8314762ebd3688cf62", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     let b: &[u8] = include_str!(\"file.txt\");\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n@@ -19,6 +20,7 @@ LL |     let s: &str = include_bytes!(\"file.txt\");\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9254915d030d5ead6dd9cfe83c892b4cdeab5aa", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2647e337b9d53abd82ba2642995e8a25aec7bc2e", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,18 +3,24 @@ error[E0668]: malformed inline assembly\n    |\n LL |         asm!(\"\" :\"={rax\"(rax))\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n LL |         asm!(\"callq $0\" : : \"0\"(foo))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ede8e5437ffbc4964e28162820987e04f4d55185", "filename": "src/test/ui/internal/internal-unstable-noallow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,7 +5,7 @@ LL |     call_unstable_noallow!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct_field'\n   --> $DIR/internal-unstable-noallow.rs:18:5\n@@ -14,7 +14,7 @@ LL |     construct_unstable_noallow!(0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'method'\n   --> $DIR/internal-unstable-noallow.rs:20:35\n@@ -23,7 +23,7 @@ LL |     |x: internal_unstable::Foo| { call_method_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(method)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct2_field'\n   --> $DIR/internal-unstable-noallow.rs:22:35\n@@ -32,7 +32,7 @@ LL |     |x: internal_unstable::Bar| { access_field_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct2_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2c6bf42ae86f0e410d67f40c85fdd6f3f72fbcba", "filename": "src/test/ui/internal/internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -40,6 +40,7 @@ LL |     bar!(internal_unstable::unstable());\n    |     ------------------------------------ in this macro invocation\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "04464896e921eb326acf9aae8c911dd9072a40a9", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error[E0308]: mismatched types\n    |\n LL | fn bar(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut test::Bencher`\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "71d3bfe3398a6c6dc05ca33123b3c773034de77f", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL | static VEC: [u32; 256] = vec![];\n    |\n    = note: expected array `[u32; 256]`\n              found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "499ebe977edc4cd33bb1f7f99fdb03c1e58061e7", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL |     assert!(x, x);\n    |     ^^^^^^^^^^^^^^ cannot apply unary operator `!`\n    |\n    = note: an implementation of `std::ops::Not` might be missing for `BytePos`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fff28b0c3afc45b32f237c08f40f959349a5e6b0", "filename": "src/test/ui/issues/issue-15167.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -15,6 +17,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -24,6 +28,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -33,6 +39,8 @@ LL | macro_rules! f { () => (n) }\n ...\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "077c720a9cdb46e9123275533b82075d6bb13cf3", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "30932a375b1f01924f3fa0c20d98e8683d49ef95", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a24dc8a259dfbaf5f3893d3458d4f036d5135ab8", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,8 @@ LL | struct Foo(Bar);\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f1cb3890a72eff697bc84255de5115074c3d4114", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -11,7 +11,6 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ed48356e9f56c6a9a3cc0409443aaee2df000dc", "filename": "src/test/ui/issues/issue-25385.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     ($e:expr) => { $e.foo() }\n ...\n LL |     foo!(a);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `foo` found for type `i32` in the current scope\n   --> $DIR/issue-25385.rs:10:15"}, {"sha": "76a4a5a493f5925e5d943cf3827508969cafe281", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         (*$var.c_object).$member.is_some()\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `name` of struct `stuff::CObj` is private\n   --> $DIR/issue-25386.rs:19:9\n@@ -15,6 +17,8 @@ LL |         (*$var.c_object).$member.is_some()\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d66ba3aae142f7e3b9dc6eb9155c6b76fe4cfe8", "filename": "src/test/ui/issues/issue-25793.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25793.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,8 @@ LL |         r.get_size(width!(self))\n    |           -------- ------------ in this macro invocation\n    |           |\n    |           borrow later used by call\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "204786c65c1d9ba49df688b759c39e46f40feec3", "filename": "src/test/ui/issues/issue-26093.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL |     not_a_place!(99);\n    |     |            |\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/issue-26093.rs:5:16\n@@ -21,6 +23,8 @@ LL |     not_a_place!(99);\n    |     |            |\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b5b6d5a7504f3172714314470450b3d7b2591b5", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL | fn some_function() {}\n ...\n LL |     some_macro!(some_function);\n    |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f2c659083f63ca4e72ddecb65977c21c9cb730f1", "filename": "src/test/ui/issues/issue-27340.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL | #[derive(Copy, Clone)]\n LL |\n LL | struct Bar(Foo);\n    |            --- this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cf59016ded4cf02962132894199dadaa32c8e73a", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,12 +6,16 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  |\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bc22e9371395f107be3e27a8ec01b21514450c83", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         bar(&mut $d);\n ...\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "deaf490466cec7dfab061088c354d0475b274cbf", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL | fn wrap<T>(context: &T) -> ()\n LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5d5ad8aed985500a7eb5b713eb623ffadd14f9bf", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         #[derive_Clone]\n ...\n LL | foo!();\n    | ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `derive_Clone` in this scope\n   --> $DIR/issue-32655.rs:15:7"}, {"sha": "3d74897aab28da6e49c68766042cc29315d8b8d6", "filename": "src/test/ui/issues/issue-32782.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL | foo!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "98201b050ecbe78bb20eaf8f5cdca62e3298ddbb", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,7 +6,7 @@ LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "06a6ebd9704f1c27c95bbade0a61d004919cc3a7", "filename": "src/test/ui/issues/issue-32950.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ error[E0412]: cannot find type `FooBar` in this scope\n    |\n LL |     concat_idents!(Foo, Bar)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cd9be6ab72c89d8774ef254f7ae5ac460ddf8586", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -15,6 +16,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -24,6 +26,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -33,6 +36,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `Comparable` with `Comparable`\n   --> $DIR/issue-34229.rs:2:46\n@@ -42,6 +46,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `std::cmp::PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "c68b271807b99597216be4bb9c5f55f4f4cd8e06", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -33,7 +33,7 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |\n    = note: expected type `bool`\n             found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/issue-34334.rs:2:29"}, {"sha": "e355094261de1808ed12e1a04e959f1abd18525c", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,6 +5,7 @@ LL | #[derive(Debug, Copy, Clone)]\n    |                 ^^^^ the trait `NotNull` is not implemented for `<Col as Expression>::SqlType`\n    |\n    = note: required because of the requirements on the impl of `IntoNullable` for `<Col as Expression>::SqlType`\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "840cceea7b0fd1608ddd8f413b87010a2944956f", "filename": "src/test/ui/issues/issue-42954.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL |         $i as u32 < 0\n ...\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5ccede308a1c1d7d9d3223526b6cb7fca4b27c1b", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,7 @@ LL |     b\"\".starts_with(stringify!(foo))\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a0698c20798356fe628e685972e71860d03a189f", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n    |\n    = note: upstream crates may add a new impl of trait `std::clone::Clone` for type `[_]` in future versions\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dfcac1281730b6200438c752705807826bb7654c", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -29,6 +29,8 @@ LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                 --------  ------ this field does not implement `Copy`\n    |                                                 |\n    |                                                 this field does not implement `Copy`\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "051c4d7f427937e3ffa8eb49e34587f16db48ccb", "filename": "src/test/ui/issues/issue-51848.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,6 +10,7 @@ LL |     macro_with_error!();\n    |     -------------------- in this macro invocation\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/issue-51848.rs:18:15"}, {"sha": "cd5030f761987560a1557e895f87c00497a47140", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |                 S::f::<i64>();\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0107]: wrong number of type arguments: expected 0, found 1\n   --> $DIR/issue-53251.rs:11:24\n@@ -15,6 +17,8 @@ LL |                 S::f::<i64>();\n ...\n LL | impl_add!(a b);\n    | --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ac8dc548aeb9363dbbd436cd6d6e95246870971", "filename": "src/test/ui/issues/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56411.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -13,6 +13,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n   --> $DIR/issue-56411.rs:6:21\n@@ -24,6 +25,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: consider declaring type or module `issue_56411_aux` with `pub`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ac5577e0a0ecb3f88e28ae1432b6ed58a0a4a6d", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -80,7 +80,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     fn(usize) -> Foo {Foo::Bar}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -91,7 +91,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -102,7 +102,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "4f29d8a927456dfdac9c6c9e7b3c0043f0a6fe4e", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         $nonexistent\n ...\n LL |     e!(foo);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4fcb0176faafd163986cfedae0e5ba8e9515cef2", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         { $inp $nonexistent }\n ...\n LL |     g!(foo);\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "78760efd8d12330b0af7662d91506c8a15cc96b6", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,6 +12,8 @@ LL |         $($c)\u00f6* {}\n ...\n LL |     x!(if);\n    |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2cb6e62e4129416f514c1a7788253c92aa9088b5", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -10,7 +10,7 @@ LL |     x.use_mut();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a14bf2ec8ca97b91ac7416e774ea4ddb6b9c7c8b", "filename": "src/test/ui/lint/lint-stability2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "858ac12612c69c50aee82258baa8defb6e102bfa", "filename": "src/test/ui/lint/lint-stability3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0b2b9fab3925e19e9559aa9c2ecca5f82365cf43", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -90,6 +90,8 @@ LL |         unsafe {}\n ...\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 14 previous errors\n "}, {"sha": "207d85a89c723548775979aee122b3f7c08ad9c4", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,6 +12,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_imports)]\n    |         ^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:16:18"}, {"sha": "a8974e1cf96b7b2e75c1e6ef368d3366bc3dbfd1", "filename": "src/test/ui/lint/test-inner-fn.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -5,12 +5,15 @@ LL |     #[test]\n    |     ^^^^^^^\n    |\n    = note: requested on the command line with `-D unnameable-test-items`\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot test inner items\n   --> $DIR/test-inner-fn.rs:13:9\n    |\n LL |         #[test]\n    |         ^^^^^^^\n+   |\n+   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd3f2dbc076707c4239d089ad70cc99e460112e5", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -132,6 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub-pub_crate.rs:45:9"}, {"sha": "ad687a4b54e6cf02b6e2ee8a9d996539fc2721d2", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -132,6 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:41:9"}, {"sha": "ae63bad841fa30f6b73df5caaa3cdd9e7adb5843", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,6 +9,8 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19"}, {"sha": "41ed545cf1687e721ddca7eeb187a4b7ff6f66c4", "filename": "src/test/ui/macro_backtrace/main.-Zmacro-backtrace.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.-Zmacro-backtrace.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n@@ -11,7 +11,7 @@ LL |       pong!();\n    |       -------- in this macro invocation\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };\n@@ -31,7 +31,7 @@ LL |   () => { pong ! () ; }\n    |   in this expansion of `ping!`\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n-  --> $DIR/main.rs:9:20\n+  --> $DIR/main.rs:10:20\n    |\n LL | / macro_rules! pong {\n LL | |     () => { syntax error };", "previous_filename": "src/test/ui/macro_backtrace/main.stderr"}, {"sha": "fac76fd6080febe0302ac30ba87b9bc971fea438", "filename": "src/test/ui/macro_backtrace/main.default.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -0,0 +1,35 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     pong!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     ping!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n+  --> $DIR/main.rs:10:20\n+   |\n+LL |     () => { syntax error };\n+   |                    ^^^^^ expected one of 8 possible tokens\n+...\n+LL |     deep!();\n+   |     -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6cee3b4cd96d58da0f123ca87ca6cfbb6279daf3", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -1,6 +1,7 @@\n // Test that the macro backtrace facility works\n // aux-build:ping.rs\n-// compile-flags: -Z external-macro-backtrace\n+// revisions: default -Zmacro-backtrace\n+//[-Zmacro-backtrace] compile-flags: -Z macro-backtrace\n \n #[macro_use] extern crate ping;\n "}, {"sha": "8aa7c33185983ecb9af1bbb881604e859f7ddef5", "filename": "src/test/ui/macros/assert.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -16,7 +16,7 @@ error: macro requires a boolean expression as an argument\n LL |     debug_assert!();\n    |     ^^^^^^^^^^^^^^^^ boolean expression required\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/assert.rs:5:19"}, {"sha": "bbfc5e27fec04c4933bfb053f49294892463d045", "filename": "src/test/ui/macros/cfg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error: macro requires a cfg-pattern as an argument\n    |\n LL |     cfg!();\n    |     ^^^^^^^ cfg-pattern required\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found `123`\n   --> $DIR/cfg.rs:3:10"}, {"sha": "5943a252579abb5ffe5ad5fb3a3785d013947a04", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -12,6 +12,7 @@ LL | |     }\n LL |       format_args!(hang!());\n    |                    ------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}, {"sha": "66cffbfa181703ea1dcf4aec4ff0775cb52bf172", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "c94355f47161c4d56a73688dd4c225c9e537c9da", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |         let\n ...\n LL |     m!();\n    |     ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2ce565936f2b53a6d746d34410af0dfce3cdbf13", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |           1.fake()\n ...\n LL |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:11:13\n@@ -15,6 +17,8 @@ LL |           1.fake\n ...\n LL |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:17:15\n@@ -24,6 +28,8 @@ LL |           (1).0\n ...\n LL |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:41:15\n@@ -34,6 +40,7 @@ LL |           2.0.neg()\n LL |     real_method_stmt!();\n    |     -------------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()\n@@ -47,6 +54,8 @@ LL |           1.fake()\n ...\n LL |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:29:13\n@@ -56,6 +65,8 @@ LL |           1.fake\n ...\n LL |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:35:15\n@@ -65,6 +76,8 @@ LL |           (1).0\n ...\n LL |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:47:15\n@@ -75,6 +88,7 @@ LL |           2.0.neg()\n LL |     let _ = real_method_expr!();\n    |             ------------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()"}, {"sha": "8d3663833660cd92e14a536379175e49d2770fd6", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     () => (fake)\n ...\n LL |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:5:12\n@@ -15,6 +17,8 @@ LL |     () => (fake)\n ...\n LL |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4194a833a4facf33af8c95c0a2ce9264cd8970b", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -6,6 +6,8 @@ LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n ...\n LL |     myprintln!(\"{}\");\n    |     ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2e712110689f8033892d0d1d31275d66c2da398b", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -39,6 +39,8 @@ LL |     () => ( i ; typeof );\n ...\n LL |     m!();\n    |     ----- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "162b337bbef136a444435be7ea0936cfe0d188e1", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,4 +8,6 @@ LL |     'b: loop {\n    |     -- first declared here\n LL |         br2!('b);\n    |         --------- in this macro invocation\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "c53a09aad5783ed21b1998805dcdd3002eb171f0", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "461e71471fb3d9fbeb81d0fadfe902f61839b2d0", "filename": "src/test/ui/macros/macro-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -8,6 +8,7 @@ LL | m1!();\n    | ------ in this macro invocation\n    |\n    = note: macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `foo` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/macro-shadowing.rs:17:1\n@@ -28,6 +29,7 @@ note: `foo` could also refer to the macro defined here\n    |\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ab6b79a61ecbdd88384cf7a3eba73a64201c998", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8fd4624474a68bd26694eff3536b9f3a127b2d3/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=f8fd4624474a68bd26694eff3536b9f3a127b2d3", "patch": "@@ -3,6 +3,8 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n+   |\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: inline assembly must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:13:10\n@@ -68,6 +70,8 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:28:20\n@@ -80,6 +84,8 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n   --> $DIR/macros-nonfatal-errors.rs:31:5"}]}