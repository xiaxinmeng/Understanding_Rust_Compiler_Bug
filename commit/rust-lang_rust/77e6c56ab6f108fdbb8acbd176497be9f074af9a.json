{"sha": "77e6c56ab6f108fdbb8acbd176497be9f074af9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZTZjNTZhYjZmMTA4ZmRiYjhhY2JkMTc2NDk3YmU5ZjA3NGFmOWE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-01T18:03:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-01T18:04:33Z"}, "message": "Unify `&mut` and `&raw mut` const-checking errors", "tree": {"sha": "53d1c39219deb3eb7cbbb98737cbeedbea66080d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d1c39219deb3eb7cbbb98737cbeedbea66080d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77e6c56ab6f108fdbb8acbd176497be9f074af9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77e6c56ab6f108fdbb8acbd176497be9f074af9a", "html_url": "https://github.com/rust-lang/rust/commit/77e6c56ab6f108fdbb8acbd176497be9f074af9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77e6c56ab6f108fdbb8acbd176497be9f074af9a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad6187ce51eb3a304ca448b8676870f95ab5b11", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad6187ce51eb3a304ca448b8676870f95ab5b11", "html_url": "https://github.com/rust-lang/rust/commit/2ad6187ce51eb3a304ca448b8676870f95ab5b11"}], "stats": {"total": 44, "additions": 15, "deletions": 29}, "files": [{"sha": "8eaa8fb7e1db0a4afc8314e2fcdfcb6e2996a5ad", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/77e6c56ab6f108fdbb8acbd176497be9f074af9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e6c56ab6f108fdbb8acbd176497be9f074af9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=77e6c56ab6f108fdbb8acbd176497be9f074af9a", "patch": "@@ -235,7 +235,8 @@ impl NonConstOp for CellBorrow {\n }\n \n #[derive(Debug)]\n-pub struct MutBorrow;\n+pub struct MutBorrow(pub hir::BorrowKind);\n+\n impl NonConstOp for MutBorrow {\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         // Forbid everywhere except in const fn with a feature gate\n@@ -247,22 +248,28 @@ impl NonConstOp for MutBorrow {\n     }\n \n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let raw = match self.0 {\n+            hir::BorrowKind::Raw => \"raw \",\n+            hir::BorrowKind::Ref => \"\",\n+        };\n+\n         let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n-                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+                &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n             )\n         } else {\n             let mut err = struct_span_err!(\n                 ccx.tcx.sess,\n                 span,\n                 E0764,\n-                \"mutable references are not allowed in {}s\",\n+                \"{}mutable references are not allowed in {}s\",\n+                raw,\n                 ccx.const_kind(),\n             );\n-            err.span_label(span, format!(\"`&mut` is only allowed in `const fn`\"));\n+            err.span_label(span, format!(\"`&{}mut` is only allowed in `const fn`\", raw));\n             err\n         };\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n@@ -281,29 +288,6 @@ impl NonConstOp for MutBorrow {\n     }\n }\n \n-// FIXME(ecstaticmorse): Unify this with `MutBorrow`. It has basically the same issues.\n-#[derive(Debug)]\n-pub struct MutAddressOf;\n-impl NonConstOp for MutAddressOf {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Forbid everywhere except in const fn with a feature gate\n-        if ccx.const_kind() == hir::ConstContext::ConstFn {\n-            Status::Unstable(sym::const_mut_refs)\n-        } else {\n-            Status::Forbidden\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"`&raw mut` is not allowed in {}s\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {"}, {"sha": "462fafcf1b58c4edfd1525c448acc2d28d274022", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77e6c56ab6f108fdbb8acbd176497be9f074af9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77e6c56ab6f108fdbb8acbd176497be9f074af9a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=77e6c56ab6f108fdbb8acbd176497be9f074af9a", "patch": "@@ -522,14 +522,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                 if !is_allowed {\n                     if let BorrowKind::Mut { .. } = kind {\n-                        self.check_op(ops::MutBorrow);\n+                        self.check_op(ops::MutBorrow(hir::BorrowKind::Ref));\n                     } else {\n                         self.check_op(ops::CellBorrow);\n                     }\n                 }\n             }\n \n-            Rvalue::AddressOf(Mutability::Mut, _) => self.check_op(ops::MutAddressOf),\n+            Rvalue::AddressOf(Mutability::Mut, _) => {\n+                self.check_op(ops::MutBorrow(hir::BorrowKind::Raw))\n+            }\n \n             Rvalue::Ref(_, BorrowKind::Shared | BorrowKind::Shallow, ref place)\n             | Rvalue::AddressOf(Mutability::Not, ref place) => {"}]}