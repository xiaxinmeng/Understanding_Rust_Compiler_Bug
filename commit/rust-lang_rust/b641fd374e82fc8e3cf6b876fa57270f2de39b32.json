{"sha": "b641fd374e82fc8e3cf6b876fa57270f2de39b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDFmZDM3NGU4MmZjOGUzY2Y2Yjg3NmZhNTcyNzBmMmRlMzliMzI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-04-10T04:00:35Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-04-19T19:12:50Z"}, "message": "extend ui test", "tree": {"sha": "3a417e0f21b296619ca85447dd26aec2140f28cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a417e0f21b296619ca85447dd26aec2140f28cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b641fd374e82fc8e3cf6b876fa57270f2de39b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b641fd374e82fc8e3cf6b876fa57270f2de39b32", "html_url": "https://github.com/rust-lang/rust/commit/b641fd374e82fc8e3cf6b876fa57270f2de39b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b641fd374e82fc8e3cf6b876fa57270f2de39b32/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a4628bf6691067f28f387a2141265676c11d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a4628bf6691067f28f387a2141265676c11d38", "html_url": "https://github.com/rust-lang/rust/commit/08a4628bf6691067f28f387a2141265676c11d38"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "9eba76cc04a64b448096c08514e36d456d690474", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b641fd374e82fc8e3cf6b876fa57270f2de39b32/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641fd374e82fc8e3cf6b876fa57270f2de39b32/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b641fd374e82fc8e3cf6b876fa57270f2de39b32", "patch": "@@ -321,6 +321,15 @@ macro_rules! eprintln {\n /// assert_eq!(dbg!(1usize, 2u32), (1, 2));\n /// ```\n ///\n+/// However, a single argument with a trailing comma will still not be treated\n+/// as a tuple, following the convention of ignoring trailing commas in macro\n+/// invocations. You can use a 1-tuple directly if you need one:\n+///\n+/// ```\n+/// assert_eq!(1, dbg!(1u32,)); // trailing comma ignored\n+/// assert_eq!((1,), dbg!((1u32,))); // 1-tuple\n+/// ```\n+///\n /// [stderr]: https://en.wikipedia.org/wiki/Standard_streams#Standard_error_(stderr)\n /// [`debug!`]: https://docs.rs/log/*/log/macro.debug.html\n /// [`log`]: https://crates.io/crates/log\n@@ -341,9 +350,11 @@ macro_rules! dbg {\n             }\n         }\n     };\n+    // Trailing comma with single argument is ignored\n+    ($val:expr,) => { dbg!($val) };\n     ($($val:expr),+ $(,)?) => {\n         ($(dbg!($val)),+,)\n-    }\n+    };\n }\n \n /// Awaits the completion of an async call."}, {"sha": "e2a7ac349ecd5ce6f3515ce9404cc6683ea2ccb3", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b641fd374e82fc8e3cf6b876fa57270f2de39b32/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b641fd374e82fc8e3cf6b876fa57270f2de39b32/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=b641fd374e82fc8e3cf6b876fa57270f2de39b32", "patch": "@@ -54,6 +54,17 @@ fn test() {\n         7331\n     }));\n     assert_eq!(foo, 42);\n+\n+    // Test trailing comma:\n+    assert_eq!((\"Yeah\",), dbg!((\"Yeah\",)));\n+\n+    // Test multiple arguments:\n+    assert_eq!((1u8, 2u32), dbg!(1,\n+                                 2));\n+\n+    // Test multiple arguments + trailing comma:\n+    assert_eq!((1u8, 2u32, \"Yeah\"), dbg!(1u8, 2u32,\n+                                         \"Yeah\",));\n }\n \n fn validate_stderr(stderr: Vec<String>) {\n@@ -85,6 +96,17 @@ fn validate_stderr(stderr: Vec<String>) {\n \n         \"before\",\n         \":51] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n+\n+        \":59] (\\\"Yeah\\\",) = (\",\n+        \"    \\\"Yeah\\\",\",\n+        \")\",\n+\n+        \":62] 1 = 1\",\n+        \":62] 2 = 2\",\n+\n+        \":66] 1u8 = 1\",\n+        \":66] 2u32 = 2\",\n+        \":66] \\\"Yeah\\\" = \\\"Yeah\\\"\",\n     ]);\n }\n "}]}