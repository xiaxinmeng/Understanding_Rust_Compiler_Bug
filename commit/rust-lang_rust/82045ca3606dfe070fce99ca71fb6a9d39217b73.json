{"sha": "82045ca3606dfe070fce99ca71fb6a9d39217b73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDQ1Y2EzNjA2ZGZlMDcwZmNlOTljYTcxZmI2YTlkMzkyMTdiNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T11:16:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T11:16:44Z"}, "message": "auto merge of #18264 : jakub-/rust/var-ids-in-error-messages, r=nikomatsakis\n\nThis PR aims to improve the readability of diagnostic messages that involve unresolved type variables. Currently, messages like the following:\r\n\r\n```rust\r\nmismatched types: expected `core::result::Result<uint,()>`, found `core::option::Option<<generic #1>>`\r\n<anon>:6     let a: Result<uint, ()> = None;\r\n                                       ^~~~\r\nmismatched types: expected `&mut <generic #2>`, found `uint`\r\n<anon>:7     f(42u);\r\n               ^~~\r\n```\r\n\r\ntend to appear unapproachable to new users. [0] While specific type var IDs are valuable in\r\ndiagnostics that deal with more than one such variable, in practice many messages\r\nonly mention one. In those cases, leaving out the specific number makes the messages\r\nslightly less terrifying.\r\n\r\n```rust\r\nmismatched types: expected `core::result::Result<uint, ()>`, found `core::option::Option<_>`\r\n<anon>:6     let a: Result<uint, ()> = None;\r\n                                       ^~~~\r\nmismatched types: expected `&mut _`, found `uint`\r\n<anon>:7     f(42u);\r\n               ^~~\r\n```\r\n\r\nAs you can see, I also tweaked the aesthetics slightly by changing type variables to use the type hole syntax _. For integer variables, the syntax used is:\r\n\r\n```rust\r\nmismatched types: expected `core::result::Result<uint, ()>`, found `core::option::Option<_#1i>`\r\n<anon>:6     let a: Result<uint, ()> = Some(1);\r\n```\r\n\r\nand float variables:\r\n\r\n```rust\r\nmismatched types: expected `core::result::Result<uint, ()>`, found `core::option::Option<_#1f>`\r\n<anon>:6     let a: Result<uint, ()> = Some(0.5);\r\n```\r\n\r\n[0] https://twitter.com/coda/status/517713085465772032\r\n\r\nCloses https://github.com/rust-lang/rust/issues/2632.\r\nCloses https://github.com/rust-lang/rust/issues/3404.\r\nCloses https://github.com/rust-lang/rust/issues/18426.", "tree": {"sha": "b2cb83f5450837190f250d111177c4f752bef35b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2cb83f5450837190f250d111177c4f752bef35b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82045ca3606dfe070fce99ca71fb6a9d39217b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82045ca3606dfe070fce99ca71fb6a9d39217b73", "html_url": "https://github.com/rust-lang/rust/commit/82045ca3606dfe070fce99ca71fb6a9d39217b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82045ca3606dfe070fce99ca71fb6a9d39217b73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "065caf34f5ff29e04605f95d9c5d511af219439a", "url": "https://api.github.com/repos/rust-lang/rust/commits/065caf34f5ff29e04605f95d9c5d511af219439a", "html_url": "https://github.com/rust-lang/rust/commit/065caf34f5ff29e04605f95d9c5d511af219439a"}, {"sha": "a2624fc90891b8265550229e38bc255e61a9d335", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2624fc90891b8265550229e38bc255e61a9d335", "html_url": "https://github.com/rust-lang/rust/commit/a2624fc90891b8265550229e38bc255e61a9d335"}], "stats": {"total": 434, "additions": 240, "deletions": 194}, "files": [{"sha": "763b55a6fa05c64f84a87c7aa2455b2355aff9d9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -1032,10 +1032,8 @@ pub enum type_err {\n     terr_ref_mutability,\n     terr_vec_mutability,\n     terr_tuple_size(expected_found<uint>),\n+    terr_fixed_array_size(expected_found<uint>),\n     terr_ty_param_size(expected_found<uint>),\n-    terr_record_size(expected_found<uint>),\n-    terr_record_mutability,\n-    terr_record_fields(expected_found<Ident>),\n     terr_arg_count,\n     terr_regions_does_not_outlive(Region, Region),\n     terr_regions_not_same(Region, Region),\n@@ -3790,8 +3788,8 @@ pub fn ty_sort_string(cx: &ctxt, t: t) -> String {\n \n         ty_enum(id, _) => format!(\"enum {}\", item_path_str(cx, id)),\n         ty_uniq(_) => \"box\".to_string(),\n-        ty_vec(_, Some(_)) => \"array\".to_string(),\n-        ty_vec(_, None) => \"unsized array\".to_string(),\n+        ty_vec(_, Some(n)) => format!(\"array of {} elements\", n),\n+        ty_vec(_, None) => \"slice\".to_string(),\n         ty_ptr(_) => \"*-ptr\".to_string(),\n         ty_rptr(_, _) => \"&-ptr\".to_string(),\n         ty_bare_fn(_) => \"extern fn\".to_string(),\n@@ -3874,27 +3872,18 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n                     values.expected,\n                     values.found)\n         }\n-        terr_tuple_size(values) => {\n-            format!(\"expected a tuple with {} elements, \\\n+        terr_fixed_array_size(values) => {\n+            format!(\"expected an array with a fixed size of {} elements, \\\n                      found one with {} elements\",\n                     values.expected,\n                     values.found)\n         }\n-        terr_record_size(values) => {\n-            format!(\"expected a record with {} fields, \\\n-                     found one with {} fields\",\n+        terr_tuple_size(values) => {\n+            format!(\"expected a tuple with {} elements, \\\n+                     found one with {} elements\",\n                     values.expected,\n                     values.found)\n         }\n-        terr_record_mutability => {\n-            \"record elements differ in mutability\".to_string()\n-        }\n-        terr_record_fields(values) => {\n-            format!(\"expected a record with field `{}`, found one \\\n-                     with field `{}`\",\n-                    token::get_ident(values.expected),\n-                    token::get_ident(values.found))\n-        }\n         terr_arg_count => {\n             \"incorrect number of function parameters\".to_string()\n         }\n@@ -3923,9 +3912,15 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n                     trait_store_to_string(cx, (*values).found))\n         }\n         terr_sorts(values) => {\n-            format!(\"expected {}, found {}\",\n-                    ty_sort_string(cx, values.expected),\n-                    ty_sort_string(cx, values.found))\n+            // A naive approach to making sure that we're not reporting silly errors such as:\n+            // (expected closure, found closure).\n+            let expected_str = ty_sort_string(cx, values.expected);\n+            let found_str = ty_sort_string(cx, values.found);\n+            if expected_str == found_str {\n+                format!(\"expected {}, found a different {}\", expected_str, found_str)\n+            } else {\n+                format!(\"expected {}, found {}\", expected_str, found_str)\n+            }\n         }\n         terr_traits(values) => {\n             format!(\"expected trait `{}`, found trait `{}`\","}, {"sha": "e51eb331cdc37a8797537c747974b787560b7ef5", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -515,6 +515,16 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C, a: ty::t, b: ty::t) -> cres<t\n             Ok(ty::mk_rptr(tcx, r, mt))\n       }\n \n+      (&ty::ty_vec(a_t, Some(sz_a)), &ty::ty_vec(b_t, Some(sz_b))) => {\n+        this.tys(a_t, b_t).and_then(|t| {\n+            if sz_a == sz_b {\n+                Ok(ty::mk_vec(tcx, t, Some(sz_a)))\n+            } else {\n+                Err(ty::terr_fixed_array_size(expected_found(this, sz_a, sz_b)))\n+            }\n+        })\n+      }\n+\n       (&ty::ty_vec(a_t, sz_a), &ty::ty_vec(b_t, sz_b)) => {\n         this.tys(a_t, b_t).and_then(|t| {\n             if sz_a == sz_b {"}, {"sha": "3baa9a7a5f964fb4038097e157ef58d229d087ba", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -111,7 +111,7 @@ pub trait ErrorReporting {\n \n     fn values_str(&self, values: &ValuePairs) -> Option<String>;\n \n-    fn expected_found_str<T:UserString+Resolvable>(\n+    fn expected_found_str<T: UserString + Resolvable>(\n         &self,\n         exp_found: &ty::expected_found<T>)\n         -> Option<String>;\n@@ -396,16 +396,12 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n          * or None if this is a derived error.\n          */\n         match *values {\n-            infer::Types(ref exp_found) => {\n-                self.expected_found_str(exp_found)\n-            }\n-            infer::TraitRefs(ref exp_found) => {\n-                self.expected_found_str(exp_found)\n-            }\n+            infer::Types(ref exp_found) => self.expected_found_str(exp_found),\n+            infer::TraitRefs(ref exp_found) => self.expected_found_str(exp_found)\n         }\n     }\n \n-    fn expected_found_str<T:UserString+Resolvable>(\n+    fn expected_found_str<T: UserString + Resolvable>(\n         &self,\n         exp_found: &ty::expected_found<T>)\n         -> Option<String>"}, {"sha": "227a9b1bdcc88aea98da657c84cc7eef9dce7b76", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -36,7 +36,8 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;\n use util::common::indent;\n-use util::ppaux::{bound_region_to_string, ty_to_string, trait_ref_to_string, Repr};\n+use util::ppaux::{bound_region_to_string, ty_to_string};\n+use util::ppaux::{trait_ref_to_string, Repr};\n \n use self::coercion::Coerce;\n use self::combine::{Combine, CombineFields};\n@@ -900,32 +901,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                                 err: Option<&ty::type_err>) {\n         debug!(\"hi! expected_ty = {}, actual_ty = {}\", expected_ty, actual_ty);\n \n-        let error_str = err.map_or(\"\".to_string(), |t_err| {\n-            format!(\" ({})\", ty::type_err_to_str(self.tcx, t_err))\n-        });\n         let resolved_expected = expected_ty.map(|e_ty| {\n             self.resolve_type_vars_if_possible(e_ty)\n         });\n-        if !resolved_expected.map_or(false, |e| { ty::type_is_error(e) }) {\n-            match resolved_expected {\n-                None => {\n-                    self.tcx\n-                        .sess\n-                        .span_err(sp,\n-                                  format!(\"{}{}\",\n-                                          mk_msg(None, actual_ty),\n-                                          error_str).as_slice())\n-                }\n-                Some(e) => {\n-                    self.tcx.sess.span_err(sp,\n-                        format!(\"{}{}\",\n-                                mk_msg(Some(self.ty_to_string(e)), actual_ty),\n-                                error_str).as_slice());\n+\n+        match resolved_expected {\n+            Some(t) if ty::type_is_error(t) => (),\n+            _ => {\n+                let error_str = err.map_or(\"\".to_string(), |t_err| {\n+                    format!(\" ({})\", ty::type_err_to_str(self.tcx, t_err))\n+                });\n+\n+                self.tcx.sess.span_err(sp, format!(\"{}{}\",\n+                    mk_msg(resolved_expected.map(|t| self.ty_to_string(t)), actual_ty),\n+                    error_str).as_slice());\n+\n+                for err in err.iter() {\n+                    ty::note_and_explain_type_err(self.tcx, *err)\n                 }\n             }\n-            for err in err.iter() {\n-                ty::note_and_explain_type_err(self.tcx, *err)\n-            }\n         }\n     }\n \n@@ -945,25 +939,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     pub fn report_mismatched_types(&self,\n-                                   sp: Span,\n-                                   e: ty::t,\n-                                   a: ty::t,\n+                                   span: Span,\n+                                   expected: ty::t,\n+                                   actual: ty::t,\n                                    err: &ty::type_err) {\n-        let resolved_expected =\n-            self.resolve_type_vars_if_possible(e);\n-        let mk_msg = match ty::get(resolved_expected).sty {\n-            // Don't report an error if expected is ty_err\n-            ty::ty_err => return,\n-            _ => {\n-                // if I leave out : String, it infers &str and complains\n-                |actual: String| {\n-                    format!(\"mismatched types: expected `{}`, found `{}`\",\n-                            self.ty_to_string(resolved_expected),\n-                            actual)\n-                }\n-            }\n+        let trace = TypeTrace {\n+            origin: Misc(span),\n+            values: Types(ty::expected_found {\n+                expected: expected,\n+                found: actual\n+            })\n         };\n-        self.type_error_message(sp, mk_msg, a, Some(err));\n+        self.report_and_explain_type_error(trace, err);\n     }\n \n     pub fn replace_late_bound_regions_with_fresh_regions(&self,"}, {"sha": "8befba00fd2fefa541d5e4623908c4808290e1dd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 100, "deletions": 84, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -229,7 +229,9 @@ pub fn mutability_to_string(m: ast::Mutability) -> String {\n }\n \n pub fn mt_to_string(cx: &ctxt, m: &mt) -> String {\n-    format!(\"{}{}\", mutability_to_string(m.mutbl), ty_to_string(cx, m.ty))\n+    format!(\"{}{}\",\n+        mutability_to_string(m.mutbl),\n+        ty_to_string(cx, m.ty))\n }\n \n pub fn trait_store_to_string(cx: &ctxt, s: ty::TraitStore) -> String {\n@@ -256,9 +258,6 @@ pub fn trait_ref_to_string(cx: &ctxt, trait_ref: &ty::TraitRef) -> String {\n }\n \n pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n-    fn fn_input_to_string(cx: &ctxt, input: ty::t) -> String {\n-        ty_to_string(cx, input).to_string()\n-    }\n     fn bare_fn_to_string(cx: &ctxt,\n                       fn_style: ast::FnStyle,\n                       abi: abi::Abi,\n@@ -340,7 +339,10 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n                        sig: &ty::FnSig,\n                        bounds: &str) {\n         s.push(bra);\n-        let strs: Vec<String> = sig.inputs.iter().map(|a| fn_input_to_string(cx, *a)).collect();\n+        let strs = sig.inputs\n+            .iter()\n+            .map(|a| ty_to_string(cx, *a))\n+            .collect::<Vec<_>>();\n         s.push_str(strs.connect(\", \").as_slice());\n         if sig.variadic {\n             s.push_str(\", ...\");\n@@ -355,7 +357,7 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n         match sig.output {\n             ty::FnConverging(t) => {\n                 if !ty::type_is_nil(t) {\n-                    s.push_str(\" -> \");\n+                   s.push_str(\" -> \");\n                    s.push_str(ty_to_string(cx, t).as_slice());\n                 }\n             }\n@@ -365,82 +367,96 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n         }\n     }\n \n-    // if there is an id, print that instead of the structural type:\n-    /*for def_id in ty::type_def_id(typ).iter() {\n-        // note that this typedef cannot have type parameters\n-        return ty::item_path_str(cx, *def_id);\n-    }*/\n+    fn infer_ty_to_string(cx: &ctxt, ty: ty::InferTy) -> String {\n+        let print_var_ids = cx.sess.verbose();\n+        match ty {\n+            ty::TyVar(ty::TyVid { index: vid }) if print_var_ids =>\n+                format!(\"_#{}\", vid),\n+            ty::IntVar(ty::IntVid { index: vid }) if print_var_ids =>\n+                format!(\"_#{}i\", vid),\n+            ty::FloatVar(ty::FloatVid { index: vid }) if print_var_ids =>\n+                format!(\"_#{}f\", vid),\n+            ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) =>\n+                \"_\".to_string(),\n+            ty::SkolemizedTy(v) => format!(\"SkolemizedTy({})\", v),\n+            ty::SkolemizedIntTy(v) => format!(\"SkolemizedIntTy({})\", v)\n+        }\n+    }\n \n     // pretty print the structural type representation:\n-    return match ty::get(typ).sty {\n-      ty_nil => \"()\".to_string(),\n-      ty_bool => \"bool\".to_string(),\n-      ty_char => \"char\".to_string(),\n-      ty_int(t) => ast_util::int_ty_to_string(t, None).to_string(),\n-      ty_uint(t) => ast_util::uint_ty_to_string(t, None).to_string(),\n-      ty_float(t) => ast_util::float_ty_to_string(t).to_string(),\n-      ty_uniq(typ) => format!(\"Box<{}>\", ty_to_string(cx, typ)),\n-      ty_ptr(ref tm) => {\n-          format!(\"*{} {}\", match tm.mutbl {\n-              ast::MutMutable => \"mut\",\n-              ast::MutImmutable => \"const\",\n-          }, ty_to_string(cx, tm.ty))\n-      }\n-      ty_rptr(r, ref tm) => {\n-          let mut buf = region_ptr_to_string(cx, r);\n-          buf.push_str(mt_to_string(cx, tm).as_slice());\n-          buf\n-      }\n-      ty_open(typ) => format!(\"opened<{}>\", ty_to_string(cx, typ)),\n-      ty_tup(ref elems) => {\n-        let strs: Vec<String> = elems.iter().map(|elem| ty_to_string(cx, *elem)).collect();\n-        format!(\"({})\", strs.connect(\",\"))\n-      }\n-      ty_closure(ref f) => {\n-          closure_to_string(cx, &**f)\n-      }\n-      ty_bare_fn(ref f) => {\n-          bare_fn_to_string(cx, f.fn_style, f.abi, None, &f.sig)\n-      }\n-      ty_infer(infer_ty) => infer_ty.to_string(),\n-      ty_err => \"[type error]\".to_string(),\n-      ty_param(ref param_ty) => {\n-          param_ty.repr(cx)\n-      }\n-      ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n-          let base = ty::item_path_str(cx, did);\n-          let generics = ty::lookup_item_type(cx, did).generics;\n-          parameterized(cx, base.as_slice(), substs, &generics)\n-      }\n-      ty_trait(box ty::TyTrait {\n-          def_id: did, ref substs, ref bounds\n-      }) => {\n-          let base = ty::item_path_str(cx, did);\n-          let trait_def = ty::lookup_trait_def(cx, did);\n-          let ty = parameterized(cx, base.as_slice(),\n-                                 substs, &trait_def.generics);\n-          let bound_str = bounds.user_string(cx);\n-          let bound_sep = if bound_str.is_empty() { \"\" } else { \"+\" };\n-          format!(\"{}{}{}\",\n-                  ty,\n-                  bound_sep,\n-                  bound_str)\n-      }\n-      ty_str => \"str\".to_string(),\n-      ty_unboxed_closure(ref did, _, ref substs) => {\n-          let unboxed_closures = cx.unboxed_closures.borrow();\n-          unboxed_closures.find(did).map(|cl| {\n-              closure_to_string(cx, &cl.closure_type.subst(cx, substs))\n-          }).unwrap_or_else(|| \"closure\".to_string())\n-      }\n-      ty_vec(t, sz) => {\n-          match sz {\n-              Some(n) => {\n-                  format!(\"[{}, ..{}]\", ty_to_string(cx, t), n)\n-              }\n-              None => format!(\"[{}]\", ty_to_string(cx, t)),\n-          }\n-      }\n+    match ty::get(typ).sty {\n+        ty_nil => \"()\".to_string(),\n+        ty_bool => \"bool\".to_string(),\n+        ty_char => \"char\".to_string(),\n+        ty_int(t) => ast_util::int_ty_to_string(t, None).to_string(),\n+        ty_uint(t) => ast_util::uint_ty_to_string(t, None).to_string(),\n+        ty_float(t) => ast_util::float_ty_to_string(t).to_string(),\n+        ty_uniq(typ) => format!(\"Box<{}>\", ty_to_string(cx, typ)),\n+        ty_ptr(ref tm) => {\n+            format!(\"*{} {}\", match tm.mutbl {\n+                ast::MutMutable => \"mut\",\n+                ast::MutImmutable => \"const\",\n+            }, ty_to_string(cx, tm.ty))\n+        }\n+        ty_rptr(r, ref tm) => {\n+            let mut buf = region_ptr_to_string(cx, r);\n+            buf.push_str(mt_to_string(cx, tm).as_slice());\n+            buf\n+        }\n+        ty_open(typ) =>\n+            format!(\"opened<{}>\", ty_to_string(cx, typ)),\n+        ty_tup(ref elems) => {\n+            let strs = elems\n+                .iter()\n+                .map(|elem| ty_to_string(cx, *elem))\n+                .collect::<Vec<_>>();\n+            match strs.as_slice() {\n+                [ref string] => format!(\"({},)\", string),\n+                strs => format!(\"({})\", strs.connect(\", \"))\n+            }\n+        }\n+        ty_closure(ref f) => {\n+            closure_to_string(cx, &**f)\n+        }\n+        ty_bare_fn(ref f) => {\n+            bare_fn_to_string(cx, f.fn_style, f.abi, None, &f.sig)\n+        }\n+        ty_infer(infer_ty) => infer_ty_to_string(cx, infer_ty),\n+        ty_err => \"[type error]\".to_string(),\n+        ty_param(ref param_ty) => param_ty.repr(cx),\n+        ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n+            let base = ty::item_path_str(cx, did);\n+            let generics = ty::lookup_item_type(cx, did).generics;\n+            parameterized(cx, base.as_slice(), substs, &generics)\n+        }\n+        ty_trait(box ty::TyTrait {\n+            def_id: did, ref substs, ref bounds\n+        }) => {\n+            let base = ty::item_path_str(cx, did);\n+            let trait_def = ty::lookup_trait_def(cx, did);\n+            let ty = parameterized(cx, base.as_slice(),\n+                                   substs, &trait_def.generics);\n+            let bound_str = bounds.user_string(cx);\n+            let bound_sep = if bound_str.is_empty() { \"\" } else { \"+\" };\n+            format!(\"{}{}{}\",\n+                    ty,\n+                    bound_sep,\n+                    bound_str)\n+        }\n+        ty_str => \"str\".to_string(),\n+        ty_unboxed_closure(ref did, _, ref substs) => {\n+            let unboxed_closures = cx.unboxed_closures.borrow();\n+            unboxed_closures.find(did).map(|cl| {\n+                closure_to_string(cx, &cl.closure_type.subst(cx, substs))\n+            }).unwrap_or_else(|| \"closure\".to_string())\n+        }\n+        ty_vec(t, sz) => {\n+            let inner_str = ty_to_string(cx, t);\n+            match sz {\n+                Some(n) => format!(\"[{}, ..{}]\", inner_str, n),\n+                None => format!(\"[{}]\", inner_str),\n+            }\n+        }\n     }\n }\n \n@@ -470,15 +486,15 @@ pub fn parameterized(cx: &ctxt,\n         subst::NonerasedRegions(ref regions) => {\n             for &r in regions.iter() {\n                 let s = region_to_string(cx, \"\", false, r);\n-                if !s.is_empty() {\n-                    strs.push(s)\n-                } else {\n+                if s.is_empty() {\n                     // This happens when the value of the region\n                     // parameter is not easily serialized. This may be\n                     // because the user omitted it in the first place,\n                     // or because it refers to some block in the code,\n                     // etc. I'm not sure how best to serialize this.\n                     strs.push(format!(\"'_\"));\n+                } else {\n+                    strs.push(s)\n                 }\n             }\n         }\n@@ -515,7 +531,7 @@ pub fn parameterized(cx: &ctxt,\n     }\n \n     if strs.len() > 0u {\n-        format!(\"{}<{}>\", base, strs.connect(\",\"))\n+        format!(\"{}<{}>\", base, strs.connect(\", \"))\n     } else {\n         format!(\"{}\", base)\n     }"}, {"sha": "7edb4b8754a1fa90f848f8ed4f50703b6594bbaf", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let _x: int = [1i, 2, 3]; //~ ERROR expected int, found array\n+    let _x: int = [1i, 2, 3]; //~ ERROR expected int, found array of 3 elements\n \n     let x: &[int] = &[1, 2, 3];\n-    let _y: &int = x; //~ ERROR expected int, found unsized array\n+    let _y: &int = x; //~ ERROR expected int, found slice\n }"}, {"sha": "d1ae535d8309760adc58eae1e5928e97d0577e61", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -16,10 +16,10 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     // The number of errors is related to the way invariance works.\n     fn bar(self: Foo<'b,'a>) {}\n-    //~^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n-    //~^^ ERROR mismatched types: expected `Foo<'a,'b>`, found `Foo<'b,'a>`\n-    //~^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n-    //~^^^^ ERROR mismatched types: expected `Foo<'b,'a>`, found `Foo<'a,'b>`\n+    //~^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n+    //~^^ ERROR mismatched types: expected `Foo<'a, 'b>`, found `Foo<'b, 'a>`\n+    //~^^^ ERROR mismatched types: expected `Foo<'b, 'a>`, found `Foo<'a, 'b>`\n+    //~^^^^ ERROR mismatched types: expected `Foo<'b, 'a>`, found `Foo<'a, 'b>`\n }\n \n fn main() {}"}, {"sha": "1c14644ec186dc50d104778c72d97dbbadaa250e", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -29,13 +29,13 @@ fn main() {\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, int> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, int>`, found `()`\n     let _: HashMap<String, int, Hash<String>> = ();\n-    //~^ ERROR mismatched types: expected `HashMap<collections::string::String,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `HashMap<collections::string::String, int>`, found `()`\n \n     // But not when there's a different type in between.\n     let _: Foo<A, int, C> = ();\n-    //~^ ERROR mismatched types: expected `Foo<A,int>`, found `()`\n+    //~^ ERROR mismatched types: expected `Foo<A, int>`, found `()`\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();"}, {"sha": "fbbe4cf8dbc4b7cd69379074c46b8f3af56603f5", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut x = 2;\n+    x = 5.0;\n+//~^ ERROR expected `_`, found `_` (expected integral variable, found floating-point variable)\n+}"}, {"sha": "6746b90e32d2e133a4294b3dd0f3de53d7fe3d86", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z verbose\n+\n+fn main() {\n+    let x = [1,2];\n+    let y = match x {\n+        [] => None,\n+        //~^ ERROR types: expected `[_#0i, ..2]`, found `[_#7, ..0]`\n+        //         (expected array of 2 elements, found array of 0 elements)\n+        [a,_] => Some(a)\n+    };\n+}"}, {"sha": "18070ed53b04ac8a791d27666bf753465a65d464", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -12,8 +12,8 @@ fn main() {\n   let x = [1,2];\n   let y = match x {\n     [] => None,\n-//~^ ERROR mismatched types: expected `[<generic integer #0>, ..2]`, found `[<generic #7>, ..0]`\n-//         (expected array, found array)\n+//~^ ERROR types: expected `[_, ..2]`, found `[_, ..0]`\n+//         (expected array of 2 elements, found array of 0 elements)\n     [a,_] => Some(a)\n   };\n }"}, {"sha": "f62bccb22f3595a738ce1f062e57268083bb6260", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -12,7 +12,7 @@ use std::raw::Slice;\n \n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n-    //~^ ERROR mismatched types: expected `&str`, found `core::raw::Slice<<generic #3>>`\n+    //~^ ERROR mismatched types: expected `&str`, found `core::raw::Slice<_>`\n     //         (expected &-ptr, found struct core::raw::Slice)\n }\n "}, {"sha": "4890cc52c00052252cde3f392657bb4e3cc768ac", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -13,7 +13,7 @@ use std::raw::Slice;\n fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n-        //~^ ERROR mismatched types: expected `()`, found `core::raw::Slice<<generic #3>>`\n+        //~^ ERROR mismatched types: expected `()`, found `core::raw::Slice<_>`\n         //         (expected (), found struct core::raw::Slice)\n         _ => unreachable!()\n     }"}, {"sha": "f018a02a945a925ee04b8fdc5f46a862ff57038f", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     match None {\n         Err(_) => ()\n-        //~^ ERROR mismatched types: expected `core::option::Option<<generic #1>>`\n-        //         , found `core::result::Result<<generic #2>,<generic #3>>`\n+        //~^ ERROR mismatched types: expected `core::option::Option<_>`\n+        //         , found `core::result::Result<_, _>`\n     }\n }"}, {"sha": "0391c73d90a6cca8032e62e0584c8a659a21ebe0", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let a = if true {\n         0\n     } else if false {\n-//~^ ERROR if may be missing an else clause: expected `()`, found `<generic integer #1>`\n+//~^ ERROR if may be missing an else clause: expected `()`, found `_`\n         1\n     };\n }"}, {"sha": "cf1f1f5908954541c4fe5c2b71e673dac1118146", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -13,6 +13,6 @@\n const A: (int,int) = (4,2);\n fn main() {\n     match 42 { A => () }\n-    //~^ ERROR mismatched types: expected `<generic integer #0>`, found `(int,int)`\n+    //~^ ERROR mismatched types: expected `_`, found `(int, int)`\n     //         (expected integral variable, found tuple)\n }"}, {"sha": "ddd82af01a71e006eb16fc4b1011334728dc5e54", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -13,32 +13,32 @@ enum A { B, C }\n fn main() {\n     match (true, false) {\n         B => (),\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `A`\n-        //         (expected tuple, found enum A)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`,\n-        //         found `(<generic #7>,<generic #8>,<generic #9>)`\n-        //         (expected a tuple with 2 elements, found one with 3 elements)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `(_, _, _)`\n+    }\n+\n+    match (true, false) {\n+        (true, false, false) => ()\n+//~^ ERROR (expected a tuple with 2 elements, found one with 3 elements)\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `Box<<generic #15>>`\n-        //         (expected tuple, found box)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `Box<_>` (expected tuple, found box)\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n-        //~^ ERROR mismatched types: expected `(bool,bool)`, found `&<generic #21>`\n-        //         (expected tuple, found &-ptr)\n+//~^ ERROR mismatched types: expected `(bool, bool)`, found `&_` (expected tuple, found &-ptr)\n     }\n \n \n-    let v = [('a', 'b')   //~ ERROR expected function, found `(char,char)`\n+    let v = [('a', 'b')   //~ ERROR expected function, found `(char, char)`\n              ('c', 'd'),\n              ('e', 'f')];\n "}, {"sha": "56867349065a598a5ac5a74841237d5d078afef1", "filename": "src/test/compile-fail/issue-5500.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     &panic!()\n-    //~^ ERROR mismatched types: expected `()`, found `&<generic #2>` (expected (), found &-ptr)\n+    //~^ ERROR mismatched types: expected `()`, found `&_` (expected (), found &-ptr)\n }"}, {"sha": "116639f49459f6b4c716758f7b8e85b6fc8bf169", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -14,7 +14,7 @@ enum Whatever {\n fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n-//~^ ERROR: mismatched types: expected `Whatever`, found `core::option::Option<<generic #3>>`\n+//~^ ERROR: mismatched types: expected `Whatever`, found `core::option::Option<_>`\n             field.access(), //~ ERROR the type of this value must be known in this context\n     }\n }"}, {"sha": "f3915634cc1276f47609ab54b855debd5b932678", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -14,14 +14,14 @@ mod foo { pub fn bar() {} }\n \n fn main() {\n     match (true, false) {\n-        B => (), //~ ERROR expected `(bool,bool)`, found `A` (expected tuple, found enum A)\n+        B => (), //~ ERROR expected `(bool, bool)`, found `A` (expected tuple, found enum A)\n         _ => ()\n     }\n \n     match &Some(42i) {\n         Some(x) => (), //~ ERROR expected `&core::option::Option<int>`,\n-                       //        found `core::option::Option<<generic #4>>`\n+                       //        found `core::option::Option<_>`\n         None => ()     //~ ERROR expected `&core::option::Option<int>`,\n-                       //        found `core::option::Option<<generic #5>>`\n+                       //        found `core::option::Option<_>`\n     }\n }"}, {"sha": "6f032c5b1f0894aeb83a6006b027eec395f4378b", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR the trait `collections::Map<uint,int>` is not implemented\n+    //~^ ERROR the trait `collections::Map<uint, int>` is not implemented\n }"}, {"sha": "6bb049f3ca5e805bb21d45a2705c3029e0b1b7e0", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     match () {\n         [()] => { }\n-//~^ ERROR mismatched types: expected `()`, found `&[<generic #1>]` (expected (), found &-ptr)\n+//~^ ERROR mismatched types: expected `()`, found `&[_]` (expected (), found &-ptr)\n     }\n }"}, {"sha": "be79a7a915b881b346e9091b804d4dc0ac6dcb1e", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     let c = [0, ..true]; //~ ERROR expected positive integer for repeat count, found boolean\n     //~^ ERROR: expected `uint`, found `bool`\n     let d = [0, ..0.5]; //~ ERROR expected positive integer for repeat count, found float\n-    //~^ ERROR: expected `uint`, found `<generic float #0>`\n+    //~^ ERROR: expected `uint`, found `_`\n     let e = [0, ..\"foo\"]; //~ ERROR expected positive integer for repeat count, found string\n     //~^ ERROR: expected `uint`, found `&'static str`\n     let f = [0, ..-4];"}, {"sha": "a655a17c037d249473f7dcbc419957422c5bcd93", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -13,7 +13,7 @@ struct Foo<T,U>(T);\n fn main() {\n     match Foo(1.1) {\n         1 => {}\n-        //~^ ERROR expected `Foo<<generic float #0>,<generic #2>>`, found `<generic integer #0>`\n+    //~^ ERROR expected `Foo<_, _>`, found `_`\n     }\n \n }"}, {"sha": "27f50be528c56fa56e855e296cef52e9448d6c48", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     let (x, y) = ();\n-//~^ ERROR types: expected `()`, found `(<generic #3>,<generic #4>)` (expected (), found tuple)\n+//~^ ERROR expected `()`, found `(_, _)` (expected (), found tuple)\n     return x;\n }"}, {"sha": "d0c2faed4b29d83e16da691941140c945849450d", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -15,4 +15,7 @@ fn first((value, _): (int, f64)) -> int { value }\n fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR expected a tuple with 2 elements, found one with 3 elements\n+\n+    let y = first ((1,));\n+    //~^ ERROR expected `(int, f64)`, found `(int,)`\n }"}, {"sha": "f9bf2746794ac7aca89afff162d595d3073bdb0f", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(int,int)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(int, int)`\n }"}, {"sha": "42691fa5229035a282727808ca7e5b4c51c0bdef", "filename": "src/test/compile-fail/type-parameter-names.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -11,6 +11,9 @@\n // Test that we print out the names of type parameters correctly in\n // our error messages.\n \n-fn foo<Foo, Bar>(x: Foo) -> Bar { x } //~ ERROR expected `Bar`, found `Foo`\n+fn foo<Foo, Bar>(x: Foo) -> Bar {\n+    x\n+//~^ ERROR expected `Bar`, found `Foo` (expected type parameter, found a different type parameter)\n+}\n \n fn main() {}"}, {"sha": "aa7b551afc56acc004da76c543c4efd0c11444e2", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82045ca3606dfe070fce99ca71fb6a9d39217b73/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=82045ca3606dfe070fce99ca71fb6a9d39217b73", "patch": "@@ -19,11 +19,11 @@ pub fn main() {\n \n fn test1() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<uint>`\n     let y: Foo<uint> = x;\n }\n \n fn test2() {\n     let x: Foo<_> = Bar::<uint>;\n-    //~^ ERROR mismatched types: expected `Foo<<generic #0>>`, found `Bar<uint>`\n+    //~^ ERROR mismatched types: expected `Foo<_>`, found `Bar<uint>`\n }"}]}