{"sha": "e77e8eb9455264b70eb4344a404243b7c012db08", "node_id": "C_kwDOAAsO6NoAKGU3N2U4ZWI5NDU1MjY0YjcwZWI0MzQ0YTQwNDI0M2I3YzAxMmRiMDg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T19:02:58Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-08T19:38:17Z"}, "message": "Don't store spans in assumed_wf_types actually", "tree": {"sha": "c459966387ca6b30eca8c0ea85c64ea472b1b83f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c459966387ca6b30eca8c0ea85c64ea472b1b83f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77e8eb9455264b70eb4344a404243b7c012db08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77e8eb9455264b70eb4344a404243b7c012db08", "html_url": "https://github.com/rust-lang/rust/commit/e77e8eb9455264b70eb4344a404243b7c012db08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77e8eb9455264b70eb4344a404243b7c012db08/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bddce50903c463ff06cc05edc1b3aba6645f50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bddce50903c463ff06cc05edc1b3aba6645f50f", "html_url": "https://github.com/rust-lang/rust/commit/0bddce50903c463ff06cc05edc1b3aba6645f50f"}], "stats": {"total": 106, "additions": 43, "deletions": 63}, "files": [{"sha": "37db2274f678fa0ab42f94847d6f43fed9155f91", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -803,7 +803,7 @@ rustc_queries! {\n     ///\n     /// Note that we've liberated the late bound regions of function signatures, so\n     /// this can not be used to check whether these types are well formed.\n-    query assumed_wf_types(key: DefId) -> &'tcx [(Ty<'tcx>, Span)] {\n+    query assumed_wf_types(key: DefId) -> &'tcx ty::List<Ty<'tcx>> {\n         desc { |tcx| \"computing the implied bounds of `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "bc6d9d4b922d87c27a6dd159416157aadae0dd64", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -191,8 +191,8 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         let assumed_wf_types = tcx.assumed_wf_types(def_id);\n         let mut implied_bounds = FxIndexSet::default();\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        for &(ty, ty_span) in assumed_wf_types {\n-            let span = if ty_span.is_dummy() { span } else { ty_span };\n+        let cause = ObligationCause::misc(span, hir_id);\n+        for ty in assumed_wf_types {\n             // FIXME(@lcnr): rustc currently does not check wf for types\n             // pre-normalization, meaning that implied bounds are sometimes\n             // incorrect. See #100910 for more details.\n@@ -205,7 +205,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             // sound and then uncomment this line again.\n \n             // implied_bounds.insert(ty);\n-            let normalized = self.normalize(&ObligationCause::misc(span, hir_id), param_env, ty);\n+            let normalized = self.normalize(&cause, param_env, ty);\n             implied_bounds.insert(normalized);\n         }\n         implied_bounds"}, {"sha": "b7a24a22c53e3d8d3916257116e62f7f3c741ab2", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 10, "deletions": 57, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -1,80 +1,33 @@\n use crate::rustc_middle::ty::DefIdTree;\n-use rustc_hir::{self as hir, def::DefKind, def_id::DefId};\n+use rustc_hir::{def::DefKind, def_id::DefId};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::{Span, DUMMY_SP};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { assumed_wf_types, ..*providers };\n }\n \n-fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &[(Ty<'_>, Span)] {\n+fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n     match tcx.def_kind(def_id) {\n         DefKind::Fn => {\n             let sig = tcx.fn_sig(def_id);\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n-            if let Some(node) = tcx.hir().get_if_local(def_id)\n-                && let Some(decl) = node.fn_decl()\n-            {\n-                assert_eq!(decl.inputs.len(), liberated_sig.inputs().len());\n-                tcx.arena.alloc_from_iter(std::iter::zip(\n-                    liberated_sig.inputs_and_output,\n-                    decl.inputs.iter().map(|ty| ty.span).chain([decl.output.span()]),\n-                ))\n-            } else {\n-                tcx.arena.alloc_from_iter(\n-                    liberated_sig.inputs_and_output.iter().map(|ty| (ty, DUMMY_SP)),\n-                )\n-            }\n+            liberated_sig.inputs_and_output\n         }\n         DefKind::AssocFn => {\n             let sig = tcx.fn_sig(def_id);\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n-            let assumed_wf_types = tcx.assumed_wf_types(tcx.parent(def_id));\n-            if let Some(node) = tcx.hir().get_if_local(def_id)\n-                && let Some(decl) = node.fn_decl()\n-            {\n-                assert_eq!(decl.inputs.len(), liberated_sig.inputs().len());\n-                tcx.arena.alloc_from_iter(assumed_wf_types.iter().copied().chain(std::iter::zip(\n-                    liberated_sig.inputs_and_output,\n-                    decl.inputs.iter().map(|ty| ty.span).chain([decl.output.span()]),\n-                )))\n-            } else {\n-                tcx.arena.alloc_from_iter(assumed_wf_types.iter().copied().chain(\n-                    liberated_sig.inputs_and_output.iter().map(|ty| (ty, DUMMY_SP)),\n-                ))\n-            }\n+            let mut assumed_wf_types: Vec<_> =\n+                tcx.assumed_wf_types(tcx.parent(def_id)).as_slice().into();\n+            assumed_wf_types.extend(liberated_sig.inputs_and_output);\n+            tcx.intern_type_list(&assumed_wf_types)\n         }\n         DefKind::Impl => match tcx.impl_trait_ref(def_id) {\n             Some(trait_ref) => {\n                 let types: Vec<_> = trait_ref.substs.types().collect();\n-                let self_span = if let Some(hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl(impl_),\n-                    ..\n-                })) = tcx.hir().get_if_local(def_id)\n-                {\n-                    impl_.self_ty.span\n-                } else {\n-                    DUMMY_SP\n-                };\n-                tcx.arena.alloc_from_iter(std::iter::zip(\n-                    types,\n-                    // FIXME: reliable way of getting trait ref substs...\n-                    [self_span].into_iter().chain(std::iter::repeat(DUMMY_SP)),\n-                ))\n+                tcx.intern_type_list(&types)\n             }\n             // Only the impl self type\n-            None => {\n-                let span = if let Some(hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl(impl_),\n-                    ..\n-                })) = tcx.hir().get_if_local(def_id)\n-                {\n-                    impl_.self_ty.span\n-                } else {\n-                    DUMMY_SP\n-                };\n-                tcx.arena.alloc_from_iter([(tcx.type_of(def_id), span)])\n-            }\n+            None => tcx.intern_type_list(&[tcx.type_of(def_id)]),\n         },\n         DefKind::AssocConst | DefKind::AssocTy => tcx.assumed_wf_types(tcx.parent(def_id)),\n         DefKind::Mod\n@@ -103,6 +56,6 @@ fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &[(Ty<'_>, Span)] {\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm\n         | DefKind::Closure\n-        | DefKind::Generator => &[],\n+        | DefKind::Generator => ty::List::empty(),\n     }\n }"}, {"sha": "a2b0222d4f395466a8b7e9e4e903f34724f30883", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -7,6 +7,7 @@ trait Trait2<'a> {\n \n fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n     //~^ ERROR the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n+    //~| ERROR the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n }\n "}, {"sha": "3dc33729d8fdb1394e8cb6869899c1cbc719bdfd", "filename": "src/test/ui/issues/issue-35570.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.stderr?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -4,6 +4,16 @@ error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n LL | fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `for<'a> (): Trait2<'a>` is not satisfied\n+  --> $DIR/issue-35570.rs:8:1\n+   |\n+LL | / fn _ice(param: Box<dyn for <'a> Trait1<<() as Trait2<'a>>::Ty>>) {\n+LL | |\n+LL | |\n+LL | |     let _e: (usize, usize) = unsafe{mem::transmute(param)};\n+LL | | }\n+   | |_^ the trait `for<'a> Trait2<'a>` is not implemented for `()`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "1106352037a080a43e02905ddd3ebe207d13b03e", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.rs?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -20,6 +20,7 @@ trait Trait2<'a, 'b> {\n // do not infer that.\n fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n     //~^ ERROR the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n+    //~| ERROR the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n {\n }\n "}, {"sha": "3fd39810d445397b1cd151b0160d1e74db31bd10", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-hr-1.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77e8eb9455264b70eb4344a404243b7c012db08/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-hr-1.stderr?ref=e77e8eb9455264b70eb4344a404243b7c012db08", "patch": "@@ -9,6 +9,21 @@ help: consider restricting type parameter `T`\n LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n    |                    ++++++++++++++++++++++++\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `for<'z> T: Trait2<'y, 'z>` is not satisfied\n+  --> $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:1\n+   |\n+LL | / fn callee<'x, 'y, T>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+LL | |\n+LL | |\n+LL | | {\n+LL | | }\n+   | |_^ the trait `for<'z> Trait2<'y, 'z>` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn callee<'x, 'y, T: for<'z> Trait2<'y, 'z>>(t: &'x dyn for<'z> Trait1< <T as Trait2<'y, 'z>>::Foo >)\n+   |                    ++++++++++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}