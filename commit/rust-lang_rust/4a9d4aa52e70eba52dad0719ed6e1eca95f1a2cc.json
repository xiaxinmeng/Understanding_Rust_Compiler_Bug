{"sha": "4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOWQ0YWE1MmU3MGViYTUyZGFkMDcxOWVkNmUxZWNhOTVmMWEyY2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T15:10:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T16:50:06Z"}, "message": "bench: Fix botched option dances. rs=demuting", "tree": {"sha": "e2b1ff2d05e1ab8e90ad17bcec048a245c6fad86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2b1ff2d05e1ab8e90ad17bcec048a245c6fad86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "html_url": "https://github.com/rust-lang/rust/commit/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b08cd4903f7b3b5bb193dec85b055f24ff09cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b08cd4903f7b3b5bb193dec85b055f24ff09cb7", "html_url": "https://github.com/rust-lang/rust/commit/9b08cd4903f7b3b5bb193dec85b055f24ff09cb7"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "12060a87850a0bbd3fbf0159cb2665bb6d9bdb60", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "patch": "@@ -19,6 +19,7 @@ extern mod std;\n use std::time;\n use std::arc;\n use std::future;\n+use core::cell::Cell;\n \n // A poor man's pipe.\n type pipe = arc::MutexARC<~[uint]>;\n@@ -77,7 +78,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Cell(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -87,19 +88,19 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan);\n+        let num_chan2 = Cell(num_chan.take());\n         let num_port = Cell(num_port);\n         let new_future = do future::spawn() {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();\n             thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        num_chan.put_back(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "56a46d3e006cc2cdedc0df5948d61e4b50eec6ad", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "patch": "@@ -71,7 +71,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = ring::init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Cell(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -81,19 +81,19 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = ring::init();\n-        let num_chan2 = Cell(num_chan);\n+        let num_chan2 = Cell(num_chan.take());\n         let num_port = Cell(num_port);\n         let new_future = do future::spawn || {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();\n             thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        num_chan.put_back(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "57d04abb414c135fb4fe47fd85267eb88a001521", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "patch": "@@ -16,6 +16,8 @@\n // This also serves as a pipes test, because ARCs are implemented with pipes.\n \n extern mod std;\n+\n+use core::cell::Cell;\n use std::time;\n use std::arc;\n use std::future;\n@@ -77,7 +79,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(num_chan);\n+    let mut num_chan = Cell(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -87,19 +89,19 @@ fn main() {\n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n         let (new_chan, num_port) = init();\n-        let num_chan2 = Cell(num_chan);\n+        let num_chan2 = Cell(num_chan.take());\n         let num_port = Cell(num_port);\n         let new_future = do future::spawn {\n             let num_chan = num_chan2.take();\n             let num_port1 = num_port.take();\n             thread_ring(i, msg_per_task, num_chan, num_port1)\n         };\n         futures.push(new_future);\n-        num_chan = Some(new_chan);\n+        num_chan.put_back(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n+    thread_ring(0, msg_per_task, num_chan.take(), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "111219974d0987b8d2fe8e7406ad0c0162d80566", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=4a9d4aa52e70eba52dad0719ed6e1eca95f1a2cc", "patch": "@@ -14,7 +14,7 @@ extern mod std;\n use std::oldmap;\n use std::oldmap::HashMap;\n use std::sort;\n-use std::cell::Cell;\n+use core::cell::Cell;\n use core::comm::*;\n \n fn print_complements() {"}]}