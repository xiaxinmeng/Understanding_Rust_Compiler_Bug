{"sha": "44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDY0MzliZmRjZGQzMzQzNWNhNDAyYWUxYjA0ZTFjMGQ2ZWI2YWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-16T18:33:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-16T18:33:38Z"}, "message": "Auto merge of #6025 - thomcc:compare_exchange_atomics, r=flip1995\n\nExtend invalid_atomic_ordering for compare_exchange{,_weak} and fetch_update\n\nchangelog: The invalid_atomic_ordering lint can now detect misuse of `compare_exchange`, `compare_exchange_weak`, and `fetch_update`.\n\n---\n\nI was surprised not to find an issue or existing support here, since these are the functions which are always hardest to get the ordering right on for me (as the allowed orderings for `fail` depend on the `success` parameter).\n\nI believe this lint now covers all atomic methods which care about their ordering now, but I could be wrong.\n\nHopefully I didn't forget to do anything for the PR!", "tree": {"sha": "b5ff708a058e7d88b86e438512f9e328e2865c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ff708a058e7d88b86e438512f9e328e2865c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "html_url": "https://github.com/rust-lang/rust/commit/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e60497fb8625331afd01769141566f15a6a34aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e60497fb8625331afd01769141566f15a6a34aa", "html_url": "https://github.com/rust-lang/rust/commit/5e60497fb8625331afd01769141566f15a6a34aa"}, {"sha": "09f7a377a663043c6f63ded70436ac0969e4abc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f7a377a663043c6f63ded70436ac0969e4abc7", "html_url": "https://github.com/rust-lang/rust/commit/09f7a377a663043c6f63ded70436ac0969e4abc7"}], "stats": {"total": 638, "additions": 631, "deletions": 7}, "files": [{"sha": "703d8a6f62bb1f07ab305dfec36e32097d10f070", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 100, "deletions": 6, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -8,7 +8,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of invalid atomic\n-    /// ordering in atomic loads/stores and memory fences.\n+    /// ordering in atomic loads/stores/exchanges/updates and\n+    /// memory fences.\n     ///\n     /// **Why is this bad?** Using an invalid atomic ordering\n     /// will cause a panic at run-time.\n@@ -17,22 +18,35 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust,no_run\n-    /// # use std::sync::atomic::{self, AtomicBool, Ordering};\n+    /// # use std::sync::atomic::{self, AtomicU8, Ordering};\n     ///\n-    /// let x = AtomicBool::new(true);\n+    /// let x = AtomicU8::new(0);\n     ///\n+    /// // Bad: `Release` and `AcqRel` cannot be used for `load`.\n     /// let _ = x.load(Ordering::Release);\n     /// let _ = x.load(Ordering::AcqRel);\n     ///\n-    /// x.store(false, Ordering::Acquire);\n-    /// x.store(false, Ordering::AcqRel);\n+    /// // Bad: `Acquire` and `AcqRel` cannot be used for `store`.\n+    /// x.store(1, Ordering::Acquire);\n+    /// x.store(2, Ordering::AcqRel);\n     ///\n+    /// // Bad: `Relaxed` cannot be used as a fence's ordering.\n     /// atomic::fence(Ordering::Relaxed);\n     /// atomic::compiler_fence(Ordering::Relaxed);\n+    ///\n+    /// // Bad: `Release` and `AcqRel` are both always invalid\n+    /// // for the failure ordering (the last arg).\n+    /// let _ = x.compare_exchange(1, 2, Ordering::SeqCst, Ordering::Release);\n+    /// let _ = x.compare_exchange_weak(2, 3, Ordering::AcqRel, Ordering::AcqRel);\n+    ///\n+    /// // Bad: The failure ordering is not allowed to be\n+    /// // stronger than the success order, and `SeqCst` is\n+    /// // stronger than `Relaxed`.\n+    /// let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |val| Some(val + val));\n     /// ```\n     pub INVALID_ATOMIC_ORDERING,\n     correctness,\n-    \"usage of invalid atomic ordering in atomic loads/stores and memory fences\"\n+    \"usage of invalid atomic ordering in atomic operations and memory fences\"\n }\n \n declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n@@ -127,9 +141,89 @@ fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n+    if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n+        cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n+    } else {\n+        None\n+    }\n+}\n+\n+fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method_path, _, args, _) = &expr.kind;\n+        let method = method_path.ident.name.as_str();\n+        if type_is_atomic(cx, &args[0]);\n+        if method == \"compare_exchange\" || method == \"compare_exchange_weak\" || method == \"fetch_update\";\n+        let (success_order_arg, failure_order_arg) = if method == \"fetch_update\" {\n+            (&args[1], &args[2])\n+        } else {\n+            (&args[3], &args[4])\n+        };\n+        if let Some(fail_ordering_def_id) = opt_ordering_defid(cx, failure_order_arg);\n+        then {\n+            // Helper type holding on to some checking and error reporting data. Has\n+            // - (success ordering name,\n+            // - list of failure orderings forbidden by the success order,\n+            // - suggestion message)\n+            type OrdLintInfo = (&'static str, &'static [&'static str], &'static str);\n+            let relaxed: OrdLintInfo = (\"Relaxed\", &[\"SeqCst\", \"Acquire\"], \"ordering mode `Relaxed`\");\n+            let acquire: OrdLintInfo = (\"Acquire\", &[\"SeqCst\"], \"ordering modes `Acquire` or `Relaxed`\");\n+            let seq_cst: OrdLintInfo = (\"SeqCst\", &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n+            let release = (\"Release\", relaxed.1, relaxed.2);\n+            let acqrel = (\"AcqRel\", acquire.1, acquire.2);\n+            let search = [relaxed, acquire, seq_cst, release, acqrel];\n+\n+            let success_lint_info = opt_ordering_defid(cx, success_order_arg)\n+                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n+                    search\n+                        .iter()\n+                        .find(|(ordering, ..)| {\n+                            match_def_path(cx, success_ord_def_id,\n+                                &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering])\n+                        })\n+                        .copied()\n+                });\n+\n+            if match_ordering_def_path(cx, fail_ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n+                // If we don't know the success order is, use what we'd suggest\n+                // if it were maximally permissive.\n+                let suggested = success_lint_info.unwrap_or(seq_cst).2;\n+                span_lint_and_help(\n+                    cx,\n+                    INVALID_ATOMIC_ORDERING,\n+                    failure_order_arg.span,\n+                    &format!(\n+                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n+                        method,\n+                    ),\n+                    None,\n+                    &format!(\"consider using {} instead\", suggested),\n+                );\n+            } else if let Some((success_ord_name, bad_ords_given_success, suggested)) = success_lint_info {\n+                if match_ordering_def_path(cx, fail_ordering_def_id, bad_ords_given_success) {\n+                    span_lint_and_help(\n+                        cx,\n+                        INVALID_ATOMIC_ORDERING,\n+                        failure_order_arg.span,\n+                        &format!(\n+                            \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n+                            method,\n+                            success_ord_name,\n+                        ),\n+                        None,\n+                        &format!(\"consider using {} instead\", suggested),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for AtomicOrdering {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         check_atomic_load_store(cx, expr);\n         check_memory_fence(cx, expr);\n+        check_atomic_compare_exchange(cx, expr);\n     }\n }"}, {"sha": "2718b14e291f2ba4aa2b0836b802169c7609fac3", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -930,7 +930,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"invalid_atomic_ordering\",\n         group: \"correctness\",\n-        desc: \"usage of invalid atomic ordering in atomic loads/stores and memory fences\",\n+        desc: \"usage of invalid atomic ordering in atomic operations and memory fences\",\n         deprecation: None,\n         module: \"atomic_ordering\",\n     },"}, {"sha": "1ddc12f9ab21341b5c93998a2ab12136a09b6e9a", "filename": "tests/ui/atomic_ordering_exchange.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.rs?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,45 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+fn main() {\n+    // `compare_exchange` (not weak) testing\n+    let x = AtomicUsize::new(0);\n+\n+    // Allowed ordering combos\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Relaxed);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::SeqCst);\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n+    let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+    let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+    let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+}"}, {"sha": "4b9bfef79748ce66008ee19963669a5c943c7c17", "filename": "tests/ui/atomic_ordering_exchange.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange.stderr?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,131 @@\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:21:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:22:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:23:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:24:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:25:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:28:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:29:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:30:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:31:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n+   |                                                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:32:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n+   |                                                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:35:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange.rs:36:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:39:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange.rs:40:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n+   |                                                         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_exchange.rs:43:57\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n+   |                                                         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange's failure ordering may not be stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_exchange.rs:44:56\n+   |\n+LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n+   |                                                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "5906990250728851196101c3da284ba9c7faedd0", "filename": "tests/ui/atomic_ordering_exchange_weak.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange_weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange_weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange_weak.rs?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,47 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+fn main() {\n+    let ptr = &mut 5;\n+    let ptr2 = &mut 10;\n+    // `compare_exchange_weak` testing\n+    let x = AtomicPtr::new(ptr);\n+\n+    // Allowed ordering combos\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Relaxed);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::SeqCst);\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n+    let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n+    let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n+}"}, {"sha": "de7026f3ffafa1ecdc9c1bc7ddcfdd1ae445a3da", "filename": "tests/ui/atomic_ordering_exchange_weak.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_exchange_weak.stderr?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,131 @@\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:23:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:24:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:25:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:26:66\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n+   |                                                                  ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:27:66\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n+   |                                                                  ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:30:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n+   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:31:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n+   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:32:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n+   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:33:66\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n+   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:34:66\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n+   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:37:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n+   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:38:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:41:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:42:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n+   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:45:67\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n+   |                                                                   ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_exchange_weak.rs:46:66\n+   |\n+LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n+   |                                                                  ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "550bdb001e4cd1270b3bc6d32fd5e53c04f28bfe", "filename": "tests/ui/atomic_ordering_fetch_update.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_fetch_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.rs?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,45 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicIsize, Ordering};\n+\n+fn main() {\n+    // `fetch_update` testing\n+    let x = AtomicIsize::new(0);\n+\n+    // Allowed ordering combos\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Relaxed, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |old| Some(old + 1));\n+\n+    // AcqRel is always forbidden as a failure ordering\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n+\n+    // Release is always forbidden as a failure ordering\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n+\n+    // Release success order forbids failure order of Acquire or SeqCst\n+    let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n+\n+    // Relaxed success order also forbids failure order of Acquire or SeqCst\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+\n+    // Acquire/AcqRel forbids failure order of SeqCst\n+    let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n+    let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n+}"}, {"sha": "694548ece97b250b52d756ee143437646e1a7353", "filename": "tests/ui/atomic_ordering_fetch_update.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab/tests%2Fui%2Fatomic_ordering_fetch_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_fetch_update.stderr?ref=44d6439bfdcdd33435ca402ae1b04e1c0d6eb6ab", "patch": "@@ -0,0 +1,131 @@\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:21:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:22:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:23:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:24:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:25:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:28:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:29:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:30:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:31:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:32:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_fetch_update.rs:35:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n+  --> $DIR/atomic_ordering_fetch_update.rs:36:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_fetch_update.rs:39:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n+  --> $DIR/atomic_ordering_fetch_update.rs:40:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering mode `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `Acquire`\n+  --> $DIR/atomic_ordering_fetch_update.rs:43:47\n+   |\n+LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: fetch_update's failure ordering may not be stronger than the success ordering of `AcqRel`\n+  --> $DIR/atomic_ordering_fetch_update.rs:44:46\n+   |\n+LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n+   |                                              ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+\n+error: aborting due to 16 previous errors\n+"}]}