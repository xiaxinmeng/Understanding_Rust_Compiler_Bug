{"sha": "44d1b149d2831192503a7797b98f108a3b5b1032", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZDFiMTQ5ZDI4MzExOTI1MDNhNzc5N2I5OGYxMDhhM2I1YjEwMzI=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-23T17:47:15Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-24T21:45:59Z"}, "message": "Separate panic logging code\n\nMove the panic logging code to a function separate from `on_panic` and\nsimplify the code to decide whether the backtrace should be logged.", "tree": {"sha": "005d3a5bded3563570b7857a064ec6db0eb7ee25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005d3a5bded3563570b7857a064ec6db0eb7ee25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44d1b149d2831192503a7797b98f108a3b5b1032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44d1b149d2831192503a7797b98f108a3b5b1032", "html_url": "https://github.com/rust-lang/rust/commit/44d1b149d2831192503a7797b98f108a3b5b1032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44d1b149d2831192503a7797b98f108a3b5b1032/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ca1ab1ec32ac99a61312ec07d66db5f3657040", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ca1ab1ec32ac99a61312ec07d66db5f3657040", "html_url": "https://github.com/rust-lang/rust/commit/07ca1ab1ec32ac99a61312ec07d66db5f3657040"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "01a3900f24fc2d8974bf74572a9a00e5fdd0db34", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/44d1b149d2831192503a7797b98f108a3b5b1032/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44d1b149d2831192503a7797b98f108a3b5b1032/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=44d1b149d2831192503a7797b98f108a3b5b1032", "patch": "@@ -24,7 +24,8 @@ thread_local! {\n     }\n }\n \n-pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n+fn log_panic(obj: &(Any+Send), file: &'static str, line: u32,\n+             log_backtrace: bool) {\n     let msg = match obj.downcast_ref::<&'static str>() {\n         Some(s) => *s,\n         None => match obj.downcast_ref::<String>() {\n@@ -35,37 +36,33 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n     let mut err = Stderr::new().ok();\n     let thread = thread_info::current_thread();\n     let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n+\n+    let write = |err: &mut ::io::Write| {\n+        let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n+                         name, msg, file, line);\n+        if log_backtrace {\n+            let _ = backtrace::write(err);\n+        }\n+    };\n+\n     let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n     match (prev, err.as_mut()) {\n         (Some(mut stderr), _) => {\n             // FIXME: what to do when the thread printing panics?\n-            let _ = writeln!(stderr,\n-                             \"thread '{}' panicked at '{}', {}:{}\\n\",\n-                             name, msg, file, line);\n-            if backtrace::log_enabled() {\n-                let _ = backtrace::write(&mut *stderr);\n-            }\n+            write(&mut *stderr);\n             let mut s = Some(stderr);\n             LOCAL_STDERR.with(|slot| {\n                 *slot.borrow_mut() = s.take();\n             });\n         }\n-        (None, Some(ref mut err)) => {\n-            let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n-                             name, msg, file, line);\n-            if backtrace::log_enabled() {\n-                let _ = backtrace::write(err);\n-            }\n-        }\n+        (None, Some(ref mut err)) => { write(err) }\n         _ => {}\n     }\n+}\n \n-    // If this is a double panic, make sure that we printed a backtrace\n-    // for this panic.\n-    match err {\n-        Some(ref mut err) if unwind::panicking() && !backtrace::log_enabled() => {\n-            let _ = backtrace::write(err);\n-        }\n-        _ => {}\n-    }\n+pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n+    // If this is a double panic, make sure that we print a backtrace\n+    // for this panic. Otherwise only print it if logging is enabled.\n+    let log_backtrace = unwind::panicking() || backtrace::log_enabled();\n+    log_panic(obj, file, line, log_backtrace);\n }"}]}