{"sha": "7eeb8c4eb8611389463f8c98dfc89b673010472b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZWI4YzRlYjg2MTEzODk0NjNmOGM5OGRmYzg5YjY3MzAxMDQ3MmI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-04-11T14:31:27Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-04-11T14:31:27Z"}, "message": "Rollup merge of #32768 - GuillaumeGomez:slice_doc, r=steveklabnik\n\nAdd doc examples for Iter and IterMut\n\nFixes #29374.\n\nr? @steveklabnik", "tree": {"sha": "96007202ed7666524faeeb4c296bb8333a0c4949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96007202ed7666524faeeb4c296bb8333a0c4949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eeb8c4eb8611389463f8c98dfc89b673010472b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eeb8c4eb8611389463f8c98dfc89b673010472b", "html_url": "https://github.com/rust-lang/rust/commit/7eeb8c4eb8611389463f8c98dfc89b673010472b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eeb8c4eb8611389463f8c98dfc89b673010472b/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e2eb14439792fb5afc909dba32b73b94855b97", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e2eb14439792fb5afc909dba32b73b94855b97", "html_url": "https://github.com/rust-lang/rust/commit/87e2eb14439792fb5afc909dba32b73b94855b97"}, {"sha": "69289c93666cad424627c0d696841c8f78e96448", "url": "https://api.github.com/repos/rust-lang/rust/commits/69289c93666cad424627c0d696841c8f78e96448", "html_url": "https://github.com/rust-lang/rust/commit/69289c93666cad424627c0d696841c8f78e96448"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "f21af7d917e20ef15a2eac06972c00a9bc069d2e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7eeb8c4eb8611389463f8c98dfc89b673010472b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eeb8c4eb8611389463f8c98dfc89b673010472b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=7eeb8c4eb8611389463f8c98dfc89b673010472b", "patch": "@@ -871,6 +871,20 @@ macro_rules! make_mut_slice {\n }\n \n /// Immutable slice iterator\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // First, we declare a type which has `iter` method to get the `Iter` struct (&[usize here]):\n+/// let slice = &[1, 2, 3];\n+///\n+/// // Then, we iterate over it:\n+/// for element in slice.iter() {\n+///     println!(\"{}\", element);\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ptr: *const T,\n@@ -897,6 +911,26 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // First, we declare a type which has the `iter` method to get the `Iter`\n+    /// // struct (&[usize here]):\n+    /// let slice = &[1, 2, 3];\n+    ///\n+    /// // Then, we get the iterator:\n+    /// let mut iter = slice.iter();\n+    /// // So if we print what `as_slice` method returns here, we have \"[1, 2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    ///\n+    /// // Next, we move to the second element of the slice:\n+    /// iter.next();\n+    /// // Now `as_slice` returns \"[2, 3]\":\n+    /// println!(\"{:?}\", iter.as_slice());\n+    /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(self.ptr, self.end)\n@@ -928,6 +962,24 @@ impl<'a, T> Clone for Iter<'a, T> {\n }\n \n /// Mutable slice iterator.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n+/// // struct (&[usize here]):\n+/// let mut slice = &mut [1, 2, 3];\n+///\n+/// // Then, we iterate over it and increment each element value:\n+/// for element in slice.iter_mut() {\n+///     *element += 1;\n+/// }\n+///\n+/// // We now have \"[2, 3, 4]\":\n+/// println!(\"{:?}\", slice);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ptr: *mut T,\n@@ -956,6 +1008,35 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // First, we declare a type which has `iter_mut` method to get the `IterMut`\n+    /// // struct (&[usize here]):\n+    /// let mut slice = &mut [1, 2, 3];\n+    ///\n+    /// {\n+    ///     // Then, we get the iterator:\n+    ///     let mut iter = slice.iter_mut();\n+    ///     // We move to next element:\n+    ///     iter.next();\n+    ///     // So if we print what `into_slice` method returns here, we have \"[2, 3]\":\n+    ///     println!(\"{:?}\", iter.into_slice());\n+    /// }\n+    ///\n+    /// // Now let's modify a value of the slice:\n+    /// {\n+    ///     // First we get back the iterator:\n+    ///     let mut iter = slice.iter_mut();\n+    ///     // We change the value of the first element of the slice returned by the `next` method:\n+    ///     *iter.next().unwrap() += 1;\n+    /// }\n+    /// // Now slice is \"[2, 2, 3]\":\n+    /// println!(\"{:?}\", slice);\n+    /// ```\n     #[stable(feature = \"iter_to_slice\", since = \"1.4.0\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_mut_slice!(self.ptr, self.end)"}]}