{"sha": "735a610f47b029d6620abfda04615f70f49c5ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNWE2MTBmNDdiMDI5ZDY2MjBhYmZkYTA0NjE1ZjcwZjQ5YzVlYzY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-29T10:57:17Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-29T10:57:17Z"}, "message": "Only memoize const fn calls during const eval\n\nMiri and other engines may want to execute the function in order to detect UB inside of them.", "tree": {"sha": "6910a12a0d587f562bf79d36b679e298b0f3e469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6910a12a0d587f562bf79d36b679e298b0f3e469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735a610f47b029d6620abfda04615f70f49c5ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735a610f47b029d6620abfda04615f70f49c5ec6", "html_url": "https://github.com/rust-lang/rust/commit/735a610f47b029d6620abfda04615f70f49c5ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735a610f47b029d6620abfda04615f70f49c5ec6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4752c05af4a5f392de026f9ae1877eae030be359", "url": "https://api.github.com/repos/rust-lang/rust/commits/4752c05af4a5f392de026f9ae1877eae030be359", "html_url": "https://github.com/rust-lang/rust/commit/4752c05af4a5f392de026f9ae1877eae030be359"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "005d3b217eb3de22d086ab20cf9d62b0a5edca14", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/735a610f47b029d6620abfda04615f70f49c5ec6/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735a610f47b029d6620abfda04615f70f49c5ec6/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=735a610f47b029d6620abfda04615f70f49c5ec6", "patch": "@@ -336,6 +336,20 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _unwind: Option<mir::BasicBlock> // unwinding is not supported in consts\n     ) -> InterpResult<'tcx, Option<&'mir mir::Body<'tcx>>> {\n         debug!(\"eval_fn_call: {:?}\", instance);\n+\n+        // If this function is a `const fn` then as an optimization we can query this\n+        // evaluation immediately.\n+        //\n+        // For the moment we only do this for functions which take no arguments\n+        // (or all arguments are ZSTs) so that we don't memoize too much.\n+        if ecx.tcx.is_const_fn_raw(instance.def.def_id()) &&\n+            args.iter().all(|a| a.layout.is_zst())\n+        {\n+            let gid = GlobalId { instance, promoted: None };\n+            ecx.eval_const_fn_call(gid, ret)?;\n+            return Ok(None);\n+        }\n+\n         // Only check non-glue functions\n         if let ty::InstanceDef::Item(def_id) = instance.def {\n             // Execution might have wandered off into other crates, so we cannot do a stability-"}, {"sha": "ed037570d6db89624b74b5cc9fffcd8a3ff57236", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/735a610f47b029d6620abfda04615f70f49c5ec6/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735a610f47b029d6620abfda04615f70f49c5ec6/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=735a610f47b029d6620abfda04615f70f49c5ec6", "patch": "@@ -284,18 +284,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::DropGlue(..) |\n             ty::InstanceDef::CloneShim(..) |\n             ty::InstanceDef::Item(_) => {\n-                // If this function is a `const fn` then as an optimization we can query this\n-                // evaluation immediately.\n-                //\n-                // For the moment we only do this for functions which take no arguments\n-                // (or all arguments are ZSTs) so that we don't memoize too much.\n-                if self.tcx.is_const_fn_raw(instance.def.def_id()) &&\n-                   args.iter().all(|a| a.layout.is_zst())\n-                {\n-                    let gid = GlobalId { instance, promoted: None };\n-                    return self.eval_const_fn_call(gid, ret);\n-                }\n-\n                 // We need MIR for this fn\n                 let body = match M::find_fn(self, instance, args, ret, unwind)? {\n                     Some(body) => body,\n@@ -463,7 +451,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Evaluate a const function where all arguments (if any) are zero-sized types.\n     /// The evaluation is memoized thanks to the query system.\n-    fn eval_const_fn_call(\n+    pub (crate) fn eval_const_fn_call(\n         &mut self,\n         gid: GlobalId<'tcx>,\n         ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,"}]}